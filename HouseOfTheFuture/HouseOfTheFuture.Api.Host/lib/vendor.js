!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e="length"in t&&t.length,n=Z.type(t);return"function"===n||Z.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}function r(t,e,n){if(Z.isFunction(e))return Z.grep(t,function(t,r){return!!e.call(t,r,t)!==n});if(e.nodeType)return Z.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(st.test(e))return Z.filter(e,t,n);e=Z.filter(e,t)}return Z.grep(t,function(t){return U.call(e,t)>=0!==n})}function i(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e=dt[t]={};return Z.each(t.match(pt)||[],function(t,n){e[n]=!0}),e}function a(){K.removeEventListener("DOMContentLoaded",a,!1),t.removeEventListener("load",a,!1),Z.ready()}function s(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=Z.expando+s.uid++}function u(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(bt,"-$1").toLowerCase(),n=t.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:$t.test(n)?Z.parseJSON(n):n}catch(i){}yt.set(t,e,n)}else n=void 0;return n}function c(){return!0}function l(){return!1}function f(){try{return K.activeElement}catch(t){}}function h(t,e){return Z.nodeName(t,"table")&&Z.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function p(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function d(t){var e=Ft.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function g(t,e){for(var n=0,r=t.length;r>n;n++)mt.set(t[n],"globalEval",!e||mt.get(e[n],"globalEval"))}function v(t,e){var n,r,i,o,a,s,u,c;if(1===e.nodeType){if(mt.hasData(t)&&(o=mt.access(t),a=mt.set(e,o),c=o.events)){delete a.handle,a.events={};for(i in c)for(n=0,r=c[i].length;r>n;n++)Z.event.add(e,i,c[i][n])}yt.hasData(t)&&(s=yt.access(t),u=Z.extend({},s),yt.set(e,u))}}function m(t,e){var n=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&Z.nodeName(t,e)?Z.merge([t],n):n}function y(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Ct.test(t.type)?e.checked=t.checked:("input"===n||"textarea"===n)&&(e.defaultValue=t.defaultValue)}function $(e,n){var r,i=Z(n.createElement(e)).appendTo(n.body),o=t.getDefaultComputedStyle&&(r=t.getDefaultComputedStyle(i[0]))?r.display:Z.css(i[0],"display");return i.detach(),o}function b(t){var e=K,n=qt[t];return n||(n=$(t,e),"none"!==n&&n||(It=(It||Z("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=It[0].contentDocument,e.write(),e.close(),n=$(t,e),It.detach()),qt[t]=n),n}function w(t,e,n){var r,i,o,a,s=t.style;return n=n||Wt(t),n&&(a=n.getPropertyValue(e)||n[e]),n&&(""!==a||Z.contains(t.ownerDocument,t)||(a=Z.style(t,e)),Vt.test(a)&&Ht.test(e)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function x(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function S(t,e){if(e in t)return e;for(var n=e[0].toUpperCase()+e.slice(1),r=e,i=Yt.length;i--;)if(e=Yt[i]+n,e in t)return e;return r}function C(t,e,n){var r=zt.exec(e);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):e}function k(t,e,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===e?1:0,a=0;4>o;o+=2)"margin"===n&&(a+=Z.css(t,n+xt[o],!0,i)),r?("content"===n&&(a-=Z.css(t,"padding"+xt[o],!0,i)),"margin"!==n&&(a-=Z.css(t,"border"+xt[o]+"Width",!0,i))):(a+=Z.css(t,"padding"+xt[o],!0,i),"padding"!==n&&(a+=Z.css(t,"border"+xt[o]+"Width",!0,i)));return a}function E(t,e,n){var r=!0,i="width"===e?t.offsetWidth:t.offsetHeight,o=Wt(t),a="border-box"===Z.css(t,"boxSizing",!1,o);if(0>=i||null==i){if(i=w(t,e,o),(0>i||null==i)&&(i=t.style[e]),Vt.test(i))return i;r=a&&(Q.boxSizingReliable()||i===t.style[e]),i=parseFloat(i)||0}return i+k(t,e,n||(a?"border":"content"),r,o)+"px"}function T(t,e){for(var n,r,i,o=[],a=0,s=t.length;s>a;a++)r=t[a],r.style&&(o[a]=mt.get(r,"olddisplay"),n=r.style.display,e?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&St(r)&&(o[a]=mt.access(r,"olddisplay",b(r.nodeName)))):(i=St(r),"none"===n&&i||mt.set(r,"olddisplay",i?n:Z.css(r,"display"))));for(a=0;s>a;a++)r=t[a],r.style&&(e&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=e?o[a]||"":"none"));return t}function A(t,e,n,r,i){return new A.prototype.init(t,e,n,r,i)}function P(){return setTimeout(function(){Qt=void 0}),Qt=Z.now()}function O(t,e){var n,r=0,i={height:t};for(e=e?1:0;4>r;r+=2-e)n=xt[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function j(t,e,n){for(var r,i=(ne[e]||[]).concat(ne["*"]),o=0,a=i.length;a>o;o++)if(r=i[o].call(n,e,t))return r}function M(t,e,n){var r,i,o,a,s,u,c,l,f=this,h={},p=t.style,d=t.nodeType&&St(t),g=mt.get(t,"fxshow");n.queue||(s=Z._queueHooks(t,"fx"),null==s.unqueued&&(s.unqueued=0,u=s.empty.fire,s.empty.fire=function(){s.unqueued||u()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,Z.queue(t,"fx").length||s.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],c=Z.css(t,"display"),l="none"===c?mt.get(t,"olddisplay")||b(t.nodeName):c,"inline"===l&&"none"===Z.css(t,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",f.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in e)if(i=e[r],Jt.exec(i)){if(delete e[r],o=o||"toggle"===i,i===(d?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;d=!0}h[r]=g&&g[r]||Z.style(t,r)}else c=void 0;if(Z.isEmptyObject(h))"inline"===("none"===c?b(t.nodeName):c)&&(p.display=c);else{g?"hidden"in g&&(d=g.hidden):g=mt.access(t,"fxshow",{}),o&&(g.hidden=!d),d?Z(t).show():f.done(function(){Z(t).hide()}),f.done(function(){var e;mt.remove(t,"fxshow");for(e in h)Z.style(t,e,h[e])});for(r in h)a=j(d?g[r]:0,r,f),r in g||(g[r]=a.start,d&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function R(t,e){var n,r,i,o,a;for(n in t)if(r=Z.camelCase(n),i=e[r],o=t[n],Z.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),a=Z.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete t[r];for(n in o)n in t||(t[n]=o[n],e[n]=i)}else e[r]=i}function L(t,e,n){var r,i,o=0,a=ee.length,s=Z.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var e=Qt||P(),n=Math.max(0,c.startTime+c.duration-e),r=n/c.duration||0,o=1-r,a=0,u=c.tweens.length;u>a;a++)c.tweens[a].run(o);return s.notifyWith(t,[c,o,n]),1>o&&u?n:(s.resolveWith(t,[c]),!1)},c=s.promise({elem:t,props:Z.extend({},e),opts:Z.extend(!0,{specialEasing:{}},n),originalProperties:e,originalOptions:n,startTime:Qt||P(),duration:n.duration,tweens:[],createTween:function(e,n){var r=Z.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(r),r},stop:function(e){var n=0,r=e?c.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)c.tweens[n].run(1);return e?s.resolveWith(t,[c,e]):s.rejectWith(t,[c,e]),this}}),l=c.props;for(R(l,c.opts.specialEasing);a>o;o++)if(r=ee[o].call(c,t,l,c.opts))return r;return Z.map(l,j,c),Z.isFunction(c.opts.start)&&c.opts.start.call(t,c),Z.fx.timer(Z.extend(u,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function N(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(pt)||[];if(Z.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function F(t,e,n,r){function i(s){var u;return o[s]=!0,Z.each(t[s]||[],function(t,s){var c=s(e,n,r);return"string"!=typeof c||a||o[c]?a?!(u=c):void 0:(e.dataTypes.unshift(c),i(c),!1)}),u}var o={},a=t===$e;return i(e.dataTypes[0])||!o["*"]&&i("*")}function D(t,e){var n,r,i=Z.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&Z.extend(!0,t,r),t}function _(t,e,n){for(var r,i,o,a,s=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||t.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function I(t,e,n,r){var i,o,a,s,u,c={},l=t.dataTypes.slice();if(l[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(o=l.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(a=c[u+" "+o]||c["* "+o],!a)for(i in c)if(s=i.split(" "),s[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){a===!0?a=c[i]:c[i]!==!0&&(o=s[0],l.unshift(s[1]));break}if(a!==!0)if(a&&t["throws"])e=a(e);else try{e=a(e)}catch(f){return{state:"parsererror",error:a?f:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}function q(t,e,n,r){var i;if(Z.isArray(e))Z.each(e,function(e,i){n||Ce.test(t)?r(t,i):q(t+"["+("object"==typeof i?e:"")+"]",i,n,r)});else if(n||"object"!==Z.type(e))r(t,e);else for(i in e)q(t+"["+i+"]",e[i],n,r)}function H(t){return Z.isWindow(t)?t:9===t.nodeType&&t.defaultView}var V=[],W=V.slice,B=V.concat,z=V.push,U=V.indexOf,X={},G=X.toString,Y=X.hasOwnProperty,Q={},K=t.document,J="2.1.4",Z=function(t,e){return new Z.fn.init(t,e)},tt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,et=/^-ms-/,nt=/-([\da-z])/gi,rt=function(t,e){return e.toUpperCase()};Z.fn=Z.prototype={jquery:J,constructor:Z,selector:"",length:0,toArray:function(){return W.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:W.call(this)},pushStack:function(t){var e=Z.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return Z.each(this,t,e)},map:function(t){return this.pushStack(Z.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(W.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:z,sort:V.sort,splice:V.splice},Z.extend=Z.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||Z.isFunction(a)||(a={}),s===u&&(a=this,s--);u>s;s++)if(null!=(t=arguments[s]))for(e in t)n=a[e],r=t[e],a!==r&&(c&&r&&(Z.isPlainObject(r)||(i=Z.isArray(r)))?(i?(i=!1,o=n&&Z.isArray(n)?n:[]):o=n&&Z.isPlainObject(n)?n:{},a[e]=Z.extend(c,o,r)):void 0!==r&&(a[e]=r));return a},Z.extend({expando:"jQuery"+(J+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===Z.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!Z.isArray(t)&&t-parseFloat(t)+1>=0},isPlainObject:function(t){return"object"!==Z.type(t)||t.nodeType||Z.isWindow(t)?!1:t.constructor&&!Y.call(t.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?X[G.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;t=Z.trim(t),t&&(1===t.indexOf("use strict")?(e=K.createElement("script"),e.text=t,K.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(et,"ms-").replace(nt,rt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,r){var i,o=0,a=t.length,s=n(t);if(r){if(s)for(;a>o&&(i=e.apply(t[o],r),i!==!1);o++);else for(o in t)if(i=e.apply(t[o],r),i===!1)break}else if(s)for(;a>o&&(i=e.call(t[o],o,t[o]),i!==!1);o++);else for(o in t)if(i=e.call(t[o],o,t[o]),i===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(tt,"")},makeArray:function(t,e){var r=e||[];return null!=t&&(n(Object(t))?Z.merge(r,"string"==typeof t?[t]:t):z.call(r,t)),r},inArray:function(t,e,n){return null==e?-1:U.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;n>r;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r,i=[],o=0,a=t.length,s=!n;a>o;o++)r=!e(t[o],o),r!==s&&i.push(t[o]);return i},map:function(t,e,r){var i,o=0,a=t.length,s=n(t),u=[];if(s)for(;a>o;o++)i=e(t[o],o,r),null!=i&&u.push(i);else for(o in t)i=e(t[o],o,r),null!=i&&u.push(i);return B.apply([],u)},guid:1,proxy:function(t,e){var n,r,i;return"string"==typeof e&&(n=t[e],e=t,t=n),Z.isFunction(t)?(r=W.call(arguments,2),i=function(){return t.apply(e||this,r.concat(W.call(arguments)))},i.guid=t.guid=t.guid||Z.guid++,i):void 0},now:Date.now,support:Q}),Z.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){X["[object "+e+"]"]=e.toLowerCase()});var it=function(t){function e(t,e,n,r){var i,o,a,s,u,c,f,p,d,g;if((e?e.ownerDocument||e:q)!==M&&j(e),e=e||M,n=n||[],s=e.nodeType,"string"!=typeof t||!t||1!==s&&9!==s&&11!==s)return n;if(!r&&L){if(11!==s&&(i=yt.exec(t)))if(a=i[1]){if(9===s){if(o=e.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(e.ownerDocument&&(o=e.ownerDocument.getElementById(a))&&_(e,o)&&o.id===a)return n.push(o),n}else{if(i[2])return J.apply(n,e.getElementsByTagName(t)),n;if((a=i[3])&&w.getElementsByClassName)return J.apply(n,e.getElementsByClassName(a)),n}if(w.qsa&&(!N||!N.test(t))){if(p=f=I,d=e,g=1!==s&&t,1===s&&"object"!==e.nodeName.toLowerCase()){for(c=k(t),(f=e.getAttribute("id"))?p=f.replace(bt,"\\$&"):e.setAttribute("id",p),p="[id='"+p+"'] ",u=c.length;u--;)c[u]=p+h(c[u]);d=$t.test(t)&&l(e.parentNode)||e,g=c.join(",")}if(g)try{return J.apply(n,d.querySelectorAll(g)),n}catch(v){}finally{f||e.removeAttribute("id")}}}return T(t.replace(ut,"$1"),e,n,r)}function n(){function t(n,r){return e.push(n+" ")>x.cacheLength&&delete t[e.shift()],t[n+" "]=r}var e=[];return t}function r(t){return t[I]=!0,t}function i(t){var e=M.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),r=t.length;r--;)x.attrHandle[n[r]]=e}function a(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||X)-(~t.sourceIndex||X);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function s(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function u(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function c(t){return r(function(e){return e=+e,r(function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function l(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function f(){}function h(t){for(var e=0,n=t.length,r="";n>e;e++)r+=t[e].value;return r}function p(t,e,n){var r=e.dir,i=n&&"parentNode"===r,o=V++;return e.first?function(e,n,o){for(;e=e[r];)if(1===e.nodeType||i)return t(e,n,o)}:function(e,n,a){var s,u,c=[H,o];if(a){for(;e=e[r];)if((1===e.nodeType||i)&&t(e,n,a))return!0}else for(;e=e[r];)if(1===e.nodeType||i){if(u=e[I]||(e[I]={}),(s=u[r])&&s[0]===H&&s[1]===o)return c[2]=s[2];if(u[r]=c,c[2]=t(e,n,a))return!0}}}function d(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function g(t,n,r){for(var i=0,o=n.length;o>i;i++)e(t,n[i],r);return r}function v(t,e,n,r,i){for(var o,a=[],s=0,u=t.length,c=null!=e;u>s;s++)(o=t[s])&&(!n||n(o,r,i))&&(a.push(o),c&&e.push(s));return a}function m(t,e,n,i,o,a){return i&&!i[I]&&(i=m(i)),o&&!o[I]&&(o=m(o,a)),r(function(r,a,s,u){var c,l,f,h=[],p=[],d=a.length,m=r||g(e||"*",s.nodeType?[s]:s,[]),y=!t||!r&&e?m:v(m,h,t,s,u),$=n?o||(r?t:d||i)?[]:a:y;if(n&&n(y,$,s,u),i)for(c=v($,p),i(c,[],s,u),l=c.length;l--;)(f=c[l])&&($[p[l]]=!(y[p[l]]=f));if(r){if(o||t){if(o){for(c=[],l=$.length;l--;)(f=$[l])&&c.push(y[l]=f);o(null,$=[],c,u)}for(l=$.length;l--;)(f=$[l])&&(c=o?tt(r,f):h[l])>-1&&(r[c]=!(a[c]=f))}}else $=v($===a?$.splice(d,$.length):$),o?o(null,a,$,u):J.apply(a,$)})}function y(t){for(var e,n,r,i=t.length,o=x.relative[t[0].type],a=o||x.relative[" "],s=o?1:0,u=p(function(t){return t===e},a,!0),c=p(function(t){return tt(e,t)>-1},a,!0),l=[function(t,n,r){var i=!o&&(r||n!==A)||((e=n).nodeType?u(t,n,r):c(t,n,r));return e=null,i}];i>s;s++)if(n=x.relative[t[s].type])l=[p(d(l),n)];else{if(n=x.filter[t[s].type].apply(null,t[s].matches),n[I]){for(r=++s;i>r&&!x.relative[t[r].type];r++);return m(s>1&&d(l),s>1&&h(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(ut,"$1"),n,r>s&&y(t.slice(s,r)),i>r&&y(t=t.slice(r)),i>r&&h(t))}l.push(n)}return d(l)}function $(t,n){var i=n.length>0,o=t.length>0,a=function(r,a,s,u,c){var l,f,h,p=0,d="0",g=r&&[],m=[],y=A,$=r||o&&x.find.TAG("*",c),b=H+=null==y?1:Math.random()||.1,w=$.length;for(c&&(A=a!==M&&a);d!==w&&null!=(l=$[d]);d++){if(o&&l){for(f=0;h=t[f++];)if(h(l,a,s)){u.push(l);break}c&&(H=b)}i&&((l=!h&&l)&&p--,r&&g.push(l))}if(p+=d,i&&d!==p){for(f=0;h=n[f++];)h(g,m,a,s);if(r){if(p>0)for(;d--;)g[d]||m[d]||(m[d]=Q.call(u));m=v(m)}J.apply(u,m),c&&!r&&m.length>0&&p+n.length>1&&e.uniqueSort(u)}return c&&(H=b,A=y),g};return i?r(a):a}var b,w,x,S,C,k,E,T,A,P,O,j,M,R,L,N,F,D,_,I="sizzle"+1*new Date,q=t.document,H=0,V=0,W=n(),B=n(),z=n(),U=function(t,e){return t===e&&(O=!0),0},X=1<<31,G={}.hasOwnProperty,Y=[],Q=Y.pop,K=Y.push,J=Y.push,Z=Y.slice,tt=function(t,e){for(var n=0,r=t.length;r>n;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",it=rt.replace("w","w#"),ot="\\["+nt+"*("+rt+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+it+"))|)"+nt+"*\\]",at=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ot+")*)|.*)\\)|)",st=new RegExp(nt+"+","g"),ut=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ct=new RegExp("^"+nt+"*,"+nt+"*"),lt=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ft=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ht=new RegExp(at),pt=new RegExp("^"+it+"$"),dt={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt.replace("w","w*")+")"),ATTR:new RegExp("^"+ot),PSEUDO:new RegExp("^"+at),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},gt=/^(?:input|select|textarea|button)$/i,vt=/^h\d$/i,mt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$t=/[+~]/,bt=/'|\\/g,wt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),xt=function(t,e,n){var r="0x"+e-65536;return r!==r||n?e:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},St=function(){j()};try{J.apply(Y=Z.call(q.childNodes),q.childNodes),Y[q.childNodes.length].nodeType}catch(Ct){J={apply:Y.length?function(t,e){K.apply(t,Z.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}w=e.support={},C=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},j=e.setDocument=function(t){var e,n,r=t?t.ownerDocument||t:q;return r!==M&&9===r.nodeType&&r.documentElement?(M=r,R=r.documentElement,n=r.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",St,!1):n.attachEvent&&n.attachEvent("onunload",St)),L=!C(r),w.attributes=i(function(t){return t.className="i",!t.getAttribute("className")}),w.getElementsByTagName=i(function(t){return t.appendChild(r.createComment("")),!t.getElementsByTagName("*").length}),w.getElementsByClassName=mt.test(r.getElementsByClassName),w.getById=i(function(t){return R.appendChild(t).id=I,!r.getElementsByName||!r.getElementsByName(I).length}),w.getById?(x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&L){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},x.filter.ID=function(t){var e=t.replace(wt,xt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(wt,xt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),x.find.TAG=w.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):w.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=w.getElementsByClassName&&function(t,e){return L?e.getElementsByClassName(t):void 0},F=[],N=[],(w.qsa=mt.test(r.querySelectorAll))&&(i(function(t){R.appendChild(t).innerHTML="<a id='"+I+"'></a><select id='"+I+"-\f]' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&N.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||N.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+I+"-]").length||N.push("~="),t.querySelectorAll(":checked").length||N.push(":checked"),t.querySelectorAll("a#"+I+"+*").length||N.push(".#.+[+~]")}),i(function(t){var e=r.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&N.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||N.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),N.push(",.*:")})),(w.matchesSelector=mt.test(D=R.matches||R.webkitMatchesSelector||R.mozMatchesSelector||R.oMatchesSelector||R.msMatchesSelector))&&i(function(t){w.disconnectedMatch=D.call(t,"div"),D.call(t,"[s!='']:x"),F.push("!=",at)}),N=N.length&&new RegExp(N.join("|")),F=F.length&&new RegExp(F.join("|")),e=mt.test(R.compareDocumentPosition),_=e||mt.test(R.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},U=e?function(t,e){if(t===e)return O=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!w.sortDetached&&e.compareDocumentPosition(t)===n?t===r||t.ownerDocument===q&&_(q,t)?-1:e===r||e.ownerDocument===q&&_(q,e)?1:P?tt(P,t)-tt(P,e):0:4&n?-1:1)}:function(t,e){if(t===e)return O=!0,0;var n,i=0,o=t.parentNode,s=e.parentNode,u=[t],c=[e];if(!o||!s)return t===r?-1:e===r?1:o?-1:s?1:P?tt(P,t)-tt(P,e):0;if(o===s)return a(t,e);for(n=t;n=n.parentNode;)u.unshift(n);for(n=e;n=n.parentNode;)c.unshift(n);for(;u[i]===c[i];)i++;return i?a(u[i],c[i]):u[i]===q?-1:c[i]===q?1:0},r):M},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==M&&j(t),n=n.replace(ft,"='$1']"),w.matchesSelector&&L&&(!F||!F.test(n))&&(!N||!N.test(n)))try{var r=D.call(t,n);if(r||w.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(i){}return e(n,M,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==M&&j(t),_(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==M&&j(t);var n=x.attrHandle[e.toLowerCase()],r=n&&G.call(x.attrHandle,e.toLowerCase())?n(t,e,!L):void 0;return void 0!==r?r:w.attributes||!L?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],r=0,i=0;if(O=!w.detectDuplicates,P=!w.sortStable&&t.slice(0),t.sort(U),O){for(;e=t[i++];)e===t[i]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}return P=null,t},S=e.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=S(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[r++];)n+=S(e);return n},x=e.selectors={cacheLength:50,createPseudo:r,match:dt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(wt,xt),t[3]=(t[3]||t[4]||t[5]||"").replace(wt,xt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return dt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ht.test(n)&&(e=k(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(wt,xt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(i){var o=e.attr(i,t);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(st," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,u){var c,l,f,h,p,d,g=o!==a?"nextSibling":"previousSibling",v=e.parentNode,m=s&&e.nodeName.toLowerCase(),y=!u&&!s;if(v){if(o){for(;g;){for(f=e;f=f[g];)if(s?f.nodeName.toLowerCase()===m:1===f.nodeType)return!1;d=g="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?v.firstChild:v.lastChild],a&&y){for(l=v[I]||(v[I]={}),c=l[t]||[],p=c[0]===H&&c[1],h=c[0]===H&&c[2],f=p&&v.childNodes[p];f=++p&&f&&f[g]||(h=p=0)||d.pop();)if(1===f.nodeType&&++h&&f===e){l[t]=[H,p,h];break}}else if(y&&(c=(e[I]||(e[I]={}))[t])&&c[0]===H)h=c[1];else for(;(f=++p&&f&&f[g]||(h=p=0)||d.pop())&&((s?f.nodeName.toLowerCase()!==m:1!==f.nodeType)||!++h||(y&&((f[I]||(f[I]={}))[t]=[H,h]),f!==e)););return h-=i,h===r||h%r===0&&h/r>=0}}},PSEUDO:function(t,n){var i,o=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[I]?o(n):o.length>1?(i=[t,t,"",n],x.setFilters.hasOwnProperty(t.toLowerCase())?r(function(t,e){for(var r,i=o(t,n),a=i.length;a--;)r=tt(t,i[a]),t[r]=!(e[r]=i[a])}):function(t){return o(t,0,i)}):o}},pseudos:{not:r(function(t){var e=[],n=[],i=E(t.replace(ut,"$1"));return i[I]?r(function(t,e,n,r){for(var o,a=i(t,null,r,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:r(function(t){return function(n){return e(t,n).length>0}}),contains:r(function(t){return t=t.replace(wt,xt),function(e){return(e.textContent||e.innerText||S(e)).indexOf(t)>-1}}),lang:r(function(t){return pt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(wt,xt).toLowerCase(),function(e){var n;do if(n=L?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===R},focus:function(t){return t===M.activeElement&&(!M.hasFocus||M.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return vt.test(t.nodeName)},input:function(t){return gt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,n){return[0>n?n+e:n]}),even:c(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t}),odd:c(function(t,e){for(var n=1;e>n;n+=2)t.push(n);return t}),lt:c(function(t,e,n){for(var r=0>n?n+e:n;--r>=0;)t.push(r);return t}),gt:c(function(t,e,n){for(var r=0>n?n+e:n;++r<e;)t.push(r);return t})}},x.pseudos.nth=x.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[b]=s(b);for(b in{submit:!0,reset:!0})x.pseudos[b]=u(b);return f.prototype=x.filters=x.pseudos,x.setFilters=new f,k=e.tokenize=function(t,n){var r,i,o,a,s,u,c,l=B[t+" "];if(l)return n?0:l.slice(0);for(s=t,u=[],c=x.preFilter;s;){(!r||(i=ct.exec(s)))&&(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),r=!1,(i=lt.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ut," ")}),s=s.slice(r.length));for(a in x.filter)!(i=dt[a].exec(s))||c[a]&&!(i=c[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?e.error(t):B(t,u).slice(0)},E=e.compile=function(t,e){var n,r=[],i=[],o=z[t+" "];if(!o){for(e||(e=k(t)),n=e.length;n--;)o=y(e[n]),o[I]?r.push(o):i.push(o);o=z(t,$(i,r)),o.selector=t}return o},T=e.select=function(t,e,n,r){var i,o,a,s,u,c="function"==typeof t&&t,f=!r&&k(t=c.selector||t);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&w.getById&&9===e.nodeType&&L&&x.relative[o[1].type]){if(e=(x.find.ID(a.matches[0].replace(wt,xt),e)||[])[0],!e)return n;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(i=dt.needsContext.test(t)?0:o.length;i--&&(a=o[i],!x.relative[s=a.type]);)if((u=x.find[s])&&(r=u(a.matches[0].replace(wt,xt),$t.test(o[0].type)&&l(e.parentNode)||e))){if(o.splice(i,1),t=r.length&&h(o),!t)return J.apply(n,r),n;break}}return(c||E(t,f))(r,e,!L,n,$t.test(t)&&l(e.parentNode)||e),n},w.sortStable=I.split("").sort(U).join("")===I,w.detectDuplicates=!!O,j(),w.sortDetached=i(function(t){return 1&t.compareDocumentPosition(M.createElement("div"))}),i(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){return n?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),w.attributes&&i(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){return n||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),i(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var r;return n?void 0:t[e]===!0?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),e}(t);Z.find=it,Z.expr=it.selectors,Z.expr[":"]=Z.expr.pseudos,Z.unique=it.uniqueSort,Z.text=it.getText,Z.isXMLDoc=it.isXML,Z.contains=it.contains;var ot=Z.expr.match.needsContext,at=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,st=/^.[^:#\[\.,]*$/;Z.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?Z.find.matchesSelector(r,t)?[r]:[]:Z.find.matches(t,Z.grep(e,function(t){return 1===t.nodeType}))},Z.fn.extend({find:function(t){var e,n=this.length,r=[],i=this;
if("string"!=typeof t)return this.pushStack(Z(t).filter(function(){for(e=0;n>e;e++)if(Z.contains(i[e],this))return!0}));for(e=0;n>e;e++)Z.find(t,i[e],r);return r=this.pushStack(n>1?Z.unique(r):r),r.selector=this.selector?this.selector+" "+t:t,r},filter:function(t){return this.pushStack(r(this,t||[],!1))},not:function(t){return this.pushStack(r(this,t||[],!0))},is:function(t){return!!r(this,"string"==typeof t&&ot.test(t)?Z(t):t||[],!1).length}});var ut,ct=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,lt=Z.fn.init=function(t,e){var n,r;if(!t)return this;if("string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:ct.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||ut).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof Z?e[0]:e,Z.merge(this,Z.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:K,!0)),at.test(n[1])&&Z.isPlainObject(e))for(n in e)Z.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return r=K.getElementById(n[2]),r&&r.parentNode&&(this.length=1,this[0]=r),this.context=K,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):Z.isFunction(t)?"undefined"!=typeof ut.ready?ut.ready(t):t(Z):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),Z.makeArray(t,this))};lt.prototype=Z.fn,ut=Z(K);var ft=/^(?:parents|prev(?:Until|All))/,ht={children:!0,contents:!0,next:!0,prev:!0};Z.extend({dir:function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&Z(t).is(n))break;r.push(t)}return r},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}}),Z.fn.extend({has:function(t){var e=Z(t,this),n=e.length;return this.filter(function(){for(var t=0;n>t;t++)if(Z.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,r=0,i=this.length,o=[],a=ot.test(t)||"string"!=typeof t?Z(t,e||this.context):0;i>r;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&Z.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?Z.unique(o):o)},index:function(t){return t?"string"==typeof t?U.call(Z(t),this[0]):U.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(Z.unique(Z.merge(this.get(),Z(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),Z.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return Z.dir(t,"parentNode")},parentsUntil:function(t,e,n){return Z.dir(t,"parentNode",n)},next:function(t){return i(t,"nextSibling")},prev:function(t){return i(t,"previousSibling")},nextAll:function(t){return Z.dir(t,"nextSibling")},prevAll:function(t){return Z.dir(t,"previousSibling")},nextUntil:function(t,e,n){return Z.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return Z.dir(t,"previousSibling",n)},siblings:function(t){return Z.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return Z.sibling(t.firstChild)},contents:function(t){return t.contentDocument||Z.merge([],t.childNodes)}},function(t,e){Z.fn[t]=function(n,r){var i=Z.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=Z.filter(r,i)),this.length>1&&(ht[t]||Z.unique(i),ft.test(t)&&i.reverse()),this.pushStack(i)}});var pt=/\S+/g,dt={};Z.Callbacks=function(t){t="string"==typeof t?dt[t]||o(t):Z.extend({},t);var e,n,r,i,a,s,u=[],c=!t.once&&[],l=function(o){for(e=t.memory&&o,n=!0,s=i||0,i=0,a=u.length,r=!0;u&&a>s;s++)if(u[s].apply(o[0],o[1])===!1&&t.stopOnFalse){e=!1;break}r=!1,u&&(c?c.length&&l(c.shift()):e?u=[]:f.disable())},f={add:function(){if(u){var n=u.length;!function o(e){Z.each(e,function(e,n){var r=Z.type(n);"function"===r?t.unique&&f.has(n)||u.push(n):n&&n.length&&"string"!==r&&o(n)})}(arguments),r?a=u.length:e&&(i=n,l(e))}return this},remove:function(){return u&&Z.each(arguments,function(t,e){for(var n;(n=Z.inArray(e,u,n))>-1;)u.splice(n,1),r&&(a>=n&&a--,s>=n&&s--)}),this},has:function(t){return t?Z.inArray(t,u)>-1:!(!u||!u.length)},empty:function(){return u=[],a=0,this},disable:function(){return u=c=e=void 0,this},disabled:function(){return!u},lock:function(){return c=void 0,e||f.disable(),this},locked:function(){return!c},fireWith:function(t,e){return!u||n&&!c||(e=e||[],e=[t,e.slice?e.slice():e],r?c.push(e):l(e)),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!n}};return f},Z.extend({Deferred:function(t){var e=[["resolve","done",Z.Callbacks("once memory"),"resolved"],["reject","fail",Z.Callbacks("once memory"),"rejected"],["notify","progress",Z.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var t=arguments;return Z.Deferred(function(n){Z.each(e,function(e,o){var a=Z.isFunction(t[e])&&t[e];i[o[1]](function(){var t=a&&a.apply(this,arguments);t&&Z.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===r?n.promise():this,a?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?Z.extend(t,r):r}},i={};return r.pipe=r.then,Z.each(e,function(t,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},e[1^t][2].disable,e[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),t&&t.call(i,i),i},when:function(t){var e,n,r,i=0,o=W.call(arguments),a=o.length,s=1!==a||t&&Z.isFunction(t.promise)?a:0,u=1===s?t:Z.Deferred(),c=function(t,n,r){return function(i){n[t]=this,r[t]=arguments.length>1?W.call(arguments):i,r===e?u.notifyWith(n,r):--s||u.resolveWith(n,r)}};if(a>1)for(e=new Array(a),n=new Array(a),r=new Array(a);a>i;i++)o[i]&&Z.isFunction(o[i].promise)?o[i].promise().done(c(i,r,o)).fail(u.reject).progress(c(i,n,e)):--s;return s||u.resolveWith(r,o),u.promise()}});var gt;Z.fn.ready=function(t){return Z.ready.promise().done(t),this},Z.extend({isReady:!1,readyWait:1,holdReady:function(t){t?Z.readyWait++:Z.ready(!0)},ready:function(t){(t===!0?--Z.readyWait:Z.isReady)||(Z.isReady=!0,t!==!0&&--Z.readyWait>0||(gt.resolveWith(K,[Z]),Z.fn.triggerHandler&&(Z(K).triggerHandler("ready"),Z(K).off("ready"))))}}),Z.ready.promise=function(e){return gt||(gt=Z.Deferred(),"complete"===K.readyState?setTimeout(Z.ready):(K.addEventListener("DOMContentLoaded",a,!1),t.addEventListener("load",a,!1))),gt.promise(e)},Z.ready.promise();var vt=Z.access=function(t,e,n,r,i,o,a){var s=0,u=t.length,c=null==n;if("object"===Z.type(n)){i=!0;for(s in n)Z.access(t,e,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,Z.isFunction(r)||(a=!0),c&&(a?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(Z(t),n)})),e))for(;u>s;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:c?e.call(t):u?e(t[0],n):o};Z.acceptData=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType},s.uid=1,s.accepts=Z.acceptData,s.prototype={key:function(t){if(!s.accepts(t))return 0;var e={},n=t[this.expando];if(!n){n=s.uid++;try{e[this.expando]={value:n},Object.defineProperties(t,e)}catch(r){e[this.expando]=n,Z.extend(t,e)}}return this.cache[n]||(this.cache[n]={}),n},set:function(t,e,n){var r,i=this.key(t),o=this.cache[i];if("string"==typeof e)o[e]=n;else if(Z.isEmptyObject(o))Z.extend(this.cache[i],e);else for(r in e)o[r]=e[r];return o},get:function(t,e){var n=this.cache[this.key(t)];return void 0===e?n:n[e]},access:function(t,e,n){var r;return void 0===e||e&&"string"==typeof e&&void 0===n?(r=this.get(t,e),void 0!==r?r:this.get(t,Z.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r,i,o=this.key(t),a=this.cache[o];if(void 0===e)this.cache[o]={};else{Z.isArray(e)?r=e.concat(e.map(Z.camelCase)):(i=Z.camelCase(e),e in a?r=[e,i]:(r=i,r=r in a?[r]:r.match(pt)||[])),n=r.length;for(;n--;)delete a[r[n]]}},hasData:function(t){return!Z.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){t[this.expando]&&delete this.cache[t[this.expando]]}};var mt=new s,yt=new s,$t=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,bt=/([A-Z])/g;Z.extend({hasData:function(t){return yt.hasData(t)||mt.hasData(t)},data:function(t,e,n){return yt.access(t,e,n)},removeData:function(t,e){yt.remove(t,e)},_data:function(t,e,n){return mt.access(t,e,n)},_removeData:function(t,e){mt.remove(t,e)}}),Z.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=yt.get(o),1===o.nodeType&&!mt.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=Z.camelCase(r.slice(5)),u(o,r,i[r])));mt.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){yt.set(this,t)}):vt(this,function(e){var n,r=Z.camelCase(t);if(o&&void 0===e){if(n=yt.get(o,t),void 0!==n)return n;if(n=yt.get(o,r),void 0!==n)return n;if(n=u(o,r,void 0),void 0!==n)return n}else this.each(function(){var n=yt.get(this,r);yt.set(this,r,e),-1!==t.indexOf("-")&&void 0!==n&&yt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){yt.remove(this,t)})}}),Z.extend({queue:function(t,e,n){var r;return t?(e=(e||"fx")+"queue",r=mt.get(t,e),n&&(!r||Z.isArray(n)?r=mt.access(t,e,Z.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=Z.queue(t,e),r=n.length,i=n.shift(),o=Z._queueHooks(t,e),a=function(){Z.dequeue(t,e)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return mt.get(t,n)||mt.access(t,n,{empty:Z.Callbacks("once memory").add(function(){mt.remove(t,[e+"queue",n])})})}}),Z.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?Z.queue(this[0],t):void 0===e?this:this.each(function(){var n=Z.queue(this,t,e);Z._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&Z.dequeue(this,t)})},dequeue:function(t){return this.each(function(){Z.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=Z.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)n=mt.get(o[a],t+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var wt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,xt=["Top","Right","Bottom","Left"],St=function(t,e){return t=e||t,"none"===Z.css(t,"display")||!Z.contains(t.ownerDocument,t)},Ct=/^(?:checkbox|radio)$/i;!function(){var t=K.createDocumentFragment(),e=t.appendChild(K.createElement("div")),n=K.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),Q.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",Q.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var kt="undefined";Q.focusinBubbles="onfocusin"in t;var Et=/^key/,Tt=/^(?:mouse|pointer|contextmenu)|click/,At=/^(?:focusinfocus|focusoutblur)$/,Pt=/^([^.]*)(?:\.(.+)|)$/;Z.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,c,l,f,h,p,d,g,v=mt.get(t);if(v)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=Z.guid++),(u=v.events)||(u=v.events={}),(a=v.handle)||(a=v.handle=function(e){return typeof Z!==kt&&Z.event.triggered!==e.type?Z.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(pt)||[""],c=e.length;c--;)s=Pt.exec(e[c])||[],p=g=s[1],d=(s[2]||"").split(".").sort(),p&&(f=Z.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=Z.event.special[p]||{},l=Z.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&Z.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=u[p])||(h=u[p]=[],h.delegateCount=0,f.setup&&f.setup.call(t,r,d,a)!==!1||t.addEventListener&&t.addEventListener(p,a,!1)),f.add&&(f.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,l):h.push(l),Z.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,s,u,c,l,f,h,p,d,g,v=mt.hasData(t)&&mt.get(t);if(v&&(u=v.events)){for(e=(e||"").match(pt)||[""],c=e.length;c--;)if(s=Pt.exec(e[c])||[],p=g=s[1],d=(s[2]||"").split(".").sort(),p){for(f=Z.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,h=u[p]||[],s=s[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)l=h[o],!i&&g!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(h.splice(o,1),l.selector&&h.delegateCount--,f.remove&&f.remove.call(t,l));a&&!h.length&&(f.teardown&&f.teardown.call(t,d,v.handle)!==!1||Z.removeEvent(t,p,v.handle),delete u[p])}else for(p in u)Z.event.remove(t,p+e[c],n,r,!0);Z.isEmptyObject(u)&&(delete v.handle,mt.remove(t,"events"))}},trigger:function(e,n,r,i){var o,a,s,u,c,l,f,h=[r||K],p=Y.call(e,"type")?e.type:e,d=Y.call(e,"namespace")?e.namespace.split("."):[];if(a=s=r=r||K,3!==r.nodeType&&8!==r.nodeType&&!At.test(p+Z.event.triggered)&&(p.indexOf(".")>=0&&(d=p.split("."),p=d.shift(),d.sort()),c=p.indexOf(":")<0&&"on"+p,e=e[Z.expando]?e:new Z.Event(p,"object"==typeof e&&e),e.isTrigger=i?2:3,e.namespace=d.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),n=null==n?[e]:Z.makeArray(n,[e]),f=Z.event.special[p]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!Z.isWindow(r)){for(u=f.delegateType||p,At.test(u+p)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(r.ownerDocument||K)&&h.push(s.defaultView||s.parentWindow||t)}for(o=0;(a=h[o++])&&!e.isPropagationStopped();)e.type=o>1?u:f.bindType||p,l=(mt.get(a,"events")||{})[e.type]&&mt.get(a,"handle"),l&&l.apply(a,n),l=c&&a[c],l&&l.apply&&Z.acceptData(a)&&(e.result=l.apply(a,n),e.result===!1&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||f._default&&f._default.apply(h.pop(),n)!==!1||!Z.acceptData(r)||c&&Z.isFunction(r[p])&&!Z.isWindow(r)&&(s=r[c],s&&(r[c]=null),Z.event.triggered=p,r[p](),Z.event.triggered=void 0,s&&(r[c]=s)),e.result}},dispatch:function(t){t=Z.event.fix(t);var e,n,r,i,o,a=[],s=W.call(arguments),u=(mt.get(this,"events")||{})[t.type]||[],c=Z.event.special[t.type]||{};if(s[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(a=Z.event.handlers.call(this,t,u),e=0;(i=a[e++])&&!t.isPropagationStopped();)for(t.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(o.namespace))&&(t.handleObj=o,t.data=o.data,r=((Z.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s),void 0!==r&&(t.result=r)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,r,i,o,a=[],s=e.delegateCount,u=t.target;if(s&&u.nodeType&&(!t.button||"click"!==t.type))for(;u!==this;u=u.parentNode||this)if(u.disabled!==!0||"click"!==t.type){for(r=[],n=0;s>n;n++)o=e[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?Z(i,this).index(u)>=0:Z.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&a.push({elem:u,handlers:r})}return s<e.length&&a.push({elem:this,handlers:e.slice(s)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,r,i,o=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||K,r=n.documentElement,i=n.body,t.pageX=e.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),t.pageY=e.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[Z.expando])return t;var e,n,r,i=t.type,o=t,a=this.fixHooks[i];for(a||(this.fixHooks[i]=a=Tt.test(i)?this.mouseHooks:Et.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,t=new Z.Event(o),e=r.length;e--;)n=r[e],t[n]=o[n];return t.target||(t.target=K),3===t.target.nodeType&&(t.target=t.target.parentNode),a.filter?a.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==f()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===f()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&Z.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return Z.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,r){var i=Z.extend(new Z.Event,n,{type:t,isSimulated:!0,originalEvent:{}});r?Z.event.trigger(i,null,e):Z.event.dispatch.call(e,i),i.isDefaultPrevented()&&n.preventDefault()}},Z.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)},Z.Event=function(t,e){return this instanceof Z.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?c:l):this.type=t,e&&Z.extend(this,e),this.timeStamp=t&&t.timeStamp||Z.now(),void(this[Z.expando]=!0)):new Z.Event(t,e)},Z.Event.prototype={isDefaultPrevented:l,isPropagationStopped:l,isImmediatePropagationStopped:l,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=c,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=c,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=c,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},Z.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){Z.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return(!i||i!==r&&!Z.contains(r,i))&&(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),Q.focusinBubbles||Z.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){Z.event.simulate(e,t.target,Z.event.fix(t),!0)};Z.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=mt.access(r,e);i||r.addEventListener(t,n,!0),mt.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=mt.access(r,e)-1;i?mt.access(r,e,i):(r.removeEventListener(t,n,!0),mt.remove(r,e))}}}),Z.fn.extend({on:function(t,e,n,r,i){var o,a;if("object"==typeof t){"string"!=typeof e&&(n=n||e,e=void 0);for(a in t)this.on(a,e,n,t[a],i);return this}if(null==n&&null==r?(r=e,n=e=void 0):null==r&&("string"==typeof e?(r=n,n=void 0):(r=n,n=e,e=void 0)),r===!1)r=l;else if(!r)return this;return 1===i&&(o=r,r=function(t){return Z().off(t),o.apply(this,arguments)},r.guid=o.guid||(o.guid=Z.guid++)),this.each(function(){Z.event.add(this,t,r,n,e)})},one:function(t,e,n,r){return this.on(t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,Z(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return(e===!1||"function"==typeof e)&&(n=e,e=void 0),n===!1&&(n=l),this.each(function(){Z.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){Z.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?Z.event.trigger(t,e,n,!0):void 0}});var Ot=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,jt=/<([\w:]+)/,Mt=/<|&#?\w+;/,Rt=/<(?:script|style|link)/i,Lt=/checked\s*(?:[^=]|=\s*.checked.)/i,Nt=/^$|\/(?:java|ecma)script/i,Ft=/^true\/(.*)/,Dt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,_t={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};_t.optgroup=_t.option,_t.tbody=_t.tfoot=_t.colgroup=_t.caption=_t.thead,_t.th=_t.td,Z.extend({clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),u=Z.contains(t.ownerDocument,t);if(!(Q.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||Z.isXMLDoc(t)))for(a=m(s),o=m(t),r=0,i=o.length;i>r;r++)y(o[r],a[r]);if(e)if(n)for(o=o||m(t),a=a||m(s),r=0,i=o.length;i>r;r++)v(o[r],a[r]);else v(t,s);return a=m(s,"script"),a.length>0&&g(a,!u&&m(t,"script")),s},buildFragment:function(t,e,n,r){for(var i,o,a,s,u,c,l=e.createDocumentFragment(),f=[],h=0,p=t.length;p>h;h++)if(i=t[h],i||0===i)if("object"===Z.type(i))Z.merge(f,i.nodeType?[i]:i);else if(Mt.test(i)){for(o=o||l.appendChild(e.createElement("div")),a=(jt.exec(i)||["",""])[1].toLowerCase(),s=_t[a]||_t._default,o.innerHTML=s[1]+i.replace(Ot,"<$1></$2>")+s[2],c=s[0];c--;)o=o.lastChild;Z.merge(f,o.childNodes),o=l.firstChild,o.textContent=""}else f.push(e.createTextNode(i));for(l.textContent="",h=0;i=f[h++];)if((!r||-1===Z.inArray(i,r))&&(u=Z.contains(i.ownerDocument,i),o=m(l.appendChild(i),"script"),u&&g(o),n))for(c=0;i=o[c++];)Nt.test(i.type||"")&&n.push(i);return l},cleanData:function(t){for(var e,n,r,i,o=Z.event.special,a=0;void 0!==(n=t[a]);a++){if(Z.acceptData(n)&&(i=n[mt.expando],i&&(e=mt.cache[i]))){if(e.events)for(r in e.events)o[r]?Z.event.remove(n,r):Z.removeEvent(n,r,e.handle);mt.cache[i]&&delete mt.cache[i]}delete yt.cache[n[yt.expando]]}}}),Z.fn.extend({text:function(t){return vt(this,function(t){return void 0===t?Z.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=t)})},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=h(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=h(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,r=t?Z.filter(t,this):this,i=0;null!=(n=r[i]);i++)e||1!==n.nodeType||Z.cleanData(m(n)),n.parentNode&&(e&&Z.contains(n.ownerDocument,n)&&g(m(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(Z.cleanData(m(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return Z.clone(this,t,e)})},html:function(t){return vt(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Rt.test(t)&&!_t[(jt.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(Ot,"<$1></$2>");try{for(;r>n;n++)e=this[n]||{},1===e.nodeType&&(Z.cleanData(m(e,!1)),e.innerHTML=t);e=0}catch(i){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,Z.cleanData(m(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=B.apply([],t);var n,r,i,o,a,s,u=0,c=this.length,l=this,f=c-1,h=t[0],g=Z.isFunction(h);if(g||c>1&&"string"==typeof h&&!Q.checkClone&&Lt.test(h))return this.each(function(n){var r=l.eq(n);g&&(t[0]=h.call(this,n,r.html())),r.domManip(t,e)});if(c&&(n=Z.buildFragment(t,this[0].ownerDocument,!1,this),r=n.firstChild,1===n.childNodes.length&&(n=r),r)){for(i=Z.map(m(n,"script"),p),o=i.length;c>u;u++)a=n,u!==f&&(a=Z.clone(a,!0,!0),o&&Z.merge(i,m(a,"script"))),e.call(this[u],a,u);if(o)for(s=i[i.length-1].ownerDocument,Z.map(i,d),u=0;o>u;u++)a=i[u],Nt.test(a.type||"")&&!mt.access(a,"globalEval")&&Z.contains(s,a)&&(a.src?Z._evalUrl&&Z._evalUrl(a.src):Z.globalEval(a.textContent.replace(Dt,"")))}return this}}),Z.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){Z.fn[t]=function(t){for(var n,r=[],i=Z(t),o=i.length-1,a=0;o>=a;a++)n=a===o?this:this.clone(!0),Z(i[a])[e](n),z.apply(r,n.get());return this.pushStack(r)}});var It,qt={},Ht=/^margin/,Vt=new RegExp("^("+wt+")(?!px)[a-z%]+$","i"),Wt=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):t.getComputedStyle(e,null)};!function(){function e(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",a.innerHTML="",i.appendChild(o);var e=t.getComputedStyle(a,null);n="1%"!==e.top,r="4px"===e.width,i.removeChild(o)}var n,r,i=K.documentElement,o=K.createElement("div"),a=K.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",Q.clearCloneStyle="content-box"===a.style.backgroundClip,o.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",o.appendChild(a),t.getComputedStyle&&Z.extend(Q,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==r&&e(),r},reliableMarginRight:function(){var e,n=a.appendChild(K.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",i.appendChild(o),e=!parseFloat(t.getComputedStyle(n,null).marginRight),i.removeChild(o),a.removeChild(n),e}}))}(),Z.swap=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];i=n.apply(t,r||[]);for(o in e)t.style[o]=a[o];return i};var Bt=/^(none|table(?!-c[ea]).+)/,zt=new RegExp("^("+wt+")(.*)$","i"),Ut=new RegExp("^([+-])=("+wt+")","i"),Xt={position:"absolute",visibility:"hidden",display:"block"},Gt={letterSpacing:"0",fontWeight:"400"},Yt=["Webkit","O","Moz","ms"];Z.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=w(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=Z.camelCase(e),u=t.style;return e=Z.cssProps[s]||(Z.cssProps[s]=S(u,s)),a=Z.cssHooks[e]||Z.cssHooks[s],void 0===n?a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:u[e]:(o=typeof n,"string"===o&&(i=Ut.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(Z.css(t,e)),o="number"),null!=n&&n===n&&("number"!==o||Z.cssNumber[s]||(n+="px"),Q.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(u[e]=n)),void 0)}},css:function(t,e,n,r){var i,o,a,s=Z.camelCase(e);return e=Z.cssProps[s]||(Z.cssProps[s]=S(t.style,s)),a=Z.cssHooks[e]||Z.cssHooks[s],a&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=w(t,e,r)),"normal"===i&&e in Gt&&(i=Gt[e]),""===n||n?(o=parseFloat(i),n===!0||Z.isNumeric(o)?o||0:i):i}}),Z.each(["height","width"],function(t,e){Z.cssHooks[e]={get:function(t,n,r){return n?Bt.test(Z.css(t,"display"))&&0===t.offsetWidth?Z.swap(t,Xt,function(){return E(t,e,r)}):E(t,e,r):void 0},set:function(t,n,r){var i=r&&Wt(t);return C(t,n,r?k(t,e,r,"border-box"===Z.css(t,"boxSizing",!1,i),i):0)}}}),Z.cssHooks.marginRight=x(Q.reliableMarginRight,function(t,e){return e?Z.swap(t,{display:"inline-block"},w,[t,"marginRight"]):void 0}),Z.each({margin:"",padding:"",border:"Width"},function(t,e){Z.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[t+xt[r]+e]=o[r]||o[r-2]||o[0];return i}},Ht.test(t)||(Z.cssHooks[t+e].set=C)}),Z.fn.extend({css:function(t,e){return vt(this,function(t,e,n){var r,i,o={},a=0;if(Z.isArray(e)){for(r=Wt(t),i=e.length;i>a;a++)o[e[a]]=Z.css(t,e[a],!1,r);return o}return void 0!==n?Z.style(t,e,n):Z.css(t,e)},t,e,arguments.length>1)},show:function(){return T(this,!0)},hide:function(){return T(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){St(this)?Z(this).show():Z(this).hide()})}}),Z.Tween=A,A.prototype={constructor:A,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||"swing",this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(Z.cssNumber[n]?"":"px")},cur:function(){var t=A.propHooks[this.prop];return t&&t.get?t.get(this):A.propHooks._default.get(this)},run:function(t){var e,n=A.propHooks[this.prop];return this.options.duration?this.pos=e=Z.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):A.propHooks._default.set(this),this}},A.prototype.init.prototype=A.prototype,A.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=Z.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){Z.fx.step[t.prop]?Z.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[Z.cssProps[t.prop]]||Z.cssHooks[t.prop])?Z.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},A.propHooks.scrollTop=A.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},Z.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},Z.fx=A.prototype.init,Z.fx.step={};var Qt,Kt,Jt=/^(?:toggle|show|hide)$/,Zt=new RegExp("^(?:([+-])=|)("+wt+")([a-z%]*)$","i"),te=/queueHooks$/,ee=[M],ne={"*":[function(t,e){var n=this.createTween(t,e),r=n.cur(),i=Zt.exec(e),o=i&&i[3]||(Z.cssNumber[t]?"":"px"),a=(Z.cssNumber[t]||"px"!==o&&+r)&&Zt.exec(Z.css(n.elem,t)),s=1,u=20;if(a&&a[3]!==o){o=o||a[3],i=i||[],a=+r||1;do s=s||".5",a/=s,Z.style(n.elem,t,a+o);while(s!==(s=n.cur()/r)&&1!==s&&--u)}return i&&(a=n.start=+a||+r||0,n.unit=o,n.end=i[1]?a+(i[1]+1)*i[2]:+i[2]),n}]};Z.Animation=Z.extend(L,{tweener:function(t,e){Z.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var n,r=0,i=t.length;i>r;r++)n=t[r],ne[n]=ne[n]||[],ne[n].unshift(e)},prefilter:function(t,e){e?ee.unshift(t):ee.push(t)}}),Z.speed=function(t,e,n){var r=t&&"object"==typeof t?Z.extend({},t):{complete:n||!n&&e||Z.isFunction(t)&&t,duration:t,easing:n&&e||e&&!Z.isFunction(e)&&e};return r.duration=Z.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in Z.fx.speeds?Z.fx.speeds[r.duration]:Z.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){Z.isFunction(r.old)&&r.old.call(this),r.queue&&Z.dequeue(this,r.queue)},r},Z.fn.extend({fadeTo:function(t,e,n,r){return this.filter(St).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=Z.isEmptyObject(t),o=Z.speed(e,n,r),a=function(){var e=L(this,Z.extend({},t),o);(i||mt.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=Z.timers,a=mt.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&te.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));(e||!n)&&Z.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=mt.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=Z.timers,a=r?r.length:0;for(n.finish=!0,Z.queue(this,t,[]),
i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;a>e;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),Z.each(["toggle","show","hide"],function(t,e){var n=Z.fn[e];Z.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(O(e,!0),t,r,i)}}),Z.each({slideDown:O("show"),slideUp:O("hide"),slideToggle:O("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){Z.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),Z.timers=[],Z.fx.tick=function(){var t,e=0,n=Z.timers;for(Qt=Z.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||Z.fx.stop(),Qt=void 0},Z.fx.timer=function(t){Z.timers.push(t),t()?Z.fx.start():Z.timers.pop()},Z.fx.interval=13,Z.fx.start=function(){Kt||(Kt=setInterval(Z.fx.tick,Z.fx.interval))},Z.fx.stop=function(){clearInterval(Kt),Kt=null},Z.fx.speeds={slow:600,fast:200,_default:400},Z.fn.delay=function(t,e){return t=Z.fx?Z.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var r=setTimeout(e,t);n.stop=function(){clearTimeout(r)}})},function(){var t=K.createElement("input"),e=K.createElement("select"),n=e.appendChild(K.createElement("option"));t.type="checkbox",Q.checkOn=""!==t.value,Q.optSelected=n.selected,e.disabled=!0,Q.optDisabled=!n.disabled,t=K.createElement("input"),t.value="t",t.type="radio",Q.radioValue="t"===t.value}();var re,ie,oe=Z.expr.attrHandle;Z.fn.extend({attr:function(t,e){return vt(this,Z.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){Z.removeAttr(this,t)})}}),Z.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(t&&3!==o&&8!==o&&2!==o)return typeof t.getAttribute===kt?Z.prop(t,e,n):(1===o&&Z.isXMLDoc(t)||(e=e.toLowerCase(),r=Z.attrHooks[e]||(Z.expr.match.bool.test(e)?ie:re)),void 0===n?r&&"get"in r&&null!==(i=r.get(t,e))?i:(i=Z.find.attr(t,e),null==i?void 0:i):null!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):void Z.removeAttr(t,e))},removeAttr:function(t,e){var n,r,i=0,o=e&&e.match(pt);if(o&&1===t.nodeType)for(;n=o[i++];)r=Z.propFix[n]||n,Z.expr.match.bool.test(n)&&(t[r]=!1),t.removeAttribute(n)},attrHooks:{type:{set:function(t,e){if(!Q.radioValue&&"radio"===e&&Z.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}}}),ie={set:function(t,e,n){return e===!1?Z.removeAttr(t,n):t.setAttribute(n,n),n}},Z.each(Z.expr.match.bool.source.match(/\w+/g),function(t,e){var n=oe[e]||Z.find.attr;oe[e]=function(t,e,r){var i,o;return r||(o=oe[e],oe[e]=i,i=null!=n(t,e,r)?e.toLowerCase():null,oe[e]=o),i}});var ae=/^(?:input|select|textarea|button)$/i;Z.fn.extend({prop:function(t,e){return vt(this,Z.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[Z.propFix[t]||t]})}}),Z.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,n){var r,i,o,a=t.nodeType;if(t&&3!==a&&8!==a&&2!==a)return o=1!==a||!Z.isXMLDoc(t),o&&(e=Z.propFix[e]||e,i=Z.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||ae.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),Q.optSelected||(Z.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),Z.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){Z.propFix[this.toLowerCase()]=this});var se=/[\t\r\n\f]/g;Z.fn.extend({addClass:function(t){var e,n,r,i,o,a,s="string"==typeof t&&t,u=0,c=this.length;if(Z.isFunction(t))return this.each(function(e){Z(this).addClass(t.call(this,e,this.className))});if(s)for(e=(t||"").match(pt)||[];c>u;u++)if(n=this[u],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(se," "):" ")){for(o=0;i=e[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");a=Z.trim(r),n.className!==a&&(n.className=a)}return this},removeClass:function(t){var e,n,r,i,o,a,s=0===arguments.length||"string"==typeof t&&t,u=0,c=this.length;if(Z.isFunction(t))return this.each(function(e){Z(this).removeClass(t.call(this,e,this.className))});if(s)for(e=(t||"").match(pt)||[];c>u;u++)if(n=this[u],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(se," "):"")){for(o=0;i=e[o++];)for(;r.indexOf(" "+i+" ")>=0;)r=r.replace(" "+i+" "," ");a=t?Z.trim(r):"",n.className!==a&&(n.className=a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):Z.isFunction(t)?this.each(function(n){Z(this).toggleClass(t.call(this,n,this.className,e),e)}):this.each(function(){if("string"===n)for(var e,r=0,i=Z(this),o=t.match(pt)||[];e=o[r++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else(n===kt||"boolean"===n)&&(this.className&&mt.set(this,"__className__",this.className),this.className=this.className||t===!1?"":mt.get(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,r=this.length;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(se," ").indexOf(e)>=0)return!0;return!1}});var ue=/\r/g;Z.fn.extend({val:function(t){var e,n,r,i=this[0];{if(arguments.length)return r=Z.isFunction(t),this.each(function(n){var i;1===this.nodeType&&(i=r?t.call(this,n,Z(this).val()):t,null==i?i="":"number"==typeof i?i+="":Z.isArray(i)&&(i=Z.map(i,function(t){return null==t?"":t+""})),e=Z.valHooks[this.type]||Z.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))});if(i)return e=Z.valHooks[i.type]||Z.valHooks[i.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(ue,""):null==n?"":n)}}}),Z.extend({valHooks:{option:{get:function(t){var e=Z.find.attr(t,"value");return null!=e?e:Z.trim(Z.text(t))}},select:{get:function(t){for(var e,n,r=t.options,i=t.selectedIndex,o="select-one"===t.type||0>i,a=o?null:[],s=o?i+1:r.length,u=0>i?s:o?i:0;s>u;u++)if(n=r[u],(n.selected||u===i)&&(Q.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!Z.nodeName(n.parentNode,"optgroup"))){if(e=Z(n).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var n,r,i=t.options,o=Z.makeArray(e),a=i.length;a--;)r=i[a],(r.selected=Z.inArray(r.value,o)>=0)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),Z.each(["radio","checkbox"],function(){Z.valHooks[this]={set:function(t,e){return Z.isArray(e)?t.checked=Z.inArray(Z(t).val(),e)>=0:void 0}},Q.checkOn||(Z.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),Z.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){Z.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),Z.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}});var ce=Z.now(),le=/\?/;Z.parseJSON=function(t){return JSON.parse(t+"")},Z.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{n=new DOMParser,e=n.parseFromString(t,"text/xml")}catch(r){e=void 0}return(!e||e.getElementsByTagName("parsererror").length)&&Z.error("Invalid XML: "+t),e};var fe=/#.*$/,he=/([?&])_=[^&]*/,pe=/^(.*?):[ \t]*([^\r\n]*)$/gm,de=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ge=/^(?:GET|HEAD)$/,ve=/^\/\//,me=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,ye={},$e={},be="*/".concat("*"),we=t.location.href,xe=me.exec(we.toLowerCase())||[];Z.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:we,type:"GET",isLocal:de.test(xe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":Z.parseJSON,"text xml":Z.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?D(D(t,Z.ajaxSettings),e):D(Z.ajaxSettings,t)},ajaxPrefilter:N(ye),ajaxTransport:N($e),ajax:function(t,e){function n(t,e,n,a){var u,l,m,y,b,x=e;2!==$&&($=2,s&&clearTimeout(s),r=void 0,o=a||"",w.readyState=t>0?4:0,u=t>=200&&300>t||304===t,n&&(y=_(f,w,n)),y=I(f,y,w,u),u?(f.ifModified&&(b=w.getResponseHeader("Last-Modified"),b&&(Z.lastModified[i]=b),b=w.getResponseHeader("etag"),b&&(Z.etag[i]=b)),204===t||"HEAD"===f.type?x="nocontent":304===t?x="notmodified":(x=y.state,l=y.data,m=y.error,u=!m)):(m=x,(t||!x)&&(x="error",0>t&&(t=0))),w.status=t,w.statusText=(e||x)+"",u?d.resolveWith(h,[l,x,w]):d.rejectWith(h,[w,x,m]),w.statusCode(v),v=void 0,c&&p.trigger(u?"ajaxSuccess":"ajaxError",[w,f,u?l:m]),g.fireWith(h,[w,x]),c&&(p.trigger("ajaxComplete",[w,f]),--Z.active||Z.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,i,o,a,s,u,c,l,f=Z.ajaxSetup({},e),h=f.context||f,p=f.context&&(h.nodeType||h.jquery)?Z(h):Z.event,d=Z.Deferred(),g=Z.Callbacks("once memory"),v=f.statusCode||{},m={},y={},$=0,b="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(2===$){if(!a)for(a={};e=pe.exec(o);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===$?o:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return $||(t=y[n]=y[n]||t,m[t]=e),this},overrideMimeType:function(t){return $||(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>$)for(e in t)v[e]=[v[e],t[e]];else w.always(t[w.status]);return this},abort:function(t){var e=t||b;return r&&r.abort(e),n(0,e),this}};if(d.promise(w).complete=g.add,w.success=w.done,w.error=w.fail,f.url=((t||f.url||we)+"").replace(fe,"").replace(ve,xe[1]+"//"),f.type=e.method||e.type||f.method||f.type,f.dataTypes=Z.trim(f.dataType||"*").toLowerCase().match(pt)||[""],null==f.crossDomain&&(u=me.exec(f.url.toLowerCase()),f.crossDomain=!(!u||u[1]===xe[1]&&u[2]===xe[2]&&(u[3]||("http:"===u[1]?"80":"443"))===(xe[3]||("http:"===xe[1]?"80":"443")))),f.data&&f.processData&&"string"!=typeof f.data&&(f.data=Z.param(f.data,f.traditional)),F(ye,f,e,w),2===$)return w;c=Z.event&&f.global,c&&0===Z.active++&&Z.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!ge.test(f.type),i=f.url,f.hasContent||(f.data&&(i=f.url+=(le.test(i)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=he.test(i)?i.replace(he,"$1_="+ce++):i+(le.test(i)?"&":"?")+"_="+ce++)),f.ifModified&&(Z.lastModified[i]&&w.setRequestHeader("If-Modified-Since",Z.lastModified[i]),Z.etag[i]&&w.setRequestHeader("If-None-Match",Z.etag[i])),(f.data&&f.hasContent&&f.contentType!==!1||e.contentType)&&w.setRequestHeader("Content-Type",f.contentType),w.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+be+"; q=0.01":""):f.accepts["*"]);for(l in f.headers)w.setRequestHeader(l,f.headers[l]);if(f.beforeSend&&(f.beforeSend.call(h,w,f)===!1||2===$))return w.abort();b="abort";for(l in{success:1,error:1,complete:1})w[l](f[l]);if(r=F($e,f,e,w)){w.readyState=1,c&&p.trigger("ajaxSend",[w,f]),f.async&&f.timeout>0&&(s=setTimeout(function(){w.abort("timeout")},f.timeout));try{$=1,r.send(m,n)}catch(x){if(!(2>$))throw x;n(-1,x)}}else n(-1,"No Transport");return w},getJSON:function(t,e,n){return Z.get(t,e,n,"json")},getScript:function(t,e){return Z.get(t,void 0,e,"script")}}),Z.each(["get","post"],function(t,e){Z[e]=function(t,n,r,i){return Z.isFunction(n)&&(i=i||r,r=n,n=void 0),Z.ajax({url:t,type:e,dataType:i,data:n,success:r})}}),Z._evalUrl=function(t){return Z.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},Z.fn.extend({wrapAll:function(t){var e;return Z.isFunction(t)?this.each(function(e){Z(this).wrapAll(t.call(this,e))}):(this[0]&&(e=Z(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return Z.isFunction(t)?this.each(function(e){Z(this).wrapInner(t.call(this,e))}):this.each(function(){var e=Z(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=Z.isFunction(t);return this.each(function(n){Z(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){Z.nodeName(this,"body")||Z(this).replaceWith(this.childNodes)}).end()}}),Z.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0},Z.expr.filters.visible=function(t){return!Z.expr.filters.hidden(t)};var Se=/%20/g,Ce=/\[\]$/,ke=/\r?\n/g,Ee=/^(?:submit|button|image|reset|file)$/i,Te=/^(?:input|select|textarea|keygen)/i;Z.param=function(t,e){var n,r=[],i=function(t,e){e=Z.isFunction(e)?e():null==e?"":e,r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=Z.ajaxSettings&&Z.ajaxSettings.traditional),Z.isArray(t)||t.jquery&&!Z.isPlainObject(t))Z.each(t,function(){i(this.name,this.value)});else for(n in t)q(n,t[n],e,i);return r.join("&").replace(Se,"+")},Z.fn.extend({serialize:function(){return Z.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=Z.prop(this,"elements");return t?Z.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!Z(this).is(":disabled")&&Te.test(this.nodeName)&&!Ee.test(t)&&(this.checked||!Ct.test(t))}).map(function(t,e){var n=Z(this).val();return null==n?null:Z.isArray(n)?Z.map(n,function(t){return{name:e.name,value:t.replace(ke,"\r\n")}}):{name:e.name,value:n.replace(ke,"\r\n")}}).get()}}),Z.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var Ae=0,Pe={},Oe={0:200,1223:204},je=Z.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in Pe)Pe[t]()}),Q.cors=!!je&&"withCredentials"in je,Q.ajax=je=!!je,Z.ajaxTransport(function(t){var e;return Q.cors||je&&!t.crossDomain?{send:function(n,r){var i,o=t.xhr(),a=++Ae;if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(i in t.xhrFields)o[i]=t.xhrFields[i];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)o.setRequestHeader(i,n[i]);e=function(t){return function(){e&&(delete Pe[a],e=o.onload=o.onerror=null,"abort"===t?o.abort():"error"===t?r(o.status,o.statusText):r(Oe[o.status]||o.status,o.statusText,"string"==typeof o.responseText?{text:o.responseText}:void 0,o.getAllResponseHeaders()))}},o.onload=e(),o.onerror=e("error"),e=Pe[a]=e("abort");try{o.send(t.hasContent&&t.data||null)}catch(s){if(e)throw s}},abort:function(){e&&e()}}:void 0}),Z.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return Z.globalEval(t),t}}}),Z.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),Z.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(r,i){e=Z("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),K.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Me=[],Re=/(=)\?(?=&|$)|\?\?/;Z.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Me.pop()||Z.expando+"_"+ce++;return this[t]=!0,t}}),Z.ajaxPrefilter("json jsonp",function(e,n,r){var i,o,a,s=e.jsonp!==!1&&(Re.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Re.test(e.data)&&"data");return s||"jsonp"===e.dataTypes[0]?(i=e.jsonpCallback=Z.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Re,"$1"+i):e.jsonp!==!1&&(e.url+=(le.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||Z.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=t[i],t[i]=function(){a=arguments},r.always(function(){t[i]=o,e[i]&&(e.jsonpCallback=n.jsonpCallback,Me.push(i)),a&&Z.isFunction(o)&&o(a[0]),a=o=void 0}),"script"):void 0}),Z.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||K;var r=at.exec(t),i=!n&&[];return r?[e.createElement(r[1])]:(r=Z.buildFragment([t],e,i),i&&i.length&&Z(i).remove(),Z.merge([],r.childNodes))};var Le=Z.fn.load;Z.fn.load=function(t,e,n){if("string"!=typeof t&&Le)return Le.apply(this,arguments);var r,i,o,a=this,s=t.indexOf(" ");return s>=0&&(r=Z.trim(t.slice(s)),t=t.slice(0,s)),Z.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&Z.ajax({url:t,type:i,dataType:"html",data:e}).done(function(t){o=arguments,a.html(r?Z("<div>").append(Z.parseHTML(t)).find(r):t)}).complete(n&&function(t,e){a.each(n,o||[t.responseText,e,t])}),this},Z.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){Z.fn[e]=function(t){return this.on(e,t)}}),Z.expr.filters.animated=function(t){return Z.grep(Z.timers,function(e){return t===e.elem}).length};var Ne=t.document.documentElement;Z.offset={setOffset:function(t,e,n){var r,i,o,a,s,u,c,l=Z.css(t,"position"),f=Z(t),h={};"static"===l&&(t.style.position="relative"),s=f.offset(),o=Z.css(t,"top"),u=Z.css(t,"left"),c=("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1,c?(r=f.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),Z.isFunction(e)&&(e=e.call(t,n,s)),null!=e.top&&(h.top=e.top-s.top+a),null!=e.left&&(h.left=e.left-s.left+i),"using"in e?e.using.call(t,h):f.css(h)}},Z.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){Z.offset.setOffset(this,t,e)});var e,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)return e=o.documentElement,Z.contains(e,r)?(typeof r.getBoundingClientRect!==kt&&(i=r.getBoundingClientRect()),n=H(o),{top:i.top+n.pageYOffset-e.clientTop,left:i.left+n.pageXOffset-e.clientLeft}):i},position:function(){if(this[0]){var t,e,n=this[0],r={top:0,left:0};return"fixed"===Z.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),Z.nodeName(t[0],"html")||(r=t.offset()),r.top+=Z.css(t[0],"borderTopWidth",!0),r.left+=Z.css(t[0],"borderLeftWidth",!0)),{top:e.top-r.top-Z.css(n,"marginTop",!0),left:e.left-r.left-Z.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||Ne;t&&!Z.nodeName(t,"html")&&"static"===Z.css(t,"position");)t=t.offsetParent;return t||Ne})}}),Z.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var r="pageYOffset"===n;Z.fn[e]=function(i){return vt(this,function(e,i,o){var a=H(e);return void 0===o?a?a[n]:e[i]:void(a?a.scrollTo(r?t.pageXOffset:o,r?o:t.pageYOffset):e[i]=o)},e,i,arguments.length,null)}}),Z.each(["top","left"],function(t,e){Z.cssHooks[e]=x(Q.pixelPosition,function(t,n){return n?(n=w(t,e),Vt.test(n)?Z(t).position()[e]+"px":n):void 0})}),Z.each({Height:"height",Width:"width"},function(t,e){Z.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){Z.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||i===!0?"margin":"border");return vt(this,function(e,n,r){var i;return Z.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+t],i["scroll"+t],e.body["offset"+t],i["offset"+t],i["client"+t])):void 0===r?Z.css(e,n,a):Z.style(e,n,r,a)},e,o?r:void 0,o,null)}})}),Z.fn.size=function(){return this.length},Z.fn.andSelf=Z.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return Z});var Fe=t.jQuery,De=t.$;return Z.noConflict=function(e){return t.$===Z&&(t.$=De),e&&t.jQuery===Z&&(t.jQuery=Fe),Z},typeof e===kt&&(t.jQuery=t.$=Z),Z}),function(t,e,n){"use strict";function r(t,e){return e=e||Error,function(){var n,r,i=2,o=arguments,a=o[0],s="["+(t?t+":":"")+a+"] ",u=o[1];for(s+=u.replace(/\{\d+\}/g,function(t){var e=+t.slice(1,-1),n=e+i;return n<o.length?$t(o[n]):t}),s+="\nhttp://errors.angularjs.org/1.4.8/"+(t?t+"/":"")+a,r=i,n="?";r<o.length;r++,n="&")s+=n+"p"+(r-i)+"="+encodeURIComponent($t(o[r]));return new e(s)}}function i(t){if(null==t||A(t))return!1;if(Hr(t)||S(t)||Pr&&t instanceof Pr)return!0;var e="length"in Object(t)&&t.length;return C(e)&&(e>=0&&e-1 in t||"function"==typeof t.item)}function o(t,e,n){var r,a;if(t)if(E(t))for(r in t)"prototype"==r||"length"==r||"name"==r||t.hasOwnProperty&&!t.hasOwnProperty(r)||e.call(n,t[r],r,t);else if(Hr(t)||i(t)){var s="object"!=typeof t;for(r=0,a=t.length;a>r;r++)(s||r in t)&&e.call(n,t[r],r,t)}else if(t.forEach&&t.forEach!==o)t.forEach(e,n,t);else if(x(t))for(r in t)e.call(n,t[r],r,t);else if("function"==typeof t.hasOwnProperty)for(r in t)t.hasOwnProperty(r)&&e.call(n,t[r],r,t);else for(r in t)Cr.call(t,r)&&e.call(n,t[r],r,t);return t}function a(t,e,n){for(var r=Object.keys(t).sort(),i=0;i<r.length;i++)e.call(n,t[r[i]],r[i]);return r}function s(t){return function(e,n){t(n,e)}}function u(){return++Ir}function c(t,e){e?t.$$hashKey=e:delete t.$$hashKey}function l(t,e,n){for(var r=t.$$hashKey,i=0,o=e.length;o>i;++i){var a=e[i];if(w(a)||E(a))for(var s=Object.keys(a),u=0,f=s.length;f>u;u++){var h=s[u],p=a[h];n&&w(p)?k(p)?t[h]=new Date(p.valueOf()):T(p)?t[h]=new RegExp(p):p.nodeName?t[h]=p.cloneNode(!0):F(p)?t[h]=p.clone():(w(t[h])||(t[h]=Hr(p)?[]:{}),l(t[h],[p],!0)):t[h]=p}}return c(t,r),t}function f(t){return l(t,Mr.call(arguments,1),!1)}function h(t){return l(t,Mr.call(arguments,1),!0)}function p(t){return parseInt(t,10)}function d(t,e){return f(Object.create(t),e)}function g(){}function v(t){return t}function m(t){return function(){return t}}function y(t){return E(t.toString)&&t.toString!==Nr}function $(t){return"undefined"==typeof t}function b(t){return"undefined"!=typeof t}function w(t){return null!==t&&"object"==typeof t}function x(t){return null!==t&&"object"==typeof t&&!Fr(t)}function S(t){return"string"==typeof t}function C(t){return"number"==typeof t}function k(t){return"[object Date]"===Nr.call(t)}function E(t){return"function"==typeof t}function T(t){return"[object RegExp]"===Nr.call(t)}function A(t){return t&&t.window===t}function P(t){return t&&t.$evalAsync&&t.$watch}function O(t){return"[object File]"===Nr.call(t)}function j(t){return"[object FormData]"===Nr.call(t)}function M(t){return"[object Blob]"===Nr.call(t)}function R(t){return"boolean"==typeof t}function L(t){return t&&E(t.then)}function N(t){return t&&C(t.length)&&Vr.test(Nr.call(t))}function F(t){return!(!t||!(t.nodeName||t.prop&&t.attr&&t.find))}function D(t){var e,n={},r=t.split(",");for(e=0;e<r.length;e++)n[r[e]]=!0;return n}function _(t){return Sr(t.nodeName||t[0]&&t[0].nodeName)}function I(t,e){var n=t.indexOf(e);return n>=0&&t.splice(n,1),n}function q(t,e){function n(t,e){var n,i=e.$$hashKey;if(Hr(t))for(var o=0,a=t.length;a>o;o++)e.push(r(t[o]));else if(x(t))for(n in t)e[n]=r(t[n]);else if(t&&"function"==typeof t.hasOwnProperty)for(n in t)t.hasOwnProperty(n)&&(e[n]=r(t[n]));else for(n in t)Cr.call(t,n)&&(e[n]=r(t[n]));return c(e,i),e}function r(t){if(!w(t))return t;var e=i.indexOf(t);if(-1!==e)return a[e];if(A(t)||P(t))throw Dr("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r,o=!1;return Hr(t)?(r=[],o=!0):N(t)?r=new t.constructor(t):k(t)?r=new Date(t.getTime()):T(t)?(r=new RegExp(t.source,t.toString().match(/[^\/]*$/)[0]),r.lastIndex=t.lastIndex):E(t.cloneNode)?r=t.cloneNode(!0):(r=Object.create(Fr(t)),o=!0),i.push(t),a.push(r),o?n(t,r):r}var i=[],a=[];if(e){if(N(e))throw Dr("cpta","Can't copy! TypedArray destination cannot be mutated.");if(t===e)throw Dr("cpi","Can't copy! Source and destination are identical.");return Hr(e)?e.length=0:o(e,function(t,n){"$$hashKey"!==n&&delete e[n]}),i.push(t),a.push(e),n(t,e)}return r(t)}function H(t,e){if(Hr(t)){e=e||[];for(var n=0,r=t.length;r>n;n++)e[n]=t[n]}else if(w(t)){e=e||{};for(var i in t)("$"!==i.charAt(0)||"$"!==i.charAt(1))&&(e[i]=t[i])}return e||t}function V(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!==t&&e!==e)return!0;var n,r,i,o=typeof t,a=typeof e;if(o==a&&"object"==o){if(!Hr(t)){if(k(t))return k(e)?V(t.getTime(),e.getTime()):!1;if(T(t))return T(e)?t.toString()==e.toString():!1;if(P(t)||P(e)||A(t)||A(e)||Hr(e)||k(e)||T(e))return!1;i=vt();for(r in t)if("$"!==r.charAt(0)&&!E(t[r])){if(!V(t[r],e[r]))return!1;i[r]=!0}for(r in e)if(!(r in i)&&"$"!==r.charAt(0)&&b(e[r])&&!E(e[r]))return!1;return!0}if(!Hr(e))return!1;if((n=t.length)==e.length){for(r=0;n>r;r++)if(!V(t[r],e[r]))return!1;return!0}}return!1}function W(t,e,n){return t.concat(Mr.call(e,n))}function B(t,e){return Mr.call(t,e||0)}function z(t,e){var n=arguments.length>2?B(arguments,2):[];return!E(e)||e instanceof RegExp?e:n.length?function(){return arguments.length?e.apply(t,W(n,arguments,0)):e.apply(t,n)}:function(){return arguments.length?e.apply(t,arguments):e.call(t)}}function U(t,r){var i=r;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?i=n:A(r)?i="$WINDOW":r&&e===r?i="$DOCUMENT":P(r)&&(i="$SCOPE"),i}function X(t,e){return"undefined"==typeof t?n:(C(e)||(e=e?2:null),JSON.stringify(t,U,e))}function G(t){return S(t)?JSON.parse(t):t}function Y(t,e){var n=Date.parse("Jan 01, 1970 00:00:00 "+t)/6e4;return isNaN(n)?e:n}function Q(t,e){return t=new Date(t.getTime()),t.setMinutes(t.getMinutes()+e),t}function K(t,e,n){n=n?-1:1;var r=Y(e,t.getTimezoneOffset());return Q(t,n*(r-t.getTimezoneOffset()))}function J(t){t=Pr(t).clone();try{t.empty()}catch(e){}var n=Pr("<div>").append(t).html();try{return t[0].nodeType===Jr?Sr(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(t,e){return"<"+Sr(e)})}catch(e){return Sr(n)}}function Z(t){try{return decodeURIComponent(t)}catch(e){}}function tt(t){var e={};return o((t||"").split("&"),function(t){var n,r,i;t&&(r=t=t.replace(/\+/g,"%20"),n=t.indexOf("="),-1!==n&&(r=t.substring(0,n),i=t.substring(n+1)),r=Z(r),b(r)&&(i=b(i)?Z(i):!0,Cr.call(e,r)?Hr(e[r])?e[r].push(i):e[r]=[e[r],i]:e[r]=i))}),e}function et(t){var e=[];return o(t,function(t,n){Hr(t)?o(t,function(t){e.push(rt(n,!0)+(t===!0?"":"="+rt(t,!0)))}):e.push(rt(n,!0)+(t===!0?"":"="+rt(t,!0)))}),e.length?e.join("&"):""}function nt(t){return rt(t,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function rt(t,e){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,e?"%20":"+")}function it(t,e){var n,r,i=Xr.length;for(r=0;i>r;++r)if(n=Xr[r]+e,S(n=t.getAttribute(n)))return n;return null}function ot(t,e){var n,r,i={};o(Xr,function(e){var i=e+"app";!n&&t.hasAttribute&&t.hasAttribute(i)&&(n=t,r=t.getAttribute(i))}),o(Xr,function(e){var i,o=e+"app";!n&&(i=t.querySelector("["+o.replace(":","\\:")+"]"))&&(n=i,r=i.getAttribute(o))}),n&&(i.strictDi=null!==it(n,"strict-di"),e(n,r?[r]:[],i))}function at(n,r,i){w(i)||(i={});var a={strictDi:!1};i=f(a,i);var s=function(){if(n=Pr(n),n.injector()){var t=n[0]===e?"document":J(n);throw Dr("btstrpd","App Already Bootstrapped with this Element '{0}'",t.replace(/</,"&lt;").replace(/>/,"&gt;"))}r=r||[],r.unshift(["$provide",function(t){t.value("$rootElement",n)}]),i.debugInfoEnabled&&r.push(["$compileProvider",function(t){t.debugInfoEnabled(!0)}]),r.unshift("ng");var o=te(r,i.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(t,e,n,r){t.$apply(function(){e.data("$injector",r),n(e)(t)})}]),o},u=/^NG_ENABLE_DEBUG_INFO!/,c=/^NG_DEFER_BOOTSTRAP!/;return t&&u.test(t.name)&&(i.debugInfoEnabled=!0,t.name=t.name.replace(u,"")),t&&!c.test(t.name)?s():(t.name=t.name.replace(c,""),_r.resumeBootstrap=function(t){return o(t,function(t){r.push(t)}),s()},void(E(_r.resumeDeferredBootstrap)&&_r.resumeDeferredBootstrap()))}function st(){t.name="NG_ENABLE_DEBUG_INFO!"+t.name,t.location.reload()}function ut(t){var e=_r.element(t).injector();if(!e)throw Dr("test","no injector found for element argument to getTestability");return e.get("$$testability")}function ct(t,e){return e=e||"_",t.replace(Gr,function(t,n){return(n?e:"")+t.toLowerCase()})}function lt(){var e;if(!Yr){var r=Ur();Or=$(r)?t.jQuery:r?t[r]:n,Or&&Or.fn.on?(Pr=Or,f(Or.fn,{scope:mi.scope,isolateScope:mi.isolateScope,controller:mi.controller,injector:mi.injector,inheritedData:mi.inheritedData}),e=Or.cleanData,Or.cleanData=function(t){var n;if(qr)qr=!1;else for(var r,i=0;null!=(r=t[i]);i++)n=Or._data(r,"events"),n&&n.$destroy&&Or(r).triggerHandler("$destroy");e(t)}):Pr=At,_r.element=Pr,Yr=!0}}function ft(t,e,n){if(!t)throw Dr("areq","Argument '{0}' is {1}",e||"?",n||"required");return t}function ht(t,e,n){return n&&Hr(t)&&(t=t[t.length-1]),ft(E(t),e,"not a function, got "+(t&&"object"==typeof t?t.constructor.name||"Object":typeof t)),t}function pt(t,e){if("hasOwnProperty"===t)throw Dr("badname","hasOwnProperty is not a valid {0} name",e)}function dt(t,e,n){if(!e)return t;for(var r,i=e.split("."),o=t,a=i.length,s=0;a>s;s++)r=i[s],t&&(t=(o=t)[r]);return!n&&E(t)?z(o,t):t}function gt(t){for(var e,n=t[0],r=t[t.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(e||t[i]!==n)&&(e||(e=Pr(Mr.call(t,0,i))),e.push(n));return e||t}function vt(){return Object.create(null)}function mt(t){function e(t,e,n){return t[e]||(t[e]=n())}var n=r("$injector"),i=r("ng"),o=e(t,"angular",Object);return o.$$minErr=o.$$minErr||r,e(o,"module",function(){var t={};return function(r,o,a){var s=function(t,e){if("hasOwnProperty"===t)throw i("badname","hasOwnProperty is not a valid {0} name",e)};return s(r,"module"),o&&t.hasOwnProperty(r)&&(t[r]=null),e(t,r,function(){function t(t,e,n,r){return r||(r=i),function(){return r[n||"push"]([t,e,arguments]),l}}function e(t,e){return function(n,o){return o&&E(o)&&(o.$$moduleName=r),i.push([t,e,arguments]),l}}if(!o)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var i=[],s=[],u=[],c=t("$injector","invoke","push",s),l={_invokeQueue:i,_configBlocks:s,_runBlocks:u,requires:o,name:r,provider:e("$provide","provider"),factory:e("$provide","factory"),service:e("$provide","service"),value:t("$provide","value"),constant:t("$provide","constant","unshift"),decorator:e("$provide","decorator"),animation:e("$animateProvider","register"),filter:e("$filterProvider","register"),controller:e("$controllerProvider","register"),directive:e("$compileProvider","directive"),config:c,run:function(t){return u.push(t),this}};return a&&c(a),l})}})}function yt(t){var e=[];return JSON.stringify(t,function(t,n){if(n=U(t,n),w(n)){if(e.indexOf(n)>=0)return"...";e.push(n)}return n})}function $t(t){return"function"==typeof t?t.toString().replace(/ \{[\s\S]*$/,""):$(t)?"undefined":"string"!=typeof t?yt(t):t}function bt(e){f(e,{bootstrap:at,copy:q,extend:f,merge:h,equals:V,element:Pr,forEach:o,injector:te,noop:g,bind:z,toJson:X,fromJson:G,identity:v,isUndefined:$,isDefined:b,isString:S,isFunction:E,isObject:w,isNumber:C,isElement:F,isArray:Hr,version:ni,isDate:k,lowercase:Sr,uppercase:kr,callbacks:{counter:0},getTestability:ut,$$minErr:r,$$csp:zr,reloadWithDebugInfo:st}),(jr=mt(t))("ng",["ngLocale"],["$provide",function(t){t.provider({$$sanitizeUri:$n}),t.provider("$compile",le).directive({a:yo,input:No,textarea:No,form:So,script:Ta,select:Oa,style:Ma,option:ja,ngBind:_o,ngBindHtml:qo,ngBindTemplate:Io,ngClass:Vo,ngClassEven:Bo,ngClassOdd:Wo,ngCloak:zo,ngController:Uo,ngForm:Co,ngHide:wa,ngIf:Yo,ngInclude:Qo,ngInit:Jo,ngNonBindable:ha,ngPluralize:va,ngRepeat:ma,ngShow:ba,
ngStyle:xa,ngSwitch:Sa,ngSwitchWhen:Ca,ngSwitchDefault:ka,ngOptions:ga,ngTransclude:Ea,ngModel:ca,ngList:Zo,ngChange:Ho,pattern:La,ngPattern:La,required:Ra,ngRequired:Ra,minlength:Fa,ngMinlength:Fa,maxlength:Na,ngMaxlength:Na,ngValue:Do,ngModelOptions:fa}).directive({ngInclude:Ko}).directive($o).directive(Xo),t.provider({$anchorScroll:ee,$animate:Mi,$animateCss:Ri,$$animateQueue:ji,$$AnimateRunner:Oi,$browser:se,$cacheFactory:ue,$controller:ge,$document:ve,$exceptionHandler:me,$filter:Rn,$$forceReflow:_i,$interpolate:je,$interval:Me,$http:Te,$httpParamSerializer:$e,$httpParamSerializerJQLike:be,$httpBackend:Pe,$xhrFactory:Ae,$location:Ue,$log:Xe,$parse:pn,$rootScope:yn,$q:dn,$$q:gn,$sce:Sn,$sceDelegate:xn,$sniffer:Cn,$templateCache:ce,$templateRequest:kn,$$testability:En,$timeout:Tn,$window:On,$$rAF:mn,$$jqLite:Yt,$$HashMap:wi,$$cookieReader:Mn})}])}function wt(){return++ii}function xt(t){return t.replace(si,function(t,e,n,r){return r?n.toUpperCase():n}).replace(ui,"Moz$1")}function St(t){return!hi.test(t)}function Ct(t){var e=t.nodeType;return e===Qr||!e||e===ti}function kt(t){for(var e in ri[t.ng339])return!0;return!1}function Et(t,e){var n,r,i,a,s=e.createDocumentFragment(),u=[];if(St(t))u.push(e.createTextNode(t));else{for(n=n||s.appendChild(e.createElement("div")),r=(pi.exec(t)||["",""])[1].toLowerCase(),i=gi[r]||gi._default,n.innerHTML=i[1]+t.replace(di,"<$1></$2>")+i[2],a=i[0];a--;)n=n.lastChild;u=W(u,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",o(u,function(t){s.appendChild(t)}),s}function Tt(t,n){n=n||e;var r;return(r=fi.exec(t))?[n.createElement(r[1])]:(r=Et(t,n))?r.childNodes:[]}function At(t){if(t instanceof At)return t;var e;if(S(t)&&(t=Wr(t),e=!0),!(this instanceof At)){if(e&&"<"!=t.charAt(0))throw li("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new At(t)}e?_t(this,Tt(t)):_t(this,t)}function Pt(t){return t.cloneNode(!0)}function Ot(t,e){if(e||Mt(t),t.querySelectorAll)for(var n=t.querySelectorAll("*"),r=0,i=n.length;i>r;r++)Mt(n[r])}function jt(t,e,n,r){if(b(r))throw li("offargs","jqLite#off() does not support the `selector` argument");var i=Rt(t),a=i&&i.events,s=i&&i.handle;if(s)if(e){var u=function(e){var r=a[e];b(n)&&I(r||[],n),b(n)&&r&&r.length>0||(ai(t,e,s),delete a[e])};o(e.split(" "),function(t){u(t),ci[t]&&u(ci[t])})}else for(e in a)"$destroy"!==e&&ai(t,e,s),delete a[e]}function Mt(t,e){var r=t.ng339,i=r&&ri[r];if(i){if(e)return void delete i.data[e];i.handle&&(i.events.$destroy&&i.handle({},"$destroy"),jt(t)),delete ri[r],t.ng339=n}}function Rt(t,e){var r=t.ng339,i=r&&ri[r];return e&&!i&&(t.ng339=r=wt(),i=ri[r]={events:{},data:{},handle:n}),i}function Lt(t,e,n){if(Ct(t)){var r=b(n),i=!r&&e&&!w(e),o=!e,a=Rt(t,!i),s=a&&a.data;if(r)s[e]=n;else{if(o)return s;if(i)return s&&s[e];f(s,e)}}}function Nt(t,e){return t.getAttribute?(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+e+" ")>-1:!1}function Ft(t,e){e&&t.setAttribute&&o(e.split(" "),function(e){t.setAttribute("class",Wr((" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Wr(e)+" "," ")))})}function Dt(t,e){if(e&&t.setAttribute){var n=(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(e.split(" "),function(t){t=Wr(t),-1===n.indexOf(" "+t+" ")&&(n+=t+" ")}),t.setAttribute("class",Wr(n))}}function _t(t,e){if(e)if(e.nodeType)t[t.length++]=e;else{var n=e.length;if("number"==typeof n&&e.window!==e){if(n)for(var r=0;n>r;r++)t[t.length++]=e[r]}else t[t.length++]=e}}function It(t,e){return qt(t,"$"+(e||"ngController")+"Controller")}function qt(t,e,n){t.nodeType==ti&&(t=t.documentElement);for(var r=Hr(e)?e:[e];t;){for(var i=0,o=r.length;o>i;i++)if(b(n=Pr.data(t,r[i])))return n;t=t.parentNode||t.nodeType===ei&&t.host}}function Ht(t){for(Ot(t,!0);t.firstChild;)t.removeChild(t.firstChild)}function Vt(t,e){e||Ot(t);var n=t.parentNode;n&&n.removeChild(t)}function Wt(e,n){n=n||t,"complete"===n.document.readyState?n.setTimeout(e):Pr(n).on("load",e)}function Bt(t,e){var n=yi[e.toLowerCase()];return n&&$i[_(t)]&&n}function zt(t){return bi[t]}function Ut(t,e){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=e[r||n.type],o=i?i.length:0;if(o){if($(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0};var s=i.specialHandlerWrapper||Xt;o>1&&(i=H(i));for(var u=0;o>u;u++)n.isImmediatePropagationStopped()||s(t,n,i[u])}};return n.elem=t,n}function Xt(t,e,n){n.call(t,e)}function Gt(t,e,n){var r=e.relatedTarget;(!r||r!==t&&!vi.call(t,r))&&n.call(t,e)}function Yt(){this.$get=function(){return f(At,{hasClass:function(t,e){return t.attr&&(t=t[0]),Nt(t,e)},addClass:function(t,e){return t.attr&&(t=t[0]),Dt(t,e)},removeClass:function(t,e){return t.attr&&(t=t[0]),Ft(t,e)}})}}function Qt(t,e){var n=t&&t.$$hashKey;if(n)return"function"==typeof n&&(n=t.$$hashKey()),n;var r=typeof t;return n="function"==r||"object"==r&&null!==t?t.$$hashKey=r+":"+(e||u)():r+":"+t}function Kt(t,e){if(e){var n=0;this.nextUid=function(){return++n}}o(t,this.put,this)}function Jt(t){var e=t.toString().replace(ki,""),n=e.match(xi);return n?"function("+(n[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Zt(t,e,n){var r,i,a,s;if("function"==typeof t){if(!(r=t.$inject)){if(r=[],t.length){if(e)throw S(n)&&n||(n=t.name||Jt(t)),Ei("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=t.toString().replace(ki,""),a=i.match(xi),o(a[1].split(Si),function(t){t.replace(Ci,function(t,e,n){r.push(n)})})}t.$inject=r}}else Hr(t)?(s=t.length-1,ht(t[s],"fn"),r=t.slice(0,s)):ht(t,"fn",!0);return r}function te(t,e){function r(t){return function(e,n){return w(e)?void o(e,s(t)):t(e,n)}}function i(t,e){if(pt(t,"service"),(E(e)||Hr(e))&&(e=C.instantiate(e)),!e.$get)throw Ei("pget","Provider '{0}' must define $get factory method.",t);return x[t+v]=e}function a(t,e){return function(){var n=T.invoke(e,this);if($(n))throw Ei("undef","Provider '{0}' must return a value from $get factory method.",t);return n}}function u(t,e,n){return i(t,{$get:n!==!1?a(t,e):e})}function c(t,e){return u(t,["$injector",function(t){return t.instantiate(e)}])}function l(t,e){return u(t,m(e),!1)}function f(t,e){pt(t,"constant"),x[t]=e,k[t]=e}function h(t,e){var n=C.get(t+v),r=n.$get;n.$get=function(){var t=T.invoke(r,n);return T.invoke(e,null,{$delegate:t})}}function p(t){ft($(t)||Hr(t),"modulesToLoad","not an array");var e,n=[];return o(t,function(t){function r(t){var e,n;for(e=0,n=t.length;n>e;e++){var r=t[e],i=C.get(r[0]);i[r[1]].apply(i,r[2])}}if(!b.get(t)){b.put(t,!0);try{S(t)?(e=jr(t),n=n.concat(p(e.requires)).concat(e._runBlocks),r(e._invokeQueue),r(e._configBlocks)):E(t)?n.push(C.invoke(t)):Hr(t)?n.push(C.invoke(t)):ht(t,"module")}catch(i){throw Hr(t)&&(t=t[t.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Ei("modulerr","Failed to instantiate module {0} due to:\n{1}",t,i.stack||i.message||i)}}}),n}function d(t,n){function r(e,r){if(t.hasOwnProperty(e)){if(t[e]===g)throw Ei("cdep","Circular dependency found: {0}",e+" <- "+y.join(" <- "));return t[e]}try{return y.unshift(e),t[e]=g,t[e]=n(e,r)}catch(i){throw t[e]===g&&delete t[e],i}finally{y.shift()}}function i(t,n,i,o){"string"==typeof i&&(o=i,i=null);var a,s,u,c=[],l=te.$$annotate(t,e,o);for(s=0,a=l.length;a>s;s++){if(u=l[s],"string"!=typeof u)throw Ei("itkn","Incorrect injection token! Expected service name as string, got {0}",u);c.push(i&&i.hasOwnProperty(u)?i[u]:r(u,o))}return Hr(t)&&(t=t[a]),t.apply(n,c)}function o(t,e,n){var r=Object.create((Hr(t)?t[t.length-1]:t).prototype||null),o=i(t,r,e,n);return w(o)||E(o)?o:r}return{invoke:i,instantiate:o,get:r,annotate:te.$$annotate,has:function(e){return x.hasOwnProperty(e+v)||t.hasOwnProperty(e)}}}e=e===!0;var g={},v="Provider",y=[],b=new Kt([],!0),x={$provide:{provider:r(i),factory:r(u),service:r(c),value:r(l),constant:r(f),decorator:h}},C=x.$injector=d(x,function(t,e){throw _r.isString(e)&&y.push(e),Ei("unpr","Unknown provider: {0}",y.join(" <- "))}),k={},T=k.$injector=d(k,function(t,e){var r=C.get(t+v,e);return T.invoke(r.$get,r,n,t)});return o(p(t),function(t){t&&T.invoke(t)}),T}function ee(){var t=!0;this.disableAutoScrolling=function(){t=!1},this.$get=["$window","$location","$rootScope",function(e,n,r){function i(t){var e=null;return Array.prototype.some.call(t,function(t){return"a"===_(t)?(e=t,!0):void 0}),e}function o(){var t=s.yOffset;if(E(t))t=t();else if(F(t)){var n=t[0],r=e.getComputedStyle(n);t="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else C(t)||(t=0);return t}function a(t){if(t){t.scrollIntoView();var n=o();if(n){var r=t.getBoundingClientRect().top;e.scrollBy(0,r-n)}}else e.scrollTo(0,0)}function s(t){t=S(t)?t:n.hash();var e;t?(e=u.getElementById(t))?a(e):(e=i(u.getElementsByName(t)))?a(e):"top"===t&&a(null):a(null)}var u=e.document;return t&&r.$watch(function(){return n.hash()},function(t,e){(t!==e||""!==t)&&Wt(function(){r.$evalAsync(s)})}),s}]}function ne(t,e){return t||e?t?e?(Hr(t)&&(t=t.join(" ")),Hr(e)&&(e=e.join(" ")),t+" "+e):t:e:""}function re(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.nodeType===Ai)return n}}function ie(t){S(t)&&(t=t.split(" "));var e=vt();return o(t,function(t){t.length&&(e[t]=!0)}),e}function oe(t){return w(t)?t:{}}function ae(t,e,n,r){function i(t){try{t.apply(null,B(arguments,1))}finally{if(y--,0===y)for(;b.length;)try{b.pop()()}catch(e){n.error(e)}}}function a(t){var e=t.indexOf("#");return-1===e?"":t.substr(e)}function s(){k=null,c(),l()}function u(){try{return p.state}catch(t){}}function c(){w=u(),w=$(w)?null:w,V(w,A)&&(w=A),A=w}function l(){(S!==f.url()||x!==w)&&(S=f.url(),x=w,o(E,function(t){t(f.url(),w)}))}var f=this,h=(e[0],t.location),p=t.history,d=t.setTimeout,v=t.clearTimeout,m={};f.isMock=!1;var y=0,b=[];f.$$completeOutstandingRequest=i,f.$$incOutstandingRequestCount=function(){y++},f.notifyWhenNoOutstandingRequests=function(t){0===y?t():b.push(t)};var w,x,S=h.href,C=e.find("base"),k=null;c(),x=w,f.url=function(e,n,i){if($(i)&&(i=null),h!==t.location&&(h=t.location),p!==t.history&&(p=t.history),e){var o=x===i;if(S===e&&(!r.history||o))return f;var s=S&&De(S)===De(e);return S=e,x=i,!r.history||s&&o?((!s||k)&&(k=e),n?h.replace(e):s?h.hash=a(e):h.href=e,h.href!==e&&(k=e)):(p[n?"replaceState":"pushState"](i,"",e),c(),x=w),f}return k||h.href.replace(/%27/g,"'")},f.state=function(){return w};var E=[],T=!1,A=null;f.onUrlChange=function(e){return T||(r.history&&Pr(t).on("popstate",s),Pr(t).on("hashchange",s),T=!0),E.push(e),e},f.$$applicationDestroyed=function(){Pr(t).off("hashchange popstate",s)},f.$$checkUrlChange=l,f.baseHref=function(){var t=C.attr("href");return t?t.replace(/^(https?\:)?\/\/[^\/]*/,""):""},f.defer=function(t,e){var n;return y++,n=d(function(){delete m[n],i(t)},e||0),m[n]=!0,n},f.defer.cancel=function(t){return m[t]?(delete m[t],v(t),i(g),!0):!1}}function se(){this.$get=["$window","$log","$sniffer","$document",function(t,e,n,r){return new ae(t,r,e,n)}]}function ue(){this.$get=function(){function t(t,n){function i(t){t!=h&&(p?p==t&&(p=t.n):p=t,o(t.n,t.p),o(t,h),h=t,h.n=null)}function o(t,e){t!=e&&(t&&(t.p=e),e&&(e.n=t))}if(t in e)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",t);var a=0,s=f({},n,{id:t}),u=vt(),c=n&&n.capacity||Number.MAX_VALUE,l=vt(),h=null,p=null;return e[t]={put:function(t,e){if(!$(e)){if(c<Number.MAX_VALUE){var n=l[t]||(l[t]={key:t});i(n)}return t in u||a++,u[t]=e,a>c&&this.remove(p.key),e}},get:function(t){if(c<Number.MAX_VALUE){var e=l[t];if(!e)return;i(e)}return u[t]},remove:function(t){if(c<Number.MAX_VALUE){var e=l[t];if(!e)return;e==h&&(h=e.p),e==p&&(p=e.n),o(e.n,e.p),delete l[t]}t in u&&(delete u[t],a--)},removeAll:function(){u=vt(),a=0,l=vt(),h=p=null},destroy:function(){u=null,s=null,l=null,delete e[t]},info:function(){return f({},s,{size:a})}}}var e={};return t.info=function(){var t={};return o(e,function(e,n){t[n]=e.info()}),t},t.get=function(t){return e[t]},t}}function ce(){this.$get=["$cacheFactory",function(t){return t("templates")}]}function le(t,r){function i(t,e,n){var r=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,i={};return o(t,function(t,o){var a=t.match(r);if(!a)throw Li("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",e,o,t,n?"controller bindings definition":"isolate scope definition");i[o]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||o}}),i}function a(t,e){var n={isolateScope:null,bindToController:null};if(w(t.scope)&&(t.bindToController===!0?(n.bindToController=i(t.scope,e,!0),n.isolateScope={}):n.isolateScope=i(t.scope,e,!1)),w(t.bindToController)&&(n.bindToController=i(t.bindToController,e,!0)),w(n.bindToController)){var r=t.controller,o=t.controllerAs;if(!r)throw Li("noctrl","Cannot bind to controller without directive '{0}'s controller.",e);if(!de(r,o))throw Li("noident","Cannot bind to controller without identifier for directive '{0}'.",e)}return n}function u(t){var e=t.charAt(0);if(!e||e!==Sr(e))throw Li("baddir","Directive name '{0}' is invalid. The first character must be a lowercase letter",t);if(t!==t.trim())throw Li("baddir","Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",t)}var c={},l="Directive",h=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,p=/(([\w\-]+)(?:\:([^;]+))?;?)/,y=D("ngSrc,ngSrcset,src,srcset"),x=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,C=/^(on[a-z]+|formaction)$/;this.directive=function T(e,n){return pt(e,"directive"),S(e)?(u(e),ft(n,"directiveFactory"),c.hasOwnProperty(e)||(c[e]=[],t.factory(e+l,["$injector","$exceptionHandler",function(t,n){var r=[];return o(c[e],function(i,o){try{var s=t.invoke(i);E(s)?s={compile:m(s)}:!s.compile&&s.link&&(s.compile=m(s.link)),s.priority=s.priority||0,s.index=o,s.name=s.name||e,s.require=s.require||s.controller&&s.name,s.restrict=s.restrict||"EA";var u=s.$$bindings=a(s,s.name);w(u.isolateScope)&&(s.$$isolateBindings=u.isolateScope),s.$$moduleName=i.$$moduleName,r.push(s)}catch(c){n(c)}}),r}])),c[e].push(n)):o(e,s(T)),this},this.aHrefSanitizationWhitelist=function(t){return b(t)?(r.aHrefSanitizationWhitelist(t),this):r.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(t){return b(t)?(r.imgSrcSanitizationWhitelist(t),this):r.imgSrcSanitizationWhitelist()};var k=!0;this.debugInfoEnabled=function(t){return b(t)?(k=t,this):k},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(t,r,i,a,s,u,m,b,T,A,O){function j(t,e){try{t.addClass(e)}catch(n){}}function M(t,e,n,r,i){t instanceof Pr||(t=Pr(t)),o(t,function(e,n){e.nodeType==Jr&&e.nodeValue.match(/\S+/)&&(t[n]=Pr(e).wrap("<span></span>").parent()[0])});var a=L(t,e,t,n,r,i);M.$$addScopeClass(t);var s=null;return function(e,n,r){ft(e,"scope"),i&&i.needsNewScope&&(e=e.$parent.$new()),r=r||{};var o=r.parentBoundTranscludeFn,u=r.transcludeControllers,c=r.futureParentElement;o&&o.$$boundTransclude&&(o=o.$$boundTransclude),s||(s=R(c));var l;if(l="html"!==s?Pr(Z(s,Pr("<div>").append(t).html())):n?mi.clone.call(t):t,u)for(var f in u)l.data("$"+f+"Controller",u[f].instance);return M.$$addScopeInfo(l,e),n&&n(l,e),a&&a(e,l,l,o),l}}function R(t){var e=t&&t[0];return e&&"foreignobject"!==_(e)&&e.toString().match(/SVG/)?"svg":"html"}function L(t,e,r,i,o,a){function s(t,r,i,o){var a,s,u,c,l,f,h,p,v;if(d){var m=r.length;for(v=new Array(m),l=0;l<g.length;l+=3)h=g[l],v[h]=r[h]}else v=r;for(l=0,f=g.length;f>l;)u=v[g[l++]],a=g[l++],s=g[l++],a?(a.scope?(c=t.$new(),M.$$addScopeInfo(Pr(u),c)):c=t,p=a.transcludeOnThisElement?N(t,a.transclude,o):!a.templateOnThisElement&&o?o:!o&&e?N(t,e):null,a(s,c,u,i,p)):s&&s(t,u.childNodes,n,o)}for(var u,c,l,f,h,p,d,g=[],v=0;v<t.length;v++)u=new at,c=F(t[v],[],u,0===v?i:n,o),l=c.length?H(c,t[v],u,e,r,null,[],[],a):null,l&&l.scope&&M.$$addScopeClass(u.$$element),h=l&&l.terminal||!(f=t[v].childNodes)||!f.length?null:L(f,l?(l.transcludeOnThisElement||!l.templateOnThisElement)&&l.transclude:e),(l||h)&&(g.push(v,l,h),p=!0,d=d||l),a=null;return p?s:null}function N(t,e,n){var r=function(r,i,o,a,s){return r||(r=t.$new(!1,s),r.$$transcluded=!0),e(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})};return r}function F(t,e,n,r,i){var o,a,s=t.nodeType,u=n.$attr;switch(s){case Qr:z(e,fe(_(t)),"E",r,i);for(var c,l,f,d,g,v,m=t.attributes,y=0,$=m&&m.length;$>y;y++){var b=!1,x=!1;c=m[y],l=c.name,g=Wr(c.value),d=fe(l),(v=ht.test(d))&&(l=l.replace(Ni,"").substr(8).replace(/_(.)/g,function(t,e){return e.toUpperCase()}));var C=d.match(pt);C&&U(C[1])&&(b=l,x=l.substr(0,l.length-5)+"end",l=l.substr(0,l.length-6)),f=fe(l.toLowerCase()),u[f]=l,(v||!n.hasOwnProperty(f))&&(n[f]=g,Bt(t,f)&&(n[f]=!0)),et(t,e,g,f,v),z(e,f,"A",r,i,b,x)}if(a=t.className,w(a)&&(a=a.animVal),S(a)&&""!==a)for(;o=p.exec(a);)f=fe(o[2]),z(e,f,"C",r,i)&&(n[f]=Wr(o[3])),a=a.substr(o.index+o[0].length);break;case Jr:if(11===Ar)for(;t.parentNode&&t.nextSibling&&t.nextSibling.nodeType===Jr;)t.nodeValue=t.nodeValue+t.nextSibling.nodeValue,t.parentNode.removeChild(t.nextSibling);K(e,t.nodeValue);break;case Zr:try{o=h.exec(t.nodeValue),o&&(f=fe(o[1]),z(e,f,"M",r,i)&&(n[f]=Wr(o[2])))}catch(k){}}return e.sort(Y),e}function D(t,e,n){var r=[],i=0;if(e&&t.hasAttribute&&t.hasAttribute(e)){do{if(!t)throw Li("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",e,n);t.nodeType==Qr&&(t.hasAttribute(e)&&i++,t.hasAttribute(n)&&i--),r.push(t),t=t.nextSibling}while(i>0)}else r.push(t);return Pr(r)}function q(t,e,n){return function(r,i,o,a,s){return i=D(i[0],e,n),t(r,i,o,a,s)}}function H(t,r,o,a,s,c,l,f,h){function p(t,e,n,r){t&&(n&&(t=q(t,n,r)),t.require=m.require,t.directiveName=y,(O===m||m.$$isolateScope)&&(t=rt(t,{isolateScope:!0})),l.push(t)),e&&(n&&(e=q(e,n,r)),e.require=m.require,e.directiveName=y,(O===m||m.$$isolateScope)&&(e=rt(e,{isolateScope:!0})),f.push(e))}function d(t,e,n,r){var i;if(S(e)){var o=e.match(x),a=e.substring(o[0].length),s=o[1]||o[3],u="?"===o[2];if("^^"===s?n=n.parent():(i=r&&r[a],i=i&&i.instance),!i){var c="$"+a+"Controller";i=s?n.inheritedData(c):n.data(c)}if(!i&&!u)throw Li("ctreq","Controller '{0}', required by directive '{1}', can't be found!",a,t)}else if(Hr(e)){i=[];for(var l=0,f=e.length;f>l;l++)i[l]=d(t,e[l],n,r)}return i||null}function g(t,e,n,r,i,o){var a=vt();for(var s in r){var c=r[s],l={$scope:c===O||c.$$isolateScope?i:o,$element:t,$attrs:e,$transclude:n},f=c.controller;"@"==f&&(f=e[c.name]);var h=u(f,l,!0,c.controllerAs);a[c.name]=h,_||t.data("$"+c.name+"Controller",h.instance)}return a}function v(t,e,i,a,s){function u(t,e,r){var i;return P(t)||(r=e,e=t,t=n),_&&(i=v),r||(r=_?y.parent():y),s(t,e,i,r,R)}var c,h,p,v,m,y,$,b,w;r===i?($=o,y=o.$$element):(y=Pr(i),$=new at(y,o)),p=e,O?h=e.$new(!0):T&&(p=e.$parent),s&&(m=u,m.$$boundTransclude=s),A&&(v=g(y,$,m,A,h,e)),O&&(M.$$addScopeInfo(y,h,!0,!(j&&(j===O||j===O.$$originalDirective))),M.$$addScopeClass(y,!0),h.$$isolateBindings=O.$$isolateBindings,b=ot(e,$,h,h.$$isolateBindings,O),b&&h.$on("$destroy",b));for(var x in v){var S=A[x],C=v[x],k=S.$$bindings.bindToController;C.identifier&&k&&(w=ot(p,$,C.instance,k,S));var E=C();E!==C.instance&&(C.instance=E,y.data("$"+S.name+"Controller",E),w&&w(),w=ot(p,$,C.instance,k,S))}for(z=0,U=l.length;U>z;z++)c=l[z],it(c,c.isolateScope?h:e,y,$,c.require&&d(c.directiveName,c.require,y,v),m);var R=e;for(O&&(O.template||null===O.templateUrl)&&(R=h),t&&t(R,i.childNodes,n,s),z=f.length-1;z>=0;z--)c=f[z],it(c,c.isolateScope?h:e,y,$,c.require&&d(c.directiveName,c.require,y,v),m)}h=h||{};for(var m,y,$,b,C,k=-Number.MAX_VALUE,T=h.newScopeDirective,A=h.controllerDirectives,O=h.newIsolateScopeDirective,j=h.templateDirective,R=h.nonTlbTranscludeDirective,L=!1,N=!1,_=h.hasElementTranscludeDirective,I=o.$$element=Pr(r),H=c,V=a,z=0,U=t.length;U>z;z++){m=t[z];var Y=m.$$start,K=m.$$end;if(Y&&(I=D(r,Y,K)),$=n,k>m.priority)break;if((C=m.scope)&&(m.templateUrl||(w(C)?(Q("new/isolated scope",O||T,m,I),O=m):Q("new/isolated scope",O,m,I)),T=T||m),y=m.name,!m.templateUrl&&m.controller&&(C=m.controller,A=A||vt(),Q("'"+y+"' controller",A[y],m,I),A[y]=m),(C=m.transclude)&&(L=!0,m.$$tlb||(Q("transclusion",R,m,I),R=m),"element"==C?(_=!0,k=m.priority,$=I,I=o.$$element=Pr(e.createComment(" "+y+": "+o[y]+" ")),r=I[0],nt(s,B($),r),V=M($,a,k,H&&H.name,{nonTlbTranscludeDirective:R})):($=Pr(Pt(r)).contents(),I.empty(),V=M($,a,n,n,{needsNewScope:m.$$isolateScope||m.$$newScope}))),m.template)if(N=!0,Q("template",j,m,I),j=m,C=E(m.template)?m.template(I,o):m.template,C=lt(C),m.replace){if(H=m,$=St(C)?[]:pe(Z(m.templateNamespace,Wr(C))),r=$[0],1!=$.length||r.nodeType!==Qr)throw Li("tplrt","Template for directive '{0}' must have exactly one root element. {1}",y,"");nt(s,I,r);var tt={$attr:{}},et=F(r,[],tt),st=t.splice(z+1,t.length-(z+1));(O||T)&&W(et,O,T),t=t.concat(et).concat(st),X(o,tt),U=t.length}else I.html(C);if(m.templateUrl)N=!0,Q("template",j,m,I),j=m,m.replace&&(H=m),v=G(t.splice(z,t.length-z),I,o,s,L&&V,l,f,{controllerDirectives:A,newScopeDirective:T!==m&&T,newIsolateScopeDirective:O,templateDirective:j,nonTlbTranscludeDirective:R}),U=t.length;else if(m.compile)try{b=m.compile(I,o,V),E(b)?p(null,b,Y,K):b&&p(b.pre,b.post,Y,K)}catch(ut){i(ut,J(I))}m.terminal&&(v.terminal=!0,k=Math.max(k,m.priority))}return v.scope=T&&T.scope===!0,v.transcludeOnThisElement=L,v.templateOnThisElement=N,v.transclude=V,h.hasElementTranscludeDirective=_,v}function W(t,e,n){for(var r=0,i=t.length;i>r;r++)t[r]=d(t[r],{$$isolateScope:e,$$newScope:n})}function z(e,n,r,o,a,s,u){if(n===a)return null;var f=null;if(c.hasOwnProperty(n))for(var h,p=t.get(n+l),g=0,v=p.length;v>g;g++)try{h=p[g],($(o)||o>h.priority)&&-1!=h.restrict.indexOf(r)&&(s&&(h=d(h,{$$start:s,$$end:u})),e.push(h),f=h)}catch(m){i(m)}return f}function U(e){if(c.hasOwnProperty(e))for(var n,r=t.get(e+l),i=0,o=r.length;o>i;i++)if(n=r[i],n.multiElement)return!0;return!1}function X(t,e){var n=e.$attr,r=t.$attr,i=t.$$element;o(t,function(r,i){"$"!=i.charAt(0)&&(e[i]&&e[i]!==r&&(r+=("style"===i?";":" ")+e[i]),t.$set(i,r,!0,n[i]))}),o(e,function(e,o){"class"==o?(j(i,e),t["class"]=(t["class"]?t["class"]+" ":"")+e):"style"==o?(i.attr("style",i.attr("style")+";"+e),t.style=(t.style?t.style+";":"")+e):"$"==o.charAt(0)||t.hasOwnProperty(o)||(t[o]=e,r[o]=n[o])})}function G(t,e,n,r,i,s,u,c){var l,f,h=[],p=e[0],g=t.shift(),v=d(g,{templateUrl:null,transclude:null,replace:null,$$originalDirective:g}),m=E(g.templateUrl)?g.templateUrl(e,n):g.templateUrl,y=g.templateNamespace;return e.empty(),a(m).then(function(a){var d,$,b,x;if(a=lt(a),g.replace){if(b=St(a)?[]:pe(Z(y,Wr(a))),d=b[0],1!=b.length||d.nodeType!==Qr)throw Li("tplrt","Template for directive '{0}' must have exactly one root element. {1}",g.name,m);$={$attr:{}},nt(r,e,d);var S=F(d,[],$);w(g.scope)&&W(S,!0),t=S.concat(t),X(n,$)}else d=p,e.html(a);for(t.unshift(v),l=H(t,d,n,i,e,g,s,u,c),o(r,function(t,n){t==d&&(r[n]=e[0])}),f=L(e[0].childNodes,i);h.length;){var C=h.shift(),k=h.shift(),E=h.shift(),T=h.shift(),A=e[0];if(!C.$$destroyed){if(k!==p){var P=k.className;c.hasElementTranscludeDirective&&g.replace||(A=Pt(d)),nt(E,Pr(k),A),j(Pr(A),P)}x=l.transcludeOnThisElement?N(C,l.transclude,T):T,l(f,C,A,r,x)}}h=null}),function(t,e,n,r,i){var o=i;e.$$destroyed||(h?h.push(e,n,r,o):(l.transcludeOnThisElement&&(o=N(e,l.transclude,i)),l(f,e,n,r,o)))}}function Y(t,e){var n=e.priority-t.priority;return 0!==n?n:t.name!==e.name?t.name<e.name?-1:1:t.index-e.index}function Q(t,e,n,r){function i(t){return t?" (module: "+t+")":""}if(e)throw Li("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",e.name,i(e.$$moduleName),n.name,i(n.$$moduleName),t,J(r))}function K(t,e){var n=r(e,!0);n&&t.push({priority:0,compile:function(t){var e=t.parent(),r=!!e.length;return r&&M.$$addBindingClass(e),function(t,e){var i=e.parent();r||M.$$addBindingClass(i),M.$$addBindingInfo(i,n.expressions),t.$watch(n,function(t){e[0].nodeValue=t})}}})}function Z(t,n){switch(t=Sr(t||"html")){case"svg":case"math":var r=e.createElement("div");return r.innerHTML="<"+t+">"+n+"</"+t+">",r.childNodes[0].childNodes;default:return n}}function tt(t,e){if("srcdoc"==e)return T.HTML;var n=_(t);return"xlinkHref"==e||"form"==n&&"action"==e||"img"!=n&&("src"==e||"ngSrc"==e)?T.RESOURCE_URL:void 0}function et(t,e,n,i,o){var a=tt(t,i);o=y[i]||o;var s=r(n,!0,a,o);if(s){if("multiple"===i&&"select"===_(t))throw Li("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",J(t));e.push({priority:100,compile:function(){return{pre:function(t,e,u){var c=u.$$observers||(u.$$observers=vt());if(C.test(i))throw Li("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var l=u[i];l!==n&&(s=l&&r(l,!0,a,o),n=l),s&&(u[i]=s(t),(c[i]||(c[i]=[])).$$inter=!0,(u.$$observers&&u.$$observers[i].$$scope||t).$watch(s,function(t,e){"class"===i&&t!=e?u.$updateClass(t,e):u.$set(i,t)}))}}}})}}function nt(t,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(t)for(i=0,o=t.length;o>i;i++)if(t[i]==a){t[i++]=r;for(var c=i,l=c+s-1,f=t.length;f>c;c++,l++)f>l?t[c]=t[l]:delete t[c];t.length-=s-1,t.context===a&&(t.context=r);break}u&&u.replaceChild(r,a);var h=e.createDocumentFragment();h.appendChild(a),Pr.hasData(a)&&(Pr.data(r,Pr.data(a)),Or?(qr=!0,Or.cleanData([a])):delete Pr.cache[a[Pr.expando]]);for(var p=1,d=n.length;d>p;p++){var g=n[p];Pr(g).remove(),h.appendChild(g),delete n[p]}n[0]=r,n.length=1}function rt(t,e){return f(function(){return t.apply(null,arguments)},t,e)}function it(t,e,n,r,o,a){try{t(e,n,r,o,a)}catch(s){i(s,J(n))}}function ot(t,e,n,i,a){var u=[];return o(i,function(i,o){var c,l,f,h,p=i.attrName,d=i.optional,v=i.mode;switch(v){case"@":d||Cr.call(e,p)||(n[o]=e[p]=void 0),e.$observe(p,function(t){S(t)&&(n[o]=t)}),e.$$observers[p].$$scope=t,S(e[p])&&(n[o]=r(e[p])(t));break;case"=":if(!Cr.call(e,p)){if(d)break;e[p]=void 0}if(d&&!e[p])break;l=s(e[p]),h=l.literal?V:function(t,e){return t===e||t!==t&&e!==e},f=l.assign||function(){throw c=n[o]=l(t),Li("nonassign","Expression '{0}' used with directive '{1}' is non-assignable!",e[p],a.name)},c=n[o]=l(t);var m=function(e){return h(e,n[o])||(h(e,c)?f(t,e=n[o]):n[o]=e),c=e};m.$stateful=!0;var y;y=i.collection?t.$watchCollection(e[p],m):t.$watch(s(e[p],m),null,l.literal),u.push(y);break;case"&":if(l=e.hasOwnProperty(p)?s(e[p]):g,l===g&&d)break;n[o]=function(e){return l(t,e)}}}),u.length&&function(){for(var t=0,e=u.length;e>t;++t)u[t]()}}var at=function(t,e){if(e){var n,r,i,o=Object.keys(e);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=e[i]}else this.$attr={};this.$$element=t};at.prototype={$normalize:fe,$addClass:function(t){t&&t.length>0&&A.addClass(this.$$element,t)},$removeClass:function(t){t&&t.length>0&&A.removeClass(this.$$element,t)},$updateClass:function(t,e){var n=he(t,e);n&&n.length&&A.addClass(this.$$element,n);var r=he(e,t);r&&r.length&&A.removeClass(this.$$element,r)},$set:function(t,e,n,r){var a,s=this.$$element[0],u=Bt(s,t),c=zt(t),l=t;if(u?(this.$$element.prop(t,e),r=u):c&&(this[c]=e,l=c),this[t]=e,r?this.$attr[t]=r:(r=this.$attr[t],r||(this.$attr[t]=r=ct(t,"-"))),a=_(this.$$element),"a"===a&&"href"===t||"img"===a&&"src"===t)this[t]=e=O(e,"src"===t);else if("img"===a&&"srcset"===t){for(var f="",h=Wr(e),p=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,d=/\s/.test(h)?p:/(,)/,g=h.split(d),v=Math.floor(g.length/2),m=0;v>m;m++){var y=2*m;f+=O(Wr(g[y]),!0),f+=" "+Wr(g[y+1])}var b=Wr(g[2*m]).split(/\s/);f+=O(Wr(b[0]),!0),2===b.length&&(f+=" "+Wr(b[1])),this[t]=e=f}n!==!1&&(null===e||$(e)?this.$$element.removeAttr(r):this.$$element.attr(r,e));var w=this.$$observers;w&&o(w[l],function(t){try{t(e)}catch(n){i(n)}})},$observe:function(t,e){var n=this,r=n.$$observers||(n.$$observers=vt()),i=r[t]||(r[t]=[]);return i.push(e),m.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(t)||$(n[t])||e(n[t])}),function(){I(i,e)}}};var st=r.startSymbol(),ut=r.endSymbol(),lt="{{"==st||"}}"==ut?v:function(t){return t.replace(/\{\{/g,st).replace(/}}/g,ut)},ht=/^ngAttr[A-Z]/,pt=/^(.+)Start$/;return M.$$addBindingInfo=k?function(t,e){var n=t.data("$binding")||[];Hr(e)?n=n.concat(e):n.push(e),t.data("$binding",n)}:g,M.$$addBindingClass=k?function(t){j(t,"ng-binding")}:g,M.$$addScopeInfo=k?function(t,e,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";t.data(i,e)}:g,M.$$addScopeClass=k?function(t,e){j(t,e?"ng-isolate-scope":"ng-scope")}:g,M}]}function fe(t){return xt(t.replace(Ni,""))}function he(t,e){var n="",r=t.split(/\s+/),i=e.split(/\s+/);t:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue t;n+=(n.length>0?" ":"")+a}return n}function pe(t){t=Pr(t);var e=t.length;if(1>=e)return t;for(;e--;){var n=t[e];n.nodeType===Zr&&Rr.call(t,e,1)}return t}function de(t,e){if(e&&S(e))return e;if(S(t)){var n=Di.exec(t);if(n)return n[3]}}function ge(){var t={},e=!1;this.register=function(e,n){pt(e,"controller"),w(e)?f(t,e):t[e]=n},this.allowGlobals=function(){e=!0},this.$get=["$injector","$window",function(i,o){function a(t,e,n,i){if(!t||!w(t.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,e);t.$scope[e]=n}return function(r,s,u,c){var l,h,p,d;if(u=u===!0,c&&S(c)&&(d=c),S(r)){if(h=r.match(Di),!h)throw Fi("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",r);p=h[1],d=d||h[3],r=t.hasOwnProperty(p)?t[p]:dt(s.$scope,p,!0)||(e?dt(o,p,!0):n),ht(r,p,!0)}if(u){var g=(Hr(r)?r[r.length-1]:r).prototype;l=Object.create(g||null),d&&a(s,d,l,p||r.name);var v;return v=f(function(){var t=i.invoke(r,l,s,p);return t!==l&&(w(t)||E(t))&&(l=t,d&&a(s,d,l,p||r.name)),l},{instance:l,identifier:d})}return l=i.instantiate(r,s,p),d&&a(s,d,l,p||r.name),l}}]}function ve(){this.$get=["$window",function(t){return Pr(t.document)}]}function me(){this.$get=["$log",function(t){return function(e,n){t.error.apply(t,arguments)}}]}function ye(t){return w(t)?k(t)?t.toISOString():X(t):t}function $e(){this.$get=function(){return function(t){if(!t)return"";var e=[];return a(t,function(t,n){null===t||$(t)||(Hr(t)?o(t,function(t,r){e.push(rt(n)+"="+rt(ye(t)))}):e.push(rt(n)+"="+rt(ye(t))))}),e.join("&")}}}function be(){this.$get=function(){return function(t){function e(t,r,i){null===t||$(t)||(Hr(t)?o(t,function(t,n){e(t,r+"["+(w(t)?n:"")+"]")}):w(t)&&!k(t)?a(t,function(t,n){e(t,r+(i?"":"[")+n+(i?"":"]"))}):n.push(rt(r)+"="+rt(ye(t))))}if(!t)return"";var n=[];return e(t,"",!0),n.join("&")}}}function we(t,e){if(S(t)){var n=t.replace(Wi,"").trim();if(n){var r=e("Content-Type");(r&&0===r.indexOf(Ii)||xe(n))&&(t=G(n))}}return t}function xe(t){var e=t.match(Hi);return e&&Vi[e[0]].test(t)}function Se(t){function e(t,e){t&&(r[t]=r[t]?r[t]+", "+e:e)}var n,r=vt();return S(t)?o(t.split("\n"),function(t){n=t.indexOf(":"),e(Sr(Wr(t.substr(0,n))),Wr(t.substr(n+1)))}):w(t)&&o(t,function(t,n){e(Sr(n),Wr(t))}),r}function Ce(t){var e;return function(n){if(e||(e=Se(t)),n){var r=e[Sr(n)];return void 0===r&&(r=null),r}return e}}function ke(t,e,n,r){return E(r)?r(t,e,n):(o(r,function(r){t=r(t,e,n)}),t)}function Ee(t){return t>=200&&300>t}function Te(){var t=this.defaults={transformResponse:[we],transformRequest:[function(t){return!w(t)||O(t)||M(t)||j(t)?t:X(t)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:H(qi),put:H(qi),patch:H(qi)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},e=!1;this.useApplyAsync=function(t){return b(t)?(e=!!t,this):e};var i=!0;this.useLegacyPromiseExtensions=function(t){return b(t)?(i=!!t,this):i};var a=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(s,u,c,l,h,p){function d(e){function a(t){var e=f({},t);
return e.data=ke(t.data,t.headers,t.status,c.transformResponse),Ee(t.status)?e:h.reject(e)}function s(t,e){var n,r={};return o(t,function(t,i){E(t)?(n=t(e),null!=n&&(r[i]=n)):r[i]=t}),r}function u(e){var n,r,i,o=t.headers,a=f({},e.headers);o=f({},o.common,o[Sr(e.method)]);t:for(n in o){r=Sr(n);for(i in a)if(Sr(i)===r)continue t;a[n]=o[n]}return s(a,H(e))}if(!_r.isObject(e))throw r("$http")("badreq","Http request configuration must be an object.  Received: {0}",e);var c=f({method:"get",transformRequest:t.transformRequest,transformResponse:t.transformResponse,paramSerializer:t.paramSerializer},e);c.headers=u(e),c.method=kr(c.method),c.paramSerializer=S(c.paramSerializer)?p.get(c.paramSerializer):c.paramSerializer;var l=function(e){var r=e.headers,i=ke(e.data,Ce(r),n,e.transformRequest);return $(i)&&o(r,function(t,e){"content-type"===Sr(e)&&delete r[e]}),$(e.withCredentials)&&!$(t.withCredentials)&&(e.withCredentials=t.withCredentials),m(e,i).then(a,a)},d=[l,n],g=h.when(c);for(o(C,function(t){(t.request||t.requestError)&&d.unshift(t.request,t.requestError),(t.response||t.responseError)&&d.push(t.response,t.responseError)});d.length;){var v=d.shift(),y=d.shift();g=g.then(v,y)}return i?(g.success=function(t){return ht(t,"fn"),g.then(function(e){t(e.data,e.status,e.headers,c)}),g},g.error=function(t){return ht(t,"fn"),g.then(null,function(e){t(e.data,e.status,e.headers,c)}),g}):(g.success=zi("success"),g.error=zi("error")),g}function g(t){o(arguments,function(t){d[t]=function(e,n){return d(f({},n||{},{method:t,url:e}))}})}function v(t){o(arguments,function(t){d[t]=function(e,n,r){return d(f({},r||{},{method:t,url:e,data:n}))}})}function m(r,i){function o(t,n,r,i){function o(){a(n,t,r,i)}p&&(Ee(t)?p.put(C,[t,n,Se(r),i]):p.remove(C)),e?l.$applyAsync(o):(o(),l.$$phase||l.$apply())}function a(t,e,n,i){e=e>=-1?e:0,(Ee(e)?v.resolve:v.reject)({data:t,status:e,headers:Ce(n),config:r,statusText:i})}function c(t){a(t.data,t.status,H(t.headers()),t.statusText)}function f(){var t=d.pendingRequests.indexOf(r);-1!==t&&d.pendingRequests.splice(t,1)}var p,g,v=h.defer(),m=v.promise,S=r.headers,C=y(r.url,r.paramSerializer(r.params));if(d.pendingRequests.push(r),m.then(f,f),!r.cache&&!t.cache||r.cache===!1||"GET"!==r.method&&"JSONP"!==r.method||(p=w(r.cache)?r.cache:w(t.cache)?t.cache:x),p&&(g=p.get(C),b(g)?L(g)?g.then(c,c):Hr(g)?a(g[1],g[0],H(g[2]),g[3]):a(g,200,{},"OK"):p.put(C,m)),$(g)){var k=Pn(r.url)?u()[r.xsrfCookieName||t.xsrfCookieName]:n;k&&(S[r.xsrfHeaderName||t.xsrfHeaderName]=k),s(r.method,C,i,o,S,r.timeout,r.withCredentials,r.responseType)}return m}function y(t,e){return e.length>0&&(t+=(-1==t.indexOf("?")?"?":"&")+e),t}var x=c("$http");t.paramSerializer=S(t.paramSerializer)?p.get(t.paramSerializer):t.paramSerializer;var C=[];return o(a,function(t){C.unshift(S(t)?p.get(t):p.invoke(t))}),d.pendingRequests=[],g("get","delete","head","jsonp"),v("post","put","patch"),d.defaults=t,d}]}function Ae(){this.$get=function(){return function(){return new t.XMLHttpRequest}}}function Pe(){this.$get=["$browser","$window","$document","$xhrFactory",function(t,e,n,r){return Oe(t,r,t.defer,e.angular.callbacks,n[0])}]}function Oe(t,e,n,r,i){function a(t,e,n){var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=t,o.async=!0,a=function(t){ai(o,"load",a),ai(o,"error",a),i.body.removeChild(o),o=null;var s=-1,u="unknown";t&&("load"!==t.type||r[e].called||(t={type:"error"}),u=t.type,s="error"===t.type?404:200),n&&n(s,u)},oi(o,"load",a),oi(o,"error",a),i.body.appendChild(o),a}return function(i,s,u,c,l,f,h,p){function d(){y&&y(),w&&w.abort()}function v(e,r,i,o,a){b(C)&&n.cancel(C),y=w=null,e(r,i,o,a),t.$$completeOutstandingRequest(g)}if(t.$$incOutstandingRequestCount(),s=s||t.url(),"jsonp"==Sr(i)){var m="_"+(r.counter++).toString(36);r[m]=function(t){r[m].data=t,r[m].called=!0};var y=a(s.replace("JSON_CALLBACK","angular.callbacks."+m),m,function(t,e){v(c,t,r[m].data,"",e),r[m]=g})}else{var w=e(i,s);w.open(i,s,!0),o(l,function(t,e){b(t)&&w.setRequestHeader(e,t)}),w.onload=function(){var t=w.statusText||"",e="response"in w?w.response:w.responseText,n=1223===w.status?204:w.status;0===n&&(n=e?200:"file"==An(s).protocol?404:0),v(c,n,e,w.getAllResponseHeaders(),t)};var x=function(){v(c,-1,null,null,"")};if(w.onerror=x,w.onabort=x,h&&(w.withCredentials=!0),p)try{w.responseType=p}catch(S){if("json"!==p)throw S}w.send($(u)?null:u)}if(f>0)var C=n(d,f);else L(f)&&f.then(d)}}function je(){var t="{{",e="}}";this.startSymbol=function(e){return e?(t=e,this):t},this.endSymbol=function(t){return t?(e=t,this):e},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(t){return"\\\\\\"+t}function a(n){return n.replace(h,t).replace(p,e)}function s(t){if(null==t)return"";switch(typeof t){case"string":break;case"number":t=""+t;break;default:t=X(t)}return t}function u(o,u,h,p){function d(t){try{return t=A(t),p&&!b(t)?t:s(t)}catch(e){r(Ui.interr(o,e))}}p=!!p;for(var g,v,m,y=0,w=[],x=[],S=o.length,C=[],k=[];S>y;){if(-1==(g=o.indexOf(t,y))||-1==(v=o.indexOf(e,g+c))){y!==S&&C.push(a(o.substring(y)));break}y!==g&&C.push(a(o.substring(y,g))),m=o.substring(g+c,v),w.push(m),x.push(n(m,d)),y=v+l,k.push(C.length),C.push("")}if(h&&C.length>1&&Ui.throwNoconcat(o),!u||w.length){var T=function(t){for(var e=0,n=w.length;n>e;e++){if(p&&$(t[e]))return;C[k[e]]=t[e]}return C.join("")},A=function(t){return h?i.getTrusted(h,t):i.valueOf(t)};return f(function(t){var e=0,n=w.length,i=new Array(n);try{for(;n>e;e++)i[e]=x[e](t);return T(i)}catch(a){r(Ui.interr(o,a))}},{exp:o,expressions:w,$$watchDelegate:function(t,e){var n;return t.$watchGroup(x,function(r,i){var o=T(r);E(e)&&e.call(this,o,r!==i?n:o,t),n=o})}})}}var c=t.length,l=e.length,h=new RegExp(t.replace(/./g,o),"g"),p=new RegExp(e.replace(/./g,o),"g");return u.startSymbol=function(){return t},u.endSymbol=function(){return e},u}]}function Me(){this.$get=["$rootScope","$window","$q","$$q",function(t,e,n,r){function i(i,a,s,u){var c=arguments.length>4,l=c?B(arguments,4):[],f=e.setInterval,h=e.clearInterval,p=0,d=b(u)&&!u,g=(d?r:n).defer(),v=g.promise;return s=b(s)?s:0,v.then(null,null,c?function(){i.apply(null,l)}:i),v.$$intervalId=f(function(){g.notify(p++),s>0&&p>=s&&(g.resolve(p),h(v.$$intervalId),delete o[v.$$intervalId]),d||t.$apply()},a),o[v.$$intervalId]=g,v}var o={};return i.cancel=function(t){return t&&t.$$intervalId in o?(o[t.$$intervalId].reject("canceled"),e.clearInterval(t.$$intervalId),delete o[t.$$intervalId],!0):!1},i}]}function Re(t){for(var e=t.split("/"),n=e.length;n--;)e[n]=nt(e[n]);return e.join("/")}function Le(t,e){var n=An(t);e.$$protocol=n.protocol,e.$$host=n.hostname,e.$$port=p(n.port)||Gi[n.protocol]||null}function Ne(t,e){var n="/"!==t.charAt(0);n&&(t="/"+t);var r=An(t);e.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),e.$$search=tt(r.search),e.$$hash=decodeURIComponent(r.hash),e.$$path&&"/"!=e.$$path.charAt(0)&&(e.$$path="/"+e.$$path)}function Fe(t,e){return 0===e.indexOf(t)?e.substr(t.length):void 0}function De(t){var e=t.indexOf("#");return-1==e?t:t.substr(0,e)}function _e(t){return t.replace(/(#.+)|#$/,"$1")}function Ie(t){return t.substr(0,De(t).lastIndexOf("/")+1)}function qe(t){return t.substring(0,t.indexOf("/",t.indexOf("//")+2))}function He(t,e,n){this.$$html5=!0,n=n||"",Le(t,this),this.$$parse=function(t){var n=Fe(e,t);if(!S(n))throw Yi("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',t,e);Ne(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var t=et(this.$$search),n=this.$$hash?"#"+nt(this.$$hash):"";this.$$url=Re(this.$$path)+(t?"?"+t:"")+n,this.$$absUrl=e+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return b(o=Fe(t,r))?(a=o,s=b(o=Fe(n,o))?e+(Fe("/",o)||o):t+a):b(o=Fe(e,r))?s=e+o:e==r+"/"&&(s=e),s&&this.$$parse(s),!!s}}function Ve(t,e,n){Le(t,this),this.$$parse=function(r){function i(t,e,n){var r,i=/^\/[A-Z]:(\/.*)/;return 0===e.indexOf(n)&&(e=e.replace(n,"")),i.exec(e)?t:(r=i.exec(t),r?r[1]:t)}var o,a=Fe(t,r)||Fe(e,r);$(a)||"#"!==a.charAt(0)?this.$$html5?o=a:(o="",$(a)&&(t=r,this.replace())):(o=Fe(n,a),$(o)&&(o=a)),Ne(o,this),this.$$path=i(this.$$path,o,t),this.$$compose()},this.$$compose=function(){var e=et(this.$$search),r=this.$$hash?"#"+nt(this.$$hash):"";this.$$url=Re(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(e,n){return De(t)==De(e)?(this.$$parse(e),!0):!1}}function We(t,e,n){this.$$html5=!0,Ve.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return t==De(r)?o=r:(a=Fe(e,r))?o=t+n+a:e===r+"/"&&(o=e),o&&this.$$parse(o),!!o},this.$$compose=function(){var e=et(this.$$search),r=this.$$hash?"#"+nt(this.$$hash):"";this.$$url=Re(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+n+this.$$url}}function Be(t){return function(){return this[t]}}function ze(t,e){return function(n){return $(n)?this[t]:(this[t]=e(n),this.$$compose(),this)}}function Ue(){var t="",e={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(e){return b(e)?(t=e,this):t},this.html5Mode=function(t){return R(t)?(e.enabled=t,this):w(t)?(R(t.enabled)&&(e.enabled=t.enabled),R(t.requireBase)&&(e.requireBase=t.requireBase),R(t.rewriteLinks)&&(e.rewriteLinks=t.rewriteLinks),this):e},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(t,e,n){var i=c.url(),o=c.$$state;try{r.url(t,e,n),c.$$state=r.state()}catch(a){throw c.url(i),c.$$state=o,a}}function u(t,e){n.$broadcast("$locationChangeSuccess",c.absUrl(),t,c.$$state,e)}var c,l,f,h=r.baseHref(),p=r.url();if(e.enabled){if(!h&&e.requireBase)throw Yi("nobase","$location in HTML5 mode requires a <base> tag to be present!");f=qe(p)+(h||"/"),l=i.history?He:We}else f=De(p),l=Ve;var d=Ie(f);c=new l(f,d,"#"+t),c.$$parseLinkUrl(p,p),c.$$state=r.state();var g=/^\s*(javascript|mailto):/i;o.on("click",function(t){if(e.rewriteLinks&&!t.ctrlKey&&!t.metaKey&&!t.shiftKey&&2!=t.which&&2!=t.button){for(var i=Pr(t.target);"a"!==_(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),u=i.attr("href")||i.attr("xlink:href");w(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=An(s.animVal).href),g.test(s)||!s||i.attr("target")||t.isDefaultPrevented()||c.$$parseLinkUrl(s,u)&&(t.preventDefault(),c.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),_e(c.absUrl())!=_e(p)&&r.url(c.absUrl(),!0);var v=!0;return r.onUrlChange(function(t,e){return $(Fe(d,t))?void(a.location.href=t):(n.$evalAsync(function(){var r,i=c.absUrl(),o=c.$$state;t=_e(t),c.$$parse(t),c.$$state=e,r=n.$broadcast("$locationChangeStart",t,i,e,o).defaultPrevented,c.absUrl()===t&&(r?(c.$$parse(i),c.$$state=o,s(i,!1,o)):(v=!1,u(i,o)))}),void(n.$$phase||n.$digest()))}),n.$watch(function(){var t=_e(r.url()),e=_e(c.absUrl()),o=r.state(),a=c.$$replace,l=t!==e||c.$$html5&&i.history&&o!==c.$$state;(v||l)&&(v=!1,n.$evalAsync(function(){var e=c.absUrl(),r=n.$broadcast("$locationChangeStart",e,t,c.$$state,o).defaultPrevented;c.absUrl()===e&&(r?(c.$$parse(t),c.$$state=o):(l&&s(e,a,o===c.$$state?null:c.$$state),u(t,o)))})),c.$$replace=!1}),c}]}function Xe(){var t=!0,e=this;this.debugEnabled=function(e){return b(e)?(t=e,this):t},this.$get=["$window",function(n){function r(t){return t instanceof Error&&(t.stack?t=t.message&&-1===t.stack.indexOf(t.message)?"Error: "+t.message+"\n"+t.stack:t.stack:t.sourceURL&&(t=t.message+"\n"+t.sourceURL+":"+t.line)),t}function i(t){var e=n.console||{},i=e[t]||e.log||g,a=!1;try{a=!!i.apply}catch(s){}return a?function(){var t=[];return o(arguments,function(e){t.push(r(e))}),i.apply(e,t)}:function(t,e){i(t,null==e?"":e)}}return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){t&&n.apply(e,arguments)}}()}}]}function Ge(t,e){if("__defineGetter__"===t||"__defineSetter__"===t||"__lookupGetter__"===t||"__lookupSetter__"===t||"__proto__"===t)throw Ki("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",e);return t}function Ye(t,e){if(t+="",!S(t))throw Ki("iseccst","Cannot convert object to primitive value! Expression: {0}",e);return t}function Qe(t,e){if(t){if(t.constructor===t)throw Ki("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",e);if(t.window===t)throw Ki("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",e);if(t.children&&(t.nodeName||t.prop&&t.attr&&t.find))throw Ki("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",e);if(t===Object)throw Ki("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",e)}return t}function Ke(t,e){if(t){if(t.constructor===t)throw Ki("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",e);if(t===Ji||t===Zi||t===to)throw Ki("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",e)}}function Je(t,e){if(t&&(t===0..constructor||t===(!1).constructor||t==="".constructor||t==={}.constructor||t===[].constructor||t===Function.constructor))throw Ki("isecaf","Assigning to a constructor is disallowed! Expression: {0}",e)}function Ze(t,e){return"undefined"!=typeof t?t:e}function tn(t,e){return"undefined"==typeof t?e:"undefined"==typeof e?t:t+e}function en(t,e){var n=t(e);return!n.$stateful}function nn(t,e){var n,r;switch(t.type){case io.Program:n=!0,o(t.body,function(t){nn(t.expression,e),n=n&&t.expression.constant}),t.constant=n;break;case io.Literal:t.constant=!0,t.toWatch=[];break;case io.UnaryExpression:nn(t.argument,e),t.constant=t.argument.constant,t.toWatch=t.argument.toWatch;break;case io.BinaryExpression:nn(t.left,e),nn(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.left.toWatch.concat(t.right.toWatch);break;case io.LogicalExpression:nn(t.left,e),nn(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.constant?[]:[t];break;case io.ConditionalExpression:nn(t.test,e),nn(t.alternate,e),nn(t.consequent,e),t.constant=t.test.constant&&t.alternate.constant&&t.consequent.constant,t.toWatch=t.constant?[]:[t];break;case io.Identifier:t.constant=!1,t.toWatch=[t];break;case io.MemberExpression:nn(t.object,e),t.computed&&nn(t.property,e),t.constant=t.object.constant&&(!t.computed||t.property.constant),t.toWatch=[t];break;case io.CallExpression:n=t.filter?en(e,t.callee.name):!1,r=[],o(t.arguments,function(t){nn(t,e),n=n&&t.constant,t.constant||r.push.apply(r,t.toWatch)}),t.constant=n,t.toWatch=t.filter&&en(e,t.callee.name)?r:[t];break;case io.AssignmentExpression:nn(t.left,e),nn(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=[t];break;case io.ArrayExpression:n=!0,r=[],o(t.elements,function(t){nn(t,e),n=n&&t.constant,t.constant||r.push.apply(r,t.toWatch)}),t.constant=n,t.toWatch=r;break;case io.ObjectExpression:n=!0,r=[],o(t.properties,function(t){nn(t.value,e),n=n&&t.value.constant,t.value.constant||r.push.apply(r,t.value.toWatch)}),t.constant=n,t.toWatch=r;break;case io.ThisExpression:t.constant=!1,t.toWatch=[]}}function rn(t){if(1==t.length){var e=t[0].expression,r=e.toWatch;return 1!==r.length?r:r[0]!==e?r:n}}function on(t){return t.type===io.Identifier||t.type===io.MemberExpression}function an(t){return 1===t.body.length&&on(t.body[0].expression)?{type:io.AssignmentExpression,left:t.body[0].expression,right:{type:io.NGValueParameter},operator:"="}:void 0}function sn(t){return 0===t.body.length||1===t.body.length&&(t.body[0].expression.type===io.Literal||t.body[0].expression.type===io.ArrayExpression||t.body[0].expression.type===io.ObjectExpression)}function un(t){return t.constant}function cn(t,e){this.astBuilder=t,this.$filter=e}function ln(t,e){this.astBuilder=t,this.$filter=e}function fn(t){return"constructor"==t}function hn(t){return E(t.valueOf)?t.valueOf():ao.call(t)}function pn(){var t=vt(),e=vt();this.$get=["$filter",function(r){function i(t,e){return null==t||null==e?t===e:"object"==typeof t&&(t=hn(t),"object"==typeof t)?!1:t===e||t!==t&&e!==e}function a(t,e,r,o,a){var s,u=o.inputs;if(1===u.length){var c=i;return u=u[0],t.$watch(function(t){var e=u(t);return i(e,c)||(s=o(t,n,n,[e]),c=e&&hn(e)),s},e,r,a)}for(var l=[],f=[],h=0,p=u.length;p>h;h++)l[h]=i,f[h]=null;return t.$watch(function(t){for(var e=!1,r=0,a=u.length;a>r;r++){var c=u[r](t);(e||(e=!i(c,l[r])))&&(f[r]=c,l[r]=c&&hn(c))}return e&&(s=o(t,n,n,f)),s},e,r,a)}function s(t,e,n,r){var i,o;return i=t.$watch(function(t){return r(t)},function(t,n,r){o=t,E(e)&&e.apply(this,arguments),b(t)&&r.$$postDigest(function(){b(o)&&i()})},n)}function u(t,e,n,r){function i(t){var e=!0;return o(t,function(t){b(t)||(e=!1)}),e}var a,s;return a=t.$watch(function(t){return r(t)},function(t,n,r){s=t,E(e)&&e.call(this,t,n,r),i(t)&&r.$$postDigest(function(){i(s)&&a()})},n)}function c(t,e,n,r){var i;return i=t.$watch(function(t){return r(t)},function(t,n,r){E(e)&&e.apply(this,arguments),i()},n)}function l(t,e){if(!e)return t;var n=t.$$watchDelegate,r=!1,i=n!==u&&n!==s,o=i?function(n,i,o,a){var s=r&&a?a[0]:t(n,i,o,a);return e(s,n,i)}:function(n,r,i,o){var a=t(n,r,i,o),s=e(a,n,r);return b(a)?s:a};return t.$$watchDelegate&&t.$$watchDelegate!==a?o.$$watchDelegate=t.$$watchDelegate:e.$stateful||(o.$$watchDelegate=a,r=!t.inputs,o.inputs=t.inputs?t.inputs:[t]),o}var f=zr().noUnsafeEval,h={csp:f,expensiveChecks:!1},p={csp:f,expensiveChecks:!0};return function(n,i,o){var f,d,v;switch(typeof n){case"string":n=n.trim(),v=n;var m=o?e:t;if(f=m[v],!f){":"===n.charAt(0)&&":"===n.charAt(1)&&(d=!0,n=n.substring(2));var y=o?p:h,$=new ro(y),b=new oo($,r,y);f=b.parse(n),f.constant?f.$$watchDelegate=c:d?f.$$watchDelegate=f.literal?u:s:f.inputs&&(f.$$watchDelegate=a),m[v]=f}return l(f,i);case"function":return l(n,i);default:return g}}}]}function dn(){this.$get=["$rootScope","$exceptionHandler",function(t,e){return vn(function(e){t.$evalAsync(e)},e)}]}function gn(){this.$get=["$browser","$exceptionHandler",function(t,e){return vn(function(e){t.defer(e)},e)}]}function vn(t,e){function i(t,e,n){function r(e){return function(n){i||(i=!0,e.call(t,n))}}var i=!1;return[r(e),r(n)]}function a(){this.$$state={status:0}}function s(t,e){return function(n){e.call(t,n)}}function u(t){var r,i,o;o=t.pending,t.processScheduled=!1,t.pending=n;for(var a=0,s=o.length;s>a;++a){i=o[a][0],r=o[a][t.status];try{E(r)?i.resolve(r(t.value)):1===t.status?i.resolve(t.value):i.reject(t.value)}catch(u){i.reject(u),e(u)}}}function c(e){!e.processScheduled&&e.pending&&(e.processScheduled=!0,t(function(){u(e)}))}function l(){this.promise=new a,this.resolve=s(this,this.resolve),this.reject=s(this,this.reject),this.notify=s(this,this.notify)}function h(t){var e=new l,n=0,r=Hr(t)?[]:{};return o(t,function(t,i){n++,y(t).then(function(t){r.hasOwnProperty(i)||(r[i]=t,--n||e.resolve(r))},function(t){r.hasOwnProperty(i)||e.reject(t)})}),0===n&&e.resolve(r),e.promise}var p=r("$q",TypeError),d=function(){return new l};f(a.prototype,{then:function(t,e,n){if($(t)&&$(e)&&$(n))return this;var r=new l;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,t,e,n]),this.$$state.status>0&&c(this.$$state),r.promise},"catch":function(t){return this.then(null,t)},"finally":function(t,e){return this.then(function(e){return m(e,!0,t)},function(e){return m(e,!1,t)},e)}}),f(l.prototype,{resolve:function(t){this.promise.$$state.status||(t===this.promise?this.$$reject(p("qcycle","Expected promise to be resolved with value other than itself '{0}'",t)):this.$$resolve(t))},$$resolve:function(t){var n,r;r=i(this,this.$$resolve,this.$$reject);try{(w(t)||E(t))&&(n=t&&t.then),E(n)?(this.promise.$$state.status=-1,n.call(t,r[0],r[1],this.notify)):(this.promise.$$state.value=t,this.promise.$$state.status=1,c(this.promise.$$state))}catch(o){r[1](o),e(o)}},reject:function(t){this.promise.$$state.status||this.$$reject(t)},$$reject:function(t){this.promise.$$state.value=t,this.promise.$$state.status=2,c(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&t(function(){for(var t,i,o=0,a=r.length;a>o;o++){i=r[o][0],t=r[o][3];try{i.notify(E(t)?t(n):n)}catch(s){e(s)}}})}});var g=function(t){var e=new l;return e.reject(t),e.promise},v=function(t,e){var n=new l;return e?n.resolve(t):n.reject(t),n.promise},m=function(t,e,n){var r=null;try{E(n)&&(r=n())}catch(i){return v(i,!1)}return L(r)?r.then(function(){return v(t,e)},function(t){return v(t,!1)}):v(t,e)},y=function(t,e,n,r){var i=new l;return i.resolve(t),i.promise.then(e,n,r)},b=y,x=function S(t){function e(t){r.resolve(t)}function n(t){r.reject(t)}if(!E(t))throw p("norslvr","Expected resolverFn, got '{0}'",t);if(!(this instanceof S))return new S(t);var r=new l;return t(e,n),r.promise};return x.defer=d,x.reject=g,x.when=y,x.resolve=b,x.all=h,x}function mn(){this.$get=["$window","$timeout",function(t,e){var n=t.requestAnimationFrame||t.webkitRequestAnimationFrame,r=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(t){var e=n(t);return function(){r(e)}}:function(t){var n=e(t,16.66,!1);return function(){e.cancel(n)}};return o.supported=i,o}]}function yn(){function t(t){function e(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=u(),this.$$ChildScope=null}return e.prototype=t,e}var e=10,n=r("$rootScope"),a=null,s=null;this.digestTtl=function(t){return arguments.length&&(e=t),e},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(r,c,l,f){function h(t){t.currentScope.$$destroyed=!0}function p(t){9===Ar&&(t.$$childHead&&p(t.$$childHead),t.$$nextSibling&&p(t.$$nextSibling)),t.$parent=t.$$nextSibling=t.$$prevSibling=t.$$childHead=t.$$childTail=t.$root=t.$$watchers=null}function d(){this.$id=u(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function v(t){if(k.$$phase)throw n("inprog","{0} already in progress",k.$$phase);k.$$phase=t}function m(){k.$$phase=null}function y(t,e){do t.$$watchersCount+=e;while(t=t.$parent)}function b(t,e,n){do t.$$listenerCount[n]-=e,0===t.$$listenerCount[n]&&delete t.$$listenerCount[n];while(t=t.$parent)}function x(){}function S(){for(;P.length;)try{P.shift()()}catch(t){c(t)}s=null}function C(){null===s&&(s=f.defer(function(){k.$apply(S)}))}d.prototype={constructor:d,$new:function(e,n){var r;return n=n||this,e?(r=new d,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=t(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(e||n!=this)&&r.$on("$destroy",h),r},$watch:function(t,e,n,r){var i=l(t);if(i.$$watchDelegate)return i.$$watchDelegate(this,e,n,i,t);var o=this,s=o.$$watchers,u={fn:e,last:x,get:i,exp:r||t,eq:!!n};return a=null,E(e)||(u.fn=g),s||(s=o.$$watchers=[]),s.unshift(u),y(this,1),function(){I(s,u)>=0&&y(o,-1),a=null}},$watchGroup:function(t,e){function n(){u=!1,c?(c=!1,e(i,i,s)):e(i,r,s)}var r=new Array(t.length),i=new Array(t.length),a=[],s=this,u=!1,c=!0;if(!t.length){var l=!0;return s.$evalAsync(function(){l&&e(i,i,s)}),function(){l=!1}}return 1===t.length?this.$watch(t[0],function(t,n,o){i[0]=t,r[0]=n,e(i,t===n?i:r,o)}):(o(t,function(t,e){var o=s.$watch(t,function(t,o){i[e]=t,r[e]=o,u||(u=!0,s.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(t,e){function n(t){o=t;var e,n,r,s,u;if(!$(o)){if(w(o))if(i(o)){a!==p&&(a=p,v=a.length=0,f++),e=o.length,v!==e&&(f++,a.length=v=e);for(var c=0;e>c;c++)u=a[c],s=o[c],r=u!==u&&s!==s,r||u===s||(f++,a[c]=s)}else{a!==d&&(a=d={},v=0,f++),e=0;for(n in o)Cr.call(o,n)&&(e++,s=o[n],u=a[n],n in a?(r=u!==u&&s!==s,r||u===s||(f++,a[n]=s)):(v++,a[n]=s,f++));if(v>e){f++;for(n in a)Cr.call(o,n)||(v--,delete a[n])}}else a!==o&&(a=o,f++);return f}}function r(){if(g?(g=!1,e(o,o,u)):e(o,s,u),c)if(w(o))if(i(o)){s=new Array(o.length);for(var t=0;t<o.length;t++)s[t]=o[t]}else{s={};for(var n in o)Cr.call(o,n)&&(s[n]=o[n])}else s=o}n.$stateful=!0;var o,a,s,u=this,c=e.length>1,f=0,h=l(t,n),p=[],d={},g=!0,v=0;return this.$watch(h,r)},$digest:function(){var t,r,i,o,u,l,h,p,d,g,y=e,$=this,b=[];v("$digest"),f.$$checkUrlChange(),this===k&&null!==s&&(f.defer.cancel(s),S()),a=null;do{for(l=!1,p=$;T.length;){try{g=T.shift(),g.scope.$eval(g.expression,g.locals)}catch(w){c(w)}a=null}t:do{if(o=p.$$watchers)for(u=o.length;u--;)try{if(t=o[u])if((r=t.get(p))===(i=t.last)||(t.eq?V(r,i):"number"==typeof r&&"number"==typeof i&&isNaN(r)&&isNaN(i))){if(t===a){l=!1;break t}}else l=!0,a=t,t.last=t.eq?q(r,null):r,t.fn(r,i===x?r:i,p),5>y&&(d=4-y,b[d]||(b[d]=[]),b[d].push({msg:E(t.exp)?"fn: "+(t.exp.name||t.exp.toString()):t.exp,newVal:r,oldVal:i}))}catch(w){c(w)}if(!(h=p.$$watchersCount&&p.$$childHead||p!==$&&p.$$nextSibling))for(;p!==$&&!(h=p.$$nextSibling);)p=p.$parent}while(p=h);if((l||T.length)&&!y--)throw m(),n("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",e,b)}while(l||T.length);for(m();A.length;)try{A.shift()()}catch(w){c(w)}},$destroy:function(){if(!this.$$destroyed){var t=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===k&&f.$$applicationDestroyed(),y(this,-this.$$watchersCount);for(var e in this.$$listenerCount)b(this,this.$$listenerCount[e],e);t&&t.$$childHead==this&&(t.$$childHead=this.$$nextSibling),t&&t.$$childTail==this&&(t.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=g,this.$on=this.$watch=this.$watchGroup=function(){return g},this.$$listeners={},this.$$nextSibling=null,p(this)}},$eval:function(t,e){return l(t)(this,e)},$evalAsync:function(t,e){k.$$phase||T.length||f.defer(function(){T.length&&k.$digest()}),T.push({scope:this,expression:t,locals:e})},$$postDigest:function(t){A.push(t)},$apply:function(t){try{v("$apply");try{return this.$eval(t)}finally{m()}}catch(e){c(e)}finally{try{k.$digest()}catch(e){throw c(e),e}}},$applyAsync:function(t){function e(){n.$eval(t)}var n=this;t&&P.push(e),C()},$on:function(t,e){var n=this.$$listeners[t];n||(this.$$listeners[t]=n=[]),n.push(e);var r=this;do r.$$listenerCount[t]||(r.$$listenerCount[t]=0),r.$$listenerCount[t]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(e);-1!==r&&(n[r]=null,b(i,1,t))}},$emit:function(t,e){var n,r,i,o=[],a=this,s=!1,u={name:t,targetScope:a,stopPropagation:function(){s=!0},preventDefault:function(){u.defaultPrevented=!0},defaultPrevented:!1},l=W([u],arguments,1);do{for(n=a.$$listeners[t]||o,u.currentScope=a,r=0,i=n.length;i>r;r++)if(n[r])try{n[r].apply(null,l)}catch(f){c(f)}else n.splice(r,1),r--,i--;if(s)return u.currentScope=null,u;a=a.$parent}while(a);return u.currentScope=null,u},$broadcast:function(t,e){var n=this,r=n,i=n,o={name:t,targetScope:n,preventDefault:function(){o.defaultPrevented=!0},defaultPrevented:!1};if(!n.$$listenerCount[t])return o;for(var a,s,u,l=W([o],arguments,1);r=i;){for(o.currentScope=r,a=r.$$listeners[t]||[],s=0,u=a.length;u>s;s++)if(a[s])try{a[s].apply(null,l)}catch(f){c(f)}else a.splice(s,1),s--,u--;if(!(i=r.$$listenerCount[t]&&r.$$childHead||r!==n&&r.$$nextSibling))for(;r!==n&&!(i=r.$$nextSibling);)r=r.$parent}return o.currentScope=null,o}};var k=new d,T=k.$$asyncQueue=[],A=k.$$postDigestQueue=[],P=k.$$applyAsyncQueue=[];return k}]}function $n(){var t=/^\s*(https?|ftp|mailto|tel|file):/,e=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(e){return b(e)?(t=e,this):t},this.imgSrcSanitizationWhitelist=function(t){return b(t)?(e=t,this):e},this.$get=function(){return function(n,r){var i,o=r?e:t;return i=An(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function bn(t){if("self"===t)return t;if(S(t)){if(t.indexOf("***")>-1)throw so("iwcard","Illegal sequence *** in string matcher.  String: {0}",t);return t=Br(t).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+t+"$")}if(T(t))return new RegExp("^"+t.source+"$");throw so("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function wn(t){var e=[];return b(t)&&o(t,function(t){e.push(bn(t))}),e}function xn(){this.SCE_CONTEXTS=uo;var t=["self"],e=[];this.resourceUrlWhitelist=function(e){return arguments.length&&(t=wn(e)),t},this.resourceUrlBlacklist=function(t){return arguments.length&&(e=wn(t)),e},this.$get=["$injector",function(n){function r(t,e){return"self"===t?Pn(e):!!t.exec(e.href)}function i(n){var i,o,a=An(n.toString()),s=!1;for(i=0,o=t.length;o>i;i++)if(r(t[i],a)){s=!0;break}if(s)for(i=0,o=e.length;o>i;i++)if(r(e[i],a)){s=!1;break}return s}function o(t){var e=function(t){this.$$unwrapTrustedValue=function(){return t}};return t&&(e.prototype=new t),e.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},e.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},e}function a(t,e){var n=f.hasOwnProperty(t)?f[t]:null;if(!n)throw so("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",t,e);if(null===e||$(e)||""===e)return e;if("string"!=typeof e)throw so("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",t);return new n(e)}function s(t){return t instanceof l?t.$$unwrapTrustedValue():t}function u(t,e){if(null===e||$(e)||""===e)return e;var n=f.hasOwnProperty(t)?f[t]:null;if(n&&e instanceof n)return e.$$unwrapTrustedValue();if(t===uo.RESOURCE_URL){if(i(e))return e;throw so("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",e.toString())}if(t===uo.HTML)return c(e);throw so("unsafe","Attempting to use an unsafe value in a safe context.")}var c=function(t){throw so("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(c=n.get("$sanitize"));var l=o(),f={};return f[uo.HTML]=o(l),f[uo.CSS]=o(l),f[uo.URL]=o(l),f[uo.JS]=o(l),f[uo.RESOURCE_URL]=o(f[uo.URL]),{trustAs:a,getTrusted:u,valueOf:s}}]}function Sn(){var t=!0;this.enabled=function(e){return arguments.length&&(t=!!e),t},this.$get=["$parse","$sceDelegate",function(e,n){if(t&&8>Ar)throw so("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=H(uo);r.isEnabled=function(){return t},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,t||(r.trustAs=r.getTrusted=function(t,e){return e},r.valueOf=v),r.parseAs=function(t,n){var i=e(n);return i.literal&&i.constant?i:e(n,function(e){return r.getTrusted(t,e)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(uo,function(t,e){var n=Sr(e);r[xt("parse_as_"+n)]=function(e){return i(t,e)},r[xt("get_trusted_"+n)]=function(e){return a(t,e)},r[xt("trust_as_"+n)]=function(e){return s(t,e)}}),r}]}function Cn(){this.$get=["$window","$document",function(t,e){var n,r,i={},o=p((/android (\d+)/.exec(Sr((t.navigator||{}).userAgent))||[])[1]),a=/Boxee/i.test((t.navigator||{}).userAgent),s=e[0]||{},u=/^(Moz|webkit|ms)(?=[A-Z])/,c=s.body&&s.body.style,l=!1,f=!1;if(c){for(var h in c)if(r=u.exec(h)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in c&&"webkit"),l=!!("transition"in c||n+"Transition"in c),f=!!("animation"in c||n+"Animation"in c),!o||l&&f||(l=S(c.webkitTransition),f=S(c.webkitAnimation))}return{history:!(!t.history||!t.history.pushState||4>o||a),hasEvent:function(t){if("input"===t&&11>=Ar)return!1;if($(i[t])){var e=s.createElement("div");
i[t]="on"+t in e}return i[t]},csp:zr(),vendorPrefix:n,transitions:l,animations:f,android:o}}]}function kn(){this.$get=["$templateCache","$http","$q","$sce",function(t,e,n,r){function i(o,a){function s(t){if(!a)throw Li("tpload","Failed to load template: {0} (HTTP status: {1} {2})",o,t.status,t.statusText);return n.reject(t)}i.totalPendingRequests++,S(o)&&t.get(o)||(o=r.getTrustedResourceUrl(o));var u=e.defaults&&e.defaults.transformResponse;Hr(u)?u=u.filter(function(t){return t!==we}):u===we&&(u=null);var c={cache:t,transformResponse:u};return e.get(o,c)["finally"](function(){i.totalPendingRequests--}).then(function(e){return t.put(o,e.data),e.data},s)}return i.totalPendingRequests=0,i}]}function En(){this.$get=["$rootScope","$browser","$location",function(t,e,n){var r={};return r.findBindings=function(t,e,n){var r=t.getElementsByClassName("ng-binding"),i=[];return o(r,function(t){var r=_r.element(t).data("$binding");r&&o(r,function(r){if(n){var o=new RegExp("(^|\\s)"+Br(e)+"(\\s|\\||$)");o.test(r)&&i.push(t)}else-1!=r.indexOf(e)&&i.push(t)})}),i},r.findModels=function(t,e,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+e+'"]',s=t.querySelectorAll(a);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(e){e!==n.url()&&(n.url(e),t.$digest())},r.whenStable=function(t){e.notifyWhenNoOutstandingRequests(t)},r}]}function Tn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(t,e,n,r,i){function o(o,s,u){E(o)||(u=s,s=o,o=g);var c,l=B(arguments,3),f=b(u)&&!u,h=(f?r:n).defer(),p=h.promise;return c=e.defer(function(){try{h.resolve(o.apply(null,l))}catch(e){h.reject(e),i(e)}finally{delete a[p.$$timeoutId]}f||t.$apply()},s),p.$$timeoutId=c,a[c]=h,p}var a={};return o.cancel=function(t){return t&&t.$$timeoutId in a?(a[t.$$timeoutId].reject("canceled"),delete a[t.$$timeoutId],e.defer.cancel(t.$$timeoutId)):!1},o}]}function An(t){var e=t;return Ar&&(co.setAttribute("href",e),e=co.href),co.setAttribute("href",e),{href:co.href,protocol:co.protocol?co.protocol.replace(/:$/,""):"",host:co.host,search:co.search?co.search.replace(/^\?/,""):"",hash:co.hash?co.hash.replace(/^#/,""):"",hostname:co.hostname,port:co.port,pathname:"/"===co.pathname.charAt(0)?co.pathname:"/"+co.pathname}}function Pn(t){var e=S(t)?An(t):t;return e.protocol===lo.protocol&&e.host===lo.host}function On(){this.$get=m(t)}function jn(t){function e(t){try{return decodeURIComponent(t)}catch(e){return t}}var n=t[0]||{},r={},i="";return function(){var t,o,a,s,u,c=n.cookie||"";if(c!==i)for(i=c,t=i.split("; "),r={},a=0;a<t.length;a++)o=t[a],s=o.indexOf("="),s>0&&(u=e(o.substring(0,s)),$(r[u])&&(r[u]=e(o.substring(s+1))));return r}}function Mn(){this.$get=jn}function Rn(t){function e(r,i){if(w(r)){var a={};return o(r,function(t,n){a[n]=e(n,t)}),a}return t.factory(r+n,i)}var n="Filter";this.register=e,this.$get=["$injector",function(t){return function(e){return t.get(e+n)}}],e("currency",_n),e("date",Kn),e("filter",Ln),e("json",Jn),e("limitTo",Zn),e("lowercase",vo),e("number",In),e("orderBy",tr),e("uppercase",mo)}function Ln(){return function(t,e,n){if(!i(t)){if(null==t)return t;throw r("filter")("notarray","Expected array but received: {0}",t)}var o,a,s=Dn(e);switch(s){case"function":o=e;break;case"boolean":case"null":case"number":case"string":a=!0;case"object":o=Nn(e,n,a);break;default:return t}return Array.prototype.filter.call(t,o)}}function Nn(t,e,n){var r,i=w(t)&&"$"in t;return e===!0?e=V:E(e)||(e=function(t,e){return $(t)?!1:null===t||null===e?t===e:w(e)||w(t)&&!y(t)?!1:(t=Sr(""+t),e=Sr(""+e),-1!==t.indexOf(e))}),r=function(r){return i&&!w(r)?Fn(r,t.$,e,!1):Fn(r,t,e,n)}}function Fn(t,e,n,r,i){var o=Dn(t),a=Dn(e);if("string"===a&&"!"===e.charAt(0))return!Fn(t,e.substring(1),n,r);if(Hr(t))return t.some(function(t){return Fn(t,e,n,r)});switch(o){case"object":var s;if(r){for(s in t)if("$"!==s.charAt(0)&&Fn(t[s],e,n,!0))return!0;return i?!1:Fn(t,e,n,!1)}if("object"===a){for(s in e){var u=e[s];if(!E(u)&&!$(u)){var c="$"===s,l=c?t:t[s];if(!Fn(l,u,n,c,c))return!1}}return!0}return n(t,e);case"function":return!1;default:return n(t,e)}}function Dn(t){return null===t?"null":typeof t}function _n(t){var e=t.NUMBER_FORMATS;return function(t,n,r){return $(n)&&(n=e.CURRENCY_SYM),$(r)&&(r=e.PATTERNS[1].maxFrac),null==t?t:qn(t,e.PATTERNS[1],e.GROUP_SEP,e.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function In(t){var e=t.NUMBER_FORMATS;return function(t,n){return null==t?t:qn(t,e.PATTERNS[0],e.GROUP_SEP,e.DECIMAL_SEP,n)}}function qn(t,e,n,r,i){if(w(t))return"";var o=0>t;t=Math.abs(t);var a=t===1/0;if(!a&&!isFinite(t))return"";var s=t+"",u="",c=!1,l=[];if(a&&(u="∞"),!a&&-1!==s.indexOf("e")){var f=s.match(/([\d\.]+)e(-?)(\d+)/);f&&"-"==f[2]&&f[3]>i+1?t=0:(u=s,c=!0)}if(a||c)i>0&&1>t&&(u=t.toFixed(i),t=parseFloat(u),u=u.replace(fo,r));else{var h=(s.split(fo)[1]||"").length;$(i)&&(i=Math.min(Math.max(e.minFrac,h),e.maxFrac)),t=+(Math.round(+(t.toString()+"e"+i)).toString()+"e"+-i);var p=(""+t).split(fo),d=p[0];p=p[1]||"";var g,v=0,m=e.lgSize,y=e.gSize;if(d.length>=m+y)for(v=d.length-m,g=0;v>g;g++)(v-g)%y===0&&0!==g&&(u+=n),u+=d.charAt(g);for(g=v;g<d.length;g++)(d.length-g)%m===0&&0!==g&&(u+=n),u+=d.charAt(g);for(;p.length<i;)p+="0";i&&"0"!==i&&(u+=r+p.substr(0,i))}return 0===t&&(o=!1),l.push(o?e.negPre:e.posPre,u,o?e.negSuf:e.posSuf),l.join("")}function Hn(t,e,n){var r="";for(0>t&&(r="-",t=-t),t=""+t;t.length<e;)t="0"+t;return n&&(t=t.substr(t.length-e)),r+t}function Vn(t,e,n,r){return n=n||0,function(i){var o=i["get"+t]();return(n>0||o>-n)&&(o+=n),0===o&&-12==n&&(o=12),Hn(o,e,r)}}function Wn(t,e){return function(n,r){var i=n["get"+t](),o=kr(e?"SHORT"+t:t);return r[o][i]}}function Bn(t,e,n){var r=-1*n,i=r>=0?"+":"";return i+=Hn(Math[r>0?"floor":"ceil"](r/60),2)+Hn(Math.abs(r%60),2)}function zn(t){var e=new Date(t,0,1).getDay();return new Date(t,0,(4>=e?5:12)-e)}function Un(t){return new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay()))}function Xn(t){return function(e){var n=zn(e.getFullYear()),r=Un(e),i=+r-+n,o=1+Math.round(i/6048e5);return Hn(o,t)}}function Gn(t,e){return t.getHours()<12?e.AMPMS[0]:e.AMPMS[1]}function Yn(t,e){return t.getFullYear()<=0?e.ERAS[0]:e.ERAS[1]}function Qn(t,e){return t.getFullYear()<=0?e.ERANAMES[0]:e.ERANAMES[1]}function Kn(t){function e(t){var e;if(e=t.match(n)){var r=new Date(0),i=0,o=0,a=e[8]?r.setUTCFullYear:r.setFullYear,s=e[8]?r.setUTCHours:r.setHours;e[9]&&(i=p(e[9]+e[10]),o=p(e[9]+e[11])),a.call(r,p(e[1]),p(e[2])-1,p(e[3]));var u=p(e[4]||0)-i,c=p(e[5]||0)-o,l=p(e[6]||0),f=Math.round(1e3*parseFloat("0."+(e[7]||0)));return s.call(r,u,c,l,f),r}return t}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,u="",c=[];if(r=r||"mediumDate",r=t.DATETIME_FORMATS[r]||r,S(n)&&(n=go.test(n)?p(n):e(n)),C(n)&&(n=new Date(n)),!k(n)||!isFinite(n.getTime()))return n;for(;r;)s=po.exec(r),s?(c=W(c,s,1),r=c.pop()):(c.push(r),r=null);var l=n.getTimezoneOffset();return i&&(l=Y(i,n.getTimezoneOffset()),n=K(n,i,!0)),o(c,function(e){a=ho[e],u+=a?a(n,t.DATETIME_FORMATS,l):e.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function Jn(){return function(t,e){return $(e)&&(e=2),X(t,e)}}function Zn(){return function(t,e,n){return e=Math.abs(Number(e))===1/0?Number(e):p(e),isNaN(e)?t:(C(t)&&(t=t.toString()),Hr(t)||S(t)?(n=!n||isNaN(n)?0:p(n),n=0>n?Math.max(0,t.length+n):n,e>=0?t.slice(n,n+e):0===n?t.slice(e,t.length):t.slice(Math.max(0,n+e),n)):t)}}function tr(t){function e(e,n){return n=n?-1:1,e.map(function(e){var r=1,i=v;if(E(e))i=e;else if(S(e)&&(("+"==e.charAt(0)||"-"==e.charAt(0))&&(r="-"==e.charAt(0)?-1:1,e=e.substring(1)),""!==e&&(i=t(e),i.constant))){var o=i();i=function(t){return t[o]}}return{get:i,descending:r*n}})}function n(t){switch(typeof t){case"number":case"boolean":case"string":return!0;default:return!1}}function r(t,e){return"function"==typeof t.valueOf&&(t=t.valueOf(),n(t))?t:y(t)&&(t=t.toString(),n(t))?t:e}function o(t,e){var n=typeof t;return null===t?(n="string",t="null"):"string"===n?t=t.toLowerCase():"object"===n&&(t=r(t,e)),{value:t,type:n}}function a(t,e){var n=0;return t.type===e.type?t.value!==e.value&&(n=t.value<e.value?-1:1):n=t.type<e.type?-1:1,n}return function(t,n,r){function s(t,e){return{value:t,predicateValues:c.map(function(n){return o(n.get(t),e)})}}function u(t,e){for(var n=0,r=0,i=c.length;i>r&&!(n=a(t.predicateValues[r],e.predicateValues[r])*c[r].descending);++r);return n}if(!i(t))return t;Hr(n)||(n=[n]),0===n.length&&(n=["+"]);var c=e(n,r);c.push({get:function(){return{}},descending:r?-1:1});var l=Array.prototype.map.call(t,s);return l.sort(u),t=l.map(function(t){return t.value})}}function er(t){return E(t)&&(t={link:t}),t.restrict=t.restrict||"AC",m(t)}function nr(t,e){t.$name=e}function rr(t,e,r,i,a){var s=this,u=[];s.$error={},s.$$success={},s.$pending=n,s.$name=a(e.name||e.ngForm||"")(r),s.$dirty=!1,s.$pristine=!0,s.$valid=!0,s.$invalid=!1,s.$submitted=!1,s.$$parentForm=bo,s.$rollbackViewValue=function(){o(u,function(t){t.$rollbackViewValue()})},s.$commitViewValue=function(){o(u,function(t){t.$commitViewValue()})},s.$addControl=function(t){pt(t.$name,"input"),u.push(t),t.$name&&(s[t.$name]=t),t.$$parentForm=s},s.$$renameControl=function(t,e){var n=t.$name;s[n]===t&&delete s[n],s[e]=t,t.$name=e},s.$removeControl=function(t){t.$name&&s[t.$name]===t&&delete s[t.$name],o(s.$pending,function(e,n){s.$setValidity(n,null,t)}),o(s.$error,function(e,n){s.$setValidity(n,null,t)}),o(s.$$success,function(e,n){s.$setValidity(n,null,t)}),I(u,t),t.$$parentForm=bo},yr({ctrl:this,$element:t,set:function(t,e,n){var r=t[e];if(r){var i=r.indexOf(n);-1===i&&r.push(n)}else t[e]=[n]},unset:function(t,e,n){var r=t[e];r&&(I(r,n),0===r.length&&delete t[e])},$animate:i}),s.$setDirty=function(){i.removeClass(t,na),i.addClass(t,ra),s.$dirty=!0,s.$pristine=!1,s.$$parentForm.$setDirty()},s.$setPristine=function(){i.setClass(t,na,ra+" "+wo),s.$dirty=!1,s.$pristine=!0,s.$submitted=!1,o(u,function(t){t.$setPristine()})},s.$setUntouched=function(){o(u,function(t){t.$setUntouched()})},s.$setSubmitted=function(){i.addClass(t,wo),s.$submitted=!0,s.$$parentForm.$setSubmitted()}}function ir(t){t.$formatters.push(function(e){return t.$isEmpty(e)?e:e.toString()})}function or(t,e,n,r,i,o){ar(t,e,n,r,i,o),ir(r)}function ar(t,e,n,r,i,o){var a=Sr(e[0].type);if(!i.android){var s=!1;e.on("compositionstart",function(t){s=!0}),e.on("compositionend",function(){s=!1,u()})}var u=function(t){if(c&&(o.defer.cancel(c),c=null),!s){var i=e.val(),u=t&&t.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=Wr(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,u)}};if(i.hasEvent("input"))e.on("input",u);else{var c,l=function(t,e,n){c||(c=o.defer(function(){c=null,e&&e.value===n||u(t)}))};e.on("keydown",function(t){var e=t.keyCode;91===e||e>15&&19>e||e>=37&&40>=e||l(t,this,this.value)}),i.hasEvent("paste")&&e.on("paste cut",l)}e.on("change",u),r.$render=function(){var t=r.$isEmpty(r.$viewValue)?"":r.$viewValue;e.val()!==t&&e.val(t)}}function sr(t,e){if(k(t))return t;if(S(t)){jo.lastIndex=0;var n=jo.exec(t);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,u=0,c=zn(r),l=7*(i-1);return e&&(o=e.getHours(),a=e.getMinutes(),s=e.getSeconds(),u=e.getMilliseconds()),new Date(r,0,c.getDate()+l,o,a,s,u)}}return NaN}function ur(t,e){return function(n,r){var i,a;if(k(n))return n;if(S(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),ko.test(n))return new Date(n);if(t.lastIndex=0,i=t.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(t,n){n<e.length&&(a[e[n]]=+t)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function cr(t,e,r,i){return function(o,a,s,u,c,l,f){function h(t){return t&&!(t.getTime&&t.getTime()!==t.getTime())}function p(t){return b(t)&&!k(t)?r(t)||n:t}lr(o,a,s,u),ar(o,a,s,u,c,l);var d,g=u&&u.$options&&u.$options.timezone;if(u.$$parserName=t,u.$parsers.push(function(t){if(u.$isEmpty(t))return null;if(e.test(t)){var i=r(t,d);return g&&(i=K(i,g)),i}return n}),u.$formatters.push(function(t){if(t&&!k(t))throw sa("datefmt","Expected `{0}` to be a date",t);return h(t)?(d=t,d&&g&&(d=K(d,g,!0)),f("date")(t,i,g)):(d=null,"")}),b(s.min)||s.ngMin){var v;u.$validators.min=function(t){return!h(t)||$(v)||r(t)>=v},s.$observe("min",function(t){v=p(t),u.$validate()})}if(b(s.max)||s.ngMax){var m;u.$validators.max=function(t){return!h(t)||$(m)||r(t)<=m},s.$observe("max",function(t){m=p(t),u.$validate()})}}}function lr(t,e,r,i){var o=e[0],a=i.$$hasNativeValidators=w(o.validity);a&&i.$parsers.push(function(t){var r=e.prop(xr)||{};return r.badInput&&!r.typeMismatch?n:t})}function fr(t,e,r,i,o,a){if(lr(t,e,r,i),ar(t,e,r,i,o,a),i.$$parserName="number",i.$parsers.push(function(t){return i.$isEmpty(t)?null:Ao.test(t)?parseFloat(t):n}),i.$formatters.push(function(t){if(!i.$isEmpty(t)){if(!C(t))throw sa("numfmt","Expected `{0}` to be a number",t);t=t.toString()}return t}),b(r.min)||r.ngMin){var s;i.$validators.min=function(t){return i.$isEmpty(t)||$(s)||t>=s},r.$observe("min",function(t){b(t)&&!C(t)&&(t=parseFloat(t,10)),s=C(t)&&!isNaN(t)?t:n,i.$validate()})}if(b(r.max)||r.ngMax){var u;i.$validators.max=function(t){return i.$isEmpty(t)||$(u)||u>=t},r.$observe("max",function(t){b(t)&&!C(t)&&(t=parseFloat(t,10)),u=C(t)&&!isNaN(t)?t:n,i.$validate()})}}function hr(t,e,n,r,i,o){ar(t,e,n,r,i,o),ir(r),r.$$parserName="url",r.$validators.url=function(t,e){var n=t||e;return r.$isEmpty(n)||Eo.test(n)}}function pr(t,e,n,r,i,o){ar(t,e,n,r,i,o),ir(r),r.$$parserName="email",r.$validators.email=function(t,e){var n=t||e;return r.$isEmpty(n)||To.test(n)}}function dr(t,e,n,r){$(n.name)&&e.attr("name",u());var i=function(t){e[0].checked&&r.$setViewValue(n.value,t&&t.type)};e.on("click",i),r.$render=function(){var t=n.value;e[0].checked=t==r.$viewValue},n.$observe("value",r.$render)}function gr(t,e,n,r,i){var o;if(b(r)){if(o=t(r),!o.constant)throw sa("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(e)}return i}function vr(t,e,n,r,i,o,a,s){var u=gr(s,t,"ngTrueValue",n.ngTrueValue,!0),c=gr(s,t,"ngFalseValue",n.ngFalseValue,!1),l=function(t){r.$setViewValue(e[0].checked,t&&t.type)};e.on("click",l),r.$render=function(){e[0].checked=r.$viewValue},r.$isEmpty=function(t){return t===!1},r.$formatters.push(function(t){return V(t,u)}),r.$parsers.push(function(t){return t?u:c})}function mr(t,e){return t="ngClass"+t,["$animate",function(n){function r(t,e){var n=[];t:for(var r=0;r<t.length;r++){for(var i=t[r],o=0;o<e.length;o++)if(i==e[o])continue t;n.push(i)}return n}function i(t){var e=[];return Hr(t)?(o(t,function(t){e=e.concat(i(t))}),e):S(t)?t.split(" "):w(t)?(o(t,function(t,n){t&&(e=e.concat(n.split(" ")))}),e):t}return{restrict:"AC",link:function(a,s,u){function c(t){var e=f(t,1);u.$addClass(e)}function l(t){var e=f(t,-1);u.$removeClass(e)}function f(t,e){var n=s.data("$classCounts")||vt(),r=[];return o(t,function(t){(e>0||n[t])&&(n[t]=(n[t]||0)+e,n[t]===+(e>0)&&r.push(t))}),s.data("$classCounts",n),r.join(" ")}function h(t,e){var i=r(e,t),o=r(t,e);i=f(i,1),o=f(o,-1),i&&i.length&&n.addClass(s,i),o&&o.length&&n.removeClass(s,o)}function p(t){if(e===!0||a.$index%2===e){var n=i(t||[]);if(d){if(!V(t,d)){var r=i(d);h(r,n)}}else c(n)}d=H(t)}var d;a.$watch(u[t],p,!0),u.$observe("class",function(e){p(a.$eval(u[t]))}),"ngClass"!==t&&a.$watch("$index",function(n,r){var o=1&n;if(o!==(1&r)){var s=i(a.$eval(u[t]));o===e?c(s):l(s)}})}}}]}function yr(t){function e(t,e,u){$(e)?r("$pending",t,u):i("$pending",t,u),R(e)?e?(f(s.$error,t,u),l(s.$$success,t,u)):(l(s.$error,t,u),f(s.$$success,t,u)):(f(s.$error,t,u),f(s.$$success,t,u)),s.$pending?(o(aa,!0),s.$valid=s.$invalid=n,a("",null)):(o(aa,!1),s.$valid=$r(s.$error),s.$invalid=!s.$valid,a("",s.$valid));var c;c=s.$pending&&s.$pending[t]?n:s.$error[t]?!1:s.$$success[t]?!0:null,a(t,c),s.$$parentForm.$setValidity(t,c,s)}function r(t,e,n){s[t]||(s[t]={}),l(s[t],e,n)}function i(t,e,r){s[t]&&f(s[t],e,r),$r(s[t])&&(s[t]=n)}function o(t,e){e&&!c[t]?(h.addClass(u,t),c[t]=!0):!e&&c[t]&&(h.removeClass(u,t),c[t]=!1)}function a(t,e){t=t?"-"+ct(t,"-"):"",o(ta+t,e===!0),o(ea+t,e===!1)}var s=t.ctrl,u=t.$element,c={},l=t.set,f=t.unset,h=t.$animate;c[ea]=!(c[ta]=u.hasClass(ta)),s.$setValidity=e}function $r(t){if(t)for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function br(t){t[0].hasAttribute("selected")&&(t[0].selected=!0)}var wr=/^\/(.+)\/([a-z]*)$/,xr="validity",Sr=function(t){return S(t)?t.toLowerCase():t},Cr=Object.prototype.hasOwnProperty,kr=function(t){return S(t)?t.toUpperCase():t},Er=function(t){return S(t)?t.replace(/[A-Z]/g,function(t){return String.fromCharCode(32|t.charCodeAt(0))}):t},Tr=function(t){return S(t)?t.replace(/[a-z]/g,function(t){return String.fromCharCode(-33&t.charCodeAt(0))}):t};"i"!=="I".toLowerCase()&&(Sr=Er,kr=Tr);var Ar,Pr,Or,jr,Mr=[].slice,Rr=[].splice,Lr=[].push,Nr=Object.prototype.toString,Fr=Object.getPrototypeOf,Dr=r("ng"),_r=t.angular||(t.angular={}),Ir=0;Ar=e.documentMode,g.$inject=[],v.$inject=[];var qr,Hr=Array.isArray,Vr=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,Wr=function(t){return S(t)?t.trim():t},Br=function(t){return t.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},zr=function(){function t(){try{return new Function(""),!1}catch(t){return!0}}if(!b(zr.rules)){var n=e.querySelector("[ng-csp]")||e.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");zr.rules={noUnsafeEval:!r||-1!==r.indexOf("no-unsafe-eval"),noInlineStyle:!r||-1!==r.indexOf("no-inline-style")}}else zr.rules={noUnsafeEval:t(),noInlineStyle:!1}}return zr.rules},Ur=function(){if(b(Ur.name_))return Ur.name_;var t,n,r,i,o=Xr.length;for(n=0;o>n;++n)if(r=Xr[n],t=e.querySelector("["+r.replace(":","\\:")+"jq]")){i=t.getAttribute(r+"jq");break}return Ur.name_=i},Xr=["ng-","data-ng-","ng:","x-ng-"],Gr=/[A-Z]/g,Yr=!1,Qr=1,Kr=2,Jr=3,Zr=8,ti=9,ei=11,ni={full:"1.4.8",major:1,minor:4,dot:8,codeName:"ice-manipulation"};At.expando="ng339";var ri=At.cache={},ii=1,oi=function(t,e,n){t.addEventListener(e,n,!1)},ai=function(t,e,n){t.removeEventListener(e,n,!1)};At._data=function(t){return this.cache[t[this.expando]]||{}};var si=/([\:\-\_]+(.))/g,ui=/^moz([A-Z])/,ci={mouseleave:"mouseout",mouseenter:"mouseover"},li=r("jqLite"),fi=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,hi=/<|&#?\w+;/,pi=/<([\w:-]+)/,di=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,gi={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};gi.optgroup=gi.option,gi.tbody=gi.tfoot=gi.colgroup=gi.caption=gi.thead,gi.th=gi.td;var vi=Node.prototype.contains||function(t){return!!(16&this.compareDocumentPosition(t))},mi=At.prototype={ready:function(n){function r(){i||(i=!0,n())}var i=!1;"complete"===e.readyState?setTimeout(r):(this.on("DOMContentLoaded",r),At(t).on("load",r))},toString:function(){var t=[];return o(this,function(e){t.push(""+e)}),"["+t.join(", ")+"]"},eq:function(t){return Pr(t>=0?this[t]:this[this.length+t])},length:0,push:Lr,sort:[].sort,splice:[].splice},yi={};o("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(t){yi[Sr(t)]=t});var $i={};o("input,select,option,textarea,button,form,details".split(","),function(t){$i[t]=!0});var bi={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};o({data:Lt,removeData:Mt,hasData:kt},function(t,e){At[e]=t}),o({data:Lt,inheritedData:qt,scope:function(t){return Pr.data(t,"$scope")||qt(t.parentNode||t,["$isolateScope","$scope"])},isolateScope:function(t){return Pr.data(t,"$isolateScope")||Pr.data(t,"$isolateScopeNoTemplate")},controller:It,injector:function(t){return qt(t,"$injector")},removeAttr:function(t,e){t.removeAttribute(e)},hasClass:Nt,css:function(t,e,n){return e=xt(e),b(n)?void(t.style[e]=n):t.style[e]},attr:function(t,e,r){var i=t.nodeType;if(i!==Jr&&i!==Kr&&i!==Zr){var o=Sr(e);if(yi[o]){if(!b(r))return t[e]||(t.attributes.getNamedItem(e)||g).specified?o:n;r?(t[e]=!0,t.setAttribute(e,o)):(t[e]=!1,t.removeAttribute(o))}else if(b(r))t.setAttribute(e,r);else if(t.getAttribute){var a=t.getAttribute(e,2);return null===a?n:a}}},prop:function(t,e,n){return b(n)?void(t[e]=n):t[e]},text:function(){function t(t,e){if($(e)){var n=t.nodeType;return n===Qr||n===Jr?t.textContent:""}t.textContent=e}return t.$dv="",t}(),val:function(t,e){if($(e)){if(t.multiple&&"select"===_(t)){var n=[];return o(t.options,function(t){t.selected&&n.push(t.value||t.text)}),0===n.length?null:n}return t.value}t.value=e},html:function(t,e){return $(e)?t.innerHTML:(Ot(t,!0),void(t.innerHTML=e))},empty:Ht},function(t,e){At.prototype[e]=function(e,n){var r,i,o=this.length;if(t!==Ht&&$(2==t.length&&t!==Nt&&t!==It?e:n)){if(w(e)){for(r=0;o>r;r++)if(t===Lt)t(this[r],e);else for(i in e)t(this[r],i,e[i]);return this}for(var a=t.$dv,s=$(a)?Math.min(o,1):o,u=0;s>u;u++){var c=t(this[u],e,n);a=a?a+c:c}return a}for(r=0;o>r;r++)t(this[r],e,n);return this}}),o({removeData:Mt,on:function(t,e,r,i){if(b(i))throw li("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Ct(t)){var o=Rt(t,!0),a=o.events,s=o.handle;s||(s=o.handle=Ut(t,a));for(var u=e.indexOf(" ")>=0?e.split(" "):[e],c=u.length,l=function(e,n,i){var o=a[e];o||(o=a[e]=[],o.specialHandlerWrapper=n,"$destroy"===e||i||oi(t,e,s)),o.push(r)};c--;)e=u[c],ci[e]?(l(ci[e],Gt),l(e,n,!0)):l(e)}},off:jt,one:function(t,e,n){t=Pr(t),t.on(e,function r(){t.off(e,n),t.off(e,r)}),t.on(e,n)},replaceWith:function(t,e){var n,r=t.parentNode;Ot(t),o(new At(e),function(e){n?r.insertBefore(e,n.nextSibling):r.replaceChild(e,t),n=e})},children:function(t){var e=[];return o(t.childNodes,function(t){t.nodeType===Qr&&e.push(t)}),e},contents:function(t){return t.contentDocument||t.childNodes||[]},append:function(t,e){var n=t.nodeType;if(n===Qr||n===ei){e=new At(e);for(var r=0,i=e.length;i>r;r++){var o=e[r];t.appendChild(o)}}},prepend:function(t,e){if(t.nodeType===Qr){var n=t.firstChild;o(new At(e),function(e){t.insertBefore(e,n)})}},wrap:function(t,e){e=Pr(e).eq(0).clone()[0];var n=t.parentNode;n&&n.replaceChild(e,t),e.appendChild(t)},remove:Vt,detach:function(t){Vt(t,!0)},after:function(t,e){var n=t,r=t.parentNode;e=new At(e);for(var i=0,o=e.length;o>i;i++){var a=e[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Dt,removeClass:Ft,toggleClass:function(t,e,n){e&&o(e.split(" "),function(e){var r=n;$(r)&&(r=!Nt(t,e)),(r?Dt:Ft)(t,e)})},parent:function(t){var e=t.parentNode;return e&&e.nodeType!==ei?e:null},next:function(t){return t.nextElementSibling},find:function(t,e){return t.getElementsByTagName?t.getElementsByTagName(e):[]},clone:Pt,triggerHandler:function(t,e,n){var r,i,a,s=e.type||e,u=Rt(t),c=u&&u.events,l=c&&c[s];l&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:g,type:s,target:t},e.type&&(r=f(r,e)),i=H(l),a=n?[r].concat(n):[r],o(i,function(e){r.isImmediatePropagationStopped()||e.apply(t,a)}))}},function(t,e){At.prototype[e]=function(e,n,r){for(var i,o=0,a=this.length;a>o;o++)$(i)?(i=t(this[o],e,n,r),b(i)&&(i=Pr(i))):_t(i,t(this[o],e,n,r));return b(i)?i:this},At.prototype.bind=At.prototype.on,At.prototype.unbind=At.prototype.off}),Kt.prototype={put:function(t,e){this[Qt(t,this.nextUid)]=e},get:function(t){return this[Qt(t,this.nextUid)]},remove:function(t){var e=this[t=Qt(t,this.nextUid)];return delete this[t],e}};var wi=[function(){this.$get=[function(){return Kt}]}],xi=/^[^\(]*\(\s*([^\)]*)\)/m,Si=/,/,Ci=/^\s*(_?)(\S+?)\1\s*$/,ki=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Ei=r("$injector");te.$$annotate=Zt;var Ti=r("$animate"),Ai=1,Pi="ng-animate",Oi=function(){this.$get=["$q","$$rAF",function(t,e){function n(){}return n.all=g,n.chain=g,n.prototype={end:g,cancel:g,resume:g,pause:g,complete:g,then:function(n,r){return t(function(t){e(function(){t()})}).then(n,r)}},n}]},ji=function(){var t=new Kt,e=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(t,e,n){var r=!1;return e&&(e=S(e)?e.split(" "):Hr(e)?e:[],o(e,function(e){e&&(r=!0,t[e]=n)})),r}function a(){o(e,function(e){var n=t.get(e);if(n){var r=ie(e.attr("class")),i="",a="";o(n,function(t,e){var n=!!r[e];t!==n&&(t?i+=(i.length?" ":"")+e:a+=(a.length?" ":"")+e)}),o(e,function(t){i&&Dt(t,i),a&&Ft(t,a)}),t.remove(e)}}),e.length=0}function s(n,o,s){var u=t.get(n)||{},c=i(u,o,!0),l=i(u,s,!1);(c||l)&&(t.put(n,u),e.push(n),1===e.length&&r.$$postDigest(a))}return{enabled:g,on:g,off:g,pin:g,push:function(t,e,r,i){return i&&i(),r=r||{},r.from&&t.css(r.from),r.to&&t.css(r.to),(r.addClass||r.removeClass)&&s(t,r.addClass,r.removeClass),new n}}}]},Mi=["$provide",function(t){var e=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Ti("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";e.$$registeredAnimations[n.substr(1)]=i,t.factory(i,r)},this.classNameFilter=function(t){if(1===arguments.length&&(this.$$classNameFilter=t instanceof RegExp?t:null,this.$$classNameFilter)){var e=new RegExp("(\\s+|\\/)"+Pi+"(\\s+|\\/)");if(e.test(this.$$classNameFilter.toString()))throw Ti("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',Pi)}return this.$$classNameFilter},this.$get=["$$animateQueue",function(t){function e(t,e,n){if(n){var r=re(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(t):e.prepend(t)}return{on:t.on,off:t.off,pin:t.pin,enabled:t.enabled,cancel:function(t){t.end&&t.end()},enter:function(n,r,i,o){return r=r&&Pr(r),i=i&&Pr(i),r=r||i.parent(),e(n,r,i),t.push(n,"enter",oe(o))},move:function(n,r,i,o){return r=r&&Pr(r),i=i&&Pr(i),r=r||i.parent(),e(n,r,i),t.push(n,"move",oe(o))},leave:function(e,n){return t.push(e,"leave",oe(n),function(){e.remove()})},addClass:function(e,n,r){return r=oe(r),r.addClass=ne(r.addclass,n),t.push(e,"addClass",r)},removeClass:function(e,n,r){return r=oe(r),r.removeClass=ne(r.removeClass,n),t.push(e,"removeClass",r)},setClass:function(e,n,r,i){return i=oe(i),i.addClass=ne(i.addClass,n),i.removeClass=ne(i.removeClass,r),t.push(e,"setClass",i)},animate:function(e,n,r,i,o){return o=oe(o),o.from=o.from?f(o.from,n):n,o.to=o.to?f(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=ne(o.tempClasses,i),t.push(e,"animate",o)}}}]}],Ri=function(){this.$get=["$$rAF","$q",function(t,e){var n=function(){};return n.prototype={done:function(t){this.defer&&this.defer[t===!0?"reject":"resolve"]()},end:function(){this.done()},cancel:function(){this.done(!0)},getPromise:function(){return this.defer||(this.defer=e.defer()),this.defer.promise},then:function(t,e){return this.getPromise().then(t,e)},"catch":function(t){return this.getPromise()["catch"](t)},"finally":function(t){return this.getPromise()["finally"](t)}},function(e,r){function i(){return t(function(){o(),a||s.done(),a=!0}),s}function o(){r.addClass&&(e.addClass(r.addClass),r.addClass=null),r.removeClass&&(e.removeClass(r.removeClass),r.removeClass=null),r.to&&(e.css(r.to),r.to=null)}r.cleanupStyles&&(r.from=r.to=null),r.from&&(e.css(r.from),r.from=null);var a,s=new n;return{start:i,end:i}}}]},Li=r("$compile");le.$inject=["$provide","$$sanitizeUriProvider"];var Ni=/^((?:x|data)[\:\-_])/i,Fi=r("$controller"),Di=/^(\S+)(\s+as\s+(\w+))?$/,_i=function(){this.$get=["$document",function(t){return function(e){return e?!e.nodeType&&e instanceof Pr&&(e=e[0]):e=t[0].body,e.offsetWidth+1}}]},Ii="application/json",qi={"Content-Type":Ii+";charset=utf-8"},Hi=/^\[|^\{(?!\{)/,Vi={"[":/]$/,"{":/}$/},Wi=/^\)\]\}',?\n/,Bi=r("$http"),zi=function(t){return function(){throw Bi("legacy","The method `{0}` on the promise returned from `$http` has been disabled.",t)}},Ui=_r.$interpolateMinErr=r("$interpolate");Ui.throwNoconcat=function(t){throw Ui("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",t)},Ui.interr=function(t,e){return Ui("interr","Can't interpolate: {0}\n{1}",t,e.toString())};var Xi=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,Gi={http:80,https:443,ftp:21},Yi=r("$location"),Qi={$$html5:!1,$$replace:!1,absUrl:Be("$$absUrl"),url:function(t){if($(t))return this.$$url;var e=Xi.exec(t);return(e[1]||""===t)&&this.path(decodeURIComponent(e[1])),(e[2]||e[1]||""===t)&&this.search(e[3]||""),this.hash(e[5]||""),this},protocol:Be("$$protocol"),host:Be("$$host"),port:Be("$$port"),path:ze("$$path",function(t){return t=null!==t?t.toString():"","/"==t.charAt(0)?t:"/"+t}),search:function(t,e){switch(arguments.length){case 0:return this.$$search;case 1:if(S(t)||C(t))t=t.toString(),this.$$search=tt(t);else{if(!w(t))throw Yi("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");t=q(t,{}),o(t,function(e,n){null==e&&delete t[n]}),this.$$search=t}break;default:$(e)||null===e?delete this.$$search[t]:this.$$search[t]=e}return this.$$compose(),this},hash:ze("$$hash",function(t){return null!==t?t.toString():""}),replace:function(){return this.$$replace=!0,this}};o([We,Ve,He],function(t){t.prototype=Object.create(Qi),t.prototype.state=function(e){if(!arguments.length)return this.$$state;if(t!==He||!this.$$html5)throw Yi("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=$(e)?null:e,this}});var Ki=r("$parse"),Ji=Function.prototype.call,Zi=Function.prototype.apply,to=Function.prototype.bind,eo=vt();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(t){eo[t]=!0});var no={n:"\n",f:"\f",r:"\r",t:"	",v:"\x0B","'":"'",'"':'"'},ro=function(t){this.options=t};ro.prototype={constructor:ro,lex:function(t){for(this.text=t,this.index=0,this.tokens=[];this.index<this.text.length;){var e=this.text.charAt(this.index);if('"'===e||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(e))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var n=e+this.peek(),r=n+this.peek(2),i=eo[e],o=eo[n],a=eo[r];if(i||o||a){var s=a?r:o?n:e;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(t,e){return-1!==e.indexOf(t)},peek:function(t){var e=t||1;return this.index+e<this.text.length?this.text.charAt(this.index+e):!1},isNumber:function(t){return t>="0"&&"9">=t&&"string"==typeof t},isWhitespace:function(t){return" "===t||"\r"===t||"	"===t||"\n"===t||"\x0B"===t||" "===t},isIdent:function(t){return t>="a"&&"z">=t||t>="A"&&"Z">=t||"_"===t||"$"===t},isExpOperator:function(t){return"-"===t||"+"===t||this.isNumber(t)},throwError:function(t,e,n){n=n||this.index;var r=b(e)?"s "+e+"-"+this.index+" ["+this.text.substring(e,n)+"]":" "+n;throw Ki("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",t,r,this.text)},readNumber:function(){for(var t="",e=this.index;this.index<this.text.length;){var n=Sr(this.text.charAt(this.index));if("."==n||this.isNumber(n))t+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))t+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==t.charAt(t.length-1))t+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=t.charAt(t.length-1))break;
this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:e,text:t,constant:!0,value:Number(t)})},readIdent:function(){for(var t=this.index;this.index<this.text.length;){var e=this.text.charAt(this.index);if(!this.isIdent(e)&&!this.isNumber(e))break;this.index++}this.tokens.push({index:t,text:this.text.slice(t,this.index),identifier:!0})},readString:function(t){var e=this.index;this.index++;for(var n="",r=t,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=no[o];n+=s||o}i=!1}else if("\\"===o)i=!0;else{if(o===t)return this.index++,void this.tokens.push({index:e,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",e)}};var io=function(t,e){this.lexer=t,this.options=e};io.Program="Program",io.ExpressionStatement="ExpressionStatement",io.AssignmentExpression="AssignmentExpression",io.ConditionalExpression="ConditionalExpression",io.LogicalExpression="LogicalExpression",io.BinaryExpression="BinaryExpression",io.UnaryExpression="UnaryExpression",io.CallExpression="CallExpression",io.MemberExpression="MemberExpression",io.Identifier="Identifier",io.Literal="Literal",io.ArrayExpression="ArrayExpression",io.Property="Property",io.ObjectExpression="ObjectExpression",io.ThisExpression="ThisExpression",io.NGValueParameter="NGValueParameter",io.prototype={ast:function(t){this.text=t,this.tokens=this.lexer.lex(t);var e=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var t=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&t.push(this.expressionStatement()),!this.expect(";"))return{type:io.Program,body:t}},expressionStatement:function(){return{type:io.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var t,e=this.expression();t=this.expect("|");)e=this.filter(e);return e},expression:function(){return this.assignment()},assignment:function(){var t=this.ternary();return this.expect("=")&&(t={type:io.AssignmentExpression,left:t,right:this.assignment(),operator:"="}),t},ternary:function(){var t,e,n=this.logicalOR();return this.expect("?")&&(t=this.expression(),this.consume(":"))?(e=this.expression(),{type:io.ConditionalExpression,test:n,alternate:t,consequent:e}):n},logicalOR:function(){for(var t=this.logicalAND();this.expect("||");)t={type:io.LogicalExpression,operator:"||",left:t,right:this.logicalAND()};return t},logicalAND:function(){for(var t=this.equality();this.expect("&&");)t={type:io.LogicalExpression,operator:"&&",left:t,right:this.equality()};return t},equality:function(){for(var t,e=this.relational();t=this.expect("==","!=","===","!==");)e={type:io.BinaryExpression,operator:t.text,left:e,right:this.relational()};return e},relational:function(){for(var t,e=this.additive();t=this.expect("<",">","<=",">=");)e={type:io.BinaryExpression,operator:t.text,left:e,right:this.additive()};return e},additive:function(){for(var t,e=this.multiplicative();t=this.expect("+","-");)e={type:io.BinaryExpression,operator:t.text,left:e,right:this.multiplicative()};return e},multiplicative:function(){for(var t,e=this.unary();t=this.expect("*","/","%");)e={type:io.BinaryExpression,operator:t.text,left:e,right:this.unary()};return e},unary:function(){var t;return(t=this.expect("+","-","!"))?{type:io.UnaryExpression,operator:t.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var t;this.expect("(")?(t=this.filterChain(),this.consume(")")):this.expect("[")?t=this.arrayDeclaration():this.expect("{")?t=this.object():this.constants.hasOwnProperty(this.peek().text)?t=q(this.constants[this.consume().text]):this.peek().identifier?t=this.identifier():this.peek().constant?t=this.constant():this.throwError("not a primary expression",this.peek());for(var e;e=this.expect("(","[",".");)"("===e.text?(t={type:io.CallExpression,callee:t,arguments:this.parseArguments()},this.consume(")")):"["===e.text?(t={type:io.MemberExpression,object:t,property:this.expression(),computed:!0},this.consume("]")):"."===e.text?t={type:io.MemberExpression,object:t,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return t},filter:function(t){for(var e=[t],n={type:io.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return n},parseArguments:function(){var t=[];if(")"!==this.peekToken().text)do t.push(this.expression());while(this.expect(","));return t},identifier:function(){var t=this.consume();return t.identifier||this.throwError("is not a valid identifier",t),{type:io.Identifier,name:t.text}},constant:function(){return{type:io.Literal,value:this.consume().value}},arrayDeclaration:function(){var t=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;t.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:io.ArrayExpression,elements:t}},object:function(){var t,e=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;t={type:io.Property,kind:"init"},this.peek().constant?t.key=this.constant():this.peek().identifier?t.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),t.value=this.expression(),e.push(t)}while(this.expect(","));return this.consume("}"),{type:io.ObjectExpression,properties:e}},throwError:function(t,e){throw Ki("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",e.text,t,e.index+1,this.text,this.text.substring(e.index))},consume:function(t){if(0===this.tokens.length)throw Ki("ueoe","Unexpected end of expression: {0}",this.text);var e=this.expect(t);return e||this.throwError("is unexpected, expecting ["+t+"]",this.peek()),e},peekToken:function(){if(0===this.tokens.length)throw Ki("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(t,e,n,r){return this.peekAhead(0,t,e,n,r)},peekAhead:function(t,e,n,r,i){if(this.tokens.length>t){var o=this.tokens[t],a=o.text;if(a===e||a===n||a===r||a===i||!e&&!n&&!r&&!i)return o}return!1},expect:function(t,e,n,r){var i=this.peek(t,e,n,r);return i?(this.tokens.shift(),i):!1},constants:{"true":{type:io.Literal,value:!0},"false":{type:io.Literal,value:!1},"null":{type:io.Literal,value:null},undefined:{type:io.Literal,value:n},"this":{type:io.ThisExpression}}},cn.prototype={compile:function(t,e){var r=this,i=this.astBuilder.ast(t);this.state={nextId:0,filters:{},expensiveChecks:e,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},nn(i,r.$filter);var a,s="";if(this.stage="assign",a=an(i)){this.state.computing="assign";var u=this.nextId();this.recurse(a,u),this.return_(u),s="fn.assign="+this.generateFunction("assign","s,v,l")}var c=rn(i.body);r.stage="inputs",o(c,function(t,e){var n="fn"+e;r.state[n]={vars:[],body:[],own:{}},r.state.computing=n;var i=r.nextId();r.recurse(t,i),r.return_(i),r.state.inputs.push(n),t.watchId=e}),this.state.computing="fn",this.stage="main",this.recurse(i);var l='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+s+this.watchFns()+"return fn;",f=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",l)(this.$filter,Ge,Qe,Ke,Ye,Je,Ze,tn,t);return this.state=this.stage=n,f.literal=sn(i),f.constant=un(i),f},USE:"use",STRICT:"strict",watchFns:function(){var t=[],e=this.state.inputs,n=this;return o(e,function(e){t.push("var "+e+"="+n.generateFunction(e,"s"))}),e.length&&t.push("fn.inputs=["+e.join(",")+"];"),t.join("")},generateFunction:function(t,e){return"function("+e+"){"+this.varsPrefix(t)+this.body(t)+"};"},filterPrefix:function(){var t=[],e=this;return o(this.state.filters,function(n,r){t.push(n+"=$filter("+e.escape(r)+")")}),t.length?"var "+t.join(",")+";":""},varsPrefix:function(t){return this.state[t].vars.length?"var "+this.state[t].vars.join(",")+";":""},body:function(t){return this.state[t].body.join("")},recurse:function(t,e,r,i,a,s){var u,c,l,f,h=this;if(i=i||g,!s&&b(t.watchId))return e=e||this.nextId(),void this.if_("i",this.lazyAssign(e,this.computedMember("i",t.watchId)),this.lazyRecurse(t,e,r,i,a,!0));switch(t.type){case io.Program:o(t.body,function(e,r){h.recurse(e.expression,n,n,function(t){c=t}),r!==t.body.length-1?h.current().body.push(c,";"):h.return_(c)});break;case io.Literal:f=this.escape(t.value),this.assign(e,f),i(f);break;case io.UnaryExpression:this.recurse(t.argument,n,n,function(t){c=t}),f=t.operator+"("+this.ifDefined(c,0)+")",this.assign(e,f),i(f);break;case io.BinaryExpression:this.recurse(t.left,n,n,function(t){u=t}),this.recurse(t.right,n,n,function(t){c=t}),f="+"===t.operator?this.plus(u,c):"-"===t.operator?this.ifDefined(u,0)+t.operator+this.ifDefined(c,0):"("+u+")"+t.operator+"("+c+")",this.assign(e,f),i(f);break;case io.LogicalExpression:e=e||this.nextId(),h.recurse(t.left,e),h.if_("&&"===t.operator?e:h.not(e),h.lazyRecurse(t.right,e)),i(e);break;case io.ConditionalExpression:e=e||this.nextId(),h.recurse(t.test,e),h.if_(e,h.lazyRecurse(t.alternate,e),h.lazyRecurse(t.consequent,e)),i(e);break;case io.Identifier:e=e||this.nextId(),r&&(r.context="inputs"===h.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",t.name)+"?l:s"),r.computed=!1,r.name=t.name),Ge(t.name),h.if_("inputs"===h.stage||h.not(h.getHasOwnProperty("l",t.name)),function(){h.if_("inputs"===h.stage||"s",function(){a&&1!==a&&h.if_(h.not(h.nonComputedMember("s",t.name)),h.lazyAssign(h.nonComputedMember("s",t.name),"{}")),h.assign(e,h.nonComputedMember("s",t.name))})},e&&h.lazyAssign(e,h.nonComputedMember("l",t.name))),(h.state.expensiveChecks||fn(t.name))&&h.addEnsureSafeObject(e),i(e);break;case io.MemberExpression:u=r&&(r.context=this.nextId())||this.nextId(),e=e||this.nextId(),h.recurse(t.object,u,n,function(){h.if_(h.notNull(u),function(){t.computed?(c=h.nextId(),h.recurse(t.property,c),h.getStringValue(c),h.addEnsureSafeMemberName(c),a&&1!==a&&h.if_(h.not(h.computedMember(u,c)),h.lazyAssign(h.computedMember(u,c),"{}")),f=h.ensureSafeObject(h.computedMember(u,c)),h.assign(e,f),r&&(r.computed=!0,r.name=c)):(Ge(t.property.name),a&&1!==a&&h.if_(h.not(h.nonComputedMember(u,t.property.name)),h.lazyAssign(h.nonComputedMember(u,t.property.name),"{}")),f=h.nonComputedMember(u,t.property.name),(h.state.expensiveChecks||fn(t.property.name))&&(f=h.ensureSafeObject(f)),h.assign(e,f),r&&(r.computed=!1,r.name=t.property.name))},function(){h.assign(e,"undefined")}),i(e)},!!a);break;case io.CallExpression:e=e||this.nextId(),t.filter?(c=h.filter(t.callee.name),l=[],o(t.arguments,function(t){var e=h.nextId();h.recurse(t,e),l.push(e)}),f=c+"("+l.join(",")+")",h.assign(e,f),i(e)):(c=h.nextId(),u={},l=[],h.recurse(t.callee,c,u,function(){h.if_(h.notNull(c),function(){h.addEnsureSafeFunction(c),o(t.arguments,function(t){h.recurse(t,h.nextId(),n,function(t){l.push(h.ensureSafeObject(t))})}),u.name?(h.state.expensiveChecks||h.addEnsureSafeObject(u.context),f=h.member(u.context,u.name,u.computed)+"("+l.join(",")+")"):f=c+"("+l.join(",")+")",f=h.ensureSafeObject(f),h.assign(e,f)},function(){h.assign(e,"undefined")}),i(e)}));break;case io.AssignmentExpression:if(c=this.nextId(),u={},!on(t.left))throw Ki("lval","Trying to assing a value to a non l-value");this.recurse(t.left,n,u,function(){h.if_(h.notNull(u.context),function(){h.recurse(t.right,c),h.addEnsureSafeObject(h.member(u.context,u.name,u.computed)),h.addEnsureSafeAssignContext(u.context),f=h.member(u.context,u.name,u.computed)+t.operator+c,h.assign(e,f),i(e||f)})},1);break;case io.ArrayExpression:l=[],o(t.elements,function(t){h.recurse(t,h.nextId(),n,function(t){l.push(t)})}),f="["+l.join(",")+"]",this.assign(e,f),i(f);break;case io.ObjectExpression:l=[],o(t.properties,function(t){h.recurse(t.value,h.nextId(),n,function(e){l.push(h.escape(t.key.type===io.Identifier?t.key.name:""+t.key.value)+":"+e)})}),f="{"+l.join(",")+"}",this.assign(e,f),i(f);break;case io.ThisExpression:this.assign(e,"s"),i("s");break;case io.NGValueParameter:this.assign(e,"v"),i("v")}},getHasOwnProperty:function(t,e){var n=t+"."+e,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,t+"&&("+this.escape(e)+" in "+t+")")),r[n]},assign:function(t,e){return t?(this.current().body.push(t,"=",e,";"),t):void 0},filter:function(t){return this.state.filters.hasOwnProperty(t)||(this.state.filters[t]=this.nextId(!0)),this.state.filters[t]},ifDefined:function(t,e){return"ifDefined("+t+","+this.escape(e)+")"},plus:function(t,e){return"plus("+t+","+e+")"},return_:function(t){this.current().body.push("return ",t,";")},if_:function(t,e,n){if(t===!0)e();else{var r=this.current().body;r.push("if(",t,"){"),e(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(t){return"!("+t+")"},notNull:function(t){return t+"!=null"},nonComputedMember:function(t,e){return t+"."+e},computedMember:function(t,e){return t+"["+e+"]"},member:function(t,e,n){return n?this.computedMember(t,e):this.nonComputedMember(t,e)},addEnsureSafeObject:function(t){this.current().body.push(this.ensureSafeObject(t),";")},addEnsureSafeMemberName:function(t){this.current().body.push(this.ensureSafeMemberName(t),";")},addEnsureSafeFunction:function(t){this.current().body.push(this.ensureSafeFunction(t),";")},addEnsureSafeAssignContext:function(t){this.current().body.push(this.ensureSafeAssignContext(t),";")},ensureSafeObject:function(t){return"ensureSafeObject("+t+",text)"},ensureSafeMemberName:function(t){return"ensureSafeMemberName("+t+",text)"},ensureSafeFunction:function(t){return"ensureSafeFunction("+t+",text)"},getStringValue:function(t){this.assign(t,"getStringValue("+t+",text)")},ensureSafeAssignContext:function(t){return"ensureSafeAssignContext("+t+",text)"},lazyRecurse:function(t,e,n,r,i,o){var a=this;return function(){a.recurse(t,e,n,r,i,o)}},lazyAssign:function(t,e){var n=this;return function(){n.assign(t,e)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)},escape:function(t){if(S(t))return"'"+t.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(C(t))return t.toString();if(t===!0)return"true";if(t===!1)return"false";if(null===t)return"null";if("undefined"==typeof t)return"undefined";throw Ki("esc","IMPOSSIBLE")},nextId:function(t,e){var n="v"+this.state.nextId++;return t||this.current().vars.push(n+(e?"="+e:"")),n},current:function(){return this.state[this.state.computing]}},ln.prototype={compile:function(t,e){var n=this,r=this.astBuilder.ast(t);this.expression=t,this.expensiveChecks=e,nn(r,n.$filter);var i,a;(i=an(r))&&(a=this.recurse(i));var s,u=rn(r.body);u&&(s=[],o(u,function(t,e){var r=n.recurse(t);t.input=r,s.push(r),t.watchId=e}));var c=[];o(r.body,function(t){c.push(n.recurse(t.expression))});var l=0===r.body.length?function(){}:1===r.body.length?c[0]:function(t,e){var n;return o(c,function(r){n=r(t,e)}),n};return a&&(l.assign=function(t,e,n){return a(t,n,e)}),s&&(l.inputs=s),l.literal=sn(r),l.constant=un(r),l},recurse:function(t,e,r){var i,a,s,u=this;if(t.input)return this.inputs(t.input,t.watchId);switch(t.type){case io.Literal:return this.value(t.value,e);case io.UnaryExpression:return a=this.recurse(t.argument),this["unary"+t.operator](a,e);case io.BinaryExpression:return i=this.recurse(t.left),a=this.recurse(t.right),this["binary"+t.operator](i,a,e);case io.LogicalExpression:return i=this.recurse(t.left),a=this.recurse(t.right),this["binary"+t.operator](i,a,e);case io.ConditionalExpression:return this["ternary?:"](this.recurse(t.test),this.recurse(t.alternate),this.recurse(t.consequent),e);case io.Identifier:return Ge(t.name,u.expression),u.identifier(t.name,u.expensiveChecks||fn(t.name),e,r,u.expression);case io.MemberExpression:return i=this.recurse(t.object,!1,!!r),t.computed||(Ge(t.property.name,u.expression),a=t.property.name),t.computed&&(a=this.recurse(t.property)),t.computed?this.computedMember(i,a,e,r,u.expression):this.nonComputedMember(i,a,u.expensiveChecks,e,r,u.expression);case io.CallExpression:return s=[],o(t.arguments,function(t){s.push(u.recurse(t))}),t.filter&&(a=this.$filter(t.callee.name)),t.filter||(a=this.recurse(t.callee,!0)),t.filter?function(t,r,i,o){for(var u=[],c=0;c<s.length;++c)u.push(s[c](t,r,i,o));var l=a.apply(n,u,o);return e?{context:n,name:n,value:l}:l}:function(t,n,r,i){var o,c=a(t,n,r,i);if(null!=c.value){Qe(c.context,u.expression),Ke(c.value,u.expression);for(var l=[],f=0;f<s.length;++f)l.push(Qe(s[f](t,n,r,i),u.expression));o=Qe(c.value.apply(c.context,l),u.expression)}return e?{value:o}:o};case io.AssignmentExpression:return i=this.recurse(t.left,!0,1),a=this.recurse(t.right),function(t,n,r,o){var s=i(t,n,r,o),c=a(t,n,r,o);return Qe(s.value,u.expression),Je(s.context),s.context[s.name]=c,e?{value:c}:c};case io.ArrayExpression:return s=[],o(t.elements,function(t){s.push(u.recurse(t))}),function(t,n,r,i){for(var o=[],a=0;a<s.length;++a)o.push(s[a](t,n,r,i));return e?{value:o}:o};case io.ObjectExpression:return s=[],o(t.properties,function(t){s.push({key:t.key.type===io.Identifier?t.key.name:""+t.key.value,value:u.recurse(t.value)})}),function(t,n,r,i){for(var o={},a=0;a<s.length;++a)o[s[a].key]=s[a].value(t,n,r,i);return e?{value:o}:o};case io.ThisExpression:return function(t){return e?{value:t}:t};case io.NGValueParameter:return function(t,n,r,i){return e?{value:r}:r}}},"unary+":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=b(a)?+a:0,e?{value:a}:a}},"unary-":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=b(a)?-a:0,e?{value:a}:a}},"unary!":function(t,e){return function(n,r,i,o){var a=!t(n,r,i,o);return e?{value:a}:a}},"binary+":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a),u=e(r,i,o,a),c=tn(s,u);return n?{value:c}:c}},"binary-":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a),u=e(r,i,o,a),c=(b(s)?s:0)-(b(u)?u:0);return n?{value:c}:c}},"binary*":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)*e(r,i,o,a);return n?{value:s}:s}},"binary/":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)/e(r,i,o,a);return n?{value:s}:s}},"binary%":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)%e(r,i,o,a);return n?{value:s}:s}},"binary===":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)===e(r,i,o,a);return n?{value:s}:s}},"binary!==":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)!==e(r,i,o,a);return n?{value:s}:s}},"binary==":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)==e(r,i,o,a);return n?{value:s}:s}},"binary!=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)!=e(r,i,o,a);return n?{value:s}:s}},"binary<":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)<e(r,i,o,a);return n?{value:s}:s}},"binary>":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)>e(r,i,o,a);return n?{value:s}:s}},"binary<=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)<=e(r,i,o,a);return n?{value:s}:s}},"binary>=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)>=e(r,i,o,a);return n?{value:s}:s}},"binary&&":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)&&e(r,i,o,a);return n?{value:s}:s}},"binary||":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)||e(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(t,e,n,r){return function(i,o,a,s){var u=t(i,o,a,s)?e(i,o,a,s):n(i,o,a,s);return r?{value:u}:u}},value:function(t,e){return function(){return e?{context:n,name:n,value:t}:t}},identifier:function(t,e,r,i,o){return function(a,s,u,c){var l=s&&t in s?s:a;i&&1!==i&&l&&!l[t]&&(l[t]={});var f=l?l[t]:n;return e&&Qe(f,o),r?{context:l,name:t,value:f}:f}},computedMember:function(t,e,n,r,i){return function(o,a,s,u){var c,l,f=t(o,a,s,u);return null!=f&&(c=e(o,a,s,u),c=Ye(c),Ge(c,i),r&&1!==r&&f&&!f[c]&&(f[c]={}),l=f[c],Qe(l,i)),n?{context:f,name:c,value:l}:l}},nonComputedMember:function(t,e,r,i,o,a){return function(s,u,c,l){var f=t(s,u,c,l);o&&1!==o&&f&&!f[e]&&(f[e]={});var h=null!=f?f[e]:n;return(r||fn(e))&&Qe(h,a),i?{context:f,name:e,value:h}:h}},inputs:function(t,e){return function(n,r,i,o){return o?o[e]:t(n,r,i)}}};var oo=function(t,e,n){this.lexer=t,this.$filter=e,this.options=n,this.ast=new io(this.lexer),this.astCompiler=n.csp?new ln(this.ast,e):new cn(this.ast,e)};oo.prototype={constructor:oo,parse:function(t){return this.astCompiler.compile(t,this.options.expensiveChecks)}};var ao=(vt(),vt(),Object.prototype.valueOf),so=r("$sce"),uo={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Li=r("$compile"),co=e.createElement("a"),lo=An(t.location.href);jn.$inject=["$document"],Rn.$inject=["$provide"],_n.$inject=["$locale"],In.$inject=["$locale"];var fo=".",ho={yyyy:Vn("FullYear",4),yy:Vn("FullYear",2,0,!0),y:Vn("FullYear",1),MMMM:Wn("Month"),MMM:Wn("Month",!0),MM:Vn("Month",2,1),M:Vn("Month",1,1),dd:Vn("Date",2),d:Vn("Date",1),HH:Vn("Hours",2),H:Vn("Hours",1),hh:Vn("Hours",2,-12),h:Vn("Hours",1,-12),mm:Vn("Minutes",2),m:Vn("Minutes",1),ss:Vn("Seconds",2),s:Vn("Seconds",1),sss:Vn("Milliseconds",3),EEEE:Wn("Day"),EEE:Wn("Day",!0),a:Gn,Z:Bn,ww:Xn(2),w:Xn(1),G:Yn,GG:Yn,GGG:Yn,GGGG:Qn},po=/((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,go=/^\-?\d+$/;Kn.$inject=["$locale"];var vo=m(Sr),mo=m(kr);tr.$inject=["$parse"];var yo=m({restrict:"E",compile:function(t,e){return e.href||e.xlinkHref?void 0:function(t,e){if("a"===e[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Nr.call(e.prop("href"))?"xlink:href":"href";e.on("click",function(t){e.attr(n)||t.preventDefault()})}}}}),$o={};o(yi,function(t,e){function n(t,n,i){t.$watch(i[r],function(t){i.$set(e,!!t)})}if("multiple"!=t){var r=fe("ng-"+e),i=n;"checked"===t&&(i=function(t,e,i){i.ngModel!==i[r]&&n(t,e,i)}),$o[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(bi,function(t,e){$o[e]=function(){return{priority:100,link:function(t,n,r){if("ngPattern"===e&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(wr);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}t.$watch(r[e],function(t){r.$set(e,t)})}}}}),o(["src","srcset","href"],function(t){var e=fe("ng-"+t);$o[e]=function(){return{priority:99,link:function(n,r,i){var o=t,a=t;"href"===t&&"[object SVGAnimatedString]"===Nr.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(e,function(e){return e?(i.$set(a,e),void(Ar&&o&&r.prop(o,i[a]))):void("href"===t&&i.$set(a,null))})}}}});var bo={$addControl:g,$$renameControl:nr,$removeControl:g,$setValidity:g,$setDirty:g,$setPristine:g,$setSubmitted:g},wo="ng-submitted";rr.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var xo=function(t){return["$timeout","$parse",function(e,r){function i(t){return""===t?r('this[""]').assign:r(t).assign||g}var o={name:"form",restrict:t?"EAC":"E",require:["form","^^?form"],controller:rr,compile:function(r,o){r.addClass(na).addClass(ta);var a=o.name?"name":t&&o.ngForm?"ngForm":!1;return{pre:function(t,r,o,s){var u=s[0];if(!("action"in o)){var c=function(e){t.$apply(function(){u.$commitViewValue(),u.$setSubmitted()}),e.preventDefault()};oi(r[0],"submit",c),r.on("$destroy",function(){e(function(){ai(r[0],"submit",c)},0,!1)})}var l=s[1]||u.$$parentForm;l.$addControl(u);var h=a?i(u.$name):g;a&&(h(t,u),o.$observe(a,function(e){u.$name!==e&&(h(t,n),u.$$parentForm.$$renameControl(u,e),(h=i(u.$name))(t,u))})),r.on("$destroy",function(){u.$$parentForm.$removeControl(u),h(t,n),f(u,bo)})}}}};return o}]},So=xo(),Co=xo(!0),ko=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,Eo=/^[A-Za-z][A-Za-z\d.+-]*:\/*(?:\w+(?::\w+)?@)?[^\s/]+(?::\d+)?(?:\/[\w#!:.?+=&%@\-/]*)?$/,To=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Ao=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Po=/^(\d{4})-(\d{2})-(\d{2})$/,Oo=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,jo=/^(\d{4})-W(\d\d)$/,Mo=/^(\d{4})-(\d\d)$/,Ro=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Lo={text:or,date:cr("date",Po,ur(Po,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":cr("datetimelocal",Oo,ur(Oo,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:cr("time",Ro,ur(Ro,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:cr("week",jo,sr,"yyyy-Www"),month:cr("month",Mo,ur(Mo,["yyyy","MM"]),"yyyy-MM"),number:fr,url:hr,email:pr,radio:dr,checkbox:vr,hidden:g,button:g,submit:g,reset:g,file:g},No=["$browser","$sniffer","$filter","$parse",function(t,e,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Lo[Sr(a.type)]||Lo.text)(i,o,a,s[0],e,t,n,r)}}}}],Fo=/^(true|false|\d+)$/,Do=function(){return{restrict:"A",priority:100,compile:function(t,e){return Fo.test(e.ngValue)?function(t,e,n){n.$set("value",t.$eval(n.ngValue))}:function(t,e,n){t.$watch(n.ngValue,function(t){n.$set("value",t)})}}}},_o=["$compile",function(t){return{restrict:"AC",compile:function(e){return t.$$addBindingClass(e),function(e,n,r){t.$$addBindingInfo(n,r.ngBind),n=n[0],e.$watch(r.ngBind,function(t){n.textContent=$(t)?"":t})}}}}],Io=["$interpolate","$compile",function(t,e){return{compile:function(n){return e.$$addBindingClass(n),function(n,r,i){var o=t(r.attr(i.$attr.ngBindTemplate));e.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(t){r.textContent=$(t)?"":t})}}}}],qo=["$sce","$parse","$compile",function(t,e,n){return{restrict:"A",compile:function(r,i){var o=e(i.ngBindHtml),a=e(i.ngBindHtml,function(t){return(t||"").toString()});return n.$$addBindingClass(r),function(e,r,i){n.$$addBindingInfo(r,i.ngBindHtml),e.$watch(a,function(){r.html(t.getTrustedHtml(o(e))||"")})}}}}],Ho=m({restrict:"A",require:"ngModel",link:function(t,e,n,r){r.$viewChangeListeners.push(function(){t.$eval(n.ngChange)})}}),Vo=mr("",!0),Wo=mr("Odd",0),Bo=mr("Even",1),zo=er({compile:function(t,e){e.$set("ngCloak",n),t.removeClass("ng-cloak")}}),Uo=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Xo={},Go={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(t){var e=fe("ng-"+t);Xo[e]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[e],null,!0);return function(e,n){n.on(t,function(n){var i=function(){a(e,{$event:n})};Go[t]&&r.$$phase?e.$evalAsync(i):e.$apply(i)})}}}}]});var Yo=["$animate",function(t){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,c;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=e.createComment(" end ngIf: "+i.ngIf+" "),s={clone:n},t.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),u&&(u.$destroy(),u=null),s&&(c=gt(s.clone),t.leave(c).then(function(){c=null}),s=null))})}}}],Qo=["$templateRequest","$anchorScroll","$animate",function(t,e,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:_r.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,c,l){var f,h,p,d=0,g=function(){h&&(h.remove(),h=null),f&&(f.$destroy(),f=null),p&&(n.leave(p).then(function(){h=null}),h=p,p=null)};r.$watch(o,function(o){var u=function(){!b(s)||s&&!r.$eval(s)||e()},h=++d;o?(t(o,!0).then(function(t){if(h===d){var e=r.$new();c.template=t;var s=l(e,function(t){g(),n.enter(t,null,i).then(u)});f=e,p=s,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){h===d&&(g(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(g(),c.template=null)})}}}}],Ko=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return/SVG/.test(r[0].toString())?(r.empty(),void t(Et(o.template,e).childNodes)(n,function(t){r.append(t)},{futureParentElement:r})):(r.html(o.template),void t(r.contents())(n))}}}],Jo=er({priority:450,compile:function(){return{pre:function(t,e,n){t.$eval(n.ngInit)}}}}),Zo=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(t,e,r,i){var a=e.attr(r.$attr.ngList)||", ",s="false"!==r.ngTrim,u=s?Wr(a):a,c=function(t){if(!$(t)){var e=[];return t&&o(t.split(u),function(t){t&&e.push(s?Wr(t):t)}),e}};i.$parsers.push(c),i.$formatters.push(function(t){return Hr(t)?t.join(a):n}),i.$isEmpty=function(t){return!t||!t.length}}}},ta="ng-valid",ea="ng-invalid",na="ng-pristine",ra="ng-dirty",ia="ng-untouched",oa="ng-touched",aa="ng-pending",sa=r("ngModel"),ua=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(t,e,r,i,a,s,u,c,l,f){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=n,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=n,this.$name=f(r.name||"",!1)(t),this.$$parentForm=bo;var h,p=a(r.ngModel),d=p.assign,v=p,m=d,y=null,w=this;this.$$setOptions=function(t){if(w.$options=t,t&&t.getterSetter){var e=a(r.ngModel+"()"),n=a(r.ngModel+"($$$p)");v=function(t){var n=p(t);return E(n)&&(n=e(t)),n},m=function(t,e){E(p(t))?n(t,{$$$p:w.$modelValue}):d(t,w.$modelValue)}}else if(!p.assign)throw sa("nonassign","Expression '{0}' is non-assignable. Element: {1}",r.ngModel,J(i))},this.$render=g,this.$isEmpty=function(t){return $(t)||""===t||null===t||t!==t};var x=0;yr({ctrl:this,$element:i,set:function(t,e){t[e]=!0},unset:function(t,e){delete t[e]},$animate:s}),this.$setPristine=function(){w.$dirty=!1,w.$pristine=!0,s.removeClass(i,ra),s.addClass(i,na)},this.$setDirty=function(){w.$dirty=!0,w.$pristine=!1,s.removeClass(i,na),s.addClass(i,ra),w.$$parentForm.$setDirty()},this.$setUntouched=function(){w.$touched=!1,w.$untouched=!0,s.setClass(i,ia,oa)},this.$setTouched=function(){w.$touched=!0,w.$untouched=!1,s.setClass(i,oa,ia)},this.$rollbackViewValue=function(){u.cancel(y),w.$viewValue=w.$$lastCommittedViewValue,w.$render()},this.$validate=function(){if(!C(w.$modelValue)||!isNaN(w.$modelValue)){var t=w.$$lastCommittedViewValue,e=w.$$rawModelValue,r=w.$valid,i=w.$modelValue,o=w.$options&&w.$options.allowInvalid;w.$$runValidators(e,t,function(t){o||r===t||(w.$modelValue=t?e:n,w.$modelValue!==i&&w.$$writeModelToScope())})}},this.$$runValidators=function(t,e,r){function i(){var t=w.$$parserName||"parse";return $(h)?(u(t,null),!0):(h||(o(w.$validators,function(t,e){u(e,null)}),o(w.$asyncValidators,function(t,e){u(e,null)})),u(t,h),h)}function a(){var n=!0;return o(w.$validators,function(r,i){var o=r(t,e);n=n&&o,u(i,o)}),n?!0:(o(w.$asyncValidators,function(t,e){u(e,null)}),!1)}function s(){var r=[],i=!0;o(w.$asyncValidators,function(o,a){var s=o(t,e);if(!L(s))throw sa("$asyncValidators","Expected asynchronous validator to return a promise but got '{0}' instead.",s);u(a,n),r.push(s.then(function(){u(a,!0)},function(t){i=!1,u(a,!1)}))}),r.length?l.all(r).then(function(){c(i)},g):c(!0)}function u(t,e){f===x&&w.$setValidity(t,e)}function c(t){f===x&&r(t)}x++;var f=x;return i()&&a()?void s():void c(!1)},this.$commitViewValue=function(){var t=w.$viewValue;u.cancel(y),(w.$$lastCommittedViewValue!==t||""===t&&w.$$hasNativeValidators)&&(w.$$lastCommittedViewValue=t,w.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function e(){w.$modelValue!==a&&w.$$writeModelToScope()}var r=w.$$lastCommittedViewValue,i=r;if(h=$(i)?n:!0)for(var o=0;o<w.$parsers.length;o++)if(i=w.$parsers[o](i),$(i)){h=!1;break}C(w.$modelValue)&&isNaN(w.$modelValue)&&(w.$modelValue=v(t));var a=w.$modelValue,s=w.$options&&w.$options.allowInvalid;w.$$rawModelValue=i,s&&(w.$modelValue=i,e()),w.$$runValidators(i,w.$$lastCommittedViewValue,function(t){s||(w.$modelValue=t?i:n,e())})},this.$$writeModelToScope=function(){
m(t,w.$modelValue),o(w.$viewChangeListeners,function(t){try{t()}catch(n){e(n)}})},this.$setViewValue=function(t,e){w.$viewValue=t,(!w.$options||w.$options.updateOnDefault)&&w.$$debounceViewValueCommit(e)},this.$$debounceViewValueCommit=function(e){var n,r=0,i=w.$options;i&&b(i.debounce)&&(n=i.debounce,C(n)?r=n:C(n[e])?r=n[e]:C(n["default"])&&(r=n["default"])),u.cancel(y),r?y=u(function(){w.$commitViewValue()},r):c.$$phase?w.$commitViewValue():t.$apply(function(){w.$commitViewValue()})},t.$watch(function(){var e=v(t);if(e!==w.$modelValue&&(w.$modelValue===w.$modelValue||e===e)){w.$modelValue=w.$$rawModelValue=e,h=n;for(var r=w.$formatters,i=r.length,o=e;i--;)o=r[i](o);w.$viewValue!==o&&(w.$viewValue=w.$$lastCommittedViewValue=o,w.$render(),w.$$runValidators(e,o,g))}return e})}],ca=["$rootScope",function(t){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:ua,priority:1,compile:function(e){return e.addClass(na).addClass(ia).addClass(ta),{pre:function(t,e,n,r){var i=r[0],o=r[1]||i.$$parentForm;i.$$setOptions(r[2]&&r[2].$options),o.$addControl(i),n.$observe("name",function(t){i.$name!==t&&i.$$parentForm.$$renameControl(i,t)}),t.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(e,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(t){o.$$debounceViewValueCommit(t&&t.type)}),n.on("blur",function(n){o.$touched||(t.$$phase?e.$evalAsync(o.$setTouched):e.$apply(o.$setTouched))})}}}}}],la=/(\s+|^)default(\s+|$)/,fa=function(){return{restrict:"A",controller:["$scope","$attrs",function(t,e){var n=this;this.$options=q(t.$eval(e.ngModelOptions)),b(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=Wr(this.$options.updateOn.replace(la,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},ha=er({terminal:!0,priority:1e3}),pa=r("ngOptions"),da=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,ga=["$compile","$parse",function(t,n){function r(t,e,r){function o(t,e,n,r,i){this.selectValue=t,this.viewValue=e,this.label=n,this.group=r,this.disabled=i}function a(t){var e;if(!c&&i(t))e=t;else{e=[];for(var n in t)t.hasOwnProperty(n)&&"$"!==n.charAt(0)&&e.push(n)}return e}var s=t.match(da);if(!s)throw pa("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",t,J(e));var u=s[5]||s[7],c=s[6],l=/ as /.test(s[0])&&s[1],f=s[9],h=n(s[2]?s[1]:u),p=l&&n(l),d=p||h,g=f&&n(f),v=f?function(t,e){return g(r,e)}:function(t){return Qt(t)},m=function(t,e){return v(t,S(t,e))},y=n(s[2]||s[1]),$=n(s[3]||""),b=n(s[4]||""),w=n(s[8]),x={},S=c?function(t,e){return x[c]=e,x[u]=t,x}:function(t){return x[u]=t,x};return{trackBy:f,getTrackByValue:m,getWatchables:n(w,function(t){var e=[];t=t||[];for(var n=a(t),i=n.length,o=0;i>o;o++){var u=t===n?o:n[o],c=(t[u],S(t[u],u)),l=v(t[u],c);if(e.push(l),s[2]||s[1]){var f=y(r,c);e.push(f)}if(s[4]){var h=b(r,c);e.push(h)}}return e}),getOptions:function(){for(var t=[],e={},n=w(r)||[],i=a(n),s=i.length,u=0;s>u;u++){var c=n===i?u:i[u],l=n[c],h=S(l,c),p=d(r,h),g=v(p,h),x=y(r,h),C=$(r,h),k=b(r,h),E=new o(g,p,x,C,k);t.push(E),e[g]=E}return{items:t,selectValueMap:e,getOptionFromViewValue:function(t){return e[m(t)]},getViewValueFromOption:function(t){return f?_r.copy(t.viewValue):t.viewValue}}}}}function a(e,n,i,a){function c(t,e){t.element=e,e.disabled=t.disabled,t.label!==e.label&&(e.label=t.label,e.textContent=t.label),t.value!==e.value&&(e.value=t.selectValue)}function l(t,e,n,r){var i;return e&&Sr(e.nodeName)===n?i=e:(i=r.cloneNode(!1),e?t.insertBefore(i,e):t.appendChild(i)),i}function f(t){for(var e;t;)e=t.nextSibling,Vt(t),t=e}function h(t){var e=g&&g[0],n=x&&x[0];if(e||n)for(;t&&(t===e||t===n||t.nodeType===Zr||""===t.value);)t=t.nextSibling;return t}function p(){var t=S&&v.readValue();S=C.getOptions();var e={},r=n[0].firstChild;if(w&&n.prepend(g),r=h(r),S.items.forEach(function(t){var i,o,a;t.group?(i=e[t.group],i||(o=l(n[0],r,"optgroup",u),r=o.nextSibling,o.label=t.group,i=e[t.group]={groupElement:o,currentOptionElement:o.firstChild}),a=l(i.groupElement,i.currentOptionElement,"option",s),c(t,a),i.currentOptionElement=a.nextSibling):(a=l(n[0],r,"option",s),c(t,a),r=a.nextSibling)}),Object.keys(e).forEach(function(t){f(e[t].currentOptionElement)}),f(r),d.$render(),!d.$isEmpty(t)){var i=v.readValue();(C.trackBy?V(t,i):t===i)||(d.$setViewValue(i),d.$render())}}var d=a[1];if(d){for(var g,v=a[0],m=i.multiple,y=0,$=n.children(),b=$.length;b>y;y++)if(""===$[y].value){g=$.eq(y);break}var w=!!g,x=Pr(s.cloneNode(!1));x.val("?");var S,C=r(i.ngOptions,n,e),k=function(){w||n.prepend(g),n.val(""),g.prop("selected",!0),g.attr("selected",!0)},E=function(){w||g.remove()},T=function(){n.prepend(x),n.val("?"),x.prop("selected",!0),x.attr("selected",!0)},A=function(){x.remove()};m?(d.$isEmpty=function(t){return!t||0===t.length},v.writeValue=function(t){S.items.forEach(function(t){t.element.selected=!1}),t&&t.forEach(function(t){var e=S.getOptionFromViewValue(t);e&&!e.disabled&&(e.element.selected=!0)})},v.readValue=function(){var t=n.val()||[],e=[];return o(t,function(t){var n=S.selectValueMap[t];n&&!n.disabled&&e.push(S.getViewValueFromOption(n))}),e},C.trackBy&&e.$watchCollection(function(){return Hr(d.$viewValue)?d.$viewValue.map(function(t){return C.getTrackByValue(t)}):void 0},function(){d.$render()})):(v.writeValue=function(t){var e=S.getOptionFromViewValue(t);e&&!e.disabled?n[0].value!==e.selectValue&&(A(),E(),n[0].value=e.selectValue,e.element.selected=!0,e.element.setAttribute("selected","selected")):null===t||w?(A(),k()):(E(),T())},v.readValue=function(){var t=S.selectValueMap[n.val()];return t&&!t.disabled?(E(),A(),S.getViewValueFromOption(t)):null},C.trackBy&&e.$watch(function(){return C.getTrackByValue(d.$viewValue)},function(){d.$render()})),w?(g.remove(),t(g)(e),g.removeClass("ng-scope")):g=Pr(s.cloneNode(!1)),p(),e.$watchCollection(C.getWatchables,p)}}var s=e.createElement("option"),u=e.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","?ngModel"],link:{pre:function(t,e,n,r){r[0].registerOption=g},post:a}}}],va=["$locale","$interpolate","$log",function(t,e,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(a,s,u){function c(t){s.text(t||"")}var l,f=u.count,h=u.$attr.when&&s.attr(u.$attr.when),p=u.offset||0,d=a.$eval(h)||{},v={},m=e.startSymbol(),y=e.endSymbol(),b=m+f+"-"+p+y,w=_r.noop;o(u,function(t,e){var n=i.exec(e);if(n){var r=(n[1]?"-":"")+Sr(n[2]);d[r]=s.attr(u.$attr[e])}}),o(d,function(t,n){v[n]=e(t.replace(r,b))}),a.$watch(f,function(e){var r=parseFloat(e),i=isNaN(r);if(i||r in d||(r=t.pluralCat(r-p)),r!==l&&!(i&&C(l)&&isNaN(l))){w();var o=v[r];$(o)?(null!=e&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+h),w=g,c()):w=a.$watch(o,c),l=r}})}}}],ma=["$parse","$animate",function(t,a){var s="$$NG_REMOVED",u=r("ngRepeat"),c=function(t,e,n,r,i,o,a){t[n]=r,i&&(t[i]=o),t.$index=e,t.$first=0===e,t.$last=e===a-1,t.$middle=!(t.$first||t.$last),t.$odd=!(t.$even=0===(1&e))},l=function(t){return t.clone[0]},f=function(t){return t.clone[t.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,h){var p=h.ngRepeat,d=e.createComment(" end ngRepeat: "+p+" "),g=p.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!g)throw u("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",p);var v=g[1],m=g[2],y=g[3],$=g[4];if(g=v.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!g)throw u("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",v);var b=g[3]||g[1],w=g[2];if(y&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(y)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(y)))throw u("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",y);var x,S,C,k,E={$id:Qt};return $?x=t($):(C=function(t,e){return Qt(e)},k=function(t){return t}),function(t,e,r,h,g){x&&(S=function(e,n,r){return w&&(E[w]=e),E[b]=n,E.$index=r,x(t,E)});var v=vt();t.$watchCollection(m,function(r){var h,m,$,x,E,T,A,P,O,j,M,R,L=e[0],N=vt();if(y&&(t[y]=r),i(r))O=r,P=S||C;else{P=S||k,O=[];for(var F in r)Cr.call(r,F)&&"$"!==F.charAt(0)&&O.push(F)}for(x=O.length,M=new Array(x),h=0;x>h;h++)if(E=r===O?h:O[h],T=r[E],A=P(E,T,h),v[A])j=v[A],delete v[A],N[A]=j,M[h]=j;else{if(N[A])throw o(M,function(t){t&&t.scope&&(v[t.id]=t)}),u("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",p,A,T);M[h]={id:A,scope:n,clone:n},N[A]=!0}for(var D in v){if(j=v[D],R=gt(j.clone),a.leave(R),R[0].parentNode)for(h=0,m=R.length;m>h;h++)R[h][s]=!0;j.scope.$destroy()}for(h=0;x>h;h++)if(E=r===O?h:O[h],T=r[E],j=M[h],j.scope){$=L;do $=$.nextSibling;while($&&$[s]);l(j)!=$&&a.move(gt(j.clone),null,Pr(L)),L=f(j),c(j.scope,h,b,T,w,E,x)}else g(function(t,e){j.scope=e;var n=d.cloneNode(!1);t[t.length++]=n,a.enter(t,null,Pr(L)),L=n,j.clone=t,N[j.id]=j,c(j.scope,h,b,T,w,E,x)});v=N})}}}}],ya="ng-hide",$a="ng-hide-animate",ba=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngShow,function(e){t[e?"removeClass":"addClass"](n,ya,{tempClasses:$a})})}}}],wa=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngHide,function(e){t[e?"addClass":"removeClass"](n,ya,{tempClasses:$a})})}}}],xa=er(function(t,e,n){t.$watch(n.ngStyle,function(t,n){n&&t!==n&&o(n,function(t,n){e.css(n,"")}),t&&e.css(t)},!0)}),Sa=["$animate",function(t){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=i.ngSwitch||i.on,u=[],c=[],l=[],f=[],h=function(t,e){return function(){t.splice(e,1)}};n.$watch(s,function(n){var r,i;for(r=0,i=l.length;i>r;++r)t.cancel(l[r]);for(l.length=0,r=0,i=f.length;i>r;++r){var s=gt(c[r].clone);f[r].$destroy();var p=l[r]=t.leave(s);p.then(h(l,r))}c.length=0,f.length=0,(u=a.cases["!"+n]||a.cases["?"])&&o(u,function(n){n.transclude(function(r,i){f.push(i);var o=n.element;r[r.length++]=e.createComment(" end ngSwitchWhen: ");var a={clone:r};c.push(a),t.enter(r,o.parent(),o)})})})}}}],Ca=er({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:e})}}),ka=er({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:e})}}),Ea=er({restrict:"EAC",link:function(t,e,n,i,o){if(!o)throw r("ngTransclude")("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",J(e));o(function(t){e.empty(),e.append(t)})}}),Ta=["$templateCache",function(t){return{restrict:"E",terminal:!0,compile:function(e,n){if("text/ng-template"==n.type){var r=n.id,i=e[0].text;t.put(r,i)}}}}],Aa={$setViewValue:g,$render:g},Pa=["$element","$scope","$attrs",function(t,r,i){var o=this,a=new Kt;o.ngModelCtrl=Aa,o.unknownOption=Pr(e.createElement("option")),o.renderUnknownOption=function(e){var n="? "+Qt(e)+" ?";o.unknownOption.val(n),t.prepend(o.unknownOption),t.val(n)},r.$on("$destroy",function(){o.renderUnknownOption=g}),o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.readValue=function(){return o.removeUnknownOption(),t.val()},o.writeValue=function(e){o.hasOption(e)?(o.removeUnknownOption(),t.val(e),""===e&&o.emptyOption.prop("selected",!0)):null==e&&o.emptyOption?(o.removeUnknownOption(),t.val("")):o.renderUnknownOption(e)},o.addOption=function(t,e){pt(t,'"option value"'),""===t&&(o.emptyOption=e);var n=a.get(t)||0;a.put(t,n+1),o.ngModelCtrl.$render(),br(e)},o.removeOption=function(t){var e=a.get(t);e&&(1===e?(a.remove(t),""===t&&(o.emptyOption=n)):a.put(t,e-1))},o.hasOption=function(t){return!!a.get(t)},o.registerOption=function(t,e,n,r,i){if(r){var a;n.$observe("value",function(t){b(a)&&o.removeOption(a),a=t,o.addOption(t,e)})}else i?t.$watch(i,function(t,r){n.$set("value",t),r!==t&&o.removeOption(r),o.addOption(t,e)}):o.addOption(n.value,e);e.on("$destroy",function(){o.removeOption(n.value),o.ngModelCtrl.$render()})}}],Oa=function(){function t(t,e,n,r){var i=r[1];if(i){var a=r[0];if(a.ngModelCtrl=i,i.$render=function(){a.writeValue(i.$viewValue)},e.on("change",function(){t.$apply(function(){i.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var t=[];return o(e.find("option"),function(e){e.selected&&t.push(e.value)}),t},a.writeValue=function(t){var n=new Kt(t);o(e.find("option"),function(t){t.selected=b(n.get(t.value))})};var s,u=NaN;t.$watch(function(){u!==i.$viewValue||V(s,i.$viewValue)||(s=H(i.$viewValue),i.$render()),u=i.$viewValue}),i.$isEmpty=function(t){return!t||0===t.length}}}}return{restrict:"E",require:["select","?ngModel"],controller:Pa,priority:1,link:{pre:t}}},ja=["$interpolate",function(t){return{restrict:"E",priority:100,compile:function(e,n){if(b(n.value))var r=t(n.value,!0);else{var i=t(e.text(),!0);i||n.$set("value",e.text())}return function(t,e,n){var o="$selectController",a=e.parent(),s=a.data(o)||a.parent().data(o);s&&s.registerOption(t,e,n,r,i)}}}}],Ma=m({restrict:"E",terminal:!1}),Ra=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){r&&(n.required=!0,r.$validators.required=function(t,e){return!n.required||!r.$isEmpty(e)},n.$observe("required",function(){r.$validate()}))}}},La=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,i,o){if(o){var a,s=i.ngPattern||i.pattern;i.$observe("pattern",function(t){if(S(t)&&t.length>0&&(t=new RegExp("^"+t+"$")),t&&!t.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",s,t,J(e));a=t||n,o.$validate()}),o.$validators.pattern=function(t,e){return o.$isEmpty(e)||$(a)||a.test(e)}}}}},Na=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=-1;n.$observe("maxlength",function(t){var e=p(t);i=isNaN(e)?-1:e,r.$validate()}),r.$validators.maxlength=function(t,e){return 0>i||r.$isEmpty(e)||e.length<=i}}}}},Fa=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=0;n.$observe("minlength",function(t){i=p(t)||0,r.$validate()}),r.$validators.minlength=function(t,e){return r.$isEmpty(e)||e.length>=i}}}}};return t.angular.bootstrap?void console.log("WARNING: Tried to load angular more than once."):(lt(),bt(_r),_r.module("ngLocale",[],["$provide",function(t){function e(t){t+="";var e=t.indexOf(".");return-1==e?0:t.length-e-1}function r(t,r){var i=r;n===i&&(i=Math.min(e(t),3));var o=Math.pow(10,i),a=(t*o|0)%o;return{v:i,f:a}}var i={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};t.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",pluralCat:function(t,e){var n=0|t,o=r(t,e);return 1==n&&0==o.v?i.ONE:i.OTHER}})}]),void Pr(e).ready(function(){ot(e,at)}))}(window,document),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ui.router"),function(t,e,n){"use strict";function r(t,e){return I(new(I(function(){},{prototype:t})),e)}function i(t){return _(arguments,function(e){e!==t&&_(e,function(e,n){t.hasOwnProperty(n)||(t[n]=e)})}),t}function o(t,e){var n=[];for(var r in t.path){if(t.path[r]!==e.path[r])break;n.push(t.path[r])}return n}function a(t){if(Object.keys)return Object.keys(t);var e=[];return _(t,function(t,n){e.push(n)}),e}function s(t,e){if(Array.prototype.indexOf)return t.indexOf(e,Number(arguments[2])||0);var n=t.length>>>0,r=Number(arguments[2])||0;for(r=0>r?Math.ceil(r):Math.floor(r),0>r&&(r+=n);n>r;r++)if(r in t&&t[r]===e)return r;return-1}function u(t,e,n,r){var i,u=o(n,r),c={},l=[];for(var f in u)if(u[f].params&&(i=a(u[f].params),i.length))for(var h in i)s(l,i[h])>=0||(l.push(i[h]),c[i[h]]=t[i[h]]);return I({},c,e)}function c(t,e,n){if(!n){n=[];for(var r in t)n.push(r)}for(var i=0;i<n.length;i++){var o=n[i];if(t[o]!=e[o])return!1}return!0}function l(t,e){var n={};return _(t,function(t){n[t]=e[t]}),n}function f(t){var e={},n=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));return _(n,function(n){n in t&&(e[n]=t[n])}),e}function h(t){var e={},n=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));for(var r in t)-1==s(n,r)&&(e[r]=t[r]);return e}function p(t,e){var n=D(t),r=n?[]:{};return _(t,function(t,i){e(t,i)&&(r[n?r.length:i]=t)}),r}function d(t,e){var n=D(t)?[]:{};return _(t,function(t,r){n[r]=e(t,r)}),n}function g(t,e){var r=1,o=2,u={},c=[],l=u,f=I(t.when(u),{$$promises:u,$$values:u});this.study=function(u){function p(t,n){if(y[n]!==o){if(m.push(n),y[n]===r)throw m.splice(0,s(m,n)),new Error("Cyclic dependency: "+m.join(" -> "));if(y[n]=r,N(t))v.push(n,[function(){return e.get(t)}],c);else{var i=e.annotate(t);_(i,function(t){t!==n&&u.hasOwnProperty(t)&&p(u[t],t)}),v.push(n,t,i)}m.pop(),y[n]=o}}function d(t){return F(t)&&t.then&&t.$$promises}if(!F(u))throw new Error("'invocables' must be an object");var g=a(u||{}),v=[],m=[],y={};return _(u,p),u=m=y=null,function(r,o,a){function s(){--b||(w||i($,o.$$values),m.$$values=$,m.$$promises=m.$$promises||!0,delete m.$$inheritedValues,p.resolve($))}function u(t){m.$$failure=t,p.reject(t)}function c(n,i,o){function c(t){f.reject(t),u(t)}function l(){if(!R(m.$$failure))try{f.resolve(e.invoke(i,a,$)),f.promise.then(function(t){$[n]=t,s()},c)}catch(t){c(t)}}var f=t.defer(),h=0;_(o,function(t){y.hasOwnProperty(t)&&!r.hasOwnProperty(t)&&(h++,y[t].then(function(e){$[t]=e,--h||l()},c))}),h||l(),y[n]=f.promise}if(d(r)&&a===n&&(a=o,o=r,r=null),r){if(!F(r))throw new Error("'locals' must be an object")}else r=l;if(o){if(!d(o))throw new Error("'parent' must be a promise returned by $resolve.resolve()")}else o=f;var p=t.defer(),m=p.promise,y=m.$$promises={},$=I({},r),b=1+v.length/3,w=!1;if(R(o.$$failure))return u(o.$$failure),m;o.$$inheritedValues&&i($,h(o.$$inheritedValues,g)),I(y,o.$$promises),o.$$values?(w=i($,h(o.$$values,g)),m.$$inheritedValues=h(o.$$values,g),s()):(o.$$inheritedValues&&(m.$$inheritedValues=h(o.$$inheritedValues,g)),o.then(s,u));for(var x=0,S=v.length;S>x;x+=3)r.hasOwnProperty(v[x])?s():c(v[x],v[x+1],v[x+2]);return m}},this.resolve=function(t,e,n,r){return this.study(t)(e,n,r)}}function v(t,e,n){this.fromConfig=function(t,e,n){return R(t.template)?this.fromString(t.template,e):R(t.templateUrl)?this.fromUrl(t.templateUrl,e):R(t.templateProvider)?this.fromProvider(t.templateProvider,e,n):null},this.fromString=function(t,e){return L(t)?t(e):t},this.fromUrl=function(n,r){return L(n)&&(n=n(r)),null==n?null:t.get(n,{cache:e,headers:{Accept:"text/html"}}).then(function(t){return t.data})},this.fromProvider=function(t,e,r){return n.invoke(t,null,r||{params:e})}}function m(t,e,i){function o(e,n,r,i){if(v.push(e),d[e])return d[e];if(!/^\w+(-+\w+)*(?:\[\])?$/.test(e))throw new Error("Invalid parameter name '"+e+"' in pattern '"+t+"'");if(g[e])throw new Error("Duplicate parameter name '"+e+"' in pattern '"+t+"'");return g[e]=new H.Param(e,n,r,i),g[e]}function a(t,e,n,r){var i=["",""],o=t.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!e)return o;switch(n){case!1:i=["(",")"+(r?"?":"")];break;case!0:i=["?(",")?"];break;default:i=["("+n+"|",")?"]}return o+i[0]+e+i[1]}function s(i,o){var a,s,u,c,l;return a=i[2]||i[3],l=e.params[a],u=t.substring(h,i.index),s=o?i[4]:i[4]||("*"==i[1]?".*":null),c=H.type(s||"string")||r(H.type("string"),{pattern:new RegExp(s,e.caseInsensitive?"i":n)}),{id:a,regexp:s,segment:u,type:c,cfg:l}}e=I({params:{}},F(e)?e:{});var u,c=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,l=/([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,f="^",h=0,p=this.segments=[],d=i?i.params:{},g=this.params=i?i.params.$$new():new H.ParamSet,v=[];this.source=t;for(var m,y,$;(u=c.exec(t))&&(m=s(u,!1),!(m.segment.indexOf("?")>=0));)y=o(m.id,m.type,m.cfg,"path"),f+=a(m.segment,y.type.pattern.source,y.squash,y.isOptional),p.push(m.segment),h=c.lastIndex;$=t.substring(h);var b=$.indexOf("?");if(b>=0){var w=this.sourceSearch=$.substring(b);if($=$.substring(0,b),this.sourcePath=t.substring(0,h+b),w.length>0)for(h=0;u=l.exec(w);)m=s(u,!0),y=o(m.id,m.type,m.cfg,"search"),h=c.lastIndex}else this.sourcePath=t,this.sourceSearch="";f+=a($)+(e.strict===!1?"/?":"")+"$",p.push($),this.regexp=new RegExp(f,e.caseInsensitive?"i":n),this.prefix=p[0],this.$$paramNames=v}function y(t){I(this,t)}function $(){function t(t){return null!=t?t.toString().replace(/\//g,"%2F"):t}function i(t){return null!=t?t.toString().replace(/%2F/g,"/"):t}function o(){return{strict:g,caseInsensitive:h}}function u(t){return L(t)||D(t)&&L(t[t.length-1])}function c(){for(;x.length;){var t=x.shift();if(t.pattern)throw new Error("You cannot override a type's .pattern at runtime.");e.extend(b[t.name],f.invoke(t.def))}}function l(t){I(this,t||{})}H=this;var f,h=!1,g=!0,v=!1,b={},w=!0,x=[],S={string:{encode:t,decode:i,is:function(t){return null==t||!R(t)||"string"==typeof t},pattern:/[^/]*/},"int":{encode:t,decode:function(t){return parseInt(t,10)},is:function(t){return R(t)&&this.decode(t.toString())===t},pattern:/\d+/},bool:{encode:function(t){return t?1:0},decode:function(t){return 0!==parseInt(t,10)},is:function(t){return t===!0||t===!1},pattern:/0|1/},date:{encode:function(t){return this.is(t)?[t.getFullYear(),("0"+(t.getMonth()+1)).slice(-2),("0"+t.getDate()).slice(-2)].join("-"):n},decode:function(t){if(this.is(t))return t;var e=this.capture.exec(t);return e?new Date(e[1],e[2]-1,e[3]):n},is:function(t){return t instanceof Date&&!isNaN(t.valueOf())},equals:function(t,e){return this.is(t)&&this.is(e)&&t.toISOString()===e.toISOString()},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/},json:{encode:e.toJson,decode:e.fromJson,is:e.isObject,equals:e.equals,pattern:/[^/]*/},any:{encode:e.identity,decode:e.identity,equals:e.equals,pattern:/.*/}};$.$$getDefaultValue=function(t){if(!u(t.value))return t.value;if(!f)throw new Error("Injectable functions cannot be called at configuration time");return f.invoke(t.value)},this.caseInsensitive=function(t){return R(t)&&(h=t),h},this.strictMode=function(t){return R(t)&&(g=t),g},this.defaultSquashPolicy=function(t){if(!R(t))return v;if(t!==!0&&t!==!1&&!N(t))throw new Error("Invalid squash policy: "+t+". Valid policies: false, true, arbitrary-string");return v=t,t},this.compile=function(t,e){return new m(t,I(o(),e))},this.isMatcher=function(t){if(!F(t))return!1;var e=!0;return _(m.prototype,function(n,r){L(n)&&(e=e&&R(t[r])&&L(t[r]))}),e},this.type=function(t,e,n){if(!R(e))return b[t];if(b.hasOwnProperty(t))throw new Error("A type named '"+t+"' has already been defined.");return b[t]=new y(I({name:t},e)),n&&(x.push({name:t,def:n}),w||c()),this},_(S,function(t,e){b[e]=new y(I({name:e},t))}),b=r(b,{}),this.$get=["$injector",function(t){return f=t,w=!1,c(),_(S,function(t,e){b[e]||(b[e]=new y(t))}),this}],this.Param=function(t,e,r,i){function o(t){var e=F(t)?a(t):[],n=-1===s(e,"value")&&-1===s(e,"type")&&-1===s(e,"squash")&&-1===s(e,"array");return n&&(t={value:t}),t.$$fn=u(t.value)?t.value:function(){return t.value},t}function c(e,n,r){if(e.type&&n)throw new Error("Param '"+t+"' has two type configurations.");return n?n:e.type?e.type instanceof y?e.type:new y(e.type):"config"===r?b.any:b.string}function l(){var e={array:"search"===i?"auto":!1},n=t.match(/\[\]$/)?{array:!0}:{};return I(e,n,r).array}function h(t,e){var n=t.squash;if(!e||n===!1)return!1;if(!R(n)||null==n)return v;if(n===!0||N(n))return n;throw new Error("Invalid squash policy: '"+n+"'. Valid policies: false, true, or arbitrary string")}function g(t,e,r,i){var o,a,u=[{from:"",to:r||e?n:""},{from:null,to:r||e?n:""}];return o=D(t.replace)?t.replace:[],N(i)&&o.push({from:i,to:n}),a=d(o,function(t){return t.from}),p(u,function(t){return-1===s(a,t.from)}).concat(o)}function m(){if(!f)throw new Error("Injectable functions cannot be called at configuration time");var t=f.invoke(r.$$fn);if(null!==t&&t!==n&&!x.type.is(t))throw new Error("Default value ("+t+") for parameter '"+x.id+"' is not an instance of Type ("+x.type.name+")");return t}function $(t){function e(t){return function(e){return e.from===t}}function n(t){var n=d(p(x.replace,e(t)),function(t){return t.to});return n.length?n[0]:t}return t=n(t),R(t)?x.type.$normalize(t):m()}function w(){return"{Param:"+t+" "+e+" squash: '"+k+"' optional: "+C+"}"}var x=this;r=o(r),e=c(r,e,i);var S=l();e=S?e.$asArray(S,"search"===i):e,"string"!==e.name||S||"path"!==i||r.value!==n||(r.value="");var C=r.value!==n,k=h(r,C),E=g(r,S,C,k);I(this,{id:t,type:e,location:i,array:S,squash:k,replace:E,isOptional:C,value:$,dynamic:n,config:r,toString:w})},l.prototype={$$new:function(){return r(this,I(new l,{$$parent:this}))},$$keys:function(){for(var t=[],e=[],n=this,r=a(l.prototype);n;)e.push(n),n=n.$$parent;return e.reverse(),_(e,function(e){_(a(e),function(e){-1===s(t,e)&&-1===s(r,e)&&t.push(e)})}),t},$$values:function(t){var e={},n=this;return _(n.$$keys(),function(r){e[r]=n[r].value(t&&t[r])}),e},$$equals:function(t,e){var n=!0,r=this;return _(r.$$keys(),function(i){var o=t&&t[i],a=e&&e[i];r[i].type.equals(o,a)||(n=!1)}),n},$$validates:function(t){var r,i,o,a,s,u=this.$$keys();for(r=0;r<u.length&&(i=this[u[r]],o=t[u[r]],o!==n&&null!==o||!i.isOptional);r++){if(a=i.type.$normalize(o),!i.type.is(a))return!1;if(s=i.type.encode(a),e.isString(s)&&!i.type.pattern.exec(s))return!1}return!0},$$parent:n},this.ParamSet=l}function b(t,r){function i(t){var e=/^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(t.source);return null!=e?e[1].replace(/\\(.)/g,"$1"):""}function o(t,e){return t.replace(/\$(\$|\d{1,2})/,function(t,n){return e["$"===n?0:Number(n)]})}function a(t,e,n){if(!n)return!1;var r=t.invoke(e,e,{$match:n});return R(r)?r:!0}function s(r,i,o,a){function s(t,e,n){return"/"===g?t:e?g.slice(0,-1)+t:n?g.slice(1)+t:t}function h(t){function e(t){var e=t(o,r);return e?(N(e)&&r.replace().url(e),!0):!1}if(!t||!t.defaultPrevented){d&&r.url()===d;d=n;var i,a=c.length;for(i=0;a>i;i++)if(e(c[i]))return;l&&e(l)}}function p(){return u=u||i.$on("$locationChangeSuccess",h)}var d,g=a.baseHref(),v=r.url();return f||p(),{sync:function(){h()},listen:function(){return p()},update:function(t){return t?void(v=r.url()):void(r.url()!==v&&(r.url(v),r.replace()))},push:function(t,e,i){var o=t.format(e||{});null!==o&&e&&e["#"]&&(o+="#"+e["#"]),r.url(o),d=i&&i.$$avoidResync?r.url():n,i&&i.replace&&r.replace()},href:function(n,i,o){if(!n.validates(i))return null;var a=t.html5Mode();e.isObject(a)&&(a=a.enabled);var u=n.format(i);if(o=o||{},a||null===u||(u="#"+t.hashPrefix()+u),null!==u&&i&&i["#"]&&(u+="#"+i["#"]),u=s(u,a,o.absolute),!o.absolute||!u)return u;var c=!a&&u?"/":"",l=r.port();return l=80===l||443===l?"":":"+l,[r.protocol(),"://",r.host(),l,c,u].join("")}}}var u,c=[],l=null,f=!1;this.rule=function(t){if(!L(t))throw new Error("'rule' must be a function");return c.push(t),this},this.otherwise=function(t){if(N(t)){var e=t;t=function(){return e}}else if(!L(t))throw new Error("'rule' must be a function");return l=t,this},this.when=function(t,e){var n,s=N(e);if(N(t)&&(t=r.compile(t)),!s&&!L(e)&&!D(e))throw new Error("invalid 'handler' in when()");var u={matcher:function(t,e){return s&&(n=r.compile(e),e=["$match",function(t){return n.format(t)}]),I(function(n,r){return a(n,e,t.exec(r.path(),r.search()))},{prefix:N(t.prefix)?t.prefix:""})},regex:function(t,e){if(t.global||t.sticky)throw new Error("when() RegExp must not be global or sticky");return s&&(n=e,e=["$match",function(t){return o(n,t)}]),I(function(n,r){return a(n,e,t.exec(r.path()))},{prefix:i(t)})}},c={matcher:r.isMatcher(t),regex:t instanceof RegExp};for(var l in c)if(c[l])return this.rule(u[l](t,e));throw new Error("invalid 'what' in when()")},this.deferIntercept=function(t){t===n&&(t=!0),f=t},this.$get=s,s.$inject=["$location","$rootScope","$injector","$browser"]}function w(t,i){function o(t){return 0===t.indexOf(".")||0===t.indexOf("^")}function h(t,e){if(!t)return n;var r=N(t),i=r?t:t.name,a=o(i);if(a){if(!e)throw new Error("No reference point given for path '"+i+"'");e=h(e);for(var s=i.split("."),u=0,c=s.length,l=e;c>u;u++)if(""!==s[u]||0!==u){if("^"!==s[u])break;if(!l.parent)throw new Error("Path '"+i+"' not valid for state '"+e.name+"'");l=l.parent}else l=e;s=s.slice(u).join("."),i=l.name+(l.name&&s?".":"")+s}var f=k[i];return!f||!r&&(r||f!==t&&f.self!==t)?n:f}function p(t,e){E[t]||(E[t]=[]),E[t].push(e)}function g(t){for(var e=E[t]||[];e.length;)v(e.shift())}function v(e){e=r(e,{self:e,resolve:e.resolve||{},toString:function(){return this.name}});var n=e.name;if(!N(n)||n.indexOf("@")>=0)throw new Error("State must have a valid name");if(k.hasOwnProperty(n))throw new Error("State '"+n+"'' is already defined");var i=-1!==n.indexOf(".")?n.substring(0,n.lastIndexOf(".")):N(e.parent)?e.parent:F(e.parent)&&N(e.parent.name)?e.parent.name:"";if(i&&!k[i])return p(i,e.self);for(var o in A)L(A[o])&&(e[o]=A[o](e,A.$delegates[o]));return k[n]=e,!e[T]&&e.url&&t.when(e.url,["$match","$stateParams",function(t,n){C.$current.navigable==e&&c(t,n)||C.transitionTo(e,t,{inherit:!0,location:!1})}]),g(n),e}function m(t){return t.indexOf("*")>-1}function y(t){for(var e=t.split("."),n=C.$current.name.split("."),r=0,i=e.length;i>r;r++)"*"===e[r]&&(n[r]="*");return"**"===e[0]&&(n=n.slice(s(n,e[1])),n.unshift("**")),"**"===e[e.length-1]&&(n.splice(s(n,e[e.length-2])+1,Number.MAX_VALUE),n.push("**")),e.length!=n.length?!1:n.join("")===e.join("")}function $(t,e){return N(t)&&!R(e)?A[t]:L(e)&&N(t)?(A[t]&&!A.$delegates[t]&&(A.$delegates[t]=A[t]),A[t]=e,this):this}function b(t,e){return F(t)?e=t:e.name=t,v(e),this}function w(t,i,o,s,f,p,g,v,$){function b(e,n,r,o){var a=t.$broadcast("$stateNotFound",e,n,r);if(a.defaultPrevented)return g.update(),P;if(!a.retry)return null;if(o.$retry)return g.update(),O;var s=C.transition=i.when(a.retry);return s.then(function(){return s!==C.transition?E:(e.options.$retry=!0,C.transitionTo(e.to,e.toParams,e.options))},function(){return P}),g.update(),s}function w(t,n,r,a,u,c){function h(){var n=[];return _(t.views,function(r,i){var a=r.resolve&&r.resolve!==t.resolve?r.resolve:{};a.$template=[function(){return o.load(i,{
view:r,locals:u.globals,params:p,notify:c.notify})||""}],n.push(f.resolve(a,u.globals,u.resolve,t).then(function(n){if(L(r.controllerProvider)||D(r.controllerProvider)){var o=e.extend({},a,u.globals);n.$$controller=s.invoke(r.controllerProvider,null,o)}else n.$$controller=r.controller;n.$$state=t,n.$$controllerAs=r.controllerAs,u[i]=n}))}),i.all(n).then(function(){return u.globals})}var p=r?n:l(t.params.$$keys(),n),d={$stateParams:p};u.resolve=f.resolve(t.resolve,d,u.resolve,t);var g=[u.resolve.then(function(t){u.globals=t})];return a&&g.push(a),i.all(g).then(h).then(function(t){return u})}var E=i.reject(new Error("transition superseded")),A=i.reject(new Error("transition prevented")),P=i.reject(new Error("transition aborted")),O=i.reject(new Error("transition failed"));return S.locals={resolve:null,globals:{$stateParams:{}}},C={params:{},current:S.self,$current:S,transition:null},C.reload=function(t){return C.transitionTo(C.current,p,{reload:t||!0,inherit:!1,notify:!0})},C.go=function(t,e,n){return C.transitionTo(t,e,I({inherit:!0,relative:C.$current},n))},C.transitionTo=function(e,n,o){n=n||{},o=I({location:!0,inherit:!1,relative:null,notify:!0,reload:!1,$retry:!1},o||{});var a,c=C.$current,f=C.params,d=c.path,v=h(e,o.relative),m=n["#"];if(!R(v)){var y={to:e,toParams:n,options:o},$=b(y,c.self,f,o);if($)return $;if(e=y.to,n=y.toParams,o=y.options,v=h(e,o.relative),!R(v)){if(!o.relative)throw new Error("No such state '"+e+"'");throw new Error("Could not resolve '"+e+"' from state '"+o.relative+"'")}}if(v[T])throw new Error("Cannot transition to abstract state '"+e+"'");if(o.inherit&&(n=u(p,n||{},C.$current,v)),!v.params.$$validates(n))return O;n=v.params.$$values(n),e=v;var k=e.path,P=0,j=k[P],M=S.locals,L=[];if(o.reload){if(N(o.reload)||F(o.reload)){if(F(o.reload)&&!o.reload.name)throw new Error("Invalid reload state object");var D=o.reload===!0?d[0]:h(o.reload);if(o.reload&&!D)throw new Error("No such reload state '"+(N(o.reload)?o.reload:o.reload.name)+"'");for(;j&&j===d[P]&&j!==D;)M=L[P]=j.locals,P++,j=k[P]}}else for(;j&&j===d[P]&&j.ownParams.$$equals(n,f);)M=L[P]=j.locals,P++,j=k[P];if(x(e,n,c,f,M,o))return m&&(n["#"]=m),C.params=n,q(C.params,p),o.location&&e.navigable&&e.navigable.url&&(g.push(e.navigable.url,n,{$$avoidResync:!0,replace:"replace"===o.location}),g.update(!0)),C.transition=null,i.when(C.current);if(n=l(e.params.$$keys(),n||{}),o.notify&&t.$broadcast("$stateChangeStart",e.self,n,c.self,f).defaultPrevented)return t.$broadcast("$stateChangeCancel",e.self,n,c.self,f),g.update(),A;for(var _=i.when(M),H=P;H<k.length;H++,j=k[H])M=L[H]=r(M),_=w(j,n,j===e,_,M,o);var V=C.transition=_.then(function(){var r,i,a;if(C.transition!==V)return E;for(r=d.length-1;r>=P;r--)a=d[r],a.self.onExit&&s.invoke(a.self.onExit,a.self,a.locals.globals),a.locals=null;for(r=P;r<k.length;r++)i=k[r],i.locals=L[r],i.self.onEnter&&s.invoke(i.self.onEnter,i.self,i.locals.globals);return m&&(n["#"]=m),C.transition!==V?E:(C.$current=e,C.current=e.self,C.params=n,q(C.params,p),C.transition=null,o.location&&e.navigable&&g.push(e.navigable.url,e.navigable.locals.globals.$stateParams,{$$avoidResync:!0,replace:"replace"===o.location}),o.notify&&t.$broadcast("$stateChangeSuccess",e.self,n,c.self,f),g.update(!0),C.current)},function(r){return C.transition!==V?E:(C.transition=null,a=t.$broadcast("$stateChangeError",e.self,n,c.self,f,r),a.defaultPrevented||g.update(),i.reject(r))});return V},C.is=function(t,e,r){r=I({relative:C.$current},r||{});var i=h(t,r.relative);return R(i)?C.$current!==i?!1:e?c(i.params.$$values(e),p):!0:n},C.includes=function(t,e,r){if(r=I({relative:C.$current},r||{}),N(t)&&m(t)){if(!y(t))return!1;t=C.$current.name}var i=h(t,r.relative);return R(i)?R(C.$current.includes[i.name])?e?c(i.params.$$values(e),p,a(e)):!0:!1:n},C.href=function(t,e,r){r=I({lossy:!0,inherit:!0,absolute:!1,relative:C.$current},r||{});var i=h(t,r.relative);if(!R(i))return null;r.inherit&&(e=u(p,e||{},C.$current,i));var o=i&&r.lossy?i.navigable:i;return o&&o.url!==n&&null!==o.url?g.href(o.url,l(i.params.$$keys().concat("#"),e||{}),{absolute:r.absolute}):null},C.get=function(t,e){if(0===arguments.length)return d(a(k),function(t){return k[t].self});var n=h(t,e||C.$current);return n&&n.self?n.self:null},C}function x(t,e,n,r,i,o){function a(t,e,n){function r(e){return"search"!=t.params[e].location}var i=t.params.$$keys().filter(r),o=f.apply({},[t.params].concat(i)),a=new H.ParamSet(o);return a.$$equals(e,n)}return!o.reload&&t===n&&(i===n.locals||t.self.reloadOnSearch===!1&&a(n,r,e))?!0:void 0}var S,C,k={},E={},T="abstract",A={parent:function(t){if(R(t.parent)&&t.parent)return h(t.parent);var e=/^(.+)\.[^.]+$/.exec(t.name);return e?h(e[1]):S},data:function(t){return t.parent&&t.parent.data&&(t.data=t.self.data=I({},t.parent.data,t.data)),t.data},url:function(t){var e=t.url,n={params:t.params||{}};if(N(e))return"^"==e.charAt(0)?i.compile(e.substring(1),n):(t.parent.navigable||S).url.concat(e,n);if(!e||i.isMatcher(e))return e;throw new Error("Invalid url '"+e+"' in state '"+t+"'")},navigable:function(t){return t.url?t:t.parent?t.parent.navigable:null},ownParams:function(t){var e=t.url&&t.url.params||new H.ParamSet;return _(t.params||{},function(t,n){e[n]||(e[n]=new H.Param(n,null,t,"config"))}),e},params:function(t){return t.parent&&t.parent.params?I(t.parent.params.$$new(),t.ownParams):new H.ParamSet},views:function(t){var e={};return _(R(t.views)?t.views:{"":t},function(n,r){r.indexOf("@")<0&&(r+="@"+t.parent.name),e[r]=n}),e},path:function(t){return t.parent?t.parent.path.concat(t):[]},includes:function(t){var e=t.parent?I({},t.parent.includes):{};return e[t.name]=!0,e},$delegates:{}};S=v({name:"",url:"^",views:null,"abstract":!0}),S.navigable=null,this.decorator=$,this.state=b,this.$get=w,w.$inject=["$rootScope","$q","$view","$injector","$resolve","$stateParams","$urlRouter","$location","$urlMatcherFactory"]}function x(){function t(t,e){return{load:function(n,r){var i,o={template:null,controller:null,view:null,locals:null,notify:!0,async:!0,params:{}};return r=I(o,r),r.view&&(i=e.fromConfig(r.view,r.params,r.locals)),i&&r.notify&&t.$broadcast("$viewContentLoading",r),i}}}this.$get=t,t.$inject=["$rootScope","$templateFactory"]}function S(){var t=!1;this.useAnchorScroll=function(){t=!0},this.$get=["$anchorScroll","$timeout",function(e,n){return t?e:function(t){return n(function(){t[0].scrollIntoView()},0,!1)}}]}function C(t,n,r,i){function o(){return n.has?function(t){return n.has(t)?n.get(t):null}:function(t){try{return n.get(t)}catch(e){return null}}}function a(t,e){var n=function(){return{enter:function(t,e,n){e.after(t),n()},leave:function(t,e){t.remove(),e()}}};if(c)return{enter:function(t,e,n){var r=c.enter(t,null,e,n);r&&r.then&&r.then(n)},leave:function(t,e){var n=c.leave(t,e);n&&n.then&&n.then(e)}};if(u){var r=u&&u(e,t);return{enter:function(t,e,n){r.enter(t,null,e),n()},leave:function(t,e){r.leave(t),e()}}}return n()}var s=o(),u=s("$animator"),c=s("$animate"),l={restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(n,o,s){return function(n,o,u){function c(){f&&(f.remove(),f=null),p&&(p.$destroy(),p=null),h&&(m.leave(h,function(){f=null}),f=h,h=null)}function l(a){var l,f=E(n,u,o,i),y=f&&t.$current&&t.$current.locals[f];if(a||y!==d){l=n.$new(),d=t.$current.locals[f];var $=s(l,function(t){m.enter(t,o,function(){p&&p.$emit("$viewContentAnimationEnded"),(e.isDefined(v)&&!v||n.$eval(v))&&r(t)}),c()});h=$,p=l,p.$emit("$viewContentLoaded"),p.$eval(g)}}var f,h,p,d,g=u.onload||"",v=u.autoscroll,m=a(u,n);n.$on("$stateChangeSuccess",function(){l(!1)}),n.$on("$viewContentLoading",function(){l(!1)}),l(!0)}}};return l}function k(t,e,n,r){return{restrict:"ECA",priority:-400,compile:function(i){var o=i.html();return function(i,a,s){var u=n.$current,c=E(i,s,a,r),l=u&&u.locals[c];if(l){a.data("$uiView",{name:c,state:l.$$state}),a.html(l.$template?l.$template:o);var f=t(a.contents());if(l.$$controller){l.$scope=i,l.$element=a;var h=e(l.$$controller,l);l.$$controllerAs&&(i[l.$$controllerAs]=h),a.data("$ngControllerController",h),a.children().data("$ngControllerController",h)}f(i)}}}}}function E(t,e,n,r){var i=r(e.uiView||e.name||"")(t),o=n.inheritedData("$uiView");return i.indexOf("@")>=0?i:i+"@"+(o?o.state.name:"")}function T(t,e){var n,r=t.match(/^\s*({[^}]*})\s*$/);if(r&&(t=e+"("+r[1]+")"),n=t.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/),!n||4!==n.length)throw new Error("Invalid state ref '"+t+"'");return{state:n[1],paramExpr:n[3]||null}}function A(t){var e=t.parent().inheritedData("$uiView");return e&&e.state&&e.state.name?e.state:void 0}function P(t,n){var r=["location","inherit","reload","absolute"];return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(i,o,a,s){var u=T(a.uiSref,t.current.name),c=null,l=A(o)||t.$current,f="[object SVGAnimatedString]"===Object.prototype.toString.call(o.prop("href"))?"xlink:href":"href",h=null,p="A"===o.prop("tagName").toUpperCase(),d="FORM"===o[0].nodeName,g=d?"action":f,v=!0,m={relative:l,inherit:!0},y=i.$eval(a.uiSrefOpts)||{};e.forEach(r,function(t){t in y&&(m[t]=y[t])});var $=function(n){if(n&&(c=e.copy(n)),v){h=t.href(u.state,c,m);var r=s[1]||s[0];return r&&r.$$addStateInfo(u.state,c),null===h?(v=!1,!1):void a.$set(g,h)}};u.paramExpr&&(i.$watch(u.paramExpr,function(t,e){t!==c&&$(t)},!0),c=e.copy(i.$eval(u.paramExpr))),$(),d||o.bind("click",function(e){var r=e.which||e.button;if(!(r>1||e.ctrlKey||e.metaKey||e.shiftKey||o.attr("target"))){var i=n(function(){t.go(u.state,c,m)});e.preventDefault();var a=p&&!h?1:0;e.preventDefault=function(){a--<=0&&n.cancel(i)}}})}}}function O(t,e,n){return{restrict:"A",controller:["$scope","$element","$attrs",function(e,r,i){function o(){a()?r.addClass(u):r.removeClass(u)}function a(){for(var t=0;t<c.length;t++)if(s(c[t].state,c[t].params))return!0;return!1}function s(e,n){return"undefined"!=typeof i.uiSrefActiveEq?t.is(e.name,n):t.includes(e.name,n)}var u,c=[];u=n(i.uiSrefActiveEq||i.uiSrefActive||"",!1)(e),this.$$addStateInfo=function(e,n){var i=t.get(e,A(r));c.push({state:i||{name:e},params:n}),o()},e.$on("$stateChangeSuccess",o)}]}}function j(t){var e=function(e){return t.is(e)};return e.$stateful=!0,e}function M(t){var e=function(e){return t.includes(e)};return e.$stateful=!0,e}var R=e.isDefined,L=e.isFunction,N=e.isString,F=e.isObject,D=e.isArray,_=e.forEach,I=e.extend,q=e.copy;e.module("ui.router.util",["ng"]),e.module("ui.router.router",["ui.router.util"]),e.module("ui.router.state",["ui.router.router","ui.router.util"]),e.module("ui.router",["ui.router.state"]),e.module("ui.router.compat",["ui.router"]),g.$inject=["$q","$injector"],e.module("ui.router.util").service("$resolve",g),v.$inject=["$http","$templateCache","$injector"],e.module("ui.router.util").service("$templateFactory",v);var H;m.prototype.concat=function(t,e){var n={caseInsensitive:H.caseInsensitive(),strict:H.strictMode(),squash:H.defaultSquashPolicy()};return new m(this.sourcePath+t+this.sourceSearch,I(n,e),this)},m.prototype.toString=function(){return this.source},m.prototype.exec=function(t,e){function n(t){function e(t){return t.split("").reverse().join("")}function n(t){return t.replace(/\\-/g,"-")}var r=e(t).split(/-(?!\\)/),i=d(r,e);return d(i,n).reverse()}var r=this.regexp.exec(t);if(!r)return null;e=e||{};var i,o,a,s=this.parameters(),u=s.length,c=this.segments.length-1,l={};if(c!==r.length-1)throw new Error("Unbalanced capture group in route '"+this.source+"'");for(i=0;c>i;i++){a=s[i];var f=this.params[a],h=r[i+1];for(o=0;o<f.replace;o++)f.replace[o].from===h&&(h=f.replace[o].to);h&&f.array===!0&&(h=n(h)),l[a]=f.value(h)}for(;u>i;i++)a=s[i],l[a]=this.params[a].value(e[a]);return l},m.prototype.parameters=function(t){return R(t)?this.params[t]||null:this.$$paramNames},m.prototype.validates=function(t){return this.params.$$validates(t)},m.prototype.format=function(t){function e(t){return encodeURIComponent(t).replace(/-/g,function(t){return"%5C%"+t.charCodeAt(0).toString(16).toUpperCase()})}t=t||{};var n=this.segments,r=this.parameters(),i=this.params;if(!this.validates(t))return null;var o,a=!1,s=n.length-1,u=r.length,c=n[0];for(o=0;u>o;o++){var l=s>o,f=r[o],h=i[f],p=h.value(t[f]),g=h.isOptional&&h.type.equals(h.value(),p),v=g?h.squash:!1,m=h.type.encode(p);if(l){var y=n[o+1];if(v===!1)null!=m&&(c+=D(m)?d(m,e).join("-"):encodeURIComponent(m)),c+=y;else if(v===!0){var $=c.match(/\/$/)?/\/?(.*)/:/(.*)/;c+=y.match($)[1]}else N(v)&&(c+=v+y)}else{if(null==m||g&&v!==!1)continue;D(m)||(m=[m]),m=d(m,encodeURIComponent).join("&"+f+"="),c+=(a?"&":"?")+(f+"="+m),a=!0}}return c},y.prototype.is=function(t,e){return!0},y.prototype.encode=function(t,e){return t},y.prototype.decode=function(t,e){return t},y.prototype.equals=function(t,e){return t==e},y.prototype.$subPattern=function(){var t=this.pattern.toString();return t.substr(1,t.length-2)},y.prototype.pattern=/.*/,y.prototype.toString=function(){return"{Type:"+this.name+"}"},y.prototype.$normalize=function(t){return this.is(t)?t:this.decode(t)},y.prototype.$asArray=function(t,e){function r(t,e){function r(t,e){return function(){return t[e].apply(t,arguments)}}function i(t){return D(t)?t:R(t)?[t]:[]}function o(t){switch(t.length){case 0:return n;case 1:return"auto"===e?t[0]:t;default:return t}}function a(t){return!t}function s(t,e){return function(n){n=i(n);var r=d(n,t);return e===!0?0===p(r,a).length:o(r)}}function u(t){return function(e,n){var r=i(e),o=i(n);if(r.length!==o.length)return!1;for(var a=0;a<r.length;a++)if(!t(r[a],o[a]))return!1;return!0}}this.encode=s(r(t,"encode")),this.decode=s(r(t,"decode")),this.is=s(r(t,"is"),!0),this.equals=u(r(t,"equals")),this.pattern=t.pattern,this.$normalize=s(r(t,"$normalize")),this.name=t.name,this.$arrayMode=e}if(!t)return this;if("auto"===t&&!e)throw new Error("'auto' array mode is for query parameters only");return new r(this,t)},e.module("ui.router.util").provider("$urlMatcherFactory",$),e.module("ui.router.util").run(["$urlMatcherFactory",function(t){}]),b.$inject=["$locationProvider","$urlMatcherFactoryProvider"],e.module("ui.router.router").provider("$urlRouter",b),w.$inject=["$urlRouterProvider","$urlMatcherFactoryProvider"],e.module("ui.router.state").value("$stateParams",{}).provider("$state",w),x.$inject=[],e.module("ui.router.state").provider("$view",x),e.module("ui.router.state").provider("$uiViewScroll",S),C.$inject=["$state","$injector","$uiViewScroll","$interpolate"],k.$inject=["$compile","$controller","$state","$interpolate"],e.module("ui.router.state").directive("uiView",C),e.module("ui.router.state").directive("uiView",k),P.$inject=["$state","$timeout"],O.$inject=["$state","$stateParams","$interpolate"],e.module("ui.router.state").directive("uiSref",P).directive("uiSrefActive",O).directive("uiSrefActiveEq",O),j.$inject=["$state"],M.$inject=["$state"],e.module("ui.router.state").filter("isState",j).filter("includedByState",M)}(window,window.angular),function(){function t(t){function e(e,n,r,i,o,a){for(;o>=0&&a>o;o+=t){var s=i?i[o]:o;r=n(r,e[s],s,e)}return r}return function(n,r,i,o){r=$(r,o,4);var a=!E(n)&&y.keys(n),s=(a||n).length,u=t>0?0:s-1;return arguments.length<3&&(i=n[a?a[u]:u],u+=t),e(n,r,i,a,u,s)}}function e(t){return function(e,n,r){n=b(n,r);for(var i=k(e),o=t>0?0:i-1;o>=0&&i>o;o+=t)if(n(e[o],o,e))return o;return-1}}function n(t,e,n){return function(r,i,o){var a=0,s=k(r);if("number"==typeof o)t>0?a=o>=0?o:Math.max(o+s,a):s=o>=0?Math.min(o+1,s):o+s+1;else if(n&&o&&s)return o=n(r,i),r[o]===i?o:-1;if(i!==i)return o=e(l.call(r,a,s),y.isNaN),o>=0?o+a:-1;for(o=t>0?a:s-1;o>=0&&s>o;o+=t)if(r[o]===i)return o;return-1}}function r(t,e){var n=j.length,r=t.constructor,i=y.isFunction(r)&&r.prototype||s,o="constructor";for(y.has(t,o)&&!y.contains(e,o)&&e.push(o);n--;)o=j[n],o in t&&t[o]!==i[o]&&!y.contains(e,o)&&e.push(o)}var i=this,o=i._,a=Array.prototype,s=Object.prototype,u=Function.prototype,c=a.push,l=a.slice,f=s.toString,h=s.hasOwnProperty,p=Array.isArray,d=Object.keys,g=u.bind,v=Object.create,m=function(){},y=function(t){return t instanceof y?t:this instanceof y?void(this._wrapped=t):new y(t)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=y),exports._=y):i._=y,y.VERSION="1.8.3";var $=function(t,e,n){if(void 0===e)return t;switch(null==n?3:n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)};case 4:return function(n,r,i,o){return t.call(e,n,r,i,o)}}return function(){return t.apply(e,arguments)}},b=function(t,e,n){return null==t?y.identity:y.isFunction(t)?$(t,e,n):y.isObject(t)?y.matcher(t):y.property(t)};y.iteratee=function(t,e){return b(t,e,1/0)};var w=function(t,e){return function(n){var r=arguments.length;if(2>r||null==n)return n;for(var i=1;r>i;i++)for(var o=arguments[i],a=t(o),s=a.length,u=0;s>u;u++){var c=a[u];e&&void 0!==n[c]||(n[c]=o[c])}return n}},x=function(t){if(!y.isObject(t))return{};if(v)return v(t);m.prototype=t;var e=new m;return m.prototype=null,e},S=function(t){return function(e){return null==e?void 0:e[t]}},C=Math.pow(2,53)-1,k=S("length"),E=function(t){var e=k(t);return"number"==typeof e&&e>=0&&C>=e};y.each=y.forEach=function(t,e,n){e=$(e,n);var r,i;if(E(t))for(r=0,i=t.length;i>r;r++)e(t[r],r,t);else{var o=y.keys(t);for(r=0,i=o.length;i>r;r++)e(t[o[r]],o[r],t)}return t},y.map=y.collect=function(t,e,n){e=b(e,n);for(var r=!E(t)&&y.keys(t),i=(r||t).length,o=Array(i),a=0;i>a;a++){var s=r?r[a]:a;o[a]=e(t[s],s,t)}return o},y.reduce=y.foldl=y.inject=t(1),y.reduceRight=y.foldr=t(-1),y.find=y.detect=function(t,e,n){var r;return r=E(t)?y.findIndex(t,e,n):y.findKey(t,e,n),void 0!==r&&-1!==r?t[r]:void 0},y.filter=y.select=function(t,e,n){var r=[];return e=b(e,n),y.each(t,function(t,n,i){e(t,n,i)&&r.push(t)}),r},y.reject=function(t,e,n){return y.filter(t,y.negate(b(e)),n)},y.every=y.all=function(t,e,n){e=b(e,n);for(var r=!E(t)&&y.keys(t),i=(r||t).length,o=0;i>o;o++){var a=r?r[o]:o;if(!e(t[a],a,t))return!1}return!0},y.some=y.any=function(t,e,n){e=b(e,n);for(var r=!E(t)&&y.keys(t),i=(r||t).length,o=0;i>o;o++){var a=r?r[o]:o;if(e(t[a],a,t))return!0}return!1},y.contains=y.includes=y.include=function(t,e,n,r){return E(t)||(t=y.values(t)),("number"!=typeof n||r)&&(n=0),y.indexOf(t,e,n)>=0},y.invoke=function(t,e){var n=l.call(arguments,2),r=y.isFunction(e);return y.map(t,function(t){var i=r?e:t[e];return null==i?i:i.apply(t,n)})},y.pluck=function(t,e){return y.map(t,y.property(e))},y.where=function(t,e){return y.filter(t,y.matcher(e))},y.findWhere=function(t,e){return y.find(t,y.matcher(e))},y.max=function(t,e,n){var r,i,o=-(1/0),a=-(1/0);if(null==e&&null!=t){t=E(t)?t:y.values(t);for(var s=0,u=t.length;u>s;s++)r=t[s],r>o&&(o=r)}else e=b(e,n),y.each(t,function(t,n,r){i=e(t,n,r),(i>a||i===-(1/0)&&o===-(1/0))&&(o=t,a=i)});return o},y.min=function(t,e,n){var r,i,o=1/0,a=1/0;if(null==e&&null!=t){t=E(t)?t:y.values(t);for(var s=0,u=t.length;u>s;s++)r=t[s],o>r&&(o=r)}else e=b(e,n),y.each(t,function(t,n,r){i=e(t,n,r),(a>i||i===1/0&&o===1/0)&&(o=t,a=i)});return o},y.shuffle=function(t){for(var e,n=E(t)?t:y.values(t),r=n.length,i=Array(r),o=0;r>o;o++)e=y.random(0,o),e!==o&&(i[o]=i[e]),i[e]=n[o];return i},y.sample=function(t,e,n){return null==e||n?(E(t)||(t=y.values(t)),t[y.random(t.length-1)]):y.shuffle(t).slice(0,Math.max(0,e))},y.sortBy=function(t,e,n){return e=b(e,n),y.pluck(y.map(t,function(t,n,r){return{value:t,index:n,criteria:e(t,n,r)}}).sort(function(t,e){var n=t.criteria,r=e.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(r>n||void 0===r)return-1}return t.index-e.index}),"value")};var T=function(t){return function(e,n,r){var i={};return n=b(n,r),y.each(e,function(r,o){var a=n(r,o,e);t(i,r,a)}),i}};y.groupBy=T(function(t,e,n){y.has(t,n)?t[n].push(e):t[n]=[e]}),y.indexBy=T(function(t,e,n){t[n]=e}),y.countBy=T(function(t,e,n){y.has(t,n)?t[n]++:t[n]=1}),y.toArray=function(t){return t?y.isArray(t)?l.call(t):E(t)?y.map(t,y.identity):y.values(t):[]},y.size=function(t){return null==t?0:E(t)?t.length:y.keys(t).length},y.partition=function(t,e,n){e=b(e,n);var r=[],i=[];return y.each(t,function(t,n,o){(e(t,n,o)?r:i).push(t)}),[r,i]},y.first=y.head=y.take=function(t,e,n){return null!=t?null==e||n?t[0]:y.initial(t,t.length-e):void 0},y.initial=function(t,e,n){return l.call(t,0,Math.max(0,t.length-(null==e||n?1:e)))},y.last=function(t,e,n){return null!=t?null==e||n?t[t.length-1]:y.rest(t,Math.max(0,t.length-e)):void 0},y.rest=y.tail=y.drop=function(t,e,n){return l.call(t,null==e||n?1:e)},y.compact=function(t){return y.filter(t,y.identity)};var A=function(t,e,n,r){for(var i=[],o=0,a=r||0,s=k(t);s>a;a++){var u=t[a];if(E(u)&&(y.isArray(u)||y.isArguments(u))){e||(u=A(u,e,n));var c=0,l=u.length;for(i.length+=l;l>c;)i[o++]=u[c++]}else n||(i[o++]=u)}return i};y.flatten=function(t,e){return A(t,e,!1)},y.without=function(t){return y.difference(t,l.call(arguments,1))},y.uniq=y.unique=function(t,e,n,r){y.isBoolean(e)||(r=n,n=e,e=!1),null!=n&&(n=b(n,r));for(var i=[],o=[],a=0,s=k(t);s>a;a++){var u=t[a],c=n?n(u,a,t):u;e?(a&&o===c||i.push(u),o=c):n?y.contains(o,c)||(o.push(c),i.push(u)):y.contains(i,u)||i.push(u)}return i},y.union=function(){return y.uniq(A(arguments,!0,!0))},y.intersection=function(t){for(var e=[],n=arguments.length,r=0,i=k(t);i>r;r++){var o=t[r];if(!y.contains(e,o)){for(var a=1;n>a&&y.contains(arguments[a],o);a++);a===n&&e.push(o)}}return e},y.difference=function(t){var e=A(arguments,!0,!0,1);return y.filter(t,function(t){return!y.contains(e,t)})},y.zip=function(){return y.unzip(arguments)},y.unzip=function(t){for(var e=t&&y.max(t,k).length||0,n=Array(e),r=0;e>r;r++)n[r]=y.pluck(t,r);return n},y.object=function(t,e){for(var n={},r=0,i=k(t);i>r;r++)e?n[t[r]]=e[r]:n[t[r][0]]=t[r][1];return n},y.findIndex=e(1),y.findLastIndex=e(-1),y.sortedIndex=function(t,e,n,r){n=b(n,r,1);for(var i=n(e),o=0,a=k(t);a>o;){var s=Math.floor((o+a)/2);n(t[s])<i?o=s+1:a=s}return o},y.indexOf=n(1,y.findIndex,y.sortedIndex),y.lastIndexOf=n(-1,y.findLastIndex),y.range=function(t,e,n){null==e&&(e=t||0,t=0),n=n||1;for(var r=Math.max(Math.ceil((e-t)/n),0),i=Array(r),o=0;r>o;o++,t+=n)i[o]=t;return i};var P=function(t,e,n,r,i){if(!(r instanceof e))return t.apply(n,i);var o=x(t.prototype),a=t.apply(o,i);return y.isObject(a)?a:o};y.bind=function(t,e){if(g&&t.bind===g)return g.apply(t,l.call(arguments,1));if(!y.isFunction(t))throw new TypeError("Bind must be called on a function");var n=l.call(arguments,2),r=function(){return P(t,r,e,this,n.concat(l.call(arguments)))};return r},y.partial=function(t){var e=l.call(arguments,1),n=function(){for(var r=0,i=e.length,o=Array(i),a=0;i>a;a++)o[a]=e[a]===y?arguments[r++]:e[a];for(;r<arguments.length;)o.push(arguments[r++]);return P(t,n,this,this,o)};return n},y.bindAll=function(t){var e,n,r=arguments.length;if(1>=r)throw new Error("bindAll must be passed function names");for(e=1;r>e;e++)n=arguments[e],t[n]=y.bind(t[n],t);return t},y.memoize=function(t,e){var n=function(r){var i=n.cache,o=""+(e?e.apply(this,arguments):r);return y.has(i,o)||(i[o]=t.apply(this,arguments)),i[o]};return n.cache={},n},y.delay=function(t,e){var n=l.call(arguments,2);return setTimeout(function(){return t.apply(null,n)},e)},y.defer=y.partial(y.delay,y,1),y.throttle=function(t,e,n){var r,i,o,a=null,s=0;n||(n={});var u=function(){s=n.leading===!1?0:y.now(),a=null,o=t.apply(r,i),a||(r=i=null)};return function(){var c=y.now();s||n.leading!==!1||(s=c);var l=e-(c-s);return r=this,i=arguments,0>=l||l>e?(a&&(clearTimeout(a),a=null),s=c,o=t.apply(r,i),a||(r=i=null)):a||n.trailing===!1||(a=setTimeout(u,l)),o}},y.debounce=function(t,e,n){var r,i,o,a,s,u=function(){var c=y.now()-a;e>c&&c>=0?r=setTimeout(u,e-c):(r=null,n||(s=t.apply(o,i),r||(o=i=null)))};return function(){o=this,i=arguments,a=y.now();var c=n&&!r;return r||(r=setTimeout(u,e)),c&&(s=t.apply(o,i),o=i=null),s}},y.wrap=function(t,e){return y.partial(e,t)},y.negate=function(t){return function(){return!t.apply(this,arguments)}},y.compose=function(){var t=arguments,e=t.length-1;return function(){for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}},y.after=function(t,e){return function(){return--t<1?e.apply(this,arguments):void 0}},y.before=function(t,e){var n;return function(){return--t>0&&(n=e.apply(this,arguments)),1>=t&&(e=null),n}},y.once=y.partial(y.before,2);var O=!{toString:null}.propertyIsEnumerable("toString"),j=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];y.keys=function(t){if(!y.isObject(t))return[];if(d)return d(t);var e=[];for(var n in t)y.has(t,n)&&e.push(n);return O&&r(t,e),e},y.allKeys=function(t){if(!y.isObject(t))return[];var e=[];for(var n in t)e.push(n);return O&&r(t,e),e},y.values=function(t){for(var e=y.keys(t),n=e.length,r=Array(n),i=0;n>i;i++)r[i]=t[e[i]];return r},y.mapObject=function(t,e,n){e=b(e,n);for(var r,i=y.keys(t),o=i.length,a={},s=0;o>s;s++)r=i[s],a[r]=e(t[r],r,t);return a},y.pairs=function(t){for(var e=y.keys(t),n=e.length,r=Array(n),i=0;n>i;i++)r[i]=[e[i],t[e[i]]];return r},y.invert=function(t){for(var e={},n=y.keys(t),r=0,i=n.length;i>r;r++)e[t[n[r]]]=n[r];return e},y.functions=y.methods=function(t){var e=[];for(var n in t)y.isFunction(t[n])&&e.push(n);return e.sort()},y.extend=w(y.allKeys),y.extendOwn=y.assign=w(y.keys),y.findKey=function(t,e,n){e=b(e,n);for(var r,i=y.keys(t),o=0,a=i.length;a>o;o++)if(r=i[o],e(t[r],r,t))return r},y.pick=function(t,e,n){var r,i,o={},a=t;if(null==a)return o;y.isFunction(e)?(i=y.allKeys(a),r=$(e,n)):(i=A(arguments,!1,!1,1),r=function(t,e,n){return e in n},a=Object(a));for(var s=0,u=i.length;u>s;s++){var c=i[s],l=a[c];r(l,c,a)&&(o[c]=l)}return o},y.omit=function(t,e,n){if(y.isFunction(e))e=y.negate(e);else{var r=y.map(A(arguments,!1,!1,1),String);e=function(t,e){return!y.contains(r,e)}}return y.pick(t,e,n)},y.defaults=w(y.allKeys,!0),y.create=function(t,e){var n=x(t);return e&&y.extendOwn(n,e),n},y.clone=function(t){return y.isObject(t)?y.isArray(t)?t.slice():y.extend({},t):t},y.tap=function(t,e){return e(t),t},y.isMatch=function(t,e){var n=y.keys(e),r=n.length;if(null==t)return!r;for(var i=Object(t),o=0;r>o;o++){var a=n[o];if(e[a]!==i[a]||!(a in i))return!1}return!0};var M=function(t,e,n,r){if(t===e)return 0!==t||1/t===1/e;if(null==t||null==e)return t===e;t instanceof y&&(t=t._wrapped),e instanceof y&&(e=e._wrapped);var i=f.call(t);if(i!==f.call(e))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!==+t?+e!==+e:0===+t?1/+t===1/e:+t===+e;case"[object Date]":case"[object Boolean]":return+t===+e}var o="[object Array]"===i;if(!o){if("object"!=typeof t||"object"!=typeof e)return!1;var a=t.constructor,s=e.constructor;if(a!==s&&!(y.isFunction(a)&&a instanceof a&&y.isFunction(s)&&s instanceof s)&&"constructor"in t&&"constructor"in e)return!1}n=n||[],r=r||[];for(var u=n.length;u--;)if(n[u]===t)return r[u]===e;if(n.push(t),r.push(e),o){if(u=t.length,u!==e.length)return!1;for(;u--;)if(!M(t[u],e[u],n,r))return!1}else{var c,l=y.keys(t);if(u=l.length,y.keys(e).length!==u)return!1;for(;u--;)if(c=l[u],!y.has(e,c)||!M(t[c],e[c],n,r))return!1}return n.pop(),r.pop(),!0};y.isEqual=function(t,e){return M(t,e)},y.isEmpty=function(t){return null==t?!0:E(t)&&(y.isArray(t)||y.isString(t)||y.isArguments(t))?0===t.length:0===y.keys(t).length},y.isElement=function(t){return!(!t||1!==t.nodeType)},y.isArray=p||function(t){return"[object Array]"===f.call(t)},y.isObject=function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},y.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(t){y["is"+t]=function(e){return f.call(e)==="[object "+t+"]"}}),y.isArguments(arguments)||(y.isArguments=function(t){return y.has(t,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(y.isFunction=function(t){return"function"==typeof t||!1}),y.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},y.isNaN=function(t){return y.isNumber(t)&&t!==+t},y.isBoolean=function(t){return t===!0||t===!1||"[object Boolean]"===f.call(t)},y.isNull=function(t){return null===t},y.isUndefined=function(t){return void 0===t},y.has=function(t,e){return null!=t&&h.call(t,e)},y.noConflict=function(){return i._=o,this},y.identity=function(t){return t},y.constant=function(t){return function(){return t}},y.noop=function(){},y.property=S,y.propertyOf=function(t){return null==t?function(){}:function(e){return t[e]}},y.matcher=y.matches=function(t){return t=y.extendOwn({},t),function(e){return y.isMatch(e,t)}},y.times=function(t,e,n){var r=Array(Math.max(0,t));e=$(e,n,1);for(var i=0;t>i;i++)r[i]=e(i);return r},y.random=function(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))},y.now=Date.now||function(){return(new Date).getTime()};var R={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},L=y.invert(R),N=function(t){var e=function(e){return t[e]},n="(?:"+y.keys(t).join("|")+")",r=RegExp(n),i=RegExp(n,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(i,e):t}};y.escape=N(R),y.unescape=N(L),y.result=function(t,e,n){var r=null==t?void 0:t[e];return void 0===r&&(r=n),y.isFunction(r)?r.call(t):r};var F=0;y.uniqueId=function(t){var e=++F+"";return t?t+e:e},y.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var D=/(.)^/,_={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},I=/\\|'|\r|\n|\u2028|\u2029/g,q=function(t){return"\\"+_[t]};y.template=function(t,e,n){!e&&n&&(e=n),e=y.defaults({},e,y.templateSettings);var r=RegExp([(e.escape||D).source,(e.interpolate||D).source,(e.evaluate||D).source].join("|")+"|$","g"),i=0,o="__p+='";t.replace(r,function(e,n,r,a,s){return o+=t.slice(i,s).replace(I,q),i=s+e.length,n?o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?o+="'+\n((__t=("+r+"))==null?'':__t)+\n'":a&&(o+="';\n"+a+"\n__p+='"),e}),o+="';\n",e.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{var a=new Function(e.variable||"obj","_",o)}catch(s){throw s.source=o,s}var u=function(t){return a.call(this,t,y)},c=e.variable||"obj";return u.source="function("+c+"){\n"+o+"}",u},y.chain=function(t){var e=y(t);return e._chain=!0,e};var H=function(t,e){return t._chain?y(e).chain():e};y.mixin=function(t){y.each(y.functions(t),function(e){var n=y[e]=t[e];y.prototype[e]=function(){var t=[this._wrapped];return c.apply(t,arguments),H(this,n.apply(y,t))}})},y.mixin(y),y.each(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var e=a[t];y.prototype[t]=function(){var n=this._wrapped;return e.apply(n,arguments),"shift"!==t&&"splice"!==t||0!==n.length||delete n[0],H(this,n)}}),y.each(["concat","join","slice"],function(t){var e=a[t];y.prototype[t]=function(){return H(this,e.apply(this._wrapped,arguments))}}),y.prototype.value=function(){return this._wrapped},y.prototype.valueOf=y.prototype.toJSON=y.prototype.value,y.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return y})}.call(this),function(){"use strict";var t=this,e=t.Chart,n=function(t){this.canvas=t.canvas,this.ctx=t;var e=function(t,e){return t["offset"+e]?t["offset"+e]:document.defaultView.getComputedStyle(t).getPropertyValue(e)},n=this.width=e(t.canvas,"Width"),i=this.height=e(t.canvas,"Height");t.canvas.width=n,t.canvas.height=i;var n=this.width=t.canvas.width,i=this.height=t.canvas.height;return this.aspectRatio=this.width/this.height,r.retinaScale(this),this};n.defaults={global:{animation:!0,animationSteps:60,animationEasing:"easeOutQuart",showScale:!0,scaleOverride:!1,scaleSteps:null,scaleStepWidth:null,scaleStartValue:null,scaleLineColor:"rgba(0,0,0,.1)",scaleLineWidth:1,scaleShowLabels:!0,scaleLabel:"<%=value%>",scaleIntegersOnly:!0,scaleBeginAtZero:!1,scaleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",scaleFontSize:12,scaleFontStyle:"normal",scaleFontColor:"#666",responsive:!1,maintainAspectRatio:!0,
showTooltips:!0,customTooltips:!1,tooltipEvents:["mousemove","touchstart","touchmove","mouseout"],tooltipFillColor:"rgba(0,0,0,0.8)",tooltipFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipFontSize:14,tooltipFontStyle:"normal",tooltipFontColor:"#fff",tooltipTitleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipTitleFontSize:14,tooltipTitleFontStyle:"bold",tooltipTitleFontColor:"#fff",tooltipYPadding:6,tooltipXPadding:6,tooltipCaretSize:8,tooltipCornerRadius:6,tooltipXOffset:10,tooltipTemplate:"<%if (label){%><%=label%>: <%}%><%= value %>",multiTooltipTemplate:"<%= value %>",multiTooltipKeyBackground:"#fff",onAnimationProgress:function(){},onAnimationComplete:function(){}}},n.types={};var r=n.helpers={},i=r.each=function(t,e,n){var r=Array.prototype.slice.call(arguments,3);if(t)if(t.length===+t.length){var i;for(i=0;i<t.length;i++)e.apply(n,[t[i],i].concat(r))}else for(var o in t)e.apply(n,[t[o],o].concat(r))},o=r.clone=function(t){var e={};return i(t,function(n,r){t.hasOwnProperty(r)&&(e[r]=n)}),e},a=r.extend=function(t){return i(Array.prototype.slice.call(arguments,1),function(e){i(e,function(n,r){e.hasOwnProperty(r)&&(t[r]=n)})}),t},s=r.merge=function(t,e){var n=Array.prototype.slice.call(arguments,0);return n.unshift({}),a.apply(null,n)},u=r.indexOf=function(t,e){if(Array.prototype.indexOf)return t.indexOf(e);for(var n=0;n<t.length;n++)if(t[n]===e)return n;return-1},c=(r.where=function(t,e){var n=[];return r.each(t,function(t){e(t)&&n.push(t)}),n},r.findNextWhere=function(t,e,n){n||(n=-1);for(var r=n+1;r<t.length;r++){var i=t[r];if(e(i))return i}},r.findPreviousWhere=function(t,e,n){n||(n=t.length);for(var r=n-1;r>=0;r--){var i=t[r];if(e(i))return i}},r.inherits=function(t){var e=this,n=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return e.apply(this,arguments)},r=function(){this.constructor=n};return r.prototype=e.prototype,n.prototype=new r,n.extend=c,t&&a(n.prototype,t),n.__super__=e.prototype,n}),l=r.noop=function(){},f=r.uid=function(){var t=0;return function(){return"chart-"+t++}}(),h=r.warn=function(t){window.console&&"function"==typeof window.console.warn&&console.warn(t)},p=r.amd="function"==typeof define&&define.amd,d=r.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},g=r.max=function(t){return Math.max.apply(Math,t)},v=r.min=function(t){return Math.min.apply(Math,t)},m=(r.cap=function(t,e,n){if(d(e)){if(t>e)return e}else if(d(n)&&n>t)return n;return t},r.getDecimalPlaces=function(t){return t%1!==0&&d(t)?t.toString().split(".")[1].length:0}),y=r.radians=function(t){return t*(Math.PI/180)},$=(r.getAngleFromPoint=function(t,e){var n=e.x-t.x,r=e.y-t.y,i=Math.sqrt(n*n+r*r),o=2*Math.PI+Math.atan2(r,n);return 0>n&&0>r&&(o+=2*Math.PI),{angle:o,distance:i}},r.aliasPixel=function(t){return t%2===0?0:.5}),b=(r.splineCurve=function(t,e,n,r){var i=Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)),o=Math.sqrt(Math.pow(n.x-e.x,2)+Math.pow(n.y-e.y,2)),a=r*i/(i+o),s=r*o/(i+o);return{inner:{x:e.x-a*(n.x-t.x),y:e.y-a*(n.y-t.y)},outer:{x:e.x+s*(n.x-t.x),y:e.y+s*(n.y-t.y)}}},r.calculateOrderOfMagnitude=function(t){return Math.floor(Math.log(t)/Math.LN10)}),w=(r.calculateScaleRange=function(t,e,n,r,i){var o=2,a=Math.floor(e/(1.5*n)),s=o>=a,u=g(t),c=v(t);u===c&&(u+=.5,c>=.5&&!r?c-=.5:u+=.5);for(var l=Math.abs(u-c),f=b(l),h=Math.ceil(u/(1*Math.pow(10,f)))*Math.pow(10,f),p=r?0:Math.floor(c/(1*Math.pow(10,f)))*Math.pow(10,f),d=h-p,m=Math.pow(10,f),y=Math.round(d/m);(y>a||a>2*y)&&!s;)if(y>a)m*=2,y=Math.round(d/m),y%1!==0&&(s=!0);else if(i&&f>=0){if(m/2%1!==0)break;m/=2,y=Math.round(d/m)}else m/=2,y=Math.round(d/m);return s&&(y=o,m=d/y),{steps:y,stepValue:m,min:p,max:p+y*m}},r.template=function(t,e){function n(t,e){var n=/\W/.test(t)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+t.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):r[t]=r[t];return e?n(e):n}if(t instanceof Function)return t(e);var r={};return n(t,e)}),x=(r.generateLabels=function(t,e,n,r){var o=new Array(e);return labelTemplateString&&i(o,function(e,i){o[i]=w(t,{value:n+r*(i+1)})}),o},r.easingEffects={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-1*t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-0.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return 1*((t=t/1-1)*t*t+1)},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-1*((t=t/1-1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-0.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return 1*(t/=1)*t*t*t*t},easeOutQuint:function(t){return 1*((t=t/1-1)*t*t*t*t+1)},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return-1*Math.cos(t/1*(Math.PI/2))+1},easeOutSine:function(t){return 1*Math.sin(t/1*(Math.PI/2))},easeInOutSine:function(t){return-0.5*(Math.cos(Math.PI*t/1)-1)},easeInExpo:function(t){return 0===t?1:1*Math.pow(2,10*(t/1-1))},easeOutExpo:function(t){return 1===t?1:1*(-Math.pow(2,-10*t/1)+1)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(-Math.pow(2,-10*--t)+2)},easeInCirc:function(t){return t>=1?t:-1*(Math.sqrt(1-(t/=1)*t)-1)},easeOutCirc:function(t){return 1*Math.sqrt(1-(t=t/1-1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-0.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,r=1;return 0===t?0:1==(t/=1)?1:(n||(n=.3),r<Math.abs(1)?(r=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/r),-(r*Math.pow(2,10*(t-=1))*Math.sin((1*t-e)*(2*Math.PI)/n)))},easeOutElastic:function(t){var e=1.70158,n=0,r=1;return 0===t?0:1==(t/=1)?1:(n||(n=.3),r<Math.abs(1)?(r=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/r),r*Math.pow(2,-10*t)*Math.sin((1*t-e)*(2*Math.PI)/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,r=1;return 0===t?0:2==(t/=.5)?1:(n||(n=1*(.3*1.5)),r<Math.abs(1)?(r=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/r),1>t?-.5*(r*Math.pow(2,10*(t-=1))*Math.sin((1*t-e)*(2*Math.PI)/n)):r*Math.pow(2,-10*(t-=1))*Math.sin((1*t-e)*(2*Math.PI)/n)*.5+1)},easeInBack:function(t){var e=1.70158;return 1*(t/=1)*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return 1*((t=t/1-1)*t*((e+1)*t+e)+1)},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?.5*(t*t*(((e*=1.525)+1)*t-e)):.5*((t-=2)*t*(((e*=1.525)+1)*t+e)+2)},easeInBounce:function(t){return 1-x.easeOutBounce(1-t)},easeOutBounce:function(t){return(t/=1)<1/2.75?1*(7.5625*t*t):2/2.75>t?1*(7.5625*(t-=1.5/2.75)*t+.75):2.5/2.75>t?1*(7.5625*(t-=2.25/2.75)*t+.9375):1*(7.5625*(t-=2.625/2.75)*t+.984375)},easeInOutBounce:function(t){return.5>t?.5*x.easeInBounce(2*t):.5*x.easeOutBounce(2*t-1)+.5}}),S=r.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)}}(),C=r.cancelAnimFrame=function(){return window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame||function(t){return window.clearTimeout(t,1e3/60)}}(),k=(r.animationLoop=function(t,e,n,r,i,o){var a=0,s=x[n]||x.linear,u=function(){a++;var n=a/e,c=s(n);t.call(o,c,n,a),r.call(o,c,n),e>a?o.animationFrame=S(u):i.apply(o)};S(u)},r.getRelativePosition=function(t){var e,n,r=t.originalEvent||t,i=t.currentTarget||t.srcElement,o=i.getBoundingClientRect();return r.touches?(e=r.touches[0].clientX-o.left,n=r.touches[0].clientY-o.top):(e=r.clientX-o.left,n=r.clientY-o.top),{x:e,y:n}},r.addEvent=function(t,e,n){t.addEventListener?t.addEventListener(e,n):t.attachEvent?t.attachEvent("on"+e,n):t["on"+e]=n}),E=r.removeEvent=function(t,e,n){t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent?t.detachEvent("on"+e,n):t["on"+e]=l},T=(r.bindEvents=function(t,e,n){t.events||(t.events={}),i(e,function(e){t.events[e]=function(){n.apply(t,arguments)},k(t.chart.canvas,e,t.events[e])})},r.unbindEvents=function(t,e){i(e,function(e,n){E(t.chart.canvas,n,e)})}),A=r.getMaximumWidth=function(t){var e=t.parentNode;return e.clientWidth},P=r.getMaximumHeight=function(t){var e=t.parentNode;return e.clientHeight},O=(r.getMaximumSize=r.getMaximumWidth,r.retinaScale=function(t){var e=t.ctx,n=t.canvas.width,r=t.canvas.height;window.devicePixelRatio&&(e.canvas.style.width=n+"px",e.canvas.style.height=r+"px",e.canvas.height=r*window.devicePixelRatio,e.canvas.width=n*window.devicePixelRatio,e.scale(window.devicePixelRatio,window.devicePixelRatio))}),j=r.clear=function(t){t.ctx.clearRect(0,0,t.width,t.height)},M=r.fontString=function(t,e,n){return e+" "+t+"px "+n},R=r.longestText=function(t,e,n){t.font=e;var r=0;return i(n,function(e){var n=t.measureText(e).width;r=n>r?n:r}),r},L=r.drawRoundedRectangle=function(t,e,n,r,i,o){t.beginPath(),t.moveTo(e+o,n),t.lineTo(e+r-o,n),t.quadraticCurveTo(e+r,n,e+r,n+o),t.lineTo(e+r,n+i-o),t.quadraticCurveTo(e+r,n+i,e+r-o,n+i),t.lineTo(e+o,n+i),t.quadraticCurveTo(e,n+i,e,n+i-o),t.lineTo(e,n+o),t.quadraticCurveTo(e,n,e+o,n),t.closePath()};n.instances={},n.Type=function(t,e,r){this.options=e,this.chart=r,this.id=f(),n.instances[this.id]=this,e.responsive&&this.resize(),this.initialize.call(this,t)},a(n.Type.prototype,{initialize:function(){return this},clear:function(){return j(this.chart),this},stop:function(){return C(this.animationFrame),this},resize:function(t){this.stop();var e=this.chart.canvas,n=A(this.chart.canvas),r=this.options.maintainAspectRatio?n/this.chart.aspectRatio:P(this.chart.canvas);return e.width=this.chart.width=n,e.height=this.chart.height=r,O(this.chart),"function"==typeof t&&t.apply(this,Array.prototype.slice.call(arguments,1)),this},reflow:l,render:function(t){return t&&this.reflow(),this.options.animation&&!t?r.animationLoop(this.draw,this.options.animationSteps,this.options.animationEasing,this.options.onAnimationProgress,this.options.onAnimationComplete,this):(this.draw(),this.options.onAnimationComplete.call(this)),this},generateLegend:function(){return w(this.options.legendTemplate,this)},destroy:function(){this.clear(),T(this,this.events);var t=this.chart.canvas;t.width=this.chart.width,t.height=this.chart.height,t.style.removeProperty?(t.style.removeProperty("width"),t.style.removeProperty("height")):(t.style.removeAttribute("width"),t.style.removeAttribute("height")),delete n.instances[this.id]},showTooltip:function(t,e){"undefined"==typeof this.activeElements&&(this.activeElements=[]);var o=function(t){var e=!1;return t.length!==this.activeElements.length?e=!0:(i(t,function(t,n){t!==this.activeElements[n]&&(e=!0)},this),e)}.call(this,t);if(o||e){if(this.activeElements=t,this.draw(),this.options.customTooltips&&this.options.customTooltips(!1),t.length>0)if(this.datasets&&this.datasets.length>1){for(var a,s,c=this.datasets.length-1;c>=0&&(a=this.datasets[c].points||this.datasets[c].bars||this.datasets[c].segments,s=u(a,t[0]),-1===s);c--);var l=[],f=[],h=function(t){var e,n,i,o,a,u=[],c=[],h=[];return r.each(this.datasets,function(t){e=t.points||t.bars||t.segments,e[s]&&e[s].hasValue()&&u.push(e[s])}),r.each(u,function(t){c.push(t.x),h.push(t.y),l.push(r.template(this.options.multiTooltipTemplate,t)),f.push({fill:t._saved.fillColor||t.fillColor,stroke:t._saved.strokeColor||t.strokeColor})},this),a=v(h),i=g(h),o=v(c),n=g(c),{x:o>this.chart.width/2?o:n,y:(a+i)/2}}.call(this,s);new n.MultiTooltip({x:h.x,y:h.y,xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,xOffset:this.options.tooltipXOffset,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,titleTextColor:this.options.tooltipTitleFontColor,titleFontFamily:this.options.tooltipTitleFontFamily,titleFontStyle:this.options.tooltipTitleFontStyle,titleFontSize:this.options.tooltipTitleFontSize,cornerRadius:this.options.tooltipCornerRadius,labels:l,legendColors:f,legendColorBackground:this.options.multiTooltipKeyBackground,title:t[0].label,chart:this.chart,ctx:this.chart.ctx,custom:this.options.customTooltips}).draw()}else i(t,function(t){var e=t.tooltipPosition();new n.Tooltip({x:Math.round(e.x),y:Math.round(e.y),xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,caretHeight:this.options.tooltipCaretSize,cornerRadius:this.options.tooltipCornerRadius,text:w(this.options.tooltipTemplate,t),chart:this.chart,custom:this.options.customTooltips}).draw()},this);return this}},toBase64Image:function(){return this.chart.canvas.toDataURL.apply(this.chart.canvas,arguments)}}),n.Type.extend=function(t){var e=this,r=function(){return e.apply(this,arguments)};if(r.prototype=o(e.prototype),a(r.prototype,t),r.extend=n.Type.extend,t.name||e.prototype.name){var i=t.name||e.prototype.name,u=n.defaults[e.prototype.name]?o(n.defaults[e.prototype.name]):{};n.defaults[i]=a(u,t.defaults),n.types[i]=r,n.prototype[i]=function(t,e){var o=s(n.defaults.global,n.defaults[i],e||{});return new r(t,o,this)}}else h("Name not provided for this chart, so it hasn't been registered");return e},n.Element=function(t){a(this,t),this.initialize.apply(this,arguments),this.save()},a(n.Element.prototype,{initialize:function(){},restore:function(t){return t?i(t,function(t){this[t]=this._saved[t]},this):a(this,this._saved),this},save:function(){return this._saved=o(this),delete this._saved._saved,this},update:function(t){return i(t,function(t,e){this._saved[e]=this[e],this[e]=t},this),this},transition:function(t,e){return i(t,function(t,n){this[n]=(t-this._saved[n])*e+this._saved[n]},this),this},tooltipPosition:function(){return{x:this.x,y:this.y}},hasValue:function(){return d(this.value)}}),n.Element.extend=c,n.Point=n.Element.extend({display:!0,inRange:function(t,e){var n=this.hitDetectionRadius+this.radius;return Math.pow(t-this.x,2)+Math.pow(e-this.y,2)<Math.pow(n,2)},draw:function(){if(this.display){var t=this.ctx;t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.closePath(),t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.fillStyle=this.fillColor,t.fill(),t.stroke()}}}),n.Arc=n.Element.extend({inRange:function(t,e){var n=r.getAngleFromPoint(this,{x:t,y:e}),i=n.angle>=this.startAngle&&n.angle<=this.endAngle,o=n.distance>=this.innerRadius&&n.distance<=this.outerRadius;return i&&o},tooltipPosition:function(){var t=this.startAngle+(this.endAngle-this.startAngle)/2,e=(this.outerRadius-this.innerRadius)/2+this.innerRadius;return{x:this.x+Math.cos(t)*e,y:this.y+Math.sin(t)*e}},draw:function(t){var e=this.ctx;e.beginPath(),e.arc(this.x,this.y,this.outerRadius,this.startAngle,this.endAngle),e.arc(this.x,this.y,this.innerRadius,this.endAngle,this.startAngle,!0),e.closePath(),e.strokeStyle=this.strokeColor,e.lineWidth=this.strokeWidth,e.fillStyle=this.fillColor,e.fill(),e.lineJoin="bevel",this.showStroke&&e.stroke()}}),n.Rectangle=n.Element.extend({draw:function(){var t=this.ctx,e=this.width/2,n=this.x-e,r=this.x+e,i=this.base-(this.base-this.y),o=this.strokeWidth/2;this.showStroke&&(n+=o,r-=o,i+=o),t.beginPath(),t.fillStyle=this.fillColor,t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.moveTo(n,this.base),t.lineTo(n,i),t.lineTo(r,i),t.lineTo(r,this.base),t.fill(),this.showStroke&&t.stroke()},height:function(){return this.base-this.y},inRange:function(t,e){return t>=this.x-this.width/2&&t<=this.x+this.width/2&&e>=this.y&&e<=this.base}}),n.Tooltip=n.Element.extend({draw:function(){var t=this.chart.ctx;t.font=M(this.fontSize,this.fontStyle,this.fontFamily),this.xAlign="center",this.yAlign="above";var e=this.caretPadding=2,n=t.measureText(this.text).width+2*this.xPadding,r=this.fontSize+2*this.yPadding,i=r+this.caretHeight+e;this.x+n/2>this.chart.width?this.xAlign="left":this.x-n/2<0&&(this.xAlign="right"),this.y-i<0&&(this.yAlign="below");var o=this.x-n/2,a=this.y-i;if(t.fillStyle=this.fillColor,this.custom)this.custom(this);else{switch(this.yAlign){case"above":t.beginPath(),t.moveTo(this.x,this.y-e),t.lineTo(this.x+this.caretHeight,this.y-(e+this.caretHeight)),t.lineTo(this.x-this.caretHeight,this.y-(e+this.caretHeight)),t.closePath(),t.fill();break;case"below":a=this.y+e+this.caretHeight,t.beginPath(),t.moveTo(this.x,this.y+e),t.lineTo(this.x+this.caretHeight,this.y+e+this.caretHeight),t.lineTo(this.x-this.caretHeight,this.y+e+this.caretHeight),t.closePath(),t.fill()}switch(this.xAlign){case"left":o=this.x-n+(this.cornerRadius+this.caretHeight);break;case"right":o=this.x-(this.cornerRadius+this.caretHeight)}L(t,o,a,n,r,this.cornerRadius),t.fill(),t.fillStyle=this.textColor,t.textAlign="center",t.textBaseline="middle",t.fillText(this.text,o+n/2,a+r/2)}}}),n.MultiTooltip=n.Element.extend({initialize:function(){this.font=M(this.fontSize,this.fontStyle,this.fontFamily),this.titleFont=M(this.titleFontSize,this.titleFontStyle,this.titleFontFamily),this.height=this.labels.length*this.fontSize+(this.labels.length-1)*(this.fontSize/2)+2*this.yPadding+1.5*this.titleFontSize,this.ctx.font=this.titleFont;var t=this.ctx.measureText(this.title).width,e=R(this.ctx,this.font,this.labels)+this.fontSize+3,n=g([e,t]);this.width=n+2*this.xPadding;var r=this.height/2;this.y-r<0?this.y=r:this.y+r>this.chart.height&&(this.y=this.chart.height-r),this.x>this.chart.width/2?this.x-=this.xOffset+this.width:this.x+=this.xOffset},getLineHeight:function(t){var e=this.y-this.height/2+this.yPadding,n=t-1;return 0===t?e+this.titleFontSize/2:e+(1.5*this.fontSize*n+this.fontSize/2)+1.5*this.titleFontSize},draw:function(){if(this.custom)this.custom(this);else{L(this.ctx,this.x,this.y-this.height/2,this.width,this.height,this.cornerRadius);var t=this.ctx;t.fillStyle=this.fillColor,t.fill(),t.closePath(),t.textAlign="left",t.textBaseline="middle",t.fillStyle=this.titleTextColor,t.font=this.titleFont,t.fillText(this.title,this.x+this.xPadding,this.getLineHeight(0)),t.font=this.font,r.each(this.labels,function(e,n){t.fillStyle=this.textColor,t.fillText(e,this.x+this.xPadding+this.fontSize+3,this.getLineHeight(n+1)),t.fillStyle=this.legendColorBackground,t.fillRect(this.x+this.xPadding,this.getLineHeight(n+1)-this.fontSize/2,this.fontSize,this.fontSize),t.fillStyle=this.legendColors[n].fill,t.fillRect(this.x+this.xPadding,this.getLineHeight(n+1)-this.fontSize/2,this.fontSize,this.fontSize)},this)}}}),n.Scale=n.Element.extend({initialize:function(){this.fit()},buildYLabels:function(){this.yLabels=[];for(var t=m(this.stepValue),e=0;e<=this.steps;e++)this.yLabels.push(w(this.templateString,{value:(this.min+e*this.stepValue).toFixed(t)}));this.yLabelWidth=this.display&&this.showLabels?R(this.ctx,this.font,this.yLabels):0},addXLabel:function(t){this.xLabels.push(t),this.valuesCount++,this.fit()},removeXLabel:function(){this.xLabels.shift(),this.valuesCount--,this.fit()},fit:function(){this.startPoint=this.display?this.fontSize:0,this.endPoint=this.display?this.height-1.5*this.fontSize-5:this.height,this.startPoint+=this.padding,this.endPoint-=this.padding;var t,e=this.endPoint-this.startPoint;for(this.calculateYRange(e),this.buildYLabels(),this.calculateXLabelRotation();e>this.endPoint-this.startPoint;)e=this.endPoint-this.startPoint,t=this.yLabelWidth,this.calculateYRange(e),this.buildYLabels(),t<this.yLabelWidth&&this.calculateXLabelRotation()},calculateXLabelRotation:function(){this.ctx.font=this.font;var t,e,n=this.ctx.measureText(this.xLabels[0]).width,r=this.ctx.measureText(this.xLabels[this.xLabels.length-1]).width;if(this.xScalePaddingRight=r/2+3,this.xScalePaddingLeft=n/2>this.yLabelWidth+10?n/2:this.yLabelWidth+10,this.xLabelRotation=0,this.display){var i,o=R(this.ctx,this.font,this.xLabels);this.xLabelWidth=o;for(var a=Math.floor(this.calculateX(1)-this.calculateX(0))-6;this.xLabelWidth>a&&0===this.xLabelRotation||this.xLabelWidth>a&&this.xLabelRotation<=90&&this.xLabelRotation>0;)i=Math.cos(y(this.xLabelRotation)),t=i*n,e=i*r,t+this.fontSize/2>this.yLabelWidth+8&&(this.xScalePaddingLeft=t+this.fontSize/2),this.xScalePaddingRight=this.fontSize/2,this.xLabelRotation++,this.xLabelWidth=i*o;this.xLabelRotation>0&&(this.endPoint-=Math.sin(y(this.xLabelRotation))*o+3)}else this.xLabelWidth=0,this.xScalePaddingRight=this.padding,this.xScalePaddingLeft=this.padding},calculateYRange:l,drawingArea:function(){return this.startPoint-this.endPoint},calculateY:function(t){var e=this.drawingArea()/(this.min-this.max);return this.endPoint-e*(t-this.min)},calculateX:function(t){var e=(this.xLabelRotation>0,this.width-(this.xScalePaddingLeft+this.xScalePaddingRight)),n=e/Math.max(this.valuesCount-(this.offsetGridLines?0:1),1),r=n*t+this.xScalePaddingLeft;return this.offsetGridLines&&(r+=n/2),Math.round(r)},update:function(t){r.extend(this,t),this.fit()},draw:function(){var t=this.ctx,e=(this.endPoint-this.startPoint)/this.steps,n=Math.round(this.xScalePaddingLeft);this.display&&(t.fillStyle=this.textColor,t.font=this.font,i(this.yLabels,function(i,o){var a=this.endPoint-e*o,s=Math.round(a),u=this.showHorizontalLines;t.textAlign="right",t.textBaseline="middle",this.showLabels&&t.fillText(i,n-10,a),0!==o||u||(u=!0),u&&t.beginPath(),o>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),s+=r.aliasPixel(t.lineWidth),u&&(t.moveTo(n,s),t.lineTo(this.width,s),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(n-5,s),t.lineTo(n,s),t.stroke(),t.closePath()},this),i(this.xLabels,function(e,n){var r=this.calculateX(n)+$(this.lineWidth),i=this.calculateX(n-(this.offsetGridLines?.5:0))+$(this.lineWidth),o=this.xLabelRotation>0,a=this.showVerticalLines;0!==n||a||(a=!0),a&&t.beginPath(),n>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),a&&(t.moveTo(i,this.endPoint),t.lineTo(i,this.startPoint-3),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(i,this.endPoint),t.lineTo(i,this.endPoint+5),t.stroke(),t.closePath(),t.save(),t.translate(r,o?this.endPoint+12:this.endPoint+8),t.rotate(-1*y(this.xLabelRotation)),t.font=this.font,t.textAlign=o?"right":"center",t.textBaseline=o?"middle":"top",t.fillText(e,0,0),t.restore()},this))}}),n.RadialScale=n.Element.extend({initialize:function(){this.size=v([this.height,this.width]),this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2},calculateCenterOffset:function(t){var e=this.drawingArea/(this.max-this.min);return(t-this.min)*e},update:function(){this.lineArc?this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2:this.setScaleSize(),this.buildYLabels()},buildYLabels:function(){this.yLabels=[];for(var t=m(this.stepValue),e=0;e<=this.steps;e++)this.yLabels.push(w(this.templateString,{value:(this.min+e*this.stepValue).toFixed(t)}))},getCircumference:function(){return 2*Math.PI/this.valuesCount},setScaleSize:function(){var t,e,n,r,i,o,a,s,u,c,l,f,h=v([this.height/2-this.pointLabelFontSize-5,this.width/2]),p=this.width,g=0;for(this.ctx.font=M(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),e=0;e<this.valuesCount;e++)t=this.getPointPosition(e,h),n=this.ctx.measureText(w(this.templateString,{value:this.labels[e]})).width+5,0===e||e===this.valuesCount/2?(r=n/2,t.x+r>p&&(p=t.x+r,i=e),t.x-r<g&&(g=t.x-r,a=e)):e<this.valuesCount/2?t.x+n>p&&(p=t.x+n,i=e):e>this.valuesCount/2&&t.x-n<g&&(g=t.x-n,a=e);u=g,c=Math.ceil(p-this.width),o=this.getIndexAngle(i),s=this.getIndexAngle(a),l=c/Math.sin(o+Math.PI/2),f=u/Math.sin(s+Math.PI/2),l=d(l)?l:0,f=d(f)?f:0,this.drawingArea=h-(f+l)/2,this.setCenterPoint(f,l)},setCenterPoint:function(t,e){var n=this.width-e-this.drawingArea,r=t+this.drawingArea;this.xCenter=(r+n)/2,this.yCenter=this.height/2},getIndexAngle:function(t){var e=2*Math.PI/this.valuesCount;return t*e-Math.PI/2},getPointPosition:function(t,e){var n=this.getIndexAngle(t);return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter}},draw:function(){if(this.display){var t=this.ctx;if(i(this.yLabels,function(e,n){if(n>0){var r,i=n*(this.drawingArea/this.steps),o=this.yCenter-i;if(this.lineWidth>0)if(t.strokeStyle=this.lineColor,t.lineWidth=this.lineWidth,this.lineArc)t.beginPath(),t.arc(this.xCenter,this.yCenter,i,0,2*Math.PI),t.closePath(),t.stroke();else{t.beginPath();for(var a=0;a<this.valuesCount;a++)r=this.getPointPosition(a,this.calculateCenterOffset(this.min+n*this.stepValue)),0===a?t.moveTo(r.x,r.y):t.lineTo(r.x,r.y);t.closePath(),t.stroke()}if(this.showLabels){if(t.font=M(this.fontSize,this.fontStyle,this.fontFamily),this.showLabelBackdrop){var s=t.measureText(e).width;t.fillStyle=this.backdropColor,t.fillRect(this.xCenter-s/2-this.backdropPaddingX,o-this.fontSize/2-this.backdropPaddingY,s+2*this.backdropPaddingX,this.fontSize+2*this.backdropPaddingY)}t.textAlign="center",t.textBaseline="middle",t.fillStyle=this.fontColor,t.fillText(e,this.xCenter,o)}}},this),!this.lineArc){t.lineWidth=this.angleLineWidth,t.strokeStyle=this.angleLineColor;for(var e=this.valuesCount-1;e>=0;e--){if(this.angleLineWidth>0){var n=this.getPointPosition(e,this.calculateCenterOffset(this.max));t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(n.x,n.y),t.stroke(),t.closePath()}var r=this.getPointPosition(e,this.calculateCenterOffset(this.max)+5);t.font=M(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),t.fillStyle=this.pointLabelFontColor;var o=this.labels.length,a=this.labels.length/2,s=a/2,u=s>e||e>o-s,c=e===s||e===o-s;0===e?t.textAlign="center":e===a?t.textAlign="center":a>e?t.textAlign="left":t.textAlign="right",c?t.textBaseline="middle":u?t.textBaseline="bottom":t.textBaseline="top",t.fillText(this.labels[e],r.x,r.y)}}}}}),r.addEvent(window,"resize",function(){var t;return function(){clearTimeout(t),t=setTimeout(function(){i(n.instances,function(t){t.options.responsive&&t.resize(t.render,!0)})},50)}}()),p?define(function(){return n}):"object"==typeof module&&module.exports&&(module.exports=n),t.Chart=n,n.noConflict=function(){return t.Chart=e,n}}.call(this),function(){"use strict";var t=this,e=t.Chart,n=e.helpers,r={scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"Bar",defaults:r,initialize:function(t){var r=this.options;this.ScaleClass=e.Scale.extend({offsetGridLines:!0,calculateBarX:function(t,e,n){var i=this.calculateBaseWidth(),o=this.calculateX(n)-i/2,a=this.calculateBarWidth(t);return o+a*e+e*r.barDatasetSpacing+a/2},calculateBaseWidth:function(){return this.calculateX(1)-this.calculateX(0)-2*r.barValueSpacing},calculateBarWidth:function(t){var e=this.calculateBaseWidth()-(t-1)*r.barDatasetSpacing;return e/t}}),this.datasets=[],this.options.showTooltips&&n.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getBarsAtEvent(t):[];this.eachBars(function(t){t.restore(["fillColor","strokeColor"])}),n.each(e,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(e)}),this.BarClass=e.Rectangle.extend({strokeWidth:this.options.barStrokeWidth,showStroke:this.options.barShowStroke,ctx:this.chart.ctx}),n.each(t.datasets,function(e,r){var i={label:e.label||null,fillColor:e.fillColor,strokeColor:e.strokeColor,bars:[]};this.datasets.push(i),n.each(e.data,function(n,r){i.bars.push(new this.BarClass({value:n,label:t.labels[r],datasetLabel:e.label,strokeColor:e.strokeColor,fillColor:e.fillColor,highlightFill:e.highlightFill||e.fillColor,highlightStroke:e.highlightStroke||e.strokeColor}))},this)},this),this.buildScale(t.labels),this.BarClass.prototype.base=this.scale.endPoint,this.eachBars(function(t,e,r){n.extend(t,{width:this.scale.calculateBarWidth(this.datasets.length),x:this.scale.calculateBarX(this.datasets.length,r,e),y:this.scale.endPoint}),t.save()},this),this.render()},update:function(){this.scale.update(),n.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachBars(function(t){t.save()}),this.render()},eachBars:function(t){n.each(this.datasets,function(e,r){n.each(e.bars,t,this,r)},this)},getBarsAtEvent:function(t){for(var e,r=[],i=n.getRelativePosition(t),o=function(t){r.push(t.bars[e])},a=0;a<this.datasets.length;a++)for(e=0;e<this.datasets[a].bars.length;e++)if(this.datasets[a].bars[e].inRange(i.x,i.y))return n.each(this.datasets,o),r;return r},buildScale:function(t){var e=this,r=function(){var t=[];return e.eachBars(function(e){t.push(e.value)}),t},i={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var e=n.calculateScaleRange(r(),t,this.fontSize,this.beginAtZero,this.integersOnly);n.extend(this,e)},xLabels:t,font:n.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.barShowStroke?this.options.barStrokeWidth:0,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&n.extend(i,{calculateYRange:n.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new this.ScaleClass(i)},addData:function(t,e){n.each(t,function(t,n){this.datasets[n].bars.push(new this.BarClass({value:t,label:e,x:this.scale.calculateBarX(this.datasets.length,n,this.scale.valuesCount+1),y:this.scale.endPoint,width:this.scale.calculateBarWidth(this.datasets.length),base:this.scale.endPoint,strokeColor:this.datasets[n].strokeColor,fillColor:this.datasets[n].fillColor}))},this),this.scale.addXLabel(e),this.update()},removeData:function(){this.scale.removeXLabel(),n.each(this.datasets,function(t){t.bars.shift()},this),this.update()},reflow:function(){n.extend(this.BarClass.prototype,{y:this.scale.endPoint,base:this.scale.endPoint});var t=n.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var e=t||1;this.clear();this.chart.ctx;this.scale.draw(e),n.each(this.datasets,function(t,r){n.each(t.bars,function(t,n){t.hasValue()&&(t.base=this.scale.endPoint,t.transition({x:this.scale.calculateBarX(this.datasets.length,r,n),y:this.scale.calculateY(t.value),width:this.scale.calculateBarWidth(this.datasets.length)},e).draw())},this)},this)}})}.call(this),function(){"use strict";var t=this,e=t.Chart,n=e.helpers,r={segmentShowStroke:!0,
segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"Doughnut",defaults:r,initialize:function(t){this.segments=[],this.outerRadius=(n.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,this.SegmentArc=e.Arc.extend({ctx:this.chart.ctx,x:this.chart.width/2,y:this.chart.height/2}),this.options.showTooltips&&n.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];n.each(this.segments,function(t){t.restore(["fillColor"])}),n.each(e,function(t){t.fillColor=t.highlightColor}),this.showTooltip(e)}),this.calculateTotal(t),n.each(t,function(t,e){this.addData(t,e,!0)},this),this.render()},getSegmentsAtEvent:function(t){var e=[],r=n.getRelativePosition(t);return n.each(this.segments,function(t){t.inRange(r.x,r.y)&&e.push(t)},this),e},addData:function(t,e,n){var r=e||this.segments.length;this.segments.splice(r,0,new this.SegmentArc({value:t.value,outerRadius:this.options.animateScale?0:this.outerRadius,innerRadius:this.options.animateScale?0:this.outerRadius/100*this.options.percentageInnerCutout,fillColor:t.color,highlightColor:t.highlight||t.color,showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,startAngle:1.5*Math.PI,circumference:this.options.animateRotate?0:this.calculateCircumference(t.value),label:t.label})),n||(this.reflow(),this.update())},calculateCircumference:function(t){return 2*Math.PI*(Math.abs(t)/this.total)},calculateTotal:function(t){this.total=0,n.each(t,function(t){this.total+=Math.abs(t.value)},this)},update:function(){this.calculateTotal(this.segments),n.each(this.activeElements,function(t){t.restore(["fillColor"])}),n.each(this.segments,function(t){t.save()}),this.render()},removeData:function(t){var e=n.isNumber(t)?t:this.segments.length-1;this.segments.splice(e,1),this.reflow(),this.update()},reflow:function(){n.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.outerRadius=(n.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,n.each(this.segments,function(t){t.update({outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout})},this)},draw:function(t){var e=t?t:1;this.clear(),n.each(this.segments,function(t,n){t.transition({circumference:this.calculateCircumference(t.value),outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout},e),t.endAngle=t.startAngle+t.circumference,t.draw(),0===n&&(t.startAngle=1.5*Math.PI),n<this.segments.length-1&&(this.segments[n+1].startAngle=t.endAngle)},this)}}),e.types.Doughnut.extend({name:"Pie",defaults:n.merge(r,{percentageInnerCutout:0})})}.call(this),function(){"use strict";var t=this,e=t.Chart,n=e.helpers,r={scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,bezierCurve:!0,bezierCurveTension:.4,pointDot:!0,pointDotRadius:4,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"Line",defaults:r,initialize:function(t){this.PointClass=e.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx,inRange:function(t){return Math.pow(t-this.x,2)<Math.pow(this.radius+this.hitDetectionRadius,2)}}),this.datasets=[],this.options.showTooltips&&n.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),n.each(e,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(e)}),n.each(t.datasets,function(e){var r={label:e.label||null,fillColor:e.fillColor,strokeColor:e.strokeColor,pointColor:e.pointColor,pointStrokeColor:e.pointStrokeColor,points:[]};this.datasets.push(r),n.each(e.data,function(n,i){r.points.push(new this.PointClass({value:n,label:t.labels[i],datasetLabel:e.label,strokeColor:e.pointStrokeColor,fillColor:e.pointColor,highlightFill:e.pointHighlightFill||e.pointColor,highlightStroke:e.pointHighlightStroke||e.pointStrokeColor}))},this),this.buildScale(t.labels),this.eachPoints(function(t,e){n.extend(t,{x:this.scale.calculateX(e),y:this.scale.endPoint}),t.save()},this)},this),this.render()},update:function(){this.scale.update(),n.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachPoints(function(t){t.save()}),this.render()},eachPoints:function(t){n.each(this.datasets,function(e){n.each(e.points,t,this)},this)},getPointsAtEvent:function(t){var e=[],r=n.getRelativePosition(t);return n.each(this.datasets,function(t){n.each(t.points,function(t){t.inRange(r.x,r.y)&&e.push(t)})},this),e},buildScale:function(t){var r=this,i=function(){var t=[];return r.eachPoints(function(e){t.push(e.value)}),t},o={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var e=n.calculateScaleRange(i(),t,this.fontSize,this.beginAtZero,this.integersOnly);n.extend(this,e)},xLabels:t,font:n.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.pointDotRadius+this.options.pointDotStrokeWidth,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&n.extend(o,{calculateYRange:n.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new e.Scale(o)},addData:function(t,e){n.each(t,function(t,n){this.datasets[n].points.push(new this.PointClass({value:t,label:e,x:this.scale.calculateX(this.scale.valuesCount+1),y:this.scale.endPoint,strokeColor:this.datasets[n].pointStrokeColor,fillColor:this.datasets[n].pointColor}))},this),this.scale.addXLabel(e),this.update()},removeData:function(){this.scale.removeXLabel(),n.each(this.datasets,function(t){t.points.shift()},this),this.update()},reflow:function(){var t=n.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var e=t||1;this.clear();var r=this.chart.ctx,i=function(t){return null!==t.value},o=function(t,e,r){return n.findNextWhere(e,i,r)||t},a=function(t,e,r){return n.findPreviousWhere(e,i,r)||t};this.scale.draw(e),n.each(this.datasets,function(t){var s=n.where(t.points,i);n.each(t.points,function(t,n){t.hasValue()&&t.transition({y:this.scale.calculateY(t.value),x:this.scale.calculateX(n)},e)},this),this.options.bezierCurve&&n.each(s,function(t,e){var r=e>0&&e<s.length-1?this.options.bezierCurveTension:0;t.controlPoints=n.splineCurve(a(t,s,e),t,o(t,s,e),r),t.controlPoints.outer.y>this.scale.endPoint?t.controlPoints.outer.y=this.scale.endPoint:t.controlPoints.outer.y<this.scale.startPoint&&(t.controlPoints.outer.y=this.scale.startPoint),t.controlPoints.inner.y>this.scale.endPoint?t.controlPoints.inner.y=this.scale.endPoint:t.controlPoints.inner.y<this.scale.startPoint&&(t.controlPoints.inner.y=this.scale.startPoint)},this),r.lineWidth=this.options.datasetStrokeWidth,r.strokeStyle=t.strokeColor,r.beginPath(),n.each(s,function(t,e){if(0===e)r.moveTo(t.x,t.y);else if(this.options.bezierCurve){var n=a(t,s,e);r.bezierCurveTo(n.controlPoints.outer.x,n.controlPoints.outer.y,t.controlPoints.inner.x,t.controlPoints.inner.y,t.x,t.y)}else r.lineTo(t.x,t.y)},this),r.stroke(),this.options.datasetFill&&s.length>0&&(r.lineTo(s[s.length-1].x,this.scale.endPoint),r.lineTo(s[0].x,this.scale.endPoint),r.fillStyle=t.fillColor,r.closePath(),r.fill()),n.each(s,function(t){t.draw()})},this)}})}.call(this),function(){"use strict";var t=this,e=t.Chart,n=e.helpers,r={scaleShowLabelBackdrop:!0,scaleBackdropColor:"rgba(255,255,255,0.75)",scaleBeginAtZero:!0,scaleBackdropPaddingY:2,scaleBackdropPaddingX:2,scaleShowLine:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'};e.Type.extend({name:"PolarArea",defaults:r,initialize:function(t){this.segments=[],this.SegmentArc=e.Arc.extend({showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,ctx:this.chart.ctx,innerRadius:0,x:this.chart.width/2,y:this.chart.height/2}),this.scale=new e.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,lineArc:!0,width:this.chart.width,height:this.chart.height,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,valuesCount:t.length}),this.updateScaleRange(t),this.scale.update(),n.each(t,function(t,e){this.addData(t,e,!0)},this),this.options.showTooltips&&n.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];n.each(this.segments,function(t){t.restore(["fillColor"])}),n.each(e,function(t){t.fillColor=t.highlightColor}),this.showTooltip(e)}),this.render()},getSegmentsAtEvent:function(t){var e=[],r=n.getRelativePosition(t);return n.each(this.segments,function(t){t.inRange(r.x,r.y)&&e.push(t)},this),e},addData:function(t,e,n){var r=e||this.segments.length;this.segments.splice(r,0,new this.SegmentArc({fillColor:t.color,highlightColor:t.highlight||t.color,label:t.label,value:t.value,outerRadius:this.options.animateScale?0:this.scale.calculateCenterOffset(t.value),circumference:this.options.animateRotate?0:this.scale.getCircumference(),startAngle:1.5*Math.PI})),n||(this.reflow(),this.update())},removeData:function(t){var e=n.isNumber(t)?t:this.segments.length-1;this.segments.splice(e,1),this.reflow(),this.update()},calculateTotal:function(t){this.total=0,n.each(t,function(t){this.total+=t.value},this),this.scale.valuesCount=this.segments.length},updateScaleRange:function(t){var e=[];n.each(t,function(t){e.push(t.value)});var r=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:n.calculateScaleRange(e,n.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);n.extend(this.scale,r,{size:n.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2})},update:function(){this.calculateTotal(this.segments),n.each(this.segments,function(t){t.save()}),this.reflow(),this.render()},reflow:function(){n.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.updateScaleRange(this.segments),this.scale.update(),n.extend(this.scale,{xCenter:this.chart.width/2,yCenter:this.chart.height/2}),n.each(this.segments,function(t){t.update({outerRadius:this.scale.calculateCenterOffset(t.value)})},this)},draw:function(t){var e=t||1;this.clear(),n.each(this.segments,function(t,n){t.transition({circumference:this.scale.getCircumference(),outerRadius:this.scale.calculateCenterOffset(t.value)},e),t.endAngle=t.startAngle+t.circumference,0===n&&(t.startAngle=1.5*Math.PI),n<this.segments.length-1&&(this.segments[n+1].startAngle=t.endAngle),t.draw()},this),this.scale.draw()}})}.call(this),function(){"use strict";var t=this,e=t.Chart,n=e.helpers;e.Type.extend({name:"Radar",defaults:{scaleShowLine:!0,angleShowLineOut:!0,scaleShowLabels:!1,scaleBeginAtZero:!0,angleLineColor:"rgba(0,0,0,.1)",angleLineWidth:1,pointLabelFontFamily:"'Arial'",pointLabelFontStyle:"normal",pointLabelFontSize:10,pointLabelFontColor:"#666",pointDot:!0,pointDotRadius:3,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'},initialize:function(t){this.PointClass=e.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx}),this.datasets=[],this.buildScale(t),this.options.showTooltips&&n.bindEvents(this,this.options.tooltipEvents,function(t){var e="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),n.each(e,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(e)}),n.each(t.datasets,function(e){var r={label:e.label||null,fillColor:e.fillColor,strokeColor:e.strokeColor,pointColor:e.pointColor,pointStrokeColor:e.pointStrokeColor,points:[]};this.datasets.push(r),n.each(e.data,function(n,i){var o;this.scale.animation||(o=this.scale.getPointPosition(i,this.scale.calculateCenterOffset(n))),r.points.push(new this.PointClass({value:n,label:t.labels[i],datasetLabel:e.label,x:this.options.animation?this.scale.xCenter:o.x,y:this.options.animation?this.scale.yCenter:o.y,strokeColor:e.pointStrokeColor,fillColor:e.pointColor,highlightFill:e.pointHighlightFill||e.pointColor,highlightStroke:e.pointHighlightStroke||e.pointStrokeColor}))},this)},this),this.render()},eachPoints:function(t){n.each(this.datasets,function(e){n.each(e.points,t,this)},this)},getPointsAtEvent:function(t){var e=n.getRelativePosition(t),r=n.getAngleFromPoint({x:this.scale.xCenter,y:this.scale.yCenter},e),i=2*Math.PI/this.scale.valuesCount,o=Math.round((r.angle-1.5*Math.PI)/i),a=[];return(o>=this.scale.valuesCount||0>o)&&(o=0),r.distance<=this.scale.drawingArea&&n.each(this.datasets,function(t){a.push(t.points[o])}),a},buildScale:function(t){this.scale=new e.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,angleLineColor:this.options.angleLineColor,angleLineWidth:this.options.angleShowLineOut?this.options.angleLineWidth:0,pointLabelFontColor:this.options.pointLabelFontColor,pointLabelFontSize:this.options.pointLabelFontSize,pointLabelFontFamily:this.options.pointLabelFontFamily,pointLabelFontStyle:this.options.pointLabelFontStyle,height:this.chart.height,width:this.chart.width,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,labels:t.labels,valuesCount:t.datasets[0].data.length}),this.scale.setScaleSize(),this.updateScaleRange(t.datasets),this.scale.buildYLabels()},updateScaleRange:function(t){var e=function(){var e=[];return n.each(t,function(t){t.data?e=e.concat(t.data):n.each(t.points,function(t){e.push(t.value)})}),e}(),r=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:n.calculateScaleRange(e,n.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);n.extend(this.scale,r)},addData:function(t,e){this.scale.valuesCount++,n.each(t,function(t,n){var r=this.scale.getPointPosition(this.scale.valuesCount,this.scale.calculateCenterOffset(t));this.datasets[n].points.push(new this.PointClass({value:t,label:e,x:r.x,y:r.y,strokeColor:this.datasets[n].pointStrokeColor,fillColor:this.datasets[n].pointColor}))},this),this.scale.labels.push(e),this.reflow(),this.update()},removeData:function(){this.scale.valuesCount--,this.scale.labels.shift(),n.each(this.datasets,function(t){t.points.shift()},this),this.reflow(),this.update()},update:function(){this.eachPoints(function(t){t.save()}),this.reflow(),this.render()},reflow:function(){n.extend(this.scale,{width:this.chart.width,height:this.chart.height,size:n.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2}),this.updateScaleRange(this.datasets),this.scale.setScaleSize(),this.scale.buildYLabels()},draw:function(t){var e=t||1,r=this.chart.ctx;this.clear(),this.scale.draw(),n.each(this.datasets,function(t){n.each(t.points,function(t,n){t.hasValue()&&t.transition(this.scale.getPointPosition(n,this.scale.calculateCenterOffset(t.value)),e)},this),r.lineWidth=this.options.datasetStrokeWidth,r.strokeStyle=t.strokeColor,r.beginPath(),n.each(t.points,function(t,e){0===e?r.moveTo(t.x,t.y):r.lineTo(t.x,t.y)},this),r.closePath(),r.stroke(),r.fillStyle=t.fillColor,r.fill(),n.each(t.points,function(t){t.hasValue()&&t.draw()})},this)}})}.call(this),function(t,e,n){function r(e,n){if(t.isArray(e)){for(var r=e.length-1;r>=0;r--){var i=e[r];"string"===t.type(i)&&u.transports[i]||(n.log("Invalid transport: "+i+", removing it from the transports list."),e.splice(r,1))}0===e.length&&(n.log("No transports remain within the specified transport array."),e=null)}else if(u.transports[e]||"auto"===e){if("auto"===e&&u._.ieVersion<=8)return["longPolling"]}else n.log("Invalid transport: "+e.toString()+"."),e=null;return e}function i(t){return"http:"===t?80:"https:"===t?443:void 0}function o(t,e){return e.match(/:\d+$/)?e:e+":"+i(t)}function a(e,n){var r=this,i=[];r.tryBuffer=function(n){return e.state===t.signalR.connectionState.connecting?(i.push(n),!0):!1},r.drain=function(){if(e.state===t.signalR.connectionState.connected)for(;i.length>0;)n(i.shift())},r.clear=function(){i=[]}}var s={nojQuery:"jQuery was not found. Please ensure jQuery is referenced before the SignalR client JavaScript file.",noTransportOnInit:"No transport could be initialized successfully. Try specifying a different transport or none at all for auto initialization.",errorOnNegotiate:"Error during negotiation request.",stoppedWhileLoading:"The connection was stopped during page load.",stoppedWhileNegotiating:"The connection was stopped during the negotiate request.",errorParsingNegotiateResponse:"Error parsing negotiate response.",errorDuringStartRequest:"Error during start request. Stopping the connection.",stoppedDuringStartRequest:"The connection was stopped during the start request.",errorParsingStartResponse:"Error parsing start response: '{0}'. Stopping the connection.",invalidStartResponse:"Invalid start response: '{0}'. Stopping the connection.",protocolIncompatible:"You are using a version of the client that isn't compatible with the server. Client version {0}, server version {1}.",sendFailed:"Send failed.",parseFailed:"Failed at parsing response: {0}",longPollFailed:"Long polling request failed.",eventSourceFailedToConnect:"EventSource failed to connect.",eventSourceError:"Error raised by EventSource",webSocketClosed:"WebSocket closed.",pingServerFailedInvalidResponse:"Invalid ping response when pinging server: '{0}'.",pingServerFailed:"Failed to ping server.",pingServerFailedStatusCode:"Failed to ping server.  Server responded with status code {0}, stopping the connection.",pingServerFailedParse:"Failed to parse ping server response, stopping the connection.",noConnectionTransport:"Connection is in an invalid state, there is no transport active.",webSocketsInvalidState:"The Web Socket transport is in an invalid state, transitioning into reconnecting.",reconnectTimeout:"Couldn't reconnect within the configured timeout of {0} ms, disconnecting.",reconnectWindowTimeout:"The client has been inactive since {0} and it has exceeded the inactivity timeout of {1} ms. Stopping the connection."};if("function"!=typeof t)throw new Error(s.nojQuery);var u,c,l="complete"===e.document.readyState,f=t(e),h="__Negotiate Aborted__",p={onStart:"onStart",onStarting:"onStarting",onReceived:"onReceived",onError:"onError",onConnectionSlow:"onConnectionSlow",onReconnecting:"onReconnecting",onReconnect:"onReconnect",onStateChanged:"onStateChanged",onDisconnect:"onDisconnect"},d={processData:!0,timeout:null,async:!0,global:!1,cache:!1},g=function(t,n){if(n!==!1){var r;"undefined"!=typeof e.console&&(r="["+(new Date).toTimeString()+"] SignalR: "+t,e.console.debug?e.console.debug(r):e.console.log&&e.console.log(r))}},v=function(e,n,r){return n===e.state?(e.state=r,t(e).triggerHandler(p.onStateChanged,[{oldState:n,newState:r}]),!0):!1},m=function(t){return t.state===u.connectionState.disconnected},y=function(t){return t._.keepAliveData.activated&&t.transport.supportsKeepAlive(t)},$=function(n){var r,i;n._.configuredStopReconnectingTimeout||(i=function(e){var n=u._.format(u.resources.reconnectTimeout,e.disconnectTimeout);e.log(n),t(e).triggerHandler(p.onError,[u._.error(n,"TimeoutException")]),e.stop(!1,!1)},n.reconnecting(function(){var t=this;t.state===u.connectionState.reconnecting&&(r=e.setTimeout(function(){i(t)},t.disconnectTimeout))}),n.stateChanged(function(t){t.oldState===u.connectionState.reconnecting&&e.clearTimeout(r)}),n._.configuredStopReconnectingTimeout=!0)};u=function(t,e,n){return new u.fn.init(t,e,n)},u._={defaultContentType:"application/x-www-form-urlencoded; charset=UTF-8",ieVersion:function(){var t,n;return"Microsoft Internet Explorer"===e.navigator.appName&&(n=/MSIE ([0-9]+\.[0-9]+)/.exec(e.navigator.userAgent),n&&(t=e.parseFloat(n[1]))),t}(),error:function(t,e,n){var r=new Error(t);return r.source=e,"undefined"!=typeof n&&(r.context=n),r},transportError:function(t,e,r,i){var o=this.error(t,r,i);return o.transport=e?e.name:n,o},format:function(){for(var t=arguments[0],e=0;e<arguments.length-1;e++)t=t.replace("{"+e+"}",arguments[e+1]);return t},firefoxMajorVersion:function(t){var e=t.match(/Firefox\/(\d+)/);return!e||!e.length||e.length<2?0:parseInt(e[1],10)},configurePingInterval:function(n){var r=n._.config,i=function(e){t(n).triggerHandler(p.onError,[e])};r&&!n._.pingIntervalId&&r.pingInterval&&(n._.pingIntervalId=e.setInterval(function(){u.transports._logic.pingServer(n).fail(i)},r.pingInterval))}},u.events=p,u.resources=s,u.ajaxDefaults=d,u.changeState=v,u.isDisconnecting=m,u.connectionState={connecting:0,connected:1,reconnecting:2,disconnected:4},u.hub={start:function(){throw new Error("SignalR: Error loading hubs. Ensure your hubs reference is correct, e.g. <script src='/signalr/js'></script>.")}},f.load(function(){l=!0}),u.fn=u.prototype={init:function(e,n,r){var i=t(this);this.url=e,this.qs=n,this.lastError=null,this._={keepAliveData:{},connectingMessageBuffer:new a(this,function(t){i.triggerHandler(p.onReceived,[t])}),lastMessageAt:(new Date).getTime(),lastActiveAt:(new Date).getTime(),beatInterval:5e3,beatHandle:null,totalTransportConnectTimeout:0},"boolean"==typeof r&&(this.logging=r)},_parseResponse:function(t){var e=this;return t&&"string"==typeof t?e.json.parse(t):t},_originalJson:e.JSON,json:e.JSON,isCrossDomain:function(n,r){var i;return n=t.trim(n),r=r||e.location,0!==n.indexOf("http")?!1:(i=e.document.createElement("a"),i.href=n,i.protocol+o(i.protocol,i.host)!==r.protocol+o(r.protocol,r.host))},ajaxDataType:"text",contentType:"application/json; charset=UTF-8",logging:!1,state:u.connectionState.disconnected,clientProtocol:"1.5",reconnectDelay:2e3,transportConnectTimeout:0,disconnectTimeout:3e4,reconnectWindow:3e4,keepAliveWarnAt:2/3,start:function(n,i){var o,a=this,c={pingInterval:3e5,waitForPageLoad:!0,transport:"auto",jsonp:!1},d=a._deferral||t.Deferred(),g=e.document.createElement("a");if(a.lastError=null,a._deferral=d,!a.json)throw new Error("SignalR: No JSON parser found. Please ensure json2.js is referenced before the SignalR.js file if you need to support clients without native JSON parsing support, e.g. IE<8.");if("function"===t.type(n)?i=n:"object"===t.type(n)&&(t.extend(c,n),"function"===t.type(c.callback)&&(i=c.callback)),c.transport=r(c.transport,a),!c.transport)throw new Error("SignalR: Invalid transport(s) specified, aborting start.");if(a._.config=c,!l&&c.waitForPageLoad===!0)return a._.deferredStartHandler=function(){a.start(n,i)},f.bind("load",a._.deferredStartHandler),d.promise();if(a.state===u.connectionState.connecting)return d.promise();if(v(a,u.connectionState.disconnected,u.connectionState.connecting)===!1)return d.resolve(a),d.promise();$(a),g.href=a.url,g.protocol&&":"!==g.protocol?(a.protocol=g.protocol,a.host=g.host):(a.protocol=e.document.location.protocol,a.host=g.host||e.document.location.host),a.baseUrl=a.protocol+"//"+a.host,a.wsProtocol="https:"===a.protocol?"wss://":"ws://","auto"===c.transport&&c.jsonp===!0&&(c.transport="longPolling"),0===a.url.indexOf("//")&&(a.url=e.location.protocol+a.url,a.log("Protocol relative URL detected, normalizing it to '"+a.url+"'.")),this.isCrossDomain(a.url)&&(a.log("Auto detected cross domain url."),"auto"===c.transport&&(c.transport=["webSockets","serverSentEvents","longPolling"]),"undefined"==typeof c.withCredentials&&(c.withCredentials=!0),c.jsonp||(c.jsonp=!t.support.cors,c.jsonp&&a.log("Using jsonp because this browser doesn't support CORS.")),a.contentType=u._.defaultContentType),a.withCredentials=c.withCredentials,a.ajaxDataType=c.jsonp?"jsonp":"text",t(a).bind(p.onStart,function(e,n){"function"===t.type(i)&&i.call(a),d.resolve(a)}),a._.initHandler=u.transports._logic.initHandler(a),o=function(n,r){var i=u._.error(s.noTransportOnInit);if(r=r||0,r>=n.length)return 0===r?a.log("No transports supported by the server were selected."):1===r?a.log("No fallback transports were selected."):a.log("Fallback transports exhausted."),t(a).triggerHandler(p.onError,[i]),d.reject(i),void a.stop();if(a.state!==u.connectionState.disconnected){var c=n[r],l=u.transports[c],h=function(){o(n,r+1)};a.transport=l;try{a._.initHandler.start(l,function(){var n=u._.firefoxMajorVersion(e.navigator.userAgent)>=11,r=!!a.withCredentials&&n;a.log("The start request succeeded. Transitioning to the connected state."),y(a)&&u.transports._logic.monitorKeepAlive(a),u.transports._logic.startHeartbeat(a),u._.configurePingInterval(a),v(a,u.connectionState.connecting,u.connectionState.connected)||a.log("WARNING! The connection was not in the connecting state."),a._.connectingMessageBuffer.drain(),t(a).triggerHandler(p.onStart),f.bind("unload",function(){a.log("Window unloading, stopping the connection."),a.stop(r)}),n&&f.bind("beforeunload",function(){e.setTimeout(function(){a.stop(r)},0)})},h)}catch(g){a.log(l.name+" transport threw '"+g.message+"' when attempting to start."),h()}}};var m=a.url+"/negotiate",b=function(e,n){var r=u._.error(s.errorOnNegotiate,e,n._.negotiateRequest);t(n).triggerHandler(p.onError,r),d.reject(r),n.stop()};return t(a).triggerHandler(p.onStarting),m=u.transports._logic.prepareQueryString(a,m),a.log("Negotiating with '"+m+"'."),a._.negotiateRequest=u.transports._logic.ajax(a,{url:m,error:function(t,e){e!==h?b(t,a):d.reject(u._.error(s.stoppedWhileNegotiating,null,a._.negotiateRequest))},success:function(e){var n,r,i,l=[],f=[];try{n=a._parseResponse(e)}catch(h){return void b(u._.error(s.errorParsingNegotiateResponse,h),a)}return r=a._.keepAliveData,a.appRelativeUrl=n.Url,a.id=n.ConnectionId,a.token=n.ConnectionToken,a.webSocketServerUrl=n.WebSocketServerUrl,a._.pollTimeout=1e3*n.ConnectionTimeout+1e4,a.disconnectTimeout=1e3*n.DisconnectTimeout,a._.totalTransportConnectTimeout=a.transportConnectTimeout+1e3*n.TransportConnectTimeout,n.KeepAliveTimeout?(r.activated=!0,r.timeout=1e3*n.KeepAliveTimeout,r.timeoutWarning=r.timeout*a.keepAliveWarnAt,a._.beatInterval=(r.timeout-r.timeoutWarning)/3):r.activated=!1,a.reconnectWindow=a.disconnectTimeout+(r.timeout||0),n.ProtocolVersion&&n.ProtocolVersion===a.clientProtocol?(t.each(u.transports,function(t){return 0===t.indexOf("_")||"webSockets"===t&&!n.TryWebSockets?!0:void f.push(t)}),t.isArray(c.transport)?t.each(c.transport,function(e,n){t.inArray(n,f)>=0&&l.push(n)}):"auto"===c.transport?l=f:t.inArray(c.transport,f)>=0&&l.push(c.transport),void o(l)):(i=u._.error(u._.format(s.protocolIncompatible,a.clientProtocol,n.ProtocolVersion)),t(a).triggerHandler(p.onError,[i]),void d.reject(i))}}),d.promise()},starting:function(e){var n=this;return t(n).bind(p.onStarting,function(t,r){e.call(n)}),n},send:function(t){var e=this;if(e.state===u.connectionState.disconnected)throw new Error("SignalR: Connection must be started before data can be sent. Call .start() before .send()");if(e.state===u.connectionState.connecting)throw new Error("SignalR: Connection has not been fully initialized. Use .start().done() or .start().fail() to run logic after the connection has started.");return e.transport.send(e,t),e},received:function(e){var n=this;return t(n).bind(p.onReceived,function(t,r){e.call(n,r)}),n},stateChanged:function(e){var n=this;return t(n).bind(p.onStateChanged,function(t,r){e.call(n,r)}),n},error:function(e){var n=this;return t(n).bind(p.onError,function(t,r,i){n.lastError=r,e.call(n,r,i)}),n},disconnected:function(e){var n=this;return t(n).bind(p.onDisconnect,function(t,r){e.call(n)}),n},connectionSlow:function(e){var n=this;return t(n).bind(p.onConnectionSlow,function(t,r){e.call(n)}),n},reconnecting:function(e){var n=this;return t(n).bind(p.onReconnecting,function(t,r){e.call(n)}),n},reconnected:function(e){var n=this;return t(n).bind(p.onReconnect,function(t,r){e.call(n)}),n},stop:function(n,r){var i=this,o=i._deferral;return i._.deferredStartHandler&&f.unbind("load",i._.deferredStartHandler),delete i._.config,delete i._.deferredStartHandler,l||i._.config&&i._.config.waitForPageLoad!==!0?i.state!==u.connectionState.disconnected?(i.log("Stopping connection."),v(i,i.state,u.connectionState.disconnected),e.clearTimeout(i._.beatHandle),e.clearInterval(i._.pingIntervalId),i.transport&&(i.transport.stop(i),r!==!1&&i.transport.abort(i,n),y(i)&&u.transports._logic.stopMonitoringKeepAlive(i),
i.transport=null),i._.negotiateRequest&&(i._.negotiateRequest.abort(h),delete i._.negotiateRequest),i._.initHandler&&i._.initHandler.stop(),t(i).triggerHandler(p.onDisconnect),delete i._deferral,delete i.messageId,delete i.groupsToken,delete i.id,delete i._.pingIntervalId,delete i._.lastMessageAt,delete i._.lastActiveAt,i._.connectingMessageBuffer.clear(),i):void 0:(i.log("Stopping connection prior to negotiate."),void(o&&o.reject(u._.error(s.stoppedWhileLoading))))},log:function(t){g(t,this.logging)}},u.fn.init.prototype=u.fn,u.noConflict=function(){return t.connection===u&&(t.connection=c),u},t.connection&&(c=t.connection),t.connection=t.signalR=u}(window.jQuery,window),function(t,e,n){function r(t){t._.keepAliveData.monitoring&&i(t),s.markActive(t)&&(t._.beatHandle=e.setTimeout(function(){r(t)},t._.beatInterval))}function i(e){var n,r=e._.keepAliveData;e.state===u.connectionState.connected&&(n=(new Date).getTime()-e._.lastMessageAt,n>=r.timeout?(e.log("Keep alive timed out.  Notifying transport that connection has been lost."),e.transport.lostConnection(e)):n>=r.timeoutWarning?r.userNotified||(e.log("Keep alive has been missed, connection may be dead/slow."),t(e).triggerHandler(c.onConnectionSlow),r.userNotified=!0):r.userNotified=!1)}function o(t,e){var n=t.url+e;return t.transport&&(n+="?transport="+t.transport.name),s.prepareQueryString(t,n)}function a(t){this.connection=t,this.startRequested=!1,this.startCompleted=!1,this.connectionStopped=!1}var s,u=t.signalR,c=t.signalR.events,l=t.signalR.changeState,f="__Start Aborted__";u.transports={},a.prototype={start:function(t,r,i){var o=this,a=o.connection,s=!1;return o.startRequested||o.connectionStopped?void a.log("WARNING! "+t.name+" transport cannot be started. Initialization ongoing or completed."):(a.log(t.name+" transport starting."),o.transportTimeoutHandle=e.setTimeout(function(){s||(s=!0,a.log(t.name+" transport timed out when trying to connect."),o.transportFailed(t,n,i))},a._.totalTransportConnectTimeout),void t.start(a,function(){s||o.initReceived(t,r)},function(e){return s||(s=!0,o.transportFailed(t,e,i)),!o.startCompleted||o.connectionStopped}))},stop:function(){this.connectionStopped=!0,e.clearTimeout(this.transportTimeoutHandle),u.transports._logic.tryAbortStartRequest(this.connection)},initReceived:function(t,n){var r=this,i=r.connection;return r.startRequested?void i.log("WARNING! The client received multiple init messages."):void(r.connectionStopped||(r.startRequested=!0,e.clearTimeout(r.transportTimeoutHandle),i.log(t.name+" transport connected. Initiating start request."),u.transports._logic.ajaxStart(i,function(){r.startCompleted=!0,n()})))},transportFailed:function(n,r,i){var o,a=this.connection,s=a._deferral;this.connectionStopped||(e.clearTimeout(this.transportTimeoutHandle),this.startRequested?this.startCompleted||(o=u._.error(u.resources.errorDuringStartRequest,r),a.log(n.name+" transport failed during the start request. Stopping the connection."),t(a).triggerHandler(c.onError,[o]),s&&s.reject(o),a.stop()):(n.stop(a),a.log(n.name+" transport failed to connect. Attempting to fall back."),i()))}},s=u.transports._logic={ajax:function(e,n){return t.ajax(t.extend(!0,{},t.signalR.ajaxDefaults,{type:"GET",data:{},xhrFields:{withCredentials:e.withCredentials},contentType:e.contentType,dataType:e.ajaxDataType},n))},pingServer:function(e){var n,r,i=t.Deferred();return e.transport?(n=e.url+"/ping",n=s.addQs(n,e.qs),r=s.ajax(e,{url:n,success:function(t){var n;try{n=e._parseResponse(t)}catch(o){return i.reject(u._.transportError(u.resources.pingServerFailedParse,e.transport,o,r)),void e.stop()}"pong"===n.Response?i.resolve():i.reject(u._.transportError(u._.format(u.resources.pingServerFailedInvalidResponse,t),e.transport,null,r))},error:function(t){401===t.status||403===t.status?(i.reject(u._.transportError(u._.format(u.resources.pingServerFailedStatusCode,t.status),e.transport,t,r)),e.stop()):i.reject(u._.transportError(u.resources.pingServerFailed,e.transport,t,r))}})):i.reject(u._.transportError(u.resources.noConnectionTransport,e.transport)),i.promise()},prepareQueryString:function(t,n){var r;return r=s.addQs(n,"clientProtocol="+t.clientProtocol),r=s.addQs(r,t.qs),t.token&&(r+="&connectionToken="+e.encodeURIComponent(t.token)),t.data&&(r+="&connectionData="+e.encodeURIComponent(t.data)),r},addQs:function(e,n){var r,i=-1!==e.indexOf("?")?"&":"?";if(!n)return e;if("object"==typeof n)return e+i+t.param(n);if("string"==typeof n)return r=n.charAt(0),("?"===r||"&"===r)&&(i=""),e+i+n;throw new Error("Query string property must be either a string or object.")},getUrl:function(t,n,r,i,o){var a="webSockets"===n?"":t.baseUrl,u=a+t.appRelativeUrl,c="transport="+n;return!o&&t.groupsToken&&(c+="&groupsToken="+e.encodeURIComponent(t.groupsToken)),r?(u+=i?"/poll":"/reconnect",!o&&t.messageId&&(c+="&messageId="+e.encodeURIComponent(t.messageId))):u+="/connect",u+="?"+c,u=s.prepareQueryString(t,u),o||(u+="&tid="+Math.floor(11*Math.random())),u},maximizePersistentResponse:function(t){return{MessageId:t.C,Messages:t.M,Initialized:"undefined"!=typeof t.S?!0:!1,ShouldReconnect:"undefined"!=typeof t.T?!0:!1,LongPollDelay:t.L,GroupsToken:t.G}},updateGroups:function(t,e){e&&(t.groupsToken=e)},stringifySend:function(t,e){return"string"==typeof e||"undefined"==typeof e||null===e?e:t.json.stringify(e)},ajaxSend:function(e,n){var r,i=s.stringifySend(e,n),a=o(e,"/send"),l=function(e,i){t(i).triggerHandler(c.onError,[u._.transportError(u.resources.sendFailed,i.transport,e,r),n])};return r=s.ajax(e,{url:a,type:"jsonp"===e.ajaxDataType?"GET":"POST",contentType:u._.defaultContentType,data:{data:i},success:function(t){var n;if(t){try{n=e._parseResponse(t)}catch(r){return l(r,e),void e.stop()}s.triggerReceived(e,n)}},error:function(t,n){"abort"!==n&&"parsererror"!==n&&l(t,e)}})},ajaxAbort:function(t,e){if("undefined"!=typeof t.transport){e="undefined"==typeof e?!0:e;var n=o(t,"/abort");s.ajax(t,{url:n,async:e,timeout:1e3,type:"POST"}),t.log("Fired ajax abort async = "+e+".")}},ajaxStart:function(e,n){var r=function(t){var n=e._deferral;n&&n.reject(t)},i=function(n){e.log("The start request failed. Stopping the connection."),t(e).triggerHandler(c.onError,[n]),r(n),e.stop()};e._.startRequest=s.ajax(e,{url:o(e,"/start"),success:function(t,r,o){var a;try{a=e._parseResponse(t)}catch(s){return void i(u._.error(u._.format(u.resources.errorParsingStartResponse,t),s,o))}"started"===a.Response?n():i(u._.error(u._.format(u.resources.invalidStartResponse,t),null,o))},error:function(t,n,o){n!==f?i(u._.error(u.resources.errorDuringStartRequest,o,t)):(e.log("The start request aborted because connection.stop() was called."),r(u._.error(u.resources.stoppedDuringStartRequest,null,t)))}})},tryAbortStartRequest:function(t){t._.startRequest&&(t._.startRequest.abort(f),delete t._.startRequest)},tryInitialize:function(t,e){t.Initialized&&e()},triggerReceived:function(e,n){e._.connectingMessageBuffer.tryBuffer(n)||t(e).triggerHandler(c.onReceived,[n])},processMessages:function(e,n,r){var i;s.markLastMessage(e),n&&(i=s.maximizePersistentResponse(n),s.updateGroups(e,i.GroupsToken),i.MessageId&&(e.messageId=i.MessageId),i.Messages&&(t.each(i.Messages,function(t,n){s.triggerReceived(e,n)}),s.tryInitialize(i,r)))},monitorKeepAlive:function(e){var n=e._.keepAliveData;n.monitoring?e.log("Tried to monitor keep alive but it's already being monitored."):(n.monitoring=!0,s.markLastMessage(e),e._.keepAliveData.reconnectKeepAliveUpdate=function(){s.markLastMessage(e)},t(e).bind(c.onReconnect,e._.keepAliveData.reconnectKeepAliveUpdate),e.log("Now monitoring keep alive with a warning timeout of "+n.timeoutWarning+", keep alive timeout of "+n.timeout+" and disconnecting timeout of "+e.disconnectTimeout))},stopMonitoringKeepAlive:function(e){var n=e._.keepAliveData;n.monitoring&&(n.monitoring=!1,t(e).unbind(c.onReconnect,e._.keepAliveData.reconnectKeepAliveUpdate),e._.keepAliveData={},e.log("Stopping the monitoring of the keep alive."))},startHeartbeat:function(t){t._.lastActiveAt=(new Date).getTime(),r(t)},markLastMessage:function(t){t._.lastMessageAt=(new Date).getTime()},markActive:function(t){return s.verifyLastActive(t)?(t._.lastActiveAt=(new Date).getTime(),!0):!1},isConnectedOrReconnecting:function(t){return t.state===u.connectionState.connected||t.state===u.connectionState.reconnecting},ensureReconnectingState:function(e){return l(e,u.connectionState.connected,u.connectionState.reconnecting)===!0&&t(e).triggerHandler(c.onReconnecting),e.state===u.connectionState.reconnecting},clearReconnectTimeout:function(t){t&&t._.reconnectTimeout&&(e.clearTimeout(t._.reconnectTimeout),delete t._.reconnectTimeout)},verifyLastActive:function(e){if((new Date).getTime()-e._.lastActiveAt>=e.reconnectWindow){var n=u._.format(u.resources.reconnectWindowTimeout,new Date(e._.lastActiveAt),e.reconnectWindow);return e.log(n),t(e).triggerHandler(c.onError,[u._.error(n,"TimeoutException")]),e.stop(!1,!1),!1}return!0},reconnect:function(t,n){var r=u.transports[n];if(s.isConnectedOrReconnecting(t)&&!t._.reconnectTimeout){if(!s.verifyLastActive(t))return;t._.reconnectTimeout=e.setTimeout(function(){s.verifyLastActive(t)&&(r.stop(t),s.ensureReconnectingState(t)&&(t.log(n+" reconnecting."),r.start(t)))},t.reconnectDelay)}},handleParseFailure:function(e,n,r,i,o){var a=u._.transportError(u._.format(u.resources.parseFailed,n),e.transport,r,o);i&&i(a)?e.log("Failed to parse server response while attempting to connect."):(t(e).triggerHandler(c.onError,[a]),e.stop())},initHandler:function(t){return new a(t)},foreverFrame:{count:0,connections:{}}}}(window.jQuery,window),function(t,e,n){var r=t.signalR,i=t.signalR.events,o=t.signalR.changeState,a=r.transports._logic;r.transports.webSockets={name:"webSockets",supportsKeepAlive:function(){return!0},send:function(e,n){var o=a.stringifySend(e,n);try{e.socket.send(o)}catch(s){t(e).triggerHandler(i.onError,[r._.transportError(r.resources.webSocketsInvalidState,e.transport,s,e.socket),n])}},start:function(n,s,u){var c,l=!1,f=this,h=!s,p=t(n);return e.WebSocket?void(n.socket||(c=n.webSocketServerUrl?n.webSocketServerUrl:n.wsProtocol+n.host,c+=a.getUrl(n,this.name,h),n.log("Connecting to websocket endpoint '"+c+"'."),n.socket=new e.WebSocket(c),n.socket.onopen=function(){l=!0,n.log("Websocket opened."),a.clearReconnectTimeout(n),o(n,r.connectionState.reconnecting,r.connectionState.connected)===!0&&p.triggerHandler(i.onReconnect)},n.socket.onclose=function(e){var o;this===n.socket&&(l&&"undefined"!=typeof e.wasClean&&e.wasClean===!1?(o=r._.transportError(r.resources.webSocketClosed,n.transport,e),n.log("Unclean disconnect from websocket: "+(e.reason||"[no reason given]."))):n.log("Websocket closed."),u&&u(o)||(o&&t(n).triggerHandler(i.onError,[o]),f.reconnect(n)))},n.socket.onmessage=function(e){var r;try{r=n._parseResponse(e.data)}catch(i){return void a.handleParseFailure(n,e.data,i,u,e)}r&&(t.isEmptyObject(r)||r.M?a.processMessages(n,r,s):a.triggerReceived(n,r))})):void u()},reconnect:function(t){a.reconnect(t,this.name)},lostConnection:function(t){this.reconnect(t)},stop:function(t){a.clearReconnectTimeout(t),t.socket&&(t.log("Closing the Websocket."),t.socket.close(),t.socket=null)},abort:function(t,e){a.ajaxAbort(t,e)}}}(window.jQuery,window),function(t,e,n){var r=t.signalR,i=t.signalR.events,o=t.signalR.changeState,a=r.transports._logic,s=function(t){e.clearTimeout(t._.reconnectAttemptTimeoutHandle),delete t._.reconnectAttemptTimeoutHandle};r.transports.serverSentEvents={name:"serverSentEvents",supportsKeepAlive:function(){return!0},timeOut:3e3,start:function(n,u,c){var l,f=this,h=!1,p=t(n),d=!u;if(n.eventSource&&(n.log("The connection already has an event source. Stopping it."),n.stop()),!e.EventSource)return void(c&&(n.log("This browser doesn't support SSE."),c()));l=a.getUrl(n,this.name,d);try{n.log("Attempting to connect to SSE endpoint '"+l+"'."),n.eventSource=new e.EventSource(l,{withCredentials:n.withCredentials})}catch(g){return n.log("EventSource failed trying to connect with error "+g.Message+"."),void(c?c():(p.triggerHandler(i.onError,[r._.transportError(r.resources.eventSourceFailedToConnect,n.transport,g)]),d&&f.reconnect(n)))}d&&(n._.reconnectAttemptTimeoutHandle=e.setTimeout(function(){h===!1&&n.eventSource.readyState!==e.EventSource.OPEN&&f.reconnect(n)},f.timeOut)),n.eventSource.addEventListener("open",function(t){n.log("EventSource connected."),s(n),a.clearReconnectTimeout(n),h===!1&&(h=!0,o(n,r.connectionState.reconnecting,r.connectionState.connected)===!0&&p.triggerHandler(i.onReconnect))},!1),n.eventSource.addEventListener("message",function(t){var e;if("initialized"!==t.data){try{e=n._parseResponse(t.data)}catch(r){return void a.handleParseFailure(n,t.data,r,c,t)}a.processMessages(n,e,u)}},!1),n.eventSource.addEventListener("error",function(t){var o=r._.transportError(r.resources.eventSourceError,n.transport,t);this===n.eventSource&&(c&&c(o)||(n.log("EventSource readyState: "+n.eventSource.readyState+"."),t.eventPhase===e.EventSource.CLOSED?(n.log("EventSource reconnecting due to the server connection ending."),f.reconnect(n)):(n.log("EventSource error."),p.triggerHandler(i.onError,[o]))))},!1)},reconnect:function(t){a.reconnect(t,this.name)},lostConnection:function(t){this.reconnect(t)},send:function(t,e){a.ajaxSend(t,e)},stop:function(t){s(t),a.clearReconnectTimeout(t),t&&t.eventSource&&(t.log("EventSource calling close()."),t.eventSource.close(),t.eventSource=null,delete t.eventSource)},abort:function(t,e){a.ajaxAbort(t,e)}}}(window.jQuery,window),function(t,e,n){var r=t.signalR,i=t.signalR.events,o=t.signalR.changeState,a=r.transports._logic,s=function(){var t=e.document.createElement("iframe");return t.setAttribute("style","position:absolute;top:0;left:0;width:0;height:0;visibility:hidden;"),t},u=function(){var t=null,n=1e3,i=0;return{prevent:function(){r._.ieVersion<=8&&(0===i&&(t=e.setInterval(function(){var t=s();e.document.body.appendChild(t),e.document.body.removeChild(t),t=null},n)),i++)},cancel:function(){1===i&&e.clearInterval(t),i>0&&i--}}}();r.transports.foreverFrame={name:"foreverFrame",supportsKeepAlive:function(){return!0},iframeClearThreshold:50,start:function(t,n,r){var i,o=this,c=a.foreverFrame.count+=1,l=s(),f=function(){t.log("Forever frame iframe finished loading and is no longer receiving messages."),r&&r()||o.reconnect(t)};return e.EventSource?void(r&&(t.log("Forever Frame is not supported by SignalR on browsers with SSE support."),r())):(l.setAttribute("data-signalr-connection-id",t.id),u.prevent(),i=a.getUrl(t,this.name),i+="&frameId="+c,e.document.documentElement.appendChild(l),t.log("Binding to iframe's load event."),l.addEventListener?l.addEventListener("load",f,!1):l.attachEvent&&l.attachEvent("onload",f),l.src=i,a.foreverFrame.connections[c]=t,t.frame=l,t.frameId=c,void(n&&(t.onSuccess=function(){t.log("Iframe transport started."),n()})))},reconnect:function(t){var n=this;a.isConnectedOrReconnecting(t)&&a.verifyLastActive(t)&&e.setTimeout(function(){if(a.verifyLastActive(t)&&t.frame&&a.ensureReconnectingState(t)){var e=t.frame,r=a.getUrl(t,n.name,!0)+"&frameId="+t.frameId;t.log("Updating iframe src to '"+r+"'."),e.src=r}},t.reconnectDelay)},lostConnection:function(t){this.reconnect(t)},send:function(t,e){a.ajaxSend(t,e)},receive:function(e,n){var i,o,s;if(e.json!==e._originalJson&&(n=e._originalJson.stringify(n)),s=e._parseResponse(n),a.processMessages(e,s,e.onSuccess),e.state===t.signalR.connectionState.connected&&(e.frameMessageCount=(e.frameMessageCount||0)+1,e.frameMessageCount>r.transports.foreverFrame.iframeClearThreshold&&(e.frameMessageCount=0,i=e.frame.contentWindow||e.frame.contentDocument,i&&i.document&&i.document.body)))for(o=i.document.body;o.firstChild;)o.removeChild(o.firstChild)},stop:function(t){var n=null;if(u.cancel(),t.frame){if(t.frame.stop)t.frame.stop();else try{n=t.frame.contentWindow||t.frame.contentDocument,n.document&&n.document.execCommand&&n.document.execCommand("Stop")}catch(r){t.log("Error occured when stopping foreverFrame transport. Message = "+r.message+".")}t.frame.parentNode===e.document.body&&e.document.body.removeChild(t.frame),delete a.foreverFrame.connections[t.frameId],t.frame=null,t.frameId=null,delete t.frame,delete t.frameId,delete t.onSuccess,delete t.frameMessageCount,t.log("Stopping forever frame.")}},abort:function(t,e){a.ajaxAbort(t,e)},getConnection:function(t){return a.foreverFrame.connections[t]},started:function(e){o(e,r.connectionState.reconnecting,r.connectionState.connected)===!0&&t(e).triggerHandler(i.onReconnect)}}}(window.jQuery,window),function(t,e,n){var r=t.signalR,i=t.signalR.events,o=t.signalR.changeState,a=t.signalR.isDisconnecting,s=r.transports._logic;r.transports.longPolling={name:"longPolling",supportsKeepAlive:function(){return!1},reconnectDelay:3e3,start:function(n,u,c){var l=this,f=function(){f=t.noop,n.log("LongPolling connected."),u()},h=function(t){return c(t)?(n.log("LongPolling failed to connect."),!0):!1},p=n._,d=0,g=function(n){e.clearTimeout(p.reconnectTimeoutId),p.reconnectTimeoutId=null,o(n,r.connectionState.reconnecting,r.connectionState.connected)===!0&&(n.log("Raising the reconnect event"),t(n).triggerHandler(i.onReconnect))},v=36e5;n.pollXhr&&(n.log("Polling xhr requests already exists, aborting."),n.stop()),n.messageId=null,p.reconnectTimeoutId=null,p.pollTimeoutId=e.setTimeout(function(){!function o(u,c){var m=u.messageId,y=null===m,$=!y,b=!c,w=s.getUrl(u,l.name,$,b,!0),x={};u.messageId&&(x.messageId=u.messageId),u.groupsToken&&(x.groupsToken=u.groupsToken),a(u)!==!0&&(n.log("Opening long polling request to '"+w+"'."),u.pollXhr=s.ajax(n,{xhrFields:{onprogress:function(){s.markLastMessage(n)}},url:w,type:"POST",contentType:r._.defaultContentType,data:x,timeout:n._.pollTimeout,success:function(r){var i,c,l,v=0;n.log("Long poll complete."),d=0;try{i=n._parseResponse(r)}catch(m){return void s.handleParseFailure(u,r,m,h,u.pollXhr)}null!==p.reconnectTimeoutId&&g(u),i&&(c=s.maximizePersistentResponse(i)),s.processMessages(u,i,f),c&&"number"===t.type(c.LongPollDelay)&&(v=c.LongPollDelay),a(u)!==!0&&(l=c&&c.ShouldReconnect,(!l||s.ensureReconnectingState(u))&&(v>0?p.pollTimeoutId=e.setTimeout(function(){o(u,l)},v):o(u,l)))},error:function(a,c){var f=r._.transportError(r.resources.longPollFailed,n.transport,a,u.pollXhr);if(e.clearTimeout(p.reconnectTimeoutId),p.reconnectTimeoutId=null,"abort"===c)return void n.log("Aborted xhr request.");if(!h(f)){if(d++,n.state!==r.connectionState.reconnecting&&(n.log("An error occurred using longPolling. Status = "+c+".  Response = "+a.responseText+"."),t(u).triggerHandler(i.onError,[f])),(n.state===r.connectionState.connected||n.state===r.connectionState.reconnecting)&&!s.verifyLastActive(n))return;if(!s.ensureReconnectingState(u))return;p.pollTimeoutId=e.setTimeout(function(){o(u,!0)},l.reconnectDelay)}}}),$&&c===!0&&(p.reconnectTimeoutId=e.setTimeout(function(){g(u)},Math.min(1e3*(Math.pow(2,d)-1),v))))}(n)},250)},lostConnection:function(t){t.pollXhr&&t.pollXhr.abort("lostConnection")},send:function(t,e){s.ajaxSend(t,e)},stop:function(t){e.clearTimeout(t._.pollTimeoutId),e.clearTimeout(t._.reconnectTimeoutId),delete t._.pollTimeoutId,delete t._.reconnectTimeoutId,t.pollXhr&&(t.pollXhr.abort(),t.pollXhr=null,delete t.pollXhr)},abort:function(t,e){s.ajaxAbort(t,e)}}}(window.jQuery,window),function(t,e,n){function r(t){return t+l}function i(t,e,n){var r,i=t.length,o=[];for(r=0;i>r;r+=1)t.hasOwnProperty(r)&&(o[r]=e.call(n,t[r],r,t));return o}function o(e){return t.isFunction(e)?null:"undefined"===t.type(e)?null:e}function a(t){for(var e in t)if(t.hasOwnProperty(e))return!0;return!1}function s(t,e){var n,r=t._.invocationCallbacks;a(r)&&t.log("Clearing hub invocation callbacks with error: "+e+"."),t._.invocationCallbackId=0,delete t._.invocationCallbacks,t._.invocationCallbacks={};for(var i in r)n=r[i],n.method.call(n.scope,{E:e})}function u(t,e){return new u.fn.init(t,e)}function c(e,n){var r={qs:null,logging:!1,useDefaultPath:!0};return t.extend(r,n),(!e||r.useDefaultPath)&&(e=(e||"")+"/signalr"),new c.fn.init(e,r)}var l=".hubProxy",f=t.signalR;u.fn=u.prototype={init:function(t,e){this.state={},this.connection=t,this.hubName=e,this._={callbackMap:{}}},constructor:u,hasSubscriptions:function(){return a(this._.callbackMap)},on:function(e,n){var i=this,o=i._.callbackMap;return e=e.toLowerCase(),o[e]||(o[e]={}),o[e][n]=function(t,e){n.apply(i,e)},t(i).bind(r(e),o[e][n]),i},off:function(e,n){var i,o=this,s=o._.callbackMap;return e=e.toLowerCase(),i=s[e],i&&(i[n]?(t(o).unbind(r(e),i[n]),delete i[n],a(i)||delete s[e]):n||(t(o).unbind(r(e)),delete s[e])),o},invoke:function(e){var n=this,r=n.connection,a=t.makeArray(arguments).slice(1),s=i(a,o),u={H:n.hubName,M:e,A:s,I:r._.invocationCallbackId},c=t.Deferred(),l=function(i){var o,a,s=n._maximizeHubResponse(i);t.extend(n.state,s.State),s.Progress?c.notifyWith?c.notifyWith(n,[s.Progress.Data]):r._.progressjQueryVersionLogged||(r.log("A hub method invocation progress update was received but the version of jQuery in use ("+t.prototype.jquery+") does not support progress updates. Upgrade to jQuery 1.7+ to receive progress notifications."),r._.progressjQueryVersionLogged=!0):s.Error?(s.StackTrace&&r.log(s.Error+"\n"+s.StackTrace+"."),o=s.IsHubException?"HubException":"Exception",a=f._.error(s.Error,o),a.data=s.ErrorData,r.log(n.hubName+"."+e+" failed to execute. Error: "+a.message),c.rejectWith(n,[a])):(r.log("Invoked "+n.hubName+"."+e),c.resolveWith(n,[s.Result]))};return r._.invocationCallbacks[r._.invocationCallbackId.toString()]={scope:n,method:l},r._.invocationCallbackId+=1,t.isEmptyObject(n.state)||(u.S=n.state),r.log("Invoking "+n.hubName+"."+e),r.send(u),c.promise()},_maximizeHubResponse:function(t){return{State:t.S,Result:t.R,Progress:t.P?{Id:t.P.I,Data:t.P.D}:null,Id:t.I,IsHubException:t.H,Error:t.E,StackTrace:t.T,ErrorData:t.D}}},u.fn.init.prototype=u.fn,c.fn=c.prototype=t.connection(),c.fn.init=function(e,n){var i={qs:null,logging:!1,useDefaultPath:!0},o=this;t.extend(i,n),t.signalR.fn.init.call(o,e,i.qs,i.logging),o.proxies={},o._.invocationCallbackId=0,o._.invocationCallbacks={},o.received(function(e){var n,i,a,s,u,c;e&&("undefined"!=typeof e.P?(a=e.P.I.toString(),s=o._.invocationCallbacks[a],s&&s.method.call(s.scope,e)):"undefined"!=typeof e.I?(a=e.I.toString(),s=o._.invocationCallbacks[a],s&&(o._.invocationCallbacks[a]=null,delete o._.invocationCallbacks[a],s.method.call(s.scope,e))):(n=this._maximizeClientHubInvocation(e),o.log("Triggering client hub event '"+n.Method+"' on hub '"+n.Hub+"'."),u=n.Hub.toLowerCase(),c=n.Method.toLowerCase(),i=this.proxies[u],t.extend(i.state,n.State),t(i).triggerHandler(r(c),[n.Args])))}),o.error(function(t,e){var n,r;e&&(n=e.I,r=o._.invocationCallbacks[n],r&&(o._.invocationCallbacks[n]=null,delete o._.invocationCallbacks[n],r.method.call(r.scope,{E:t})))}),o.reconnecting(function(){o.transport&&"webSockets"===o.transport.name&&s(o,"Connection started reconnecting before invocation result was received.")}),o.disconnected(function(){s(o,"Connection was disconnected before invocation result was received.")})},c.fn._maximizeClientHubInvocation=function(t){return{Hub:t.H,Method:t.M,Args:t.A,State:t.S}},c.fn._registerSubscribedHubs=function(){var e=this;e._subscribedToHubs||(e._subscribedToHubs=!0,e.starting(function(){var n=[];t.each(e.proxies,function(t){this.hasSubscriptions()&&(n.push({name:t}),e.log("Client subscribed to hub '"+t+"'."))}),0===n.length&&e.log("No hubs have been subscribed to.  The client will not receive data from hubs.  To fix, declare at least one client side function prior to connection start for each hub you wish to subscribe to."),e.data=e.json.stringify(n)}))},c.fn.createHubProxy=function(t){t=t.toLowerCase();var e=this.proxies[t];return e||(e=u(this,t),this.proxies[t]=e),this._registerSubscribedHubs(),e},c.fn.init.prototype=c.fn,t.hubConnection=c}(window.jQuery,window),function(t,e){t.signalR.version="2.2.0"}(window.jQuery),angular.module("SignalR",[]).constant("$",window.jQuery).factory("Hub",["$",function(t){function e(e){var n=null;return n=e&&e.rootPath?t.hubConnection(e.rootPath,{useDefaultPath:!1}):t.hubConnection(),n.logging=e&&e.logging?!0:!1,n}function n(t){var n=!(t&&t.useSharedConnection===!1);return n?"undefined"==typeof r[t.rootPath]?r[t.rootPath]=e(t):r[t.rootPath]:e(t)}var r=[];return function(e,r){var i=this;return i.connection=n(r),i.proxy=i.connection.createHubProxy(e),i.on=function(t,e){i.proxy.on(t,e)},i.invoke=function(t,e){return i.proxy.invoke.apply(i.proxy,arguments)},i.disconnect=function(){i.connection.stop()},i.connect=function(){return i.connection.start(r.transport?{transport:r.transport}:null)},r&&r.listeners&&angular.forEach(r.listeners,function(t,e){i.on(e,t)}),r&&r.methods&&angular.forEach(r.methods,function(e){i[e]=function(){var n=t.makeArray(arguments);return n.unshift(e),i.invoke.apply(i,n)}}),r&&r.queryParams&&(i.connection.qs=r.queryParams),r&&r.errorHandler&&i.connection.error(r.errorHandler),r&&r.hubDisconnected&&i.connection.disconnected(r.hubDisconnected),r&&r.stateChanged&&i.connection.stateChanged(r.stateChanged),i.promise=i.connect(),i}}]),function(t){"use strict";"object"==typeof exports?module.exports=t(require("angular"),require("Chart.js")):"function"==typeof define&&define.amd?define(["angular","chart"],t):t(angular,Chart)}(function(t,e){"use strict";function n(){var n={},r={Chart:e,getOptions:function(e){var r=e&&n[e]||{};return t.extend({},n,r)}};this.setOptions=function(e,r){return r?void(n[e]=t.extend(n[e]||{},r)):(r=e,void(n=t.extend(n,r)))},this.$get=function(){return r}}function r(n,r){function o(t,e){return t&&e&&t.length&&e.length?Array.isArray(t[0])?t.length===e.length&&t.every(function(t,n){return t.length===e[n].length}):e.reduce(a,0)>0?t.length===e.length:!1:!1}function a(t,e){return t+e}function s(e,n,r,i){var o=null;return function(a){var s=n.getPointsAtEvent||n.getBarsAtEvent||n.getSegmentsAtEvent;if(s){var u=s.call(n,a);(i===!1||t.equals(o,u)===!1)&&(o=u,e[r](u,a),e.$apply())}}}function u(r,i){for(var o=t.copy(i.colours||n.getOptions(r).colours||e.defaults.global.colours);o.length<i.data.length;)o.push(i.getColour());return o.map(c)}function c(t){return"object"==typeof t&&null!==t?t:"string"==typeof t&&"#"===t[0]?f(d(t.substr(1))):l()}function l(){var t=[h(0,255),h(0,255),h(0,255)];return f(t)}function f(t){return{fillColor:p(t,.2),strokeColor:p(t,1),pointColor:p(t,1),pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:p(t,.8)}}function h(t,e){return Math.floor(Math.random()*(e-t+1))+t}function p(t,e){return i?"rgb("+t.join(",")+")":"rgba("+t.concat(e).join(",")+")"}function d(t){var e=parseInt(t,16),n=e>>16&255,r=e>>8&255,i=255&e;return[n,r,i]}function g(e,n,r,i){return{labels:e,datasets:n.map(function(e,n){return t.extend({},i[n],{label:r[n],data:e})})}}function v(e,n,r){return e.map(function(e,i){return t.extend({},r[i],{label:e,value:n[i],color:r[i].strokeColor,highlight:r[i].pointHighlightStroke})})}function m(t,e){var n=t.parent(),r=n.find("chart-legend"),i="<chart-legend>"+e.generateLegend()+"</chart-legend>";r.length?r.replaceWith(i):n.append(i)}function y(t,e,n,r){Array.isArray(n.data[0])?t.datasets.forEach(function(t,n){(t.points||t.bars).forEach(function(t,r){t.value=e[n][r]})}):t.segments.forEach(function(t,n){t.value=e[n]}),t.update(),n.$emit("update",t),n.legend&&"false"!==n.legend&&m(r,t)}function $(t){return!t||Array.isArray(t)&&!t.length||"object"==typeof t&&!Object.keys(t).length}function b(r,i){var o=t.extend({},e.defaults.global,n.getOptions(r),i.options);return o.responsive}return function(e){return{restrict:"CA",scope:{data:"=?",labels:"=?",options:"=?",series:"=?",colours:"=?",getColour:"=?",chartType:"=",legend:"@",click:"=?",hover:"=?",chartData:"=?",chartLabels:"=?",chartOptions:"=?",chartSeries:"=?",chartColours:"=?",chartLegend:"@",chartClick:"=?",chartHover:"=?"},link:function(a,c){function f(t,e){a.$watch(t,function(t){"undefined"!=typeof t&&(a[e]=t)})}function h(n,r){if(!$(n)&&!t.equals(n,r)){var i=e||a.chartType;i&&(w&&w.destroy(),p(i))}}function p(e){if(b(e,a)&&0===c[0].clientHeight&&0===x.clientHeight)return r(function(){p(e)},50,!1);if(a.data&&a.data.length){a.getColour="function"==typeof a.getColour?a.getColour:l,a.colours=u(e,a);var i=c[0],o=i.getContext("2d"),f=Array.isArray(a.data[0])?g(a.labels,a.data,a.series||[],a.colours):v(a.labels,a.data,a.colours),h=t.extend({},n.getOptions(e),a.options);w=new n.Chart(o)[e](f,h),a.$emit("create",w),i.onclick=a.click?s(a,w,"click",!1):t.noop,i.onmousemove=a.hover?s(a,w,"hover",!0):t.noop,a.legend&&"false"!==a.legend&&m(c,w)}}function d(t){if("undefined"!=typeof console&&"test"!==n.getOptions().env){var e="function"==typeof console.warn?console.warn:console.log;a[t]&&e.call(console,'"%s" is deprecated and will be removed in a future version. Please use "chart-%s" instead.',t,t)}}var w,x=document.createElement("div");x.className="chart-container",c.replaceWith(x),x.appendChild(c[0]),i&&window.G_vmlCanvasManager.initElement(c[0]),["data","labels","options","series","colours","legend","click","hover"].forEach(d),f("chartData","data"),f("chartLabels","labels"),f("chartOptions","options"),f("chartSeries","series"),f("chartColours","colours"),f("chartLegend","legend"),f("chartClick","click"),f("chartHover","hover"),a.$watch("data",function(t,n){if(t&&t.length&&(!Array.isArray(t[0])||t[0].length)){var r=e||a.chartType;if(r){if(w){if(o(t,n))return y(w,t,a,c);w.destroy()}p(r)}}},!0),a.$watch("series",h,!0),a.$watch("labels",h,!0),a.$watch("options",h,!0),a.$watch("colours",h,!0),a.$watch("chartType",function(e,n){$(e)||t.equals(e,n)||(w&&w.destroy(),p(e))}),a.$on("$destroy",function(){w&&w.destroy()})}}}}e.defaults.global.responsive=!0,e.defaults.global.multiTooltipTemplate="<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>",e.defaults.global.colours=["#97BBCD","#DCDCDC","#F7464A","#46BFBD","#FDB45C","#949FB1","#4D5360"];var i="object"==typeof window.G_vmlCanvasManager&&null!==window.G_vmlCanvasManager&&"function"==typeof window.G_vmlCanvasManager.initElement;return i&&(e.defaults.global.animation=!1),t.module("chart.js",[]).provider("ChartJs",n).factory("ChartJsFactory",["ChartJs","$timeout",r]).directive("chartBase",["ChartJsFactory",function(t){return new t}]).directive("chartLine",["ChartJsFactory",function(t){return new t("Line")}]).directive("chartBar",["ChartJsFactory",function(t){return new t("Bar")}]).directive("chartRadar",["ChartJsFactory",function(t){return new t("Radar")}]).directive("chartDoughnut",["ChartJsFactory",function(t){return new t("Doughnut")}]).directive("chartPie",["ChartJsFactory",function(t){return new t("Pie")}]).directive("chartPolarArea",["ChartJsFactory",function(t){return new t("PolarArea")}])});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS9kaXN0L2pxdWVyeS5qcyIsImFuZ3VsYXIvYW5ndWxhci5qcyIsImFuZ3VsYXItdWktcm91dGVyL3JlbGVhc2UvYW5ndWxhci11aS1yb3V0ZXIuanMiLCJ1bmRlcnNjb3JlL3VuZGVyc2NvcmUuanMiLCJDaGFydC5qcy9DaGFydC5qcyIsInNpZ25hbHIvanF1ZXJ5LnNpZ25hbFIuanMiLCJhbmd1bGFyLXNpZ25hbHItaHViL3NpZ25hbHItaHViLmpzIiwiYW5ndWxhci1jaGFydC5qcy9kaXN0L2FuZ3VsYXItY2hhcnQuanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImlzQXJyYXlsaWtlIiwib2JqIiwibGVuZ3RoIiwidHlwZSIsImpRdWVyeSIsImlzV2luZG93Iiwibm9kZVR5cGUiLCJ3aW5ub3ciLCJlbGVtZW50cyIsInF1YWxpZmllciIsIm5vdCIsImlzRnVuY3Rpb24iLCJncmVwIiwiZWxlbSIsImkiLCJjYWxsIiwicmlzU2ltcGxlIiwidGVzdCIsImZpbHRlciIsImluZGV4T2YiLCJzaWJsaW5nIiwiY3VyIiwiZGlyIiwiY3JlYXRlT3B0aW9ucyIsIm9wdGlvbnMiLCJvYmplY3QiLCJvcHRpb25zQ2FjaGUiLCJlYWNoIiwibWF0Y2giLCJybm90d2hpdGUiLCJfIiwiZmxhZyIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeSIsIkRhdGEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNhY2hlIiwiZ2V0IiwiZXhwYW5kbyIsInVpZCIsImRhdGFBdHRyIiwia2V5IiwiZGF0YSIsIm5hbWUiLCJ1bmRlZmluZWQiLCJyZXBsYWNlIiwicm11bHRpRGFzaCIsInRvTG93ZXJDYXNlIiwiZ2V0QXR0cmlidXRlIiwicmJyYWNlIiwicGFyc2VKU09OIiwiZSIsImRhdGFfdXNlciIsInNldCIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwiYWN0aXZlRWxlbWVudCIsImVyciIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJub2RlTmFtZSIsImZpcnN0Q2hpbGQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFwcGVuZENoaWxkIiwib3duZXJEb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsInJzY3JpcHRUeXBlTWFza2VkIiwiZXhlYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEdsb2JhbEV2YWwiLCJlbGVtcyIsInJlZkVsZW1lbnRzIiwibCIsImRhdGFfcHJpdiIsImNsb25lQ29weUV2ZW50Iiwic3JjIiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZXZlbnRzIiwiaGFzRGF0YSIsImFjY2VzcyIsImhhbmRsZSIsImV2ZW50IiwiYWRkIiwiZXh0ZW5kIiwiZ2V0QWxsIiwiY29udGV4dCIsInRhZyIsInJldCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtZXJnZSIsImZpeElucHV0IiwicmNoZWNrYWJsZVR5cGUiLCJjaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiYWN0dWFsRGlzcGxheSIsImRvYyIsInN0eWxlIiwiYXBwZW5kVG8iLCJib2R5IiwiZGlzcGxheSIsImdldERlZmF1bHRDb21wdXRlZFN0eWxlIiwiY3NzIiwiZGV0YWNoIiwiZGVmYXVsdERpc3BsYXkiLCJlbGVtZGlzcGxheSIsImlmcmFtZSIsImRvY3VtZW50RWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsIndyaXRlIiwiY2xvc2UiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFN0eWxlcyIsImdldFByb3BlcnR5VmFsdWUiLCJjb250YWlucyIsInJudW1ub25weCIsInJtYXJnaW4iLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImFwcGx5IiwiYXJndW1lbnRzIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwidG9VcHBlckNhc2UiLCJzbGljZSIsIm9yaWdOYW1lIiwiY3NzUHJlZml4ZXMiLCJzZXRQb3NpdGl2ZU51bWJlciIsInZhbHVlIiwic3VidHJhY3QiLCJtYXRjaGVzIiwicm51bXNwbGl0IiwiTWF0aCIsIm1heCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsInN0eWxlcyIsInZhbCIsImNzc0V4cGFuZCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzdXBwb3J0IiwiYm94U2l6aW5nUmVsaWFibGUiLCJwYXJzZUZsb2F0Iiwic2hvd0hpZGUiLCJzaG93IiwiaGlkZGVuIiwidmFsdWVzIiwiaW5kZXgiLCJpc0hpZGRlbiIsIlR3ZWVuIiwicHJvcCIsImVuZCIsImVhc2luZyIsInByb3RvdHlwZSIsImluaXQiLCJjcmVhdGVGeE5vdyIsInNldFRpbWVvdXQiLCJmeE5vdyIsIm5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwid2hpY2giLCJhdHRycyIsImhlaWdodCIsIm9wYWNpdHkiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsInR3ZWVuIiwiY29sbGVjdGlvbiIsInR3ZWVuZXJzIiwiY29uY2F0IiwiZGVmYXVsdFByZWZpbHRlciIsInByb3BzIiwib3B0cyIsInRvZ2dsZSIsImhvb2tzIiwib2xkZmlyZSIsImNoZWNrRGlzcGxheSIsImFuaW0iLCJvcmlnIiwiZGF0YVNob3ciLCJxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJlbXB0eSIsImZpcmUiLCJhbHdheXMiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInJmeHR5cGVzIiwiaXNFbXB0eU9iamVjdCIsImRvbmUiLCJoaWRlIiwicmVtb3ZlIiwic3RhcnQiLCJwcm9wRmlsdGVyIiwic3BlY2lhbEVhc2luZyIsImNhbWVsQ2FzZSIsImlzQXJyYXkiLCJjc3NIb29rcyIsImV4cGFuZCIsIkFuaW1hdGlvbiIsInByb3BlcnRpZXMiLCJyZXN1bHQiLCJzdG9wcGVkIiwiYW5pbWF0aW9uUHJlZmlsdGVycyIsImRlZmVycmVkIiwiRGVmZXJyZWQiLCJ0aWNrIiwiY3VycmVudFRpbWUiLCJyZW1haW5pbmciLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInRlbXAiLCJwZXJjZW50IiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvbWlzZSIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsInB1c2giLCJzdG9wIiwiZ290b0VuZCIsInJlamVjdFdpdGgiLCJtYXAiLCJmeCIsInRpbWVyIiwicHJvZ3Jlc3MiLCJjb21wbGV0ZSIsImZhaWwiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJmdW5jIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJ1bnNoaWZ0IiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3QiLCJzZWxlY3RlZCIsImluc3BlY3RlZCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJzZWVraW5nVHJhbnNwb3J0IiwidHJhbnNwb3J0cyIsImFqYXhFeHRlbmQiLCJ0YXJnZXQiLCJkZWVwIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwicyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJjb250ZW50cyIsInNoaWZ0IiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInRtcCIsInByZXYiLCJyZXNwb25zZUZpZWxkcyIsImRhdGFGaWx0ZXIiLCJzcGxpdCIsInN0YXRlIiwiZXJyb3IiLCJidWlsZFBhcmFtcyIsInByZWZpeCIsInRyYWRpdGlvbmFsIiwidiIsInJicmFja2V0IiwiZ2V0V2luZG93IiwiZGVmYXVsdFZpZXciLCJhcnIiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsInZlcnNpb24iLCJzZWxlY3RvciIsImZuIiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJjYWxsYmFjayIsImFyZ3MiLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImoiLCJzb3J0Iiwic3BsaWNlIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJpc1BsYWluT2JqZWN0IiwicmFuZG9tIiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJBcnJheSIsImlzTnVtZXJpYyIsImdsb2JhbEV2YWwiLCJjb2RlIiwic2NyaXB0IiwiaW5kaXJlY3QiLCJldmFsIiwidHJpbSIsInRleHQiLCJoZWFkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwic3RyaW5nIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJwcm94eSIsIkRhdGUiLCJTaXp6bGUiLCJzZWVkIiwibSIsImdyb3VwcyIsIm9sZCIsIm5pZCIsIm5ld0NvbnRleHQiLCJuZXdTZWxlY3RvciIsInByZWZlcnJlZERvYyIsInNldERvY3VtZW50IiwiZG9jdW1lbnRJc0hUTUwiLCJycXVpY2tFeHByIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJyYnVnZ3lRU0EiLCJ0b2tlbml6ZSIsInJlc2NhcGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b1NlbGVjdG9yIiwicnNpYmxpbmciLCJ0ZXN0Q29udGV4dCIsImpvaW4iLCJxc2FFcnJvciIsInNlbGVjdCIsImNyZWF0ZUNhY2hlIiwia2V5cyIsIkV4cHIiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImRpdiIsImFkZEhhbmRsZSIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiYSIsImIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJNQVhfTkVHQVRJVkUiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic2V0RmlsdGVycyIsInRva2VucyIsImFkZENvbWJpbmF0b3IiLCJtYXRjaGVyIiwiY29tYmluYXRvciIsImJhc2UiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJ4bWwiLCJvbGRDYWNoZSIsIm91dGVyQ2FjaGUiLCJuZXdDYWNoZSIsImRpcnJ1bnMiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwibXVsdGlwbGVDb250ZXh0cyIsImNvbnRleHRzIiwiY29uZGVuc2UiLCJ1bm1hdGNoZWQiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicHJlRmlsdGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJyZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJvdXRlcm1vc3RDb250ZXh0IiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZmluZCIsImRpcnJ1bnNVbmlxdWUiLCJwb3AiLCJ1bmlxdWVTb3J0IiwiZ2V0VGV4dCIsImlzWE1MIiwiY29tcGlsZSIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsImRvY0VsZW0iLCJyYnVnZ3lNYXRjaGVzIiwiY2xhc3NDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiY2hhcmFjdGVyRW5jb2RpbmciLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ1bmxvYWRIYW5kbGVyIiwiY2hpbGROb2RlcyIsImVscyIsIm5vZGUiLCJoYXNDb21wYXJlIiwicGFyZW50IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJpbm5lckhUTUwiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsImF0dHIiLCJzcGVjaWZpZWQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsIj4iLCIgIiwiKyIsIn4iLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwibm9kZUluZGV4IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJwc2V1ZG8iLCJpZHgiLCJtYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwiZGlzYWJsZWQiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGl2MSIsInVuaXF1ZSIsImlzWE1MRG9jIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJzZWxmIiwiaXMiLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwibmV4dCIsInVudGlsIiwidHJ1bmNhdGUiLCJuIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwb3MiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwic2libGluZ3MiLCJyZXZlcnNlIiwiQ2FsbGJhY2tzIiwibWVtb3J5IiwiZmlyZWQiLCJmaXJpbmciLCJmaXJpbmdTdGFydCIsImZpcmluZ0xlbmd0aCIsImZpcmluZ0luZGV4Iiwic3RhY2siLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImxvY2tlZCIsImZpcmVXaXRoIiwidHVwbGVzIiwidGhlbiIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInJlc29sdmUiLCJyZWplY3QiLCJub3RpZnkiLCJwaXBlIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic3Vib3JkaW5hdGUiLCJwcm9ncmVzc1ZhbHVlcyIsInByb2dyZXNzQ29udGV4dHMiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwidXBkYXRlRnVuYyIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsImhvbGRSZWFkeSIsImhvbGQiLCJ3YWl0IiwidHJpZ2dlckhhbmRsZXIiLCJvZmYiLCJyZWFkeVN0YXRlIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiYWNjZXB0cyIsImRlc2NyaXB0b3IiLCJ1bmxvY2siLCJkZWZpbmVQcm9wZXJ0aWVzIiwic3RvcmVkIiwiY2FtZWwiLCJkaXNjYXJkIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJjYW1lbEtleSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsImVsIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwic3RydW5kZWZpbmVkIiwiZm9jdXNpbkJ1YmJsZXMiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJmb2N1c01vcnBoIiwicnR5cGVuYW1lc3BhY2UiLCJ0eXBlcyIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJ0IiwiaGFuZGxlT2JqIiwic3BlY2lhbCIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwidHJpZ2dlciIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJFdmVudCIsImlzVHJpZ2dlciIsIm5hbWVzcGFjZV9yZSIsIm5vQnViYmxlIiwicGFyZW50V2luZG93IiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImlzRGVmYXVsdFByZXZlbnRlZCIsIl9kZWZhdWx0IiwiZml4IiwiaGFuZGxlclF1ZXVlIiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsInNlbCIsImZpeEhvb2tzIiwia2V5SG9va3MiLCJvcmlnaW5hbCIsImNoYXJDb2RlIiwia2V5Q29kZSIsIm1vdXNlSG9va3MiLCJldmVudERvYyIsInBhZ2VYIiwiY2xpZW50WCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0IiwicGFnZVkiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwib3JpZ2luYWxFdmVudCIsImZpeEhvb2siLCJsb2FkIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJzaW11bGF0ZSIsImJ1YmJsZSIsImlzU2ltdWxhdGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInRpbWVTdGFtcCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJhdHRhY2hlcyIsIm9uIiwib25lIiwib3JpZ0ZuIiwicnhodG1sVGFnIiwicnRhZ05hbWUiLCJyaHRtbCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicnNjcmlwdFR5cGUiLCJyY2xlYW5TY3JpcHQiLCJ3cmFwTWFwIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwid3JhcCIsIm5vZGVzIiwiY3JlYXRlVGV4dE5vZGUiLCJjbGVhbkRhdGEiLCJhcHBlbmQiLCJkb21NYW5pcCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsImtlZXBEYXRhIiwiaHRtbCIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwiX2V2YWxVcmwiLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJpbnNlcnQiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiY29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSIsImNzc1RleHQiLCJjb250YWluZXIiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luUmlnaHQiLCJtYXJnaW5EaXYiLCJtYXJnaW5SaWdodCIsInN3YXAiLCJyZGlzcGxheXN3YXAiLCJycmVsTnVtIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzTnVtYmVyIiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiY3NzUHJvcHMiLCJmbG9hdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJzdWZmaXgiLCJleHBhbmRlZCIsInBhcnRzIiwidW5pdCIsInByb3BIb29rcyIsImVhc2VkIiwic3RlcCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwidGltZXJJZCIsInJmeG51bSIsInJydW4iLCIqIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwidHdlZW5lciIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJvcHREaXNhYmxlZCIsInJhZGlvVmFsdWUiLCJub2RlSG9vayIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwicHJvcE5hbWUiLCJhdHRyTmFtZXMiLCJwcm9wRml4IiwiZ2V0dGVyIiwicmZvY3VzYWJsZSIsInJlbW92ZVByb3AiLCJmb3IiLCJjbGFzcyIsIm5vdHhtbCIsImhhc0F0dHJpYnV0ZSIsInJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInByb2NlZWQiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwiYmluZCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsIm5vbmNlIiwicnF1ZXJ5IiwiSlNPTiIsInBhcnNlIiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyaGFzaCIsInJ0cyIsInJoZWFkZXJzIiwicmxvY2FsUHJvdG9jb2wiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwicnVybCIsInByZWZpbHRlcnMiLCJhbGxUeXBlcyIsImFqYXhMb2NhdGlvbiIsImFqYXhMb2NQYXJ0cyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwianNvbiIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJzdGF0dXMiLCJuYXRpdmVTdGF0dXNUZXh0IiwiaGVhZGVycyIsInN1Y2Nlc3MiLCJtb2RpZmllZCIsInN0YXR1c1RleHQiLCJ0aW1lb3V0VGltZXIiLCJ0cmFuc3BvcnQiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJpZk1vZGlmaWVkIiwiY2FjaGVVUkwiLCJjYWxsYmFja0NvbnRleHQiLCJzdGF0dXNDb2RlIiwiZmlyZUdsb2JhbHMiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwicmVzcG9uc2VIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwibG5hbWUiLCJvdmVycmlkZU1pbWVUeXBlIiwiYWJvcnQiLCJmaW5hbFRleHQiLCJtZXRob2QiLCJjcm9zc0RvbWFpbiIsInBhcmFtIiwiaGFzQ29udGVudCIsImJlZm9yZVNlbmQiLCJzZW5kIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsInRocm93cyIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJyMjAiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJJZCIsInhockNhbGxiYWNrcyIsInhoclN1Y2Nlc3NTdGF0dXMiLDAsMTIyMywieGhyU3VwcG9ydGVkIiwiY29ycyIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJyZXNwb25zZVRleHQiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwiX2xvYWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJsZWZ0IiwidXNpbmciLCJ3aW4iLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwic2l6ZSIsImFuZFNlbGYiLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIm1pbkVyciIsIkVycm9yQ29uc3RydWN0b3IiLCJwYXJhbVByZWZpeCIsIlNLSVBfSU5ERVhFUyIsInRlbXBsYXRlQXJncyIsIm1lc3NhZ2UiLCJ0ZW1wbGF0ZSIsInNoaWZ0ZWRJbmRleCIsInRvRGVidWdTdHJpbmciLCJpc0FycmF5TGlrZSIsImlzU3RyaW5nIiwianFMaXRlIiwiaXNOdW1iZXIiLCJpdGVtIiwiZm9yRWFjaCIsIml0ZXJhdG9yIiwiaXNQcmltaXRpdmUiLCJpc0JsYW5rT2JqZWN0IiwiZm9yRWFjaFNvcnRlZCIsInJldmVyc2VQYXJhbXMiLCJpdGVyYXRvckZuIiwibmV4dFVpZCIsInNldEhhc2hLZXkiLCJoIiwiJCRoYXNoS2V5IiwiYmFzZUV4dGVuZCIsImRzdCIsIm9ianMiLCJpaSIsImlzT2JqZWN0IiwiamoiLCJpc0RhdGUiLCJ2YWx1ZU9mIiwiaXNSZWdFeHAiLCJpc0VsZW1lbnQiLCJ0b0ludCIsInN0ciIsInBhcnNlSW50IiwiaW5oZXJpdCIsImNyZWF0ZSIsImlkZW50aXR5IiwidmFsdWVGbiIsImhhc0N1c3RvbVRvU3RyaW5nIiwiaXNVbmRlZmluZWQiLCJpc0RlZmluZWQiLCJnZXRQcm90b3R5cGVPZiIsImlzU2NvcGUiLCIkZXZhbEFzeW5jIiwiJHdhdGNoIiwiaXNGaWxlIiwiaXNGb3JtRGF0YSIsImlzQmxvYiIsImlzQm9vbGVhbiIsImlzUHJvbWlzZUxpa2UiLCJpc1R5cGVkQXJyYXkiLCJUWVBFRF9BUlJBWV9SRUdFWFAiLCJtYWtlTWFwIiwiaXRlbXMiLCJub2RlTmFtZV8iLCJlbGVtZW50IiwibG93ZXJjYXNlIiwiYXJyYXlSZW1vdmUiLCJhcnJheSIsImRlc3RpbmF0aW9uIiwiY29weVJlY3Vyc2UiLCJjb3B5RWxlbWVudCIsInN0YWNrU291cmNlIiwic3RhY2tEZXN0IiwibmdNaW5FcnIiLCJuZWVkc1JlY3Vyc2UiLCJnZXRUaW1lIiwibGFzdEluZGV4Iiwic2hhbGxvd0NvcHkiLCJjaGFyQXQiLCJlcXVhbHMiLCJvMSIsIm8yIiwia2V5U2V0IiwidDEiLCJ0MiIsImNyZWF0ZU1hcCIsImFycmF5MSIsImFycmF5MiIsInNsaWNlQXJncyIsInN0YXJ0SW5kZXgiLCJjdXJyeUFyZ3MiLCJ0b0pzb25SZXBsYWNlciIsInRvSnNvbiIsInByZXR0eSIsInN0cmluZ2lmeSIsImZyb21Kc29uIiwidGltZXpvbmVUb09mZnNldCIsInRpbWV6b25lIiwiZmFsbGJhY2siLCJyZXF1ZXN0ZWRUaW1lem9uZU9mZnNldCIsImlzTmFOIiwiYWRkRGF0ZU1pbnV0ZXMiLCJkYXRlIiwibWludXRlcyIsInNldE1pbnV0ZXMiLCJnZXRNaW51dGVzIiwiY29udmVydFRpbWV6b25lVG9Mb2NhbCIsInRpbWV6b25lT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzdGFydGluZ1RhZyIsImVsZW1IdG1sIiwiTk9ERV9UWVBFX1RFWFQiLCJ0cnlEZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZUtleVZhbHVlIiwia2V5VmFsdWUiLCJzcGxpdFBvaW50Iiwic3Vic3RyaW5nIiwidG9LZXlWYWx1ZSIsImFycmF5VmFsdWUiLCJlbmNvZGVVcmlRdWVyeSIsImVuY29kZVVyaVNlZ21lbnQiLCJwY3RFbmNvZGVTcGFjZXMiLCJnZXROZ0F0dHJpYnV0ZSIsIm5nQXR0ciIsIm5nQXR0clByZWZpeGVzIiwiYW5ndWxhckluaXQiLCJib290c3RyYXAiLCJhcHBFbGVtZW50IiwiY29uZmlnIiwiY2FuZGlkYXRlIiwicXVlcnlTZWxlY3RvciIsInN0cmljdERpIiwibW9kdWxlcyIsImRlZmF1bHRDb25maWciLCJkb0Jvb3RzdHJhcCIsImluamVjdG9yIiwiJHByb3ZpZGUiLCJkZWJ1Z0luZm9FbmFibGVkIiwiJGNvbXBpbGVQcm92aWRlciIsImNyZWF0ZUluamVjdG9yIiwiaW52b2tlIiwic2NvcGUiLCIkYXBwbHkiLCJOR19FTkFCTEVfREVCVUdfSU5GTyIsIk5HX0RFRkVSX0JPT1RTVFJBUCIsImFuZ3VsYXIiLCJyZXN1bWVCb290c3RyYXAiLCJleHRyYU1vZHVsZXMiLCJyZXN1bWVEZWZlcnJlZEJvb3RzdHJhcCIsInJlbG9hZFdpdGhEZWJ1Z0luZm8iLCJyZWxvYWQiLCJnZXRUZXN0YWJpbGl0eSIsInJvb3RFbGVtZW50Iiwic25ha2VfY2FzZSIsInNlcGFyYXRvciIsIlNOQUtFX0NBU0VfUkVHRVhQIiwiYmluZEpRdWVyeSIsIm9yaWdpbmFsQ2xlYW5EYXRhIiwiYmluZEpRdWVyeUZpcmVkIiwianFOYW1lIiwianEiLCJKUUxpdGVQcm90b3R5cGUiLCJpc29sYXRlU2NvcGUiLCJjb250cm9sbGVyIiwiaW5oZXJpdGVkRGF0YSIsInNraXBEZXN0cm95T25OZXh0SlF1ZXJ5Q2xlYW5EYXRhIiwiJGRlc3Ryb3kiLCJKUUxpdGUiLCJhc3NlcnRBcmciLCJyZWFzb24iLCJhc3NlcnRBcmdGbiIsImFjY2VwdEFycmF5QW5ub3RhdGlvbiIsImFzc2VydE5vdEhhc093blByb3BlcnR5IiwicGF0aCIsImJpbmRGblRvU2NvcGUiLCJsYXN0SW5zdGFuY2UiLCJnZXRCbG9ja05vZGVzIiwiYmxvY2tOb2RlcyIsImVuZE5vZGUiLCJzZXR1cE1vZHVsZUxvYWRlciIsImVuc3VyZSIsIiRpbmplY3Rvck1pbkVyciIsIiQkbWluRXJyIiwicmVxdWlyZXMiLCJjb25maWdGbiIsImludm9rZUxhdGVyIiwicHJvdmlkZXIiLCJpbnNlcnRNZXRob2QiLCJpbnZva2VRdWV1ZSIsIm1vZHVsZUluc3RhbmNlIiwiaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lIiwicmVjaXBlTmFtZSIsImZhY3RvcnlGdW5jdGlvbiIsIiQkbW9kdWxlTmFtZSIsImNvbmZpZ0Jsb2NrcyIsInJ1bkJsb2NrcyIsIl9pbnZva2VRdWV1ZSIsIl9jb25maWdCbG9ja3MiLCJfcnVuQmxvY2tzIiwic2VydmljZSIsImNvbnN0YW50IiwiZGVjb3JhdG9yIiwiZGlyZWN0aXZlIiwiYmxvY2siLCJzZXJpYWxpemVPYmplY3QiLCJzZWVuIiwicHVibGlzaEV4dGVybmFsQVBJIiwidXBwZXJjYXNlIiwiY2FsbGJhY2tzIiwiY291bnRlciIsIiQkY3NwIiwiY3NwIiwiYW5ndWxhck1vZHVsZSIsIiQkc2FuaXRpemVVcmkiLCIkJFNhbml0aXplVXJpUHJvdmlkZXIiLCIkQ29tcGlsZVByb3ZpZGVyIiwiaHRtbEFuY2hvckRpcmVjdGl2ZSIsImlucHV0RGlyZWN0aXZlIiwidGV4dGFyZWEiLCJmb3JtIiwiZm9ybURpcmVjdGl2ZSIsInNjcmlwdERpcmVjdGl2ZSIsInNlbGVjdERpcmVjdGl2ZSIsInN0eWxlRGlyZWN0aXZlIiwib3B0aW9uRGlyZWN0aXZlIiwibmdCaW5kIiwibmdCaW5kRGlyZWN0aXZlIiwibmdCaW5kSHRtbCIsIm5nQmluZEh0bWxEaXJlY3RpdmUiLCJuZ0JpbmRUZW1wbGF0ZSIsIm5nQmluZFRlbXBsYXRlRGlyZWN0aXZlIiwibmdDbGFzcyIsIm5nQ2xhc3NEaXJlY3RpdmUiLCJuZ0NsYXNzRXZlbiIsIm5nQ2xhc3NFdmVuRGlyZWN0aXZlIiwibmdDbGFzc09kZCIsIm5nQ2xhc3NPZGREaXJlY3RpdmUiLCJuZ0Nsb2FrIiwibmdDbG9ha0RpcmVjdGl2ZSIsIm5nQ29udHJvbGxlciIsIm5nQ29udHJvbGxlckRpcmVjdGl2ZSIsIm5nRm9ybSIsIm5nRm9ybURpcmVjdGl2ZSIsIm5nSGlkZSIsIm5nSGlkZURpcmVjdGl2ZSIsIm5nSWYiLCJuZ0lmRGlyZWN0aXZlIiwibmdJbmNsdWRlIiwibmdJbmNsdWRlRGlyZWN0aXZlIiwibmdJbml0IiwibmdJbml0RGlyZWN0aXZlIiwibmdOb25CaW5kYWJsZSIsIm5nTm9uQmluZGFibGVEaXJlY3RpdmUiLCJuZ1BsdXJhbGl6ZSIsIm5nUGx1cmFsaXplRGlyZWN0aXZlIiwibmdSZXBlYXQiLCJuZ1JlcGVhdERpcmVjdGl2ZSIsIm5nU2hvdyIsIm5nU2hvd0RpcmVjdGl2ZSIsIm5nU3R5bGUiLCJuZ1N0eWxlRGlyZWN0aXZlIiwibmdTd2l0Y2giLCJuZ1N3aXRjaERpcmVjdGl2ZSIsIm5nU3dpdGNoV2hlbiIsIm5nU3dpdGNoV2hlbkRpcmVjdGl2ZSIsIm5nU3dpdGNoRGVmYXVsdCIsIm5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSIsIm5nT3B0aW9ucyIsIm5nT3B0aW9uc0RpcmVjdGl2ZSIsIm5nVHJhbnNjbHVkZSIsIm5nVHJhbnNjbHVkZURpcmVjdGl2ZSIsIm5nTW9kZWwiLCJuZ01vZGVsRGlyZWN0aXZlIiwibmdMaXN0IiwibmdMaXN0RGlyZWN0aXZlIiwibmdDaGFuZ2UiLCJuZ0NoYW5nZURpcmVjdGl2ZSIsInBhdHRlcm5EaXJlY3RpdmUiLCJuZ1BhdHRlcm4iLCJyZXF1aXJlZCIsInJlcXVpcmVkRGlyZWN0aXZlIiwibmdSZXF1aXJlZCIsIm1pbmxlbmd0aCIsIm1pbmxlbmd0aERpcmVjdGl2ZSIsIm5nTWlubGVuZ3RoIiwibWF4bGVuZ3RoIiwibWF4bGVuZ3RoRGlyZWN0aXZlIiwibmdNYXhsZW5ndGgiLCJuZ1ZhbHVlIiwibmdWYWx1ZURpcmVjdGl2ZSIsIm5nTW9kZWxPcHRpb25zIiwibmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUiLCJuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZSIsIm5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzIiwibmdFdmVudERpcmVjdGl2ZXMiLCIkYW5jaG9yU2Nyb2xsIiwiJEFuY2hvclNjcm9sbFByb3ZpZGVyIiwiJGFuaW1hdGUiLCIkQW5pbWF0ZVByb3ZpZGVyIiwiJGFuaW1hdGVDc3MiLCIkQ29yZUFuaW1hdGVDc3NQcm92aWRlciIsIiQkYW5pbWF0ZVF1ZXVlIiwiJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIiLCIkJEFuaW1hdGVSdW5uZXIiLCIkJENvcmVBbmltYXRlUnVubmVyUHJvdmlkZXIiLCIkYnJvd3NlciIsIiRCcm93c2VyUHJvdmlkZXIiLCIkY2FjaGVGYWN0b3J5IiwiJENhY2hlRmFjdG9yeVByb3ZpZGVyIiwiJGNvbnRyb2xsZXIiLCIkQ29udHJvbGxlclByb3ZpZGVyIiwiJGRvY3VtZW50IiwiJERvY3VtZW50UHJvdmlkZXIiLCIkZXhjZXB0aW9uSGFuZGxlciIsIiRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIiLCIkZmlsdGVyIiwiJEZpbHRlclByb3ZpZGVyIiwiJCRmb3JjZVJlZmxvdyIsIiQkRm9yY2VSZWZsb3dQcm92aWRlciIsIiRpbnRlcnBvbGF0ZSIsIiRJbnRlcnBvbGF0ZVByb3ZpZGVyIiwiJGludGVydmFsIiwiJEludGVydmFsUHJvdmlkZXIiLCIkaHR0cCIsIiRIdHRwUHJvdmlkZXIiLCIkaHR0cFBhcmFtU2VyaWFsaXplciIsIiRIdHRwUGFyYW1TZXJpYWxpemVyUHJvdmlkZXIiLCIkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSIsIiRIdHRwUGFyYW1TZXJpYWxpemVySlFMaWtlUHJvdmlkZXIiLCIkaHR0cEJhY2tlbmQiLCIkSHR0cEJhY2tlbmRQcm92aWRlciIsIiR4aHJGYWN0b3J5IiwiJHhockZhY3RvcnlQcm92aWRlciIsIiRsb2NhdGlvbiIsIiRMb2NhdGlvblByb3ZpZGVyIiwiJGxvZyIsIiRMb2dQcm92aWRlciIsIiRwYXJzZSIsIiRQYXJzZVByb3ZpZGVyIiwiJHJvb3RTY29wZSIsIiRSb290U2NvcGVQcm92aWRlciIsIiRxIiwiJFFQcm92aWRlciIsIiQkcSIsIiQkUVByb3ZpZGVyIiwiJHNjZSIsIiRTY2VQcm92aWRlciIsIiRzY2VEZWxlZ2F0ZSIsIiRTY2VEZWxlZ2F0ZVByb3ZpZGVyIiwiJHNuaWZmZXIiLCIkU25pZmZlclByb3ZpZGVyIiwiJHRlbXBsYXRlQ2FjaGUiLCIkVGVtcGxhdGVDYWNoZVByb3ZpZGVyIiwiJHRlbXBsYXRlUmVxdWVzdCIsIiRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlciIsIiQkdGVzdGFiaWxpdHkiLCIkJFRlc3RhYmlsaXR5UHJvdmlkZXIiLCIkdGltZW91dCIsIiRUaW1lb3V0UHJvdmlkZXIiLCIkd2luZG93IiwiJFdpbmRvd1Byb3ZpZGVyIiwiJCRyQUYiLCIkJFJBRlByb3ZpZGVyIiwiJCRqcUxpdGUiLCIkJGpxTGl0ZVByb3ZpZGVyIiwiJCRIYXNoTWFwIiwiJCRIYXNoTWFwUHJvdmlkZXIiLCIkJGNvb2tpZVJlYWRlciIsIiQkQ29va2llUmVhZGVyUHJvdmlkZXIiLCJqcU5leHRJZCIsImpxSWQiLCJTUEVDSUFMX0NIQVJTX1JFR0VYUCIsIk1PWl9IQUNLX1JFR0VYUCIsImpxTGl0ZUlzVGV4dE5vZGUiLCJIVE1MX1JFR0VYUCIsImpxTGl0ZUFjY2VwdHNEYXRhIiwiTk9ERV9UWVBFX0VMRU1FTlQiLCJOT0RFX1RZUEVfRE9DVU1FTlQiLCJqcUxpdGVIYXNEYXRhIiwianFDYWNoZSIsIm5nMzM5IiwianFMaXRlQnVpbGRGcmFnbWVudCIsIlRBR19OQU1FX1JFR0VYUCIsIlhIVE1MX1RBR19SRUdFWFAiLCJqcUxpdGVQYXJzZUhUTUwiLCJTSU5HTEVfVEFHX1JFR0VYUCIsImFyZ0lzU3RyaW5nIiwianFMaXRlTWluRXJyIiwianFMaXRlQWRkTm9kZXMiLCJqcUxpdGVDbG9uZSIsImpxTGl0ZURlYWxvYyIsIm9ubHlEZXNjZW5kYW50cyIsImpxTGl0ZVJlbW92ZURhdGEiLCJkZXNjZW5kYW50cyIsImpxTGl0ZU9mZiIsInVuc3VwcG9ydGVkIiwiZXhwYW5kb1N0b3JlIiwianFMaXRlRXhwYW5kb1N0b3JlIiwicmVtb3ZlSGFuZGxlciIsImxpc3RlbmVyRm5zIiwicmVtb3ZlRXZlbnRMaXN0ZW5lckZuIiwiTU9VU0VfRVZFTlRfTUFQIiwiZXhwYW5kb0lkIiwiY3JlYXRlSWZOZWNlc3NhcnkiLCJqcUxpdGVEYXRhIiwiaXNTaW1wbGVTZXR0ZXIiLCJpc1NpbXBsZUdldHRlciIsIm1hc3NHZXR0ZXIiLCJqcUxpdGVIYXNDbGFzcyIsImpxTGl0ZVJlbW92ZUNsYXNzIiwiY3NzQ2xhc3NlcyIsImNzc0NsYXNzIiwianFMaXRlQWRkQ2xhc3MiLCJleGlzdGluZ0NsYXNzZXMiLCJqcUxpdGVDb250cm9sbGVyIiwianFMaXRlSW5oZXJpdGVkRGF0YSIsIm5hbWVzIiwiTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UIiwiaG9zdCIsImpxTGl0ZUVtcHR5IiwianFMaXRlUmVtb3ZlIiwianFMaXRlRG9jdW1lbnRMb2FkZWQiLCJhY3Rpb24iLCJnZXRCb29sZWFuQXR0ck5hbWUiLCJib29sZWFuQXR0ciIsIkJPT0xFQU5fQVRUUiIsIkJPT0xFQU5fRUxFTUVOVFMiLCJnZXRBbGlhc2VkQXR0ck5hbWUiLCJBTElBU0VEX0FUVFIiLCJjcmVhdGVFdmVudEhhbmRsZXIiLCJldmVudEhhbmRsZXIiLCJldmVudEZucyIsImV2ZW50Rm5zTGVuZ3RoIiwiaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwib3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJoYW5kbGVyV3JhcHBlciIsInNwZWNpYWxIYW5kbGVyV3JhcHBlciIsImRlZmF1bHRIYW5kbGVyV3JhcHBlciIsInNwZWNpYWxNb3VzZUhhbmRsZXJXcmFwcGVyIiwianFMaXRlQ29udGFpbnMiLCIkZ2V0IiwiaGFzaEtleSIsIm5leHRVaWRGbiIsIm9ialR5cGUiLCJIYXNoTWFwIiwiaXNvbGF0ZWRVaWQiLCJwdXQiLCJhbm9uRm4iLCJmblRleHQiLCJTVFJJUF9DT01NRU5UUyIsIkZOX0FSR1MiLCJhbm5vdGF0ZSIsIiRpbmplY3QiLCJhcmdEZWNsIiwiRk5fQVJHX1NQTElUIiwiRk5fQVJHIiwidW5kZXJzY29yZSIsIm1vZHVsZXNUb0xvYWQiLCJzdXBwb3J0T2JqZWN0IiwicHJvdmlkZXJfIiwicHJvdmlkZXJJbmplY3RvciIsImluc3RhbnRpYXRlIiwicHJvdmlkZXJDYWNoZSIsInByb3ZpZGVyU3VmZml4IiwiZW5mb3JjZVJldHVyblZhbHVlIiwiaW5zdGFuY2VJbmplY3RvciIsImZhY3RvcnlGbiIsImVuZm9yY2UiLCIkaW5qZWN0b3IiLCJpbnN0YW5jZUNhY2hlIiwic2VydmljZU5hbWUiLCJkZWNvckZuIiwib3JpZ1Byb3ZpZGVyIiwib3JpZyRnZXQiLCJvcmlnSW5zdGFuY2UiLCIkZGVsZWdhdGUiLCJsb2FkTW9kdWxlcyIsIm1vZHVsZUZuIiwicnVuSW52b2tlUXVldWUiLCJpbnZva2VBcmdzIiwibG9hZGVkTW9kdWxlcyIsImNyZWF0ZUludGVybmFsSW5qZWN0b3IiLCJnZXRTZXJ2aWNlIiwiY2FsbGVyIiwiSU5TVEFOVElBVElORyIsImxvY2FscyIsIiQkYW5ub3RhdGUiLCJUeXBlIiwiaW5zdGFuY2UiLCJyZXR1cm5lZFZhbHVlIiwiYXV0b1Njcm9sbGluZ0VuYWJsZWQiLCJkaXNhYmxlQXV0b1Njcm9sbGluZyIsImdldEZpcnN0QW5jaG9yIiwic29tZSIsImdldFlPZmZzZXQiLCJzY3JvbGwiLCJ5T2Zmc2V0IiwiYm90dG9tIiwic2Nyb2xsSW50b1ZpZXciLCJlbGVtVG9wIiwic2Nyb2xsQnkiLCJlbG0iLCJuZXdWYWwiLCJvbGRWYWwiLCJtZXJnZUNsYXNzZXMiLCJleHRyYWN0RWxlbWVudE5vZGUiLCJFTEVNRU5UX05PREUiLCJzcGxpdENsYXNzZXMiLCJrbGFzcyIsInByZXBhcmVBbmltYXRlT3B0aW9ucyIsIkJyb3dzZXIiLCJjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCIsIm91dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwib3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzIiwiZ2V0SGFzaCIsInN1YnN0ciIsImNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlIiwicGVuZGluZ0xvY2F0aW9uIiwiY2FjaGVTdGF0ZSIsImZpcmVVcmxDaGFuZ2UiLCJnZXRDdXJyZW50U3RhdGUiLCJoaXN0b3J5IiwiY2FjaGVkU3RhdGUiLCJsYXN0Q2FjaGVkU3RhdGUiLCJsYXN0QnJvd3NlclVybCIsImxhc3RIaXN0b3J5U3RhdGUiLCJ1cmxDaGFuZ2VMaXN0ZW5lcnMiLCJsaXN0ZW5lciIsInBlbmRpbmdEZWZlcklkcyIsImlzTW9jayIsIiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QiLCIkJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwibm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyIsImJhc2VFbGVtZW50Iiwic2FtZVN0YXRlIiwic2FtZUJhc2UiLCJzdHJpcEhhc2giLCJ1cmxDaGFuZ2VJbml0Iiwib25VcmxDaGFuZ2UiLCIkJGFwcGxpY2F0aW9uRGVzdHJveWVkIiwiJCRjaGVja1VybENoYW5nZSIsImJhc2VIcmVmIiwidGltZW91dElkIiwiY2FuY2VsIiwiZGVmZXJJZCIsImNhY2hlRmFjdG9yeSIsImNhY2hlSWQiLCJyZWZyZXNoIiwiZW50cnkiLCJmcmVzaEVuZCIsInN0YWxlRW5kIiwibGluayIsIm5leHRFbnRyeSIsInByZXZFbnRyeSIsImNhY2hlcyIsInN0YXRzIiwiY2FwYWNpdHkiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJscnVIYXNoIiwibHJ1RW50cnkiLCJyZW1vdmVBbGwiLCJkZXN0cm95IiwiaW5mbyIsIiQkc2FuaXRpemVVcmlQcm92aWRlciIsInBhcnNlSXNvbGF0ZUJpbmRpbmdzIiwiZGlyZWN0aXZlTmFtZSIsImlzQ29udHJvbGxlciIsIkxPQ0FMX1JFR0VYUCIsImJpbmRpbmdzIiwiZGVmaW5pdGlvbiIsInNjb3BlTmFtZSIsIiRjb21waWxlTWluRXJyIiwibW9kZSIsIm9wdGlvbmFsIiwiYXR0ck5hbWUiLCJwYXJzZURpcmVjdGl2ZUJpbmRpbmdzIiwiYmluZFRvQ29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImlkZW50aWZpZXJGb3JDb250cm9sbGVyIiwiYXNzZXJ0VmFsaWREaXJlY3RpdmVOYW1lIiwiaGFzRGlyZWN0aXZlcyIsIlN1ZmZpeCIsIkNPTU1FTlRfRElSRUNUSVZFX1JFR0VYUCIsIkNMQVNTX0RJUkVDVElWRV9SRUdFWFAiLCJBTExfT1JfTk9USElOR19BVFRSUyIsIlJFUVVJUkVfUFJFRklYX1JFR0VYUCIsIkVWRU5UX0hBTkRMRVJfQVRUUl9SRUdFWFAiLCJyZWdpc3RlckRpcmVjdGl2ZSIsImRpcmVjdGl2ZUZhY3RvcnkiLCJkaXJlY3RpdmVzIiwicHJpb3JpdHkiLCJyZXF1aXJlIiwicmVzdHJpY3QiLCIkJGJpbmRpbmdzIiwiJCRpc29sYXRlQmluZGluZ3MiLCJhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCIsInJlZ2V4cCIsImltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCIsInNhZmVBZGRDbGFzcyIsIiRlbGVtZW50IiwiJGNvbXBpbGVOb2RlcyIsInRyYW5zY2x1ZGVGbiIsIm1heFByaW9yaXR5IiwiaWdub3JlRGlyZWN0aXZlIiwicHJldmlvdXNDb21waWxlQ29udGV4dCIsImNvbXBvc2l0ZUxpbmtGbiIsImNvbXBpbGVOb2RlcyIsIiQkYWRkU2NvcGVDbGFzcyIsImNsb25lQ29ubmVjdEZuIiwibmVlZHNOZXdTY29wZSIsIiRwYXJlbnQiLCIkbmV3IiwicGFyZW50Qm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlQ29udHJvbGxlcnMiLCJmdXR1cmVQYXJlbnRFbGVtZW50IiwiJCRib3VuZFRyYW5zY2x1ZGUiLCJkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzIiwiJGxpbmtOb2RlIiwid3JhcFRlbXBsYXRlIiwiY29udHJvbGxlck5hbWUiLCIkJGFkZFNjb3BlSW5mbyIsInBhcmVudEVsZW1lbnQiLCJub2RlTGlzdCIsIiRyb290RWxlbWVudCIsIm5vZGVMaW5rRm4iLCJjaGlsZExpbmtGbiIsImNoaWxkU2NvcGUiLCJjaGlsZEJvdW5kVHJhbnNjbHVkZUZuIiwic3RhYmxlTm9kZUxpc3QiLCJub2RlTGlua0ZuRm91bmQiLCJub2RlTGlzdExlbmd0aCIsImxpbmtGbnMiLCJ0cmFuc2NsdWRlT25UaGlzRWxlbWVudCIsImNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuIiwidHJhbnNjbHVkZSIsInRlbXBsYXRlT25UaGlzRWxlbWVudCIsImxpbmtGbkZvdW5kIiwiQXR0cmlidXRlcyIsImNvbGxlY3REaXJlY3RpdmVzIiwiYXBwbHlEaXJlY3RpdmVzVG9Ob2RlIiwiJCRlbGVtZW50IiwidGVybWluYWwiLCJwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuIiwiYm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlZFNjb3BlIiwiY2xvbmVGbiIsImNvbnRyb2xsZXJzIiwiY29udGFpbmluZ1Njb3BlIiwiJCR0cmFuc2NsdWRlZCIsImF0dHJzTWFwIiwiJGF0dHIiLCJhZGREaXJlY3RpdmUiLCJkaXJlY3RpdmVOb3JtYWxpemUiLCJuTmFtZSIsIm5nQXR0ck5hbWUiLCJpc05nQXR0ciIsIm5BdHRycyIsImF0dHJTdGFydE5hbWUiLCJhdHRyRW5kTmFtZSIsIk5HX0FUVFJfQklORElORyIsIlBSRUZJWF9SRUdFWFAiLCJtdWx0aUVsZW1lbnRNYXRjaCIsIk1VTFRJX0VMRU1FTlRfRElSX1JFIiwiZGlyZWN0aXZlSXNNdWx0aUVsZW1lbnQiLCJhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUiLCJhbmltVmFsIiwibXNpZSIsImFkZFRleHRJbnRlcnBvbGF0ZURpcmVjdGl2ZSIsIk5PREVfVFlQRV9DT01NRU5UIiwiYnlQcmlvcml0eSIsImdyb3VwU2NhbiIsImF0dHJTdGFydCIsImF0dHJFbmQiLCJkZXB0aCIsImdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyIiwibGlua0ZuIiwiY29tcGlsZU5vZGUiLCJ0ZW1wbGF0ZUF0dHJzIiwianFDb2xsZWN0aW9uIiwib3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlIiwicHJlTGlua0ZucyIsInBvc3RMaW5rRm5zIiwiYWRkTGlua0ZucyIsInByZSIsInBvc3QiLCJuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUiLCIkJGlzb2xhdGVTY29wZSIsImNsb25lQW5kQW5ub3RhdGVGbiIsImdldENvbnRyb2xsZXJzIiwiZWxlbWVudENvbnRyb2xsZXJzIiwiaW5oZXJpdFR5cGUiLCJkYXRhTmFtZSIsInNldHVwQ29udHJvbGxlcnMiLCJjb250cm9sbGVyRGlyZWN0aXZlcyIsImNvbnRyb2xsZXJLZXkiLCIkc2NvcGUiLCIkYXR0cnMiLCIkdHJhbnNjbHVkZSIsImNvbnRyb2xsZXJJbnN0YW5jZSIsImhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlIiwibGlua05vZGUiLCJjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZSIsImNsb25lQXR0YWNoRm4iLCJzY29wZVRvQ2hpbGQiLCJjb250cm9sbGVyU2NvcGUiLCJyZW1vdmVTY29wZUJpbmRpbmdXYXRjaGVzIiwicmVtb3ZlQ29udHJvbGxlckJpbmRpbmdXYXRjaGVzIiwibmV3U2NvcGVEaXJlY3RpdmUiLCJ0ZW1wbGF0ZURpcmVjdGl2ZSIsIiQkb3JpZ2luYWxEaXJlY3RpdmUiLCJpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3MiLCIkb24iLCJjb250cm9sbGVyRGlyZWN0aXZlIiwiY29udHJvbGxlclJlc3VsdCIsImludm9rZUxpbmtGbiIsInRlbXBsYXRlVXJsIiwiJHRlbXBsYXRlIiwiZGlyZWN0aXZlVmFsdWUiLCJ0ZXJtaW5hbFByaW9yaXR5Iiwibm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSIsImhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUiLCJoYXNUZW1wbGF0ZSIsIiRjb21waWxlTm9kZSIsInJlcGxhY2VEaXJlY3RpdmUiLCJjaGlsZFRyYW5zY2x1ZGVGbiIsIiQkc3RhcnQiLCIkJGVuZCIsImFzc2VydE5vRHVwbGljYXRlIiwiJCR0bGIiLCIkJG5ld1Njb3BlIiwiZGVub3JtYWxpemVUZW1wbGF0ZSIsInJlbW92ZUNvbW1lbnRzIiwidGVtcGxhdGVOYW1lc3BhY2UiLCJuZXdUZW1wbGF0ZUF0dHJzIiwidGVtcGxhdGVEaXJlY3RpdmVzIiwidW5wcm9jZXNzZWREaXJlY3RpdmVzIiwibWFya0RpcmVjdGl2ZVNjb3BlIiwibWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXMiLCJjb21waWxlVGVtcGxhdGVVcmwiLCJuZXdTY29wZSIsInREaXJlY3RpdmVzIiwic3RhcnRBdHRyTmFtZSIsImVuZEF0dHJOYW1lIiwibXVsdGlFbGVtZW50Iiwic3JjQXR0ciIsImRzdEF0dHIiLCIkc2V0IiwidEF0dHJzIiwiYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4iLCJhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4iLCJsaW5rUXVldWUiLCJiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlIiwib3JpZ0FzeW5jRGlyZWN0aXZlIiwiZGVyaXZlZFN5bmNEaXJlY3RpdmUiLCJ0ZW1wVGVtcGxhdGVBdHRycyIsImJlZm9yZVRlbXBsYXRlTGlua05vZGUiLCJsaW5rUm9vdEVsZW1lbnQiLCIkJGRlc3Ryb3llZCIsIm9sZENsYXNzZXMiLCJpZ25vcmVDaGlsZExpbmtGbiIsInByZXZpb3VzRGlyZWN0aXZlIiwid3JhcE1vZHVsZU5hbWVJZkRlZmluZWQiLCJtb2R1bGVOYW1lIiwiaW50ZXJwb2xhdGVGbiIsInRlbXBsYXRlTm9kZSIsInRlbXBsYXRlTm9kZVBhcmVudCIsImhhc0NvbXBpbGVQYXJlbnQiLCIkJGFkZEJpbmRpbmdDbGFzcyIsIiQkYWRkQmluZGluZ0luZm8iLCJleHByZXNzaW9ucyIsIndyYXBwZXIiLCJnZXRUcnVzdGVkQ29udGV4dCIsImF0dHJOb3JtYWxpemVkTmFtZSIsIkhUTUwiLCJSRVNPVVJDRV9VUkwiLCJhbGxPck5vdGhpbmciLCJ0cnVzdGVkQ29udGV4dCIsIiQkb2JzZXJ2ZXJzIiwibmV3VmFsdWUiLCIkJGludGVyIiwiJCRzY29wZSIsIm9sZFZhbHVlIiwiJHVwZGF0ZUNsYXNzIiwiZWxlbWVudHNUb1JlbW92ZSIsIm5ld05vZGUiLCJmaXJzdEVsZW1lbnRUb1JlbW92ZSIsInJlbW92ZUNvdW50IiwiajIiLCJrIiwia2siLCJhbm5vdGF0aW9uIiwicmVtb3ZlV2F0Y2hDb2xsZWN0aW9uIiwibGFzdFZhbHVlIiwicGFyZW50R2V0IiwicGFyZW50U2V0IiwiJG9ic2VydmUiLCJsaXRlcmFsIiwiYXNzaWduIiwicGFyZW50VmFsdWVXYXRjaCIsInBhcmVudFZhbHVlIiwiJHN0YXRlZnVsIiwicmVtb3ZlV2F0Y2giLCIkd2F0Y2hDb2xsZWN0aW9uIiwiYXR0cmlidXRlc1RvQ29weSIsIiRub3JtYWxpemUiLCIkYWRkQ2xhc3MiLCJjbGFzc1ZhbCIsIiRyZW1vdmVDbGFzcyIsIm5ld0NsYXNzZXMiLCJ0b0FkZCIsInRva2VuRGlmZmVyZW5jZSIsInRvUmVtb3ZlIiwid3JpdGVBdHRyIiwiYm9vbGVhbktleSIsImFsaWFzZWRLZXkiLCJvYnNlcnZlciIsInRyaW1tZWRTcmNzZXQiLCJzcmNQYXR0ZXJuIiwicmF3VXJpcyIsIm5iclVyaXNXaXRoMnBhcnRzIiwiZmxvb3IiLCJpbm5lcklkeCIsImxhc3RUdXBsZSIsImxpc3RlbmVycyIsInN0YXJ0U3ltYm9sIiwiZW5kU3ltYm9sIiwiYmluZGluZyIsImlzb2xhdGVkIiwibm9UZW1wbGF0ZSIsInN0cjEiLCJzdHIyIiwidG9rZW5zMSIsInRva2VuczIiLCJvdXRlciIsImpxTm9kZXMiLCJpZGVudCIsIkNOVFJMX1JFRyIsImdsb2JhbHMiLCJyZWdpc3RlciIsImFsbG93R2xvYmFscyIsImFkZElkZW50aWZpZXIiLCJleHByZXNzaW9uIiwibGF0ZXIiLCIkY29udHJvbGxlck1pbkVyciIsImNvbnRyb2xsZXJQcm90b3R5cGUiLCJleGNlcHRpb24iLCJjYXVzZSIsInNlcmlhbGl6ZVZhbHVlIiwidG9JU09TdHJpbmciLCJ0b1NlcmlhbGl6ZSIsInRvcExldmVsIiwiZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybSIsInRlbXBEYXRhIiwiSlNPTl9QUk9URUNUSU9OX1BSRUZJWCIsIkFQUExJQ0FUSU9OX0pTT04iLCJpc0pzb25MaWtlIiwianNvblN0YXJ0IiwiSlNPTl9TVEFSVCIsIkpTT05fRU5EUyIsInBhcnNlSGVhZGVycyIsImZpbGxJblBhcnNlZCIsImxpbmUiLCJoZWFkZXJWYWwiLCJoZWFkZXJLZXkiLCJoZWFkZXJzR2V0dGVyIiwiaGVhZGVyc09iaiIsInRyYW5zZm9ybURhdGEiLCJkZWZhdWx0cyIsInRyYW5zZm9ybVJlc3BvbnNlIiwidHJhbnNmb3JtUmVxdWVzdCIsImQiLCJjb21tb24iLCJBY2NlcHQiLCJDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiIsInBhdGNoIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsInBhcmFtU2VyaWFsaXplciIsInVzZUFwcGx5QXN5bmMiLCJ1c2VMZWdhY3lQcm9taXNlIiwidXNlTGVnYWN5UHJvbWlzZUV4dGVuc2lvbnMiLCJpbnRlcmNlcHRvckZhY3RvcmllcyIsImludGVyY2VwdG9ycyIsInJlcXVlc3RDb25maWciLCJyZXNwIiwiZXhlY3V0ZUhlYWRlckZucyIsImhlYWRlckNvbnRlbnQiLCJwcm9jZXNzZWRIZWFkZXJzIiwiaGVhZGVyRm4iLCJtZXJnZUhlYWRlcnMiLCJkZWZIZWFkZXJOYW1lIiwibG93ZXJjYXNlRGVmSGVhZGVyTmFtZSIsInJlcUhlYWRlck5hbWUiLCJkZWZIZWFkZXJzIiwicmVxSGVhZGVycyIsImRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uIiwic2VydmVyUmVxdWVzdCIsInJlcURhdGEiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZW5kUmVxIiwiY2hhaW4iLCJyZXZlcnNlZEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwicmVxdWVzdCIsInJlcXVlc3RFcnJvciIsInJlc3BvbnNlRXJyb3IiLCJ0aGVuRm4iLCJyZWplY3RGbiIsIiRodHRwTWluRXJyTGVnYWN5Rm4iLCJjcmVhdGVTaG9ydE1ldGhvZHMiLCJjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YSIsImhlYWRlcnNTdHJpbmciLCJyZXNvbHZlSHR0cFByb21pc2UiLCJyZXNvbHZlUHJvbWlzZSIsIiRhcHBseUFzeW5jIiwiJCRwaGFzZSIsInJlc29sdmVQcm9taXNlV2l0aFJlc3VsdCIsInJlbW92ZVBlbmRpbmdSZXEiLCJwZW5kaW5nUmVxdWVzdHMiLCJjYWNoZWRSZXNwIiwiYnVpbGRVcmwiLCJkZWZhdWx0Q2FjaGUiLCJ4c3JmVmFsdWUiLCJ1cmxJc1NhbWVPcmlnaW4iLCJyZXNwb25zZVR5cGUiLCJzZXJpYWxpemVkUGFyYW1zIiwiaW50ZXJjZXB0b3JGYWN0b3J5IiwiY3JlYXRlSHR0cEJhY2tlbmQiLCJjcmVhdGVYaHIiLCIkYnJvd3NlckRlZmVyIiwicmF3RG9jdW1lbnQiLCJqc29ucFJlcSIsImNhbGxiYWNrSWQiLCJjYWxsZWQiLCJhZGRFdmVudExpc3RlbmVyRm4iLCJ0aW1lb3V0UmVxdWVzdCIsImpzb25wRG9uZSIsImNvbXBsZXRlUmVxdWVzdCIsInVybFJlc29sdmUiLCJwcm90b2NvbCIsIm9uYWJvcnQiLCJlc2NhcGUiLCJjaCIsInVuZXNjYXBlVGV4dCIsImVzY2FwZWRTdGFydFJlZ2V4cCIsImVzY2FwZWRFbmRSZWdleHAiLCJtdXN0SGF2ZUV4cHJlc3Npb24iLCJwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yIiwiZ2V0VmFsdWUiLCIkaW50ZXJwb2xhdGVNaW5FcnIiLCJpbnRlcnIiLCJlbmRJbmRleCIsImV4cCIsInBhcnNlRm5zIiwidGV4dExlbmd0aCIsImV4cHJlc3Npb25Qb3NpdGlvbnMiLCJzdGFydFN5bWJvbExlbmd0aCIsImVuZFN5bWJvbExlbmd0aCIsInRocm93Tm9jb25jYXQiLCJjb21wdXRlIiwiZ2V0VHJ1c3RlZCIsIiQkd2F0Y2hEZWxlZ2F0ZSIsIiR3YXRjaEdyb3VwIiwib2xkVmFsdWVzIiwiY3VyclZhbHVlIiwiaW52b2tlQXBwbHkiLCJoYXNQYXJhbXMiLCJpdGVyYXRpb24iLCJza2lwQXBwbHkiLCIkJGludGVydmFsSWQiLCJpbnRlcnZhbHMiLCJlbmNvZGVQYXRoIiwic2VnbWVudHMiLCJwYXJzZUFic29sdXRlVXJsIiwiYWJzb2x1dGVVcmwiLCJsb2NhdGlvbk9iaiIsInBhcnNlZFVybCIsIiQkcHJvdG9jb2wiLCIkJGhvc3QiLCJob3N0bmFtZSIsIiQkcG9ydCIsInBvcnQiLCJERUZBVUxUX1BPUlRTIiwicGFyc2VBcHBVcmwiLCJyZWxhdGl2ZVVybCIsInByZWZpeGVkIiwiJCRwYXRoIiwicGF0aG5hbWUiLCIkJHNlYXJjaCIsInNlYXJjaCIsIiQkaGFzaCIsImJlZ2luc1dpdGgiLCJiZWdpbiIsIndob2xlIiwidHJpbUVtcHR5SGFzaCIsInN0cmlwRmlsZSIsImxhc3RJbmRleE9mIiwic2VydmVyQmFzZSIsIkxvY2F0aW9uSHRtbDVVcmwiLCJhcHBCYXNlIiwiYXBwQmFzZU5vRmlsZSIsImJhc2VQcmVmaXgiLCIkJGh0bWw1IiwiJCRwYXJzZSIsInBhdGhVcmwiLCIkbG9jYXRpb25NaW5FcnIiLCIkJGNvbXBvc2UiLCIkJHVybCIsIiQkYWJzVXJsIiwiJCRwYXJzZUxpbmtVcmwiLCJyZWxIcmVmIiwiYXBwVXJsIiwicHJldkFwcFVybCIsInJld3JpdHRlblVybCIsIkxvY2F0aW9uSGFzaGJhbmdVcmwiLCJoYXNoUHJlZml4IiwicmVtb3ZlV2luZG93c0RyaXZlTmFtZSIsImZpcnN0UGF0aFNlZ21lbnRNYXRjaCIsIndpbmRvd3NGaWxlUGF0aEV4cCIsIndpdGhvdXRIYXNoVXJsIiwid2l0aG91dEJhc2VVcmwiLCJMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybCIsImxvY2F0aW9uR2V0dGVyIiwicHJvcGVydHkiLCJsb2NhdGlvbkdldHRlclNldHRlciIsInByZXByb2Nlc3MiLCJodG1sNU1vZGUiLCJyZXF1aXJlQmFzZSIsInJld3JpdGVMaW5rcyIsInNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2siLCJvbGRVcmwiLCJvbGRTdGF0ZSIsIiQkc3RhdGUiLCJhZnRlckxvY2F0aW9uQ2hhbmdlIiwiJGJyb2FkY2FzdCIsImFic1VybCIsIkxvY2F0aW9uTW9kZSIsImluaXRpYWxVcmwiLCJJR05PUkVfVVJJX1JFR0VYUCIsImN0cmxLZXkiLCJtZXRhS2V5Iiwic2hpZnRLZXkiLCJhYnNIcmVmIiwiaW5pdGlhbGl6aW5nIiwibmV3VXJsIiwibmV3U3RhdGUiLCIkZGlnZXN0IiwiY3VycmVudFJlcGxhY2UiLCIkJHJlcGxhY2UiLCJ1cmxPclN0YXRlQ2hhbmdlZCIsImRlYnVnIiwiZGVidWdFbmFibGVkIiwiZm9ybWF0RXJyb3IiLCJzb3VyY2VVUkwiLCJjb25zb2xlTG9nIiwiY29uc29sZSIsImxvZ0ZuIiwibG9nIiwiaGFzQXBwbHkiLCJhcmcxIiwiYXJnMiIsIndhcm4iLCJlbnN1cmVTYWZlTWVtYmVyTmFtZSIsImZ1bGxFeHByZXNzaW9uIiwiJHBhcnNlTWluRXJyIiwiZ2V0U3RyaW5nVmFsdWUiLCJlbnN1cmVTYWZlT2JqZWN0IiwiZW5zdXJlU2FmZUZ1bmN0aW9uIiwiQ0FMTCIsIkFQUExZIiwiQklORCIsImVuc3VyZVNhZmVBc3NpZ25Db250ZXh0IiwiRnVuY3Rpb24iLCJpZkRlZmluZWQiLCJwbHVzRm4iLCJyIiwiaXNTdGF0ZWxlc3MiLCJmaWx0ZXJOYW1lIiwiZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyIsImFzdCIsImFsbENvbnN0YW50cyIsImFyZ3NUb1dhdGNoIiwiQVNUIiwiUHJvZ3JhbSIsIkxpdGVyYWwiLCJ0b1dhdGNoIiwiVW5hcnlFeHByZXNzaW9uIiwiQmluYXJ5RXhwcmVzc2lvbiIsInJpZ2h0IiwiTG9naWNhbEV4cHJlc3Npb24iLCJDb25kaXRpb25hbEV4cHJlc3Npb24iLCJhbHRlcm5hdGUiLCJjb25zZXF1ZW50IiwiSWRlbnRpZmllciIsIk1lbWJlckV4cHJlc3Npb24iLCJDYWxsRXhwcmVzc2lvbiIsImNhbGxlZSIsIkFzc2lnbm1lbnRFeHByZXNzaW9uIiwiQXJyYXlFeHByZXNzaW9uIiwiT2JqZWN0RXhwcmVzc2lvbiIsIlRoaXNFeHByZXNzaW9uIiwiZ2V0SW5wdXRzIiwibGFzdEV4cHJlc3Npb24iLCJpc0Fzc2lnbmFibGUiLCJhc3NpZ25hYmxlQVNUIiwiTkdWYWx1ZVBhcmFtZXRlciIsImlzTGl0ZXJhbCIsImlzQ29uc3RhbnQiLCJBU1RDb21waWxlciIsImFzdEJ1aWxkZXIiLCJBU1RJbnRlcnByZXRlciIsImlzUG9zc2libHlEYW5nZXJvdXNNZW1iZXJOYW1lIiwiZ2V0VmFsdWVPZiIsIm9iamVjdFZhbHVlT2YiLCJjYWNoZURlZmF1bHQiLCJjYWNoZUV4cGVuc2l2ZSIsImV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2siLCJvbGRWYWx1ZU9mVmFsdWUiLCJpbnB1dHNXYXRjaERlbGVnYXRlIiwib2JqZWN0RXF1YWxpdHkiLCJwYXJzZWRFeHByZXNzaW9uIiwicHJldHR5UHJpbnRFeHByZXNzaW9uIiwibGFzdFJlc3VsdCIsImlucHV0RXhwcmVzc2lvbnMiLCJpbnB1dHMiLCJvbGRJbnB1dFZhbHVlT2YiLCJuZXdJbnB1dFZhbHVlIiwib2xkSW5wdXRWYWx1ZU9mVmFsdWVzIiwib2xkSW5wdXRWYWx1ZXMiLCJjaGFuZ2VkIiwib25lVGltZVdhdGNoRGVsZWdhdGUiLCJ1bndhdGNoIiwiJCRwb3N0RGlnZXN0Iiwib25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlIiwiaXNBbGxEZWZpbmVkIiwiYWxsRGVmaW5lZCIsImNvbnN0YW50V2F0Y2hEZWxlZ2F0ZSIsImFkZEludGVyY2VwdG9yIiwiaW50ZXJjZXB0b3JGbiIsIndhdGNoRGVsZWdhdGUiLCJ1c2VJbnB1dHMiLCJyZWd1bGFyV2F0Y2giLCJub1Vuc2FmZUV2YWwiLCIkcGFyc2VPcHRpb25zIiwiZXhwZW5zaXZlQ2hlY2tzIiwiJHBhcnNlT3B0aW9uc0V4cGVuc2l2ZSIsIm9uZVRpbWUiLCJjYWNoZUtleSIsInBhcnNlT3B0aW9ucyIsImxleGVyIiwiTGV4ZXIiLCJwYXJzZXIiLCJQYXJzZXIiLCJxRmFjdG9yeSIsIm5leHRUaWNrIiwiZXhjZXB0aW9uSGFuZGxlciIsImNhbGxPbmNlIiwicmVzb2x2ZUZuIiwiUHJvbWlzZSIsInNpbXBsZUJpbmQiLCJwcm9jZXNzUXVldWUiLCJwZW5kaW5nIiwicHJvY2Vzc1NjaGVkdWxlZCIsInNjaGVkdWxlUHJvY2Vzc1F1ZXVlIiwicHJvbWlzZXMiLCIkcU1pbkVyciIsIlR5cGVFcnJvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsInByb2dyZXNzQmFjayIsImNhdGNoIiwiZmluYWxseSIsImhhbmRsZUNhbGxiYWNrIiwiJCRyZWplY3QiLCIkJHJlc29sdmUiLCJtYWtlUHJvbWlzZSIsInJlc29sdmVkIiwiaXNSZXNvbHZlZCIsImNhbGxiYWNrT3V0cHV0IiwiZXJyYmFjayIsIiRRIiwiUSIsInJlc29sdmVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJhZlN1cHBvcnRlZCIsInJhZiIsInN1cHBvcnRlZCIsImNyZWF0ZUNoaWxkU2NvcGVDbGFzcyIsIkNoaWxkU2NvcGUiLCIkJHdhdGNoZXJzIiwiJCRuZXh0U2libGluZyIsIiQkY2hpbGRIZWFkIiwiJCRjaGlsZFRhaWwiLCIkJGxpc3RlbmVycyIsIiQkbGlzdGVuZXJDb3VudCIsIiQkd2F0Y2hlcnNDb3VudCIsIiRpZCIsIiQkQ2hpbGRTY29wZSIsIlRUTCIsIiRyb290U2NvcGVNaW5FcnIiLCJsYXN0RGlydHlXYXRjaCIsImFwcGx5QXN5bmNJZCIsImRpZ2VzdFR0bCIsImRlc3Ryb3lDaGlsZFNjb3BlIiwiJGV2ZW50IiwiY3VycmVudFNjb3BlIiwiY2xlYW5VcFNjb3BlIiwiJCRwcmV2U2libGluZyIsIiRyb290IiwiU2NvcGUiLCJiZWdpblBoYXNlIiwicGhhc2UiLCJjbGVhclBoYXNlIiwiaW5jcmVtZW50V2F0Y2hlcnNDb3VudCIsImRlY3JlbWVudExpc3RlbmVyQ291bnQiLCJpbml0V2F0Y2hWYWwiLCJmbHVzaEFwcGx5QXN5bmMiLCJhcHBseUFzeW5jUXVldWUiLCJzY2hlZHVsZUFwcGx5QXN5bmMiLCJpc29sYXRlIiwiY2hpbGQiLCJ3YXRjaEV4cCIsIndhdGNoZXIiLCJ3YXRjaEV4cHJlc3Npb25zIiwid2F0Y2hHcm91cEFjdGlvbiIsImNoYW5nZVJlYWN0aW9uU2NoZWR1bGVkIiwiZmlyc3RSdW4iLCJuZXdWYWx1ZXMiLCJkZXJlZ2lzdGVyRm5zIiwic2hvdWxkQ2FsbCIsInVud2F0Y2hGbiIsIiR3YXRjaENvbGxlY3Rpb25JbnRlcmNlcHRvciIsIl92YWx1ZSIsIm5ld0xlbmd0aCIsImJvdGhOYU4iLCJuZXdJdGVtIiwib2xkSXRlbSIsImludGVybmFsQXJyYXkiLCJvbGRMZW5ndGgiLCJjaGFuZ2VEZXRlY3RlZCIsImludGVybmFsT2JqZWN0IiwiJHdhdGNoQ29sbGVjdGlvbkFjdGlvbiIsImluaXRSdW4iLCJ2ZXJ5T2xkVmFsdWUiLCJ0cmFja1ZlcnlPbGRWYWx1ZSIsImNoYW5nZURldGVjdG9yIiwid2F0Y2giLCJ3YXRjaGVycyIsImRpcnR5IiwibG9nSWR4IiwiYXN5bmNUYXNrIiwidHRsIiwid2F0Y2hMb2ciLCJhc3luY1F1ZXVlIiwiJGV2YWwiLCJ0cmF2ZXJzZVNjb3Blc0xvb3AiLCJwb3N0RGlnZXN0UXVldWUiLCJldmVudE5hbWUiLCIkYXBwbHlBc3luY0V4cHJlc3Npb24iLCJuYW1lZExpc3RlbmVycyIsImluZGV4T2ZMaXN0ZW5lciIsIiRlbWl0IiwidGFyZ2V0U2NvcGUiLCJsaXN0ZW5lckFyZ3MiLCIkJGFzeW5jUXVldWUiLCIkJHBvc3REaWdlc3RRdWV1ZSIsIiQkYXBwbHlBc3luY1F1ZXVlIiwidXJpIiwiaXNJbWFnZSIsIm5vcm1hbGl6ZWRWYWwiLCJyZWdleCIsImFkanVzdE1hdGNoZXIiLCIkc2NlTWluRXJyIiwiZXNjYXBlRm9yUmVnZXhwIiwiYWRqdXN0TWF0Y2hlcnMiLCJhZGp1c3RlZE1hdGNoZXJzIiwiU0NFX0NPTlRFWFRTIiwicmVzb3VyY2VVcmxXaGl0ZWxpc3QiLCJyZXNvdXJjZVVybEJsYWNrbGlzdCIsIm1hdGNoVXJsIiwiaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeSIsImFsbG93ZWQiLCJnZW5lcmF0ZUhvbGRlclR5cGUiLCJCYXNlIiwiaG9sZGVyVHlwZSIsInRydXN0ZWRWYWx1ZSIsIiQkdW53cmFwVHJ1c3RlZFZhbHVlIiwidHJ1c3RBcyIsIkNvbnN0cnVjdG9yIiwiYnlUeXBlIiwibWF5YmVUcnVzdGVkIiwidHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSIsImh0bWxTYW5pdGl6ZXIiLCJDU1MiLCJVUkwiLCJKUyIsInNjZSIsImlzRW5hYmxlZCIsInBhcnNlQXMiLCJlbnVtVmFsdWUiLCJsTmFtZSIsInZlbmRvclByZWZpeCIsImV2ZW50U3VwcG9ydCIsImFuZHJvaWQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJib3hlZSIsInZlbmRvclJlZ2V4IiwiYm9keVN0eWxlIiwidHJhbnNpdGlvbnMiLCJhbmltYXRpb25zIiwid2Via2l0VHJhbnNpdGlvbiIsIndlYmtpdEFuaW1hdGlvbiIsInB1c2hTdGF0ZSIsImhhc0V2ZW50IiwiZGl2RWxtIiwiaGFuZGxlUmVxdWVzdEZuIiwidHBsIiwiaWdub3JlUmVxdWVzdEVycm9yIiwiaGFuZGxlRXJyb3IiLCJ0b3RhbFBlbmRpbmdSZXF1ZXN0cyIsImdldFRydXN0ZWRSZXNvdXJjZVVybCIsInRyYW5zZm9ybWVyIiwiaHR0cE9wdGlvbnMiLCJ0ZXN0YWJpbGl0eSIsImZpbmRCaW5kaW5ncyIsIm9wdF9leGFjdE1hdGNoIiwiZGF0YUJpbmRpbmciLCJiaW5kaW5nTmFtZSIsImZpbmRNb2RlbHMiLCJwcmVmaXhlcyIsImF0dHJpYnV0ZUVxdWFscyIsImdldExvY2F0aW9uIiwic2V0TG9jYXRpb24iLCJ3aGVuU3RhYmxlIiwiZGVmZXJyZWRzIiwiJCR0aW1lb3V0SWQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlcXVlc3RVcmwiLCJvcmlnaW5VcmwiLCIkJENvb2tpZVJlYWRlciIsInNhZmVEZWNvZGVVUklDb21wb25lbnQiLCJsYXN0Q29va2llcyIsImxhc3RDb29raWVTdHJpbmciLCJjb29raWVBcnJheSIsImNvb2tpZSIsImN1cnJlbnRDb29raWVTdHJpbmciLCJjdXJyZW5jeUZpbHRlciIsImRhdGVGaWx0ZXIiLCJmaWx0ZXJGaWx0ZXIiLCJqc29uRmlsdGVyIiwibGltaXRUb0ZpbHRlciIsImxvd2VyY2FzZUZpbHRlciIsIm51bWJlckZpbHRlciIsIm9yZGVyQnlGaWx0ZXIiLCJ1cHBlcmNhc2VGaWx0ZXIiLCJjb21wYXJhdG9yIiwicHJlZGljYXRlRm4iLCJtYXRjaEFnYWluc3RBbnlQcm9wIiwiZXhwcmVzc2lvblR5cGUiLCJnZXRUeXBlRm9yRmlsdGVyIiwiY3JlYXRlUHJlZGljYXRlRm4iLCJzaG91bGRNYXRjaFByaW1pdGl2ZXMiLCJhY3R1YWwiLCJleHBlY3RlZCIsImRlZXBDb21wYXJlIiwiZG9udE1hdGNoV2hvbGVPYmplY3QiLCJhY3R1YWxUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiZXhwZWN0ZWRWYWwiLCJtYXRjaEFueVByb3BlcnR5IiwiYWN0dWFsVmFsIiwiJGxvY2FsZSIsImZvcm1hdHMiLCJOVU1CRVJfRk9STUFUUyIsImFtb3VudCIsImN1cnJlbmN5U3ltYm9sIiwiZnJhY3Rpb25TaXplIiwiQ1VSUkVOQ1lfU1lNIiwiUEFUVEVSTlMiLCJtYXhGcmFjIiwiZm9ybWF0TnVtYmVyIiwiR1JPVVBfU0VQIiwiREVDSU1BTF9TRVAiLCJudW1iZXIiLCJncm91cFNlcCIsImRlY2ltYWxTZXAiLCJpc05lZ2F0aXZlIiwiYWJzIiwiaXNJbmZpbml0eSIsIkluZmluaXR5IiwiaXNGaW5pdGUiLCJudW1TdHIiLCJmb3JtYXRlZFRleHQiLCJoYXNFeHBvbmVudCIsInRvRml4ZWQiLCJmcmFjdGlvbkxlbiIsIm1pbiIsIm1pbkZyYWMiLCJyb3VuZCIsImZyYWN0aW9uIiwibGdyb3VwIiwibGdTaXplIiwiZ3JvdXAiLCJnU2l6ZSIsIm5lZ1ByZSIsInBvc1ByZSIsIm5lZ1N1ZiIsInBvc1N1ZiIsInBhZE51bWJlciIsImRpZ2l0cyIsIm5lZyIsImRhdGVHZXR0ZXIiLCJkYXRlU3RyR2V0dGVyIiwic2hvcnRGb3JtIiwidGltZVpvbmVHZXR0ZXIiLCJ6b25lIiwicGFkZGVkWm9uZSIsImdldEZpcnN0VGh1cnNkYXlPZlllYXIiLCJ5ZWFyIiwiZGF5T2ZXZWVrT25GaXJzdCIsImdldERheSIsImdldFRodXJzZGF5VGhpc1dlZWsiLCJkYXRldGltZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwid2Vla0dldHRlciIsImZpcnN0VGh1cnMiLCJ0aGlzVGh1cnMiLCJhbXBtR2V0dGVyIiwiZ2V0SG91cnMiLCJBTVBNUyIsImVyYUdldHRlciIsIkVSQVMiLCJsb25nRXJhR2V0dGVyIiwiRVJBTkFNRVMiLCJqc29uU3RyaW5nVG9EYXRlIiwiUl9JU084NjAxX1NUUiIsInR6SG91ciIsInR6TWluIiwiZGF0ZVNldHRlciIsInNldFVUQ0Z1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJ0aW1lU2V0dGVyIiwic2V0VVRDSG91cnMiLCJzZXRIb3VycyIsIm1zIiwiZm9ybWF0IiwiREFURVRJTUVfRk9STUFUUyIsIk5VTUJFUl9TVFJJTkciLCJEQVRFX0ZPUk1BVFNfU1BMSVQiLCJkYXRlVGltZXpvbmVPZmZzZXQiLCJEQVRFX0ZPUk1BVFMiLCJzcGFjaW5nIiwibGltaXQiLCJwcm9jZXNzUHJlZGljYXRlcyIsInNvcnRQcmVkaWNhdGUiLCJyZXZlcnNlT3JkZXIiLCJwcmVkaWNhdGUiLCJkZXNjZW5kaW5nIiwib2JqZWN0VmFsdWUiLCJnZXRQcmVkaWNhdGVWYWx1ZSIsInYxIiwidjIiLCJnZXRDb21wYXJpc29uT2JqZWN0IiwicHJlZGljYXRlVmFsdWVzIiwicHJlZGljYXRlcyIsImRvQ29tcGFyaXNvbiIsImNvbXBhcmVWYWx1ZXMiLCJuZ0RpcmVjdGl2ZSIsIm51bGxGb3JtUmVuYW1lQ29udHJvbCIsImNvbnRyb2wiLCIkbmFtZSIsIkZvcm1Db250cm9sbGVyIiwiY29udHJvbHMiLCIkZXJyb3IiLCIkJHN1Y2Nlc3MiLCIkcGVuZGluZyIsIiRkaXJ0eSIsIiRwcmlzdGluZSIsIiR2YWxpZCIsIiRpbnZhbGlkIiwiJHN1Ym1pdHRlZCIsIiQkcGFyZW50Rm9ybSIsIm51bGxGb3JtQ3RybCIsIiRyb2xsYmFja1ZpZXdWYWx1ZSIsIiRjb21taXRWaWV3VmFsdWUiLCIkYWRkQ29udHJvbCIsIiQkcmVuYW1lQ29udHJvbCIsIm5ld05hbWUiLCJvbGROYW1lIiwiJHJlbW92ZUNvbnRyb2wiLCIkc2V0VmFsaWRpdHkiLCJhZGRTZXRWYWxpZGl0eU1ldGhvZCIsImN0cmwiLCJ1bnNldCIsIiRzZXREaXJ0eSIsIlBSSVNUSU5FX0NMQVNTIiwiRElSVFlfQ0xBU1MiLCIkc2V0UHJpc3RpbmUiLCJzZXRDbGFzcyIsIlNVQk1JVFRFRF9DTEFTUyIsIiRzZXRVbnRvdWNoZWQiLCIkc2V0U3VibWl0dGVkIiwic3RyaW5nQmFzZWRJbnB1dFR5cGUiLCIkZm9ybWF0dGVycyIsIiRpc0VtcHR5IiwidGV4dElucHV0VHlwZSIsImJhc2VJbnB1dFR5cGUiLCJjb21wb3NpbmciLCJldiIsIm5nVHJpbSIsIiR2aWV3VmFsdWUiLCIkJGhhc05hdGl2ZVZhbGlkYXRvcnMiLCIkc2V0Vmlld1ZhbHVlIiwiZGVmZXJMaXN0ZW5lciIsIm9yaWdWYWx1ZSIsIiRyZW5kZXIiLCJ3ZWVrUGFyc2VyIiwiaXNvV2VlayIsImV4aXN0aW5nRGF0ZSIsIldFRUtfUkVHRVhQIiwid2VlayIsImhvdXJzIiwic2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsImFkZERheXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiTmFOIiwiY3JlYXRlRGF0ZVBhcnNlciIsIm1hcHBpbmciLCJpc28iLCJJU09fREFURV9SRUdFWFAiLCJ5eXl5IiwiTU0iLCJkZCIsIkhIIiwibW0iLCJzcyIsInNzcyIsInBhcnQiLCJjcmVhdGVEYXRlSW5wdXRUeXBlIiwicGFyc2VEYXRlIiwiaXNWYWxpZERhdGUiLCJwYXJzZU9ic2VydmVkRGF0ZVZhbHVlIiwiYmFkSW5wdXRDaGVja2VyIiwicHJldmlvdXNEYXRlIiwiJG9wdGlvbnMiLCIkJHBhcnNlck5hbWUiLCIkcGFyc2VycyIsInBhcnNlZERhdGUiLCJuZ01vZGVsTWluRXJyIiwibmdNaW4iLCJtaW5WYWwiLCIkdmFsaWRhdG9ycyIsIiR2YWxpZGF0ZSIsIm5nTWF4IiwibWF4VmFsIiwibmF0aXZlVmFsaWRhdGlvbiIsInZhbGlkaXR5IiwiVkFMSURJVFlfU1RBVEVfUFJPUEVSVFkiLCJiYWRJbnB1dCIsInR5cGVNaXNtYXRjaCIsIm51bWJlcklucHV0VHlwZSIsIk5VTUJFUl9SRUdFWFAiLCJ1cmxJbnB1dFR5cGUiLCJtb2RlbFZhbHVlIiwidmlld1ZhbHVlIiwiVVJMX1JFR0VYUCIsImVtYWlsSW5wdXRUeXBlIiwiZW1haWwiLCJFTUFJTF9SRUdFWFAiLCJyYWRpb0lucHV0VHlwZSIsInBhcnNlQ29uc3RhbnRFeHByIiwicGFyc2VGbiIsImNoZWNrYm94SW5wdXRUeXBlIiwidHJ1ZVZhbHVlIiwibmdUcnVlVmFsdWUiLCJmYWxzZVZhbHVlIiwibmdGYWxzZVZhbHVlIiwiY2xhc3NEaXJlY3RpdmUiLCJhcnJheURpZmZlcmVuY2UiLCJhcnJheUNsYXNzZXMiLCJhZGRDbGFzc2VzIiwiZGlnZXN0Q2xhc3NDb3VudHMiLCJyZW1vdmVDbGFzc2VzIiwiY2xhc3NDb3VudHMiLCJjbGFzc2VzVG9VcGRhdGUiLCJ1cGRhdGVDbGFzc2VzIiwibmdDbGFzc1dhdGNoQWN0aW9uIiwiJGluZGV4Iiwib2xkJGluZGV4IiwibW9kIiwic2V0VmFsaWRpdHkiLCJ2YWxpZGF0aW9uRXJyb3JLZXkiLCJjcmVhdGVBbmRTZXQiLCJ1bnNldEFuZENsZWFudXAiLCJjYWNoZWRUb2dnbGVDbGFzcyIsIlBFTkRJTkdfQ0xBU1MiLCJ0b2dnbGVWYWxpZGF0aW9uQ3NzIiwiaXNPYmplY3RFbXB0eSIsImNvbWJpbmVkU3RhdGUiLCJzd2l0Y2hWYWx1ZSIsImlzVmFsaWQiLCJWQUxJRF9DTEFTUyIsIklOVkFMSURfQ0xBU1MiLCJjaHJvbWVIYWNrIiwib3B0aW9uRWxlbWVudCIsIlJFR0VYX1NUUklOR19SRUdFWFAiLCJtYW51YWxMb3dlcmNhc2UiLCJjaGFyQ29kZUF0IiwibWFudWFsVXBwZXJjYXNlIiwiZG9jdW1lbnRNb2RlIiwicnVsZXMiLCJuZ0NzcEVsZW1lbnQiLCJuZ0NzcEF0dHJpYnV0ZSIsIm5vSW5saW5lU3R5bGUiLCJuYW1lXyIsIk5PREVfVFlQRV9BVFRSSUJVVEUiLCJmdWxsIiwibWFqb3IiLCJtaW5vciIsImRvdCIsImNvZGVOYW1lIiwiTm9kZSIsImxvd2VyY2FzZWROYW1lIiwiZ2V0TmFtZWRJdGVtIiwiJGR2IiwibXVsdGlwbGUiLCJub2RlQ291bnQiLCJhZGRIYW5kbGVyIiwibm9FdmVudExpc3RlbmVyIiwib25GbiIsInJlcGxhY2VOb2RlIiwid3JhcE5vZGUiLCJuZXdFbGVtZW50IiwiY29uZGl0aW9uIiwiY2xhc3NDb25kaXRpb24iLCJuZXh0RWxlbWVudFNpYmxpbmciLCJleHRyYVBhcmFtZXRlcnMiLCJkdW1teUV2ZW50IiwiZXZlbnRGbnNDb3B5IiwiaGFuZGxlckFyZ3MiLCJhcmczIiwiJGFuaW1hdGVNaW5FcnIiLCJOR19BTklNQVRFX0NMQVNTTkFNRSIsIkFuaW1hdGVSdW5uZXIiLCJyZXN1bWUiLCJwYXVzZSIsInBhc3MiLCJwb3N0RGlnZXN0RWxlbWVudHMiLCJ1cGRhdGVEYXRhIiwiaGFuZGxlQ1NTQ2xhc3NDaGFuZ2VzIiwiZXhpc3RpbmciLCJhZGRSZW1vdmVDbGFzc2VzUG9zdERpZ2VzdCIsImNsYXNzZXNBZGRlZCIsImNsYXNzZXNSZW1vdmVkIiwicGluIiwiZG9tT3BlcmF0aW9uIiwiZnJvbSIsIiQkcmVnaXN0ZXJlZEFuaW1hdGlvbnMiLCJjbGFzc05hbWVGaWx0ZXIiLCIkJGNsYXNzTmFtZUZpbHRlciIsInJlc2VydmVkUmVnZXgiLCJkb21JbnNlcnQiLCJhZnRlckVsZW1lbnQiLCJhZnRlck5vZGUiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicnVubmVyIiwiZW50ZXIiLCJtb3ZlIiwibGVhdmUiLCJhZGRjbGFzcyIsInRlbXBDbGFzc2VzIiwiUkFGUHJvbWlzZSIsImdldFByb21pc2UiLCJmMSIsImYyIiwiY2xvc2VkIiwiY2xlYW51cFN0eWxlcyIsImRvbU5vZGUiLCJDb250ZW50LVR5cGUiLCJbIiwieyIsIiRodHRwTWluRXJyIiwiUEFUSF9NQVRDSCIsImh0dHAiLCJodHRwcyIsImZ0cCIsImxvY2F0aW9uUHJvdG90eXBlIiwicGFyYW1WYWx1ZSIsIkxvY2F0aW9uIiwiT1BFUkFUT1JTIiwiRVNDQVBFIiwiZiIsIiciLCJcIiIsImxleCIsInJlYWRTdHJpbmciLCJwZWVrIiwicmVhZE51bWJlciIsImlzSWRlbnQiLCJyZWFkSWRlbnQiLCJpc1doaXRlc3BhY2UiLCJjaDIiLCJjaDMiLCJvcDEiLCJvcDIiLCJvcDMiLCJ0aHJvd0Vycm9yIiwiY2hhcnMiLCJpc0V4cE9wZXJhdG9yIiwiY29sU3RyIiwicGVla0NoIiwicXVvdGUiLCJyYXdTdHJpbmciLCJoZXgiLCJyZXAiLCJFeHByZXNzaW9uU3RhdGVtZW50IiwiUHJvcGVydHkiLCJwcm9ncmFtIiwiZXhwcmVzc2lvblN0YXRlbWVudCIsImV4cGVjdCIsImZpbHRlckNoYWluIiwiYXNzaWdubWVudCIsInRlcm5hcnkiLCJsb2dpY2FsT1IiLCJjb25zdW1lIiwibG9naWNhbEFORCIsImVxdWFsaXR5IiwicmVsYXRpb25hbCIsImFkZGl0aXZlIiwibXVsdGlwbGljYXRpdmUiLCJ1bmFyeSIsInByaW1hcnkiLCJhcnJheURlY2xhcmF0aW9uIiwiY29uc3RhbnRzIiwicGFyc2VBcmd1bWVudHMiLCJiYXNlRXhwcmVzc2lvbiIsInBlZWtUb2tlbiIsImtpbmQiLCJlMSIsImUyIiwiZTMiLCJlNCIsInBlZWtBaGVhZCIsInRydWUiLCJmYWxzZSIsIm51bGwiLCJuZXh0SWQiLCJ2YXJzIiwib3duIiwiYXNzaWduYWJsZSIsInN0YWdlIiwiY29tcHV0aW5nIiwicmVjdXJzZSIsInJldHVybl8iLCJnZW5lcmF0ZUZ1bmN0aW9uIiwiZm5LZXkiLCJpbnRvSWQiLCJ3YXRjaElkIiwiZm5TdHJpbmciLCJVU0UiLCJTVFJJQ1QiLCJmaWx0ZXJQcmVmaXgiLCJ3YXRjaEZucyIsInZhcnNQcmVmaXgiLCJzZWN0aW9uIiwibmFtZUlkIiwicmVjdXJzaW9uRm4iLCJza2lwV2F0Y2hJZENoZWNrIiwiaWZfIiwibGF6eUFzc2lnbiIsImNvbXB1dGVkTWVtYmVyIiwibGF6eVJlY3Vyc2UiLCJwbHVzIiwiZ2V0SGFzT3duUHJvcGVydHkiLCJub25Db21wdXRlZE1lbWJlciIsImFkZEVuc3VyZVNhZmVPYmplY3QiLCJub3ROdWxsIiwiYWRkRW5zdXJlU2FmZU1lbWJlck5hbWUiLCJhZGRFbnN1cmVTYWZlRnVuY3Rpb24iLCJtZW1iZXIiLCJhZGRFbnN1cmVTYWZlQXNzaWduQ29udGV4dCIsInN0cmluZ0VzY2FwZVJlZ2V4Iiwic3RyaW5nRXNjYXBlRm4iLCJjIiwic2tpcCIsInJocyIsImxocyIsInVuYXJ5KyIsInVuYXJ5LSIsInVuYXJ5ISIsImJpbmFyeSsiLCJiaW5hcnktIiwiYmluYXJ5KiIsImJpbmFyeS8iLCJiaW5hcnklIiwiYmluYXJ5PT09IiwiYmluYXJ5IT09IiwiYmluYXJ5PT0iLCJiaW5hcnkhPSIsImJpbmFyeTwiLCJiaW5hcnk+IiwiYmluYXJ5PD0iLCJiaW5hcnk+PSIsImJpbmFyeSYmIiwiYmluYXJ5fHwiLCJ0ZXJuYXJ5PzoiLCJhc3RDb21waWxlciIsInl5IiwieSIsIk1NTU0iLCJNTU0iLCJNIiwiSCIsImhoIiwiRUVFRSIsIkVFRSIsIloiLCJ3dyIsIkciLCJHRyIsIkdHRyIsIkdHR0ciLCJ4bGlua0hyZWYiLCJkZWZhdWx0TGlua0ZuIiwibm9ybWFsaXplZCIsImh0bWxBdHRyIiwiZm9ybURpcmVjdGl2ZUZhY3RvcnkiLCJpc05nRm9ybSIsImdldFNldHRlciIsImZvcm1FbGVtZW50IiwibmFtZUF0dHIiLCJjdHJscyIsImhhbmRsZUZvcm1TdWJtaXNzaW9uIiwicGFyZW50Rm9ybUN0cmwiLCJEQVRFX1JFR0VYUCIsIkRBVEVUSU1FTE9DQUxfUkVHRVhQIiwiTU9OVEhfUkVHRVhQIiwiVElNRV9SRUdFWFAiLCJpbnB1dFR5cGUiLCJkYXRldGltZS1sb2NhbCIsIm1vbnRoIiwiQ09OU1RBTlRfVkFMVUVfUkVHRVhQIiwidHBsQXR0ciIsIiRjb21waWxlIiwidGVtcGxhdGVFbGVtZW50IiwidEVsZW1lbnQiLCJuZ0JpbmRIdG1sR2V0dGVyIiwibmdCaW5kSHRtbFdhdGNoIiwiZ2V0VHJ1c3RlZEh0bWwiLCIkdmlld0NoYW5nZUxpc3RlbmVycyIsImZvcmNlQXN5bmNFdmVudHMiLCJwcmV2aW91c0VsZW1lbnRzIiwic3JjRXhwIiwib25sb2FkRXhwIiwiYXV0b1Njcm9sbEV4cCIsImF1dG9zY3JvbGwiLCJwcmV2aW91c0VsZW1lbnQiLCJjdXJyZW50RWxlbWVudCIsImNoYW5nZUNvdW50ZXIiLCJjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50IiwiYWZ0ZXJBbmltYXRpb24iLCJ0aGlzQ2hhbmdlSWQiLCJ0cmltVmFsdWVzIiwiVU5UT1VDSEVEX0NMQVNTIiwiVE9VQ0hFRF9DTEFTUyIsIk5nTW9kZWxDb250cm9sbGVyIiwiJG1vZGVsVmFsdWUiLCIkJHJhd01vZGVsVmFsdWUiLCIkYXN5bmNWYWxpZGF0b3JzIiwiJHVudG91Y2hlZCIsIiR0b3VjaGVkIiwicGFyc2VyVmFsaWQiLCJwYXJzZWROZ01vZGVsIiwicGFyc2VkTmdNb2RlbEFzc2lnbiIsIm5nTW9kZWxHZXQiLCJuZ01vZGVsU2V0IiwicGVuZGluZ0RlYm91bmNlIiwiJCRzZXRPcHRpb25zIiwiZ2V0dGVyU2V0dGVyIiwiaW52b2tlTW9kZWxHZXR0ZXIiLCJpbnZva2VNb2RlbFNldHRlciIsIiQkJHAiLCJjdXJyZW50VmFsaWRhdGlvblJ1bklkIiwiJHNldFRvdWNoZWQiLCIkJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUiLCJwcmV2VmFsaWQiLCJwcmV2TW9kZWxWYWx1ZSIsImFsbG93SW52YWxpZCIsIiQkcnVuVmFsaWRhdG9ycyIsImFsbFZhbGlkIiwiJCR3cml0ZU1vZGVsVG9TY29wZSIsImRvbmVDYWxsYmFjayIsInByb2Nlc3NQYXJzZUVycm9ycyIsImVycm9yS2V5IiwicHJvY2Vzc1N5bmNWYWxpZGF0b3JzIiwic3luY1ZhbGlkYXRvcnNWYWxpZCIsInZhbGlkYXRvciIsInByb2Nlc3NBc3luY1ZhbGlkYXRvcnMiLCJ2YWxpZGF0b3JQcm9taXNlcyIsInZhbGlkYXRpb25Eb25lIiwibG9jYWxWYWxpZGF0aW9uUnVuSWQiLCIkJHBhcnNlQW5kVmFsaWRhdGUiLCJ3cml0ZVRvTW9kZWxJZk5lZWRlZCIsInVwZGF0ZU9uRGVmYXVsdCIsIiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQiLCJkZWJvdW5jZSIsImRlYm91bmNlRGVsYXkiLCJmb3JtYXR0ZXJzIiwibW9kZWxDdHJsIiwiZm9ybUN0cmwiLCJ1cGRhdGVPbiIsIkRFRkFVTFRfUkVHRVhQIiwidGhhdCIsIm5nT3B0aW9uc01pbkVyciIsIk5HX09QVElPTlNfUkVHRVhQIiwicGFyc2VPcHRpb25zRXhwcmVzc2lvbiIsIm9wdGlvbnNFeHAiLCJzZWxlY3RFbGVtZW50IiwiT3B0aW9uIiwic2VsZWN0VmFsdWUiLCJsYWJlbCIsImdldE9wdGlvblZhbHVlc0tleXMiLCJvcHRpb25WYWx1ZXMiLCJvcHRpb25WYWx1ZXNLZXlzIiwia2V5TmFtZSIsIml0ZW1LZXkiLCJ2YWx1ZU5hbWUiLCJzZWxlY3RBcyIsInRyYWNrQnkiLCJzZWxlY3RBc0ZuIiwidmlld1ZhbHVlRm4iLCJ0cmFja0J5Rm4iLCJnZXRUcmFja0J5VmFsdWVGbiIsImdldFRyYWNrQnlWYWx1ZSIsImdldExvY2FscyIsImRpc3BsYXlGbiIsImdyb3VwQnlGbiIsImRpc2FibGVXaGVuRm4iLCJ2YWx1ZXNGbiIsImdldFdhdGNoYWJsZXMiLCJ3YXRjaGVkQXJyYXkiLCJvcHRpb25WYWx1ZXNMZW5ndGgiLCJkaXNhYmxlV2hlbiIsImdldE9wdGlvbnMiLCJvcHRpb25JdGVtcyIsInNlbGVjdFZhbHVlTWFwIiwib3B0aW9uSXRlbSIsImdldE9wdGlvbkZyb21WaWV3VmFsdWUiLCJnZXRWaWV3VmFsdWVGcm9tT3B0aW9uIiwibmdPcHRpb25zUG9zdExpbmsiLCJ1cGRhdGVPcHRpb25FbGVtZW50IiwiYWRkT3JSZXVzZUVsZW1lbnQiLCJyZW1vdmVFeGNlc3NFbGVtZW50cyIsInNraXBFbXB0eUFuZFVua25vd25PcHRpb25zIiwiZW1wdHlPcHRpb25fIiwiZW1wdHlPcHRpb24iLCJ1bmtub3duT3B0aW9uXyIsInVua25vd25PcHRpb24iLCJ1cGRhdGVPcHRpb25zIiwicHJldmlvdXNWYWx1ZSIsInNlbGVjdEN0cmwiLCJyZWFkVmFsdWUiLCJncm91cE1hcCIsInByb3ZpZGVkRW1wdHlPcHRpb24iLCJncm91cEVsZW1lbnQiLCJvcHRHcm91cFRlbXBsYXRlIiwiY3VycmVudE9wdGlvbkVsZW1lbnQiLCJvcHRpb25UZW1wbGF0ZSIsIm5nTW9kZWxDdHJsIiwibmV4dFZhbHVlIiwicmVuZGVyRW1wdHlPcHRpb24iLCJyZW1vdmVFbXB0eU9wdGlvbiIsInJlbmRlclVua25vd25PcHRpb24iLCJyZW1vdmVVbmtub3duT3B0aW9uIiwid3JpdGVWYWx1ZSIsInNlbGVjdGVkVmFsdWVzIiwic2VsZWN0aW9ucyIsInNlbGVjdGVkT3B0aW9uIiwicmVnaXN0ZXJPcHRpb24iLCJCUkFDRSIsIklTX1dIRU4iLCJ1cGRhdGVFbGVtZW50VGV4dCIsIm5ld1RleHQiLCJsYXN0Q291bnQiLCJudW1iZXJFeHAiLCJ3aGVuRXhwIiwid2hlbnMiLCJ3aGVuc0V4cEZucyIsImJyYWNlUmVwbGFjZW1lbnQiLCJ3YXRjaFJlbW92ZXIiLCJhdHRyaWJ1dGVOYW1lIiwidG1wTWF0Y2giLCJ3aGVuS2V5IiwiY291bnRJc05hTiIsInBsdXJhbENhdCIsIndoZW5FeHBGbiIsIk5HX1JFTU9WRUQiLCJuZ1JlcGVhdE1pbkVyciIsInVwZGF0ZVNjb3BlIiwidmFsdWVJZGVudGlmaWVyIiwia2V5SWRlbnRpZmllciIsImFycmF5TGVuZ3RoIiwiJGZpcnN0IiwiJGxhc3QiLCIkbWlkZGxlIiwiJG9kZCIsIiRldmVuIiwiZ2V0QmxvY2tTdGFydCIsImdldEJsb2NrRW5kIiwibmdSZXBlYXRFbmRDb21tZW50IiwiYWxpYXNBcyIsInRyYWNrQnlFeHAiLCJ0cmFja0J5RXhwR2V0dGVyIiwidHJhY2tCeUlkRXhwRm4iLCJ0cmFja0J5SWRBcnJheUZuIiwidHJhY2tCeUlkT2JqRm4iLCJoYXNoRm5Mb2NhbHMiLCJsYXN0QmxvY2tNYXAiLCJuZXh0Tm9kZSIsImNvbGxlY3Rpb25MZW5ndGgiLCJ0cmFja0J5SWQiLCJ0cmFja0J5SWRGbiIsImNvbGxlY3Rpb25LZXlzIiwibmV4dEJsb2NrT3JkZXIiLCJwcmV2aW91c05vZGUiLCJuZXh0QmxvY2tNYXAiLCJibG9ja0tleSIsIk5HX0hJREVfQ0xBU1MiLCJOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTIiwibmV3U3R5bGVzIiwib2xkU3R5bGVzIiwiY2FzZXMiLCJuZ1N3aXRjaENvbnRyb2xsZXIiLCJ3YXRjaEV4cHIiLCJzZWxlY3RlZFRyYW5zY2x1ZGVzIiwic2VsZWN0ZWRFbGVtZW50cyIsInByZXZpb3VzTGVhdmVBbmltYXRpb25zIiwic2VsZWN0ZWRTY29wZXMiLCJzcGxpY2VGYWN0b3J5Iiwic2VsZWN0ZWRUcmFuc2NsdWRlIiwiY2FzZUVsZW1lbnQiLCJzZWxlY3RlZFNjb3BlIiwiYW5jaG9yIiwibm9vcE5nTW9kZWxDb250cm9sbGVyIiwiU2VsZWN0Q29udHJvbGxlciIsIm9wdGlvbnNNYXAiLCJ1bmtub3duVmFsIiwiaGFzT3B0aW9uIiwiYWRkT3B0aW9uIiwicmVtb3ZlT3B0aW9uIiwib3B0aW9uU2NvcGUiLCJvcHRpb25BdHRycyIsImludGVycG9sYXRlVmFsdWVGbiIsImludGVycG9sYXRlVGV4dEZuIiwic2VsZWN0UHJlTGluayIsImxhc3RWaWV3IiwibGFzdFZpZXdSZWYiLCJzZWxlY3RDdHJsTmFtZSIsInBhdHRlcm5FeHAiLCJpbnRWYWwiLCJnZXREZWNpbWFscyIsImdldFZGIiwib3B0X3ByZWNpc2lvbiIsInBvdyIsIlBMVVJBTF9DQVRFR09SWSIsIlpFUk8iLCJPTkUiLCJUV08iLCJGRVciLCJNQU5ZIiwiT1RIRVIiLCJEQVkiLCJGSVJTVERBWU9GV0VFSyIsIk1PTlRIIiwiU0hPUlREQVkiLCJTSE9SVE1PTlRIIiwiV0VFS0VORFJBTkdFIiwiZnVsbERhdGUiLCJsb25nRGF0ZSIsIm1lZGl1bSIsIm1lZGl1bURhdGUiLCJtZWRpdW1UaW1lIiwic2hvcnQiLCJzaG9ydERhdGUiLCJzaG9ydFRpbWUiLCJtaW5JbnQiLCJ2ZiIsImFuY2VzdG9ycyIsIm9iamVjdEtleXMiLCJjZWlsIiwiaW5oZXJpdFBhcmFtcyIsImN1cnJlbnRQYXJhbXMiLCJuZXdQYXJhbXMiLCIkY3VycmVudCIsIiR0byIsInBhcmVudFBhcmFtcyIsImluaGVyaXRlZCIsImluaGVyaXRMaXN0IiwiZXF1YWxGb3JLZXlzIiwiZmlsdGVyQnlLZXlzIiwiZmlsdGVyZWQiLCJwaWNrIiwib21pdCIsIiRSZXNvbHZlIiwiVklTSVRfSU5fUFJPR1JFU1MiLCJWSVNJVF9ET05FIiwiTk9USElORyIsIk5PX0RFUEVOREVOQ0lFUyIsIk5PX0xPQ0FMUyIsIk5PX1BBUkVOVCIsIiQkcHJvbWlzZXMiLCIkJHZhbHVlcyIsInN0dWR5IiwiaW52b2NhYmxlcyIsInZpc2l0IiwidmlzaXRlZCIsImN5Y2xlIiwicGxhbiIsImlzUmVzb2x2ZSIsImludm9jYWJsZUtleXMiLCJtZXJnZWQiLCIkJGluaGVyaXRlZFZhbHVlcyIsInJlc29sdXRpb24iLCIkJGZhaWx1cmUiLCJpbnZvY2FibGUiLCJvbmZhaWx1cmUiLCJpbnZvY2F0aW9uIiwid2FpdFBhcmFtcyIsImRlcCIsIiRUZW1wbGF0ZUZhY3RvcnkiLCJmcm9tQ29uZmlnIiwiZnJvbVN0cmluZyIsImZyb21VcmwiLCJ0ZW1wbGF0ZVByb3ZpZGVyIiwiZnJvbVByb3ZpZGVyIiwiVXJsTWF0Y2hlciIsInBhcmVudE1hdGNoZXIiLCJhZGRQYXJhbWV0ZXIiLCJwYXJhbU5hbWVzIiwiJCRVTUZQIiwiUGFyYW0iLCJxdW90ZVJlZ0V4cCIsInNxdWFzaCIsInN1cnJvdW5kUGF0dGVybiIsIm1hdGNoRGV0YWlscyIsImlzU2VhcmNoIiwic2VnbWVudCIsImNmZyIsImNhc2VJbnNlbnNpdGl2ZSIsInBsYWNlaG9sZGVyIiwic2VhcmNoUGxhY2Vob2xkZXIiLCIkJG5ldyIsIlBhcmFtU2V0IiwiaXNPcHRpb25hbCIsInNvdXJjZVNlYXJjaCIsInNvdXJjZVBhdGgiLCJzdHJpY3QiLCIkJHBhcmFtTmFtZXMiLCIkVXJsTWF0Y2hlckZhY3RvcnkiLCJ2YWxUb1N0cmluZyIsInZhbEZyb21TdHJpbmciLCJnZXREZWZhdWx0Q29uZmlnIiwiaXNTdHJpY3RNb2RlIiwiaXNDYXNlSW5zZW5zaXRpdmUiLCJpc0luamVjdGFibGUiLCJmbHVzaFR5cGVRdWV1ZSIsInR5cGVRdWV1ZSIsIiR0eXBlcyIsImRlZiIsImRlZmF1bHRTcXVhc2hQb2xpY3kiLCJlbnF1ZXVlIiwiZGVmYXVsdFR5cGVzIiwiZW5jb2RlIiwiZGVjb2RlIiwiaW50IiwiY2FwdHVyZSIsImFueSIsIiQkZ2V0RGVmYXVsdFZhbHVlIiwic3RyaWN0TW9kZSIsImlzTWF0Y2hlciIsIm8iLCJkZWZpbml0aW9uRm4iLCJ1bndyYXBTaG9ydGhhbmQiLCJpc1Nob3J0aGFuZCIsIiQkZm4iLCJnZXRUeXBlIiwidXJsVHlwZSIsImdldEFycmF5TW9kZSIsImFycmF5RGVmYXVsdHMiLCJhcnJheVBhcmFtTm9tZW5jbGF0dXJlIiwiZ2V0U3F1YXNoUG9saWN5IiwiZ2V0UmVwbGFjZSIsImFycmF5TW9kZSIsImNvbmZpZ3VyZWRLZXlzIiwiZGVmYXVsdFBvbGljeSIsIiR2YWx1ZSIsImhhc1JlcGxhY2VWYWwiLCIkcmVwbGFjZSIsInJlcGxhY2VtZW50IiwiJGFzQXJyYXkiLCJkeW5hbWljIiwiJCRwYXJlbnQiLCIkJGtleXMiLCJpZ25vcmUiLCJwYXJhbXNldCIsInBhcmFtVmFsdWVzIiwiJCRlcXVhbHMiLCJwYXJhbVZhbHVlczEiLCJwYXJhbVZhbHVlczIiLCJlcXVhbCIsIiQkdmFsaWRhdGVzIiwicmF3VmFsIiwiZW5jb2RlZCIsIiRVcmxSb3V0ZXJQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwiJHVybE1hdGNoZXJGYWN0b3J5IiwicmVnRXhwUHJlZml4IiwicmUiLCJpbnRlcnBvbGF0ZSIsImhhbmRsZUlmTWF0Y2giLCIkbWF0Y2giLCJhcHBlbmRCYXNlUGF0aCIsImlzSHRtbDUiLCJhYnNvbHV0ZSIsInVwZGF0ZSIsInJ1bGUiLCJoYW5kbGVkIiwibGFzdFB1c2hlZFVybCIsIm90aGVyd2lzZSIsImxpc3RlbiIsImludGVyY2VwdERlZmVycmVkIiwic3luYyIsInJlYWQiLCJ1cmxNYXRjaGVyIiwiJCRhdm9pZFJlc3luYyIsInZhbGlkYXRlcyIsInNsYXNoIiwicmVkaXJlY3QiLCJoYW5kbGVySXNTdHJpbmciLCJzdHJhdGVnaWVzIiwic3RpY2t5IiwiZGVmZXJJbnRlcmNlcHQiLCIkU3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsImlzUmVsYXRpdmUiLCJzdGF0ZU5hbWUiLCJmaW5kU3RhdGUiLCJzdGF0ZU9yTmFtZSIsImlzU3RyIiwicmVsIiwicGF0aExlbmd0aCIsInN0YXRlcyIsInF1ZXVlU3RhdGUiLCJwYXJlbnROYW1lIiwiZmx1c2hRdWV1ZWRDaGlsZHJlbiIsInF1ZXVlZCIsInJlZ2lzdGVyU3RhdGUiLCJzdGF0ZUJ1aWxkZXIiLCIkZGVsZWdhdGVzIiwiYWJzdHJhY3RLZXkiLCIkc3RhdGVQYXJhbXMiLCIkc3RhdGUiLCJuYXZpZ2FibGUiLCJ0cmFuc2l0aW9uVG8iLCJpc0dsb2IiLCJkb2VzU3RhdGVNYXRjaEdsb2IiLCJnbG9iIiwiZ2xvYlNlZ21lbnRzIiwiJHZpZXciLCIkcmVzb2x2ZSIsIiR1cmxSb3V0ZXIiLCJoYW5kbGVSZWRpcmVjdCIsIlRyYW5zaXRpb25BYm9ydGVkIiwicmV0cnkiLCIkcmV0cnkiLCJUcmFuc2l0aW9uRmFpbGVkIiwicmV0cnlUcmFuc2l0aW9uIiwidHJhbnNpdGlvbiIsIlRyYW5zaXRpb25TdXBlcnNlZGVkIiwidG9QYXJhbXMiLCJyZXNvbHZlU3RhdGUiLCJwYXJhbXNBcmVGaWx0ZXJlZCIsInJlc29sdmVWaWV3cyIsInZpZXdzUHJvbWlzZXMiLCJ2aWV3cyIsInZpZXciLCJpbmplY3RhYmxlcyIsImNvbnRyb2xsZXJQcm92aWRlciIsImluamVjdExvY2FscyIsIiQkY29udHJvbGxlciIsIiQkY29udHJvbGxlckFzIiwiVHJhbnNpdGlvblByZXZlbnRlZCIsImdvIiwiZnJvbVBhcmFtcyIsImZyb21QYXRoIiwidG9TdGF0ZSIsInJlZGlyZWN0UmVzdWx0IiwidG9QYXRoIiwia2VlcCIsInRvTG9jYWxzIiwicmVsb2FkU3RhdGUiLCJvd25QYXJhbXMiLCJzaG91bGRTa2lwUmVsb2FkIiwiZW50ZXJpbmciLCJleGl0aW5nIiwib25FeGl0Iiwib25FbnRlciIsImluY2x1ZGVzIiwibG9zc3kiLCJuYXYiLCJub25TZWFyY2hQYXJhbXNFcXVhbCIsImZyb21BbmRUb1N0YXRlIiwibm90U2VhcmNoUGFyYW0iLCJub25RdWVyeVBhcmFtS2V5cyIsIm5vblF1ZXJ5UGFyYW1zIiwibm9uUXVlcnlQYXJhbVNldCIsInJlbG9hZE9uU2VhcmNoIiwiY29tcG9zaXRlTmFtZSIsImFic3RyYWN0IiwiJFZpZXdQcm92aWRlciIsIiR0ZW1wbGF0ZUZhY3RvcnkiLCIkVmlld1Njcm9sbFByb3ZpZGVyIiwidXNlQW5jaG9yU2Nyb2xsIiwiJFZpZXdEaXJlY3RpdmUiLCIkdWlWaWV3U2Nyb2xsIiwiZ2V0UmVuZGVyZXIiLCJzdGF0aWNzIiwiY2IiLCIkYW5pbWF0b3IiLCJjbGVhbnVwTGFzdFZpZXciLCJwcmV2aW91c0VsIiwiY3VycmVudEVsIiwicmVuZGVyZXIiLCJ1cGRhdGVWaWV3IiwiZmlyc3RUaW1lIiwiZ2V0VWlWaWV3TmFtZSIsInByZXZpb3VzTG9jYWxzIiwibGF0ZXN0TG9jYWxzIiwiJFZpZXdEaXJlY3RpdmVGaWxsIiwiaW5pdGlhbCIsInVpVmlldyIsInBhcnNlU3RhdGVSZWYiLCJyZWYiLCJwcmVwYXJzZWQiLCJwYXJhbUV4cHIiLCJzdGF0ZUNvbnRleHQiLCJzdGF0ZURhdGEiLCIkU3RhdGVSZWZEaXJlY3RpdmUiLCJhbGxvd2VkT3B0aW9ucyIsInVpU3JlZkFjdGl2ZSIsInVpU3JlZiIsImhyZWZLaW5kIiwibmV3SHJlZiIsImlzQW5jaG9yIiwiaXNGb3JtIiwib3B0aW9uc092ZXJyaWRlIiwidWlTcmVmT3B0cyIsImFjdGl2ZURpcmVjdGl2ZSIsIiQkYWRkU3RhdGVJbmZvIiwiaWdub3JlUHJldmVudERlZmF1bHRDb3VudCIsIiRTdGF0ZVJlZkFjdGl2ZURpcmVjdGl2ZSIsImFueU1hdGNoIiwiYWN0aXZlQ2xhc3MiLCJpc01hdGNoIiwidWlTcmVmQWN0aXZlRXEiLCIkSXNTdGF0ZUZpbHRlciIsImlzRmlsdGVyIiwiJEluY2x1ZGVkQnlTdGF0ZUZpbHRlciIsImluY2x1ZGVzRmlsdGVyIiwic2VhcmNoUGFyYW1zIiwiZGVjb2RlUGF0aEFycmF5IiwicmV2ZXJzZVN0cmluZyIsInVucXVvdGVEYXNoZXMiLCJhbGxSZXZlcnNlZCIsInBhcmFtTmFtZSIsInBhcmFtZXRlcnMiLCJuVG90YWwiLCJuUGF0aCIsInBhcmFtVmFsIiwiZW5jb2RlRGFzaGVzIiwiaXNQYXRoUGFyYW0iLCJpc0RlZmF1bHRWYWx1ZSIsIm5leHRTZWdtZW50IiwiJHN1YlBhdHRlcm4iLCJzdWIiLCJBcnJheVR5cGUiLCJiaW5kVG8iLCJhcnJheVdyYXAiLCJhcnJheVVud3JhcCIsImZhbHNleSIsImFycmF5SGFuZGxlciIsImFsbFRydXRoeU1vZGUiLCJhcnJheUVxdWFsc0hhbmRsZXIiLCJ2YWwxIiwidmFsMiIsIiRhcnJheU1vZGUiLCJjcmVhdGVSZWR1Y2UiLCJpdGVyYXRlZSIsIm1lbW8iLCJjdXJyZW50S2V5Iiwib3B0aW1pemVDYiIsImNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyIiwiZ2V0TGVuZ3RoIiwiY3JlYXRlSW5kZXhGaW5kZXIiLCJwcmVkaWNhdGVGaW5kIiwic29ydGVkSW5kZXgiLCJjb2xsZWN0Tm9uRW51bVByb3BzIiwibm9uRW51bUlkeCIsIm5vbkVudW1lcmFibGVQcm9wcyIsInByb3RvIiwiT2JqUHJvdG8iLCJwcmV2aW91c1VuZGVyc2NvcmUiLCJBcnJheVByb3RvIiwiRnVuY1Byb3RvIiwibmF0aXZlSXNBcnJheSIsIm5hdGl2ZUtleXMiLCJuYXRpdmVCaW5kIiwibmF0aXZlQ3JlYXRlIiwiQ3RvciIsIl93cmFwcGVkIiwiVkVSU0lPTiIsImFyZ0NvdW50Iiwib3RoZXIiLCJhY2N1bXVsYXRvciIsImNyZWF0ZUFzc2lnbmVyIiwia2V5c0Z1bmMiLCJ1bmRlZmluZWRPbmx5IiwiYmFzZUNyZWF0ZSIsIk1BWF9BUlJBWV9JTkRFWCIsImNvbGxlY3QiLCJyZWR1Y2UiLCJmb2xkbCIsImluamVjdCIsInJlZHVjZVJpZ2h0IiwiZm9sZHIiLCJkZXRlY3QiLCJmaW5kSW5kZXgiLCJmaW5kS2V5IiwibmVnYXRlIiwiZXZlcnkiLCJpbmNsdWRlIiwiZnJvbUluZGV4IiwiZ3VhcmQiLCJpc0Z1bmMiLCJwbHVjayIsIndoZXJlIiwiZmluZFdoZXJlIiwibGFzdENvbXB1dGVkIiwic2h1ZmZsZSIsInJhbmQiLCJzaHVmZmxlZCIsInNhbXBsZSIsInNvcnRCeSIsImNyaXRlcmlhIiwiYmVoYXZpb3IiLCJncm91cEJ5IiwiaW5kZXhCeSIsImNvdW50QnkiLCJwYXJ0aXRpb24iLCJ0YWtlIiwicmVzdCIsInRhaWwiLCJkcm9wIiwiY29tcGFjdCIsImZsYXR0ZW4iLCJzaGFsbG93Iiwib3V0cHV0IiwiaXNBcmd1bWVudHMiLCJ3aXRob3V0IiwiZGlmZmVyZW5jZSIsInVuaXEiLCJpc1NvcnRlZCIsInVuaW9uIiwiaW50ZXJzZWN0aW9uIiwiYXJnc0xlbmd0aCIsInppcCIsInVuemlwIiwiZmluZExhc3RJbmRleCIsImxvdyIsIm1pZCIsInJhbmdlIiwiZXhlY3V0ZUJvdW5kIiwic291cmNlRnVuYyIsImJvdW5kRnVuYyIsImNhbGxpbmdDb250ZXh0IiwiYm91bmQiLCJwYXJ0aWFsIiwiYm91bmRBcmdzIiwiYmluZEFsbCIsIm1lbW9pemUiLCJoYXNoZXIiLCJhZGRyZXNzIiwidGhyb3R0bGUiLCJwcmV2aW91cyIsImxlYWRpbmciLCJ0cmFpbGluZyIsImltbWVkaWF0ZSIsInRpbWVzdGFtcCIsImNhbGxOb3ciLCJjb21wb3NlIiwidGltZXMiLCJoYXNFbnVtQnVnIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJhbGxLZXlzIiwibWFwT2JqZWN0IiwicGFpcnMiLCJmdW5jdGlvbnMiLCJtZXRob2RzIiwiZXh0ZW5kT3duIiwib2l0ZXJhdGVlIiwidGFwIiwiYVN0YWNrIiwiYlN0YWNrIiwiYXJlQXJyYXlzIiwiYUN0b3IiLCJiQ3RvciIsImlzRXF1YWwiLCJpc0VtcHR5IiwiSW50OEFycmF5IiwiaXNOdWxsIiwicHJvcGVydHlPZiIsImFjY3VtIiwiZXNjYXBlTWFwIiwiJiIsIjwiLCJgIiwidW5lc2NhcGVNYXAiLCJjcmVhdGVFc2NhcGVyIiwiZXNjYXBlciIsInRlc3RSZWdleHAiLCJyZXBsYWNlUmVnZXhwIiwidW5lc2NhcGUiLCJpZENvdW50ZXIiLCJ1bmlxdWVJZCIsInRlbXBsYXRlU2V0dGluZ3MiLCJldmFsdWF0ZSIsIm5vTWF0Y2giLCJlc2NhcGVzIiwiXFwiLCJcciIsIlxuIiwi4oCoIiwi4oCpIiwiZXNjYXBlQ2hhciIsIm9sZFNldHRpbmdzIiwidmFyaWFibGUiLCJyZW5kZXIiLCJfY2hhaW4iLCJtaXhpbiIsInRvSlNPTiIsIkNoYXJ0IiwiY2FudmFzIiwiY3R4IiwiY29tcHV0ZURpbWVuc2lvbiIsImRpbWVuc2lvbiIsImFzcGVjdFJhdGlvIiwiaGVscGVycyIsInJldGluYVNjYWxlIiwiYW5pbWF0aW9uU3RlcHMiLCJhbmltYXRpb25FYXNpbmciLCJzaG93U2NhbGUiLCJzY2FsZU92ZXJyaWRlIiwic2NhbGVTdGVwcyIsInNjYWxlU3RlcFdpZHRoIiwic2NhbGVTdGFydFZhbHVlIiwic2NhbGVMaW5lQ29sb3IiLCJzY2FsZUxpbmVXaWR0aCIsInNjYWxlU2hvd0xhYmVscyIsInNjYWxlTGFiZWwiLCJzY2FsZUludGVnZXJzT25seSIsInNjYWxlQmVnaW5BdFplcm8iLCJzY2FsZUZvbnRGYW1pbHkiLCJzY2FsZUZvbnRTaXplIiwic2NhbGVGb250U3R5bGUiLCJzY2FsZUZvbnRDb2xvciIsInJlc3BvbnNpdmUiLCJtYWludGFpbkFzcGVjdFJhdGlvIiwic2hvd1Rvb2x0aXBzIiwiY3VzdG9tVG9vbHRpcHMiLCJ0b29sdGlwRXZlbnRzIiwidG9vbHRpcEZpbGxDb2xvciIsInRvb2x0aXBGb250RmFtaWx5IiwidG9vbHRpcEZvbnRTaXplIiwidG9vbHRpcEZvbnRTdHlsZSIsInRvb2x0aXBGb250Q29sb3IiLCJ0b29sdGlwVGl0bGVGb250RmFtaWx5IiwidG9vbHRpcFRpdGxlRm9udFNpemUiLCJ0b29sdGlwVGl0bGVGb250U3R5bGUiLCJ0b29sdGlwVGl0bGVGb250Q29sb3IiLCJ0b29sdGlwWVBhZGRpbmciLCJ0b29sdGlwWFBhZGRpbmciLCJ0b29sdGlwQ2FyZXRTaXplIiwidG9vbHRpcENvcm5lclJhZGl1cyIsInRvb2x0aXBYT2Zmc2V0IiwidG9vbHRpcFRlbXBsYXRlIiwibXVsdGlUb29sdGlwVGVtcGxhdGUiLCJtdWx0aVRvb2x0aXBLZXlCYWNrZ3JvdW5kIiwib25BbmltYXRpb25Qcm9ncmVzcyIsIm9uQW5pbWF0aW9uQ29tcGxldGUiLCJsb29wYWJsZSIsImFkZGl0aW9uYWxBcmdzIiwib2JqQ2xvbmUiLCJleHRlbnNpb25PYmplY3QiLCJtYXN0ZXIiLCJhcnJheVRvU2VhcmNoIiwiaW5oZXJpdHMiLCJmaWx0ZXJDYWxsYmFjayIsImZpbmROZXh0V2hlcmUiLCJjdXJyZW50SXRlbSIsImZpbmRQcmV2aW91c1doZXJlIiwiZXh0ZW5zaW9ucyIsIkNoYXJ0RWxlbWVudCIsIlN1cnJvZ2F0ZSIsIl9fc3VwZXJfXyIsImdldERlY2ltYWxQbGFjZXMiLCJjYXAiLCJ2YWx1ZVRvQ2FwIiwibWF4VmFsdWUiLCJtaW5WYWx1ZSIsInRvUmFkaWFucyIsInJhZGlhbnMiLCJkZWdyZWVzIiwiYWxpYXNQaXhlbCIsImdldEFuZ2xlRnJvbVBvaW50IiwiY2VudHJlUG9pbnQiLCJhbmdsZVBvaW50IiwiZGlzdGFuY2VGcm9tWENlbnRlciIsIngiLCJkaXN0YW5jZUZyb21ZQ2VudGVyIiwicmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyIiwic3FydCIsImFuZ2xlIiwiYXRhbjIiLCJkaXN0YW5jZSIsInBpeGVsV2lkdGgiLCJjYWxjdWxhdGVPcmRlck9mTWFnbml0dWRlIiwic3BsaW5lQ3VydmUiLCJGaXJzdFBvaW50IiwiTWlkZGxlUG9pbnQiLCJBZnRlclBvaW50IiwiZDAxIiwiZDEyIiwiZmEiLCJmYiIsImlubmVyIiwiTE4xMCIsImNhbGN1bGF0ZVNjYWxlUmFuZ2UiLCJ2YWx1ZXNBcnJheSIsImRyYXdpbmdTaXplIiwidGV4dFNpemUiLCJzdGFydEZyb21aZXJvIiwiaW50ZWdlcnNPbmx5IiwibWluU3RlcHMiLCJtYXhTdGVwcyIsInNraXBGaXR0aW5nIiwidmFsdWVSYW5nZSIsInJhbmdlT3JkZXJPZk1hZ25pdHVkZSIsImdyYXBoTWF4IiwiZ3JhcGhNaW4iLCJncmFwaFJhbmdlIiwic3RlcFZhbHVlIiwibnVtYmVyT2ZTdGVwcyIsInN0ZXBzIiwidGVtcGxhdGVTdHJpbmciLCJ2YWx1ZXNPYmplY3QiLCJ0bXBsIiwiZWFzaW5nRWZmZWN0cyIsImdlbmVyYXRlTGFiZWxzIiwibGFiZWxzQXJyYXkiLCJsYWJlbFRlbXBsYXRlU3RyaW5nIiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVhc2VJbk91dFF1YXJ0IiwiZWFzZUluUXVpbnQiLCJlYXNlT3V0UXVpbnQiLCJlYXNlSW5PdXRRdWludCIsImVhc2VJblNpbmUiLCJlYXNlT3V0U2luZSIsInNpbiIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5FeHBvIiwiZWFzZU91dEV4cG8iLCJlYXNlSW5PdXRFeHBvIiwiZWFzZUluQ2lyYyIsImVhc2VPdXRDaXJjIiwiZWFzZUluT3V0Q2lyYyIsImVhc2VJbkVsYXN0aWMiLCJhc2luIiwiZWFzZU91dEVsYXN0aWMiLCJlYXNlSW5PdXRFbGFzdGljIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJlYXNlSW5PdXRCb3VuY2UiLCJyZXF1ZXN0QW5pbUZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbUZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJvQ2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtc0NhbmNlbEFuaW1hdGlvbkZyYW1lIiwiYWRkRXZlbnQiLCJhbmltYXRpb25Mb29wIiwidG90YWxTdGVwcyIsImVhc2luZ1N0cmluZyIsIm9uUHJvZ3Jlc3MiLCJvbkNvbXBsZXRlIiwiY2hhcnRJbnN0YW5jZSIsImN1cnJlbnRTdGVwIiwiZWFzaW5nRnVuY3Rpb24iLCJhbmltYXRpb25GcmFtZSIsInN0ZXBEZWNpbWFsIiwiZWFzZURlY2ltYWwiLCJnZXRSZWxhdGl2ZVBvc2l0aW9uIiwibW91c2VYIiwibW91c2VZIiwic3JjRWxlbWVudCIsImJvdW5kaW5nUmVjdCIsInRvdWNoZXMiLCJldmVudFR5cGUiLCJkZXRhY2hFdmVudCIsInVuYmluZEV2ZW50cyIsImJpbmRFdmVudHMiLCJhcnJheU9mRXZlbnRzIiwiY2hhcnQiLCJnZXRNYXhpbXVtV2lkdGgiLCJjbGllbnRXaWR0aCIsImdldE1heGltdW1IZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJnZXRNYXhpbXVtU2l6ZSIsImRldmljZVBpeGVsUmF0aW8iLCJjbGVhciIsImNsZWFyUmVjdCIsImZvbnRTdHJpbmciLCJwaXhlbFNpemUiLCJmb250U3R5bGUiLCJmb250RmFtaWx5IiwibG9uZ2VzdFRleHQiLCJmb250IiwiYXJyYXlPZlN0cmluZ3MiLCJsb25nZXN0IiwidGV4dFdpZHRoIiwibWVhc3VyZVRleHQiLCJkcmF3Um91bmRlZFJlY3RhbmdsZSIsInJhZGl1cyIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJjbG9zZVBhdGgiLCJpbnN0YW5jZXMiLCJyZXNpemUiLCJpbml0aWFsaXplIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJyZWZsb3ciLCJkcmF3IiwiZ2VuZXJhdGVMZWdlbmQiLCJsZWdlbmRUZW1wbGF0ZSIsInJlbW92ZVByb3BlcnR5Iiwic2hvd1Rvb2x0aXAiLCJDaGFydEVsZW1lbnRzIiwiZm9yY2VSZWRyYXciLCJhY3RpdmVFbGVtZW50cyIsImlzQ2hhbmdlZCIsIkVsZW1lbnRzIiwiZGF0YXNldHMiLCJkYXRhQXJyYXkiLCJkYXRhSW5kZXgiLCJwb2ludHMiLCJiYXJzIiwidG9vbHRpcExhYmVscyIsInRvb2x0aXBDb2xvcnMiLCJtZWRpYW5Qb3NpdGlvbiIsImRhdGFDb2xsZWN0aW9uIiwieE1heCIsInlNYXgiLCJ4TWluIiwieU1pbiIsInhQb3NpdGlvbnMiLCJ5UG9zaXRpb25zIiwiZGF0YXNldCIsImhhc1ZhbHVlIiwiZmlsbCIsIl9zYXZlZCIsImZpbGxDb2xvciIsInN0cm9rZSIsInN0cm9rZUNvbG9yIiwiTXVsdGlUb29sdGlwIiwieFBhZGRpbmciLCJ5UGFkZGluZyIsInhPZmZzZXQiLCJ0ZXh0Q29sb3IiLCJmb250U2l6ZSIsInRpdGxlVGV4dENvbG9yIiwidGl0bGVGb250RmFtaWx5IiwidGl0bGVGb250U3R5bGUiLCJ0aXRsZUZvbnRTaXplIiwiY29ybmVyUmFkaXVzIiwibGFiZWxzIiwibGVnZW5kQ29sb3JzIiwibGVnZW5kQ29sb3JCYWNrZ3JvdW5kIiwidGl0bGUiLCJjdXN0b20iLCJFbGVtZW50IiwidG9vbHRpcFBvc2l0aW9uIiwiVG9vbHRpcCIsImNhcmV0SGVpZ2h0IiwidG9CYXNlNjRJbWFnZSIsInRvRGF0YVVSTCIsIkNoYXJ0VHlwZSIsImNoYXJ0TmFtZSIsImJhc2VEZWZhdWx0cyIsImNvbmZpZ3VyYXRpb24iLCJzYXZlIiwicmVzdG9yZSIsIm5ld1Byb3BzIiwiZWFzZSIsIlBvaW50IiwiaW5SYW5nZSIsImNoYXJ0WCIsImNoYXJ0WSIsImhpdERldGVjdGlvblJhbmdlIiwiaGl0RGV0ZWN0aW9uUmFkaXVzIiwiYXJjIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJzdHJva2VXaWR0aCIsImZpbGxTdHlsZSIsIkFyYyIsInBvaW50UmVsYXRpdmVQb3NpdGlvbiIsImJldHdlZW5BbmdsZXMiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJ3aXRoaW5SYWRpdXMiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiY2VudHJlQW5nbGUiLCJyYW5nZUZyb21DZW50cmUiLCJhbmltYXRpb25QZXJjZW50IiwibGluZUpvaW4iLCJzaG93U3Ryb2tlIiwiUmVjdGFuZ2xlIiwiaGFsZldpZHRoIiwibGVmdFgiLCJyaWdodFgiLCJoYWxmU3Ryb2tlIiwieEFsaWduIiwieUFsaWduIiwiY2FyZXRQYWRkaW5nIiwidG9vbHRpcFdpZHRoIiwidG9vbHRpcFJlY3RIZWlnaHQiLCJ0b29sdGlwSGVpZ2h0IiwidG9vbHRpcFgiLCJ0b29sdGlwWSIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsImZpbGxUZXh0IiwidGl0bGVGb250IiwidGl0bGVXaWR0aCIsImxhYmVsV2lkdGgiLCJsb25nZXN0VGV4dFdpZHRoIiwiaGFsZkhlaWdodCIsImdldExpbmVIZWlnaHQiLCJiYXNlTGluZUhlaWdodCIsImFmdGVyVGl0bGVJbmRleCIsImZpbGxSZWN0IiwiU2NhbGUiLCJmaXQiLCJidWlsZFlMYWJlbHMiLCJ5TGFiZWxzIiwic3RlcERlY2ltYWxQbGFjZXMiLCJ5TGFiZWxXaWR0aCIsInNob3dMYWJlbHMiLCJhZGRYTGFiZWwiLCJ4TGFiZWxzIiwidmFsdWVzQ291bnQiLCJyZW1vdmVYTGFiZWwiLCJzdGFydFBvaW50IiwiZW5kUG9pbnQiLCJjYWNoZWRZTGFiZWxXaWR0aCIsImNhY2hlZEhlaWdodCIsImNhbGN1bGF0ZVlSYW5nZSIsImNhbGN1bGF0ZVhMYWJlbFJvdGF0aW9uIiwiZmlyc3RSb3RhdGVkIiwibGFzdFJvdGF0ZWQiLCJmaXJzdFdpZHRoIiwibGFzdFdpZHRoIiwieFNjYWxlUGFkZGluZ1JpZ2h0IiwieFNjYWxlUGFkZGluZ0xlZnQiLCJ4TGFiZWxSb3RhdGlvbiIsImNvc1JvdGF0aW9uIiwib3JpZ2luYWxMYWJlbFdpZHRoIiwieExhYmVsV2lkdGgiLCJ4R3JpZFdpZHRoIiwiY2FsY3VsYXRlWCIsImRyYXdpbmdBcmVhIiwiY2FsY3VsYXRlWSIsInNjYWxpbmdGYWN0b3IiLCJpbm5lcldpZHRoIiwidmFsdWVXaWR0aCIsInZhbHVlT2Zmc2V0Iiwib2Zmc2V0R3JpZExpbmVzIiwieUxhYmVsR2FwIiwieFN0YXJ0IiwibGFiZWxTdHJpbmciLCJ5TGFiZWxDZW50ZXIiLCJsaW5lUG9zaXRpb25ZIiwiZHJhd0hvcml6b250YWxMaW5lIiwic2hvd0hvcml6b250YWxMaW5lcyIsImdyaWRMaW5lV2lkdGgiLCJncmlkTGluZUNvbG9yIiwibGluZUNvbG9yIiwieFBvcyIsImxpbmVQb3MiLCJpc1JvdGF0ZWQiLCJkcmF3VmVydGljYWxMaW5lIiwic2hvd1ZlcnRpY2FsTGluZXMiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJSYWRpYWxTY2FsZSIsImJhY2tkcm9wUGFkZGluZ1kiLCJjYWxjdWxhdGVDZW50ZXJPZmZzZXQiLCJsaW5lQXJjIiwic2V0U2NhbGVTaXplIiwiZ2V0Q2lyY3VtZmVyZW5jZSIsInBvaW50UG9zaXRpb24iLCJoYWxmVGV4dFdpZHRoIiwiZnVydGhlc3RSaWdodEluZGV4IiwiZnVydGhlc3RSaWdodEFuZ2xlIiwiZnVydGhlc3RMZWZ0SW5kZXgiLCJmdXJ0aGVzdExlZnRBbmdsZSIsInhQcm90cnVzaW9uTGVmdCIsInhQcm90cnVzaW9uUmlnaHQiLCJyYWRpdXNSZWR1Y3Rpb25SaWdodCIsInJhZGl1c1JlZHVjdGlvbkxlZnQiLCJsYXJnZXN0UG9zc2libGVSYWRpdXMiLCJwb2ludExhYmVsRm9udFNpemUiLCJmdXJ0aGVzdFJpZ2h0IiwiZnVydGhlc3RMZWZ0IiwicG9pbnRMYWJlbEZvbnRTdHlsZSIsInBvaW50TGFiZWxGb250RmFtaWx5IiwiZ2V0UG9pbnRQb3NpdGlvbiIsImdldEluZGV4QW5nbGUiLCJzZXRDZW50ZXJQb2ludCIsImxlZnRNb3ZlbWVudCIsInJpZ2h0TW92ZW1lbnQiLCJtYXhSaWdodCIsIm1heExlZnQiLCJ4Q2VudGVyIiwieUNlbnRlciIsImFuZ2xlTXVsdGlwbGllciIsImRpc3RhbmNlRnJvbUNlbnRlciIsInRoaXNBbmdsZSIsInlDZW50ZXJPZmZzZXQiLCJ5SGVpZ2h0Iiwic2hvd0xhYmVsQmFja2Ryb3AiLCJiYWNrZHJvcENvbG9yIiwiYmFja2Ryb3BQYWRkaW5nWCIsImZvbnRDb2xvciIsImFuZ2xlTGluZVdpZHRoIiwiYW5nbGVMaW5lQ29sb3IiLCJvdXRlclBvc2l0aW9uIiwicG9pbnRMYWJlbFBvc2l0aW9uIiwicG9pbnRMYWJlbEZvbnRDb2xvciIsImxhYmVsc0NvdW50IiwiaGFsZkxhYmVsc0NvdW50IiwicXVhcnRlckxhYmVsc0NvdW50IiwidXBwZXJIYWxmIiwiZXhhY3RRdWFydGVyIiwic2NhbGVTaG93R3JpZExpbmVzIiwic2NhbGVHcmlkTGluZUNvbG9yIiwic2NhbGVHcmlkTGluZVdpZHRoIiwic2NhbGVTaG93SG9yaXpvbnRhbExpbmVzIiwic2NhbGVTaG93VmVydGljYWxMaW5lcyIsImJhclNob3dTdHJva2UiLCJiYXJTdHJva2VXaWR0aCIsImJhclZhbHVlU3BhY2luZyIsImJhckRhdGFzZXRTcGFjaW5nIiwiU2NhbGVDbGFzcyIsImNhbGN1bGF0ZUJhclgiLCJkYXRhc2V0Q291bnQiLCJkYXRhc2V0SW5kZXgiLCJiYXJJbmRleCIsInhXaWR0aCIsImNhbGN1bGF0ZUJhc2VXaWR0aCIsInhBYnNvbHV0ZSIsImJhcldpZHRoIiwiY2FsY3VsYXRlQmFyV2lkdGgiLCJiYXNlV2lkdGgiLCJhY3RpdmVCYXJzIiwiZ2V0QmFyc0F0RXZlbnQiLCJlYWNoQmFycyIsImJhciIsImFjdGl2ZUJhciIsImhpZ2hsaWdodEZpbGwiLCJoaWdobGlnaHRTdHJva2UiLCJCYXJDbGFzcyIsImRhdGFzZXRPYmplY3QiLCJkYXRhUG9pbnQiLCJkYXRhc2V0TGFiZWwiLCJidWlsZFNjYWxlIiwiYmFyc0FycmF5IiwiZXZlbnRQb3NpdGlvbiIsImRhdGFzZXRJdGVyYXRvciIsImRhdGFUb3RhbCIsInNjYWxlT3B0aW9ucyIsImJlZ2luQXRaZXJvIiwiY3VycmVudEhlaWdodCIsInVwZGF0ZWRSYW5nZXMiLCJhZGREYXRhIiwibmV3U2NhbGVQcm9wcyIsImVhc2luZ0RlY2ltYWwiLCJzZWdtZW50U2hvd1N0cm9rZSIsInNlZ21lbnRTdHJva2VDb2xvciIsInNlZ21lbnRTdHJva2VXaWR0aCIsInBlcmNlbnRhZ2VJbm5lckN1dG91dCIsImFuaW1hdGVSb3RhdGUiLCJhbmltYXRlU2NhbGUiLCJTZWdtZW50QXJjIiwiYWN0aXZlU2VnbWVudHMiLCJnZXRTZWdtZW50c0F0RXZlbnQiLCJhY3RpdmVTZWdtZW50IiwiaGlnaGxpZ2h0Q29sb3IiLCJjYWxjdWxhdGVUb3RhbCIsImRhdGFwb2ludCIsInNlZ21lbnRzQXJyYXkiLCJhdEluZGV4Iiwic2lsZW50IiwiY29sb3IiLCJoaWdobGlnaHQiLCJjaXJjdW1mZXJlbmNlIiwiY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSIsInRvdGFsIiwiaW5kZXhUb0RlbGV0ZSIsImFuaW1EZWNpbWFsIiwiRG91Z2hudXQiLCJiZXppZXJDdXJ2ZSIsImJlemllckN1cnZlVGVuc2lvbiIsInBvaW50RG90IiwicG9pbnREb3RSYWRpdXMiLCJwb2ludERvdFN0cm9rZVdpZHRoIiwicG9pbnRIaXREZXRlY3Rpb25SYWRpdXMiLCJkYXRhc2V0U3Ryb2tlIiwiZGF0YXNldFN0cm9rZVdpZHRoIiwiZGF0YXNldEZpbGwiLCJQb2ludENsYXNzIiwiYWN0aXZlUG9pbnRzIiwiZ2V0UG9pbnRzQXRFdmVudCIsImVhY2hQb2ludHMiLCJwb2ludCIsImFjdGl2ZVBvaW50IiwicG9pbnRDb2xvciIsInBvaW50U3Ryb2tlQ29sb3IiLCJwb2ludEhpZ2hsaWdodEZpbGwiLCJwb2ludEhpZ2hsaWdodFN0cm9rZSIsInBvaW50c0FycmF5IiwibmV4dFBvaW50IiwicHJldmlvdXNQb2ludCIsInBvaW50c1dpdGhWYWx1ZXMiLCJ0ZW5zaW9uIiwiY29udHJvbFBvaW50cyIsImJlemllckN1cnZlVG8iLCJzY2FsZVNob3dMYWJlbEJhY2tkcm9wIiwic2NhbGVCYWNrZHJvcENvbG9yIiwic2NhbGVCYWNrZHJvcFBhZGRpbmdZIiwic2NhbGVCYWNrZHJvcFBhZGRpbmdYIiwic2NhbGVTaG93TGluZSIsInVwZGF0ZVNjYWxlUmFuZ2UiLCJkYXRhcG9pbnRzIiwic2NhbGVTaXplcyIsImFuZ2xlU2hvd0xpbmVPdXQiLCJhY3RpdmVQb2ludHNDb2xsZWN0aW9uIiwibW91c2VQb3NpdGlvbiIsImZyb21DZW50ZXIiLCJhbmdsZVBlckluZGV4IiwicG9pbnRJbmRleCIsInRvdGFsRGF0YUFycmF5IiwidmFsaWRhdGVUcmFuc3BvcnQiLCJyZXF1ZXN0ZWRUcmFuc3BvcnQiLCJjb25uZWN0aW9uIiwic2lnbmFsUiIsImllVmVyc2lvbiIsImdldERlZmF1bHRQb3J0IiwiYWRkRGVmYXVsdFBvcnQiLCJDb25uZWN0aW5nTWVzc2FnZUJ1ZmZlciIsImRyYWluQ2FsbGJhY2siLCJidWZmZXIiLCJ0cnlCdWZmZXIiLCJjb25uZWN0aW9uU3RhdGUiLCJjb25uZWN0aW5nIiwiZHJhaW4iLCJjb25uZWN0ZWQiLCJyZXNvdXJjZXMiLCJub2pRdWVyeSIsIm5vVHJhbnNwb3J0T25Jbml0IiwiZXJyb3JPbk5lZ290aWF0ZSIsInN0b3BwZWRXaGlsZUxvYWRpbmciLCJzdG9wcGVkV2hpbGVOZWdvdGlhdGluZyIsImVycm9yUGFyc2luZ05lZ290aWF0ZVJlc3BvbnNlIiwiZXJyb3JEdXJpbmdTdGFydFJlcXVlc3QiLCJzdG9wcGVkRHVyaW5nU3RhcnRSZXF1ZXN0IiwiZXJyb3JQYXJzaW5nU3RhcnRSZXNwb25zZSIsImludmFsaWRTdGFydFJlc3BvbnNlIiwicHJvdG9jb2xJbmNvbXBhdGlibGUiLCJzZW5kRmFpbGVkIiwicGFyc2VGYWlsZWQiLCJsb25nUG9sbEZhaWxlZCIsImV2ZW50U291cmNlRmFpbGVkVG9Db25uZWN0IiwiZXZlbnRTb3VyY2VFcnJvciIsIndlYlNvY2tldENsb3NlZCIsInBpbmdTZXJ2ZXJGYWlsZWRJbnZhbGlkUmVzcG9uc2UiLCJwaW5nU2VydmVyRmFpbGVkIiwicGluZ1NlcnZlckZhaWxlZFN0YXR1c0NvZGUiLCJwaW5nU2VydmVyRmFpbGVkUGFyc2UiLCJub0Nvbm5lY3Rpb25UcmFuc3BvcnQiLCJ3ZWJTb2NrZXRzSW52YWxpZFN0YXRlIiwicmVjb25uZWN0VGltZW91dCIsInJlY29ubmVjdFdpbmRvd1RpbWVvdXQiLCJfY29ubmVjdGlvbiIsIl9wYWdlTG9hZGVkIiwiX3BhZ2VXaW5kb3ciLCJfbmVnb3RpYXRlQWJvcnRUZXh0Iiwib25TdGFydCIsIm9uU3RhcnRpbmciLCJvblJlY2VpdmVkIiwib25FcnJvciIsIm9uQ29ubmVjdGlvblNsb3ciLCJvblJlY29ubmVjdGluZyIsIm9uUmVjb25uZWN0Iiwib25TdGF0ZUNoYW5nZWQiLCJvbkRpc2Nvbm5lY3QiLCJhamF4RGVmYXVsdHMiLCJsb2dnaW5nIiwidG9UaW1lU3RyaW5nIiwiY2hhbmdlU3RhdGUiLCJleHBlY3RlZFN0YXRlIiwiaXNEaXNjb25uZWN0aW5nIiwiZGlzY29ubmVjdGVkIiwic3VwcG9ydHNLZWVwQWxpdmUiLCJrZWVwQWxpdmVEYXRhIiwiYWN0aXZhdGVkIiwiY29uZmlndXJlU3RvcFJlY29ubmVjdGluZ1RpbWVvdXQiLCJzdG9wUmVjb25uZWN0aW5nVGltZW91dCIsIm9uUmVjb25uZWN0VGltZW91dCIsImNvbmZpZ3VyZWRTdG9wUmVjb25uZWN0aW5nVGltZW91dCIsImRpc2Nvbm5lY3RUaW1lb3V0IiwicmVjb25uZWN0aW5nIiwic3RhdGVDaGFuZ2VkIiwicXMiLCJkZWZhdWx0Q29udGVudFR5cGUiLCJhcHBOYW1lIiwidHJhbnNwb3J0RXJyb3IiLCJmaXJlZm94TWFqb3JWZXJzaW9uIiwiY29uZmlndXJlUGluZ0ludGVydmFsIiwib25GYWlsIiwicGluZ0ludGVydmFsSWQiLCJwaW5nSW50ZXJ2YWwiLCJfbG9naWMiLCJwaW5nU2VydmVyIiwiaHViIiwiJGNvbm5lY3Rpb24iLCJsYXN0RXJyb3IiLCJjb25uZWN0aW5nTWVzc2FnZUJ1ZmZlciIsImxhc3RNZXNzYWdlQXQiLCJsYXN0QWN0aXZlQXQiLCJiZWF0SW50ZXJ2YWwiLCJiZWF0SGFuZGxlIiwidG90YWxUcmFuc3BvcnRDb25uZWN0VGltZW91dCIsIl9wYXJzZVJlc3BvbnNlIiwiX29yaWdpbmFsSnNvbiIsImlzQ3Jvc3NEb21haW4iLCJhZ2FpbnN0IiwiYWpheERhdGFUeXBlIiwiY2xpZW50UHJvdG9jb2wiLCJyZWNvbm5lY3REZWxheSIsInRyYW5zcG9ydENvbm5lY3RUaW1lb3V0IiwicmVjb25uZWN0V2luZG93Iiwia2VlcEFsaXZlV2FybkF0Iiwid2FpdEZvclBhZ2VMb2FkIiwiX2RlZmVycmFsIiwiZGVmZXJyZWRTdGFydEhhbmRsZXIiLCJiYXNlVXJsIiwid3NQcm90b2NvbCIsImluaXRIYW5kbGVyIiwibm9UcmFuc3BvcnRFcnJvciIsInRyYW5zcG9ydE5hbWUiLCJvbkZhbGxiYWNrIiwiaXNGaXJlZm94MTFPckdyZWF0ZXIiLCJhc3luY0Fib3J0IiwibW9uaXRvcktlZXBBbGl2ZSIsInN0YXJ0SGVhcnRiZWF0Iiwib25GYWlsZWQiLCJuZWdvdGlhdGVSZXF1ZXN0IiwicHJlcGFyZVF1ZXJ5U3RyaW5nIiwicmVzIiwicHJvdG9jb2xFcnJvciIsInN1cHBvcnRlZFRyYW5zcG9ydHMiLCJhcHBSZWxhdGl2ZVVybCIsIlVybCIsIkNvbm5lY3Rpb25JZCIsIkNvbm5lY3Rpb25Ub2tlbiIsIndlYlNvY2tldFNlcnZlclVybCIsIldlYlNvY2tldFNlcnZlclVybCIsInBvbGxUaW1lb3V0IiwiQ29ubmVjdGlvblRpbWVvdXQiLCJEaXNjb25uZWN0VGltZW91dCIsIlRyYW5zcG9ydENvbm5lY3RUaW1lb3V0IiwiS2VlcEFsaXZlVGltZW91dCIsInRpbWVvdXRXYXJuaW5nIiwiUHJvdG9jb2xWZXJzaW9uIiwiVHJ5V2ViU29ja2V0cyIsInN0YXJ0aW5nIiwicmVjZWl2ZWQiLCJlcnJvckRhdGEiLCJzZW5kRGF0YSIsImNvbm5lY3Rpb25TbG93IiwicmVjb25uZWN0ZWQiLCJub3RpZnlTZXJ2ZXIiLCJkZWZlcnJhbCIsInN0b3BNb25pdG9yaW5nS2VlcEFsaXZlIiwibWVzc2FnZUlkIiwiZ3JvdXBzVG9rZW4iLCJiZWF0IiwibW9uaXRvcmluZyIsImNoZWNrSWZBbGl2ZSIsInRyYW5zcG9ydExvZ2ljIiwibWFya0FjdGl2ZSIsInRpbWVFbGFwc2VkIiwibG9zdENvbm5lY3Rpb24iLCJ1c2VyTm90aWZpZWQiLCJnZXRBamF4VXJsIiwiSW5pdEhhbmRsZXIiLCJzdGFydFJlcXVlc3RlZCIsInN0YXJ0Q29tcGxldGVkIiwiY29ubmVjdGlvblN0b3BwZWQiLCJzdGFydEFib3J0VGV4dCIsIm9uU3VjY2VzcyIsImZhaWxDYWxsZWQiLCJ0cmFuc3BvcnRUaW1lb3V0SGFuZGxlIiwidHJhbnNwb3J0RmFpbGVkIiwiaW5pdFJlY2VpdmVkIiwidHJ5QWJvcnRTdGFydFJlcXVlc3QiLCJhamF4U3RhcnQiLCJ3cmFwcGVkRXJyb3IiLCJhZGRRcyIsIlJlc3BvbnNlIiwicHJlcGFyZWRVcmwiLCJmaXJzdENoYXIiLCJhcHBlbmRlciIsImdldFVybCIsInBvbGwiLCJhamF4UG9zdCIsIm1heGltaXplUGVyc2lzdGVudFJlc3BvbnNlIiwibWluUGVyc2lzdGVudFJlc3BvbnNlIiwiTWVzc2FnZUlkIiwiQyIsIk1lc3NhZ2VzIiwiSW5pdGlhbGl6ZWQiLCJTaG91bGRSZWNvbm5lY3QiLCJMb25nUG9sbERlbGF5IiwiTCIsIkdyb3Vwc1Rva2VuIiwidXBkYXRlR3JvdXBzIiwic3RyaW5naWZ5U2VuZCIsImFqYXhTZW5kIiwicGF5bG9hZCIsInRyaWdnZXJSZWNlaXZlZCIsInRleHRTdGF0dXMiLCJhamF4QWJvcnQiLCJyZWplY3REZWZlcnJlZCIsInRyaWdnZXJTdGFydEVycm9yIiwic3RhcnRSZXF1ZXN0IiwidHJ5SW5pdGlhbGl6ZSIsInBlcnNpc3RlbnRSZXNwb25zZSIsIm9uSW5pdGlhbGl6ZWQiLCJwcm9jZXNzTWVzc2FnZXMiLCJtaW5EYXRhIiwibWFya0xhc3RNZXNzYWdlIiwicmVjb25uZWN0S2VlcEFsaXZlVXBkYXRlIiwidmVyaWZ5TGFzdEFjdGl2ZSIsImlzQ29ubmVjdGVkT3JSZWNvbm5lY3RpbmciLCJlbnN1cmVSZWNvbm5lY3RpbmdTdGF0ZSIsImNsZWFyUmVjb25uZWN0VGltZW91dCIsInJlY29ubmVjdCIsImhhbmRsZVBhcnNlRmFpbHVyZSIsImZvcmV2ZXJGcmFtZSIsImNvbm5lY3Rpb25zIiwid2ViU29ja2V0cyIsInNvY2tldCIsImV4Iiwib3BlbmVkIiwiV2ViU29ja2V0Iiwib25vcGVuIiwib25jbG9zZSIsIndhc0NsZWFuIiwib25tZXNzYWdlIiwiY2xlYXJSZWNvbm5lY3RBdHRlbXB0VGltZW91dCIsInJlY29ubmVjdEF0dGVtcHRUaW1lb3V0SGFuZGxlIiwic2VydmVyU2VudEV2ZW50cyIsInRpbWVPdXQiLCJldmVudFNvdXJjZSIsIkV2ZW50U291cmNlIiwiTWVzc2FnZSIsIk9QRU4iLCJldmVudFBoYXNlIiwiQ0xPU0VEIiwiY3JlYXRlRnJhbWUiLCJmcmFtZSIsImxvYWRQcmV2ZW50ZXIiLCJsb2FkaW5nRml4SW50ZXJ2YWxJZCIsImxvYWRpbmdGaXhJbnRlcnZhbCIsImF0dGFjaGVkVG8iLCJwcmV2ZW50IiwidGVtcEZyYW1lIiwiaWZyYW1lQ2xlYXJUaHJlc2hvbGQiLCJmcmFtZUlkIiwiZnJhbWVMb2FkSGFuZGxlciIsInJlY2VpdmUiLCJjdyIsImZyYW1lTWVzc2FnZUNvdW50IiwiY29udGVudFdpbmRvdyIsImV4ZWNDb21tYW5kIiwiZ2V0Q29ubmVjdGlvbiIsInN0YXJ0ZWQiLCJsb25nUG9sbGluZyIsImZpcmVDb25uZWN0IiwidHJ5RmFpbENvbm5lY3QiLCJwcml2YXRlRGF0YSIsInJlY29ubmVjdEVycm9ycyIsImZpcmVSZWNvbm5lY3RlZCIsInJlY29ubmVjdFRpbWVvdXRJZCIsIm1heEZpcmVSZWNvbm5lY3RlZFRpbWVvdXQiLCJwb2xsWGhyIiwicG9sbFRpbWVvdXRJZCIsInJhaXNlUmVjb25uZWN0IiwiY29ubmVjdCIsInBvbGxpbmciLCJwb3N0RGF0YSIsIm9ucHJvZ3Jlc3MiLCJzaG91bGRSZWNvbm5lY3QiLCJtYWtlRXZlbnROYW1lIiwiZXZlbnROYW1lc3BhY2UiLCJmdW4iLCJ0aGlzcCIsImdldEFyZ1ZhbHVlIiwiaGFzTWVtYmVycyIsImNsZWFySW52b2NhdGlvbkNhbGxiYWNrcyIsImludm9jYXRpb25DYWxsYmFja3MiLCJpbnZvY2F0aW9uQ2FsbGJhY2tJZCIsIkUiLCJodWJQcm94eSIsImh1YkNvbm5lY3Rpb24iLCJodWJOYW1lIiwidXNlRGVmYXVsdFBhdGgiLCJjYWxsYmFja01hcCIsImhhc1N1YnNjcmlwdGlvbnMiLCJjYWxsYmFja1NwYWNlIiwibWV0aG9kTmFtZSIsImFyZ1ZhbHVlcyIsIkEiLCJJIiwibWluUmVzdWx0IiwiX21heGltaXplSHViUmVzcG9uc2UiLCJTdGF0ZSIsIlByb2dyZXNzIiwicHJvZ3Jlc3NqUXVlcnlWZXJzaW9uTG9nZ2VkIiwiU3RhY2tUcmFjZSIsIklzSHViRXhjZXB0aW9uIiwiRXJyb3JEYXRhIiwiUmVzdWx0IiwiUyIsIm1pbkh1YlJlc3BvbnNlIiwiUiIsIlAiLCJJZCIsIkQiLCJUIiwicHJveGllcyIsImRhdGFDYWxsYmFja0lkIiwiX21heGltaXplQ2xpZW50SHViSW52b2NhdGlvbiIsIk1ldGhvZCIsIkh1YiIsIkFyZ3MiLCJlcnJEYXRhIiwib3JpZ0RhdGEiLCJtaW5DbGllbnRIdWJJbnZvY2F0aW9uIiwiX3JlZ2lzdGVyU3Vic2NyaWJlZEh1YnMiLCJfc3Vic2NyaWJlZFRvSHVicyIsInN1YnNjcmliZWRIdWJzIiwiY3JlYXRlSHViUHJveHkiLCJpbml0TmV3Q29ubmVjdGlvbiIsInJvb3RQYXRoIiwidXNlU2hhcmVkQ29ubmVjdGlvbiIsImdsb2JhbENvbm5lY3Rpb25zIiwiZGlzY29ubmVjdCIsInF1ZXJ5UGFyYW1zIiwiZXJyb3JIYW5kbGVyIiwiaHViRGlzY29ubmVjdGVkIiwiQ2hhcnRKc1Byb3ZpZGVyIiwiQ2hhcnRKcyIsInR5cGVPcHRpb25zIiwic2V0T3B0aW9ucyIsImN1c3RvbU9wdGlvbnMiLCJDaGFydEpzRmFjdG9yeSIsImNhblVwZGF0ZUNoYXJ0Iiwic3VtIiwiY2FycnkiLCJnZXRFdmVudEhhbmRsZXIiLCJ0cmlnZ2VyT25seU9uQ2hhbmdlIiwibGFzdFN0YXRlIiwiYXRFdmVudCIsImdldENvbG91cnMiLCJjb2xvdXJzIiwiZ2V0Q29sb3VyIiwiY29udmVydENvbG91ciIsImNvbG91ciIsImhleFRvUmdiIiwiZ2V0UmFuZG9tQ29sb3VyIiwiZ2V0UmFuZG9tSW50IiwicmdiYSIsImFscGhhIiwidXNpbmdFeGNhbnZhcyIsImJpZ2ludCIsImciLCJnZXREYXRhU2V0cyIsInNlcmllcyIsImdldERhdGEiLCJzZXRMZWdlbmQiLCIkb2xkTGVnZW5kIiwibGVnZW5kIiwidXBkYXRlQ2hhcnQiLCJkYXRhSXRlbSIsImlzUmVzcG9uc2l2ZSIsImNoYXJ0VHlwZSIsImNoYXJ0RGF0YSIsImNoYXJ0TGFiZWxzIiwiY2hhcnRPcHRpb25zIiwiY2hhcnRTZXJpZXMiLCJjaGFydENvbG91cnMiLCJjaGFydExlZ2VuZCIsImNoYXJ0Q2xpY2siLCJjaGFydEhvdmVyIiwiYWxpYXNWYXIiLCJmcm9tTmFtZSIsInRvTmFtZSIsInJlc2V0Q2hhcnQiLCJjcmVhdGVDaGFydCIsImN2cyIsImdldENvbnRleHQiLCJvbmNsaWNrIiwib25tb3VzZW1vdmUiLCJkZXByZWNhdGVkIiwiZW52IiwiR192bWxDYW52YXNNYW5hZ2VyIiwiaW5pdEVsZW1lbnQiXSwibWFwcGluZ3MiOiJDQWNBLFNBQUFBLEVBQUFDLEdBRUEsZ0JBQUFDLFNBQUEsZ0JBQUFBLFFBQUFDLFFBUUFELE9BQUFDLFFBQUFI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TUFBQSxJQUFBQSxNQUNBcnBHLFVBQUEsYUFBQSxpQkFBQSxTQUFBcXBHLEdBQUEsTUFBQSxJQUFBQSxHQUFBLFdBQ0FycEcsVUFBQSxZQUFBLGlCQUFBLFNBQUFxcEcsR0FBQSxNQUFBLElBQUFBLEdBQUEsVUFDQXJwRyxVQUFBLGNBQUEsaUJBQUEsU0FBQXFwRyxHQUFBLE1BQUEsSUFBQUEsR0FBQSxZQUNBcnBHLFVBQUEsaUJBQUEsaUJBQUEsU0FBQXFwRyxHQUFBLE1BQUEsSUFBQUEsR0FBQSxlQUNBcnBHLFVBQUEsWUFBQSxpQkFBQSxTQUFBcXBHLEdBQUEsTUFBQSxJQUFBQSxHQUFBLFVBQ0FycEcsVUFBQSxrQkFBQSxpQkFBQSxTQUFBcXBHLEdBQUEsTUFBQSxJQUFBQSxHQUFBIiwiZmlsZSI6InZlbmRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2Mi4xLjRcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAwNSwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE1LTA0LTI4VDE2OjAxWlxuICovXG5cbihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXG4vLyBDYW4ndCBiZSBpbiBzdHJpY3QgbW9kZSwgc2V2ZXJhbCBsaWJzIGluY2x1ZGluZyBBU1AuTkVUIHRyYWNlXG4vLyB0aGUgc3RhY2sgdmlhIGFyZ3VtZW50cy5jYWxsZXIuY2FsbGVlIGFuZCBGaXJlZm94IGRpZXMgaWZcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcbi8vXG5cbnZhciBhcnIgPSBbXTtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG52YXJcblx0Ly8gVXNlIHRoZSBjb3JyZWN0IGRvY3VtZW50IGFjY29yZGluZ2x5IHdpdGggd2luZG93IGFyZ3VtZW50IChzYW5kYm94KVxuXHRkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCxcblxuXHR2ZXJzaW9uID0gXCIyLjEuNFwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW1xcZGEtel0pL2dpLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gU3RhcnQgd2l0aCBhbiBlbXB0eSBzZWxlY3RvclxuXHRzZWxlY3RvcjogXCJcIixcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cblxuXHRcdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxuXG5cdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdC8vIChZb3UgY2FuIHNlZWQgdGhlIGFyZ3VtZW50cyB3aXRoIGFuIGFycmF5IG9mIGFyZ3MsIGJ1dCB0aGlzIGlzXG5cdC8vIG9ubHkgdXNlZCBpbnRlcm5hbGx5Lilcblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrLCBhcmdzICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2ssIGFyZ3MgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAodGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0pKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzW2pdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKG51bGwpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24odGFyZ2V0KSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoIChvcHRpb25zID0gYXJndW1lbnRzWyBpIF0pICE9IG51bGwgKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheShjb3B5KSkgKSApIHtcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUob2JqKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXxcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQvLyBhZGRpbmcgMSBjb3JyZWN0cyBsb3NzIG9mIHByZWNpc2lvbiBmcm9tIHBhcnNlRmxvYXQgKCMxNTEwMClcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0FycmF5KCBvYmogKSAmJiAob2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKyAxKSA+PSAwO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0Ly8gTm90IHBsYWluIG9iamVjdHM6XG5cdFx0Ly8gLSBBbnkgb2JqZWN0IG9yIHZhbHVlIHdob3NlIGludGVybmFsIFtbQ2xhc3NdXSBwcm9wZXJ0eSBpcyBub3QgXCJbb2JqZWN0IE9iamVjdF1cIlxuXHRcdC8vIC0gRE9NIG5vZGVzXG5cdFx0Ly8gLSB3aW5kb3dcblx0XHRpZiAoIGpRdWVyeS50eXBlKCBvYmogKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIFwiaXNQcm90b3R5cGVPZlwiICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlIGZ1bmN0aW9uIGhhc24ndCByZXR1cm5lZCBhbHJlYWR5LCB3ZSdyZSBjb25maWRlbnQgdGhhdFxuXHRcdC8vIHxvYmp8IGlzIGEgcGxhaW4gb2JqZWN0LCBjcmVhdGVkIGJ5IHt9IG9yIGNvbnN0cnVjdGVkIHdpdGggbmV3IE9iamVjdFxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMCwgaU9TPDYgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdHZhciBzY3JpcHQsXG5cdFx0XHRpbmRpcmVjdCA9IGV2YWw7XG5cblx0XHRjb2RlID0galF1ZXJ5LnRyaW0oIGNvZGUgKTtcblxuXHRcdGlmICggY29kZSApIHtcblx0XHRcdC8vIElmIHRoZSBjb2RlIGluY2x1ZGVzIGEgdmFsaWQsIHByb2xvZ3VlIHBvc2l0aW9uXG5cdFx0XHQvLyBzdHJpY3QgbW9kZSBwcmFnbWEsIGV4ZWN1dGUgY29kZSBieSBpbmplY3RpbmcgYVxuXHRcdFx0Ly8gc2NyaXB0IHRhZyBpbnRvIHRoZSBkb2N1bWVudC5cblx0XHRcdGlmICggY29kZS5pbmRleE9mKFwidXNlIHN0cmljdFwiKSA9PT0gMSApIHtcblx0XHRcdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcblx0XHRcdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBPdGhlcndpc2UsIGF2b2lkIHRoZSBET00gbm9kZSBjcmVhdGlvbiwgaW5zZXJ0aW9uXG5cdFx0XHQvLyBhbmQgcmVtb3ZhbCBieSB1c2luZyBhbiBpbmRpcmVjdCBnbG9iYWwgZXZhbFxuXHRcdFx0XHRpbmRpcmVjdCggY29kZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdC8vIGFyZ3MgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBvYmogKTtcblxuXHRcdGlmICggYXJncyApIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlsaWtlKCBPYmplY3QoYXJyKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRpc0FycmF5ID0gaXNBcnJheWxpa2UoIGVsZW1zICksXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5ICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSk7XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbihpLCBuYW1lKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlsaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogaU9TIDguMiAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9IFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggb2JqLm5vZGVUeXBlID09PSAxICYmIGxlbmd0aCApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4yLjAtcHJlXG4gKiBodHRwOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCAyMDA4LCAyMDE0IGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTQtMTItMTZcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEdlbmVyYWwtcHVycG9zZSBjb25zdGFudHNcblx0TUFYX05FR0FUSVZFID0gMSA8PCAzMSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cDovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gV2hpdGVzcGFjZSBjaGFyYWN0ZXJzIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc3ludGF4LyNjaGFyYWN0ZXJzXG5cdGNoYXJhY3RlckVuY29kaW5nID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcblxuXHQvLyBMb29zZWx5IG1vZGVsZWQgb24gQ1NTIGlkZW50aWZpZXIgY2hhcmFjdGVyc1xuXHQvLyBBbiB1bnF1b3RlZCB2YWx1ZSBzaG91bGQgYmUgYSBDU1MgaWRlbnRpZmllciBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHQvLyBQcm9wZXIgc3ludGF4OiBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IGNoYXJhY3RlckVuY29kaW5nLnJlcGxhY2UoIFwid1wiLCBcIncjXCIgKSxcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBjaGFyYWN0ZXJFbmNvZGluZy5yZXBsYWNlKCBcIndcIiwgXCJ3KlwiICkgKyBcIilcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblx0cmVzY2FwZSA9IC8nfFxcXFwvZyxcblxuXHQvLyBDU1MgZXNjYXBlcyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH07XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG1hdGNoLCBlbGVtLCBtLCBub2RlVHlwZSxcblx0XHQvLyBRU0EgdmFyc1xuXHRcdGksIGdyb3Vwcywgb2xkLCBuaWQsIG5ld0NvbnRleHQsIG5ld1NlbGVjdG9yO1xuXG5cdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblx0bm9kZVR5cGUgPSBjb250ZXh0Lm5vZGVUeXBlO1xuXG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0aWYgKCAhc2VlZCAmJiBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgd2hlbiBwb3NzaWJsZSAoZS5nLiwgbm90IHVuZGVyIERvY3VtZW50RnJhZ21lbnQpXG5cdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIjSURcIilcblx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKTtcblx0XHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xuXHRcdFx0XHRcdC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKGpRdWVyeSAjNjk2Mylcblx0XHRcdFx0XHRpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFLCBPcGVyYSwgYW5kIFdlYmtpdCByZXR1cm4gaXRlbXNcblx0XHRcdFx0XHRcdC8vIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBDb250ZXh0IGlzIG5vdCBhIGRvY3VtZW50XG5cdFx0XHRcdFx0aWYgKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgJiYgKGVsZW0gPSBjb250ZXh0Lm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiYgZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCJUQUdcIilcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiLkNMQVNTXCIpXG5cdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFFTQSBwYXRoXG5cdFx0aWYgKCBzdXBwb3J0LnFzYSAmJiAoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXHRcdFx0bmlkID0gb2xkID0gZXhwYW5kbztcblx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0bmV3U2VsZWN0b3IgPSBub2RlVHlwZSAhPT0gMSAmJiBzZWxlY3RvcjtcblxuXHRcdFx0Ly8gcVNBIHdvcmtzIHN0cmFuZ2VseSBvbiBFbGVtZW50LXJvb3RlZCBxdWVyaWVzXG5cdFx0XHQvLyBXZSBjYW4gd29yayBhcm91bmQgdGhpcyBieSBzcGVjaWZ5aW5nIGFuIGV4dHJhIElEIG9uIHRoZSByb290XG5cdFx0XHQvLyBhbmQgd29ya2luZyB1cCBmcm9tIHRoZXJlIChUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhlIHRlY2huaXF1ZSlcblx0XHRcdC8vIElFIDggZG9lc24ndCB3b3JrIG9uIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJiBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXG5cdFx0XHRcdGlmICggKG9sZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKFwiaWRcIikpICkge1xuXHRcdFx0XHRcdG5pZCA9IG9sZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgbmlkICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmlkID0gXCJbaWQ9J1wiICsgbmlkICsgXCInXSBcIjtcblxuXHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0Z3JvdXBzW2ldID0gbmlkICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHQ7XG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oXCIsXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoKHFzYUVycm9yKSB7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCAhb2xkICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge0Z1bmN0aW9uKHN0cmluZywgT2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBkaXYgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGRpdi5wYXJlbnROb2RlICkge1xuXHRcdFx0ZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGRpdiA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdCggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLVxuXHRcdFx0KCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgcGFyZW50LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBJZiBubyBkb2N1bWVudCBhbmQgZG9jdW1lbnRFbGVtZW50IGlzIGF2YWlsYWJsZSwgcmV0dXJuXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gU2V0IG91ciBkb2N1bWVudFxuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdHBhcmVudCA9IGRvYy5kZWZhdWx0VmlldztcblxuXHQvLyBTdXBwb3J0OiBJRT44XG5cdC8vIElmIGlmcmFtZSBkb2N1bWVudCBpcyBhc3NpZ25lZCB0byBcImRvY3VtZW50XCIgdmFyaWFibGUgYW5kIGlmIGlmcmFtZSBoYXMgYmVlbiByZWxvYWRlZCxcblx0Ly8gSUUgd2lsbCB0aHJvdyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBhY2Nlc3NpbmcgXCJkb2N1bWVudFwiIHZhcmlhYmxlLCBzZWUgalF1ZXJ5ICMxMzkzNlxuXHQvLyBJRTYtOCBkbyBub3Qgc3VwcG9ydCB0aGUgZGVmYXVsdFZpZXcgcHJvcGVydHkgc28gcGFyZW50IHdpbGwgYmUgdW5kZWZpbmVkXG5cdGlmICggcGFyZW50ICYmIHBhcmVudCAhPT0gcGFyZW50LnRvcCApIHtcblx0XHQvLyBJRTExIGRvZXMgbm90IGhhdmUgYXR0YWNoRXZlbnQsIHNvIGFsbCBtdXN0IHN1ZmZlclxuXHRcdGlmICggcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblx0XHR9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIFN1cHBvcnQgdGVzdHNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jICk7XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWRpdi5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvYy5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jLmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXG5cdFx0XHRcdC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgIzY5NjNcblx0XHRcdFx0cmV0dXJuIG0gJiYgbS5wYXJlbnROb2RlID8gWyBtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRkZWxldGUgRXhwci5maW5kW1wiSURcIl07XG5cblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jLnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxmXScgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuMissIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS43K1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2liaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsIFwiZGl2XCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBkaXYsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgZG9lcyBub3QgaW1wbGVtZW50IGluY2x1c2l2ZSBkZXNjZW5kZW50XG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvYyB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvYyB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2MgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2M7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIGRpZmYsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gcGFyZW50WyBleHBhbmRvIF0gfHwgKHBhcmVudFsgZXhwYW5kbyBdID0ge30pO1xuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMV07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsyXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB1c2VDYWNoZSAmJiAoY2FjaGUgPSAoZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0pICYmIGNhY2hlWzBdID09PSBkaXJydW5zICkge1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gY2FjaGVbMV07XG5cblx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLikgb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkgJiYgKytkaWZmICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0KG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XG5cdFx0fSxcblxuXHRcdFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gZGlyIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXHRcdFx0XHRcdFx0aWYgKCAob2xkQ2FjaGUgPSBvdXRlckNhY2hlWyBkaXIgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgZGlyIF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ICE9PSBkb2N1bWVudCAmJiBjb250ZXh0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gS2VlcCBgaWAgYSBzdHJpbmcgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzIHNvIGBtYXRjaGVkQ291bnRgIHdpbGwgYmUgXCIwMFwiIGJlbG93XG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBubyBzZWVkIGFuZCBvbmx5IG9uZSBncm91cFxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFRha2UgYSBzaG9ydGN1dCBhbmQgc2V0IHRoZSBjb250ZXh0IGlmIHRoZSByb290IHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0c3VwcG9ydC5nZXRCeUlkICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHRcdFx0RXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0cnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYxICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGRpdjEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRyZXR1cm4gZGl2LmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5qUXVlcnkuZXhwcltcIjpcIl0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICgvXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8pO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0pO1xuXG5cdH1cblxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0XHR9XG5cblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID49IDAgKSAhPT0gbm90O1xuXHR9KTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdHJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA/XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDpcblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdFx0fSkpO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSkgKTtcblx0XHR9XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKVxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQgKTtcblx0XHRyZXQuc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yID8gdGhpcy5zZWxlY3RvciArIFwiIFwiICsgc2VsZWN0b3IgOiBzZWxlY3Rvcjtcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyh0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UpICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0pO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclswXSA9PT0gXCI8XCIgJiYgc2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiYgc2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWzFdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFswXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWzFdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWzFdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWzJdICk7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBCbGFja2JlcnJ5IDQuNlxuXHRcdFx0XHRcdC8vIGdFQklEIHJldHVybnMgbm9kZXMgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoIzY5NjMpXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0XHR0aGlzWzBdID0gZWxlbTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLmNvbnRleHQgPSBkb2N1bWVudDtcblx0XHRcdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3RqUXVlcnkgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSB0aGlzWzBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiB0eXBlb2Ygcm9vdGpRdWVyeS5yZWFkeSAhPT0gXCJ1bmRlZmluZWRcIiA/XG5cdFx0XHRcdHJvb3RqUXVlcnkucmVhZHkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3Iuc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSBzZWxlY3Rvci5jb250ZXh0O1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRkaXI6IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHRcdHZhciBtYXRjaGVkID0gW10sXG5cdFx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBtYXRjaGVkO1xuXHR9LFxuXG5cdHNpYmxpbmc6IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHRcdHZhciBtYXRjaGVkID0gW107XG5cblx0XHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVkO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzW2ldICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHBvcyA9IHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3JzLCBjb250ZXh0IHx8IHRoaXMuY29udGV4dCApIDpcblx0XHRcdFx0MDtcblxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGZvciAoIGN1ciA9IHRoaXNbaV07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAocG9zID9cblx0XHRcdFx0XHRwb3MuaW5kZXgoY3VyKSA+IC0xIDpcblxuXHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKGN1ciwgc2VsZWN0b3JzKSkgKSB7XG5cblx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlKCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWUoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcihzZWxlY3Rvcilcblx0XHQpO1xuXHR9XG59KTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKGN1ciA9IGN1cltkaXJdKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCh7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnNpYmxpbmcoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5zaWJsaW5nKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudCB8fCBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZSggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0pO1xudmFyIHJub3R3aGl0ZSA9ICgvXFxTKy9nKTtcblxuXG5cbi8vIFN0cmluZyB0byBPYmplY3Qgb3B0aW9ucyBmb3JtYXQgY2FjaGVcbnZhciBvcHRpb25zQ2FjaGUgPSB7fTtcblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXMgYW5kIHN0b3JlIGluIGNhY2hlXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0gb3B0aW9uc0NhY2hlWyBvcHRpb25zIF0gPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0pO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdCggb3B0aW9uc0NhY2hlWyBvcHRpb25zIF0gfHwgY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIExhc3QgZmlyZSB2YWx1ZSAoZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0cylcblx0XHRtZW1vcnksXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXHRcdC8vIEZpcnN0IGNhbGxiYWNrIHRvIGZpcmUgKHVzZWQgaW50ZXJuYWxseSBieSBhZGQgYW5kIGZpcmVXaXRoKVxuXHRcdGZpcmluZ1N0YXJ0LFxuXHRcdC8vIEVuZCBvZiB0aGUgbG9vcCB3aGVuIGZpcmluZ1xuXHRcdGZpcmluZ0xlbmd0aCxcblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSByZW1vdmUgaWYgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4LFxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXHRcdC8vIFN0YWNrIG9mIGZpcmUgY2FsbHMgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRzdGFjayA9ICFvcHRpb25zLm9uY2UgJiYgW10sXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdFx0XHRtZW1vcnkgPSBvcHRpb25zLm1lbW9yeSAmJiBkYXRhO1xuXHRcdFx0ZmlyZWQgPSB0cnVlO1xuXHRcdFx0ZmlyaW5nSW5kZXggPSBmaXJpbmdTdGFydCB8fCAwO1xuXHRcdFx0ZmlyaW5nU3RhcnQgPSAwO1xuXHRcdFx0ZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBsaXN0ICYmIGZpcmluZ0luZGV4IDwgZmlyaW5nTGVuZ3RoOyBmaXJpbmdJbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIGRhdGFbIDAgXSwgZGF0YVsgMSBdICkgPT09IGZhbHNlICYmIG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7IC8vIFRvIHByZXZlbnQgZnVydGhlciBjYWxscyB1c2luZyBhZGRcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdGlmICggc3RhY2sgKSB7XG5cdFx0XHRcdFx0aWYgKCBzdGFjay5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCBzdGFjay5zaGlmdCgpICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNlbGYuZGlzYWJsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0Ly8gRmlyc3QsIHdlIHNhdmUgdGhlIGN1cnJlbnQgbGVuZ3RoXG5cdFx0XHRcdFx0dmFyIHN0YXJ0ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0KGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KSggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0Ly8gRG8gd2UgbmVlZCB0byBhZGQgdGhlIGNhbGxiYWNrcyB0byB0aGVcblx0XHRcdFx0XHQvLyBjdXJyZW50IGZpcmluZyBiYXRjaD9cblx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0xlbmd0aCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdC8vIFdpdGggbWVtb3J5LCBpZiB3ZSdyZSBub3QgZmlyaW5nIHRoZW5cblx0XHRcdFx0XHQvLyB3ZSBzaG91bGQgY2FsbCByaWdodCBhd2F5XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nU3RhcnQgPSBzdGFydDtcblx0XHRcdFx0XHRcdGZpcmUoIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nTGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlyaW5nTGVuZ3RoLS07XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gPyBqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDogISEoIGxpc3QgJiYgbGlzdC5sZW5ndGggKTtcblx0XHRcdH0sXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0ZmlyaW5nTGVuZ3RoID0gMDtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gSGF2ZSB0aGUgbGlzdCBkbyBub3RoaW5nIGFueW1vcmVcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsaXN0ID0gc3RhY2sgPSBtZW1vcnkgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIElzIGl0IGRpc2FibGVkP1xuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gTG9jayB0aGUgbGlzdCBpbiBpdHMgY3VycmVudCBzdGF0ZVxuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHN0YWNrID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgKSB7XG5cdFx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gSXMgaXQgbG9ja2VkP1xuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFzdGFjaztcblx0XHRcdH0sXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggbGlzdCAmJiAoICFmaXJlZCB8fCBzdGFjayApICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRzdGFjay5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGZpcmUoIGFyZ3MgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmpRdWVyeS5leHRlbmQoe1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgbGlzdGVuZXIgbGlzdCwgZmluYWwgc3RhdGVcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgXCJyZWplY3RlZFwiIF0sXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKFwibWVtb3J5XCIpIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZChmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIGkgXSApICYmIGZuc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZFsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdIGZvciBmb3J3YXJkaW5nIGFjdGlvbnMgdG8gbmV3RGVmZXJcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzFdIF0oZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IHByb21pc2UgPyBuZXdEZWZlci5wcm9taXNlKCkgOiB0aGlzLCBmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdHByb21pc2UucGlwZSA9IHByb21pc2UudGhlbjtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDMgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZVsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWzFdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQvLyBzdGF0ZSA9IFsgcmVzb2x2ZWQgfCByZWplY3RlZCBdXG5cdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblxuXHRcdFx0XHQvLyBbIHJlamVjdF9saXN0IHwgcmVzb2x2ZV9saXN0IF0uZGlzYWJsZTsgcHJvZ3Jlc3NfbGlzdC5sb2NrXG5cdFx0XHRcdH0sIHR1cGxlc1sgaSBeIDEgXVsgMiBdLmRpc2FibGUsIHR1cGxlc1sgMiBdWyAyIF0ubG9jayApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBkZWZlcnJlZFsgcmVzb2x2ZSB8IHJlamVjdCB8IG5vdGlmeSBdXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHByb21pc2UgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzdWJvcmRpbmF0ZSAvKiAsIC4uLiwgc3Vib3JkaW5hdGVOICovICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblx0XHRcdGxlbmd0aCA9IHJlc29sdmVWYWx1ZXMubGVuZ3RoLFxuXG5cdFx0XHQvLyB0aGUgY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBsZW5ndGggIT09IDEgfHwgKCBzdWJvcmRpbmF0ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggc3Vib3JkaW5hdGUucHJvbWlzZSApICkgPyBsZW5ndGggOiAwLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkLiBJZiByZXNvbHZlVmFsdWVzIGNvbnNpc3Qgb2Ygb25seSBhIHNpbmdsZSBEZWZlcnJlZCwganVzdCB1c2UgdGhhdC5cblx0XHRcdGRlZmVycmVkID0gcmVtYWluaW5nID09PSAxID8gc3Vib3JkaW5hdGUgOiBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gVXBkYXRlIGZ1bmN0aW9uIGZvciBib3RoIHJlc29sdmUgYW5kIHByb2dyZXNzIHZhbHVlc1xuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpLCBjb250ZXh0cywgdmFsdWVzICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdGNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggdmFsdWVzID09PSBwcm9ncmVzc1ZhbHVlcyApIHtcblx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9LFxuXG5cdFx0XHRwcm9ncmVzc1ZhbHVlcywgcHJvZ3Jlc3NDb250ZXh0cywgcmVzb2x2ZUNvbnRleHRzO1xuXG5cdFx0Ly8gQWRkIGxpc3RlbmVycyB0byBEZWZlcnJlZCBzdWJvcmRpbmF0ZXM7IHRyZWF0IG90aGVycyBhcyByZXNvbHZlZFxuXHRcdGlmICggbGVuZ3RoID4gMSApIHtcblx0XHRcdHByb2dyZXNzVmFsdWVzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdHByb2dyZXNzQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHQuZG9uZSggdXBkYXRlRnVuYyggaSwgcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICkgKVxuXHRcdFx0XHRcdFx0LmZhaWwoIGRlZmVycmVkLnJlamVjdCApXG5cdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIHVwZGF0ZUZ1bmMoIGksIHByb2dyZXNzQ29udGV4dHMsIHByb2dyZXNzVmFsdWVzICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQtLXJlbWFpbmluZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIElmIHdlJ3JlIG5vdCB3YWl0aW5nIG9uIGFueXRoaW5nLCByZXNvbHZlIHRoZSBtYXN0ZXJcblx0XHRpZiAoICFyZW1haW5pbmcgKSB7XG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcblx0fVxufSk7XG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0O1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cdC8vIEFkZCB0aGUgY2FsbGJhY2tcblx0alF1ZXJ5LnJlYWR5LnByb21pc2UoKS5kb25lKCBmbiApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudFxuXHRob2xkUmVhZHk6IGZ1bmN0aW9uKCBob2xkICkge1xuXHRcdGlmICggaG9sZCApIHtcblx0XHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblxuXHRcdC8vIFRyaWdnZXIgYW55IGJvdW5kIHJlYWR5IGV2ZW50c1xuXHRcdGlmICggalF1ZXJ5LmZuLnRyaWdnZXJIYW5kbGVyICkge1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLnRyaWdnZXJIYW5kbGVyKCBcInJlYWR5XCIgKTtcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS5vZmYoIFwicmVhZHlcIiApO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qKlxuICogVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbiAqL1xuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbmpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHtcblx0aWYgKCAhcmVhZHlMaXN0ICkge1xuXG5cdFx0cmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cblx0XHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZCBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cblx0XHQvLyBXZSBvbmNlIHRyaWVkIHRvIHVzZSByZWFkeVN0YXRlIFwiaW50ZXJhY3RpdmVcIiBoZXJlLCBidXQgaXQgY2F1c2VkIGlzc3VlcyBsaWtlIHRoZSBvbmVcblx0XHQvLyBkaXNjb3ZlcmVkIGJ5IENocmlzUyBoZXJlOiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjI4MiNjb21tZW50OjE1XG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgKSB7XG5cdFx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHRcdHNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblxuXHRcdFx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVhZHlMaXN0LnByb21pc2UoIG9iaiApO1xufTtcblxuLy8gS2ljayBvZmYgdGhlIERPTSByZWFkeSBjaGVjayBldmVuIGlmIHRoZSB1c2VyIGRvZXMgbm90XG5qUXVlcnkucmVhZHkucHJvbWlzZSgpO1xuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGpRdWVyeS5hY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGpRdWVyeS5hY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5W2ldLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbiggZWxlbXNbaV0sIGtleSwgcmF3ID8gdmFsdWUgOiB2YWx1ZS5jYWxsKCBlbGVtc1tpXSwgaSwgZm4oIGVsZW1zW2ldLCBrZXkgKSApICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNoYWluYWJsZSA/XG5cdFx0ZWxlbXMgOlxuXG5cdFx0Ly8gR2V0c1xuXHRcdGJ1bGsgP1xuXHRcdFx0Zm4uY2FsbCggZWxlbXMgKSA6XG5cdFx0XHRsZW4gPyBmbiggZWxlbXNbMF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIG9iamVjdCBjYW4gaGF2ZSBkYXRhXG4gKi9cbmpRdWVyeS5hY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0LyoganNoaW50IC1XMDE4ICovXG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LFxuXHQvLyBPbGQgV2ViS2l0IGRvZXMgbm90IGhhdmUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zL2ZyZWV6ZSBtZXRob2QsXG5cdC8vIHJldHVybiBuZXcgZW1wdHkgb2JqZWN0IGluc3RlYWQgd2l0aCBubyBbW3NldF1dIGFjY2Vzc29yXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcy5jYWNoZSA9IHt9LCAwLCB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB7fTtcblx0XHR9XG5cdH0pO1xuXG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuRGF0YS5hY2NlcHRzID0galF1ZXJ5LmFjY2VwdERhdGE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXHRrZXk6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdC8vIEFsd2F5cyByZXR1cm4gdGhlIGtleSBmb3IgYSBmcm96ZW4gb2JqZWN0LlxuXHRcdGlmICggIURhdGEuYWNjZXB0cyggb3duZXIgKSApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBkZXNjcmlwdG9yID0ge30sXG5cdFx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGUga2V5XG5cdFx0XHR1bmxvY2sgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF1bmxvY2sgKSB7XG5cdFx0XHR1bmxvY2sgPSBEYXRhLnVpZCsrO1xuXG5cdFx0XHQvLyBTZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSwgbm9uLXdyaXRhYmxlIHByb3BlcnR5XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkZXNjcmlwdG9yWyB0aGlzLmV4cGFuZG8gXSA9IHsgdmFsdWU6IHVubG9jayB9O1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggb3duZXIsIGRlc2NyaXB0b3IgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0XG5cdFx0XHQvLyBGYWxsYmFjayB0byBhIGxlc3Mgc2VjdXJlIGRlZmluaXRpb25cblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRkZXNjcmlwdG9yWyB0aGlzLmV4cGFuZG8gXSA9IHVubG9jaztcblx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggb3duZXIsIGRlc2NyaXB0b3IgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhlIGNhY2hlIG9iamVjdFxuXHRcdGlmICggIXRoaXMuY2FjaGVbIHVubG9jayBdICkge1xuXHRcdFx0dGhpcy5jYWNoZVsgdW5sb2NrIF0gPSB7fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdW5sb2NrO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHQvLyBUaGVyZSBtYXkgYmUgYW4gdW5sb2NrIGFzc2lnbmVkIHRvIHRoaXMgbm9kZSxcblx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIGVudHJ5IGZvciB0aGlzIFwib3duZXJcIiwgY3JlYXRlIG9uZSBpbmxpbmVcblx0XHRcdC8vIGFuZCBzZXQgdGhlIHVubG9jayBhcyB0aG91Z2ggYW4gb3duZXIgZW50cnkgaGFkIGFsd2F5cyBleGlzdGVkXG5cdFx0XHR1bmxvY2sgPSB0aGlzLmtleSggb3duZXIgKSxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZVsgdW5sb2NrIF07XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBkYXRhIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEZyZXNoIGFzc2lnbm1lbnRzIGJ5IG9iamVjdCBhcmUgc2hhbGxvdyBjb3BpZWRcblx0XHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5leHRlbmQoIHRoaXMuY2FjaGVbIHVubG9jayBdLCBkYXRhICk7XG5cdFx0XHQvLyBPdGhlcndpc2UsIGNvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0Y2FjaGVbIHByb3AgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0Ly8gRWl0aGVyIGEgdmFsaWQgY2FjaGUgaXMgZm91bmQsIG9yIHdpbGwgYmUgY3JlYXRlZC5cblx0XHQvLyBOZXcgY2FjaGVzIHdpbGwgYmUgY3JlYXRlZCBhbmQgdGhlIHVubG9jayByZXR1cm5lZCxcblx0XHQvLyBhbGxvd2luZyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBuZXdseSBjcmVhdGVkXG5cdFx0Ly8gZW1wdHkgZGF0YSBvYmplY3QuIEEgdmFsaWQgb3duZXIgb2JqZWN0IG11c3QgYmUgcHJvdmlkZWQuXG5cdFx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZVsgdGhpcy5rZXkoIG93bmVyICkgXTtcblxuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRjYWNoZSA6IGNhY2hlWyBrZXkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIHN0b3JlZDtcblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoKGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSApIHtcblxuXHRcdFx0c3RvcmVkID0gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblxuXHRcdFx0cmV0dXJuIHN0b3JlZCAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0c3RvcmVkIDogdGhpcy5nZXQoIG93bmVyLCBqUXVlcnkuY2FtZWxDYXNlKGtleSkgKTtcblx0XHR9XG5cblx0XHQvLyBbKl1XaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGNhbWVsLFxuXHRcdFx0dW5sb2NrID0gdGhpcy5rZXkoIG93bmVyICksXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGVbIHVubG9jayBdO1xuXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuY2FjaGVbIHVubG9jayBdID0ge307XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXG5cdFx0XHRcdC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XG5cdFx0XHRcdC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxuXHRcdFx0XHRuYW1lID0ga2V5LmNvbmNhdCgga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjYW1lbCA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXHRcdFx0XHQvLyBUcnkgdGhlIHN0cmluZyBhcyBhIGtleSBiZWZvcmUgYW55IG1hbmlwdWxhdGlvblxuXHRcdFx0XHRpZiAoIGtleSBpbiBjYWNoZSApIHtcblx0XHRcdFx0XHRuYW1lID0gWyBrZXksIGNhbWVsIF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0bmFtZSA9IGNhbWVsO1xuXHRcdFx0XHRcdG5hbWUgPSBuYW1lIGluIGNhY2hlID9cblx0XHRcdFx0XHRcdFsgbmFtZSBdIDogKCBuYW1lLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBuYW1lLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIG5hbWVbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHJldHVybiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoXG5cdFx0XHR0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXSB8fCB7fVxuXHRcdCk7XG5cdH0sXG5cdGRpc2NhcmQ6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHRpZiAoIG93bmVyWyB0aGlzLmV4cGFuZG8gXSApIHtcblx0XHRcdGRlbGV0ZSB0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXTtcblx0XHR9XG5cdH1cbn07XG52YXIgZGF0YV9wcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFfdXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvKFtBLVpdKS9nO1xuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJDFcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGRhdGEgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJmYWxzZVwiID8gZmFsc2UgOlxuXHRcdFx0XHRcdGRhdGEgPT09IFwibnVsbFwiID8gbnVsbCA6XG5cdFx0XHRcdFx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0XHRcdFx0XHQrZGF0YSArIFwiXCIgPT09IGRhdGEgPyArZGF0YSA6XG5cdFx0XHRcdFx0cmJyYWNlLnRlc3QoIGRhdGEgKSA/IGpRdWVyeS5wYXJzZUpTT04oIGRhdGEgKSA6XG5cdFx0XHRcdFx0ZGF0YTtcblx0XHRcdH0gY2F0Y2goIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFfdXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhX3VzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFfcHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFfdXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhX3VzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YV9wcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFfcHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTExK1xuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSg1KSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhX3ByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhX3VzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhLFxuXHRcdFx0XHRjYW1lbEtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGFzLWlzXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBjYW1lbGl6ZWRcblx0XHRcdFx0ZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0sIGNhbWVsS2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGNhbWVsS2V5LCB1bmRlZmluZWQgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIEZpcnN0LCBhdHRlbXB0IHRvIHN0b3JlIGEgY29weSBvciByZWZlcmVuY2Ugb2YgYW55XG5cdFx0XHRcdC8vIGRhdGEgdGhhdCBtaWdodCd2ZSBiZWVuIHN0b3JlIHdpdGggYSBjYW1lbENhc2VkIGtleS5cblx0XHRcdFx0dmFyIGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCB0aGlzLCBjYW1lbEtleSApO1xuXG5cdFx0XHRcdC8vIEZvciBIVE1MNSBkYXRhLSogYXR0cmlidXRlIGludGVyb3AsIHdlIGhhdmUgdG9cblx0XHRcdFx0Ly8gc3RvcmUgcHJvcGVydHkgbmFtZXMgd2l0aCBkYXNoZXMgaW4gYSBjYW1lbENhc2UgZm9ybS5cblx0XHRcdFx0Ly8gVGhpcyBtaWdodCBub3QgYXBwbHkgdG8gYWxsIHByb3BlcnRpZXMuLi4qXG5cdFx0XHRcdGRhdGFfdXNlci5zZXQoIHRoaXMsIGNhbWVsS2V5LCB2YWx1ZSApO1xuXG5cdFx0XHRcdC8vICouLi4gSW4gdGhlIGNhc2Ugb2YgcHJvcGVydGllcyB0aGF0IG1pZ2h0IF9hY3R1YWxseV9cblx0XHRcdFx0Ly8gaGF2ZSBkYXNoZXMsIHdlIG5lZWQgdG8gYWxzbyBzdG9yZSBhIGNvcHkgb2YgdGhhdFxuXHRcdFx0XHQvLyB1bmNoYW5nZWQgcHJvcGVydHkuXG5cdFx0XHRcdGlmICgga2V5LmluZGV4T2YoXCItXCIpICE9PSAtMSAmJiBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0ZGF0YV91c2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhX3VzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9KTtcblx0fVxufSk7XG5cblxualF1ZXJ5LmV4dGVuZCh7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoZGF0YSkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YV9wcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YV9wcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLmFkZChmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSlcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1swXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWzBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59KTtcbnZhciBwbnVtID0gKC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvKS5zb3VyY2U7XG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8ICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHR9O1xuXG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoL14oPzpjaGVja2JveHxyYWRpbykkL2kpO1xuXG5cblxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogU2FmYXJpPD01LjFcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaTw9NS4xLCBBbmRyb2lkPDQuMlxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0pKCk7XG52YXIgc3RydW5kZWZpbmVkID0gdHlwZW9mIHVuZGVmaW5lZDtcblxuXG5cbnN1cHBvcnQuZm9jdXNpbkJ1YmJsZXMgPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudSl8Y2xpY2svLFxuXHRyZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkkLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YV9wcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUpICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gc3RydW5kZWZpbmVkICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoe1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbihcIi5cIilcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHwgc3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YV9wcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhX3ByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsyXSAmJiBuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8IHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRlbGV0ZSBlbGVtRGF0YS5oYW5kbGU7XG5cdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBcImV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdChcIi5cIikgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoXCIuXCIpID49IDAgKSB7XG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdChcIi5cIik7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZihcIjpcIikgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbihcIi5cIik7XG5cdFx0ZXZlbnQubmFtZXNwYWNlX3JlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKGN1ciA9IGV2ZW50UGF0aFtpKytdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YV9wcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmIGRhdGFfcHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBqUXVlcnkuYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCFzcGVjaWFsLl9kZWZhdWx0IHx8IHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSkgJiZcblx0XHRcdFx0alF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YV9wcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWzBdID0gZXZlbnQ7XG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAobWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoIChoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSkgJiYgIWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQubmFtZXNwYWNlX3JlIHx8IGV2ZW50Lm5hbWVzcGFjZV9yZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9KS5oYW5kbGUgfHwgaGFuZGxlT2JqLmhhbmRsZXIgKVxuXHRcdFx0XHRcdFx0XHQuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKGV2ZW50LnJlc3VsdCA9IHJldCkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgbWF0Y2hlcywgc2VsLCBoYW5kbGVPYmosXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICgjMTMxODApXG5cdFx0Ly8gQXZvaWQgbm9uLWxlZnQtY2xpY2sgYnViYmxpbmcgaW4gRmlyZWZveCAoIzM4NjEpXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmIGN1ci5ub2RlVHlwZSAmJiAoIWV2ZW50LmJ1dHRvbiB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIpICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIuZGlzYWJsZWQgIT09IHRydWUgfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiICkge1xuXHRcdFx0XHRcdG1hdGNoZXMgPSBbXTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID49IDAgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZXMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVzIH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0Ly8gSW5jbHVkZXMgc29tZSBldmVudCBwcm9wcyBzaGFyZWQgYnkgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnRcblx0cHJvcHM6IFwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZXZlbnRQaGFzZSBtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoXCIuc3BsaXQoXCIgXCIpLFxuXG5cdGZpeEhvb2tzOiB7fSxcblxuXHRrZXlIb29rczoge1xuXHRcdHByb3BzOiBcImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGVcIi5zcGxpdChcIiBcIiksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSBvcmlnaW5hbC5jaGFyQ29kZSAhPSBudWxsID8gb3JpZ2luYWwuY2hhckNvZGUgOiBvcmlnaW5hbC5rZXlDb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXHR9LFxuXG5cdG1vdXNlSG9va3M6IHtcblx0XHRwcm9wczogXCJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnRcIi5zcGxpdChcIiBcIiksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXHRcdFx0dmFyIGV2ZW50RG9jLCBkb2MsIGJvZHksXG5cdFx0XHRcdGJ1dHRvbiA9IG9yaWdpbmFsLmJ1dHRvbjtcblxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZVxuXHRcdFx0aWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnREb2MgPSBldmVudC50YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcblx0XHRcdFx0ZG9jID0gZXZlbnREb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0XHRib2R5ID0gZXZlbnREb2MuYm9keTtcblxuXHRcdFx0XHRldmVudC5wYWdlWCA9IG9yaWdpbmFsLmNsaWVudFggKyAoIGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7XG5cdFx0XHRcdGV2ZW50LnBhZ2VZID0gb3JpZ2luYWwuY2xpZW50WSArICggZG9jICYmIGRvYy5zY3JvbGxUb3AgIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgIHx8IDAgKSAtICggZG9jICYmIGRvYy5jbGllbnRUb3AgIHx8IGJvZHkgJiYgYm9keS5jbGllbnRUb3AgIHx8IDAgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdFx0Ly8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXRcblx0XHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRldmVudC53aGljaCA9ICggYnV0dG9uICYgMSA/IDEgOiAoIGJ1dHRvbiAmIDIgPyAzIDogKCBidXR0b24gJiA0ID8gMiA6IDAgKSApICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSApIHtcblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgYSB3cml0YWJsZSBjb3B5IG9mIHRoZSBldmVudCBvYmplY3QgYW5kIG5vcm1hbGl6ZSBzb21lIHByb3BlcnRpZXNcblx0XHR2YXIgaSwgcHJvcCwgY29weSxcblx0XHRcdHR5cGUgPSBldmVudC50eXBlLFxuXHRcdFx0b3JpZ2luYWxFdmVudCA9IGV2ZW50LFxuXHRcdFx0Zml4SG9vayA9IHRoaXMuZml4SG9va3NbIHR5cGUgXTtcblxuXHRcdGlmICggIWZpeEhvb2sgKSB7XG5cdFx0XHR0aGlzLmZpeEhvb2tzWyB0eXBlIF0gPSBmaXhIb29rID1cblx0XHRcdFx0cm1vdXNlRXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5tb3VzZUhvb2tzIDpcblx0XHRcdFx0cmtleUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMua2V5SG9va3MgOlxuXHRcdFx0XHR7fTtcblx0XHR9XG5cdFx0Y29weSA9IGZpeEhvb2sucHJvcHMgPyB0aGlzLnByb3BzLmNvbmNhdCggZml4SG9vay5wcm9wcyApIDogdGhpcy5wcm9wcztcblxuXHRcdGV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXG5cdFx0aSA9IGNvcHkubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0cHJvcCA9IGNvcHlbIGkgXTtcblx0XHRcdGV2ZW50WyBwcm9wIF0gPSBvcmlnaW5hbEV2ZW50WyBwcm9wIF07XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQ29yZG92YSAyLjUgKFdlYktpdCkgKCMxMzI1NSlcblx0XHQvLyBBbGwgZXZlbnRzIHNob3VsZCBoYXZlIGEgdGFyZ2V0OyBDb3Jkb3ZhIGRldmljZXJlYWR5IGRvZXNuJ3Rcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBkb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wKywgQ2hyb21lPDI4XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHRpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmaXhIb29rLmZpbHRlciA/IGZpeEhvb2suZmlsdGVyKCBldmVudCwgb3JpZ2luYWxFdmVudCApIDogZXZlbnQ7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQsIGJ1YmJsZSApIHtcblx0XHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmUuXG5cdFx0Ly8gRmFrZSBvcmlnaW5hbEV2ZW50IHRvIGF2b2lkIGRvbm9yJ3Mgc3RvcFByb3BhZ2F0aW9uLCBidXQgaWYgdGhlXG5cdFx0Ly8gc2ltdWxhdGVkIGV2ZW50IHByZXZlbnRzIGRlZmF1bHQgdGhlbiB3ZSBkbyB0aGUgc2FtZSBvbiB0aGUgZG9ub3IuXG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlLFxuXHRcdFx0XHRvcmlnaW5hbEV2ZW50OiB7fVxuXHRcdFx0fVxuXHRcdCk7XG5cdFx0aWYgKCBidWJibGUgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guY2FsbCggZWxlbSwgZSApO1xuXHRcdH1cblx0XHRpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUsIGZhbHNlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQpICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiBlLnByZXZlbnREZWZhdWx0ICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmIGUuc3RvcFByb3BhZ2F0aW9uICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTUrXG5qUXVlcnkuZWFjaCh7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSk7XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3gsIENocm9tZSwgU2FmYXJpXG4vLyBDcmVhdGUgXCJidWJibGluZ1wiIGZvY3VzIGFuZCBibHVyIGV2ZW50c1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luQnViYmxlcyApIHtcblx0alF1ZXJ5LmVhY2goeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSwgdHJ1ZSApO1xuXHRcdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YV9wcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSk7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgLypJTlRFUk5BTCovIG9uZSApIHtcblx0XHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdFx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vbiggdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblx0XHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRcdGZuID0gZGF0YTtcblx0XHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICggb25lID09PSAxICkge1xuXHRcdFx0b3JpZ0ZuID0gZm47XG5cdFx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHR9O1xuXHRcdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0XHR9KTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID8gaGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDogaGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSk7XG5cdH0sXG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbMF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59KTtcblxuXG52YXJcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLFxuXHRydGFnTmFtZSA9IC88KFtcXHc6XSspLyxcblx0cmh0bWwgPSAvPHwmIz9cXHcrOy8sXG5cdHJub0lubmVyaHRtbCA9IC88KD86c2NyaXB0fHN0eWxlfGxpbmspL2ksXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJzY3JpcHRUeXBlID0gL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nLFxuXG5cdC8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG5cdHdyYXBNYXAgPSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHRcdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0XHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHRcdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0XHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0XHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cblx0fTtcblxuLy8gU3VwcG9ydDogSUU5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogMS54IGNvbXBhdGliaWxpdHlcbi8vIE1hbmlwdWxhdGluZyB0YWJsZXMgcmVxdWlyZXMgYSB0Ym9keVxuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSA/XG5cblx0XHRlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGJvZHlcIilbMF0gfHxcblx0XHRcdGVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIikgKSA6XG5cdFx0ZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSAhPT0gbnVsbCkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YV9wcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sIFwiZ2xvYmFsRXZhbFwiLCAhcmVmRWxlbWVudHMgfHwgZGF0YV9wcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YV9wcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YV9wcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhX3ByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhX3VzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhX3VzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YV91c2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblx0dmFyIHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPyBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKSA6XG5cdFx0XHRjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgPyBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApIDpcblx0XHRcdFtdO1xuXG5cdHJldHVybiB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSA/XG5cdFx0alF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICkgOlxuXHRcdHJldDtcbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cDovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRidWlsZEZyYWdtZW50OiBmdW5jdGlvbiggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiApIHtcblx0XHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRcdG5vZGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdCwgUGhhbnRvbUpTXG5cdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApO1xuXG5cdFx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBlbGVtLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXQsIFBoYW50b21KU1xuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdFx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IG5vZGVzWyBpKysgXSkgKSB7XG5cblx0XHRcdC8vICM0MDg3IC0gSWYgb3JpZ2luIGFuZCBkZXN0aW5hdGlvbiBlbGVtZW50cyBhcmUgdGhlIHNhbWUsIGFuZCB0aGlzIGlzXG5cdFx0XHQvLyB0aGF0IGVsZW1lbnQsIGRvIG5vdCBkbyBhbnl0aGluZ1xuXHRcdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApICE9PSAtMSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSB0bXBbIGorKyBdKSApIHtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZnJhZ21lbnQ7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsIGtleSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IGVsZW1zWyBpIF0pICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0a2V5ID0gZWxlbVsgZGF0YV9wcml2LmV4cGFuZG8gXTtcblxuXHRcdFx0XHRpZiAoIGtleSAmJiAoZGF0YSA9IGRhdGFfcHJpdi5jYWNoZVsga2V5IF0pICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIGRhdGFfcHJpdi5jYWNoZVsga2V5IF0gKSB7XG5cdFx0XHRcdFx0XHQvLyBEaXNjYXJkIGFueSByZW1haW5pbmcgYHByaXZhdGVgIGRhdGFcblx0XHRcdFx0XHRcdGRlbGV0ZSBkYXRhX3ByaXYuY2FjaGVbIGtleSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gRGlzY2FyZCBhbnkgcmVtYWluaW5nIGB1c2VyYCBkYXRhXG5cdFx0XHRkZWxldGUgZGF0YV91c2VyLmNhY2hlWyBlbGVtWyBkYXRhX3VzZXIuZXhwYW5kbyBdIF07XG5cdFx0fVxuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCBrZWVwRGF0YSAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGVsZW1zID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgdGhpcyApIDogdGhpcyxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoICFrZWVwRGF0YSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0gKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IChlbGVtID0gdGhpc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhcmcgPSBhcmd1bWVudHNbIDAgXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRhcmcgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cblx0XHRcdGlmICggYXJnICkge1xuXHRcdFx0XHRhcmcucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBGb3JjZSByZW1vdmFsIGlmIHRoZXJlIHdhcyBubyBuZXcgY29udGVudCAoZS5nLiwgZnJvbSBlbXB0eSBhcmd1bWVudHMpXG5cdFx0cmV0dXJuIGFyZyAmJiAoYXJnLmxlbmd0aCB8fCBhcmcubm9kZVR5cGUpID8gdGhpcyA6IHRoaXMucmVtb3ZlKCk7XG5cdH0sXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdGRvbU1hbmlwOiBmdW5jdGlvbiggYXJncywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHRcdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2V0ID0gdGhpcyxcblx0XHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRcdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHRcdHZhciBzZWxmID0gc2V0LmVxKCBpbmRleCApO1xuXHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5kb21NYW5pcCggYXJncywgY2FsbGJhY2sgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICggbCApIHtcblx0XHRcdGZyYWdtZW50ID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIGFyZ3MsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgdGhpcyApO1xuXHRcdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGZpcnN0ICkge1xuXHRcdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdFxuXHRcdFx0XHRcdFx0XHQvLyBqUXVlcnkubWVyZ2UgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjYWxsYmFjay5jYWxsKCB0aGlzWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdFx0IWRhdGFfcHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiYgalF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Ncblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSk7XG5cblxudmFyIGlmcmFtZSxcblx0ZWxlbWRpc3BsYXkgPSB7fTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgYWN0dWFsIGRpc3BsYXkgb2YgYSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBub2RlTmFtZSBvZiB0aGUgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBEb2N1bWVudCBvYmplY3RcbiAqL1xuLy8gQ2FsbGVkIG9ubHkgZnJvbSB3aXRoaW4gZGVmYXVsdERpc3BsYXlcbmZ1bmN0aW9uIGFjdHVhbERpc3BsYXkoIG5hbWUsIGRvYyApIHtcblx0dmFyIHN0eWxlLFxuXHRcdGVsZW0gPSBqUXVlcnkoIGRvYy5jcmVhdGVFbGVtZW50KCBuYW1lICkgKS5hcHBlbmRUbyggZG9jLmJvZHkgKSxcblxuXHRcdC8vIGdldERlZmF1bHRDb21wdXRlZFN0eWxlIG1pZ2h0IGJlIHJlbGlhYmx5IHVzZWQgb25seSBvbiBhdHRhY2hlZCBlbGVtZW50XG5cdFx0ZGlzcGxheSA9IHdpbmRvdy5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSAmJiAoIHN0eWxlID0gd2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlKCBlbGVtWyAwIF0gKSApID9cblxuXHRcdFx0Ly8gVXNlIG9mIHRoaXMgbWV0aG9kIGlzIGEgdGVtcG9yYXJ5IGZpeCAobW9yZSBsaWtlIG9wdGltaXphdGlvbikgdW50aWwgc29tZXRoaW5nIGJldHRlciBjb21lcyBhbG9uZyxcblx0XHRcdC8vIHNpbmNlIGl0IHdhcyByZW1vdmVkIGZyb20gc3BlY2lmaWNhdGlvbiBhbmQgc3VwcG9ydGVkIG9ubHkgaW4gRkZcblx0XHRcdHN0eWxlLmRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtWyAwIF0sIFwiZGlzcGxheVwiICk7XG5cblx0Ly8gV2UgZG9uJ3QgaGF2ZSBhbnkgZGF0YSBzdG9yZWQgb24gdGhlIGVsZW1lbnQsXG5cdC8vIHNvIHVzZSBcImRldGFjaFwiIG1ldGhvZCBhcyBmYXN0IHdheSB0byBnZXQgcmlkIG9mIHRoZSBlbGVtZW50XG5cdGVsZW0uZGV0YWNoKCk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbi8qKlxuICogVHJ5IHRvIGRldGVybWluZSB0aGUgZGVmYXVsdCBkaXNwbGF5IHZhbHVlIG9mIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBub2RlTmFtZVxuICovXG5mdW5jdGlvbiBkZWZhdWx0RGlzcGxheSggbm9kZU5hbWUgKSB7XG5cdHZhciBkb2MgPSBkb2N1bWVudCxcblx0XHRkaXNwbGF5ID0gZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF07XG5cblx0aWYgKCAhZGlzcGxheSApIHtcblx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xuXG5cdFx0Ly8gSWYgdGhlIHNpbXBsZSB3YXkgZmFpbHMsIHJlYWQgZnJvbSBpbnNpZGUgYW4gaWZyYW1lXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiB8fCAhZGlzcGxheSApIHtcblxuXHRcdFx0Ly8gVXNlIHRoZSBhbHJlYWR5LWNyZWF0ZWQgaWZyYW1lIGlmIHBvc3NpYmxlXG5cdFx0XHRpZnJhbWUgPSAoaWZyYW1lIHx8IGpRdWVyeSggXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIgKSkuYXBwZW5kVG8oIGRvYy5kb2N1bWVudEVsZW1lbnQgKTtcblxuXHRcdFx0Ly8gQWx3YXlzIHdyaXRlIGEgbmV3IEhUTUwgc2tlbGV0b24gc28gV2Via2l0IGFuZCBGaXJlZm94IGRvbid0IGNob2tlIG9uIHJldXNlXG5cdFx0XHRkb2MgPSBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQ7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFXG5cdFx0XHRkb2Mud3JpdGUoKTtcblx0XHRcdGRvYy5jbG9zZSgpO1xuXG5cdFx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xuXHRcdFx0aWZyYW1lLmRldGFjaCgpO1xuXHRcdH1cblxuXHRcdC8vIFN0b3JlIHRoZSBjb3JyZWN0IGRlZmF1bHQgZGlzcGxheVxuXHRcdGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdID0gZGlzcGxheTtcblx0fVxuXG5cdHJldHVybiBkaXNwbGF5O1xufVxudmFyIHJtYXJnaW4gPSAoL15tYXJnaW4vKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0Ly8gU3VwcG9ydDogSUU8PTExKywgRmlyZWZveDw9MzArICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHRpZiAoIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5vcGVuZXIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gU3VwcG9ydDogSUU5XG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgb25seSBuZWVkZWQgZm9yIC5jc3MoJ2ZpbHRlcicpICgjMTI1MzcpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cdH1cblxuXHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBpT1MgPCA2XG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIGlPUyA8IDYgKGF0IGxlYXN0KSByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIGEgbGFyZ2VyIHNldCBvZiB2YWx1ZXMsIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHNcblx0XHQvLyB0aGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6IGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cdFx0Ly8gU3VwcG9ydDogSUVcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICh0aGlzLmdldCA9IGhvb2tGbikuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG4oZnVuY3Rpb24oKSB7XG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCxcblx0XHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O21hcmdpbi10b3A6MXB4O1wiICtcblx0XHRcInBvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUoKSB7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcblx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbi10b3A6MSU7dG9wOjElO1wiICtcblx0XHRcdFwiYm9yZGVyOjFweDtwYWRkaW5nOjFweDt3aWR0aDo0cHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYsIG51bGwgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY0VsZW0ucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogbm9kZS5qcyBqc2RvbVxuXHQvLyBEb24ndCBhc3N1bWUgdGhhdCBnZXRDb21wdXRlZFN0eWxlIGlzIGEgcHJvcGVydHkgb2YgdGhlIGdsb2JhbCBvYmplY3Rcblx0aWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBUaGlzIHRlc3QgaXMgZXhlY3V0ZWQgb25seSBvbmNlIGJ1dCB3ZSBzdGlsbCBkbyBtZW1vaXppbmdcblx0XHRcdFx0Ly8gc2luY2Ugd2UgY2FuIHVzZSB0aGUgYm94U2l6aW5nUmVsaWFibGUgcHJlLWNvbXB1dGluZy5cblx0XHRcdFx0Ly8gTm8gbmVlZCB0byBjaGVjayBpZiB0aGUgdGVzdCB3YXMgYWxyZWFkeSBwZXJmb3JtZWQsIHRob3VnaC5cblx0XHRcdFx0Y29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpO1xuXHRcdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHRcdH0sXG5cdFx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdFx0fSxcblx0XHRcdHJlbGlhYmxlTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIENoZWNrIGlmIGRpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcblx0XHRcdFx0Ly8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyLiAoIzMzMzMpXG5cdFx0XHRcdC8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodFxuXHRcdFx0XHQvLyBUaGlzIHN1cHBvcnQgZnVuY3Rpb24gaXMgb25seSBleGVjdXRlZCBvbmNlIHNvIG5vIG1lbW9pemluZyBpcyBuZWVkZWQuXG5cdFx0XHRcdHZhciByZXQsXG5cdFx0XHRcdFx0bWFyZ2luRGl2ID0gZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyOyBwYWRkaW5nXG5cdFx0XHRcdG1hcmdpbkRpdi5zdHlsZS5jc3NUZXh0ID0gZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdFx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O1wiICtcblx0XHRcdFx0XHRcImJveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjBcIjtcblx0XHRcdFx0bWFyZ2luRGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gbWFyZ2luRGl2LnN0eWxlLndpZHRoID0gXCIwXCI7XG5cdFx0XHRcdGRpdi5zdHlsZS53aWR0aCA9IFwiMXB4XCI7XG5cdFx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0XHRcdHJldCA9ICFwYXJzZUZsb2F0KCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggbWFyZ2luRGl2LCBudWxsICkubWFyZ2luUmlnaHQgKTtcblxuXHRcdFx0XHRkb2NFbGVtLnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblx0XHRcdFx0ZGl2LnJlbW92ZUNoaWxkKCBtYXJnaW5EaXYgKTtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59KSgpO1xuXG5cbi8vIEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBnZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMuXG5qUXVlcnkuc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhclxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRybnVtc3BsaXQgPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKC4qKSRcIiwgXCJpXCIgKSxcblx0cnJlbE51bSA9IG5ldyBSZWdFeHAoIFwiXihbKy1dKT0oXCIgKyBwbnVtICsgXCIpXCIsIFwiaVwiICksXG5cblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBzdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLFxuXHRcdG9yaWdOYW1lID0gbmFtZSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb3JpZ05hbWU7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cdHZhciBtYXRjaGVzID0gcm51bXNwbGl0LmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAxIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAyIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpID0gZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSA/XG5cdFx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdFx0NCA6XG5cdFx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHRcdG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXG5cdFx0dmFsID0gMDtcblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuXHRcdHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gU29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXG5cdC8vIHN2ZyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY0OTI4NVxuXHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2Njhcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3Nhcnlcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QodmFsKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdH1cblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YV9wcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKTtcblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblx0XHRcdC8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXNcblx0XHRcdC8vIGJlaW5nIGhpZGRlbiBieSBjYXNjYWRlZCBydWxlcyBvciBub3Rcblx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSAmJiBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGVsZW1lbnRzIHdoaWNoIGhhdmUgYmVlbiBvdmVycmlkZGVuIHdpdGggZGlzcGxheTogbm9uZVxuXHRcdFx0Ly8gaW4gYSBzdHlsZXNoZWV0IHRvIHdoYXRldmVyIHRoZSBkZWZhdWx0IGJyb3dzZXIgc3R5bGUgaXNcblx0XHRcdC8vIGZvciBzdWNoIGFuIGVsZW1lbnRcblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBkZWZhdWx0RGlzcGxheShlbGVtLm5vZGVOYW1lKSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRoaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApO1xuXG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XG5cdFx0XHRcdGRhdGFfcHJpdi5zZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBoaWRkZW4gPyBkaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiBtb3N0IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wXG5cdC8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRpZiAoICFzaG93IHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/IHZhbHVlc1sgaW5kZXggXSB8fCBcIlwiIDogXCJub25lXCI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG9yaWdOYW1lICkgKTtcblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKHJldCA9IHJyZWxOdW0uZXhlYyggdmFsdWUgKSkgKSB7XG5cdFx0XHRcdHZhbHVlID0gKCByZXRbMV0gKyAxICkgKiByZXRbMl0gKyBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICkgKTtcblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciwgYWRkICdweCcgdG8gdGhlIChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gKSB7XG5cdFx0XHRcdHZhbHVlICs9IFwicHhcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgIShcInNldFwiIGluIGhvb2tzKSB8fCAodmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8ICggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIGVsZW0uc3R5bGUsIG9yaWdOYW1lICkgKTtcblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgalF1ZXJ5LmlzTnVtZXJpYyggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJiBlbGVtLm9mZnNldFdpZHRoID09PSAwID9cblx0XHRcdFx0XHRqUXVlcnkuc3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgZXh0cmEgP1xuXHRcdFx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KSA6IDBcblx0XHRcdCk7XG5cdFx0fVxuXHR9O1xufSk7XG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luUmlnaHQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnN3YXAoIGVsZW0sIHsgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIgfSxcblx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCh7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdChcIiBcIikgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW4oIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59KTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgXCJzd2luZ1wiO1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJlxuXHRcdFx0XHQoIXR3ZWVuLmVsZW0uc3R5bGUgfHwgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwpICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLnN0eWxlICYmICggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8IGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUU5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9XG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBDb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgdGltZXJJZCxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJmeG51bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICksXG5cdHJydW4gPSAvcXVldWVIb29rcyQvLFxuXHRhbmltYXRpb25QcmVmaWx0ZXJzID0gWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cdHR3ZWVuZXJzID0ge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICksXG5cdFx0XHRcdHRhcmdldCA9IHR3ZWVuLmN1cigpLFxuXHRcdFx0XHRwYXJ0cyA9IHJmeG51bS5leGVjKCB2YWx1ZSApLFxuXHRcdFx0XHR1bml0ID0gcGFydHMgJiYgcGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdFx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdFx0XHRzdGFydCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiArdGFyZ2V0ICkgJiZcblx0XHRcdFx0XHRyZnhudW0uZXhlYyggalF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgcHJvcCApICksXG5cdFx0XHRcdHNjYWxlID0gMSxcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDIwO1xuXG5cdFx0XHRpZiAoIHN0YXJ0ICYmIHN0YXJ0WyAzIF0gIT09IHVuaXQgKSB7XG5cdFx0XHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHRcdFx0dW5pdCA9IHVuaXQgfHwgc3RhcnRbIDMgXTtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0XHRcdHBhcnRzID0gcGFydHMgfHwgW107XG5cblx0XHRcdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRcdFx0c3RhcnQgPSArdGFyZ2V0IHx8IDE7XG5cblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRcdFx0c3RhcnQgPSBzdGFydCAvIHNjYWxlO1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgcHJvcCwgc3RhcnQgKyB1bml0ICk7XG5cblx0XHRcdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKCksXG5cdFx0XHRcdC8vIGJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2hcblx0XHRcdFx0fSB3aGlsZSAoIHNjYWxlICE9PSAoc2NhbGUgPSB0d2Vlbi5jdXIoKSAvIHRhcmdldCkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVwZGF0ZSB0d2VlbiBwcm9wZXJ0aWVzXG5cdFx0XHRpZiAoIHBhcnRzICkge1xuXHRcdFx0XHRzdGFydCA9IHR3ZWVuLnN0YXJ0ID0gK3N0YXJ0IHx8ICt0YXJnZXQgfHwgMDtcblx0XHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHRcdC8vIElmIGEgKz0vLT0gdG9rZW4gd2FzIHByb3ZpZGVkLCB3ZSdyZSBkb2luZyBhIHJlbGF0aXZlIGFuaW1hdGlvblxuXHRcdFx0XHR0d2Vlbi5lbmQgPSBwYXJ0c1sgMSBdID9cblx0XHRcdFx0XHRzdGFydCArICggcGFydHNbIDEgXSArIDEgKSAqIHBhcnRzWyAyIF0gOlxuXHRcdFx0XHRcdCtwYXJ0c1sgMiBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH07XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9KTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNCA7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCB0d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCB0d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICh0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIHR3ZWVuLCBob29rcywgb2xkZmlyZSwgZGlzcGxheSwgY2hlY2tEaXNwbGF5LFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbiggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YV9wcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIEhhbmRsZSBxdWV1ZTogZmFsc2UgcHJvbWlzZXNcblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gSGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3Ncblx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBub3RoaW5nIHNuZWFrcyBvdXRcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFOS0xMCBkbyBub3Rcblx0XHQvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmRcblx0XHQvLyBvdmVyZmxvd1kgYXJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gU2V0IGRpc3BsYXkgcHJvcGVydHkgdG8gaW5saW5lLWJsb2NrIGZvciBoZWlnaHQvd2lkdGhcblx0XHQvLyBhbmltYXRpb25zIG9uIGlubGluZSBlbGVtZW50cyB0aGF0IGFyZSBoYXZpbmcgd2lkdGgvaGVpZ2h0IGFuaW1hdGVkXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cblx0XHQvLyBUZXN0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSBcIm5vbmVcIlxuXHRcdGNoZWNrRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID9cblx0XHRcdGRhdGFfcHJpdi5nZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiICkgfHwgZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXk7XG5cblx0XHRpZiAoIGNoZWNrRGlzcGxheSA9PT0gXCJpbmxpbmVcIiAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBzaG93L2hpZGUgcGFzc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLmV4ZWMoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGRhdGFTaG93IGxlZnQgb3ZlciBmcm9tIGEgc3RvcHBlZCBoaWRlIG9yIHNob3cgYW5kIHdlIGFyZSBnb2luZyB0byBwcm9jZWVkIHdpdGggc2hvdywgd2Ugc2hvdWxkIHByZXRlbmQgdG8gYmUgaGlkZGVuXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXG5cdFx0Ly8gQW55IG5vbi1meCB2YWx1ZSBzdG9wcyB1cyBmcm9tIHJlc3RvcmluZyB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkaXNwbGF5ID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhU2hvdyA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHt9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3RvcmUgc3RhdGUgaWYgaXRzIHRvZ2dsZSAtIGVuYWJsZXMgLnN0b3AoKS50b2dnbGUoKSB0byBcInJldmVyc2VcIlxuXHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHR9XG5cdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRqUXVlcnkoIGVsZW0gKS5zaG93KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFuaW0uZG9uZShmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5KCBlbGVtICkuaGlkZSgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGFuaW0uZG9uZShmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwcm9wO1xuXG5cdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0dHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblxuXHRcdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdFx0dHdlZW4uZW5kID0gdHdlZW4uc3RhcnQ7XG5cdFx0XHRcdFx0dHdlZW4uc3RhcnQgPSBwcm9wID09PSBcIndpZHRoXCIgfHwgcHJvcCA9PT0gXCJoZWlnaHRcIiA/IDEgOiAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdC8vIElmIHRoaXMgaXMgYSBub29wIGxpa2UgLmhpZGUoKS5oaWRlKCksIHJlc3RvcmUgYW4gb3ZlcndyaXR0ZW4gZGlzcGxheSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCAoZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSkgPT09IFwiaW5saW5lXCIgKSB7XG5cdFx0c3R5bGUuZGlzcGxheSA9IGRpc3BsYXk7XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGFuaW1hdGlvblByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9KSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSk7XG5cblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSh7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7IHNwZWNpYWxFYXNpbmc6IHt9IH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9KSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IGFuaW1hdGlvblByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9KVxuXHQpO1xuXG5cdC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5zcGxpdChcIiBcIik7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdHR3ZWVuZXJzWyBwcm9wIF0gPSB0d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0dHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRhbmltYXRpb25QcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFuaW1hdGlvblByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0pO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5vZmYgPyAwIDogdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gXCJudW1iZXJcIiA/IG9wdC5kdXJhdGlvbiA6XG5cdFx0b3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgPyBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXSA6IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbiApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSh7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFfcHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFfcHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmICh0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlKSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YV9wcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKHtcblx0c2xpZGVEb3duOiBnZW5GeChcInNob3dcIiksXG5cdHNsaWRlVXA6IGdlbkZ4KFwiaGlkZVwiKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KFwidG9nZ2xlXCIpLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0pO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRpZiAoIHRpbWVyKCkgKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5cbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoICF0aW1lcklkICkge1xuXHRcdHRpbWVySWQgPSBzZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRjbGVhckludGVydmFsKCB0aW1lcklkICk7XG5cdHRpbWVySWQgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSk7XG59O1xuXG5cbihmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBpT1M8PTUuMSwgQW5kcm9pZDw9NC4yK1xuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8PTIuM1xuXHQvLyBPcHRpb25zIGluc2lkZSBkaXNhYmxlZCBzZWxlY3RzIGFyZSBpbmNvcnJlY3RseSBtYXJrZWQgYXMgZGlzYWJsZWRcblx0c2VsZWN0LmRpc2FibGVkID0gdHJ1ZTtcblx0c3VwcG9ydC5vcHREaXNhYmxlZCA9ICFvcHQuZGlzYWJsZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59KSgpO1xuXG5cbnZhciBub2RlSG9vaywgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBkb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBzdHJ1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGF0dHJpYnV0ZXMgYXJlIGxvd2VyY2FzZVxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiBub2RlSG9vayApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID9cblx0XHRcdFx0dW5kZWZpbmVkIDpcblx0XHRcdFx0cmV0O1xuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsIHByb3BOYW1lLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAobmFtZSA9IGF0dHJOYW1lc1tpKytdKSApIHtcblx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cblx0XHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxuXHRcdFx0XHRpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRcdC8vIFNldCBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHRvIGZhbHNlXG5cdFx0XHRcdFx0ZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0alF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGU7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBuYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59KTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fSxcblxuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsIG5vdHhtbCxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG5vdHhtbCA9IG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKTtcblxuXHRcdGlmICggbm90eG1sICkge1xuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybiBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyZXQgOlxuXHRcdFx0XHQoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCA/XG5cdFx0XHRcdHJldCA6XG5cdFx0XHRcdGVsZW1bIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmhhc0F0dHJpYnV0ZSggXCJ0YWJpbmRleFwiICkgfHwgcmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHwgZWxlbS5ocmVmID9cblx0XHRcdFx0XHRlbGVtLnRhYkluZGV4IDpcblx0XHRcdFx0XHQtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59KTtcblxuXG5cblxudmFyIHJjbGFzcyA9IC9bXFx0XFxyXFxuXFxmXS9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdHByb2NlZWQgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSApICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIHByb2NlZWQgKSB7XG5cdFx0XHQvLyBUaGUgZGlzanVuY3Rpb24gaGVyZSBpcyBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIHJlbW92ZUNsYXNzKVxuXHRcdFx0Y2xhc3NlcyA9ICggdmFsdWUgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF07XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBlbGVtLmNsYXNzTmFtZSA/XG5cdFx0XHRcdFx0KCBcIiBcIiArIGVsZW0uY2xhc3NOYW1lICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICkgOlxuXHRcdFx0XHRcdFwiIFwiXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBvbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uY2xhc3NOYW1lID0gZmluYWxWYWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0cHJvY2VlZCA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgfHwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgdGhpcy5jbGFzc05hbWUgKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGlmICggcHJvY2VlZCApIHtcblx0XHRcdGNsYXNzZXMgPSAoIHZhbHVlIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdO1xuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xuXHRcdFx0XHRcdCggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcblx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPj0gMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSB2YWx1ZSA/IGpRdWVyeS50cmltKCBjdXIgKSA6IFwiXCI7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uY2xhc3NOYW1lID0gZmluYWxWYWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKCB2YWx1ZS5jYWxsKHRoaXMsIGksIHRoaXMuY2xhc3NOYW1lLCBzdGF0ZVZhbCksIHN0YXRlVmFsICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHR2YXIgY2xhc3NOYW1lLFxuXHRcdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlICggKGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdKSApIHtcblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gc3RydW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuY2xhc3NOYW1lICkge1xuXHRcdFx0XHRcdC8vIHN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhX3ByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgdGhpcy5jbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0dGhpcy5jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgPyBcIlwiIDogZGF0YV9wcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGlmICggdGhpc1tpXS5ub2RlVHlwZSA9PT0gMSAmJiAoXCIgXCIgKyB0aGlzW2ldLmNsYXNzTmFtZSArIFwiIFwiKS5yZXBsYWNlKHJjbGFzcywgXCIgXCIpLmluZGV4T2YoIGNsYXNzTmFtZSApID49IDAgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1swXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRcdHJldC5yZXBsYWNlKHJyZXR1cm4sIFwiXCIpIDpcblx0XHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0XHRyZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTAtMTErXG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdGpRdWVyeS50cmltKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCBpbmRleCA8IDAsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLFxuXHRcdFx0XHRcdGkgPSBpbmRleCA8IDAgP1xuXHRcdFx0XHRcdFx0bWF4IDpcblx0XHRcdFx0XHRcdG9uZSA/IGluZGV4IDogMDtcblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIElFNi05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCggc3VwcG9ydC5vcHREaXNhYmxlZCA/ICFvcHRpb24uZGlzYWJsZWQgOiBvcHRpb24uZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PT0gbnVsbCApICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8ICFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cdFx0XHRcdFx0aWYgKCAob3B0aW9uLnNlbGVjdGVkID0galF1ZXJ5LmluQXJyYXkoIG9wdGlvbi52YWx1ZSwgdmFsdWVzICkgPj0gMCkgKSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaChbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlICkgPj0gMCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwidmFsdWVcIikgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxualF1ZXJ5LmVhY2goIChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiKS5zcGxpdChcIiBcIiksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH0sXG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyB0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDogdGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0pO1xuXG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICgvXFw/Lyk7XG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuLy8gV29ya2Fyb3VuZCBmYWlsdXJlIHRvIHN0cmluZy1jYXN0IG51bGwgaW5wdXRcbmpRdWVyeS5wYXJzZUpTT04gPSBmdW5jdGlvbiggZGF0YSApIHtcblx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKyBcIlwiICk7XG59O1xuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCB0bXA7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0dHJ5IHtcblx0XHR0bXAgPSBuZXcgRE9NUGFyc2VyKCk7XG5cdFx0eG1sID0gdG1wLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyaGFzaCA9IC8jLiokLyxcblx0cnRzID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXHRydXJsID0gL14oW1xcdy4rLV0rOikoPzpcXC9cXC8oPzpbXlxcLz8jXSpAfCkoW15cXC8/IzpdKikoPzo6KFxcZCspfCl8KS8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBEb2N1bWVudCBsb2NhdGlvblxuXHRhamF4TG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24uaHJlZixcblxuXHQvLyBTZWdtZW50IGxvY2F0aW9uIGludG8gcGFydHNcblx0YWpheExvY1BhcnRzID0gcnVybC5leGVjKCBhamF4TG9jYXRpb24udG9Mb3dlckNhc2UoKSApIHx8IFtdO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoZGF0YVR5cGUgPSBkYXRhVHlwZXNbaSsrXSkgKSB7XG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbMF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdChzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiYgIXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoZGVlcCA9IHt9KSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWzBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgc1sgXCJ0aHJvd3NcIiBdICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHsgc3RhdGU6IFwicGFyc2VyZXJyb3JcIiwgZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50IH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBhamF4TG9jYXRpb24sXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBhamF4TG9jUGFydHNbIDEgXSApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL3htbC8sXG5cdFx0XHRodG1sOiAvaHRtbC8sXG5cdFx0XHRqc29uOiAvanNvbi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTixcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXHRcdFx0Ly8gQ3Jvc3MtZG9tYWluIGRldGVjdGlvbiB2YXJzXG5cdFx0XHRwYXJ0cyxcblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiYgKCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXHRcdFx0Ly8gVGhlIGpxWEhSIHN0YXRlXG5cdFx0XHRzdGF0ZSA9IDAsXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlID09PSAyID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0dmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFjayBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApLmNvbXBsZXRlID0gY29tcGxldGVEZWZlcnJlZC5hZGQ7XG5cdFx0anFYSFIuc3VjY2VzcyA9IGpxWEhSLmRvbmU7XG5cdFx0anFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsO1xuXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggY2hhcmFjdGVyICgjNzUzMTogYW5kIHN0cmluZyBwcm9tb3Rpb24pXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgYWpheExvY2F0aW9uICkgKyBcIlwiICkucmVwbGFjZSggcmhhc2gsIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgYWpheExvY1BhcnRzWyAxIF0gKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSBqUXVlcnkudHJpbSggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHdlIGhhdmUgYSBwcm90b2NvbDpob3N0OnBvcnQgbWlzbWF0Y2hcblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7XG5cdFx0XHRzLmNyb3NzRG9tYWluID0gISEoIHBhcnRzICYmXG5cdFx0XHRcdCggcGFydHNbIDEgXSAhPT0gYWpheExvY1BhcnRzWyAxIF0gfHwgcGFydHNbIDIgXSAhPT0gYWpheExvY1BhcnRzWyAyIF0gfHxcblx0XHRcdFx0XHQoIHBhcnRzWyAzIF0gfHwgKCBwYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSAhPT1cblx0XHRcdFx0XHRcdCggYWpheExvY1BhcnRzWyAzIF0gfHwgKCBhamF4TG9jUGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgKVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHRjYWNoZVVSTCA9IHMudXJsO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YSApO1xuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgP1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcblx0XHRcdFx0XHRjYWNoZVVSTC5yZXBsYWNlKCBydHMsIFwiJDFfPVwiICsgbm9uY2UrKyApIDpcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmRcblx0XHRcdFx0XHRjYWNoZVVSTCArICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyBub25jZSsrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gKyAoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJiAoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IHN0YXRlID09PSAyICkgKSB7XG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Zm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkge1xuXHRcdFx0anFYSFJbIGkgXSggc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KFwidGltZW91dFwiKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHN0YXRlID0gMTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0Ly8gUHJvcGFnYXRlIGV4Y2VwdGlvbiBhcyBlcnJvciBpZiBub3QgZG9uZVxuXHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0XHQvLyBTaW1wbHkgcmV0aHJvdyBvdGhlcndpc2Vcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gQ2FsbGVkIG9uY2Vcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdGUgaXMgXCJkb25lXCIgbm93XG5cdFx0XHRzdGF0ZSA9IDI7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59KTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkuYWpheCh7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSk7XG5cdH07XG59KTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xuXHRcdHVybDogdXJsLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9KTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbC5jYWxsKHRoaXMsIGkpICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9KS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKHRoaXMsIGkpICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwodGhpcywgaSkgOiBodG1sICk7XG5cdFx0fSk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImJvZHlcIiApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0XHR9XG5cdFx0fSkuZW5kKCk7XG5cdH1cbn0pO1xuXG5cbmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDw9IDEyLjEyXG5cdC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcblx0cmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPD0gMCAmJiBlbGVtLm9mZnNldEhlaWdodCA8PSAwO1xufTtcbmpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuKCBlbGVtICk7XG59O1xuXG5cblxuXG52YXIgcjIwID0gLyUyMC9nLFxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHtcblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgPyBpIDogXCJcIiApICsgXCJdXCIsIHYsIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcblx0XHRcdHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgPyB2YWx1ZSgpIDogKCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gU2V0IHRyYWRpdGlvbmFsIHRvIHRydWUgZm9yIGpRdWVyeSA8PSAxLjMuMiBiZWhhdmlvci5cblx0aWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHRyYWRpdGlvbmFsID0galF1ZXJ5LmFqYXhTZXR0aW5ncyAmJiBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0pO1xuXG5cdH0gZWxzZSB7XG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSlcblx0XHQuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9KVxuXHRcdC5tYXAoZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdHJldHVybiB2YWwgPT0gbnVsbCA/XG5cdFx0XHRcdG51bGwgOlxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9KS5nZXQoKTtcblx0fVxufSk7XG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2goIGUgKSB7fVxufTtcblxudmFyIHhocklkID0gMCxcblx0eGhyQ2FsbGJhY2tzID0ge30sXG5cdHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cdFx0Ly8gZmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbi8vIFN1cHBvcnQ6IElFOVxuLy8gT3BlbiByZXF1ZXN0cyBtdXN0IGJlIG1hbnVhbGx5IGFib3J0ZWQgb24gdW5sb2FkICgjNTI4MClcbi8vIFNlZSBodHRwczovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9rYi8yODU2NzQ2IGZvciBtb3JlIGluZm9cbmlmICggd2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHR3aW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgZnVuY3Rpb24oKSB7XG5cdFx0Zm9yICggdmFyIGtleSBpbiB4aHJDYWxsYmFja3MgKSB7XG5cdFx0XHR4aHJDYWxsYmFja3NbIGtleSBdKCk7XG5cdFx0fVxuXHR9KTtcbn1cblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKSxcblx0XHRcdFx0XHRpZCA9ICsreGhySWQ7XG5cblx0XHRcdFx0eGhyLm9wZW4oIG9wdGlvbnMudHlwZSwgb3B0aW9ucy51cmwsIG9wdGlvbnMuYXN5bmMsIG9wdGlvbnMudXNlcm5hbWUsIG9wdGlvbnMucGFzc3dvcmQgKTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIHhockNhbGxiYWNrc1sgaWQgXTtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSB4aHIub25sb2FkID0geGhyLm9uZXJyb3IgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBmaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEFjY2Vzc2luZyBiaW5hcnktZGF0YSByZXNwb25zZVRleHQgdGhyb3dzIGFuIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gKCMxMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ID09PSBcInN0cmluZ1wiID8ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0ZXh0OiB4aHIucmVzcG9uc2VUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHR9IDogdW5kZWZpbmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0eGhyLm9uZXJyb3IgPSBjYWxsYmFjayhcImVycm9yXCIpO1xuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSB4aHJDYWxsYmFja3NbIGlkIF0gPSBjYWxsYmFjayhcImFib3J0XCIpO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSk7XG5cblxuXG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvKD86amF2YXxlY21hKXNjcmlwdC9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59KTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0pO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KFwiPHNjcmlwdD5cIikucHJvcCh7XG5cdFx0XHRcdFx0YXN5bmM6IHRydWUsXG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0pO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoe1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0pO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmICEoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgJiYgcmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbXCJzY3JpcHQganNvblwiXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIGZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBSZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXHRcdFx0XHQvLyBtYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIHNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSk7XG5cblxuXG5cbi8vIGRhdGE6IHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0dmFyIHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApLFxuXHRcdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsxXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBqUXVlcnkuYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLy8gS2VlcCBhIGNvcHkgb2YgdGhlIG9sZCBsb2FkIG1ldGhvZFxudmFyIF9sb2FkID0galF1ZXJ5LmZuLmxvYWQ7XG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdGlmICggdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIiAmJiBfbG9hZCApIHtcblx0XHRyZXR1cm4gX2xvYWQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHR9XG5cblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZihcIiBcIik7XG5cblx0aWYgKCBvZmYgPj0gMCApIHtcblx0XHRzZWxlY3RvciA9IGpRdWVyeS50cmltKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoe1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIGlmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWRcblx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9KS5kb25lKGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KFwiPGRpdj5cIikuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0fSkuY29tcGxldGUoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBjYWxsYmFjaywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFsgXCJhamF4U3RhcnRcIiwgXCJhamF4U3RvcFwiLCBcImFqYXhDb21wbGV0ZVwiLCBcImFqYXhFcnJvclwiLCBcImFqYXhTdWNjZXNzXCIsIFwiYWpheFNlbmRcIiBdLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59KTtcblxuXG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9KS5sZW5ndGg7XG59O1xuXG5cblxuXG52YXIgZG9jRWxlbSA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbi8qKlxuICogR2V0cyBhIHdpbmRvdyBmcm9tIGFuIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgPyBlbGVtIDogZWxlbS5ub2RlVHlwZSA9PT0gOSAmJiBlbGVtLmRlZmF1bHRWaWV3O1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoXCJhdXRvXCIpID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgY3VyT2Zmc2V0ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9KTtcblx0XHR9XG5cblx0XHR2YXIgZG9jRWxlbSwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGJveCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXG5cdFx0XHRkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDtcblxuXHRcdGlmICggIWRvYyApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxuXHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkge1xuXHRcdFx0cmV0dXJuIGJveDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBCbGFja0JlcnJ5IDUsIGlPUyAzIChvcmlnaW5hbCBpUGhvbmUpXG5cdFx0Ly8gSWYgd2UgZG9uJ3QgaGF2ZSBnQkNSLCBqdXN0IHVzZSAwLDAgcmF0aGVyIHRoYW4gZXJyb3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gc3RydW5kZWZpbmVkICkge1xuXHRcdFx0Ym94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR9XG5cdFx0d2luID0gZ2V0V2luZG93KCBkb2MgKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBib3gudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRsZWZ0OiBib3gubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdH07XG5cdH0sXG5cblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50IHx8IGRvY0VsZW07XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50LCBcImh0bWxcIiApICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2NFbGVtO1xuXHRcdH0pO1xuXHR9XG59KTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXHRcdFx0dmFyIHdpbiA9IGdldFdpbmRvdyggZWxlbSApO1xuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbmRvdy5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCwgbnVsbCApO1xuXHR9O1xufSk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaTw3KywgQ2hyb21lPDM3K1xuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MjgwXG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHRcdC8vIEFzIG9mIDUvOC8yMDEyIHRoaXMgd2lsbCB5aWVsZCBpbmNvcnJlY3QgcmVzdWx0cyBmb3IgTW9iaWxlIFNhZmFyaSwgYnV0IHRoZXJlXG5cdFx0XHRcdFx0Ly8gaXNuJ3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvLiBTZWUgcHVsbCByZXF1ZXN0IGF0IHRoaXMgVVJMIGZvciBkaXNjdXNzaW9uOlxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSwgbnVsbCApO1xuXHRcdH07XG5cdH0pO1xufSk7XG5cblxuLy8gVGhlIG51bWJlciBvZiBlbGVtZW50cyBjb250YWluZWQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXRcbmpRdWVyeS5mbi5zaXplID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLmxlbmd0aDtcbn07XG5cbmpRdWVyeS5mbi5hbmRTZWxmID0galF1ZXJ5LmZuLmFkZEJhY2s7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSk7XG59XG5cblxuXG5cbnZhclxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gc3RydW5kZWZpbmVkICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG5cbn0pKTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgQW5ndWxhckpTIHYxLjQuOFxuICogKGMpIDIwMTAtMjAxNSBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmdcbiAqIExpY2Vuc2U6IE1JVFxuICovXG4oZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7J3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoaXMgb2JqZWN0IHByb3ZpZGVzIGEgdXRpbGl0eSBmb3IgcHJvZHVjaW5nIHJpY2ggRXJyb3IgbWVzc2FnZXMgd2l0aGluXG4gKiBBbmd1bGFyLiBJdCBjYW4gYmUgY2FsbGVkIGFzIGZvbGxvd3M6XG4gKlxuICogdmFyIGV4YW1wbGVNaW5FcnIgPSBtaW5FcnIoJ2V4YW1wbGUnKTtcbiAqIHRocm93IGV4YW1wbGVNaW5FcnIoJ29uZScsICdUaGlzIHswfSBpcyB7MX0nLCBmb28sIGJhcik7XG4gKlxuICogVGhlIGFib3ZlIGNyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgbWluRXJyIGluIHRoZSBleGFtcGxlIG5hbWVzcGFjZS4gVGhlXG4gKiByZXN1bHRpbmcgZXJyb3Igd2lsbCBoYXZlIGEgbmFtZXNwYWNlZCBlcnJvciBjb2RlIG9mIGV4YW1wbGUub25lLiAgVGhlXG4gKiByZXN1bHRpbmcgZXJyb3Igd2lsbCByZXBsYWNlIHswfSB3aXRoIHRoZSB2YWx1ZSBvZiBmb28sIGFuZCB7MX0gd2l0aCB0aGVcbiAqIHZhbHVlIG9mIGJhci4gVGhlIG9iamVjdCBpcyBub3QgcmVzdHJpY3RlZCBpbiB0aGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBpdCBjYW5cbiAqIHRha2UuXG4gKlxuICogSWYgZmV3ZXIgYXJndW1lbnRzIGFyZSBzcGVjaWZpZWQgdGhhbiBuZWNlc3NhcnkgZm9yIGludGVycG9sYXRpb24sIHRoZSBleHRyYVxuICogaW50ZXJwb2xhdGlvbiBtYXJrZXJzIHdpbGwgYmUgcHJlc2VydmVkIGluIHRoZSBmaW5hbCBzdHJpbmcuXG4gKlxuICogU2luY2UgZGF0YSB3aWxsIGJlIHBhcnNlZCBzdGF0aWNhbGx5IGR1cmluZyBhIGJ1aWxkIHN0ZXAsIHNvbWUgcmVzdHJpY3Rpb25zXG4gKiBhcmUgYXBwbGllZCB3aXRoIHJlc3BlY3QgdG8gaG93IG1pbkVyciBpbnN0YW5jZXMgYXJlIGNyZWF0ZWQgYW5kIGNhbGxlZC5cbiAqIEluc3RhbmNlcyBzaG91bGQgaGF2ZSBuYW1lcyBvZiB0aGUgZm9ybSBuYW1lc3BhY2VNaW5FcnIgZm9yIGEgbWluRXJyIGNyZWF0ZWRcbiAqIHVzaW5nIG1pbkVycignbmFtZXNwYWNlJykgLiBFcnJvciBjb2RlcywgbmFtZXNwYWNlcyBhbmQgdGVtcGxhdGUgc3RyaW5nc1xuICogc2hvdWxkIGFsbCBiZSBzdGF0aWMgc3RyaW5ncywgbm90IHZhcmlhYmxlcyBvciBnZW5lcmFsIGV4cHJlc3Npb25zLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGUgVGhlIG5hbWVzcGFjZSB0byB1c2UgZm9yIHRoZSBuZXcgbWluRXJyIGluc3RhbmNlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gRXJyb3JDb25zdHJ1Y3RvciBDdXN0b20gZXJyb3IgY29uc3RydWN0b3IgdG8gYmUgaW5zdGFudGlhdGVkIHdoZW4gcmV0dXJuaW5nXG4gKiAgIGVycm9yIGZyb20gcmV0dXJuZWQgZnVuY3Rpb24sIGZvciBjYXNlcyB3aGVuIGEgcGFydGljdWxhciB0eXBlIG9mIGVycm9yIGlzIHVzZWZ1bC5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbihjb2RlOnN0cmluZywgdGVtcGxhdGU6c3RyaW5nLCAuLi50ZW1wbGF0ZUFyZ3MpOiBFcnJvcn0gbWluRXJyIGluc3RhbmNlXG4gKi9cblxuZnVuY3Rpb24gbWluRXJyKG1vZHVsZSwgRXJyb3JDb25zdHJ1Y3Rvcikge1xuICBFcnJvckNvbnN0cnVjdG9yID0gRXJyb3JDb25zdHJ1Y3RvciB8fCBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBTS0lQX0lOREVYRVMgPSAyO1xuXG4gICAgdmFyIHRlbXBsYXRlQXJncyA9IGFyZ3VtZW50cyxcbiAgICAgIGNvZGUgPSB0ZW1wbGF0ZUFyZ3NbMF0sXG4gICAgICBtZXNzYWdlID0gJ1snICsgKG1vZHVsZSA/IG1vZHVsZSArICc6JyA6ICcnKSArIGNvZGUgKyAnXSAnLFxuICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZUFyZ3NbMV0sXG4gICAgICBwYXJhbVByZWZpeCwgaTtcblxuICAgIG1lc3NhZ2UgKz0gdGVtcGxhdGUucmVwbGFjZSgvXFx7XFxkK1xcfS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgICAgdmFyIGluZGV4ID0gK21hdGNoLnNsaWNlKDEsIC0xKSxcbiAgICAgICAgc2hpZnRlZEluZGV4ID0gaW5kZXggKyBTS0lQX0lOREVYRVM7XG5cbiAgICAgIGlmIChzaGlmdGVkSW5kZXggPCB0ZW1wbGF0ZUFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0b0RlYnVnU3RyaW5nKHRlbXBsYXRlQXJnc1tzaGlmdGVkSW5kZXhdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgbWVzc2FnZSArPSAnXFxuaHR0cDovL2Vycm9ycy5hbmd1bGFyanMub3JnLzEuNC44LycgK1xuICAgICAgKG1vZHVsZSA/IG1vZHVsZSArICcvJyA6ICcnKSArIGNvZGU7XG5cbiAgICBmb3IgKGkgPSBTS0lQX0lOREVYRVMsIHBhcmFtUHJlZml4ID0gJz8nOyBpIDwgdGVtcGxhdGVBcmdzLmxlbmd0aDsgaSsrLCBwYXJhbVByZWZpeCA9ICcmJykge1xuICAgICAgbWVzc2FnZSArPSBwYXJhbVByZWZpeCArICdwJyArIChpIC0gU0tJUF9JTkRFWEVTKSArICc9JyArXG4gICAgICAgIGVuY29kZVVSSUNvbXBvbmVudCh0b0RlYnVnU3RyaW5nKHRlbXBsYXRlQXJnc1tpXSkpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRXJyb3JDb25zdHJ1Y3RvcihtZXNzYWdlKTtcbiAgfTtcbn1cblxuLyogV2UgbmVlZCB0byB0ZWxsIGpzaGludCB3aGF0IHZhcmlhYmxlcyBhcmUgYmVpbmcgZXhwb3J0ZWQgKi9cbi8qIGdsb2JhbCBhbmd1bGFyOiB0cnVlLFxuICBtc2llOiB0cnVlLFxuICBqcUxpdGU6IHRydWUsXG4gIGpRdWVyeTogdHJ1ZSxcbiAgc2xpY2U6IHRydWUsXG4gIHNwbGljZTogdHJ1ZSxcbiAgcHVzaDogdHJ1ZSxcbiAgdG9TdHJpbmc6IHRydWUsXG4gIG5nTWluRXJyOiB0cnVlLFxuICBhbmd1bGFyTW9kdWxlOiB0cnVlLFxuICB1aWQ6IHRydWUsXG4gIFJFR0VYX1NUUklOR19SRUdFWFA6IHRydWUsXG4gIFZBTElESVRZX1NUQVRFX1BST1BFUlRZOiB0cnVlLFxuXG4gIGxvd2VyY2FzZTogdHJ1ZSxcbiAgdXBwZXJjYXNlOiB0cnVlLFxuICBtYW51YWxMb3dlcmNhc2U6IHRydWUsXG4gIG1hbnVhbFVwcGVyY2FzZTogdHJ1ZSxcbiAgbm9kZU5hbWVfOiB0cnVlLFxuICBpc0FycmF5TGlrZTogdHJ1ZSxcbiAgZm9yRWFjaDogdHJ1ZSxcbiAgZm9yRWFjaFNvcnRlZDogdHJ1ZSxcbiAgcmV2ZXJzZVBhcmFtczogdHJ1ZSxcbiAgbmV4dFVpZDogdHJ1ZSxcbiAgc2V0SGFzaEtleTogdHJ1ZSxcbiAgZXh0ZW5kOiB0cnVlLFxuICB0b0ludDogdHJ1ZSxcbiAgaW5oZXJpdDogdHJ1ZSxcbiAgbWVyZ2U6IHRydWUsXG4gIG5vb3A6IHRydWUsXG4gIGlkZW50aXR5OiB0cnVlLFxuICB2YWx1ZUZuOiB0cnVlLFxuICBpc1VuZGVmaW5lZDogdHJ1ZSxcbiAgaXNEZWZpbmVkOiB0cnVlLFxuICBpc09iamVjdDogdHJ1ZSxcbiAgaXNCbGFua09iamVjdDogdHJ1ZSxcbiAgaXNTdHJpbmc6IHRydWUsXG4gIGlzTnVtYmVyOiB0cnVlLFxuICBpc0RhdGU6IHRydWUsXG4gIGlzQXJyYXk6IHRydWUsXG4gIGlzRnVuY3Rpb246IHRydWUsXG4gIGlzUmVnRXhwOiB0cnVlLFxuICBpc1dpbmRvdzogdHJ1ZSxcbiAgaXNTY29wZTogdHJ1ZSxcbiAgaXNGaWxlOiB0cnVlLFxuICBpc0Zvcm1EYXRhOiB0cnVlLFxuICBpc0Jsb2I6IHRydWUsXG4gIGlzQm9vbGVhbjogdHJ1ZSxcbiAgaXNQcm9taXNlTGlrZTogdHJ1ZSxcbiAgdHJpbTogdHJ1ZSxcbiAgZXNjYXBlRm9yUmVnZXhwOiB0cnVlLFxuICBpc0VsZW1lbnQ6IHRydWUsXG4gIG1ha2VNYXA6IHRydWUsXG4gIGluY2x1ZGVzOiB0cnVlLFxuICBhcnJheVJlbW92ZTogdHJ1ZSxcbiAgY29weTogdHJ1ZSxcbiAgc2hhbGxvd0NvcHk6IHRydWUsXG4gIGVxdWFsczogdHJ1ZSxcbiAgY3NwOiB0cnVlLFxuICBqcTogdHJ1ZSxcbiAgY29uY2F0OiB0cnVlLFxuICBzbGljZUFyZ3M6IHRydWUsXG4gIGJpbmQ6IHRydWUsXG4gIHRvSnNvblJlcGxhY2VyOiB0cnVlLFxuICB0b0pzb246IHRydWUsXG4gIGZyb21Kc29uOiB0cnVlLFxuICBjb252ZXJ0VGltZXpvbmVUb0xvY2FsOiB0cnVlLFxuICB0aW1lem9uZVRvT2Zmc2V0OiB0cnVlLFxuICBzdGFydGluZ1RhZzogdHJ1ZSxcbiAgdHJ5RGVjb2RlVVJJQ29tcG9uZW50OiB0cnVlLFxuICBwYXJzZUtleVZhbHVlOiB0cnVlLFxuICB0b0tleVZhbHVlOiB0cnVlLFxuICBlbmNvZGVVcmlTZWdtZW50OiB0cnVlLFxuICBlbmNvZGVVcmlRdWVyeTogdHJ1ZSxcbiAgYW5ndWxhckluaXQ6IHRydWUsXG4gIGJvb3RzdHJhcDogdHJ1ZSxcbiAgZ2V0VGVzdGFiaWxpdHk6IHRydWUsXG4gIHNuYWtlX2Nhc2U6IHRydWUsXG4gIGJpbmRKUXVlcnk6IHRydWUsXG4gIGFzc2VydEFyZzogdHJ1ZSxcbiAgYXNzZXJ0QXJnRm46IHRydWUsXG4gIGFzc2VydE5vdEhhc093blByb3BlcnR5OiB0cnVlLFxuICBnZXR0ZXI6IHRydWUsXG4gIGdldEJsb2NrTm9kZXM6IHRydWUsXG4gIGhhc093blByb3BlcnR5OiB0cnVlLFxuICBjcmVhdGVNYXA6IHRydWUsXG5cbiAgTk9ERV9UWVBFX0VMRU1FTlQ6IHRydWUsXG4gIE5PREVfVFlQRV9BVFRSSUJVVEU6IHRydWUsXG4gIE5PREVfVFlQRV9URVhUOiB0cnVlLFxuICBOT0RFX1RZUEVfQ09NTUVOVDogdHJ1ZSxcbiAgTk9ERV9UWVBFX0RPQ1VNRU5UOiB0cnVlLFxuICBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQ6IHRydWUsXG4qL1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBuZ1xuICogQG1vZHVsZSBuZ1xuICogQGRlc2NyaXB0aW9uXG4gKlxuICogIyBuZyAoY29yZSBtb2R1bGUpXG4gKiBUaGUgbmcgbW9kdWxlIGlzIGxvYWRlZCBieSBkZWZhdWx0IHdoZW4gYW4gQW5ndWxhckpTIGFwcGxpY2F0aW9uIGlzIHN0YXJ0ZWQuIFRoZSBtb2R1bGUgaXRzZWxmXG4gKiBjb250YWlucyB0aGUgZXNzZW50aWFsIGNvbXBvbmVudHMgZm9yIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiB0byBmdW5jdGlvbi4gVGhlIHRhYmxlIGJlbG93XG4gKiBsaXN0cyBhIGhpZ2ggbGV2ZWwgYnJlYWtkb3duIG9mIGVhY2ggb2YgdGhlIHNlcnZpY2VzL2ZhY3RvcmllcywgZmlsdGVycywgZGlyZWN0aXZlcyBhbmQgdGVzdGluZ1xuICogY29tcG9uZW50cyBhdmFpbGFibGUgd2l0aGluIHRoaXMgY29yZSBtb2R1bGUuXG4gKlxuICogPGRpdiBkb2MtbW9kdWxlLWNvbXBvbmVudHM9XCJuZ1wiPjwvZGl2PlxuICovXG5cbnZhciBSRUdFWF9TVFJJTkdfUkVHRVhQID0gL15cXC8oLispXFwvKFthLXpdKikkLztcblxuLy8gVGhlIG5hbWUgb2YgYSBmb3JtIGNvbnRyb2wncyBWYWxpZGl0eVN0YXRlIHByb3BlcnR5LlxuLy8gVGhpcyBpcyB1c2VkIHNvIHRoYXQgaXQncyBwb3NzaWJsZSBmb3IgaW50ZXJuYWwgdGVzdHMgdG8gY3JlYXRlIG1vY2sgVmFsaWRpdHlTdGF0ZXMuXG52YXIgVkFMSURJVFlfU1RBVEVfUFJPUEVSVFkgPSAndmFsaWRpdHknO1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5sb3dlcmNhc2VcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgc3RyaW5nIHRvIGxvd2VyY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGJlIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBMb3dlcmNhc2VkIHN0cmluZy5cbiAqL1xudmFyIGxvd2VyY2FzZSA9IGZ1bmN0aW9uKHN0cmluZykge3JldHVybiBpc1N0cmluZyhzdHJpbmcpID8gc3RyaW5nLnRvTG93ZXJDYXNlKCkgOiBzdHJpbmc7fTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLnVwcGVyY2FzZVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gdXBwZXJjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gYmUgY29udmVydGVkIHRvIHVwcGVyY2FzZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFVwcGVyY2FzZWQgc3RyaW5nLlxuICovXG52YXIgdXBwZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKSB7cmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9VcHBlckNhc2UoKSA6IHN0cmluZzt9O1xuXG5cbnZhciBtYW51YWxMb3dlcmNhc2UgPSBmdW5jdGlvbihzKSB7XG4gIC8qIGpzaGludCBiaXR3aXNlOiBmYWxzZSAqL1xuICByZXR1cm4gaXNTdHJpbmcocylcbiAgICAgID8gcy5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbihjaCkge3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgfCAzMik7fSlcbiAgICAgIDogcztcbn07XG52YXIgbWFudWFsVXBwZXJjYXNlID0gZnVuY3Rpb24ocykge1xuICAvKiBqc2hpbnQgYml0d2lzZTogZmFsc2UgKi9cbiAgcmV0dXJuIGlzU3RyaW5nKHMpXG4gICAgICA/IHMucmVwbGFjZSgvW2Etel0vZywgZnVuY3Rpb24oY2gpIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaC5jaGFyQ29kZUF0KDApICYgfjMyKTt9KVxuICAgICAgOiBzO1xufTtcblxuXG4vLyBTdHJpbmcjdG9Mb3dlckNhc2UgYW5kIFN0cmluZyN0b1VwcGVyQ2FzZSBkb24ndCBwcm9kdWNlIGNvcnJlY3QgcmVzdWx0cyBpbiBicm93c2VycyB3aXRoIFR1cmtpc2hcbi8vIGxvY2FsZSwgZm9yIHRoaXMgcmVhc29uIHdlIG5lZWQgdG8gZGV0ZWN0IHRoaXMgY2FzZSBhbmQgcmVkZWZpbmUgbG93ZXJjYXNlL3VwcGVyY2FzZSBtZXRob2RzXG4vLyB3aXRoIGNvcnJlY3QgYnV0IHNsb3dlciBhbHRlcm5hdGl2ZXMuXG5pZiAoJ2knICE9PSAnSScudG9Mb3dlckNhc2UoKSkge1xuICBsb3dlcmNhc2UgPSBtYW51YWxMb3dlcmNhc2U7XG4gIHVwcGVyY2FzZSA9IG1hbnVhbFVwcGVyY2FzZTtcbn1cblxuXG52YXJcbiAgICBtc2llLCAgICAgICAgICAgICAvLyBob2xkcyBtYWpvciB2ZXJzaW9uIG51bWJlciBmb3IgSUUsIG9yIE5hTiBpZiBVQSBpcyBub3QgSUUuXG4gICAganFMaXRlLCAgICAgICAgICAgLy8gZGVsYXkgYmluZGluZyBzaW5jZSBqUXVlcnkgY291bGQgYmUgbG9hZGVkIGFmdGVyIHVzLlxuICAgIGpRdWVyeSwgICAgICAgICAgIC8vIGRlbGF5IGJpbmRpbmdcbiAgICBzbGljZSAgICAgICAgICAgICA9IFtdLnNsaWNlLFxuICAgIHNwbGljZSAgICAgICAgICAgID0gW10uc3BsaWNlLFxuICAgIHB1c2ggICAgICAgICAgICAgID0gW10ucHVzaCxcbiAgICB0b1N0cmluZyAgICAgICAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsXG4gICAgZ2V0UHJvdG90eXBlT2YgICAgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gICAgbmdNaW5FcnIgICAgICAgICAgPSBtaW5FcnIoJ25nJyksXG5cbiAgICAvKiogQG5hbWUgYW5ndWxhciAqL1xuICAgIGFuZ3VsYXIgICAgICAgICAgID0gd2luZG93LmFuZ3VsYXIgfHwgKHdpbmRvdy5hbmd1bGFyID0ge30pLFxuICAgIGFuZ3VsYXJNb2R1bGUsXG4gICAgdWlkICAgICAgICAgICAgICAgPSAwO1xuXG4vKipcbiAqIGRvY3VtZW50TW9kZSBpcyBhbiBJRS1vbmx5IHByb3BlcnR5XG4gKiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvY2MxOTY5ODgodj12cy44NSkuYXNweFxuICovXG5tc2llID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgYG9iamAgaXMgYW4gYXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QgKE5vZGVMaXN0LCBBcmd1bWVudHMsXG4gKiAgICAgICAgICAgICAgICAgICBTdHJpbmcgLi4uKVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZShvYmopIHtcblxuICAvLyBgbnVsbGAsIGB1bmRlZmluZWRgIGFuZCBgd2luZG93YCBhcmUgbm90IGFycmF5LWxpa2VcbiAgaWYgKG9iaiA9PSBudWxsIHx8IGlzV2luZG93KG9iaikpIHJldHVybiBmYWxzZTtcblxuICAvLyBhcnJheXMsIHN0cmluZ3MgYW5kIGpRdWVyeS9qcUxpdGUgb2JqZWN0cyBhcmUgYXJyYXkgbGlrZVxuICAvLyAqIGpxTGl0ZSBpcyBlaXRoZXIgdGhlIGpRdWVyeSBvciBqcUxpdGUgY29uc3RydWN0b3IgZnVuY3Rpb25cbiAgLy8gKiB3ZSBoYXZlIHRvIGNoZWNrIHRoZSBleGlzdGFuY2Ugb2YganFMaXRlIGZpcnN0IGFzIHRoaXMgbWV0aG9kIGlzIGNhbGxlZFxuICAvLyAgIHZpYSB0aGUgZm9yRWFjaCBtZXRob2Qgd2hlbiBjb25zdHJ1Y3RpbmcgdGhlIGpxTGl0ZSBvYmplY3QgaW4gdGhlIGZpcnN0IHBsYWNlXG4gIGlmIChpc0FycmF5KG9iaikgfHwgaXNTdHJpbmcob2JqKSB8fCAoanFMaXRlICYmIG9iaiBpbnN0YW5jZW9mIGpxTGl0ZSkpIHJldHVybiB0cnVlO1xuXG4gIC8vIFN1cHBvcnQ6IGlPUyA4LjIgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuICAvLyBcImxlbmd0aFwiIGluIG9iaiB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0xMTUwOClcbiAgdmFyIGxlbmd0aCA9IFwibGVuZ3RoXCIgaW4gT2JqZWN0KG9iaikgJiYgb2JqLmxlbmd0aDtcblxuICAvLyBOb2RlTGlzdCBvYmplY3RzICh3aXRoIGBpdGVtYCBtZXRob2QpIGFuZFxuICAvLyBvdGhlciBvYmplY3RzIHdpdGggc3VpdGFibGUgbGVuZ3RoIGNoYXJhY3RlcmlzdGljcyBhcmUgYXJyYXktbGlrZVxuICByZXR1cm4gaXNOdW1iZXIobGVuZ3RoKSAmJlxuICAgIChsZW5ndGggPj0gMCAmJiAobGVuZ3RoIC0gMSkgaW4gb2JqIHx8IHR5cGVvZiBvYmouaXRlbSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZm9yRWFjaFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEludm9rZXMgdGhlIGBpdGVyYXRvcmAgZnVuY3Rpb24gb25jZSBmb3IgZWFjaCBpdGVtIGluIGBvYmpgIGNvbGxlY3Rpb24sIHdoaWNoIGNhbiBiZSBlaXRoZXIgYW5cbiAqIG9iamVjdCBvciBhbiBhcnJheS4gVGhlIGBpdGVyYXRvcmAgZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIGBpdGVyYXRvcih2YWx1ZSwga2V5LCBvYmopYCwgd2hlcmUgYHZhbHVlYFxuICogaXMgdGhlIHZhbHVlIG9mIGFuIG9iamVjdCBwcm9wZXJ0eSBvciBhbiBhcnJheSBlbGVtZW50LCBga2V5YCBpcyB0aGUgb2JqZWN0IHByb3BlcnR5IGtleSBvclxuICogYXJyYXkgZWxlbWVudCBpbmRleCBhbmQgb2JqIGlzIHRoZSBgb2JqYCBpdHNlbGYuIFNwZWNpZnlpbmcgYSBgY29udGV4dGAgZm9yIHRoZSBmdW5jdGlvbiBpcyBvcHRpb25hbC5cbiAqXG4gKiBJdCBpcyB3b3J0aCBub3RpbmcgdGhhdCBgLmZvckVhY2hgIGRvZXMgbm90IGl0ZXJhdGUgb3ZlciBpbmhlcml0ZWQgcHJvcGVydGllcyBiZWNhdXNlIGl0IGZpbHRlcnNcbiAqIHVzaW5nIHRoZSBgaGFzT3duUHJvcGVydHlgIG1ldGhvZC5cbiAqXG4gKiBVbmxpa2UgRVMyNjInc1xuICogW0FycmF5LnByb3RvdHlwZS5mb3JFYWNoXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtMTUuNC40LjE4KSxcbiAqIFByb3ZpZGluZyAndW5kZWZpbmVkJyBvciAnbnVsbCcgdmFsdWVzIGZvciBgb2JqYCB3aWxsIG5vdCB0aHJvdyBhIFR5cGVFcnJvciwgYnV0IHJhdGhlciBqdXN0XG4gKiByZXR1cm4gdGhlIHZhbHVlIHByb3ZpZGVkLlxuICpcbiAgIGBgYGpzXG4gICAgIHZhciB2YWx1ZXMgPSB7bmFtZTogJ21pc2tvJywgZ2VuZGVyOiAnbWFsZSd9O1xuICAgICB2YXIgbG9nID0gW107XG4gICAgIGFuZ3VsYXIuZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICB0aGlzLnB1c2goa2V5ICsgJzogJyArIHZhbHVlKTtcbiAgICAgfSwgbG9nKTtcbiAgICAgZXhwZWN0KGxvZykudG9FcXVhbChbJ25hbWU6IG1pc2tvJywgJ2dlbmRlcjogbWFsZSddKTtcbiAgIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogT2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdG9yIEl0ZXJhdG9yIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb250ZXh0IE9iamVjdCB0byBiZWNvbWUgY29udGV4dCAoYHRoaXNgKSBmb3IgdGhlIGl0ZXJhdG9yIGZ1bmN0aW9uLlxuICogQHJldHVybnMge09iamVjdHxBcnJheX0gUmVmZXJlbmNlIHRvIGBvYmpgLlxuICovXG5cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICB2YXIga2V5LCBsZW5ndGg7XG4gIGlmIChvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgLy8gTmVlZCB0byBjaGVjayBpZiBoYXNPd25Qcm9wZXJ0eSBleGlzdHMsXG4gICAgICAgIC8vIGFzIG9uIElFOCB0aGUgcmVzdWx0IG9mIHF1ZXJ5U2VsZWN0b3JBbGwgaXMgYW4gb2JqZWN0IHdpdGhvdXQgYSBoYXNPd25Qcm9wZXJ0eSBmdW5jdGlvblxuICAgICAgICBpZiAoa2V5ICE9ICdwcm90b3R5cGUnICYmIGtleSAhPSAnbGVuZ3RoJyAmJiBrZXkgIT0gJ25hbWUnICYmICghb2JqLmhhc093blByb3BlcnR5IHx8IG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSkge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopIHx8IGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIHZhciBpc1ByaW1pdGl2ZSA9IHR5cGVvZiBvYmogIT09ICdvYmplY3QnO1xuICAgICAgZm9yIChrZXkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBrZXkgPCBsZW5ndGg7IGtleSsrKSB7XG4gICAgICAgIGlmIChpc1ByaW1pdGl2ZSB8fCBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvYmouZm9yRWFjaCAmJiBvYmouZm9yRWFjaCAhPT0gZm9yRWFjaCkge1xuICAgICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCwgb2JqKTtcbiAgICB9IGVsc2UgaWYgKGlzQmxhbmtPYmplY3Qob2JqKSkge1xuICAgICAgLy8gY3JlYXRlTWFwKCkgZmFzdCBwYXRoIC0tLSBTYWZlIHRvIGF2b2lkIGhhc093blByb3BlcnR5IGNoZWNrIGJlY2F1c2UgcHJvdG90eXBlIGNoYWluIGlzIGVtcHR5XG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iai5oYXNPd25Qcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gU2xvdyBwYXRoIGZvciBvYmplY3RzIGluaGVyaXRpbmcgT2JqZWN0LnByb3RvdHlwZSwgaGFzT3duUHJvcGVydHkgY2hlY2sgbmVlZGVkXG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNsb3cgcGF0aCBmb3Igb2JqZWN0cyB3aGljaCBkbyBub3QgaGF2ZSBhIG1ldGhvZCBgaGFzT3duUHJvcGVydHlgXG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hTb3J0ZWQob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaikuc29ydCgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXlzW2ldXSwga2V5c1tpXSk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5cblxuLyoqXG4gKiB3aGVuIHVzaW5nIGZvckVhY2ggdGhlIHBhcmFtcyBhcmUgdmFsdWUsIGtleSwgYnV0IGl0IGlzIG9mdGVuIHVzZWZ1bCB0byBoYXZlIGtleSwgdmFsdWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgKil9IGl0ZXJhdG9yRm5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbigqLCBzdHJpbmcpfVxuICovXG5mdW5jdGlvbiByZXZlcnNlUGFyYW1zKGl0ZXJhdG9yRm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgaXRlcmF0b3JGbihrZXksIHZhbHVlKTsgfTtcbn1cblxuLyoqXG4gKiBBIGNvbnNpc3RlbnQgd2F5IG9mIGNyZWF0aW5nIHVuaXF1ZSBJRHMgaW4gYW5ndWxhci5cbiAqXG4gKiBVc2luZyBzaW1wbGUgbnVtYmVycyBhbGxvd3MgdXMgdG8gZ2VuZXJhdGUgMjguNiBtaWxsaW9uIHVuaXF1ZSBpZHMgcGVyIHNlY29uZCBmb3IgMTAgeWVhcnMgYmVmb3JlXG4gKiB3ZSBoaXQgbnVtYmVyIHByZWNpc2lvbiBpc3N1ZXMgaW4gSmF2YVNjcmlwdC5cbiAqXG4gKiBNYXRoLnBvdygyLDUzKSAvIDYwIC8gNjAgLyAyNCAvIDM2NSAvIDEwID0gMjguNk1cbiAqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbiB1bmlxdWUgYWxwaGEtbnVtZXJpYyBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gbmV4dFVpZCgpIHtcbiAgcmV0dXJuICsrdWlkO1xufVxuXG5cbi8qKlxuICogU2V0IG9yIGNsZWFyIHRoZSBoYXNoa2V5IGZvciBhbiBvYmplY3QuXG4gKiBAcGFyYW0gb2JqIG9iamVjdFxuICogQHBhcmFtIGggdGhlIGhhc2hrZXkgKCF0cnV0aHkgdG8gZGVsZXRlIHRoZSBoYXNoa2V5KVxuICovXG5mdW5jdGlvbiBzZXRIYXNoS2V5KG9iaiwgaCkge1xuICBpZiAoaCkge1xuICAgIG9iai4kJGhhc2hLZXkgPSBoO1xuICB9IGVsc2Uge1xuICAgIGRlbGV0ZSBvYmouJCRoYXNoS2V5O1xuICB9XG59XG5cblxuZnVuY3Rpb24gYmFzZUV4dGVuZChkc3QsIG9ianMsIGRlZXApIHtcbiAgdmFyIGggPSBkc3QuJCRoYXNoS2V5O1xuXG4gIGZvciAodmFyIGkgPSAwLCBpaSA9IG9ianMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgIHZhciBvYmogPSBvYmpzW2ldO1xuICAgIGlmICghaXNPYmplY3Qob2JqKSAmJiAhaXNGdW5jdGlvbihvYmopKSBjb250aW51ZTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaiA9IDAsIGpqID0ga2V5cy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgIHZhciBzcmMgPSBvYmpba2V5XTtcblxuICAgICAgaWYgKGRlZXAgJiYgaXNPYmplY3Qoc3JjKSkge1xuICAgICAgICBpZiAoaXNEYXRlKHNyYykpIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IG5ldyBEYXRlKHNyYy52YWx1ZU9mKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKHNyYykpIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IG5ldyBSZWdFeHAoc3JjKTtcbiAgICAgICAgfSBlbHNlIGlmIChzcmMubm9kZU5hbWUpIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IHNyYy5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNFbGVtZW50KHNyYykpIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IHNyYy5jbG9uZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghaXNPYmplY3QoZHN0W2tleV0pKSBkc3Rba2V5XSA9IGlzQXJyYXkoc3JjKSA/IFtdIDoge307XG4gICAgICAgICAgYmFzZUV4dGVuZChkc3Rba2V5XSwgW3NyY10sIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkc3Rba2V5XSA9IHNyYztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRIYXNoS2V5KGRzdCwgaCk7XG4gIHJldHVybiBkc3Q7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmV4dGVuZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEV4dGVuZHMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBgZHN0YCBieSBjb3B5aW5nIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgZnJvbSB0aGUgYHNyY2Agb2JqZWN0KHMpXG4gKiB0byBgZHN0YC4gWW91IGNhbiBzcGVjaWZ5IG11bHRpcGxlIGBzcmNgIG9iamVjdHMuIElmIHlvdSB3YW50IHRvIHByZXNlcnZlIG9yaWdpbmFsIG9iamVjdHMsIHlvdSBjYW4gZG8gc29cbiAqIGJ5IHBhc3NpbmcgYW4gZW1wdHkgb2JqZWN0IGFzIHRoZSB0YXJnZXQ6IGB2YXIgb2JqZWN0ID0gYW5ndWxhci5leHRlbmQoe30sIG9iamVjdDEsIG9iamVjdDIpYC5cbiAqXG4gKiAqKk5vdGU6KiogS2VlcCBpbiBtaW5kIHRoYXQgYGFuZ3VsYXIuZXh0ZW5kYCBkb2VzIG5vdCBzdXBwb3J0IHJlY3Vyc2l2ZSBtZXJnZSAoZGVlcCBjb3B5KS4gVXNlXG4gKiB7QGxpbmsgYW5ndWxhci5tZXJnZX0gZm9yIHRoaXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRzdCBEZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gc3JjIFNvdXJjZSBvYmplY3QocykuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZWZlcmVuY2UgdG8gYGRzdGAuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChkc3QpIHtcbiAgcmV0dXJuIGJhc2VFeHRlbmQoZHN0LCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZhbHNlKTtcbn1cblxuXG4vKipcbiogQG5nZG9jIGZ1bmN0aW9uXG4qIEBuYW1lIGFuZ3VsYXIubWVyZ2VcbiogQG1vZHVsZSBuZ1xuKiBAa2luZCBmdW5jdGlvblxuKlxuKiBAZGVzY3JpcHRpb25cbiogRGVlcGx5IGV4dGVuZHMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBgZHN0YCBieSBjb3B5aW5nIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgZnJvbSB0aGUgYHNyY2Agb2JqZWN0KHMpXG4qIHRvIGBkc3RgLiBZb3UgY2FuIHNwZWNpZnkgbXVsdGlwbGUgYHNyY2Agb2JqZWN0cy4gSWYgeW91IHdhbnQgdG8gcHJlc2VydmUgb3JpZ2luYWwgb2JqZWN0cywgeW91IGNhbiBkbyBzb1xuKiBieSBwYXNzaW5nIGFuIGVtcHR5IG9iamVjdCBhcyB0aGUgdGFyZ2V0OiBgdmFyIG9iamVjdCA9IGFuZ3VsYXIubWVyZ2Uoe30sIG9iamVjdDEsIG9iamVjdDIpYC5cbipcbiogVW5saWtlIHtAbGluayBhbmd1bGFyLmV4dGVuZCBleHRlbmQoKX0sIGBtZXJnZSgpYCByZWN1cnNpdmVseSBkZXNjZW5kcyBpbnRvIG9iamVjdCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuKiBvYmplY3RzLCBwZXJmb3JtaW5nIGEgZGVlcCBjb3B5LlxuKlxuKiBAcGFyYW0ge09iamVjdH0gZHN0IERlc3RpbmF0aW9uIG9iamVjdC5cbiogQHBhcmFtIHsuLi5PYmplY3R9IHNyYyBTb3VyY2Ugb2JqZWN0KHMpLlxuKiBAcmV0dXJucyB7T2JqZWN0fSBSZWZlcmVuY2UgdG8gYGRzdGAuXG4qL1xuZnVuY3Rpb24gbWVyZ2UoZHN0KSB7XG4gIHJldHVybiBiYXNlRXh0ZW5kKGRzdCwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCB0cnVlKTtcbn1cblxuXG5cbmZ1bmN0aW9uIHRvSW50KHN0cikge1xuICByZXR1cm4gcGFyc2VJbnQoc3RyLCAxMCk7XG59XG5cblxuZnVuY3Rpb24gaW5oZXJpdChwYXJlbnQsIGV4dHJhKSB7XG4gIHJldHVybiBleHRlbmQoT2JqZWN0LmNyZWF0ZShwYXJlbnQpLCBleHRyYSk7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLm5vb3BcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgbm8gb3BlcmF0aW9ucy4gVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZnVsIHdoZW4gd3JpdGluZyBjb2RlIGluIHRoZVxuICogZnVuY3Rpb25hbCBzdHlsZS5cbiAgIGBgYGpzXG4gICAgIGZ1bmN0aW9uIGZvbyhjYWxsYmFjaykge1xuICAgICAgIHZhciByZXN1bHQgPSBjYWxjdWxhdGVSZXN1bHQoKTtcbiAgICAgICAoY2FsbGJhY2sgfHwgYW5ndWxhci5ub29wKShyZXN1bHQpO1xuICAgICB9XG4gICBgYGBcbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5ub29wLiRpbmplY3QgPSBbXTtcblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pZGVudGl0eVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGl0cyBmaXJzdCBhcmd1bWVudC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlXG4gKiBmdW5jdGlvbmFsIHN0eWxlLlxuICpcbiAgIGBgYGpzXG4gICAgIGZ1bmN0aW9uIHRyYW5zZm9ybWVyKHRyYW5zZm9ybWF0aW9uRm4sIHZhbHVlKSB7XG4gICAgICAgcmV0dXJuICh0cmFuc2Zvcm1hdGlvbkZuIHx8IGFuZ3VsYXIuaWRlbnRpdHkpKHZhbHVlKTtcbiAgICAgfTtcbiAgIGBgYFxuICAqIEBwYXJhbSB7Kn0gdmFsdWUgdG8gYmUgcmV0dXJuZWQuXG4gICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBwYXNzZWQgaW4uXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KCQpIHtyZXR1cm4gJDt9XG5pZGVudGl0eS4kaW5qZWN0ID0gW107XG5cblxuZnVuY3Rpb24gdmFsdWVGbih2YWx1ZSkge3JldHVybiBmdW5jdGlvbigpIHtyZXR1cm4gdmFsdWU7fTt9XG5cbmZ1bmN0aW9uIGhhc0N1c3RvbVRvU3RyaW5nKG9iaikge1xuICByZXR1cm4gaXNGdW5jdGlvbihvYmoudG9TdHJpbmcpICYmIG9iai50b1N0cmluZyAhPT0gdG9TdHJpbmc7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNVbmRlZmluZWRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIHVuZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLlxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO31cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0RlZmluZWRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO31cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc09iamVjdFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYW4gYE9iamVjdGAuIFVubGlrZSBgdHlwZW9mYCBpbiBKYXZhU2NyaXB0LCBgbnVsbGBzIGFyZSBub3RcbiAqIGNvbnNpZGVyZWQgdG8gYmUgb2JqZWN0cy4gTm90ZSB0aGF0IEphdmFTY3JpcHQgYXJyYXlzIGFyZSBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgT2JqZWN0YCBidXQgbm90IGBudWxsYC5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vaXNvYmplY3Q0XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xufVxuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYSBudWxsIHByb3RvdHlwZVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYE9iamVjdGAgd2l0aCBhIG51bGwgcHJvdG90eXBlXG4gKi9cbmZ1bmN0aW9uIGlzQmxhbmtPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgIWdldFByb3RvdHlwZU9mKHZhbHVlKTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc1N0cmluZ1xuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgU3RyaW5nYC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgU3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNOdW1iZXJcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYE51bWJlcmAuXG4gKlxuICogVGhpcyBpbmNsdWRlcyB0aGUgXCJzcGVjaWFsXCIgbnVtYmVycyBgTmFOYCwgYCtJbmZpbml0eWAgYW5kIGAtSW5maW5pdHlgLlxuICpcbiAqIElmIHlvdSB3aXNoIHRvIGV4Y2x1ZGUgdGhlc2UgdGhlbiB5b3UgY2FuIHVzZSB0aGUgbmF0aXZlXG4gKiBbYGlzRmluaXRlJ10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvaXNGaW5pdGUpXG4gKiBtZXRob2QuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYE51bWJlcmAuXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRGF0ZVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSB2YWx1ZSBpcyBhIGRhdGUuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYERhdGVgLlxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNBcnJheVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYW4gYEFycmF5YC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYEFycmF5YC5cbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0Z1bmN0aW9uXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBGdW5jdGlvbmAuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYEZ1bmN0aW9uYC5cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7fVxuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgcmVndWxhciBleHByZXNzaW9uIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYFJlZ0V4cGAuXG4gKi9cbmZ1bmN0aW9uIGlzUmVnRXhwKHZhbHVlKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IG9iaiBPYmplY3QgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGBvYmpgIGlzIGEgd2luZG93IG9iai5cbiAqL1xuZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLndpbmRvdyA9PT0gb2JqO1xufVxuXG5cbmZ1bmN0aW9uIGlzU2NvcGUob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLiRldmFsQXN5bmMgJiYgb2JqLiR3YXRjaDtcbn1cblxuXG5mdW5jdGlvbiBpc0ZpbGUob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBGb3JtRGF0YV0nO1xufVxuXG5cbmZ1bmN0aW9uIGlzQmxvYihvYmopIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG5cbmZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7XG59XG5cblxuZnVuY3Rpb24gaXNQcm9taXNlTGlrZShvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBpc0Z1bmN0aW9uKG9iai50aGVuKTtcbn1cblxuXG52YXIgVFlQRURfQVJSQVlfUkVHRVhQID0gL15cXFtvYmplY3QgKD86VWludDh8VWludDhDbGFtcGVkfFVpbnQxNnxVaW50MzJ8SW50OHxJbnQxNnxJbnQzMnxGbG9hdDMyfEZsb2F0NjQpQXJyYXlcXF0kLztcbmZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgaXNOdW1iZXIodmFsdWUubGVuZ3RoKSAmJiBUWVBFRF9BUlJBWV9SRUdFWFAudGVzdCh0b1N0cmluZy5jYWxsKHZhbHVlKSk7XG59XG5cblxudmFyIHRyaW0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG59O1xuXG4vLyBDb3BpZWQgZnJvbTpcbi8vIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvbG9jYWxfY2xvc3VyZV9nb29nX3N0cmluZ19zdHJpbmcuanMuc291cmNlLmh0bWwjbGluZTEwMjFcbi8vIFByZXJlcTogcyBpcyBhIHN0cmluZy5cbnZhciBlc2NhcGVGb3JSZWdleHAgPSBmdW5jdGlvbihzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoLyhbLSgpXFxbXFxde30rPyouJFxcXnwsOiM8IVxcXFxdKS9nLCAnXFxcXCQxJykuXG4gICAgICAgICAgIHJlcGxhY2UoL1xceDA4L2csICdcXFxceDA4Jyk7XG59O1xuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRWxlbWVudFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBET00gZWxlbWVudCAob3Igd3JhcHBlZCBqUXVlcnkgZWxlbWVudCkuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQgKG9yIHdyYXBwZWQgalF1ZXJ5IGVsZW1lbnQpLlxuICovXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICByZXR1cm4gISEobm9kZSAmJlxuICAgIChub2RlLm5vZGVOYW1lICAvLyB3ZSBhcmUgYSBkaXJlY3QgZWxlbWVudFxuICAgIHx8IChub2RlLnByb3AgJiYgbm9kZS5hdHRyICYmIG5vZGUuZmluZCkpKTsgIC8vIHdlIGhhdmUgYW4gb24gYW5kIGZpbmQgbWV0aG9kIHBhcnQgb2YgalF1ZXJ5IEFQSVxufVxuXG4vKipcbiAqIEBwYXJhbSBzdHIgJ2tleTEsa2V5MiwuLi4nXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBpbiB0aGUgZm9ybSBvZiB7a2V5MTp0cnVlLCBrZXkyOnRydWUsIC4uLn1cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcChzdHIpIHtcbiAgdmFyIG9iaiA9IHt9LCBpdGVtcyA9IHN0ci5zcGxpdChcIixcIiksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgIG9ialtpdGVtc1tpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cblxuZnVuY3Rpb24gbm9kZU5hbWVfKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGxvd2VyY2FzZShlbGVtZW50Lm5vZGVOYW1lIHx8IChlbGVtZW50WzBdICYmIGVsZW1lbnRbMF0ubm9kZU5hbWUpKTtcbn1cblxuZnVuY3Rpb24gaW5jbHVkZXMoYXJyYXksIG9iaikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhcnJheSwgb2JqKSAhPSAtMTtcbn1cblxuZnVuY3Rpb24gYXJyYXlSZW1vdmUoYXJyYXksIHZhbHVlKSB7XG4gIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YodmFsdWUpO1xuICBpZiAoaW5kZXggPj0gMCkge1xuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5jb3B5XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhIGRlZXAgY29weSBvZiBgc291cmNlYCwgd2hpY2ggc2hvdWxkIGJlIGFuIG9iamVjdCBvciBhbiBhcnJheS5cbiAqXG4gKiAqIElmIG5vIGRlc3RpbmF0aW9uIGlzIHN1cHBsaWVkLCBhIGNvcHkgb2YgdGhlIG9iamVjdCBvciBhcnJheSBpcyBjcmVhdGVkLlxuICogKiBJZiBhIGRlc3RpbmF0aW9uIGlzIHByb3ZpZGVkLCBhbGwgb2YgaXRzIGVsZW1lbnRzIChmb3IgYXJyYXlzKSBvciBwcm9wZXJ0aWVzIChmb3Igb2JqZWN0cylcbiAqICAgYXJlIGRlbGV0ZWQgYW5kIHRoZW4gYWxsIGVsZW1lbnRzL3Byb3BlcnRpZXMgZnJvbSB0aGUgc291cmNlIGFyZSBjb3BpZWQgdG8gaXQuXG4gKiAqIElmIGBzb3VyY2VgIGlzIG5vdCBhbiBvYmplY3Qgb3IgYXJyYXkgKGluYy4gYG51bGxgIGFuZCBgdW5kZWZpbmVkYCksIGBzb3VyY2VgIGlzIHJldHVybmVkLlxuICogKiBJZiBgc291cmNlYCBpcyBpZGVudGljYWwgdG8gJ2Rlc3RpbmF0aW9uJyBhbiBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24uXG4gKlxuICogQHBhcmFtIHsqfSBzb3VyY2UgVGhlIHNvdXJjZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBtYWtlIGEgY29weS5cbiAqICAgICAgICAgICAgICAgICAgIENhbiBiZSBhbnkgdHlwZSwgaW5jbHVkaW5nIHByaW1pdGl2ZXMsIGBudWxsYCwgYW5kIGB1bmRlZmluZWRgLlxuICogQHBhcmFtIHsoT2JqZWN0fEFycmF5KT19IGRlc3RpbmF0aW9uIERlc3RpbmF0aW9uIGludG8gd2hpY2ggdGhlIHNvdXJjZSBpcyBjb3BpZWQuIElmXG4gKiAgICAgcHJvdmlkZWQsIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZSBhcyBgc291cmNlYC5cbiAqIEByZXR1cm5zIHsqfSBUaGUgY29weSBvciB1cGRhdGVkIGBkZXN0aW5hdGlvbmAsIGlmIGBkZXN0aW5hdGlvbmAgd2FzIHNwZWNpZmllZC5cbiAqXG4gKiBAZXhhbXBsZVxuIDxleGFtcGxlIG1vZHVsZT1cImNvcHlFeGFtcGxlXCI+XG4gPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuIDxmb3JtIG5vdmFsaWRhdGUgY2xhc3M9XCJzaW1wbGUtZm9ybVwiPlxuIE5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCIgLz48YnIgLz5cbiBFLW1haWw6IDxpbnB1dCB0eXBlPVwiZW1haWxcIiBuZy1tb2RlbD1cInVzZXIuZW1haWxcIiAvPjxiciAvPlxuIEdlbmRlcjogPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwidXNlci5nZW5kZXJcIiB2YWx1ZT1cIm1hbGVcIiAvPm1hbGVcbiA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJ1c2VyLmdlbmRlclwiIHZhbHVlPVwiZmVtYWxlXCIgLz5mZW1hbGU8YnIgLz5cbiA8YnV0dG9uIG5nLWNsaWNrPVwicmVzZXQoKVwiPlJFU0VUPC9idXR0b24+XG4gPGJ1dHRvbiBuZy1jbGljaz1cInVwZGF0ZSh1c2VyKVwiPlNBVkU8L2J1dHRvbj5cbiA8L2Zvcm0+XG4gPHByZT5mb3JtID0ge3t1c2VyIHwganNvbn19PC9wcmU+XG4gPHByZT5tYXN0ZXIgPSB7e21hc3RlciB8IGpzb259fTwvcHJlPlxuIDwvZGl2PlxuXG4gPHNjcmlwdD5cbiAgYW5ndWxhci5tb2R1bGUoJ2NvcHlFeGFtcGxlJywgW10pXG4gICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICRzY29wZS5tYXN0ZXI9IHt9O1xuXG4gICAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24odXNlcikge1xuICAgICAgICAvLyBFeGFtcGxlIHdpdGggMSBhcmd1bWVudFxuICAgICAgICAkc2NvcGUubWFzdGVyPSBhbmd1bGFyLmNvcHkodXNlcik7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRXhhbXBsZSB3aXRoIDIgYXJndW1lbnRzXG4gICAgICAgIGFuZ3VsYXIuY29weSgkc2NvcGUubWFzdGVyLCAkc2NvcGUudXNlcik7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUucmVzZXQoKTtcbiAgICB9XSk7XG4gPC9zY3JpcHQ+XG4gPC9maWxlPlxuIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gY29weShzb3VyY2UsIGRlc3RpbmF0aW9uKSB7XG4gIHZhciBzdGFja1NvdXJjZSA9IFtdO1xuICB2YXIgc3RhY2tEZXN0ID0gW107XG5cbiAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgaWYgKGlzVHlwZWRBcnJheShkZXN0aW5hdGlvbikpIHtcbiAgICAgIHRocm93IG5nTWluRXJyKCdjcHRhJywgXCJDYW4ndCBjb3B5ISBUeXBlZEFycmF5IGRlc3RpbmF0aW9uIGNhbm5vdCBiZSBtdXRhdGVkLlwiKTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZSA9PT0gZGVzdGluYXRpb24pIHtcbiAgICAgIHRocm93IG5nTWluRXJyKCdjcGknLCBcIkNhbid0IGNvcHkhIFNvdXJjZSBhbmQgZGVzdGluYXRpb24gYXJlIGlkZW50aWNhbC5cIik7XG4gICAgfVxuXG4gICAgLy8gRW1wdHkgdGhlIGRlc3RpbmF0aW9uIG9iamVjdFxuICAgIGlmIChpc0FycmF5KGRlc3RpbmF0aW9uKSkge1xuICAgICAgZGVzdGluYXRpb24ubGVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yRWFjaChkZXN0aW5hdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoa2V5ICE9PSAnJCRoYXNoS2V5Jykge1xuICAgICAgICAgIGRlbGV0ZSBkZXN0aW5hdGlvbltrZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGFja1NvdXJjZS5wdXNoKHNvdXJjZSk7XG4gICAgc3RhY2tEZXN0LnB1c2goZGVzdGluYXRpb24pO1xuICAgIHJldHVybiBjb3B5UmVjdXJzZShzb3VyY2UsIGRlc3RpbmF0aW9uKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5RWxlbWVudChzb3VyY2UpO1xuXG4gIGZ1bmN0aW9uIGNvcHlSZWN1cnNlKHNvdXJjZSwgZGVzdGluYXRpb24pIHtcbiAgICB2YXIgaCA9IGRlc3RpbmF0aW9uLiQkaGFzaEtleTtcbiAgICB2YXIgcmVzdWx0LCBrZXk7XG4gICAgaWYgKGlzQXJyYXkoc291cmNlKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gc291cmNlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgZGVzdGluYXRpb24ucHVzaChjb3B5RWxlbWVudChzb3VyY2VbaV0pKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQmxhbmtPYmplY3Qoc291cmNlKSkge1xuICAgICAgLy8gY3JlYXRlTWFwKCkgZmFzdCBwYXRoIC0tLSBTYWZlIHRvIGF2b2lkIGhhc093blByb3BlcnR5IGNoZWNrIGJlY2F1c2UgcHJvdG90eXBlIGNoYWluIGlzIGVtcHR5XG4gICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNvcHlFbGVtZW50KHNvdXJjZVtrZXldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNvdXJjZSAmJiB0eXBlb2Ygc291cmNlLmhhc093blByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBTbG93IHBhdGgsIHdoaWNoIG11c3QgcmVseSBvbiBoYXNPd25Qcm9wZXJ0eVxuICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjb3B5RWxlbWVudChzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2xvd2VzdCBwYXRoIC0tLSBoYXNPd25Qcm9wZXJ0eSBjYW4ndCBiZSBjYWxsZWQgYXMgYSBtZXRob2RcbiAgICAgIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weUVsZW1lbnQoc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHNldEhhc2hLZXkoZGVzdGluYXRpb24sIGgpO1xuICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcHlFbGVtZW50KHNvdXJjZSkge1xuICAgIC8vIFNpbXBsZSB2YWx1ZXNcbiAgICBpZiAoIWlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfVxuXG4gICAgLy8gQWxyZWFkeSBjb3BpZWQgdmFsdWVzXG4gICAgdmFyIGluZGV4ID0gc3RhY2tTb3VyY2UuaW5kZXhPZihzb3VyY2UpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBzdGFja0Rlc3RbaW5kZXhdO1xuICAgIH1cblxuICAgIGlmIChpc1dpbmRvdyhzb3VyY2UpIHx8IGlzU2NvcGUoc291cmNlKSkge1xuICAgICAgdGhyb3cgbmdNaW5FcnIoJ2Nwd3MnLFxuICAgICAgICBcIkNhbid0IGNvcHkhIE1ha2luZyBjb3BpZXMgb2YgV2luZG93IG9yIFNjb3BlIGluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgbmVlZHNSZWN1cnNlID0gZmFsc2U7XG4gICAgdmFyIGRlc3RpbmF0aW9uO1xuXG4gICAgaWYgKGlzQXJyYXkoc291cmNlKSkge1xuICAgICAgZGVzdGluYXRpb24gPSBbXTtcbiAgICAgIG5lZWRzUmVjdXJzZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChpc1R5cGVkQXJyYXkoc291cmNlKSkge1xuICAgICAgZGVzdGluYXRpb24gPSBuZXcgc291cmNlLmNvbnN0cnVjdG9yKHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmIChpc0RhdGUoc291cmNlKSkge1xuICAgICAgZGVzdGluYXRpb24gPSBuZXcgRGF0ZShzb3VyY2UuZ2V0VGltZSgpKTtcbiAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKHNvdXJjZSkpIHtcbiAgICAgIGRlc3RpbmF0aW9uID0gbmV3IFJlZ0V4cChzb3VyY2Uuc291cmNlLCBzb3VyY2UudG9TdHJpbmcoKS5tYXRjaCgvW15cXC9dKiQvKVswXSk7XG4gICAgICBkZXN0aW5hdGlvbi5sYXN0SW5kZXggPSBzb3VyY2UubGFzdEluZGV4O1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihzb3VyY2UuY2xvbmVOb2RlKSkge1xuICAgICAgICBkZXN0aW5hdGlvbiA9IHNvdXJjZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc3RpbmF0aW9uID0gT2JqZWN0LmNyZWF0ZShnZXRQcm90b3R5cGVPZihzb3VyY2UpKTtcbiAgICAgIG5lZWRzUmVjdXJzZSA9IHRydWU7XG4gICAgfVxuXG4gICAgc3RhY2tTb3VyY2UucHVzaChzb3VyY2UpO1xuICAgIHN0YWNrRGVzdC5wdXNoKGRlc3RpbmF0aW9uKTtcblxuICAgIHJldHVybiBuZWVkc1JlY3Vyc2VcbiAgICAgID8gY29weVJlY3Vyc2Uoc291cmNlLCBkZXN0aW5hdGlvbilcbiAgICAgIDogZGVzdGluYXRpb247XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc2hhbGxvdyBjb3B5IG9mIGFuIG9iamVjdCwgYW4gYXJyYXkgb3IgYSBwcmltaXRpdmUuXG4gKlxuICogQXNzdW1lcyB0aGF0IHRoZXJlIGFyZSBubyBwcm90byBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBzaGFsbG93Q29weShzcmMsIGRzdCkge1xuICBpZiAoaXNBcnJheShzcmMpKSB7XG4gICAgZHN0ID0gZHN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gc3JjLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGRzdFtpXSA9IHNyY1tpXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3Qoc3JjKSkge1xuICAgIGRzdCA9IGRzdCB8fCB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICAgIGlmICghKGtleS5jaGFyQXQoMCkgPT09ICckJyAmJiBrZXkuY2hhckF0KDEpID09PSAnJCcpKSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRzdCB8fCBzcmM7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZXF1YWxzXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiB0d28gb2JqZWN0cyBvciB0d28gdmFsdWVzIGFyZSBlcXVpdmFsZW50LiBTdXBwb3J0cyB2YWx1ZSB0eXBlcywgcmVndWxhclxuICogZXhwcmVzc2lvbnMsIGFycmF5cyBhbmQgb2JqZWN0cy5cbiAqXG4gKiBUd28gb2JqZWN0cyBvciB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICpcbiAqICogQm90aCBvYmplY3RzIG9yIHZhbHVlcyBwYXNzIGA9PT1gIGNvbXBhcmlzb24uXG4gKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgYW5kIGFsbCBvZiB0aGVpciBwcm9wZXJ0aWVzIGFyZSBlcXVhbCBieVxuICogICBjb21wYXJpbmcgdGhlbSB3aXRoIGBhbmd1bGFyLmVxdWFsc2AuXG4gKiAqIEJvdGggdmFsdWVzIGFyZSBOYU4uIChJbiBKYXZhU2NyaXB0LCBOYU4gPT0gTmFOID0+IGZhbHNlLiBCdXQgd2UgY29uc2lkZXIgdHdvIE5hTiBhcyBlcXVhbClcbiAqICogQm90aCB2YWx1ZXMgcmVwcmVzZW50IHRoZSBzYW1lIHJlZ3VsYXIgZXhwcmVzc2lvbiAoSW4gSmF2YVNjcmlwdCxcbiAqICAgL2FiYy8gPT0gL2FiYy8gPT4gZmFsc2UuIEJ1dCB3ZSBjb25zaWRlciB0d28gcmVndWxhciBleHByZXNzaW9ucyBhcyBlcXVhbCB3aGVuIHRoZWlyIHRleHR1YWxcbiAqICAgcmVwcmVzZW50YXRpb24gbWF0Y2hlcykuXG4gKlxuICogRHVyaW5nIGEgcHJvcGVydHkgY29tcGFyaXNvbiwgcHJvcGVydGllcyBvZiBgZnVuY3Rpb25gIHR5cGUgYW5kIHByb3BlcnRpZXMgd2l0aCBuYW1lc1xuICogdGhhdCBiZWdpbiB3aXRoIGAkYCBhcmUgaWdub3JlZC5cbiAqXG4gKiBTY29wZSBhbmQgRE9NV2luZG93IG9iamVjdHMgYXJlIGJlaW5nIGNvbXBhcmVkIG9ubHkgYnkgaWRlbnRpZnkgKGA9PT1gKS5cbiAqXG4gKiBAcGFyYW0geyp9IG8xIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvMiBPYmplY3Qgb3IgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGFyZ3VtZW50cyBhcmUgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIGVxdWFscyhvMSwgbzIpIHtcbiAgaWYgKG8xID09PSBvMikgcmV0dXJuIHRydWU7XG4gIGlmIChvMSA9PT0gbnVsbCB8fCBvMiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBpZiAobzEgIT09IG8xICYmIG8yICE9PSBvMikgcmV0dXJuIHRydWU7IC8vIE5hTiA9PT0gTmFOXG4gIHZhciB0MSA9IHR5cGVvZiBvMSwgdDIgPSB0eXBlb2YgbzIsIGxlbmd0aCwga2V5LCBrZXlTZXQ7XG4gIGlmICh0MSA9PSB0Mikge1xuICAgIGlmICh0MSA9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKGlzQXJyYXkobzEpKSB7XG4gICAgICAgIGlmICghaXNBcnJheShvMikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKChsZW5ndGggPSBvMS5sZW5ndGgpID09IG8yLmxlbmd0aCkge1xuICAgICAgICAgIGZvciAoa2V5ID0gMDsga2V5IDwgbGVuZ3RoOyBrZXkrKykge1xuICAgICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKG8xKSkge1xuICAgICAgICBpZiAoIWlzRGF0ZShvMikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGVxdWFscyhvMS5nZXRUaW1lKCksIG8yLmdldFRpbWUoKSk7XG4gICAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKG8xKSkge1xuICAgICAgICByZXR1cm4gaXNSZWdFeHAobzIpID8gbzEudG9TdHJpbmcoKSA9PSBvMi50b1N0cmluZygpIDogZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNTY29wZShvMSkgfHwgaXNTY29wZShvMikgfHwgaXNXaW5kb3cobzEpIHx8IGlzV2luZG93KG8yKSB8fFxuICAgICAgICAgIGlzQXJyYXkobzIpIHx8IGlzRGF0ZShvMikgfHwgaXNSZWdFeHAobzIpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGtleVNldCA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICBmb3IgKGtleSBpbiBvMSkge1xuICAgICAgICAgIGlmIChrZXkuY2hhckF0KDApID09PSAnJCcgfHwgaXNGdW5jdGlvbihvMVtrZXldKSkgY29udGludWU7XG4gICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBrZXlTZXRba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChrZXkgaW4gbzIpIHtcbiAgICAgICAgICBpZiAoIShrZXkgaW4ga2V5U2V0KSAmJlxuICAgICAgICAgICAgICBrZXkuY2hhckF0KDApICE9PSAnJCcgJiZcbiAgICAgICAgICAgICAgaXNEZWZpbmVkKG8yW2tleV0pICYmXG4gICAgICAgICAgICAgICFpc0Z1bmN0aW9uKG8yW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxudmFyIGNzcCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIWlzRGVmaW5lZChjc3AucnVsZXMpKSB7XG5cblxuICAgIHZhciBuZ0NzcEVsZW1lbnQgPSAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW25nLWNzcF0nKSB8fFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uZy1jc3BdJykpO1xuXG4gICAgaWYgKG5nQ3NwRWxlbWVudCkge1xuICAgICAgdmFyIG5nQ3NwQXR0cmlidXRlID0gbmdDc3BFbGVtZW50LmdldEF0dHJpYnV0ZSgnbmctY3NwJykgfHxcbiAgICAgICAgICAgICAgICAgICAgbmdDc3BFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1uZy1jc3AnKTtcbiAgICAgIGNzcC5ydWxlcyA9IHtcbiAgICAgICAgbm9VbnNhZmVFdmFsOiAhbmdDc3BBdHRyaWJ1dGUgfHwgKG5nQ3NwQXR0cmlidXRlLmluZGV4T2YoJ25vLXVuc2FmZS1ldmFsJykgIT09IC0xKSxcbiAgICAgICAgbm9JbmxpbmVTdHlsZTogIW5nQ3NwQXR0cmlidXRlIHx8IChuZ0NzcEF0dHJpYnV0ZS5pbmRleE9mKCduby1pbmxpbmUtc3R5bGUnKSAhPT0gLTEpXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3AucnVsZXMgPSB7XG4gICAgICAgIG5vVW5zYWZlRXZhbDogbm9VbnNhZmVFdmFsKCksXG4gICAgICAgIG5vSW5saW5lU3R5bGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjc3AucnVsZXM7XG5cbiAgZnVuY3Rpb24gbm9VbnNhZmVFdmFsKCkge1xuICAgIHRyeSB7XG4gICAgICAvKiBqc2hpbnQgLVcwMzEsIC1XMDU0ICovXG4gICAgICBuZXcgRnVuY3Rpb24oJycpO1xuICAgICAgLyoganNoaW50ICtXMDMxLCArVzA1NCAqL1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbW9kdWxlIG5nXG4gKiBAbmFtZSBuZ0pxXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nSnEgdGhlIG5hbWUgb2YgdGhlIGxpYnJhcnkgYXZhaWxhYmxlIHVuZGVyIGB3aW5kb3dgXG4gKiB0byBiZSB1c2VkIGZvciBhbmd1bGFyLmVsZW1lbnRcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoaXMgZGlyZWN0aXZlIHRvIGZvcmNlIHRoZSBhbmd1bGFyLmVsZW1lbnQgbGlicmFyeS4gIFRoaXMgc2hvdWxkIGJlXG4gKiB1c2VkIHRvIGZvcmNlIGVpdGhlciBqcUxpdGUgYnkgbGVhdmluZyBuZy1qcSBibGFuayBvciBzZXR0aW5nIHRoZSBuYW1lIG9mXG4gKiB0aGUganF1ZXJ5IHZhcmlhYmxlIHVuZGVyIHdpbmRvdyAoZWcuIGpRdWVyeSkuXG4gKlxuICogU2luY2UgYW5ndWxhciBsb29rcyBmb3IgdGhpcyBkaXJlY3RpdmUgd2hlbiBpdCBpcyBsb2FkZWQgKGRvZXNuJ3Qgd2FpdCBmb3IgdGhlXG4gKiBET01Db250ZW50TG9hZGVkIGV2ZW50KSwgaXQgbXVzdCBiZSBwbGFjZWQgb24gYW4gZWxlbWVudCB0aGF0IGNvbWVzIGJlZm9yZSB0aGUgc2NyaXB0XG4gKiB3aGljaCBsb2FkcyBhbmd1bGFyLiBBbHNvLCBvbmx5IHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBgbmctanFgIHdpbGwgYmUgdXNlZCBhbmQgYWxsXG4gKiBvdGhlcnMgaWdub3JlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byBmb3JjZSBqcUxpdGUgdXNpbmcgdGhlIGBuZ0pxYCBkaXJlY3RpdmUgdG8gdGhlIGBodG1sYCB0YWcuXG4gYGBgaHRtbFxuIDwhZG9jdHlwZSBodG1sPlxuIDxodG1sIG5nLWFwcCBuZy1qcT5cbiAuLi5cbiAuLi5cbiA8L2h0bWw+XG4gYGBgXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYSBqUXVlcnkgYmFzZWQgbGlicmFyeSBvZiBhIGRpZmZlcmVudCBuYW1lLlxuICogVGhlIGxpYnJhcnkgbmFtZSBtdXN0IGJlIGF2YWlsYWJsZSBhdCB0aGUgdG9wIG1vc3QgJ3dpbmRvdycuXG4gYGBgaHRtbFxuIDwhZG9jdHlwZSBodG1sPlxuIDxodG1sIG5nLWFwcCBuZy1qcT1cImpRdWVyeUxpYlwiPlxuIC4uLlxuIC4uLlxuIDwvaHRtbD5cbiBgYGBcbiAqL1xudmFyIGpxID0gZnVuY3Rpb24oKSB7XG4gIGlmIChpc0RlZmluZWQoanEubmFtZV8pKSByZXR1cm4ganEubmFtZV87XG4gIHZhciBlbDtcbiAgdmFyIGksIGlpID0gbmdBdHRyUHJlZml4ZXMubGVuZ3RoLCBwcmVmaXgsIG5hbWU7XG4gIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XG4gICAgcHJlZml4ID0gbmdBdHRyUHJlZml4ZXNbaV07XG4gICAgaWYgKGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignWycgKyBwcmVmaXgucmVwbGFjZSgnOicsICdcXFxcOicpICsgJ2pxXScpKSB7XG4gICAgICBuYW1lID0gZWwuZ2V0QXR0cmlidXRlKHByZWZpeCArICdqcScpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChqcS5uYW1lXyA9IG5hbWUpO1xufTtcblxuZnVuY3Rpb24gY29uY2F0KGFycmF5MSwgYXJyYXkyLCBpbmRleCkge1xuICByZXR1cm4gYXJyYXkxLmNvbmNhdChzbGljZS5jYWxsKGFycmF5MiwgaW5kZXgpKTtcbn1cblxuZnVuY3Rpb24gc2xpY2VBcmdzKGFyZ3MsIHN0YXJ0SW5kZXgpIHtcbiAgcmV0dXJuIHNsaWNlLmNhbGwoYXJncywgc3RhcnRJbmRleCB8fCAwKTtcbn1cblxuXG4vKiBqc2hpbnQgLVcxMDEgKi9cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmJpbmRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggY2FsbHMgZnVuY3Rpb24gYGZuYCBib3VuZCB0byBgc2VsZmAgKGBzZWxmYCBiZWNvbWVzIHRoZSBgdGhpc2AgZm9yXG4gKiBgZm5gKS4gWW91IGNhbiBzdXBwbHkgb3B0aW9uYWwgYGFyZ3NgIHRoYXQgYXJlIHByZWJvdW5kIHRvIHRoZSBmdW5jdGlvbi4gVGhpcyBmZWF0dXJlIGlzIGFsc29cbiAqIGtub3duIGFzIFtwYXJ0aWFsIGFwcGxpY2F0aW9uXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BhcnRpYWxfYXBwbGljYXRpb24pLCBhc1xuICogZGlzdGluZ3Vpc2hlZCBmcm9tIFtmdW5jdGlvbiBjdXJyeWluZ10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdXJyeWluZyNDb250cmFzdF93aXRoX3BhcnRpYWxfZnVuY3Rpb25fYXBwbGljYXRpb24pLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIENvbnRleHQgd2hpY2ggYGZuYCBzaG91bGQgYmUgZXZhbHVhdGVkIGluLlxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBGdW5jdGlvbiB0byBiZSBib3VuZC5cbiAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBhcmd1bWVudHMgdG8gYmUgcHJlYm91bmQgdG8gdGhlIGBmbmAgZnVuY3Rpb24gY2FsbC5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBGdW5jdGlvbiB0aGF0IHdyYXBzIHRoZSBgZm5gIHdpdGggYWxsIHRoZSBzcGVjaWZpZWQgYmluZGluZ3MuXG4gKi9cbi8qIGpzaGludCArVzEwMSAqL1xuZnVuY3Rpb24gYmluZChzZWxmLCBmbikge1xuICB2YXIgY3VycnlBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBzbGljZUFyZ3MoYXJndW1lbnRzLCAyKSA6IFtdO1xuICBpZiAoaXNGdW5jdGlvbihmbikgJiYgIShmbiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICByZXR1cm4gY3VycnlBcmdzLmxlbmd0aFxuICAgICAgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICAgICAgPyBmbi5hcHBseShzZWxmLCBjb25jYXQoY3VycnlBcmdzLCBhcmd1bWVudHMsIDApKVxuICAgICAgICAgICAgOiBmbi5hcHBseShzZWxmLCBjdXJyeUFyZ3MpO1xuICAgICAgICB9XG4gICAgICA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgICAgICA/IGZuLmFwcGx5KHNlbGYsIGFyZ3VtZW50cylcbiAgICAgICAgICAgIDogZm4uY2FsbChzZWxmKTtcbiAgICAgICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpbiBJRSwgbmF0aXZlIG1ldGhvZHMgYXJlIG5vdCBmdW5jdGlvbnMgc28gdGhleSBjYW5ub3QgYmUgYm91bmQgKG5vdGU6IHRoZXkgZG9uJ3QgbmVlZCB0byBiZSlcbiAgICByZXR1cm4gZm47XG4gIH1cbn1cblxuXG5mdW5jdGlvbiB0b0pzb25SZXBsYWNlcihrZXksIHZhbHVlKSB7XG4gIHZhciB2YWwgPSB2YWx1ZTtcblxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJyQnICYmIGtleS5jaGFyQXQoMSkgPT09ICckJykge1xuICAgIHZhbCA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmIChpc1dpbmRvdyh2YWx1ZSkpIHtcbiAgICB2YWwgPSAnJFdJTkRPVyc7XG4gIH0gZWxzZSBpZiAodmFsdWUgJiYgIGRvY3VtZW50ID09PSB2YWx1ZSkge1xuICAgIHZhbCA9ICckRE9DVU1FTlQnO1xuICB9IGVsc2UgaWYgKGlzU2NvcGUodmFsdWUpKSB7XG4gICAgdmFsID0gJyRTQ09QRSc7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLnRvSnNvblxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNlcmlhbGl6ZXMgaW5wdXQgaW50byBhIEpTT04tZm9ybWF0dGVkIHN0cmluZy4gUHJvcGVydGllcyB3aXRoIGxlYWRpbmcgJCQgY2hhcmFjdGVycyB3aWxsIGJlXG4gKiBzdHJpcHBlZCBzaW5jZSBhbmd1bGFyIHVzZXMgdGhpcyBub3RhdGlvbiBpbnRlcm5hbGx5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fERhdGV8c3RyaW5nfG51bWJlcn0gb2JqIElucHV0IHRvIGJlIHNlcmlhbGl6ZWQgaW50byBKU09OLlxuICogQHBhcmFtIHtib29sZWFufG51bWJlcn0gW3ByZXR0eT0yXSBJZiBzZXQgdG8gdHJ1ZSwgdGhlIEpTT04gb3V0cHV0IHdpbGwgY29udGFpbiBuZXdsaW5lcyBhbmQgd2hpdGVzcGFjZS5cbiAqICAgIElmIHNldCB0byBhbiBpbnRlZ2VyLCB0aGUgSlNPTiBvdXRwdXQgd2lsbCBjb250YWluIHRoYXQgbWFueSBzcGFjZXMgcGVyIGluZGVudGF0aW9uLlxuICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IEpTT04taWZpZWQgc3RyaW5nIHJlcHJlc2VudGluZyBgb2JqYC5cbiAqL1xuZnVuY3Rpb24gdG9Kc29uKG9iaiwgcHJldHR5KSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHVuZGVmaW5lZDtcbiAgaWYgKCFpc051bWJlcihwcmV0dHkpKSB7XG4gICAgcHJldHR5ID0gcHJldHR5ID8gMiA6IG51bGw7XG4gIH1cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgdG9Kc29uUmVwbGFjZXIsIHByZXR0eSk7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZnJvbUpzb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXNlcmlhbGl6ZXMgYSBKU09OIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ganNvbiBKU09OIHN0cmluZyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm5zIHtPYmplY3R8QXJyYXl8c3RyaW5nfG51bWJlcn0gRGVzZXJpYWxpemVkIEpTT04gc3RyaW5nLlxuICovXG5mdW5jdGlvbiBmcm9tSnNvbihqc29uKSB7XG4gIHJldHVybiBpc1N0cmluZyhqc29uKVxuICAgICAgPyBKU09OLnBhcnNlKGpzb24pXG4gICAgICA6IGpzb247XG59XG5cblxuZnVuY3Rpb24gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZmFsbGJhY2spIHtcbiAgdmFyIHJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0ID0gRGF0ZS5wYXJzZSgnSmFuIDAxLCAxOTcwIDAwOjAwOjAwICcgKyB0aW1lem9uZSkgLyA2MDAwMDtcbiAgcmV0dXJuIGlzTmFOKHJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0KSA/IGZhbGxiYWNrIDogcmVxdWVzdGVkVGltZXpvbmVPZmZzZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkRGF0ZU1pbnV0ZXMoZGF0ZSwgbWludXRlcykge1xuICBkYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICBkYXRlLnNldE1pbnV0ZXMoZGF0ZS5nZXRNaW51dGVzKCkgKyBtaW51dGVzKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cblxuZnVuY3Rpb24gY29udmVydFRpbWV6b25lVG9Mb2NhbChkYXRlLCB0aW1lem9uZSwgcmV2ZXJzZSkge1xuICByZXZlcnNlID0gcmV2ZXJzZSA/IC0xIDogMTtcbiAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgcmV0dXJuIGFkZERhdGVNaW51dGVzKGRhdGUsIHJldmVyc2UgKiAodGltZXpvbmVPZmZzZXQgLSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkpKTtcbn1cblxuXG4vKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gc3RhcnRpbmdUYWcoZWxlbWVudCkge1xuICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpLmNsb25lKCk7XG4gIHRyeSB7XG4gICAgLy8gdHVybnMgb3V0IElFIGRvZXMgbm90IGxldCB5b3Ugc2V0IC5odG1sKCkgb24gZWxlbWVudHMgd2hpY2hcbiAgICAvLyBhcmUgbm90IGFsbG93ZWQgdG8gaGF2ZSBjaGlsZHJlbi4gU28gd2UganVzdCBpZ25vcmUgaXQuXG4gICAgZWxlbWVudC5lbXB0eSgpO1xuICB9IGNhdGNoIChlKSB7fVxuICB2YXIgZWxlbUh0bWwgPSBqcUxpdGUoJzxkaXY+JykuYXBwZW5kKGVsZW1lbnQpLmh0bWwoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZWxlbWVudFswXS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQgPyBsb3dlcmNhc2UoZWxlbUh0bWwpIDpcbiAgICAgICAgZWxlbUh0bWwuXG4gICAgICAgICAgbWF0Y2goL14oPFtePl0rPikvKVsxXS5cbiAgICAgICAgICByZXBsYWNlKC9ePChbXFx3XFwtXSspLywgZnVuY3Rpb24obWF0Y2gsIG5vZGVOYW1lKSB7IHJldHVybiAnPCcgKyBsb3dlcmNhc2Uobm9kZU5hbWUpOyB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBsb3dlcmNhc2UoZWxlbUh0bWwpO1xuICB9XG5cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogVHJpZXMgdG8gZGVjb2RlIHRoZSBVUkkgY29tcG9uZW50IHdpdGhvdXQgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gc3RyIHZhbHVlIHBvdGVudGlhbCBVUkkgY29tcG9uZW50IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBjYW4gYmUgZGVjb2RlZFxuICogd2l0aCB0aGUgZGVjb2RlVVJJQ29tcG9uZW50IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0cnlEZWNvZGVVUklDb21wb25lbnQodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElnbm9yZSBhbnkgaW52YWxpZCB1cmkgY29tcG9uZW50XG4gIH1cbn1cblxuXG4vKipcbiAqIFBhcnNlcyBhbiBlc2NhcGVkIHVybCBxdWVyeSBzdHJpbmcgaW50byBrZXktdmFsdWUgcGFpcnMuXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsYm9vbGVhbnxBcnJheT59XG4gKi9cbmZ1bmN0aW9uIHBhcnNlS2V5VmFsdWUoLyoqc3RyaW5nKi9rZXlWYWx1ZSkge1xuICB2YXIgb2JqID0ge307XG4gIGZvckVhY2goKGtleVZhbHVlIHx8IFwiXCIpLnNwbGl0KCcmJyksIGZ1bmN0aW9uKGtleVZhbHVlKSB7XG4gICAgdmFyIHNwbGl0UG9pbnQsIGtleSwgdmFsO1xuICAgIGlmIChrZXlWYWx1ZSkge1xuICAgICAga2V5ID0ga2V5VmFsdWUgPSBrZXlWYWx1ZS5yZXBsYWNlKC9cXCsvZywnJTIwJyk7XG4gICAgICBzcGxpdFBvaW50ID0ga2V5VmFsdWUuaW5kZXhPZignPScpO1xuICAgICAgaWYgKHNwbGl0UG9pbnQgIT09IC0xKSB7XG4gICAgICAgIGtleSA9IGtleVZhbHVlLnN1YnN0cmluZygwLCBzcGxpdFBvaW50KTtcbiAgICAgICAgdmFsID0ga2V5VmFsdWUuc3Vic3RyaW5nKHNwbGl0UG9pbnQgKyAxKTtcbiAgICAgIH1cbiAgICAgIGtleSA9IHRyeURlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuICAgICAgaWYgKGlzRGVmaW5lZChrZXkpKSB7XG4gICAgICAgIHZhbCA9IGlzRGVmaW5lZCh2YWwpID8gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KHZhbCkgOiB0cnVlO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba2V5XSkpIHtcbiAgICAgICAgICBvYmpba2V5XS5wdXNoKHZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqW2tleV0gPSBbb2JqW2tleV0sdmFsXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIHRvS2V5VmFsdWUob2JqKSB7XG4gIHZhciBwYXJ0cyA9IFtdO1xuICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24oYXJyYXlWYWx1ZSkge1xuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSwgdHJ1ZSkgK1xuICAgICAgICAgICAgICAgICAgIChhcnJheVZhbHVlID09PSB0cnVlID8gJycgOiAnPScgKyBlbmNvZGVVcmlRdWVyeShhcnJheVZhbHVlLCB0cnVlKSkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSwgdHJ1ZSkgK1xuICAgICAgICAgICAgICAgKHZhbHVlID09PSB0cnVlID8gJycgOiAnPScgKyBlbmNvZGVVcmlRdWVyeSh2YWx1ZSwgdHJ1ZSkpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcGFydHMubGVuZ3RoID8gcGFydHMuam9pbignJicpIDogJyc7XG59XG5cblxuLyoqXG4gKiBXZSBuZWVkIG91ciBjdXN0b20gbWV0aG9kIGJlY2F1c2UgZW5jb2RlVVJJQ29tcG9uZW50IGlzIHRvbyBhZ2dyZXNzaXZlIGFuZCBkb2Vzbid0IGZvbGxvd1xuICogaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMzk4Ni50eHQgd2l0aCByZWdhcmRzIHRvIHRoZSBjaGFyYWN0ZXIgc2V0IChwY2hhcikgYWxsb3dlZCBpbiBwYXRoXG4gKiBzZWdtZW50czpcbiAqICAgIHNlZ21lbnQgICAgICAgPSAqcGNoYXJcbiAqICAgIHBjaGFyICAgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gXCI6XCIgLyBcIkBcIlxuICogICAgcGN0LWVuY29kZWQgICA9IFwiJVwiIEhFWERJRyBIRVhESUdcbiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gXCItXCIgLyBcIi5cIiAvIFwiX1wiIC8gXCJ+XCJcbiAqICAgIHN1Yi1kZWxpbXMgICAgPSBcIiFcIiAvIFwiJFwiIC8gXCImXCIgLyBcIidcIiAvIFwiKFwiIC8gXCIpXCJcbiAqICAgICAgICAgICAgICAgICAgICAgLyBcIipcIiAvIFwiK1wiIC8gXCIsXCIgLyBcIjtcIiAvIFwiPVwiXG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVyaVNlZ21lbnQodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVcmlRdWVyeSh2YWwsIHRydWUpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyNi9naSwgJyYnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lM0QvZ2ksICc9JykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTJCL2dpLCAnKycpO1xufVxuXG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIGVuY29kaW5nICprZXkqIG9yICp2YWx1ZSogcGFydHMgb2YgcXVlcnkgY29tcG9uZW50LiBXZSBuZWVkIGEgY3VzdG9tXG4gKiBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGVuY29kZXMgc3R1ZmYgdGhhdCBkb2Vzbid0IGhhdmUgdG8gYmVcbiAqIGVuY29kZWQgcGVyIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODY6XG4gKiAgICBxdWVyeSAgICAgICA9ICooIHBjaGFyIC8gXCIvXCIgLyBcIj9cIiApXG4gKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvIFwiOlwiIC8gXCJAXCJcbiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gXCItXCIgLyBcIi5cIiAvIFwiX1wiIC8gXCJ+XCJcbiAqICAgIHBjdC1lbmNvZGVkICAgPSBcIiVcIiBIRVhESUcgSEVYRElHXG4gKiAgICBzdWItZGVsaW1zICAgID0gXCIhXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCInXCIgLyBcIihcIiAvIFwiKVwiXG4gKiAgICAgICAgICAgICAgICAgICAgIC8gXCIqXCIgLyBcIitcIiAvIFwiLFwiIC8gXCI7XCIgLyBcIj1cIlxuICovXG5mdW5jdGlvbiBlbmNvZGVVcmlRdWVyeSh2YWwsIHBjdEVuY29kZVNwYWNlcykge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTNCL2dpLCAnOycpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyMC9nLCAocGN0RW5jb2RlU3BhY2VzID8gJyUyMCcgOiAnKycpKTtcbn1cblxudmFyIG5nQXR0clByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmc6JywgJ3gtbmctJ107XG5cbmZ1bmN0aW9uIGdldE5nQXR0cmlidXRlKGVsZW1lbnQsIG5nQXR0cikge1xuICB2YXIgYXR0ciwgaSwgaWkgPSBuZ0F0dHJQcmVmaXhlcy5sZW5ndGg7XG4gIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XG4gICAgYXR0ciA9IG5nQXR0clByZWZpeGVzW2ldICsgbmdBdHRyO1xuICAgIGlmIChpc1N0cmluZyhhdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cikpKSB7XG4gICAgICByZXR1cm4gYXR0cjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdBcHBcbiAqIEBtb2R1bGUgbmdcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7YW5ndWxhci5Nb2R1bGV9IG5nQXBwIGFuIG9wdGlvbmFsIGFwcGxpY2F0aW9uXG4gKiAgIHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGV9IG5hbWUgdG8gbG9hZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nU3RyaWN0RGkgaWYgdGhpcyBhdHRyaWJ1dGUgaXMgcHJlc2VudCBvbiB0aGUgYXBwIGVsZW1lbnQsIHRoZSBpbmplY3RvciB3aWxsIGJlXG4gKiAgIGNyZWF0ZWQgaW4gXCJzdHJpY3QtZGlcIiBtb2RlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGFwcGxpY2F0aW9uIHdpbGwgZmFpbCB0byBpbnZva2UgZnVuY3Rpb25zIHdoaWNoXG4gKiAgIGRvIG5vdCB1c2UgZXhwbGljaXQgZnVuY3Rpb24gYW5ub3RhdGlvbiAoYW5kIGFyZSB0aHVzIHVuc3VpdGFibGUgZm9yIG1pbmlmaWNhdGlvbiksIGFzIGRlc2NyaWJlZFxuICogICBpbiB7QGxpbmsgZ3VpZGUvZGkgdGhlIERlcGVuZGVuY3kgSW5qZWN0aW9uIGd1aWRlfSwgYW5kIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mbyB3aWxsIGFzc2lzdCBpblxuICogICB0cmFja2luZyBkb3duIHRoZSByb290IG9mIHRoZXNlIGJ1Z3MuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVXNlIHRoaXMgZGlyZWN0aXZlIHRvICoqYXV0by1ib290c3RyYXAqKiBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24uIFRoZSBgbmdBcHBgIGRpcmVjdGl2ZVxuICogZGVzaWduYXRlcyB0aGUgKipyb290IGVsZW1lbnQqKiBvZiB0aGUgYXBwbGljYXRpb24gYW5kIGlzIHR5cGljYWxseSBwbGFjZWQgbmVhciB0aGUgcm9vdCBlbGVtZW50XG4gKiBvZiB0aGUgcGFnZSAtIGUuZy4gb24gdGhlIGA8Ym9keT5gIG9yIGA8aHRtbD5gIHRhZ3MuXG4gKlxuICogT25seSBvbmUgQW5ndWxhckpTIGFwcGxpY2F0aW9uIGNhbiBiZSBhdXRvLWJvb3RzdHJhcHBlZCBwZXIgSFRNTCBkb2N1bWVudC4gVGhlIGZpcnN0IGBuZ0FwcGBcbiAqIGZvdW5kIGluIHRoZSBkb2N1bWVudCB3aWxsIGJlIHVzZWQgdG8gZGVmaW5lIHRoZSByb290IGVsZW1lbnQgdG8gYXV0by1ib290c3RyYXAgYXMgYW5cbiAqIGFwcGxpY2F0aW9uLiBUbyBydW4gbXVsdGlwbGUgYXBwbGljYXRpb25zIGluIGFuIEhUTUwgZG9jdW1lbnQgeW91IG11c3QgbWFudWFsbHkgYm9vdHN0cmFwIHRoZW0gdXNpbmdcbiAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0gaW5zdGVhZC4gQW5ndWxhckpTIGFwcGxpY2F0aW9ucyBjYW5ub3QgYmUgbmVzdGVkIHdpdGhpbiBlYWNoIG90aGVyLlxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSBhbiAqKkFuZ3VsYXJKUyBtb2R1bGUqKiB0byBiZSB1c2VkIGFzIHRoZSByb290IG1vZHVsZSBmb3IgdGhlIGFwcGxpY2F0aW9uLiAgVGhpc1xuICogbW9kdWxlIHdpbGwgYmUgbG9hZGVkIGludG8gdGhlIHtAbGluayBhdXRvLiRpbmplY3Rvcn0gd2hlbiB0aGUgYXBwbGljYXRpb24gaXMgYm9vdHN0cmFwcGVkLiBJdFxuICogc2hvdWxkIGNvbnRhaW4gdGhlIGFwcGxpY2F0aW9uIGNvZGUgbmVlZGVkIG9yIGhhdmUgZGVwZW5kZW5jaWVzIG9uIG90aGVyIG1vZHVsZXMgdGhhdCB3aWxsXG4gKiBjb250YWluIHRoZSBjb2RlLiBTZWUge0BsaW5rIGFuZ3VsYXIubW9kdWxlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSBiZWxvdyBpZiB0aGUgYG5nQXBwYCBkaXJlY3RpdmUgd2VyZSBub3QgcGxhY2VkIG9uIHRoZSBgaHRtbGAgZWxlbWVudCB0aGVuIHRoZVxuICogZG9jdW1lbnQgd291bGQgbm90IGJlIGNvbXBpbGVkLCB0aGUgYEFwcENvbnRyb2xsZXJgIHdvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgYW5kIHRoZSBge3sgYStiIH19YFxuICogd291bGQgbm90IGJlIHJlc29sdmVkIHRvIGAzYC5cbiAqXG4gKiBgbmdBcHBgIGlzIHRoZSBlYXNpZXN0LCBhbmQgbW9zdCBjb21tb24gd2F5IHRvIGJvb3RzdHJhcCBhbiBhcHBsaWNhdGlvbi5cbiAqXG4gPGV4YW1wbGUgbW9kdWxlPVwibmdBcHBEZW1vXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgPGRpdiBuZy1jb250cm9sbGVyPVwibmdBcHBEZW1vQ29udHJvbGxlclwiPlxuICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG4gICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgIGFuZ3VsYXIubW9kdWxlKCduZ0FwcERlbW8nLCBbXSkuY29udHJvbGxlcignbmdBcHBEZW1vQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAkc2NvcGUuYSA9IDE7XG4gICAgICRzY29wZS5iID0gMjtcbiAgIH0pO1xuICAgPC9maWxlPlxuIDwvZXhhbXBsZT5cbiAqXG4gKiBVc2luZyBgbmdTdHJpY3REaWAsIHlvdSB3b3VsZCBzZWUgc29tZXRoaW5nIGxpa2UgdGhpczpcbiAqXG4gPGV4YW1wbGUgbmctYXBwLWluY2x1ZGVkPVwidHJ1ZVwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgIDxkaXYgbmctYXBwPVwibmdBcHBTdHJpY3REZW1vXCIgbmctc3RyaWN0LWRpPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdvb2RDb250cm9sbGVyMVwiPlxuICAgICAgICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG5cbiAgICAgICAgICAgPHA+VGhpcyByZW5kZXJzIGJlY2F1c2UgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgZmFpbCB0b1xuICAgICAgICAgICAgICBpbnN0YW50aWF0ZSwgYnkgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBzdHlsZSAoc2VlXG4gICAgICAgICAgICAgIHNjcmlwdC5qcyBmb3IgZGV0YWlscylcbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuXG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiR29vZENvbnRyb2xsZXIyXCI+XG4gICAgICAgICAgIE5hbWU6IDxpbnB1dCBuZy1tb2RlbD1cIm5hbWVcIj48YnIgLz5cbiAgICAgICAgICAgSGVsbG8sIHt7bmFtZX19IVxuXG4gICAgICAgICAgIDxwPlRoaXMgcmVuZGVycyBiZWNhdXNlIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGZhaWwgdG9cbiAgICAgICAgICAgICAgaW5zdGFudGlhdGUsIGJ5IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gc3R5bGVcbiAgICAgICAgICAgICAgKHNlZSBzY3JpcHQuanMgZm9yIGRldGFpbHMpXG4gICAgICAgICAgIDwvcD5cbiAgICAgICA8L2Rpdj5cblxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkJhZENvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fVxuXG4gICAgICAgICAgIDxwPlRoZSBjb250cm9sbGVyIGNvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQsIGR1ZSB0byByZWx5aW5nXG4gICAgICAgICAgICAgIG9uIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9ucyAod2hpY2ggYXJlIGRpc2FibGVkIGluXG4gICAgICAgICAgICAgIHN0cmljdCBtb2RlKS4gQXMgc3VjaCwgdGhlIGNvbnRlbnQgb2YgdGhpcyBzZWN0aW9uIGlzIG5vdFxuICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWQsIGFuZCB0aGVyZSBzaG91bGQgYmUgYW4gZXJyb3IgaW4geW91ciB3ZWIgY29uc29sZS5cbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuICAgPC9kaXY+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICBhbmd1bGFyLm1vZHVsZSgnbmdBcHBTdHJpY3REZW1vJywgW10pXG4gICAgIC8vIEJhZENvbnRyb2xsZXIgd2lsbCBmYWlsIHRvIGluc3RhbnRpYXRlLCBkdWUgdG8gcmVseWluZyBvbiBhdXRvbWF0aWMgZnVuY3Rpb24gYW5ub3RhdGlvbixcbiAgICAgLy8gcmF0aGVyIHRoYW4gYW4gZXhwbGljaXQgYW5ub3RhdGlvblxuICAgICAuY29udHJvbGxlcignQmFkQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICRzY29wZS5hID0gMTtcbiAgICAgICAkc2NvcGUuYiA9IDI7XG4gICAgIH0pXG4gICAgIC8vIFVubGlrZSBCYWRDb250cm9sbGVyLCBHb29kQ29udHJvbGxlcjEgYW5kIEdvb2RDb250cm9sbGVyMiB3aWxsIG5vdCBmYWlsIHRvIGJlIGluc3RhbnRpYXRlZCxcbiAgICAgLy8gZHVlIHRvIHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb25zIHVzaW5nIHRoZSBhcnJheSBzdHlsZSBhbmQgJGluamVjdCBwcm9wZXJ0eSwgcmVzcGVjdGl2ZWx5LlxuICAgICAuY29udHJvbGxlcignR29vZENvbnRyb2xsZXIxJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAkc2NvcGUuYSA9IDE7XG4gICAgICAgJHNjb3BlLmIgPSAyO1xuICAgICB9XSlcbiAgICAgLmNvbnRyb2xsZXIoJ0dvb2RDb250cm9sbGVyMicsIEdvb2RDb250cm9sbGVyMik7XG4gICAgIGZ1bmN0aW9uIEdvb2RDb250cm9sbGVyMigkc2NvcGUpIHtcbiAgICAgICAkc2NvcGUubmFtZSA9IFwiV29ybGRcIjtcbiAgICAgfVxuICAgICBHb29kQ29udHJvbGxlcjIuJGluamVjdCA9IFsnJHNjb3BlJ107XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICBkaXZbbmctY29udHJvbGxlcl0ge1xuICAgICAgIG1hcmdpbi1ib3R0b206IDFlbTtcbiAgICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgYm9yZGVyOiAxcHggc29saWQ7XG4gICAgICAgcGFkZGluZzogLjVlbTtcbiAgIH1cbiAgIGRpdltuZy1jb250cm9sbGVyXj1Hb29kXSB7XG4gICAgICAgYm9yZGVyLWNvbG9yOiAjZDZlOWM2O1xuICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZmYwZDg7XG4gICAgICAgY29sb3I6ICMzYzc2M2Q7XG4gICB9XG4gICBkaXZbbmctY29udHJvbGxlcl49QmFkXSB7XG4gICAgICAgYm9yZGVyLWNvbG9yOiAjZWJjY2QxO1xuICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmRlZGU7XG4gICAgICAgY29sb3I6ICNhOTQ0NDI7XG4gICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgIH1cbiAgIDwvZmlsZT5cbiA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uIGFuZ3VsYXJJbml0KGVsZW1lbnQsIGJvb3RzdHJhcCkge1xuICB2YXIgYXBwRWxlbWVudCxcbiAgICAgIG1vZHVsZSxcbiAgICAgIGNvbmZpZyA9IHt9O1xuXG4gIC8vIFRoZSBlbGVtZW50IGBlbGVtZW50YCBoYXMgcHJpb3JpdHkgb3ZlciBhbnkgb3RoZXIgZWxlbWVudFxuICBmb3JFYWNoKG5nQXR0clByZWZpeGVzLCBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgbmFtZSA9IHByZWZpeCArICdhcHAnO1xuXG4gICAgaWYgKCFhcHBFbGVtZW50ICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICBhcHBFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIG1vZHVsZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgfSk7XG4gIGZvckVhY2gobmdBdHRyUHJlZml4ZXMsIGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIHZhciBuYW1lID0gcHJlZml4ICsgJ2FwcCc7XG4gICAgdmFyIGNhbmRpZGF0ZTtcblxuICAgIGlmICghYXBwRWxlbWVudCAmJiAoY2FuZGlkYXRlID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbJyArIG5hbWUucmVwbGFjZSgnOicsICdcXFxcOicpICsgJ10nKSkpIHtcbiAgICAgIGFwcEVsZW1lbnQgPSBjYW5kaWRhdGU7XG4gICAgICBtb2R1bGUgPSBjYW5kaWRhdGUuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgfSk7XG4gIGlmIChhcHBFbGVtZW50KSB7XG4gICAgY29uZmlnLnN0cmljdERpID0gZ2V0TmdBdHRyaWJ1dGUoYXBwRWxlbWVudCwgXCJzdHJpY3QtZGlcIikgIT09IG51bGw7XG4gICAgYm9vdHN0cmFwKGFwcEVsZW1lbnQsIG1vZHVsZSA/IFttb2R1bGVdIDogW10sIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuYm9vdHN0cmFwXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIG1hbnVhbGx5IHN0YXJ0IHVwIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKlxuICogU2VlOiB7QGxpbmsgZ3VpZGUvYm9vdHN0cmFwIEJvb3RzdHJhcH1cbiAqXG4gKiBOb3RlIHRoYXQgUHJvdHJhY3RvciBiYXNlZCBlbmQtdG8tZW5kIHRlc3RzIGNhbm5vdCB1c2UgdGhpcyBmdW5jdGlvbiB0byBib290c3RyYXAgbWFudWFsbHkuXG4gKiBUaGV5IG11c3QgdXNlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9LlxuICpcbiAqIEFuZ3VsYXIgd2lsbCBkZXRlY3QgaWYgaXQgaGFzIGJlZW4gbG9hZGVkIGludG8gdGhlIGJyb3dzZXIgbW9yZSB0aGFuIG9uY2UgYW5kIG9ubHkgYWxsb3cgdGhlXG4gKiBmaXJzdCBsb2FkZWQgc2NyaXB0IHRvIGJlIGJvb3RzdHJhcHBlZCBhbmQgd2lsbCByZXBvcnQgYSB3YXJuaW5nIHRvIHRoZSBicm93c2VyIGNvbnNvbGUgZm9yXG4gKiBlYWNoIG9mIHRoZSBzdWJzZXF1ZW50IHNjcmlwdHMuIFRoaXMgcHJldmVudHMgc3RyYW5nZSByZXN1bHRzIGluIGFwcGxpY2F0aW9ucywgd2hlcmUgb3RoZXJ3aXNlXG4gKiBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgQW5ndWxhciB0cnkgdG8gd29yayBvbiB0aGUgRE9NLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhZG9jdHlwZSBodG1sPlxuICogPGh0bWw+XG4gKiA8Ym9keT5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIldlbGNvbWVDb250cm9sbGVyXCI+XG4gKiAgIHt7Z3JlZXRpbmd9fVxuICogPC9kaXY+XG4gKlxuICogPHNjcmlwdCBzcmM9XCJhbmd1bGFyLmpzXCI+PC9zY3JpcHQ+XG4gKiA8c2NyaXB0PlxuICogICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2RlbW8nLCBbXSlcbiAqICAgLmNvbnRyb2xsZXIoJ1dlbGNvbWVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAkc2NvcGUuZ3JlZXRpbmcgPSAnV2VsY29tZSEnO1xuICogICB9KTtcbiAqICAgYW5ndWxhci5ib290c3RyYXAoZG9jdW1lbnQsIFsnZGVtbyddKTtcbiAqIDwvc2NyaXB0PlxuICogPC9ib2R5PlxuICogPC9odG1sPlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xGdW5jdGlvbnxBcnJheT49fSBtb2R1bGVzIGFuIGFycmF5IG9mIG1vZHVsZXMgdG8gbG9hZCBpbnRvIHRoZSBhcHBsaWNhdGlvbi5cbiAqICAgICBFYWNoIGl0ZW0gaW4gdGhlIGFycmF5IHNob3VsZCBiZSB0aGUgbmFtZSBvZiBhIHByZWRlZmluZWQgbW9kdWxlIG9yIGEgKERJIGFubm90YXRlZClcbiAqICAgICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCBieSB0aGUgaW5qZWN0b3IgYXMgYSBgY29uZmlnYCBibG9jay5cbiAqICAgICBTZWU6IHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGVzfVxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgYW4gb2JqZWN0IGZvciBkZWZpbmluZyBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBhcHBsaWNhdGlvbi4gVGhlXG4gKiAgICAgZm9sbG93aW5nIGtleXMgYXJlIHN1cHBvcnRlZDpcbiAqXG4gKiAqIGBzdHJpY3REaWAgLSBkaXNhYmxlIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9uIGZvciB0aGUgYXBwbGljYXRpb24uIFRoaXMgaXMgbWVhbnQgdG9cbiAqICAgYXNzaXN0IGluIGZpbmRpbmcgYnVncyB3aGljaCBicmVhayBtaW5pZmllZCBjb2RlLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICpcbiAqIEByZXR1cm5zIHthdXRvLiRpbmplY3Rvcn0gUmV0dXJucyB0aGUgbmV3bHkgY3JlYXRlZCBpbmplY3RvciBmb3IgdGhpcyBhcHAuXG4gKi9cbmZ1bmN0aW9uIGJvb3RzdHJhcChlbGVtZW50LCBtb2R1bGVzLCBjb25maWcpIHtcbiAgaWYgKCFpc09iamVjdChjb25maWcpKSBjb25maWcgPSB7fTtcbiAgdmFyIGRlZmF1bHRDb25maWcgPSB7XG4gICAgc3RyaWN0RGk6IGZhbHNlXG4gIH07XG4gIGNvbmZpZyA9IGV4dGVuZChkZWZhdWx0Q29uZmlnLCBjb25maWcpO1xuICB2YXIgZG9Cb290c3RyYXAgPSBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnQuaW5qZWN0b3IoKSkge1xuICAgICAgdmFyIHRhZyA9IChlbGVtZW50WzBdID09PSBkb2N1bWVudCkgPyAnZG9jdW1lbnQnIDogc3RhcnRpbmdUYWcoZWxlbWVudCk7XG4gICAgICAvL0VuY29kZSBhbmdsZSBicmFja2V0cyB0byBwcmV2ZW50IGlucHV0IGZyb20gYmVpbmcgc2FuaXRpemVkIHRvIGVtcHR5IHN0cmluZyAjODY4M1xuICAgICAgdGhyb3cgbmdNaW5FcnIoXG4gICAgICAgICAgJ2J0c3RycGQnLFxuICAgICAgICAgIFwiQXBwIEFscmVhZHkgQm9vdHN0cmFwcGVkIHdpdGggdGhpcyBFbGVtZW50ICd7MH0nXCIsXG4gICAgICAgICAgdGFnLnJlcGxhY2UoLzwvLCcmbHQ7JykucmVwbGFjZSgvPi8sJyZndDsnKSk7XG4gICAgfVxuXG4gICAgbW9kdWxlcyA9IG1vZHVsZXMgfHwgW107XG4gICAgbW9kdWxlcy51bnNoaWZ0KFsnJHByb3ZpZGUnLCBmdW5jdGlvbigkcHJvdmlkZSkge1xuICAgICAgJHByb3ZpZGUudmFsdWUoJyRyb290RWxlbWVudCcsIGVsZW1lbnQpO1xuICAgIH1dKTtcblxuICAgIGlmIChjb25maWcuZGVidWdJbmZvRW5hYmxlZCkge1xuICAgICAgLy8gUHVzaGluZyBzbyB0aGF0IHRoaXMgb3ZlcnJpZGVzIGBkZWJ1Z0luZm9FbmFibGVkYCBzZXR0aW5nIGRlZmluZWQgaW4gdXNlcidzIGBtb2R1bGVzYC5cbiAgICAgIG1vZHVsZXMucHVzaChbJyRjb21waWxlUHJvdmlkZXInLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgICAgICRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZCh0cnVlKTtcbiAgICAgIH1dKTtcbiAgICB9XG5cbiAgICBtb2R1bGVzLnVuc2hpZnQoJ25nJyk7XG4gICAgdmFyIGluamVjdG9yID0gY3JlYXRlSW5qZWN0b3IobW9kdWxlcywgY29uZmlnLnN0cmljdERpKTtcbiAgICBpbmplY3Rvci5pbnZva2UoWyckcm9vdFNjb3BlJywgJyRyb290RWxlbWVudCcsICckY29tcGlsZScsICckaW5qZWN0b3InLFxuICAgICAgIGZ1bmN0aW9uIGJvb3RzdHJhcEFwcGx5KHNjb3BlLCBlbGVtZW50LCBjb21waWxlLCBpbmplY3Rvcikge1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudC5kYXRhKCckaW5qZWN0b3InLCBpbmplY3Rvcik7XG4gICAgICAgICAgY29tcGlsZShlbGVtZW50KShzY29wZSk7XG4gICAgICAgIH0pO1xuICAgICAgfV1cbiAgICApO1xuICAgIHJldHVybiBpbmplY3RvcjtcbiAgfTtcblxuICB2YXIgTkdfRU5BQkxFX0RFQlVHX0lORk8gPSAvXk5HX0VOQUJMRV9ERUJVR19JTkZPIS87XG4gIHZhciBOR19ERUZFUl9CT09UU1RSQVAgPSAvXk5HX0RFRkVSX0JPT1RTVFJBUCEvO1xuXG4gIGlmICh3aW5kb3cgJiYgTkdfRU5BQkxFX0RFQlVHX0lORk8udGVzdCh3aW5kb3cubmFtZSkpIHtcbiAgICBjb25maWcuZGVidWdJbmZvRW5hYmxlZCA9IHRydWU7XG4gICAgd2luZG93Lm5hbWUgPSB3aW5kb3cubmFtZS5yZXBsYWNlKE5HX0VOQUJMRV9ERUJVR19JTkZPLCAnJyk7XG4gIH1cblxuICBpZiAod2luZG93ICYmICFOR19ERUZFUl9CT09UU1RSQVAudGVzdCh3aW5kb3cubmFtZSkpIHtcbiAgICByZXR1cm4gZG9Cb290c3RyYXAoKTtcbiAgfVxuXG4gIHdpbmRvdy5uYW1lID0gd2luZG93Lm5hbWUucmVwbGFjZShOR19ERUZFUl9CT09UU1RSQVAsICcnKTtcbiAgYW5ndWxhci5yZXN1bWVCb290c3RyYXAgPSBmdW5jdGlvbihleHRyYU1vZHVsZXMpIHtcbiAgICBmb3JFYWNoKGV4dHJhTW9kdWxlcywgZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBtb2R1bGVzLnB1c2gobW9kdWxlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZG9Cb290c3RyYXAoKTtcbiAgfTtcblxuICBpZiAoaXNGdW5jdGlvbihhbmd1bGFyLnJlc3VtZURlZmVycmVkQm9vdHN0cmFwKSkge1xuICAgIGFuZ3VsYXIucmVzdW1lRGVmZXJyZWRCb290c3RyYXAoKTtcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5yZWxvYWRXaXRoRGVidWdJbmZvXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIHJlbG9hZCB0aGUgY3VycmVudCBhcHBsaWNhdGlvbiB3aXRoIGRlYnVnIGluZm9ybWF0aW9uIHR1cm5lZCBvbi5cbiAqIFRoaXMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGEgY2FsbCB0byBgJGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKGZhbHNlKWAuXG4gKlxuICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RlYnVnSW5mb0VuYWJsZWR9IGZvciBtb3JlLlxuICovXG5mdW5jdGlvbiByZWxvYWRXaXRoRGVidWdJbmZvKCkge1xuICB3aW5kb3cubmFtZSA9ICdOR19FTkFCTEVfREVCVUdfSU5GTyEnICsgd2luZG93Lm5hbWU7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbn1cblxuLyoqXG4gKiBAbmFtZSBhbmd1bGFyLmdldFRlc3RhYmlsaXR5XG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgdGVzdGFiaWxpdHkgc2VydmljZSBmb3IgdGhlIGluc3RhbmNlIG9mIEFuZ3VsYXIgb24gdGhlIGdpdmVuXG4gKiBlbGVtZW50LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGdldFRlc3RhYmlsaXR5KHJvb3RFbGVtZW50KSB7XG4gIHZhciBpbmplY3RvciA9IGFuZ3VsYXIuZWxlbWVudChyb290RWxlbWVudCkuaW5qZWN0b3IoKTtcbiAgaWYgKCFpbmplY3Rvcikge1xuICAgIHRocm93IG5nTWluRXJyKCd0ZXN0JyxcbiAgICAgICdubyBpbmplY3RvciBmb3VuZCBmb3IgZWxlbWVudCBhcmd1bWVudCB0byBnZXRUZXN0YWJpbGl0eScpO1xuICB9XG4gIHJldHVybiBpbmplY3Rvci5nZXQoJyQkdGVzdGFiaWxpdHknKTtcbn1cblxudmFyIFNOQUtFX0NBU0VfUkVHRVhQID0gL1tBLVpdL2c7XG5mdW5jdGlvbiBzbmFrZV9jYXNlKG5hbWUsIHNlcGFyYXRvcikge1xuICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgJ18nO1xuICByZXR1cm4gbmFtZS5yZXBsYWNlKFNOQUtFX0NBU0VfUkVHRVhQLCBmdW5jdGlvbihsZXR0ZXIsIHBvcykge1xuICAgIHJldHVybiAocG9zID8gc2VwYXJhdG9yIDogJycpICsgbGV0dGVyLnRvTG93ZXJDYXNlKCk7XG4gIH0pO1xufVxuXG52YXIgYmluZEpRdWVyeUZpcmVkID0gZmFsc2U7XG52YXIgc2tpcERlc3Ryb3lPbk5leHRKUXVlcnlDbGVhbkRhdGE7XG5mdW5jdGlvbiBiaW5kSlF1ZXJ5KCkge1xuICB2YXIgb3JpZ2luYWxDbGVhbkRhdGE7XG5cbiAgaWYgKGJpbmRKUXVlcnlGaXJlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGJpbmQgdG8galF1ZXJ5IGlmIHByZXNlbnQ7XG4gIHZhciBqcU5hbWUgPSBqcSgpO1xuICBqUXVlcnkgPSBpc1VuZGVmaW5lZChqcU5hbWUpID8gd2luZG93LmpRdWVyeSA6ICAgLy8gdXNlIGpRdWVyeSAoaWYgcHJlc2VudClcbiAgICAgICAgICAgIWpxTmFtZSAgICAgICAgICAgICA/IHVuZGVmaW5lZCAgICAgOiAgIC8vIHVzZSBqcUxpdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd1tqcU5hbWVdOyAgIC8vIHVzZSBqUXVlcnkgc3BlY2lmaWVkIGJ5IGBuZ0pxYFxuXG4gIC8vIFVzZSBqUXVlcnkgaWYgaXQgZXhpc3RzIHdpdGggcHJvcGVyIGZ1bmN0aW9uYWxpdHksIG90aGVyd2lzZSBkZWZhdWx0IHRvIHVzLlxuICAvLyBBbmd1bGFyIDEuMisgcmVxdWlyZXMgalF1ZXJ5IDEuNysgZm9yIG9uKCkvb2ZmKCkgc3VwcG9ydC5cbiAgLy8gQW5ndWxhciAxLjMrIHRlY2huaWNhbGx5IHJlcXVpcmVzIGF0IGxlYXN0IGpRdWVyeSAyLjErIGJ1dCBpdCBtYXkgd29yayB3aXRoIG9sZGVyXG4gIC8vIHZlcnNpb25zLiBJdCB3aWxsIG5vdCB3b3JrIGZvciBzdXJlIHdpdGggalF1ZXJ5IDwxLjcsIHRob3VnaC5cbiAgaWYgKGpRdWVyeSAmJiBqUXVlcnkuZm4ub24pIHtcbiAgICBqcUxpdGUgPSBqUXVlcnk7XG4gICAgZXh0ZW5kKGpRdWVyeS5mbiwge1xuICAgICAgc2NvcGU6IEpRTGl0ZVByb3RvdHlwZS5zY29wZSxcbiAgICAgIGlzb2xhdGVTY29wZTogSlFMaXRlUHJvdG90eXBlLmlzb2xhdGVTY29wZSxcbiAgICAgIGNvbnRyb2xsZXI6IEpRTGl0ZVByb3RvdHlwZS5jb250cm9sbGVyLFxuICAgICAgaW5qZWN0b3I6IEpRTGl0ZVByb3RvdHlwZS5pbmplY3RvcixcbiAgICAgIGluaGVyaXRlZERhdGE6IEpRTGl0ZVByb3RvdHlwZS5pbmhlcml0ZWREYXRhXG4gICAgfSk7XG5cbiAgICAvLyBBbGwgbm9kZXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gdmlhIHZhcmlvdXMgalF1ZXJ5IEFQSXMgbGlrZSAucmVtb3ZlKClcbiAgICAvLyBhcmUgcGFzc2VkIHRocm91Z2ggalF1ZXJ5LmNsZWFuRGF0YS4gTW9ua2V5LXBhdGNoIHRoaXMgbWV0aG9kIHRvIGZpcmVcbiAgICAvLyB0aGUgJGRlc3Ryb3kgZXZlbnQgb24gYWxsIHJlbW92ZWQgbm9kZXMuXG4gICAgb3JpZ2luYWxDbGVhbkRhdGEgPSBqUXVlcnkuY2xlYW5EYXRhO1xuICAgIGpRdWVyeS5jbGVhbkRhdGEgPSBmdW5jdGlvbihlbGVtcykge1xuICAgICAgdmFyIGV2ZW50cztcbiAgICAgIGlmICghc2tpcERlc3Ryb3lPbk5leHRKUXVlcnlDbGVhbkRhdGEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGVsZW07IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKykge1xuICAgICAgICAgIGV2ZW50cyA9IGpRdWVyeS5fZGF0YShlbGVtLCBcImV2ZW50c1wiKTtcbiAgICAgICAgICBpZiAoZXZlbnRzICYmIGV2ZW50cy4kZGVzdHJveSkge1xuICAgICAgICAgICAgalF1ZXJ5KGVsZW0pLnRyaWdnZXJIYW5kbGVyKCckZGVzdHJveScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2tpcERlc3Ryb3lPbk5leHRKUXVlcnlDbGVhbkRhdGEgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9yaWdpbmFsQ2xlYW5EYXRhKGVsZW1zKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGpxTGl0ZSA9IEpRTGl0ZTtcbiAgfVxuXG4gIGFuZ3VsYXIuZWxlbWVudCA9IGpxTGl0ZTtcblxuICAvLyBQcmV2ZW50IGRvdWJsZS1wcm94eWluZy5cbiAgYmluZEpRdWVyeUZpcmVkID0gdHJ1ZTtcbn1cblxuLyoqXG4gKiB0aHJvdyBlcnJvciBpZiB0aGUgYXJndW1lbnQgaXMgZmFsc3kuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydEFyZyhhcmcsIG5hbWUsIHJlYXNvbikge1xuICBpZiAoIWFyZykge1xuICAgIHRocm93IG5nTWluRXJyKCdhcmVxJywgXCJBcmd1bWVudCAnezB9JyBpcyB7MX1cIiwgKG5hbWUgfHwgJz8nKSwgKHJlYXNvbiB8fCBcInJlcXVpcmVkXCIpKTtcbiAgfVxuICByZXR1cm4gYXJnO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRBcmdGbihhcmcsIG5hbWUsIGFjY2VwdEFycmF5QW5ub3RhdGlvbikge1xuICBpZiAoYWNjZXB0QXJyYXlBbm5vdGF0aW9uICYmIGlzQXJyYXkoYXJnKSkge1xuICAgICAgYXJnID0gYXJnW2FyZy5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIGFzc2VydEFyZyhpc0Z1bmN0aW9uKGFyZyksIG5hbWUsICdub3QgYSBmdW5jdGlvbiwgZ290ICcgK1xuICAgICAgKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyA/IGFyZy5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdPYmplY3QnIDogdHlwZW9mIGFyZykpO1xuICByZXR1cm4gYXJnO1xufVxuXG4vKipcbiAqIHRocm93IGVycm9yIGlmIHRoZSBuYW1lIGdpdmVuIGlzIGhhc093blByb3BlcnR5XG4gKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWUgICAgdGhlIG5hbWUgdG8gdGVzdFxuICogQHBhcmFtICB7U3RyaW5nfSBjb250ZXh0IHRoZSBjb250ZXh0IGluIHdoaWNoIHRoZSBuYW1lIGlzIHVzZWQsIHN1Y2ggYXMgbW9kdWxlIG9yIGRpcmVjdGl2ZVxuICovXG5mdW5jdGlvbiBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCBjb250ZXh0KSB7XG4gIGlmIChuYW1lID09PSAnaGFzT3duUHJvcGVydHknKSB7XG4gICAgdGhyb3cgbmdNaW5FcnIoJ2JhZG5hbWUnLCBcImhhc093blByb3BlcnR5IGlzIG5vdCBhIHZhbGlkIHswfSBuYW1lXCIsIGNvbnRleHQpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSB2YWx1ZSBhY2Nlc3NpYmxlIGZyb20gdGhlIG9iamVjdCBieSBwYXRoLiBBbnkgdW5kZWZpbmVkIHRyYXZlcnNhbHMgYXJlIGlnbm9yZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogc3RhcnRpbmcgb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aCBwYXRoIHRvIHRyYXZlcnNlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtiaW5kRm5Ub1Njb3BlPXRydWVdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB2YWx1ZSBhcyBhY2Nlc3NpYmxlIGJ5IHBhdGhcbiAqL1xuLy9UT0RPKG1pc2tvKTogdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZW1vdmVkXG5mdW5jdGlvbiBnZXR0ZXIob2JqLCBwYXRoLCBiaW5kRm5Ub1Njb3BlKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIG9iajtcbiAgdmFyIGtleXMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHZhciBrZXk7XG4gIHZhciBsYXN0SW5zdGFuY2UgPSBvYmo7XG4gIHZhciBsZW4gPSBrZXlzLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAob2JqKSB7XG4gICAgICBvYmogPSAobGFzdEluc3RhbmNlID0gb2JqKVtrZXldO1xuICAgIH1cbiAgfVxuICBpZiAoIWJpbmRGblRvU2NvcGUgJiYgaXNGdW5jdGlvbihvYmopKSB7XG4gICAgcmV0dXJuIGJpbmQobGFzdEluc3RhbmNlLCBvYmopO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBET00gc2libGluZ3MgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIGxhc3Qgbm9kZSBpbiB0aGUgZ2l2ZW4gYXJyYXkuXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBsaWtlIG9iamVjdFxuICogQHJldHVybnMge0FycmF5fSB0aGUgaW5wdXR0ZWQgb2JqZWN0IG9yIGEganFMaXRlIGNvbGxlY3Rpb24gY29udGFpbmluZyB0aGUgbm9kZXNcbiAqL1xuZnVuY3Rpb24gZ2V0QmxvY2tOb2Rlcyhub2Rlcykge1xuICAvLyBUT0RPKHBlcmYpOiB1cGRhdGUgYG5vZGVzYCBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IG9iamVjdD9cbiAgdmFyIG5vZGUgPSBub2Rlc1swXTtcbiAgdmFyIGVuZE5vZGUgPSBub2Rlc1tub2Rlcy5sZW5ndGggLSAxXTtcbiAgdmFyIGJsb2NrTm9kZXM7XG5cbiAgZm9yICh2YXIgaSA9IDE7IG5vZGUgIT09IGVuZE5vZGUgJiYgKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKTsgaSsrKSB7XG4gICAgaWYgKGJsb2NrTm9kZXMgfHwgbm9kZXNbaV0gIT09IG5vZGUpIHtcbiAgICAgIGlmICghYmxvY2tOb2Rlcykge1xuICAgICAgICBibG9ja05vZGVzID0ganFMaXRlKHNsaWNlLmNhbGwobm9kZXMsIDAsIGkpKTtcbiAgICAgIH1cbiAgICAgIGJsb2NrTm9kZXMucHVzaChub2RlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYmxvY2tOb2RlcyB8fCBub2Rlcztcbn1cblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGhvdXQgYSBwcm90b3R5cGUuIFRoaXMgb2JqZWN0IGlzIHVzZWZ1bCBmb3IgbG9va3VwIHdpdGhvdXQgaGF2aW5nIHRvXG4gKiBndWFyZCBhZ2FpbnN0IHByb3RvdHlwaWNhbGx5IGluaGVyaXRlZCBwcm9wZXJ0aWVzIHZpYSBoYXNPd25Qcm9wZXJ0eS5cbiAqXG4gKiBSZWxhdGVkIG1pY3JvLWJlbmNobWFya3M6XG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL29iamVjdC1jcmVhdGUyXG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL3Byb3RvLW1hcC1sb29rdXAvMlxuICogLSBodHRwOi8vanNwZXJmLmNvbS9mb3ItaW4tdnMtb2JqZWN0LWtleXMyXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxudmFyIE5PREVfVFlQRV9FTEVNRU5UID0gMTtcbnZhciBOT0RFX1RZUEVfQVRUUklCVVRFID0gMjtcbnZhciBOT0RFX1RZUEVfVEVYVCA9IDM7XG52YXIgTk9ERV9UWVBFX0NPTU1FTlQgPSA4O1xudmFyIE5PREVfVFlQRV9ET0NVTUVOVCA9IDk7XG52YXIgTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UID0gMTE7XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBJbnRlcmZhY2UgZm9yIGNvbmZpZ3VyaW5nIGFuZ3VsYXIge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9LlxuICovXG5cbmZ1bmN0aW9uIHNldHVwTW9kdWxlTG9hZGVyKHdpbmRvdykge1xuXG4gIHZhciAkaW5qZWN0b3JNaW5FcnIgPSBtaW5FcnIoJyRpbmplY3RvcicpO1xuICB2YXIgbmdNaW5FcnIgPSBtaW5FcnIoJ25nJyk7XG5cbiAgZnVuY3Rpb24gZW5zdXJlKG9iaiwgbmFtZSwgZmFjdG9yeSkge1xuICAgIHJldHVybiBvYmpbbmFtZV0gfHwgKG9ialtuYW1lXSA9IGZhY3RvcnkoKSk7XG4gIH1cblxuICB2YXIgYW5ndWxhciA9IGVuc3VyZSh3aW5kb3csICdhbmd1bGFyJywgT2JqZWN0KTtcblxuICAvLyBXZSBuZWVkIHRvIGV4cG9zZSBgYW5ndWxhci4kJG1pbkVycmAgdG8gbW9kdWxlcyBzdWNoIGFzIGBuZ1Jlc291cmNlYCB0aGF0IHJlZmVyZW5jZSBpdCBkdXJpbmcgYm9vdHN0cmFwXG4gIGFuZ3VsYXIuJCRtaW5FcnIgPSBhbmd1bGFyLiQkbWluRXJyIHx8IG1pbkVycjtcblxuICByZXR1cm4gZW5zdXJlKGFuZ3VsYXIsICdtb2R1bGUnLCBmdW5jdGlvbigpIHtcbiAgICAvKiogQHR5cGUge09iamVjdC48c3RyaW5nLCBhbmd1bGFyLk1vZHVsZT59ICovXG4gICAgdmFyIG1vZHVsZXMgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIGFuZ3VsYXIubW9kdWxlXG4gICAgICogQG1vZHVsZSBuZ1xuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogVGhlIGBhbmd1bGFyLm1vZHVsZWAgaXMgYSBnbG9iYWwgcGxhY2UgZm9yIGNyZWF0aW5nLCByZWdpc3RlcmluZyBhbmQgcmV0cmlldmluZyBBbmd1bGFyXG4gICAgICogbW9kdWxlcy5cbiAgICAgKiBBbGwgbW9kdWxlcyAoYW5ndWxhciBjb3JlIG9yIDNyZCBwYXJ0eSkgdGhhdCBzaG91bGQgYmUgYXZhaWxhYmxlIHRvIGFuIGFwcGxpY2F0aW9uIG11c3QgYmVcbiAgICAgKiByZWdpc3RlcmVkIHVzaW5nIHRoaXMgbWVjaGFuaXNtLlxuICAgICAqXG4gICAgICogUGFzc2luZyBvbmUgYXJndW1lbnQgcmV0cmlldmVzIGFuIGV4aXN0aW5nIHtAbGluayBhbmd1bGFyLk1vZHVsZX0sXG4gICAgICogd2hlcmVhcyBwYXNzaW5nIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQgY3JlYXRlcyBhIG5ldyB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9XG4gICAgICpcbiAgICAgKlxuICAgICAqICMgTW9kdWxlXG4gICAgICpcbiAgICAgKiBBIG1vZHVsZSBpcyBhIGNvbGxlY3Rpb24gb2Ygc2VydmljZXMsIGRpcmVjdGl2ZXMsIGNvbnRyb2xsZXJzLCBmaWx0ZXJzLCBhbmQgY29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbi5cbiAgICAgKiBgYW5ndWxhci5tb2R1bGVgIGlzIHVzZWQgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZVxuICAgICAqIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdteU1vZHVsZScsIFtdKTtcbiAgICAgKlxuICAgICAqIC8vIHJlZ2lzdGVyIGEgbmV3IHNlcnZpY2VcbiAgICAgKiBteU1vZHVsZS52YWx1ZSgnYXBwTmFtZScsICdNeUNvb2xBcHAnKTtcbiAgICAgKlxuICAgICAqIC8vIGNvbmZpZ3VyZSBleGlzdGluZyBzZXJ2aWNlcyBpbnNpZGUgaW5pdGlhbGl6YXRpb24gYmxvY2tzLlxuICAgICAqIG15TW9kdWxlLmNvbmZpZyhbJyRsb2NhdGlvblByb3ZpZGVyJywgZnVuY3Rpb24oJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICAgKiAgIC8vIENvbmZpZ3VyZSBleGlzdGluZyBwcm92aWRlcnNcbiAgICAgKiAgICRsb2NhdGlvblByb3ZpZGVyLmhhc2hQcmVmaXgoJyEnKTtcbiAgICAgKiB9XSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGVuIHlvdSBjYW4gY3JlYXRlIGFuIGluamVjdG9yIGFuZCBsb2FkIHlvdXIgbW9kdWxlcyBsaWtlIHRoaXM6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIHZhciBpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZycsICdteU1vZHVsZSddKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogSG93ZXZlciBpdCdzIG1vcmUgbGlrZWx5IHRoYXQgeW91J2xsIGp1c3QgdXNlXG4gICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0gb3JcbiAgICAgKiB7QGxpbmsgYW5ndWxhci5ib290c3RyYXB9IHRvIHNpbXBsaWZ5IHRoaXMgcHJvY2VzcyBmb3IgeW91LlxuICAgICAqXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBtb2R1bGUgdG8gY3JlYXRlIG9yIHJldHJpZXZlLlxuICAgICAqIEBwYXJhbSB7IUFycmF5LjxzdHJpbmc+PX0gcmVxdWlyZXMgSWYgc3BlY2lmaWVkIHRoZW4gbmV3IG1vZHVsZSBpcyBiZWluZyBjcmVhdGVkLiBJZlxuICAgICAqICAgICAgICB1bnNwZWNpZmllZCB0aGVuIHRoZSBtb2R1bGUgaXMgYmVpbmcgcmV0cmlldmVkIGZvciBmdXJ0aGVyIGNvbmZpZ3VyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNvbmZpZ0ZuIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gZm9yIHRoZSBtb2R1bGUuIFNhbWUgYXNcbiAgICAgKiAgICAgICAge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZyBNb2R1bGUjY29uZmlnKCl9LlxuICAgICAqIEByZXR1cm5zIHttb2R1bGV9IG5ldyBtb2R1bGUgd2l0aCB0aGUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfSBhcGkuXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1vZHVsZShuYW1lLCByZXF1aXJlcywgY29uZmlnRm4pIHtcbiAgICAgIHZhciBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSA9IGZ1bmN0aW9uKG5hbWUsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdoYXNPd25Qcm9wZXJ0eScpIHtcbiAgICAgICAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsICdoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZScsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnbW9kdWxlJyk7XG4gICAgICBpZiAocmVxdWlyZXMgJiYgbW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBtb2R1bGVzW25hbWVdID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbnN1cmUobW9kdWxlcywgbmFtZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghcmVxdWlyZXMpIHtcbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ25vbW9kJywgXCJNb2R1bGUgJ3swfScgaXMgbm90IGF2YWlsYWJsZSEgWW91IGVpdGhlciBtaXNzcGVsbGVkIFwiICtcbiAgICAgICAgICAgICBcInRoZSBtb2R1bGUgbmFtZSBvciBmb3Jnb3QgdG8gbG9hZCBpdC4gSWYgcmVnaXN0ZXJpbmcgYSBtb2R1bGUgZW5zdXJlIHRoYXQgeW91IFwiICtcbiAgICAgICAgICAgICBcInNwZWNpZnkgdGhlIGRlcGVuZGVuY2llcyBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlwiLCBuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxBcnJheS48Kj4+fSAqL1xuICAgICAgICB2YXIgaW52b2tlUXVldWUgPSBbXTtcblxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48RnVuY3Rpb24+fSAqL1xuICAgICAgICB2YXIgY29uZmlnQmxvY2tzID0gW107XG5cbiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEZ1bmN0aW9uPn0gKi9cbiAgICAgICAgdmFyIHJ1bkJsb2NrcyA9IFtdO1xuXG4gICAgICAgIHZhciBjb25maWcgPSBpbnZva2VMYXRlcignJGluamVjdG9yJywgJ2ludm9rZScsICdwdXNoJywgY29uZmlnQmxvY2tzKTtcblxuICAgICAgICAvKiogQHR5cGUge2FuZ3VsYXIuTW9kdWxlfSAqL1xuICAgICAgICB2YXIgbW9kdWxlSW5zdGFuY2UgPSB7XG4gICAgICAgICAgLy8gUHJpdmF0ZSBzdGF0ZVxuICAgICAgICAgIF9pbnZva2VRdWV1ZTogaW52b2tlUXVldWUsXG4gICAgICAgICAgX2NvbmZpZ0Jsb2NrczogY29uZmlnQmxvY2tzLFxuICAgICAgICAgIF9ydW5CbG9ja3M6IHJ1bkJsb2NrcyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3JlcXVpcmVzXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogSG9sZHMgdGhlIGxpc3Qgb2YgbW9kdWxlcyB3aGljaCB0aGUgaW5qZWN0b3Igd2lsbCBsb2FkIGJlZm9yZSB0aGUgY3VycmVudCBtb2R1bGUgaXNcbiAgICAgICAgICAgKiBsb2FkZWQuXG4gICAgICAgICAgICovXG4gICAgICAgICAgcmVxdWlyZXM6IHJlcXVpcmVzLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjbmFtZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIE5hbWUgb2YgdGhlIG1vZHVsZS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBuYW1lOiBuYW1lLFxuXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcHJvdmlkZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJUeXBlIENvbnN0cnVjdGlvbiBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZVxuICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciAkcHJvdmlkZS5wcm92aWRlcigpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBwcm92aWRlcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdwcm92aWRlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2ZhY3RvcnlcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJGdW5jdGlvbiBGdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5ICRwcm92aWRlLmZhY3RvcnkoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgZmFjdG9yeTogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdmYWN0b3J5JyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjc2VydmljZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBBIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnN0YW50aWF0ZWQuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBzZXJ2aWNlOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ3NlcnZpY2UnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSN2YWx1ZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBTZXJ2aWNlIGluc3RhbmNlIG9iamVjdC5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgJHByb3ZpZGUudmFsdWUoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgdmFsdWU6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICd2YWx1ZScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnN0YW50XG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGNvbnN0YW50IG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBDb25zdGFudCB2YWx1ZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBCZWNhdXNlIHRoZSBjb25zdGFudHMgYXJlIGZpeGVkLCB0aGV5IGdldCBhcHBsaWVkIGJlZm9yZSBvdGhlciBwcm92aWRlIG1ldGhvZHMuXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2NvbnN0YW50ICRwcm92aWRlLmNvbnN0YW50KCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0YW50OiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAnY29uc3RhbnQnLCAndW5zaGlmdCcpLFxuXG4gICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNkZWNvcmF0b3JcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIGRlY29yYXRlLlxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIHNlcnZpY2UgbmVlZHMgdG8gYmVcbiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbnRpYXRlZCBhbmQgc2hvdWxkIHJldHVybiB0aGUgZGVjb3JhdGVkIHNlcnZpY2UgaW5zdGFuY2UuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciAkcHJvdmlkZS5kZWNvcmF0b3IoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgZGVjb3JhdG9yOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ2RlY29yYXRvcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2FuaW1hdGlvblxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBhbmltYXRpb24gbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFuaW1hdGlvbkZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGFuXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiAqKk5PVEUqKjogYW5pbWF0aW9ucyB0YWtlIGVmZmVjdCBvbmx5IGlmIHRoZSAqKm5nQW5pbWF0ZSoqIG1vZHVsZSBpcyBsb2FkZWQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIERlZmluZXMgYW4gYW5pbWF0aW9uIGhvb2sgdGhhdCBjYW4gYmUgbGF0ZXIgdXNlZCB3aXRoXG4gICAgICAgICAgICoge0BsaW5rICRhbmltYXRlICRhbmltYXRlfSBzZXJ2aWNlIGFuZCBkaXJlY3RpdmVzIHRoYXQgdXNlIHRoaXMgc2VydmljZS5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIGBgYGpzXG4gICAgICAgICAgICogbW9kdWxlLmFuaW1hdGlvbignLmFuaW1hdGlvbi1uYW1lJywgZnVuY3Rpb24oJGluamVjdDEsICRpbmplY3QyKSB7XG4gICAgICAgICAgICogICByZXR1cm4ge1xuICAgICAgICAgICAqICAgICBldmVudE5hbWUgOiBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7XG4gICAgICAgICAgICogICAgICAgLy9jb2RlIHRvIHJ1biB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcbiAgICAgICAgICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24gY2FuY2VsbGF0aW9uRnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICogICAgICAgfVxuICAgICAgICAgICAqICAgICB9XG4gICAgICAgICAgICogICB9XG4gICAgICAgICAgICogfSlcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGFuaW1hdGVQcm92aWRlciNyZWdpc3RlciAkYW5pbWF0ZVByb3ZpZGVyLnJlZ2lzdGVyKCl9IGFuZFxuICAgICAgICAgICAqIHtAbGluayBuZ0FuaW1hdGUgbmdBbmltYXRlIG1vZHVsZX0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICAgICAgICovXG4gICAgICAgICAgYW5pbWF0aW9uOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRhbmltYXRlUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmaWx0ZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmlsdGVyIG5hbWUgLSB0aGlzIG11c3QgYmUgYSB2YWxpZCBhbmd1bGFyIGV4cHJlc3Npb24gaWRlbnRpZmllclxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbHRlckZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGZpbHRlci5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRmaWx0ZXJQcm92aWRlciNyZWdpc3RlciAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgICAgICAgICAqICoqTm90ZToqKiBGaWx0ZXIgbmFtZXMgbXVzdCBiZSB2YWxpZCBhbmd1bGFyIHtAbGluayBleHByZXNzaW9ufSBpZGVudGlmaWVycywgc3VjaCBhcyBgdXBwZXJjYXNlYCBvciBgb3JkZXJCeWAuXG4gICAgICAgICAgICogTmFtZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMsIHN1Y2ggYXMgaHlwaGVucyBhbmQgZG90cywgYXJlIG5vdCBhbGxvd2VkLiBJZiB5b3Ugd2lzaCB0byBuYW1lc3BhY2VcbiAgICAgICAgICAgKiB5b3VyIGZpbHRlcnMsIHRoZW4geW91IGNhbiB1c2UgY2FwaXRhbGl6YXRpb24gKGBteWFwcFN1YnNlY3Rpb25GaWx0ZXJ4YCkgb3IgdW5kZXJzY29yZXNcbiAgICAgICAgICAgKiAoYG15YXBwX3N1YnNlY3Rpb25fZmlsdGVyeGApLlxuICAgICAgICAgICAqIDwvZGl2PlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGZpbHRlcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckZmlsdGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb250cm9sbGVyXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBDb250cm9sbGVyIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgY29udHJvbGxlcnMgd2hlcmUgdGhlXG4gICAgICAgICAgICogICAga2V5cyBhcmUgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgY29uc3RydWN0b3JzLlxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyICRjb250cm9sbGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29udHJvbGxlcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckY29udHJvbGxlclByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZGlyZWN0aXZlXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBEaXJlY3RpdmUgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZVxuICAgICAgICAgICAqICAgIGtleXMgYXJlIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZhY3Rvcmllcy5cbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXJlY3RpdmVGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZlxuICAgICAgICAgICAqIGRpcmVjdGl2ZXMuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBkaXJlY3RpdmU6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGNvbXBpbGVQcm92aWRlcicsICdkaXJlY3RpdmUnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb25maWdcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uZmlnRm4gRXhlY3V0ZSB0aGlzIGZ1bmN0aW9uIG9uIG1vZHVsZSBsb2FkLiBVc2VmdWwgZm9yIHNlcnZpY2VcbiAgICAgICAgICAgKiAgICBjb25maWd1cmF0aW9uLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIG5lZWRzIHRvIGJlIHBlcmZvcm1lZCBvbiBtb2R1bGUgbG9hZGluZy5cbiAgICAgICAgICAgKiBGb3IgbW9yZSBhYm91dCBob3cgdG8gY29uZmlndXJlIHNlcnZpY2VzLCBzZWVcbiAgICAgICAgICAgKiB7QGxpbmsgcHJvdmlkZXJzI3Byb3ZpZGVyLXJlY2lwZSBQcm92aWRlciBSZWNpcGV9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3J1blxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbml0aWFsaXphdGlvbkZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBhZnRlciBpbmplY3RvciBjcmVhdGlvbi5cbiAgICAgICAgICAgKiAgICBVc2VmdWwgZm9yIGFwcGxpY2F0aW9uIGluaXRpYWxpemF0aW9uLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIHNob3VsZCBiZSBwZXJmb3JtZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgZG9uZVxuICAgICAgICAgICAqIGxvYWRpbmcgYWxsIG1vZHVsZXMuXG4gICAgICAgICAgICovXG4gICAgICAgICAgcnVuOiBmdW5jdGlvbihibG9jaykge1xuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjb25maWdGbikge1xuICAgICAgICAgIGNvbmZpZyhjb25maWdGbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm92aWRlclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nPX0gaW5zZXJ0TWV0aG9kXG4gICAgICAgICAqIEByZXR1cm5zIHthbmd1bGFyLk1vZHVsZX1cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGludm9rZUxhdGVyKHByb3ZpZGVyLCBtZXRob2QsIGluc2VydE1ldGhvZCwgcXVldWUpIHtcbiAgICAgICAgICBpZiAoIXF1ZXVlKSBxdWV1ZSA9IGludm9rZVF1ZXVlO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHF1ZXVlW2luc2VydE1ldGhvZCB8fCAncHVzaCddKFtwcm92aWRlciwgbWV0aG9kLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm92aWRlclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gICAgICAgICAqIEByZXR1cm5zIHthbmd1bGFyLk1vZHVsZX1cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZShwcm92aWRlciwgbWV0aG9kKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlY2lwZU5hbWUsIGZhY3RvcnlGdW5jdGlvbikge1xuICAgICAgICAgICAgaWYgKGZhY3RvcnlGdW5jdGlvbiAmJiBpc0Z1bmN0aW9uKGZhY3RvcnlGdW5jdGlvbikpIGZhY3RvcnlGdW5jdGlvbi4kJG1vZHVsZU5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgaW52b2tlUXVldWUucHVzaChbcHJvdmlkZXIsIG1ldGhvZCwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbn1cblxuLyogZ2xvYmFsOiB0b0RlYnVnU3RyaW5nOiB0cnVlICovXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZU9iamVjdChvYmopIHtcbiAgdmFyIHNlZW4gPSBbXTtcblxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBmdW5jdGlvbihrZXksIHZhbCkge1xuICAgIHZhbCA9IHRvSnNvblJlcGxhY2VyKGtleSwgdmFsKTtcbiAgICBpZiAoaXNPYmplY3QodmFsKSkge1xuXG4gICAgICBpZiAoc2Vlbi5pbmRleE9mKHZhbCkgPj0gMCkgcmV0dXJuICcuLi4nO1xuXG4gICAgICBzZWVuLnB1c2godmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHRvRGVidWdTdHJpbmcob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG9iai50b1N0cmluZygpLnJlcGxhY2UoLyBcXHtbXFxzXFxTXSokLywgJycpO1xuICB9IGVsc2UgaWYgKGlzVW5kZWZpbmVkKG9iaikpIHtcbiAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9iaiAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc2VyaWFsaXplT2JqZWN0KG9iaik7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyogZ2xvYmFsIGFuZ3VsYXJNb2R1bGU6IHRydWUsXG4gIHZlcnNpb246IHRydWUsXG5cbiAgJENvbXBpbGVQcm92aWRlcixcblxuICBodG1sQW5jaG9yRGlyZWN0aXZlLFxuICBpbnB1dERpcmVjdGl2ZSxcbiAgaW5wdXREaXJlY3RpdmUsXG4gIGZvcm1EaXJlY3RpdmUsXG4gIHNjcmlwdERpcmVjdGl2ZSxcbiAgc2VsZWN0RGlyZWN0aXZlLFxuICBzdHlsZURpcmVjdGl2ZSxcbiAgb3B0aW9uRGlyZWN0aXZlLFxuICBuZ0JpbmREaXJlY3RpdmUsXG4gIG5nQmluZEh0bWxEaXJlY3RpdmUsXG4gIG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlLFxuICBuZ0NsYXNzRGlyZWN0aXZlLFxuICBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSxcbiAgbmdDbGFzc09kZERpcmVjdGl2ZSxcbiAgbmdDbG9ha0RpcmVjdGl2ZSxcbiAgbmdDb250cm9sbGVyRGlyZWN0aXZlLFxuICBuZ0Zvcm1EaXJlY3RpdmUsXG4gIG5nSGlkZURpcmVjdGl2ZSxcbiAgbmdJZkRpcmVjdGl2ZSxcbiAgbmdJbmNsdWRlRGlyZWN0aXZlLFxuICBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZSxcbiAgbmdJbml0RGlyZWN0aXZlLFxuICBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlLFxuICBuZ1BsdXJhbGl6ZURpcmVjdGl2ZSxcbiAgbmdSZXBlYXREaXJlY3RpdmUsXG4gIG5nU2hvd0RpcmVjdGl2ZSxcbiAgbmdTdHlsZURpcmVjdGl2ZSxcbiAgbmdTd2l0Y2hEaXJlY3RpdmUsXG4gIG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSxcbiAgbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlLFxuICBuZ09wdGlvbnNEaXJlY3RpdmUsXG4gIG5nVHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgbmdNb2RlbERpcmVjdGl2ZSxcbiAgbmdMaXN0RGlyZWN0aXZlLFxuICBuZ0NoYW5nZURpcmVjdGl2ZSxcbiAgcGF0dGVybkRpcmVjdGl2ZSxcbiAgcGF0dGVybkRpcmVjdGl2ZSxcbiAgcmVxdWlyZWREaXJlY3RpdmUsXG4gIHJlcXVpcmVkRGlyZWN0aXZlLFxuICBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gIG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gIG5nVmFsdWVEaXJlY3RpdmUsXG4gIG5nTW9kZWxPcHRpb25zRGlyZWN0aXZlLFxuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyxcbiAgbmdFdmVudERpcmVjdGl2ZXMsXG5cbiAgJEFuY2hvclNjcm9sbFByb3ZpZGVyLFxuICAkQW5pbWF0ZVByb3ZpZGVyLFxuICAkQ29yZUFuaW1hdGVDc3NQcm92aWRlcixcbiAgJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIsXG4gICQkQ29yZUFuaW1hdGVSdW5uZXJQcm92aWRlcixcbiAgJEJyb3dzZXJQcm92aWRlcixcbiAgJENhY2hlRmFjdG9yeVByb3ZpZGVyLFxuICAkQ29udHJvbGxlclByb3ZpZGVyLFxuICAkRG9jdW1lbnRQcm92aWRlcixcbiAgJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcixcbiAgJEZpbHRlclByb3ZpZGVyLFxuICAkJEZvcmNlUmVmbG93UHJvdmlkZXIsXG4gICRJbnRlcnBvbGF0ZVByb3ZpZGVyLFxuICAkSW50ZXJ2YWxQcm92aWRlcixcbiAgJCRIYXNoTWFwUHJvdmlkZXIsXG4gICRIdHRwUHJvdmlkZXIsXG4gICRIdHRwUGFyYW1TZXJpYWxpemVyUHJvdmlkZXIsXG4gICRIdHRwUGFyYW1TZXJpYWxpemVySlFMaWtlUHJvdmlkZXIsXG4gICRIdHRwQmFja2VuZFByb3ZpZGVyLFxuICAkeGhyRmFjdG9yeVByb3ZpZGVyLFxuICAkTG9jYXRpb25Qcm92aWRlcixcbiAgJExvZ1Byb3ZpZGVyLFxuICAkUGFyc2VQcm92aWRlcixcbiAgJFJvb3RTY29wZVByb3ZpZGVyLFxuICAkUVByb3ZpZGVyLFxuICAkJFFQcm92aWRlcixcbiAgJCRTYW5pdGl6ZVVyaVByb3ZpZGVyLFxuICAkU2NlUHJvdmlkZXIsXG4gICRTY2VEZWxlZ2F0ZVByb3ZpZGVyLFxuICAkU25pZmZlclByb3ZpZGVyLFxuICAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyLFxuICAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIsXG4gICQkVGVzdGFiaWxpdHlQcm92aWRlcixcbiAgJFRpbWVvdXRQcm92aWRlcixcbiAgJCRSQUZQcm92aWRlcixcbiAgJFdpbmRvd1Byb3ZpZGVyLFxuICAkJGpxTGl0ZVByb3ZpZGVyLFxuICAkJENvb2tpZVJlYWRlclByb3ZpZGVyXG4qL1xuXG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgYW5ndWxhci52ZXJzaW9uXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IEFuZ3VsYXJKUyB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgb2JqZWN0IGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogLSBgZnVsbGAg4oCTIGB7c3RyaW5nfWAg4oCTIEZ1bGwgdmVyc2lvbiBzdHJpbmcsIHN1Y2ggYXMgXCIwLjkuMThcIi5cbiAqIC0gYG1ham9yYCDigJMgYHtudW1iZXJ9YCDigJMgTWFqb3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCIwXCIuXG4gKiAtIGBtaW5vcmAg4oCTIGB7bnVtYmVyfWAg4oCTIE1pbm9yIHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzIFwiOVwiLlxuICogLSBgZG90YCDigJMgYHtudW1iZXJ9YCDigJMgRG90IHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzIFwiMThcIi5cbiAqIC0gYGNvZGVOYW1lYCDigJMgYHtzdHJpbmd9YCDigJMgQ29kZSBuYW1lIG9mIHRoZSByZWxlYXNlLCBzdWNoIGFzIFwiamlnZ2xpbmctYXJtZmF0XCIuXG4gKi9cbnZhciB2ZXJzaW9uID0ge1xuICBmdWxsOiAnMS40LjgnLCAgICAvLyBhbGwgb2YgdGhlc2UgcGxhY2Vob2xkZXIgc3RyaW5ncyB3aWxsIGJlIHJlcGxhY2VkIGJ5IGdydW50J3NcbiAgbWFqb3I6IDEsICAgIC8vIHBhY2thZ2UgdGFza1xuICBtaW5vcjogNCxcbiAgZG90OiA4LFxuICBjb2RlTmFtZTogJ2ljZS1tYW5pcHVsYXRpb24nXG59O1xuXG5cbmZ1bmN0aW9uIHB1Ymxpc2hFeHRlcm5hbEFQSShhbmd1bGFyKSB7XG4gIGV4dGVuZChhbmd1bGFyLCB7XG4gICAgJ2Jvb3RzdHJhcCc6IGJvb3RzdHJhcCxcbiAgICAnY29weSc6IGNvcHksXG4gICAgJ2V4dGVuZCc6IGV4dGVuZCxcbiAgICAnbWVyZ2UnOiBtZXJnZSxcbiAgICAnZXF1YWxzJzogZXF1YWxzLFxuICAgICdlbGVtZW50JzoganFMaXRlLFxuICAgICdmb3JFYWNoJzogZm9yRWFjaCxcbiAgICAnaW5qZWN0b3InOiBjcmVhdGVJbmplY3RvcixcbiAgICAnbm9vcCc6IG5vb3AsXG4gICAgJ2JpbmQnOiBiaW5kLFxuICAgICd0b0pzb24nOiB0b0pzb24sXG4gICAgJ2Zyb21Kc29uJzogZnJvbUpzb24sXG4gICAgJ2lkZW50aXR5JzogaWRlbnRpdHksXG4gICAgJ2lzVW5kZWZpbmVkJzogaXNVbmRlZmluZWQsXG4gICAgJ2lzRGVmaW5lZCc6IGlzRGVmaW5lZCxcbiAgICAnaXNTdHJpbmcnOiBpc1N0cmluZyxcbiAgICAnaXNGdW5jdGlvbic6IGlzRnVuY3Rpb24sXG4gICAgJ2lzT2JqZWN0JzogaXNPYmplY3QsXG4gICAgJ2lzTnVtYmVyJzogaXNOdW1iZXIsXG4gICAgJ2lzRWxlbWVudCc6IGlzRWxlbWVudCxcbiAgICAnaXNBcnJheSc6IGlzQXJyYXksXG4gICAgJ3ZlcnNpb24nOiB2ZXJzaW9uLFxuICAgICdpc0RhdGUnOiBpc0RhdGUsXG4gICAgJ2xvd2VyY2FzZSc6IGxvd2VyY2FzZSxcbiAgICAndXBwZXJjYXNlJzogdXBwZXJjYXNlLFxuICAgICdjYWxsYmFja3MnOiB7Y291bnRlcjogMH0sXG4gICAgJ2dldFRlc3RhYmlsaXR5JzogZ2V0VGVzdGFiaWxpdHksXG4gICAgJyQkbWluRXJyJzogbWluRXJyLFxuICAgICckJGNzcCc6IGNzcCxcbiAgICAncmVsb2FkV2l0aERlYnVnSW5mbyc6IHJlbG9hZFdpdGhEZWJ1Z0luZm9cbiAgfSk7XG5cbiAgYW5ndWxhck1vZHVsZSA9IHNldHVwTW9kdWxlTG9hZGVyKHdpbmRvdyk7XG5cbiAgYW5ndWxhck1vZHVsZSgnbmcnLCBbJ25nTG9jYWxlJ10sIFsnJHByb3ZpZGUnLFxuICAgIGZ1bmN0aW9uIG5nTW9kdWxlKCRwcm92aWRlKSB7XG4gICAgICAvLyAkJHNhbml0aXplVXJpUHJvdmlkZXIgbmVlZHMgdG8gYmUgYmVmb3JlICRjb21waWxlUHJvdmlkZXIgYXMgaXQgaXMgdXNlZCBieSBpdC5cbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHtcbiAgICAgICAgJCRzYW5pdGl6ZVVyaTogJCRTYW5pdGl6ZVVyaVByb3ZpZGVyXG4gICAgICB9KTtcbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKCckY29tcGlsZScsICRDb21waWxlUHJvdmlkZXIpLlxuICAgICAgICBkaXJlY3RpdmUoe1xuICAgICAgICAgICAgYTogaHRtbEFuY2hvckRpcmVjdGl2ZSxcbiAgICAgICAgICAgIGlucHV0OiBpbnB1dERpcmVjdGl2ZSxcbiAgICAgICAgICAgIHRleHRhcmVhOiBpbnB1dERpcmVjdGl2ZSxcbiAgICAgICAgICAgIGZvcm06IGZvcm1EaXJlY3RpdmUsXG4gICAgICAgICAgICBzY3JpcHQ6IHNjcmlwdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIHNlbGVjdDogc2VsZWN0RGlyZWN0aXZlLFxuICAgICAgICAgICAgc3R5bGU6IHN0eWxlRGlyZWN0aXZlLFxuICAgICAgICAgICAgb3B0aW9uOiBvcHRpb25EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0JpbmQ6IG5nQmluZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZEh0bWw6IG5nQmluZEh0bWxEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0JpbmRUZW1wbGF0ZTogbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzOiBuZ0NsYXNzRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbGFzc0V2ZW46IG5nQ2xhc3NFdmVuRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbGFzc09kZDogbmdDbGFzc09kZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2xvYWs6IG5nQ2xvYWtEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NvbnRyb2xsZXI6IG5nQ29udHJvbGxlckRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nRm9ybTogbmdGb3JtRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdIaWRlOiBuZ0hpZGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0lmOiBuZ0lmRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0luaXQ6IG5nSW5pdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTm9uQmluZGFibGU6IG5nTm9uQmluZGFibGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1BsdXJhbGl6ZTogbmdQbHVyYWxpemVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1JlcGVhdDogbmdSZXBlYXREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1Nob3c6IG5nU2hvd0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3R5bGU6IG5nU3R5bGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1N3aXRjaDogbmdTd2l0Y2hEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1N3aXRjaFdoZW46IG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoRGVmYXVsdDogbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdPcHRpb25zOiBuZ09wdGlvbnNEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1RyYW5zY2x1ZGU6IG5nVHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTW9kZWw6IG5nTW9kZWxEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0xpc3Q6IG5nTGlzdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2hhbmdlOiBuZ0NoYW5nZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIHBhdHRlcm46IHBhdHRlcm5EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1BhdHRlcm46IHBhdHRlcm5EaXJlY3RpdmUsXG4gICAgICAgICAgICByZXF1aXJlZDogcmVxdWlyZWREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1JlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG1pbmxlbmd0aDogbWlubGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNaW5sZW5ndGg6IG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG1heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNYXhsZW5ndGg6IG1heGxlbmd0aERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nVmFsdWU6IG5nVmFsdWVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01vZGVsT3B0aW9uczogbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmVcbiAgICAgICAgfSkuXG4gICAgICAgIGRpcmVjdGl2ZSh7XG4gICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZVxuICAgICAgICB9KS5cbiAgICAgICAgZGlyZWN0aXZlKG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzKS5cbiAgICAgICAgZGlyZWN0aXZlKG5nRXZlbnREaXJlY3RpdmVzKTtcbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHtcbiAgICAgICAgJGFuY2hvclNjcm9sbDogJEFuY2hvclNjcm9sbFByb3ZpZGVyLFxuICAgICAgICAkYW5pbWF0ZTogJEFuaW1hdGVQcm92aWRlcixcbiAgICAgICAgJGFuaW1hdGVDc3M6ICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyLFxuICAgICAgICAkJGFuaW1hdGVRdWV1ZTogJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIsXG4gICAgICAgICQkQW5pbWF0ZVJ1bm5lcjogJCRDb3JlQW5pbWF0ZVJ1bm5lclByb3ZpZGVyLFxuICAgICAgICAkYnJvd3NlcjogJEJyb3dzZXJQcm92aWRlcixcbiAgICAgICAgJGNhY2hlRmFjdG9yeTogJENhY2hlRmFjdG9yeVByb3ZpZGVyLFxuICAgICAgICAkY29udHJvbGxlcjogJENvbnRyb2xsZXJQcm92aWRlcixcbiAgICAgICAgJGRvY3VtZW50OiAkRG9jdW1lbnRQcm92aWRlcixcbiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXI6ICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIsXG4gICAgICAgICRmaWx0ZXI6ICRGaWx0ZXJQcm92aWRlcixcbiAgICAgICAgJCRmb3JjZVJlZmxvdzogJCRGb3JjZVJlZmxvd1Byb3ZpZGVyLFxuICAgICAgICAkaW50ZXJwb2xhdGU6ICRJbnRlcnBvbGF0ZVByb3ZpZGVyLFxuICAgICAgICAkaW50ZXJ2YWw6ICRJbnRlcnZhbFByb3ZpZGVyLFxuICAgICAgICAkaHR0cDogJEh0dHBQcm92aWRlcixcbiAgICAgICAgJGh0dHBQYXJhbVNlcmlhbGl6ZXI6ICRIdHRwUGFyYW1TZXJpYWxpemVyUHJvdmlkZXIsXG4gICAgICAgICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlOiAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyLFxuICAgICAgICAkaHR0cEJhY2tlbmQ6ICRIdHRwQmFja2VuZFByb3ZpZGVyLFxuICAgICAgICAkeGhyRmFjdG9yeTogJHhockZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJGxvY2F0aW9uOiAkTG9jYXRpb25Qcm92aWRlcixcbiAgICAgICAgJGxvZzogJExvZ1Byb3ZpZGVyLFxuICAgICAgICAkcGFyc2U6ICRQYXJzZVByb3ZpZGVyLFxuICAgICAgICAkcm9vdFNjb3BlOiAkUm9vdFNjb3BlUHJvdmlkZXIsXG4gICAgICAgICRxOiAkUVByb3ZpZGVyLFxuICAgICAgICAkJHE6ICQkUVByb3ZpZGVyLFxuICAgICAgICAkc2NlOiAkU2NlUHJvdmlkZXIsXG4gICAgICAgICRzY2VEZWxlZ2F0ZTogJFNjZURlbGVnYXRlUHJvdmlkZXIsXG4gICAgICAgICRzbmlmZmVyOiAkU25pZmZlclByb3ZpZGVyLFxuICAgICAgICAkdGVtcGxhdGVDYWNoZTogJFRlbXBsYXRlQ2FjaGVQcm92aWRlcixcbiAgICAgICAgJHRlbXBsYXRlUmVxdWVzdDogJFRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyLFxuICAgICAgICAkJHRlc3RhYmlsaXR5OiAkJFRlc3RhYmlsaXR5UHJvdmlkZXIsXG4gICAgICAgICR0aW1lb3V0OiAkVGltZW91dFByb3ZpZGVyLFxuICAgICAgICAkd2luZG93OiAkV2luZG93UHJvdmlkZXIsXG4gICAgICAgICQkckFGOiAkJFJBRlByb3ZpZGVyLFxuICAgICAgICAkJGpxTGl0ZTogJCRqcUxpdGVQcm92aWRlcixcbiAgICAgICAgJCRIYXNoTWFwOiAkJEhhc2hNYXBQcm92aWRlcixcbiAgICAgICAgJCRjb29raWVSZWFkZXI6ICQkQ29va2llUmVhZGVyUHJvdmlkZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgXSk7XG59XG5cbi8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbiAqICAgICBBbnkgY29tbWl0cyB0byB0aGlzIGZpbGUgc2hvdWxkIGJlIHJldmlld2VkIHdpdGggc2VjdXJpdHkgaW4gbWluZC4gICpcbiAqICAgQ2hhbmdlcyB0byB0aGlzIGZpbGUgY2FuIHBvdGVudGlhbGx5IGNyZWF0ZSBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuICpcbiAqICAgICAgICAgIEFuIGFwcHJvdmFsIGZyb20gMiBDb3JlIG1lbWJlcnMgd2l0aCBoaXN0b3J5IG9mIG1vZGlmeWluZyAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBpcyByZXF1aXJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICBEb2VzIHRoZSBjaGFuZ2Ugc29tZWhvdyBhbGxvdyBmb3IgYXJiaXRyYXJ5IGphdmFzY3JpcHQgdG8gYmUgZXhlY3V0ZWQ/ICpcbiAqICAgIE9yIGFsbG93cyBmb3Igc29tZW9uZSB0byBjaGFuZ2UgdGhlIHByb3RvdHlwZSBvZiBidWlsdC1pbiBvYmplY3RzPyAgICpcbiAqICAgICBPciBnaXZlcyB1bmRlc2lyZWQgYWNjZXNzIHRvIHZhcmlhYmxlcyBsaWtlcyBkb2N1bWVudCBvciB3aW5kb3c/ICAgICpcbiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbi8qIGdsb2JhbCBKUUxpdGVQcm90b3R5cGU6IHRydWUsXG4gIGFkZEV2ZW50TGlzdGVuZXJGbjogdHJ1ZSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuOiB0cnVlLFxuICBCT09MRUFOX0FUVFI6IHRydWUsXG4gIEFMSUFTRURfQVRUUjogdHJ1ZSxcbiovXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vSlFMaXRlXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmVsZW1lbnRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBXcmFwcyBhIHJhdyBET00gZWxlbWVudCBvciBIVE1MIHN0cmluZyBhcyBhIFtqUXVlcnldKGh0dHA6Ly9qcXVlcnkuY29tKSBlbGVtZW50LlxuICpcbiAqIElmIGpRdWVyeSBpcyBhdmFpbGFibGUsIGBhbmd1bGFyLmVsZW1lbnRgIGlzIGFuIGFsaWFzIGZvciB0aGVcbiAqIFtqUXVlcnldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9qUXVlcnkvKSBmdW5jdGlvbi4gSWYgalF1ZXJ5IGlzIG5vdCBhdmFpbGFibGUsIGBhbmd1bGFyLmVsZW1lbnRgXG4gKiBkZWxlZ2F0ZXMgdG8gQW5ndWxhcidzIGJ1aWx0LWluIHN1YnNldCBvZiBqUXVlcnksIGNhbGxlZCBcImpRdWVyeSBsaXRlXCIgb3IgXCJqcUxpdGUuXCJcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPmpxTGl0ZSBpcyBhIHRpbnksIEFQSS1jb21wYXRpYmxlIHN1YnNldCBvZiBqUXVlcnkgdGhhdCBhbGxvd3NcbiAqIEFuZ3VsYXIgdG8gbWFuaXB1bGF0ZSB0aGUgRE9NIGluIGEgY3Jvc3MtYnJvd3NlciBjb21wYXRpYmxlIHdheS4gKipqcUxpdGUqKiBpbXBsZW1lbnRzIG9ubHkgdGhlIG1vc3RcbiAqIGNvbW1vbmx5IG5lZWRlZCBmdW5jdGlvbmFsaXR5IHdpdGggdGhlIGdvYWwgb2YgaGF2aW5nIGEgdmVyeSBzbWFsbCBmb290cHJpbnQuPC9kaXY+XG4gKlxuICogVG8gdXNlIGBqUXVlcnlgLCBzaW1wbHkgZW5zdXJlIGl0IGlzIGxvYWRlZCBiZWZvcmUgdGhlIGBhbmd1bGFyLmpzYCBmaWxlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydFwiPioqTm90ZToqKiBhbGwgZWxlbWVudCByZWZlcmVuY2VzIGluIEFuZ3VsYXIgYXJlIGFsd2F5cyB3cmFwcGVkIHdpdGggalF1ZXJ5IG9yXG4gKiBqcUxpdGU7IHRoZXkgYXJlIG5ldmVyIHJhdyBET00gcmVmZXJlbmNlcy48L2Rpdj5cbiAqXG4gKiAjIyBBbmd1bGFyJ3MganFMaXRlXG4gKiBqcUxpdGUgcHJvdmlkZXMgb25seSB0aGUgZm9sbG93aW5nIGpRdWVyeSBtZXRob2RzOlxuICpcbiAqIC0gW2BhZGRDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FkZENsYXNzLylcbiAqIC0gW2BhZnRlcigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FmdGVyLylcbiAqIC0gW2BhcHBlbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hcHBlbmQvKVxuICogLSBbYGF0dHIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hdHRyLykgLSBEb2VzIG5vdCBzdXBwb3J0IGZ1bmN0aW9ucyBhcyBwYXJhbWV0ZXJzXG4gKiAtIFtgYmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2JpbmQvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcywgc2VsZWN0b3JzIG9yIGV2ZW50RGF0YVxuICogLSBbYGNoaWxkcmVuKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY2hpbGRyZW4vKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzXG4gKiAtIFtgY2xvbmUoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jbG9uZS8pXG4gKiAtIFtgY29udGVudHMoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jb250ZW50cy8pXG4gKiAtIFtgY3NzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY3NzLykgLSBPbmx5IHJldHJpZXZlcyBpbmxpbmUtc3R5bGVzLCBkb2VzIG5vdCBjYWxsIGBnZXRDb21wdXRlZFN0eWxlKClgLiBBcyBhIHNldHRlciwgZG9lcyBub3QgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ3Mgb3IgYXBwZW5kICdweCcuXG4gKiAtIFtgZGF0YSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2RhdGEvKVxuICogLSBbYGRldGFjaCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2RldGFjaC8pXG4gKiAtIFtgZW1wdHkoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9lbXB0eS8pXG4gKiAtIFtgZXEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9lcS8pXG4gKiAtIFtgZmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2ZpbmQvKSAtIExpbWl0ZWQgdG8gbG9va3VwcyBieSB0YWcgbmFtZVxuICogLSBbYGhhc0NsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vaGFzQ2xhc3MvKVxuICogLSBbYGh0bWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9odG1sLylcbiAqIC0gW2BuZXh0KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vbmV4dC8pIC0gRG9lcyBub3Qgc3VwcG9ydCBzZWxlY3RvcnNcbiAqIC0gW2BvbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGFcbiAqIC0gW2BvZmYoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmYvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcywgc2VsZWN0b3JzIG9yIGV2ZW50IG9iamVjdCBhcyBwYXJhbWV0ZXJcbiAqIC0gW2BvbmUoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vbmUvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcyBvciBzZWxlY3RvcnNcbiAqIC0gW2BwYXJlbnQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wYXJlbnQvKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzXG4gKiAtIFtgcHJlcGVuZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ByZXBlbmQvKVxuICogLSBbYHByb3AoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wcm9wLylcbiAqIC0gW2ByZWFkeSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlYWR5LylcbiAqIC0gW2ByZW1vdmUoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmUvKVxuICogLSBbYHJlbW92ZUF0dHIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVBdHRyLylcbiAqIC0gW2ByZW1vdmVDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZUNsYXNzLylcbiAqIC0gW2ByZW1vdmVEYXRhKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlRGF0YS8pXG4gKiAtIFtgcmVwbGFjZVdpdGgoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZXBsYWNlV2l0aC8pXG4gKiAtIFtgdGV4dCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RleHQvKVxuICogLSBbYHRvZ2dsZUNsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdG9nZ2xlQ2xhc3MvKVxuICogLSBbYHRyaWdnZXJIYW5kbGVyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdHJpZ2dlckhhbmRsZXIvKSAtIFBhc3NlcyBhIGR1bW15IGV2ZW50IG9iamVjdCB0byBoYW5kbGVycy5cbiAqIC0gW2B1bmJpbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS91bmJpbmQvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcyBvciBldmVudCBvYmplY3QgYXMgcGFyYW1ldGVyXG4gKiAtIFtgdmFsKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdmFsLylcbiAqIC0gW2B3cmFwKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vd3JhcC8pXG4gKlxuICogIyMgalF1ZXJ5L2pxTGl0ZSBFeHRyYXNcbiAqIEFuZ3VsYXIgYWxzbyBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGFkZGl0aW9uYWwgbWV0aG9kcyBhbmQgZXZlbnRzIHRvIGJvdGggalF1ZXJ5IGFuZCBqcUxpdGU6XG4gKlxuICogIyMjIEV2ZW50c1xuICogLSBgJGRlc3Ryb3lgIC0gQW5ndWxhckpTIGludGVyY2VwdHMgYWxsIGpxTGl0ZS9qUXVlcnkncyBET00gZGVzdHJ1Y3Rpb24gYXBpcyBhbmQgZmlyZXMgdGhpcyBldmVudFxuICogICAgb24gYWxsIERPTSBub2RlcyBiZWluZyByZW1vdmVkLiAgVGhpcyBjYW4gYmUgdXNlZCB0byBjbGVhbiB1cCBhbnkgM3JkIHBhcnR5IGJpbmRpbmdzIHRvIHRoZSBET01cbiAqICAgIGVsZW1lbnQgYmVmb3JlIGl0IGlzIHJlbW92ZWQuXG4gKlxuICogIyMjIE1ldGhvZHNcbiAqIC0gYGNvbnRyb2xsZXIobmFtZSlgIC0gcmV0cmlldmVzIHRoZSBjb250cm9sbGVyIG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgb3IgaXRzIHBhcmVudC4gQnkgZGVmYXVsdFxuICogICByZXRyaWV2ZXMgY29udHJvbGxlciBhc3NvY2lhdGVkIHdpdGggdGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZS4gSWYgYG5hbWVgIGlzIHByb3ZpZGVkIGFzXG4gKiAgIGNhbWVsQ2FzZSBkaXJlY3RpdmUgbmFtZSwgdGhlbiB0aGUgY29udHJvbGxlciBmb3IgdGhpcyBkaXJlY3RpdmUgd2lsbCBiZSByZXRyaWV2ZWQgKGUuZy5cbiAqICAgYCduZ01vZGVsJ2ApLlxuICogLSBgaW5qZWN0b3IoKWAgLSByZXRyaWV2ZXMgdGhlIGluamVjdG9yIG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgb3IgaXRzIHBhcmVudC5cbiAqIC0gYHNjb3BlKClgIC0gcmV0cmlldmVzIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0gb2YgdGhlIGN1cnJlbnRcbiAqICAgZWxlbWVudCBvciBpdHMgcGFyZW50LiBSZXF1aXJlcyB7QGxpbmsgZ3VpZGUvcHJvZHVjdGlvbiNkaXNhYmxpbmctZGVidWctZGF0YSBEZWJ1ZyBEYXRhfSB0b1xuICogICBiZSBlbmFibGVkLlxuICogLSBgaXNvbGF0ZVNjb3BlKClgIC0gcmV0cmlldmVzIGFuIGlzb2xhdGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9IGlmIG9uZSBpcyBhdHRhY2hlZCBkaXJlY3RseSB0byB0aGVcbiAqICAgY3VycmVudCBlbGVtZW50LiBUaGlzIGdldHRlciBzaG91bGQgYmUgdXNlZCBvbmx5IG9uIGVsZW1lbnRzIHRoYXQgY29udGFpbiBhIGRpcmVjdGl2ZSB3aGljaCBzdGFydHMgYSBuZXcgaXNvbGF0ZVxuICogICBzY29wZS4gQ2FsbGluZyBgc2NvcGUoKWAgb24gdGhpcyBlbGVtZW50IGFsd2F5cyByZXR1cm5zIHRoZSBvcmlnaW5hbCBub24taXNvbGF0ZSBzY29wZS5cbiAqICAgUmVxdWlyZXMge0BsaW5rIGd1aWRlL3Byb2R1Y3Rpb24jZGlzYWJsaW5nLWRlYnVnLWRhdGEgRGVidWcgRGF0YX0gdG8gYmUgZW5hYmxlZC5cbiAqIC0gYGluaGVyaXRlZERhdGEoKWAgLSBzYW1lIGFzIGBkYXRhKClgLCBidXQgd2Fsa3MgdXAgdGhlIERPTSB1bnRpbCBhIHZhbHVlIGlzIGZvdW5kIG9yIHRoZSB0b3BcbiAqICAgcGFyZW50IGVsZW1lbnQgaXMgcmVhY2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBlbGVtZW50IEhUTUwgc3RyaW5nIG9yIERPTUVsZW1lbnQgdG8gYmUgd3JhcHBlZCBpbnRvIGpRdWVyeS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IGpRdWVyeSBvYmplY3QuXG4gKi9cblxuSlFMaXRlLmV4cGFuZG8gPSAnbmczMzknO1xuXG52YXIganFDYWNoZSA9IEpRTGl0ZS5jYWNoZSA9IHt9LFxuICAgIGpxSWQgPSAxLFxuICAgIGFkZEV2ZW50TGlzdGVuZXJGbiA9IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGZuKSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGZhbHNlKTtcbiAgICB9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbiA9IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGZuKSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGZhbHNlKTtcbiAgICB9O1xuXG4vKlxuICogISEhIFRoaXMgaXMgYW4gdW5kb2N1bWVudGVkIFwicHJpdmF0ZVwiIGZ1bmN0aW9uICEhIVxuICovXG5KUUxpdGUuX2RhdGEgPSBmdW5jdGlvbihub2RlKSB7XG4gIC8valF1ZXJ5IGFsd2F5cyByZXR1cm5zIGFuIG9iamVjdCBvbiBjYWNoZSBtaXNzXG4gIHJldHVybiB0aGlzLmNhY2hlW25vZGVbdGhpcy5leHBhbmRvXV0gfHwge307XG59O1xuXG5mdW5jdGlvbiBqcU5leHRJZCgpIHsgcmV0dXJuICsranFJZDsgfVxuXG5cbnZhciBTUEVDSUFMX0NIQVJTX1JFR0VYUCA9IC8oW1xcOlxcLVxcX10rKC4pKS9nO1xudmFyIE1PWl9IQUNLX1JFR0VYUCA9IC9ebW96KFtBLVpdKS87XG52YXIgTU9VU0VfRVZFTlRfTUFQPSB7IG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIiwgbW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIn07XG52YXIganFMaXRlTWluRXJyID0gbWluRXJyKCdqcUxpdGUnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBzbmFrZV9jYXNlIHRvIGNhbWVsQ2FzZS5cbiAqIEFsc28gdGhlcmUgaXMgc3BlY2lhbCBjYXNlIGZvciBNb3ogcHJlZml4IHN0YXJ0aW5nIHdpdGggdXBwZXIgY2FzZSBsZXR0ZXIuXG4gKiBAcGFyYW0gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZVxuICovXG5mdW5jdGlvbiBjYW1lbENhc2UobmFtZSkge1xuICByZXR1cm4gbmFtZS5cbiAgICByZXBsYWNlKFNQRUNJQUxfQ0hBUlNfUkVHRVhQLCBmdW5jdGlvbihfLCBzZXBhcmF0b3IsIGxldHRlciwgb2Zmc2V0KSB7XG4gICAgICByZXR1cm4gb2Zmc2V0ID8gbGV0dGVyLnRvVXBwZXJDYXNlKCkgOiBsZXR0ZXI7XG4gICAgfSkuXG4gICAgcmVwbGFjZShNT1pfSEFDS19SRUdFWFAsICdNb3okMScpO1xufVxuXG52YXIgU0lOR0xFX1RBR19SRUdFWFAgPSAvXjwoW1xcdy1dKylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC87XG52YXIgSFRNTF9SRUdFWFAgPSAvPHwmIz9cXHcrOy87XG52YXIgVEFHX05BTUVfUkVHRVhQID0gLzwoW1xcdzotXSspLztcbnZhciBYSFRNTF9UQUdfUkVHRVhQID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzotXSspW14+XSopXFwvPi9naTtcblxudmFyIHdyYXBNYXAgPSB7XG4gICdvcHRpb24nOiBbMSwgJzxzZWxlY3QgbXVsdGlwbGU9XCJtdWx0aXBsZVwiPicsICc8L3NlbGVjdD4nXSxcblxuICAndGhlYWQnOiBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAndHInOiBbMiwgJzx0YWJsZT48dGJvZHk+JywgJzwvdGJvZHk+PC90YWJsZT4nXSxcbiAgJ3RkJzogWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J10sXG4gICdfZGVmYXVsdCc6IFswLCBcIlwiLCBcIlwiXVxufTtcblxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGpxTGl0ZUlzVGV4dE5vZGUoaHRtbCkge1xuICByZXR1cm4gIUhUTUxfUkVHRVhQLnRlc3QoaHRtbCk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUFjY2VwdHNEYXRhKG5vZGUpIHtcbiAgLy8gVGhlIHdpbmRvdyBvYmplY3QgY2FuIGFjY2VwdCBkYXRhIGJ1dCBoYXMgbm8gbm9kZVR5cGVcbiAgLy8gT3RoZXJ3aXNlIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gZWxlbWVudHMgKDEpIGFuZCBkb2N1bWVudHMgKDkpXG4gIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gIHJldHVybiBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQgfHwgIW5vZGVUeXBlIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfRE9DVU1FTlQ7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUhhc0RhdGEobm9kZSkge1xuICBmb3IgKHZhciBrZXkgaW4ganFDYWNoZVtub2RlLm5nMzM5XSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24ganFMaXRlQnVpbGRGcmFnbWVudChodG1sLCBjb250ZXh0KSB7XG4gIHZhciB0bXAsIHRhZywgd3JhcCxcbiAgICAgIGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgICBub2RlcyA9IFtdLCBpO1xuXG4gIGlmIChqcUxpdGVJc1RleHROb2RlKGh0bWwpKSB7XG4gICAgLy8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG4gICAgbm9kZXMucHVzaChjb250ZXh0LmNyZWF0ZVRleHROb2RlKGh0bWwpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcbiAgICB0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY29udGV4dC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtcbiAgICB0YWcgPSAoVEFHX05BTUVfUkVHRVhQLmV4ZWMoaHRtbCkgfHwgW1wiXCIsIFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpO1xuICAgIHdyYXAgPSB3cmFwTWFwW3RhZ10gfHwgd3JhcE1hcC5fZGVmYXVsdDtcbiAgICB0bXAuaW5uZXJIVE1MID0gd3JhcFsxXSArIGh0bWwucmVwbGFjZShYSFRNTF9UQUdfUkVHRVhQLCBcIjwkMT48LyQyPlwiKSArIHdyYXBbMl07XG5cbiAgICAvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcbiAgICBpID0gd3JhcFswXTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0bXAgPSB0bXAubGFzdENoaWxkO1xuICAgIH1cblxuICAgIG5vZGVzID0gY29uY2F0KG5vZGVzLCB0bXAuY2hpbGROb2Rlcyk7XG5cbiAgICB0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuICAgIHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG4gIH1cblxuICAvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG4gIGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgZnJhZ21lbnQuaW5uZXJIVE1MID0gXCJcIjsgLy8gQ2xlYXIgaW5uZXIgSFRNTFxuICBmb3JFYWNoKG5vZGVzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gIH0pO1xuXG4gIHJldHVybiBmcmFnbWVudDtcbn1cblxuZnVuY3Rpb24ganFMaXRlUGFyc2VIVE1MKGh0bWwsIGNvbnRleHQpIHtcbiAgY29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG4gIHZhciBwYXJzZWQ7XG5cbiAgaWYgKChwYXJzZWQgPSBTSU5HTEVfVEFHX1JFR0VYUC5leGVjKGh0bWwpKSkge1xuICAgIHJldHVybiBbY29udGV4dC5jcmVhdGVFbGVtZW50KHBhcnNlZFsxXSldO1xuICB9XG5cbiAgaWYgKChwYXJzZWQgPSBqcUxpdGVCdWlsZEZyYWdtZW50KGh0bWwsIGNvbnRleHQpKSkge1xuICAgIHJldHVybiBwYXJzZWQuY2hpbGROb2RlcztcbiAgfVxuXG4gIHJldHVybiBbXTtcbn1cblxuXG4vLyBJRTktMTEgaGFzIG5vIG1ldGhvZCBcImNvbnRhaW5zXCIgaW4gU1ZHIGVsZW1lbnQgYW5kIGluIE5vZGUucHJvdG90eXBlLiBCdWcgIzEwMjU5LlxudmFyIGpxTGl0ZUNvbnRhaW5zID0gTm9kZS5wcm90b3R5cGUuY29udGFpbnMgfHwgZnVuY3Rpb24oYXJnKSB7XG4gIC8vIGpzaGludCBiaXR3aXNlOiBmYWxzZVxuICByZXR1cm4gISEodGhpcy5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhcmcpICYgMTYpO1xuICAvLyBqc2hpbnQgYml0d2lzZTogdHJ1ZVxufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mdW5jdGlvbiBKUUxpdGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEpRTGl0ZSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgdmFyIGFyZ0lzU3RyaW5nO1xuXG4gIGlmIChpc1N0cmluZyhlbGVtZW50KSkge1xuICAgIGVsZW1lbnQgPSB0cmltKGVsZW1lbnQpO1xuICAgIGFyZ0lzU3RyaW5nID0gdHJ1ZTtcbiAgfVxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSlFMaXRlKSkge1xuICAgIGlmIChhcmdJc1N0cmluZyAmJiBlbGVtZW50LmNoYXJBdCgwKSAhPSAnPCcpIHtcbiAgICAgIHRocm93IGpxTGl0ZU1pbkVycignbm9zZWwnLCAnTG9va2luZyB1cCBlbGVtZW50cyB2aWEgc2VsZWN0b3JzIGlzIG5vdCBzdXBwb3J0ZWQgYnkganFMaXRlISBTZWU6IGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL2FuZ3VsYXIuZWxlbWVudCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEpRTGl0ZShlbGVtZW50KTtcbiAgfVxuXG4gIGlmIChhcmdJc1N0cmluZykge1xuICAgIGpxTGl0ZUFkZE5vZGVzKHRoaXMsIGpxTGl0ZVBhcnNlSFRNTChlbGVtZW50KSk7XG4gIH0gZWxzZSB7XG4gICAganFMaXRlQWRkTm9kZXModGhpcywgZWxlbWVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlQ2xvbmUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZURlYWxvYyhlbGVtZW50LCBvbmx5RGVzY2VuZGFudHMpIHtcbiAgaWYgKCFvbmx5RGVzY2VuZGFudHMpIGpxTGl0ZVJlbW92ZURhdGEoZWxlbWVudCk7XG5cbiAgaWYgKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCkge1xuICAgIHZhciBkZXNjZW5kYW50cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnKicpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gZGVzY2VuZGFudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBqcUxpdGVSZW1vdmVEYXRhKGRlc2NlbmRhbnRzW2ldKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlT2ZmKGVsZW1lbnQsIHR5cGUsIGZuLCB1bnN1cHBvcnRlZCkge1xuICBpZiAoaXNEZWZpbmVkKHVuc3VwcG9ydGVkKSkgdGhyb3cganFMaXRlTWluRXJyKCdvZmZhcmdzJywgJ2pxTGl0ZSNvZmYoKSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBgc2VsZWN0b3JgIGFyZ3VtZW50Jyk7XG5cbiAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50KTtcbiAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZXZlbnRzO1xuICB2YXIgaGFuZGxlID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5oYW5kbGU7XG5cbiAgaWYgKCFoYW5kbGUpIHJldHVybjsgLy9ubyBsaXN0ZW5lcnMgcmVnaXN0ZXJlZFxuXG4gIGlmICghdHlwZSkge1xuICAgIGZvciAodHlwZSBpbiBldmVudHMpIHtcbiAgICAgIGlmICh0eXBlICE9PSAnJGRlc3Ryb3knKSB7XG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBoYW5kbGUpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICB9XG4gIH0gZWxzZSB7XG5cbiAgICB2YXIgcmVtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lckZucyA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChpc0RlZmluZWQoZm4pKSB7XG4gICAgICAgIGFycmF5UmVtb3ZlKGxpc3RlbmVyRm5zIHx8IFtdLCBmbik7XG4gICAgICB9XG4gICAgICBpZiAoIShpc0RlZmluZWQoZm4pICYmIGxpc3RlbmVyRm5zICYmIGxpc3RlbmVyRm5zLmxlbmd0aCA+IDApKSB7XG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBoYW5kbGUpO1xuICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3JFYWNoKHR5cGUuc3BsaXQoJyAnKSwgZnVuY3Rpb24odHlwZSkge1xuICAgICAgcmVtb3ZlSGFuZGxlcih0eXBlKTtcbiAgICAgIGlmIChNT1VTRV9FVkVOVF9NQVBbdHlwZV0pIHtcbiAgICAgICAgcmVtb3ZlSGFuZGxlcihNT1VTRV9FVkVOVF9NQVBbdHlwZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVJlbW92ZURhdGEoZWxlbWVudCwgbmFtZSkge1xuICB2YXIgZXhwYW5kb0lkID0gZWxlbWVudC5uZzMzOTtcbiAgdmFyIGV4cGFuZG9TdG9yZSA9IGV4cGFuZG9JZCAmJiBqcUNhY2hlW2V4cGFuZG9JZF07XG5cbiAgaWYgKGV4cGFuZG9TdG9yZSkge1xuICAgIGlmIChuYW1lKSB7XG4gICAgICBkZWxldGUgZXhwYW5kb1N0b3JlLmRhdGFbbmFtZV07XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV4cGFuZG9TdG9yZS5oYW5kbGUpIHtcbiAgICAgIGlmIChleHBhbmRvU3RvcmUuZXZlbnRzLiRkZXN0cm95KSB7XG4gICAgICAgIGV4cGFuZG9TdG9yZS5oYW5kbGUoe30sICckZGVzdHJveScpO1xuICAgICAgfVxuICAgICAganFMaXRlT2ZmKGVsZW1lbnQpO1xuICAgIH1cbiAgICBkZWxldGUganFDYWNoZVtleHBhbmRvSWRdO1xuICAgIGVsZW1lbnQubmczMzkgPSB1bmRlZmluZWQ7IC8vIGRvbid0IGRlbGV0ZSBET00gZXhwYW5kb3MuIElFIGFuZCBDaHJvbWUgZG9uJ3QgbGlrZSBpdFxuICB9XG59XG5cblxuZnVuY3Rpb24ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsIGNyZWF0ZUlmTmVjZXNzYXJ5KSB7XG4gIHZhciBleHBhbmRvSWQgPSBlbGVtZW50Lm5nMzM5LFxuICAgICAgZXhwYW5kb1N0b3JlID0gZXhwYW5kb0lkICYmIGpxQ2FjaGVbZXhwYW5kb0lkXTtcblxuICBpZiAoY3JlYXRlSWZOZWNlc3NhcnkgJiYgIWV4cGFuZG9TdG9yZSkge1xuICAgIGVsZW1lbnQubmczMzkgPSBleHBhbmRvSWQgPSBqcU5leHRJZCgpO1xuICAgIGV4cGFuZG9TdG9yZSA9IGpxQ2FjaGVbZXhwYW5kb0lkXSA9IHtldmVudHM6IHt9LCBkYXRhOiB7fSwgaGFuZGxlOiB1bmRlZmluZWR9O1xuICB9XG5cbiAgcmV0dXJuIGV4cGFuZG9TdG9yZTtcbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVEYXRhKGVsZW1lbnQsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGpxTGl0ZUFjY2VwdHNEYXRhKGVsZW1lbnQpKSB7XG5cbiAgICB2YXIgaXNTaW1wbGVTZXR0ZXIgPSBpc0RlZmluZWQodmFsdWUpO1xuICAgIHZhciBpc1NpbXBsZUdldHRlciA9ICFpc1NpbXBsZVNldHRlciAmJiBrZXkgJiYgIWlzT2JqZWN0KGtleSk7XG4gICAgdmFyIG1hc3NHZXR0ZXIgPSAha2V5O1xuICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgIWlzU2ltcGxlR2V0dGVyKTtcbiAgICB2YXIgZGF0YSA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZGF0YTtcblxuICAgIGlmIChpc1NpbXBsZVNldHRlcikgeyAvLyBkYXRhKCdrZXknLCB2YWx1ZSlcbiAgICAgIGRhdGFba2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobWFzc0dldHRlcikgeyAgLy8gZGF0YSgpXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzU2ltcGxlR2V0dGVyKSB7IC8vIGRhdGEoJ2tleScpXG4gICAgICAgICAgLy8gZG9uJ3QgZm9yY2UgY3JlYXRpb24gb2YgZXhwYW5kb1N0b3JlIGlmIGl0IGRvZXNuJ3QgZXhpc3QgeWV0XG4gICAgICAgICAgcmV0dXJuIGRhdGEgJiYgZGF0YVtrZXldO1xuICAgICAgICB9IGVsc2UgeyAvLyBtYXNzLXNldHRlcjogZGF0YSh7a2V5MTogdmFsMSwga2V5MjogdmFsMn0pXG4gICAgICAgICAgZXh0ZW5kKGRhdGEsIGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgaWYgKCFlbGVtZW50LmdldEF0dHJpYnV0ZSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gKChcIiBcIiArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIikucmVwbGFjZSgvW1xcblxcdF0vZywgXCIgXCIpLlxuICAgICAgaW5kZXhPZihcIiBcIiArIHNlbGVjdG9yICsgXCIgXCIpID4gLTEpO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVSZW1vdmVDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7XG4gIGlmIChjc3NDbGFzc2VzICYmIGVsZW1lbnQuc2V0QXR0cmlidXRlKSB7XG4gICAgZm9yRWFjaChjc3NDbGFzc2VzLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNzc0NsYXNzKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0cmltKFxuICAgICAgICAgIChcIiBcIiArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIilcbiAgICAgICAgICAucmVwbGFjZSgvW1xcblxcdF0vZywgXCIgXCIpXG4gICAgICAgICAgLnJlcGxhY2UoXCIgXCIgKyB0cmltKGNzc0NsYXNzKSArIFwiIFwiLCBcIiBcIikpXG4gICAgICApO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUFkZENsYXNzKGVsZW1lbnQsIGNzc0NsYXNzZXMpIHtcbiAgaWYgKGNzc0NsYXNzZXMgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUpIHtcbiAgICB2YXIgZXhpc3RpbmdDbGFzc2VzID0gKCcgJyArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyAnICcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcXG5cXHRdL2csIFwiIFwiKTtcblxuICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykge1xuICAgICAgY3NzQ2xhc3MgPSB0cmltKGNzc0NsYXNzKTtcbiAgICAgIGlmIChleGlzdGluZ0NsYXNzZXMuaW5kZXhPZignICcgKyBjc3NDbGFzcyArICcgJykgPT09IC0xKSB7XG4gICAgICAgIGV4aXN0aW5nQ2xhc3NlcyArPSBjc3NDbGFzcyArICcgJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRyaW0oZXhpc3RpbmdDbGFzc2VzKSk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVBZGROb2Rlcyhyb290LCBlbGVtZW50cykge1xuICAvLyBUSElTIENPREUgSVMgVkVSWSBIT1QuIERvbid0IG1ha2UgY2hhbmdlcyB3aXRob3V0IGJlbmNobWFya2luZy5cblxuICBpZiAoZWxlbWVudHMpIHtcblxuICAgIC8vIGlmIGEgTm9kZSAodGhlIG1vc3QgY29tbW9uIGNhc2UpXG4gICAgaWYgKGVsZW1lbnRzLm5vZGVUeXBlKSB7XG4gICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgIC8vIGlmIGFuIEFycmF5IG9yIE5vZGVMaXN0IGFuZCBub3QgYSBXaW5kb3dcbiAgICAgIGlmICh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyAmJiBlbGVtZW50cy53aW5kb3cgIT09IGVsZW1lbnRzKSB7XG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHNbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHM7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuZnVuY3Rpb24ganFMaXRlQ29udHJvbGxlcihlbGVtZW50LCBuYW1lKSB7XG4gIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckJyArIChuYW1lIHx8ICduZ0NvbnRyb2xsZXInKSArICdDb250cm9sbGVyJyk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgLy8gaWYgZWxlbWVudCBpcyB0aGUgZG9jdW1lbnQgb2JqZWN0IHdvcmsgd2l0aCB0aGUgaHRtbCBlbGVtZW50IGluc3RlYWRcbiAgLy8gdGhpcyBtYWtlcyAkKGRvY3VtZW50KS5zY29wZSgpIHBvc3NpYmxlXG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlID09IE5PREVfVFlQRV9ET0NVTUVOVCkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICB2YXIgbmFtZXMgPSBpc0FycmF5KG5hbWUpID8gbmFtZSA6IFtuYW1lXTtcblxuICB3aGlsZSAoZWxlbWVudCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5hbWVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGlmIChpc0RlZmluZWQodmFsdWUgPSBqcUxpdGUuZGF0YShlbGVtZW50LCBuYW1lc1tpXSkpKSByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gSWYgZGVhbGluZyB3aXRoIGEgZG9jdW1lbnQgZnJhZ21lbnQgbm9kZSB3aXRoIGEgaG9zdCBlbGVtZW50LCBhbmQgbm8gcGFyZW50LCB1c2UgdGhlIGhvc3RcbiAgICAvLyBlbGVtZW50IGFzIHRoZSBwYXJlbnQuIFRoaXMgZW5hYmxlcyBkaXJlY3RpdmVzIHdpdGhpbiBhIFNoYWRvdyBET00gb3IgcG9seWZpbGxlZCBTaGFkb3cgRE9NXG4gICAgLy8gdG8gbG9va3VwIHBhcmVudCBjb250cm9sbGVycy5cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlIHx8IChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgJiYgZWxlbWVudC5ob3N0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVFbXB0eShlbGVtZW50KSB7XG4gIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTtcbiAgd2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVSZW1vdmUoZWxlbWVudCwga2VlcERhdGEpIHtcbiAgaWYgKCFrZWVwRGF0YSkganFMaXRlRGVhbG9jKGVsZW1lbnQpO1xuICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG59XG5cblxuZnVuY3Rpb24ganFMaXRlRG9jdW1lbnRMb2FkZWQoYWN0aW9uLCB3aW4pIHtcbiAgd2luID0gd2luIHx8IHdpbmRvdztcbiAgaWYgKHdpbi5kb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgLy8gRm9yY2UgdGhlIGFjdGlvbiB0byBiZSBydW4gYXN5bmMgZm9yIGNvbnNpc3RlbnQgYmVoYXZpb3VyXG4gICAgLy8gZnJvbSB0aGUgYWN0aW9uJ3MgcG9pbnQgb2Ygdmlld1xuICAgIC8vIGkuZS4gaXQgd2lsbCBkZWZpbml0ZWx5IG5vdCBiZSBpbiBhICRhcHBseVxuICAgIHdpbi5zZXRUaW1lb3V0KGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gTm8gbmVlZCB0byB1bmJpbmQgdGhpcyBoYW5kbGVyIGFzIGxvYWQgaXMgb25seSBldmVyIGNhbGxlZCBvbmNlXG4gICAganFMaXRlKHdpbikub24oJ2xvYWQnLCBhY3Rpb24pO1xuICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRnVuY3Rpb25zIHdoaWNoIGFyZSBkZWNsYXJlZCBkaXJlY3RseS5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xudmFyIEpRTGl0ZVByb3RvdHlwZSA9IEpRTGl0ZS5wcm90b3R5cGUgPSB7XG4gIHJlYWR5OiBmdW5jdGlvbihmbikge1xuICAgIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgICAgIGlmIChmaXJlZCkgcmV0dXJuO1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgZm4oKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiBkb2N1bWVudCBpcyBhbHJlYWR5IGxvYWRlZFxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICBzZXRUaW1lb3V0KHRyaWdnZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uKCdET01Db250ZW50TG9hZGVkJywgdHJpZ2dlcik7IC8vIHdvcmtzIGZvciBtb2Rlcm4gYnJvd3NlcnMgYW5kIElFOVxuICAgICAgLy8gd2UgY2FuIG5vdCB1c2UganFMaXRlIHNpbmNlIHdlIGFyZSBub3QgZG9uZSBsb2FkaW5nIGFuZCBqUXVlcnkgY291bGQgYmUgbG9hZGVkIGxhdGVyLlxuICAgICAgLy8ganNoaW50IC1XMDY0XG4gICAgICBKUUxpdGUod2luZG93KS5vbignbG9hZCcsIHRyaWdnZXIpOyAvLyBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkIGZvciBvdGhlcnNcbiAgICAgIC8vIGpzaGludCArVzA2NFxuICAgIH1cbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IFtdO1xuICAgIGZvckVhY2godGhpcywgZnVuY3Rpb24oZSkgeyB2YWx1ZS5wdXNoKCcnICsgZSk7fSk7XG4gICAgcmV0dXJuICdbJyArIHZhbHVlLmpvaW4oJywgJykgKyAnXSc7XG4gIH0sXG5cbiAgZXE6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gKGluZGV4ID49IDApID8ganFMaXRlKHRoaXNbaW5kZXhdKSA6IGpxTGl0ZSh0aGlzW3RoaXMubGVuZ3RoICsgaW5kZXhdKTtcbiAgfSxcblxuICBsZW5ndGg6IDAsXG4gIHB1c2g6IHB1c2gsXG4gIHNvcnQ6IFtdLnNvcnQsXG4gIHNwbGljZTogW10uc3BsaWNlXG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEZ1bmN0aW9ucyBpdGVyYXRpbmcgZ2V0dGVyL3NldHRlcnMuXG4vLyB0aGVzZSBmdW5jdGlvbnMgcmV0dXJuIHNlbGYgb24gc2V0dGVyIGFuZFxuLy8gdmFsdWUgb24gZ2V0LlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG52YXIgQk9PTEVBTl9BVFRSID0ge307XG5mb3JFYWNoKCdtdWx0aXBsZSxzZWxlY3RlZCxjaGVja2VkLGRpc2FibGVkLHJlYWRPbmx5LHJlcXVpcmVkLG9wZW4nLnNwbGl0KCcsJyksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gIEJPT0xFQU5fQVRUUltsb3dlcmNhc2UodmFsdWUpXSA9IHZhbHVlO1xufSk7XG52YXIgQk9PTEVBTl9FTEVNRU5UUyA9IHt9O1xuZm9yRWFjaCgnaW5wdXQsc2VsZWN0LG9wdGlvbix0ZXh0YXJlYSxidXR0b24sZm9ybSxkZXRhaWxzJy5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSkge1xuICBCT09MRUFOX0VMRU1FTlRTW3ZhbHVlXSA9IHRydWU7XG59KTtcbnZhciBBTElBU0VEX0FUVFIgPSB7XG4gICduZ01pbmxlbmd0aCc6ICdtaW5sZW5ndGgnLFxuICAnbmdNYXhsZW5ndGgnOiAnbWF4bGVuZ3RoJyxcbiAgJ25nTWluJzogJ21pbicsXG4gICduZ01heCc6ICdtYXgnLFxuICAnbmdQYXR0ZXJuJzogJ3BhdHRlcm4nXG59O1xuXG5mdW5jdGlvbiBnZXRCb29sZWFuQXR0ck5hbWUoZWxlbWVudCwgbmFtZSkge1xuICAvLyBjaGVjayBkb20gbGFzdCBzaW5jZSB3ZSB3aWxsIG1vc3QgbGlrZWx5IGZhaWwgb24gbmFtZVxuICB2YXIgYm9vbGVhbkF0dHIgPSBCT09MRUFOX0FUVFJbbmFtZS50b0xvd2VyQ2FzZSgpXTtcblxuICAvLyBib29sZWFuQXR0ciBpcyBoZXJlIHR3aWNlIHRvIG1pbmltaXplIERPTSBhY2Nlc3NcbiAgcmV0dXJuIGJvb2xlYW5BdHRyICYmIEJPT0xFQU5fRUxFTUVOVFNbbm9kZU5hbWVfKGVsZW1lbnQpXSAmJiBib29sZWFuQXR0cjtcbn1cblxuZnVuY3Rpb24gZ2V0QWxpYXNlZEF0dHJOYW1lKG5hbWUpIHtcbiAgcmV0dXJuIEFMSUFTRURfQVRUUltuYW1lXTtcbn1cblxuZm9yRWFjaCh7XG4gIGRhdGE6IGpxTGl0ZURhdGEsXG4gIHJlbW92ZURhdGE6IGpxTGl0ZVJlbW92ZURhdGEsXG4gIGhhc0RhdGE6IGpxTGl0ZUhhc0RhdGFcbn0sIGZ1bmN0aW9uKGZuLCBuYW1lKSB7XG4gIEpRTGl0ZVtuYW1lXSA9IGZuO1xufSk7XG5cbmZvckVhY2goe1xuICBkYXRhOiBqcUxpdGVEYXRhLFxuICBpbmhlcml0ZWREYXRhOiBqcUxpdGVJbmhlcml0ZWREYXRhLFxuXG4gIHNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gQ2FuJ3QgdXNlIGpxTGl0ZURhdGEgaGVyZSBkaXJlY3RseSBzbyB3ZSBzdGF5IGNvbXBhdGlibGUgd2l0aCBqUXVlcnkhXG4gICAgcmV0dXJuIGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckc2NvcGUnKSB8fCBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50LCBbJyRpc29sYXRlU2NvcGUnLCAnJHNjb3BlJ10pO1xuICB9LFxuXG4gIGlzb2xhdGVTY29wZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIC8vIENhbid0IHVzZSBqcUxpdGVEYXRhIGhlcmUgZGlyZWN0bHkgc28gd2Ugc3RheSBjb21wYXRpYmxlIHdpdGggalF1ZXJ5IVxuICAgIHJldHVybiBqcUxpdGUuZGF0YShlbGVtZW50LCAnJGlzb2xhdGVTY29wZScpIHx8IGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZScpO1xuICB9LFxuXG4gIGNvbnRyb2xsZXI6IGpxTGl0ZUNvbnRyb2xsZXIsXG5cbiAgaW5qZWN0b3I6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCAnJGluamVjdG9yJyk7XG4gIH0sXG5cbiAgcmVtb3ZlQXR0cjogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSkge1xuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9LFxuXG4gIGhhc0NsYXNzOiBqcUxpdGVIYXNDbGFzcyxcblxuICBjc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgbmFtZSA9IGNhbWVsQ2FzZShuYW1lKTtcblxuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICBlbGVtZW50LnN0eWxlW25hbWVdID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbGVtZW50LnN0eWxlW25hbWVdO1xuICAgIH1cbiAgfSxcblxuICBhdHRyOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBub2RlVHlwZSA9IGVsZW1lbnQubm9kZVR5cGU7XG4gICAgaWYgKG5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCB8fCBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0FUVFJJQlVURSB8fCBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0NPTU1FTlQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGxvd2VyY2FzZWROYW1lID0gbG93ZXJjYXNlKG5hbWUpO1xuICAgIGlmIChCT09MRUFOX0FUVFJbbG93ZXJjYXNlZE5hbWVdKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICBpZiAoISF2YWx1ZSkge1xuICAgICAgICAgIGVsZW1lbnRbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIGxvd2VyY2FzZWROYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50W25hbWVdID0gZmFsc2U7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobG93ZXJjYXNlZE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKGVsZW1lbnRbbmFtZV0gfHxcbiAgICAgICAgICAgICAgICAgKGVsZW1lbnQuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0obmFtZSkgfHwgbm9vcCkuc3BlY2lmaWVkKVxuICAgICAgICAgICAgICAgPyBsb3dlcmNhc2VkTmFtZVxuICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSkge1xuICAgICAgLy8gdGhlIGV4dHJhIGFyZ3VtZW50IFwiMlwiIGlzIHRvIGdldCB0aGUgcmlnaHQgdGhpbmcgZm9yIGEuaHJlZiBpbiBJRSwgc2VlIGpRdWVyeSBjb2RlXG4gICAgICAvLyBzb21lIGVsZW1lbnRzIChlLmcuIERvY3VtZW50KSBkb24ndCBoYXZlIGdldCBhdHRyaWJ1dGUsIHNvIHJldHVybiB1bmRlZmluZWRcbiAgICAgIHZhciByZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lLCAyKTtcbiAgICAgIC8vIG5vcm1hbGl6ZSBub24tZXhpc3RpbmcgYXR0cmlidXRlcyB0byB1bmRlZmluZWQgKGFzIGpRdWVyeSlcbiAgICAgIHJldHVybiByZXQgPT09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG4gICAgfVxuICB9LFxuXG4gIHByb3A6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnRbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnRbbmFtZV07XG4gICAgfVxuICB9LFxuXG4gIHRleHQ6IChmdW5jdGlvbigpIHtcbiAgICBnZXRUZXh0LiRkdiA9ICcnO1xuICAgIHJldHVybiBnZXRUZXh0O1xuXG4gICAgZnVuY3Rpb24gZ2V0VGV4dChlbGVtZW50LCB2YWx1ZSkge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICB2YXIgbm9kZVR5cGUgPSBlbGVtZW50Lm5vZGVUeXBlO1xuICAgICAgICByZXR1cm4gKG5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCB8fCBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQpID8gZWxlbWVudC50ZXh0Q29udGVudCA6ICcnO1xuICAgICAgfVxuICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH1cbiAgfSkoKSxcblxuICB2YWw6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgaWYgKGVsZW1lbnQubXVsdGlwbGUgJiYgbm9kZU5hbWVfKGVsZW1lbnQpID09PSAnc2VsZWN0Jykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIGZvckVhY2goZWxlbWVudC5vcHRpb25zLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChvcHRpb24udmFsdWUgfHwgb3B0aW9uLnRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAwID8gbnVsbCA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlO1xuICAgIH1cbiAgICBlbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gIH0sXG5cbiAgaHRtbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5pbm5lckhUTUw7XG4gICAgfVxuICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTtcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IHZhbHVlO1xuICB9LFxuXG4gIGVtcHR5OiBqcUxpdGVFbXB0eVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgLyoqXG4gICAqIFByb3BlcnRpZXM6IHdyaXRlcyByZXR1cm4gc2VsZWN0aW9uLCByZWFkcyByZXR1cm4gZmlyc3QgdmFsdWVcbiAgICovXG4gIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyKSB7XG4gICAgdmFyIGksIGtleTtcbiAgICB2YXIgbm9kZUNvdW50ID0gdGhpcy5sZW5ndGg7XG5cbiAgICAvLyBqcUxpdGVIYXNDbGFzcyBoYXMgb25seSB0d28gYXJndW1lbnRzLCBidXQgaXMgYSBnZXR0ZXItb25seSBmbiwgc28gd2UgbmVlZCB0byBzcGVjaWFsLWNhc2UgaXRcbiAgICAvLyBpbiBhIHdheSB0aGF0IHN1cnZpdmVzIG1pbmlmaWNhdGlvbi5cbiAgICAvLyBqcUxpdGVFbXB0eSB0YWtlcyBubyBhcmd1bWVudHMgYnV0IGlzIGEgc2V0dGVyLlxuICAgIGlmIChmbiAhPT0ganFMaXRlRW1wdHkgJiZcbiAgICAgICAgKGlzVW5kZWZpbmVkKChmbi5sZW5ndGggPT0gMiAmJiAoZm4gIT09IGpxTGl0ZUhhc0NsYXNzICYmIGZuICE9PSBqcUxpdGVDb250cm9sbGVyKSkgPyBhcmcxIDogYXJnMikpKSB7XG4gICAgICBpZiAoaXNPYmplY3QoYXJnMSkpIHtcblxuICAgICAgICAvLyB3ZSBhcmUgYSB3cml0ZSwgYnV0IHRoZSBvYmplY3QgcHJvcGVydGllcyBhcmUgdGhlIGtleS92YWx1ZXNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGZuID09PSBqcUxpdGVEYXRhKSB7XG4gICAgICAgICAgICAvLyBkYXRhKCkgdGFrZXMgdGhlIHdob2xlIG9iamVjdCBpbiBqUXVlcnlcbiAgICAgICAgICAgIGZuKHRoaXNbaV0sIGFyZzEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBhcmcxKSB7XG4gICAgICAgICAgICAgIGZuKHRoaXNbaV0sIGtleSwgYXJnMVtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmV0dXJuIHNlbGYgZm9yIGNoYWluaW5nXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gd2UgYXJlIGEgcmVhZCwgc28gcmVhZCB0aGUgZmlyc3QgY2hpbGQuXG4gICAgICAgIC8vIFRPRE86IGRvIHdlIHN0aWxsIG5lZWQgdGhpcz9cbiAgICAgICAgdmFyIHZhbHVlID0gZm4uJGR2O1xuICAgICAgICAvLyBPbmx5IGlmIHdlIGhhdmUgJGR2IGRvIHdlIGl0ZXJhdGUgb3ZlciBhbGwsIG90aGVyd2lzZSBpdCBpcyBqdXN0IHRoZSBmaXJzdCBlbGVtZW50LlxuICAgICAgICB2YXIgamogPSAoaXNVbmRlZmluZWQodmFsdWUpKSA/IE1hdGgubWluKG5vZGVDb3VudCwgMSkgOiBub2RlQ291bnQ7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgamo7IGorKykge1xuICAgICAgICAgIHZhciBub2RlVmFsdWUgPSBmbih0aGlzW2pdLCBhcmcxLCBhcmcyKTtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlID8gdmFsdWUgKyBub2RlVmFsdWUgOiBub2RlVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB3ZSBhcmUgYSB3cml0ZSwgc28gYXBwbHkgdG8gYWxsIGNoaWxkcmVuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgICAgZm4odGhpc1tpXSwgYXJnMSwgYXJnMik7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc2VsZiBmb3IgY2hhaW5pbmdcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnRzKSB7XG4gIHZhciBldmVudEhhbmRsZXIgPSBmdW5jdGlvbihldmVudCwgdHlwZSkge1xuICAgIC8vIGpRdWVyeSBzcGVjaWZpYyBhcGlcbiAgICBldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBldmVudC5kZWZhdWx0UHJldmVudGVkO1xuICAgIH07XG5cbiAgICB2YXIgZXZlbnRGbnMgPSBldmVudHNbdHlwZSB8fCBldmVudC50eXBlXTtcbiAgICB2YXIgZXZlbnRGbnNMZW5ndGggPSBldmVudEZucyA/IGV2ZW50Rm5zLmxlbmd0aCA6IDA7XG5cbiAgICBpZiAoIWV2ZW50Rm5zTGVuZ3RoKSByZXR1cm47XG5cbiAgICBpZiAoaXNVbmRlZmluZWQoZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKSkge1xuICAgICAgdmFyIG9yaWdpbmFsU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uO1xuICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9yaWdpbmFsU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgb3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24uY2FsbChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBldmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPT09IHRydWU7XG4gICAgfTtcblxuICAgIC8vIFNvbWUgZXZlbnRzIGhhdmUgc3BlY2lhbCBoYW5kbGVycyB0aGF0IHdyYXAgdGhlIHJlYWwgaGFuZGxlclxuICAgIHZhciBoYW5kbGVyV3JhcHBlciA9IGV2ZW50Rm5zLnNwZWNpYWxIYW5kbGVyV3JhcHBlciB8fCBkZWZhdWx0SGFuZGxlcldyYXBwZXI7XG5cbiAgICAvLyBDb3B5IGV2ZW50IGhhbmRsZXJzIGluIGNhc2UgZXZlbnQgaGFuZGxlcnMgYXJyYXkgaXMgbW9kaWZpZWQgZHVyaW5nIGV4ZWN1dGlvbi5cbiAgICBpZiAoKGV2ZW50Rm5zTGVuZ3RoID4gMSkpIHtcbiAgICAgIGV2ZW50Rm5zID0gc2hhbGxvd0NvcHkoZXZlbnRGbnMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRGbnNMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgIGhhbmRsZXJXcmFwcGVyKGVsZW1lbnQsIGV2ZW50LCBldmVudEZuc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrIGZvciBhbmd1bGFyTW9ja3MvY2xlYXJEYXRhQ2FjaGUgdGhhdCBtYWtlcyBpdCBwb3NzaWJsZSB0byBkZXJlZ2lzdGVyIGFsbFxuICAvLyAgICAgICBldmVudHMgb24gYGVsZW1lbnRgXG4gIGV2ZW50SGFuZGxlci5lbGVtID0gZWxlbWVudDtcbiAgcmV0dXJuIGV2ZW50SGFuZGxlcjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEhhbmRsZXJXcmFwcGVyKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyKSB7XG4gIGhhbmRsZXIuY2FsbChlbGVtZW50LCBldmVudCk7XG59XG5cbmZ1bmN0aW9uIHNwZWNpYWxNb3VzZUhhbmRsZXJXcmFwcGVyKHRhcmdldCwgZXZlbnQsIGhhbmRsZXIpIHtcbiAgLy8gUmVmZXIgdG8galF1ZXJ5J3MgaW1wbGVtZW50YXRpb24gb2YgbW91c2VlbnRlciAmIG1vdXNlbGVhdmVcbiAgLy8gUmVhZCBhYm91dCBtb3VzZWVudGVyIGFuZCBtb3VzZWxlYXZlOlxuICAvLyBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL2V2ZW50c19tb3VzZS5odG1sI2xpbms4XG4gIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgLy8gRm9yIG1vdXNlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuICAvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuICBpZiAoIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhanFMaXRlQ29udGFpbnMuY2FsbCh0YXJnZXQsIHJlbGF0ZWQpKSkge1xuICAgIGhhbmRsZXIuY2FsbCh0YXJnZXQsIGV2ZW50KTtcbiAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEZ1bmN0aW9ucyBpdGVyYXRpbmcgdHJhdmVyc2FsLlxuLy8gVGhlc2UgZnVuY3Rpb25zIGNoYWluIHJlc3VsdHMgaW50byBhIHNpbmdsZVxuLy8gc2VsZWN0b3IuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmZvckVhY2goe1xuICByZW1vdmVEYXRhOiBqcUxpdGVSZW1vdmVEYXRhLFxuXG4gIG9uOiBmdW5jdGlvbiBqcUxpdGVPbihlbGVtZW50LCB0eXBlLCBmbiwgdW5zdXBwb3J0ZWQpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHVuc3VwcG9ydGVkKSkgdGhyb3cganFMaXRlTWluRXJyKCdvbmFyZ3MnLCAnanFMaXRlI29uKCkgZG9lcyBub3Qgc3VwcG9ydCB0aGUgYHNlbGVjdG9yYCBvciBgZXZlbnREYXRhYCBwYXJhbWV0ZXJzJyk7XG5cbiAgICAvLyBEbyBub3QgYWRkIGV2ZW50IGhhbmRsZXJzIHRvIG5vbi1lbGVtZW50cyBiZWNhdXNlIHRoZXkgd2lsbCBub3QgYmUgY2xlYW5lZCB1cC5cbiAgICBpZiAoIWpxTGl0ZUFjY2VwdHNEYXRhKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCB0cnVlKTtcbiAgICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlLmV2ZW50cztcbiAgICB2YXIgaGFuZGxlID0gZXhwYW5kb1N0b3JlLmhhbmRsZTtcblxuICAgIGlmICghaGFuZGxlKSB7XG4gICAgICBoYW5kbGUgPSBleHBhbmRvU3RvcmUuaGFuZGxlID0gY3JlYXRlRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cyk7XG4gICAgfVxuXG4gICAgLy8gaHR0cDovL2pzcGVyZi5jb20vc3RyaW5nLWluZGV4b2YtdnMtc3BsaXRcbiAgICB2YXIgdHlwZXMgPSB0eXBlLmluZGV4T2YoJyAnKSA+PSAwID8gdHlwZS5zcGxpdCgnICcpIDogW3R5cGVdO1xuICAgIHZhciBpID0gdHlwZXMubGVuZ3RoO1xuXG4gICAgdmFyIGFkZEhhbmRsZXIgPSBmdW5jdGlvbih0eXBlLCBzcGVjaWFsSGFuZGxlcldyYXBwZXIsIG5vRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAoIWV2ZW50Rm5zKSB7XG4gICAgICAgIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGVdID0gW107XG4gICAgICAgIGV2ZW50Rm5zLnNwZWNpYWxIYW5kbGVyV3JhcHBlciA9IHNwZWNpYWxIYW5kbGVyV3JhcHBlcjtcbiAgICAgICAgaWYgKHR5cGUgIT09ICckZGVzdHJveScgJiYgIW5vRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBoYW5kbGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGV2ZW50Rm5zLnB1c2goZm4pO1xuICAgIH07XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0eXBlID0gdHlwZXNbaV07XG4gICAgICBpZiAoTU9VU0VfRVZFTlRfTUFQW3R5cGVdKSB7XG4gICAgICAgIGFkZEhhbmRsZXIoTU9VU0VfRVZFTlRfTUFQW3R5cGVdLCBzcGVjaWFsTW91c2VIYW5kbGVyV3JhcHBlcik7XG4gICAgICAgIGFkZEhhbmRsZXIodHlwZSwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFkZEhhbmRsZXIodHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIG9mZjoganFMaXRlT2ZmLFxuXG4gIG9uZTogZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtcbiAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpO1xuXG4gICAgLy9hZGQgdGhlIGxpc3RlbmVyIHR3aWNlIHNvIHRoYXQgd2hlbiBpdCBpcyBjYWxsZWRcbiAgICAvL3lvdSBjYW4gcmVtb3ZlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBhbmQgc3RpbGwgYmVcbiAgICAvL2FibGUgdG8gY2FsbCBlbGVtZW50Lm9mZihldiwgZm4pIG5vcm1hbGx5XG4gICAgZWxlbWVudC5vbih0eXBlLCBmdW5jdGlvbiBvbkZuKCkge1xuICAgICAgZWxlbWVudC5vZmYodHlwZSwgZm4pO1xuICAgICAgZWxlbWVudC5vZmYodHlwZSwgb25Gbik7XG4gICAgfSk7XG4gICAgZWxlbWVudC5vbih0eXBlLCBmbik7XG4gIH0sXG5cbiAgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uKGVsZW1lbnQsIHJlcGxhY2VOb2RlKSB7XG4gICAgdmFyIGluZGV4LCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAganFMaXRlRGVhbG9jKGVsZW1lbnQpO1xuICAgIGZvckVhY2gobmV3IEpRTGl0ZShyZXBsYWNlTm9kZSksIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChpbmRleCkge1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobm9kZSwgZWxlbWVudCk7XG4gICAgICB9XG4gICAgICBpbmRleCA9IG5vZGU7XG4gICAgfSk7XG4gIH0sXG5cbiAgY2hpbGRyZW46IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICBmb3JFYWNoKGVsZW1lbnQuY2hpbGROb2RlcywgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9LFxuXG4gIGNvbnRlbnRzOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuY29udGVudERvY3VtZW50IHx8IGVsZW1lbnQuY2hpbGROb2RlcyB8fCBbXTtcbiAgfSxcblxuICBhcHBlbmQ6IGZ1bmN0aW9uKGVsZW1lbnQsIG5vZGUpIHtcbiAgICB2YXIgbm9kZVR5cGUgPSBlbGVtZW50Lm5vZGVUeXBlO1xuICAgIGlmIChub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQgJiYgbm9kZVR5cGUgIT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCkgcmV0dXJuO1xuXG4gICAgbm9kZSA9IG5ldyBKUUxpdGUobm9kZSk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBub2RlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IG5vZGVbaV07XG4gICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGVuZDogZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkge1xuICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgdmFyIGluZGV4ID0gZWxlbWVudC5maXJzdENoaWxkO1xuICAgICAgZm9yRWFjaChuZXcgSlFMaXRlKG5vZGUpLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShjaGlsZCwgaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHdyYXA6IGZ1bmN0aW9uKGVsZW1lbnQsIHdyYXBOb2RlKSB7XG4gICAgd3JhcE5vZGUgPSBqcUxpdGUod3JhcE5vZGUpLmVxKDApLmNsb25lKClbMF07XG4gICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKHdyYXBOb2RlLCBlbGVtZW50KTtcbiAgICB9XG4gICAgd3JhcE5vZGUuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gIH0sXG5cbiAgcmVtb3ZlOiBqcUxpdGVSZW1vdmUsXG5cbiAgZGV0YWNoOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAganFMaXRlUmVtb3ZlKGVsZW1lbnQsIHRydWUpO1xuICB9LFxuXG4gIGFmdGVyOiBmdW5jdGlvbihlbGVtZW50LCBuZXdFbGVtZW50KSB7XG4gICAgdmFyIGluZGV4ID0gZWxlbWVudCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIG5ld0VsZW1lbnQgPSBuZXcgSlFMaXRlKG5ld0VsZW1lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbmV3RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICB2YXIgbm9kZSA9IG5ld0VsZW1lbnRbaV07XG4gICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTtcbiAgICAgIGluZGV4ID0gbm9kZTtcbiAgICB9XG4gIH0sXG5cbiAgYWRkQ2xhc3M6IGpxTGl0ZUFkZENsYXNzLFxuICByZW1vdmVDbGFzczoganFMaXRlUmVtb3ZlQ2xhc3MsXG5cbiAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yLCBjb25kaXRpb24pIHtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGZvckVhY2goc2VsZWN0b3Iuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciBjbGFzc0NvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNsYXNzQ29uZGl0aW9uKSkge1xuICAgICAgICAgIGNsYXNzQ29uZGl0aW9uID0gIWpxTGl0ZUhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgKGNsYXNzQ29uZGl0aW9uID8ganFMaXRlQWRkQ2xhc3MgOiBqcUxpdGVSZW1vdmVDbGFzcykoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBwYXJlbnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgPyBwYXJlbnQgOiBudWxsO1xuICB9LFxuXG4gIG5leHQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gIH0sXG5cbiAgZmluZDogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBpZiAoZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoc2VsZWN0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9LFxuXG4gIGNsb25lOiBqcUxpdGVDbG9uZSxcblxuICB0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGV4dHJhUGFyYW1ldGVycykge1xuXG4gICAgdmFyIGR1bW15RXZlbnQsIGV2ZW50Rm5zQ29weSwgaGFuZGxlckFyZ3M7XG4gICAgdmFyIGV2ZW50TmFtZSA9IGV2ZW50LnR5cGUgfHwgZXZlbnQ7XG4gICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50KTtcbiAgICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzICYmIGV2ZW50c1tldmVudE5hbWVdO1xuXG4gICAgaWYgKGV2ZW50Rm5zKSB7XG4gICAgICAvLyBDcmVhdGUgYSBkdW1teSBldmVudCB0byBwYXNzIHRvIHRoZSBoYW5kbGVyc1xuICAgICAgZHVtbXlFdmVudCA9IHtcbiAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkgeyB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlOyB9LFxuICAgICAgICBpc0RlZmF1bHRQcmV2ZW50ZWQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5kZWZhdWx0UHJldmVudGVkID09PSB0cnVlOyB9LFxuICAgICAgICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkgeyB0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7IH0sXG4gICAgICAgIGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID09PSB0cnVlOyB9LFxuICAgICAgICBzdG9wUHJvcGFnYXRpb246IG5vb3AsXG4gICAgICAgIHR5cGU6IGV2ZW50TmFtZSxcbiAgICAgICAgdGFyZ2V0OiBlbGVtZW50XG4gICAgICB9O1xuXG4gICAgICAvLyBJZiBhIGN1c3RvbSBldmVudCB3YXMgcHJvdmlkZWQgdGhlbiBleHRlbmQgb3VyIGR1bW15IGV2ZW50IHdpdGggaXRcbiAgICAgIGlmIChldmVudC50eXBlKSB7XG4gICAgICAgIGR1bW15RXZlbnQgPSBleHRlbmQoZHVtbXlFdmVudCwgZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBDb3B5IGV2ZW50IGhhbmRsZXJzIGluIGNhc2UgZXZlbnQgaGFuZGxlcnMgYXJyYXkgaXMgbW9kaWZpZWQgZHVyaW5nIGV4ZWN1dGlvbi5cbiAgICAgIGV2ZW50Rm5zQ29weSA9IHNoYWxsb3dDb3B5KGV2ZW50Rm5zKTtcbiAgICAgIGhhbmRsZXJBcmdzID0gZXh0cmFQYXJhbWV0ZXJzID8gW2R1bW15RXZlbnRdLmNvbmNhdChleHRyYVBhcmFtZXRlcnMpIDogW2R1bW15RXZlbnRdO1xuXG4gICAgICBmb3JFYWNoKGV2ZW50Rm5zQ29weSwgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgaWYgKCFkdW1teUV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgICBmbi5hcHBseShlbGVtZW50LCBoYW5kbGVyQXJncyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgLyoqXG4gICAqIGNoYWluaW5nIGZ1bmN0aW9uc1xuICAgKi9cbiAgSlFMaXRlLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB0aGlzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBmbih0aGlzW2ldLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAvLyBhbnkgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHZhbHVlIG5lZWRzIHRvIGJlIHdyYXBwZWRcbiAgICAgICAgICB2YWx1ZSA9IGpxTGl0ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpxTGl0ZUFkZE5vZGVzKHZhbHVlLCBmbih0aGlzW2ldLCBhcmcxLCBhcmcyLCBhcmczKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpc0RlZmluZWQodmFsdWUpID8gdmFsdWUgOiB0aGlzO1xuICB9O1xuXG4gIC8vIGJpbmQgbGVnYWN5IGJpbmQvdW5iaW5kIHRvIG9uL29mZlxuICBKUUxpdGUucHJvdG90eXBlLmJpbmQgPSBKUUxpdGUucHJvdG90eXBlLm9uO1xuICBKUUxpdGUucHJvdG90eXBlLnVuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub2ZmO1xufSk7XG5cblxuLy8gUHJvdmlkZXIgZm9yIHByaXZhdGUgJCRqcUxpdGUgc2VydmljZVxuZnVuY3Rpb24gJCRqcUxpdGVQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24gJCRqcUxpdGUoKSB7XG4gICAgcmV0dXJuIGV4dGVuZChKUUxpdGUsIHtcbiAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbihub2RlLCBjbGFzc2VzKSB7XG4gICAgICAgIGlmIChub2RlLmF0dHIpIG5vZGUgPSBub2RlWzBdO1xuICAgICAgICByZXR1cm4ganFMaXRlSGFzQ2xhc3Mobm9kZSwgY2xhc3Nlcyk7XG4gICAgICB9LFxuICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKG5vZGUsIGNsYXNzZXMpIHtcbiAgICAgICAgaWYgKG5vZGUuYXR0cikgbm9kZSA9IG5vZGVbMF07XG4gICAgICAgIHJldHVybiBqcUxpdGVBZGRDbGFzcyhub2RlLCBjbGFzc2VzKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24obm9kZSwgY2xhc3Nlcykge1xuICAgICAgICBpZiAobm9kZS5hdHRyKSBub2RlID0gbm9kZVswXTtcbiAgICAgICAgcmV0dXJuIGpxTGl0ZVJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIENvbXB1dGVzIGEgaGFzaCBvZiBhbiAnb2JqJy5cbiAqIEhhc2ggb2YgYTpcbiAqICBzdHJpbmcgaXMgc3RyaW5nXG4gKiAgbnVtYmVyIGlzIG51bWJlciBhcyBzdHJpbmdcbiAqICBvYmplY3QgaXMgZWl0aGVyIHJlc3VsdCBvZiBjYWxsaW5nICQkaGFzaEtleSBmdW5jdGlvbiBvbiB0aGUgb2JqZWN0IG9yIHVuaXF1ZWx5IGdlbmVyYXRlZCBpZCxcbiAqICAgICAgICAgdGhhdCBpcyBhbHNvIGFzc2lnbmVkIHRvIHRoZSAkJGhhc2hLZXkgcHJvcGVydHkgb2YgdGhlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gb2JqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBoYXNoIHN0cmluZyBzdWNoIHRoYXQgdGhlIHNhbWUgaW5wdXQgd2lsbCBoYXZlIHRoZSBzYW1lIGhhc2ggc3RyaW5nLlxuICogICAgICAgICBUaGUgcmVzdWx0aW5nIHN0cmluZyBrZXkgaXMgaW4gJ3R5cGU6aGFzaEtleScgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBoYXNoS2V5KG9iaiwgbmV4dFVpZEZuKSB7XG4gIHZhciBrZXkgPSBvYmogJiYgb2JqLiQkaGFzaEtleTtcblxuICBpZiAoa2V5KSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGtleSA9IG9iai4kJGhhc2hLZXkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIHZhciBvYmpUeXBlID0gdHlwZW9mIG9iajtcbiAgaWYgKG9ialR5cGUgPT0gJ2Z1bmN0aW9uJyB8fCAob2JqVHlwZSA9PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwpKSB7XG4gICAga2V5ID0gb2JqLiQkaGFzaEtleSA9IG9ialR5cGUgKyAnOicgKyAobmV4dFVpZEZuIHx8IG5leHRVaWQpKCk7XG4gIH0gZWxzZSB7XG4gICAga2V5ID0gb2JqVHlwZSArICc6JyArIG9iajtcbiAgfVxuXG4gIHJldHVybiBrZXk7XG59XG5cbi8qKlxuICogSGFzaE1hcCB3aGljaCBjYW4gdXNlIG9iamVjdHMgYXMga2V5c1xuICovXG5mdW5jdGlvbiBIYXNoTWFwKGFycmF5LCBpc29sYXRlZFVpZCkge1xuICBpZiAoaXNvbGF0ZWRVaWQpIHtcbiAgICB2YXIgdWlkID0gMDtcbiAgICB0aGlzLm5leHRVaWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiArK3VpZDtcbiAgICB9O1xuICB9XG4gIGZvckVhY2goYXJyYXksIHRoaXMucHV0LCB0aGlzKTtcbn1cbkhhc2hNYXAucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogU3RvcmUga2V5IHZhbHVlIHBhaXJcbiAgICogQHBhcmFtIGtleSBrZXkgdG8gc3RvcmUgY2FuIGJlIGFueSB0eXBlXG4gICAqIEBwYXJhbSB2YWx1ZSB2YWx1ZSB0byBzdG9yZSBjYW4gYmUgYW55IHR5cGVcbiAgICovXG4gIHB1dDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXNbaGFzaEtleShrZXksIHRoaXMubmV4dFVpZCldID0gdmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSBrZXlcbiAgICogQHJldHVybnMge09iamVjdH0gdGhlIHZhbHVlIGZvciB0aGUga2V5XG4gICAqL1xuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzW2hhc2hLZXkoa2V5LCB0aGlzLm5leHRVaWQpXTtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBrZXkvdmFsdWUgcGFpclxuICAgKiBAcGFyYW0ga2V5XG4gICAqL1xuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXNba2V5ID0gaGFzaEtleShrZXksIHRoaXMubmV4dFVpZCldO1xuICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59O1xuXG52YXIgJCRIYXNoTWFwUHJvdmlkZXIgPSBbZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFtmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gSGFzaE1hcDtcbiAgfV07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBuYW1lIGFuZ3VsYXIuaW5qZWN0b3JcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGFuIGluamVjdG9yIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGZvciByZXRyaWV2aW5nIHNlcnZpY2VzIGFzIHdlbGwgYXMgZm9yXG4gKiBkZXBlbmRlbmN5IGluamVjdGlvbiAoc2VlIHtAbGluayBndWlkZS9kaSBkZXBlbmRlbmN5IGluamVjdGlvbn0pLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IG1vZHVsZXMgQSBsaXN0IG9mIG1vZHVsZSBmdW5jdGlvbnMgb3IgdGhlaXIgYWxpYXNlcy4gU2VlXG4gKiAgICAge0BsaW5rIGFuZ3VsYXIubW9kdWxlfS4gVGhlIGBuZ2AgbW9kdWxlIG11c3QgYmUgZXhwbGljaXRseSBhZGRlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtzdHJpY3REaT1mYWxzZV0gV2hldGhlciB0aGUgaW5qZWN0b3Igc2hvdWxkIGJlIGluIHN0cmljdCBtb2RlLCB3aGljaFxuICogICAgIGRpc2FsbG93cyBhcmd1bWVudCBuYW1lIGFubm90YXRpb24gaW5mZXJlbmNlLlxuICogQHJldHVybnMge2luamVjdG9yfSBJbmplY3RvciBvYmplY3QuIFNlZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogVHlwaWNhbCB1c2FnZVxuICogYGBganNcbiAqICAgLy8gY3JlYXRlIGFuIGluamVjdG9yXG4gKiAgIHZhciAkaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKFsnbmcnXSk7XG4gKlxuICogICAvLyB1c2UgdGhlIGluamVjdG9yIHRvIGtpY2sgb2ZmIHlvdXIgYXBwbGljYXRpb25cbiAqICAgLy8gdXNlIHRoZSB0eXBlIGluZmVyZW5jZSB0byBhdXRvIGluamVjdCBhcmd1bWVudHMsIG9yIHVzZSBpbXBsaWNpdCBpbmplY3Rpb25cbiAqICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkcm9vdFNjb3BlLCAkY29tcGlsZSwgJGRvY3VtZW50KSB7XG4gKiAgICAgJGNvbXBpbGUoJGRvY3VtZW50KSgkcm9vdFNjb3BlKTtcbiAqICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBTb21ldGltZXMgeW91IHdhbnQgdG8gZ2V0IGFjY2VzcyB0byB0aGUgaW5qZWN0b3Igb2YgYSBjdXJyZW50bHkgcnVubmluZyBBbmd1bGFyIGFwcFxuICogZnJvbSBvdXRzaWRlIEFuZ3VsYXIuIFBlcmhhcHMsIHlvdSB3YW50IHRvIGluamVjdCBhbmQgY29tcGlsZSBzb21lIG1hcmt1cCBhZnRlciB0aGVcbiAqIGFwcGxpY2F0aW9uIGhhcyBiZWVuIGJvb3RzdHJhcHBlZC4gWW91IGNhbiBkbyB0aGlzIHVzaW5nIHRoZSBleHRyYSBgaW5qZWN0b3IoKWAgYWRkZWRcbiAqIHRvIEpRdWVyeS9qcUxpdGUgZWxlbWVudHMuIFNlZSB7QGxpbmsgYW5ndWxhci5lbGVtZW50fS5cbiAqXG4gKiAqVGhpcyBpcyBmYWlybHkgcmFyZSBidXQgY291bGQgYmUgdGhlIGNhc2UgaWYgYSB0aGlyZCBwYXJ0eSBsaWJyYXJ5IGlzIGluamVjdGluZyB0aGVcbiAqIG1hcmt1cC4qXG4gKlxuICogSW4gdGhlIGZvbGxvd2luZyBleGFtcGxlIGEgbmV3IGJsb2NrIG9mIEhUTUwgY29udGFpbmluZyBhIGBuZy1jb250cm9sbGVyYFxuICogZGlyZWN0aXZlIGlzIGFkZGVkIHRvIHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50IGJvZHkgYnkgSlF1ZXJ5LiBXZSB0aGVuIGNvbXBpbGUgYW5kIGxpbmtcbiAqIGl0IGludG8gdGhlIGN1cnJlbnQgQW5ndWxhckpTIHNjb3BlLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgJGRpdiA9ICQoJzxkaXYgbmctY29udHJvbGxlcj1cIk15Q3RybFwiPnt7Y29udGVudC5sYWJlbH19PC9kaXY+Jyk7XG4gKiAkKGRvY3VtZW50LmJvZHkpLmFwcGVuZCgkZGl2KTtcbiAqXG4gKiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmluamVjdG9yKCkuaW52b2tlKGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gKiAgIHZhciBzY29wZSA9IGFuZ3VsYXIuZWxlbWVudCgkZGl2KS5zY29wZSgpO1xuICogICAkY29tcGlsZSgkZGl2KShzY29wZSk7XG4gKiB9KTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBhdXRvXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBJbXBsaWNpdCBtb2R1bGUgd2hpY2ggZ2V0cyBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIGVhY2gge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gKi9cblxudmFyIEZOX0FSR1MgPSAvXlteXFwoXSpcXChcXHMqKFteXFwpXSopXFwpL207XG52YXIgRk5fQVJHX1NQTElUID0gLywvO1xudmFyIEZOX0FSRyA9IC9eXFxzKihfPykoXFxTKz8pXFwxXFxzKiQvO1xudmFyIFNUUklQX0NPTU1FTlRTID0gLygoXFwvXFwvLiokKXwoXFwvXFwqW1xcc1xcU10qP1xcKlxcLykpL21nO1xudmFyICRpbmplY3Rvck1pbkVyciA9IG1pbkVycignJGluamVjdG9yJyk7XG5cbmZ1bmN0aW9uIGFub25Gbihmbikge1xuICAvLyBGb3IgYW5vbnltb3VzIGZ1bmN0aW9ucywgc2hvd2luZyBhdCB0aGUgdmVyeSBsZWFzdCB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIGNhbiBoZWxwIGluXG4gIC8vIGRlYnVnZ2luZy5cbiAgdmFyIGZuVGV4dCA9IGZuLnRvU3RyaW5nKCkucmVwbGFjZShTVFJJUF9DT01NRU5UUywgJycpLFxuICAgICAgYXJncyA9IGZuVGV4dC5tYXRjaChGTl9BUkdTKTtcbiAgaWYgKGFyZ3MpIHtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCcgKyAoYXJnc1sxXSB8fCAnJykucmVwbGFjZSgvW1xcc1xcclxcbl0rLywgJyAnKSArICcpJztcbiAgfVxuICByZXR1cm4gJ2ZuJztcbn1cblxuZnVuY3Rpb24gYW5ub3RhdGUoZm4sIHN0cmljdERpLCBuYW1lKSB7XG4gIHZhciAkaW5qZWN0LFxuICAgICAgZm5UZXh0LFxuICAgICAgYXJnRGVjbCxcbiAgICAgIGxhc3Q7XG5cbiAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICghKCRpbmplY3QgPSBmbi4kaW5qZWN0KSkge1xuICAgICAgJGluamVjdCA9IFtdO1xuICAgICAgaWYgKGZuLmxlbmd0aCkge1xuICAgICAgICBpZiAoc3RyaWN0RGkpIHtcbiAgICAgICAgICBpZiAoIWlzU3RyaW5nKG5hbWUpIHx8ICFuYW1lKSB7XG4gICAgICAgICAgICBuYW1lID0gZm4ubmFtZSB8fCBhbm9uRm4oZm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3N0cmljdGRpJyxcbiAgICAgICAgICAgICd7MH0gaXMgbm90IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gYW5kIGNhbm5vdCBiZSBpbnZva2VkIGluIHN0cmljdCBtb2RlJywgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm5UZXh0ID0gZm4udG9TdHJpbmcoKS5yZXBsYWNlKFNUUklQX0NPTU1FTlRTLCAnJyk7XG4gICAgICAgIGFyZ0RlY2wgPSBmblRleHQubWF0Y2goRk5fQVJHUyk7XG4gICAgICAgIGZvckVhY2goYXJnRGVjbFsxXS5zcGxpdChGTl9BUkdfU1BMSVQpLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICBhcmcucmVwbGFjZShGTl9BUkcsIGZ1bmN0aW9uKGFsbCwgdW5kZXJzY29yZSwgbmFtZSkge1xuICAgICAgICAgICAgJGluamVjdC5wdXNoKG5hbWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGZuLiRpbmplY3QgPSAkaW5qZWN0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0FycmF5KGZuKSkge1xuICAgIGxhc3QgPSBmbi5sZW5ndGggLSAxO1xuICAgIGFzc2VydEFyZ0ZuKGZuW2xhc3RdLCAnZm4nKTtcbiAgICAkaW5qZWN0ID0gZm4uc2xpY2UoMCwgbGFzdCk7XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0QXJnRm4oZm4sICdmbicsIHRydWUpO1xuICB9XG4gIHJldHVybiAkaW5qZWN0O1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGluamVjdG9yXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogYCRpbmplY3RvcmAgaXMgdXNlZCB0byByZXRyaWV2ZSBvYmplY3QgaW5zdGFuY2VzIGFzIGRlZmluZWQgYnlcbiAqIHtAbGluayBhdXRvLiRwcm92aWRlIHByb3ZpZGVyfSwgaW5zdGFudGlhdGUgdHlwZXMsIGludm9rZSBtZXRob2RzLFxuICogYW5kIGxvYWQgbW9kdWxlcy5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGFsd2F5cyBob2xkcyB0cnVlOlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciAkaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKCk7XG4gKiAgIGV4cGVjdCgkaW5qZWN0b3IuZ2V0KCckaW5qZWN0b3InKSkudG9CZSgkaW5qZWN0b3IpO1xuICogICBleHBlY3QoJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAqICAgICByZXR1cm4gJGluamVjdG9yO1xuICogICB9KSkudG9CZSgkaW5qZWN0b3IpO1xuICogYGBgXG4gKlxuICogIyBJbmplY3Rpb24gRnVuY3Rpb24gQW5ub3RhdGlvblxuICpcbiAqIEphdmFTY3JpcHQgZG9lcyBub3QgaGF2ZSBhbm5vdGF0aW9ucywgYW5kIGFubm90YXRpb25zIGFyZSBuZWVkZWQgZm9yIGRlcGVuZGVuY3kgaW5qZWN0aW9uLiBUaGVcbiAqIGZvbGxvd2luZyBhcmUgYWxsIHZhbGlkIHdheXMgb2YgYW5ub3RhdGluZyBmdW5jdGlvbiB3aXRoIGluamVjdGlvbiBhcmd1bWVudHMgYW5kIGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIGluZmVycmVkIChvbmx5IHdvcmtzIGlmIGNvZGUgbm90IG1pbmlmaWVkL29iZnVzY2F0ZWQpXG4gKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oc2VydmljZUEpe30pO1xuICpcbiAqICAgLy8gYW5ub3RhdGVkXG4gKiAgIGZ1bmN0aW9uIGV4cGxpY2l0KHNlcnZpY2VBKSB7fTtcbiAqICAgZXhwbGljaXQuJGluamVjdCA9IFsnc2VydmljZUEnXTtcbiAqICAgJGluamVjdG9yLmludm9rZShleHBsaWNpdCk7XG4gKlxuICogICAvLyBpbmxpbmVcbiAqICAgJGluamVjdG9yLmludm9rZShbJ3NlcnZpY2VBJywgZnVuY3Rpb24oc2VydmljZUEpe31dKTtcbiAqIGBgYFxuICpcbiAqICMjIEluZmVyZW5jZVxuICpcbiAqIEluIEphdmFTY3JpcHQgY2FsbGluZyBgdG9TdHJpbmcoKWAgb24gYSBmdW5jdGlvbiByZXR1cm5zIHRoZSBmdW5jdGlvbiBkZWZpbml0aW9uLiBUaGUgZGVmaW5pdGlvblxuICogY2FuIHRoZW4gYmUgcGFyc2VkIGFuZCB0aGUgZnVuY3Rpb24gYXJndW1lbnRzIGNhbiBiZSBleHRyYWN0ZWQuIFRoaXMgbWV0aG9kIG9mIGRpc2NvdmVyaW5nXG4gKiBhbm5vdGF0aW9ucyBpcyBkaXNhbGxvd2VkIHdoZW4gdGhlIGluamVjdG9yIGlzIGluIHN0cmljdCBtb2RlLlxuICogKk5PVEU6KiBUaGlzIGRvZXMgbm90IHdvcmsgd2l0aCBtaW5pZmljYXRpb24sIGFuZCBvYmZ1c2NhdGlvbiB0b29scyBzaW5jZSB0aGVzZSB0b29scyBjaGFuZ2UgdGhlXG4gKiBhcmd1bWVudCBuYW1lcy5cbiAqXG4gKiAjIyBgJGluamVjdGAgQW5ub3RhdGlvblxuICogQnkgYWRkaW5nIGFuIGAkaW5qZWN0YCBwcm9wZXJ0eSBvbnRvIGEgZnVuY3Rpb24gdGhlIGluamVjdGlvbiBwYXJhbWV0ZXJzIGNhbiBiZSBzcGVjaWZpZWQuXG4gKlxuICogIyMgSW5saW5lXG4gKiBBcyBhbiBhcnJheSBvZiBpbmplY3Rpb24gbmFtZXMsIHdoZXJlIHRoZSBsYXN0IGl0ZW0gaW4gdGhlIGFycmF5IGlzIHRoZSBmdW5jdGlvbiB0byBjYWxsLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2dldFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIGFuIGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZSB0byByZXRyaWV2ZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gY2FsbGVyIEFuIG9wdGlvbmFsIHN0cmluZyB0byBwcm92aWRlIHRoZSBvcmlnaW4gb2YgdGhlIGZ1bmN0aW9uIGNhbGwgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHJldHVybiB7Kn0gVGhlIGluc3RhbmNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2ludm9rZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSW52b2tlIHRoZSBtZXRob2QgYW5kIHN1cHBseSB0aGUgbWV0aG9kIGFyZ3VtZW50cyBmcm9tIHRoZSBgJGluamVjdG9yYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBUaGUgaW5qZWN0YWJsZSBmdW5jdGlvbiB0byBpbnZva2UuIEZ1bmN0aW9uIHBhcmFtZXRlcnMgYXJlXG4gKiAgIGluamVjdGVkIGFjY29yZGluZyB0byB0aGUge0BsaW5rIGd1aWRlL2RpICRpbmplY3QgQW5ub3RhdGlvbn0gcnVsZXMuXG4gKiBAcGFyYW0ge09iamVjdD19IHNlbGYgVGhlIGB0aGlzYCBmb3IgdGhlIGludm9rZWQgbWV0aG9kLlxuICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgZmlyc3QsIGJlZm9yZSB0aGUgYCRpbmplY3RvcmAgaXMgY29uc3VsdGVkLlxuICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgaW52b2tlZCBgZm5gIGZ1bmN0aW9uLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2hhc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWxsb3dzIHRoZSB1c2VyIHRvIHF1ZXJ5IGlmIHRoZSBwYXJ0aWN1bGFyIHNlcnZpY2UgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGluamVjdG9yIGhhcyBnaXZlbiBzZXJ2aWNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2luc3RhbnRpYXRlXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBKUyB0eXBlLiBUaGUgbWV0aG9kIHRha2VzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIGludm9rZXMgdGhlIG5ld1xuICogb3BlcmF0b3IsIGFuZCBzdXBwbGllcyBhbGwgb2YgdGhlIGFyZ3VtZW50cyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gYXMgc3BlY2lmaWVkIGJ5IHRoZVxuICogY29uc3RydWN0b3IgYW5ub3RhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBUeXBlIEFubm90YXRlZCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpc1xuICogb2JqZWN0IGZpcnN0LCBiZWZvcmUgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IG5ldyBpbnN0YW5jZSBvZiBgVHlwZWAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjYW5ub3RhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc2VydmljZSBuYW1lcyB3aGljaCB0aGUgZnVuY3Rpb24gaXMgcmVxdWVzdGluZyBmb3IgaW5qZWN0aW9uLiBUaGlzIEFQSSBpc1xuICogdXNlZCBieSB0aGUgaW5qZWN0b3IgdG8gZGV0ZXJtaW5lIHdoaWNoIHNlcnZpY2VzIG5lZWQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24gd2hlbiB0aGVcbiAqIGZ1bmN0aW9uIGlzIGludm9rZWQuIFRoZXJlIGFyZSB0aHJlZSB3YXlzIGluIHdoaWNoIHRoZSBmdW5jdGlvbiBjYW4gYmUgYW5ub3RhdGVkIHdpdGggdGhlIG5lZWRlZFxuICogZGVwZW5kZW5jaWVzLlxuICpcbiAqICMgQXJndW1lbnQgbmFtZXNcbiAqXG4gKiBUaGUgc2ltcGxlc3QgZm9ybSBpcyB0byBleHRyYWN0IHRoZSBkZXBlbmRlbmNpZXMgZnJvbSB0aGUgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbi4gVGhpcyBpcyBkb25lXG4gKiBieSBjb252ZXJ0aW5nIHRoZSBmdW5jdGlvbiBpbnRvIGEgc3RyaW5nIHVzaW5nIGB0b1N0cmluZygpYCBtZXRob2QgYW5kIGV4dHJhY3RpbmcgdGhlIGFyZ3VtZW50XG4gKiBuYW1lcy5cbiAqIGBgYGpzXG4gKiAgIC8vIEdpdmVuXG4gKiAgIGZ1bmN0aW9uIE15Q29udHJvbGxlcigkc2NvcGUsICRyb3V0ZSkge1xuICogICAgIC8vIC4uLlxuICogICB9XG4gKlxuICogICAvLyBUaGVuXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShNeUNvbnRyb2xsZXIpKS50b0VxdWFsKFsnJHNjb3BlJywgJyRyb3V0ZSddKTtcbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gZGlzYWxsb3cgdGhpcyBtZXRob2QgYnkgdXNpbmcgc3RyaWN0IGluamVjdGlvbiBtb2RlLlxuICpcbiAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHdvcmsgd2l0aCBjb2RlIG1pbmlmaWNhdGlvbiAvIG9iZnVzY2F0aW9uLiBGb3IgdGhpcyByZWFzb24gdGhlIGZvbGxvd2luZ1xuICogYW5ub3RhdGlvbiBzdHJhdGVnaWVzIGFyZSBzdXBwb3J0ZWQuXG4gKlxuICogIyBUaGUgYCRpbmplY3RgIHByb3BlcnR5XG4gKlxuICogSWYgYSBmdW5jdGlvbiBoYXMgYW4gYCRpbmplY3RgIHByb3BlcnR5IGFuZCBpdHMgdmFsdWUgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgdGhlbiB0aGUgc3RyaW5nc1xuICogcmVwcmVzZW50IG5hbWVzIG9mIHNlcnZpY2VzIHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZ1bmN0aW9uLlxuICogYGBganNcbiAqICAgLy8gR2l2ZW5cbiAqICAgdmFyIE15Q29udHJvbGxlciA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRTY29wZSwgb2JmdXNjYXRlZFJvdXRlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH1cbiAqICAgLy8gRGVmaW5lIGZ1bmN0aW9uIGRlcGVuZGVuY2llc1xuICogICBNeUNvbnRyb2xsZXJbJyRpbmplY3QnXSA9IFsnJHNjb3BlJywgJyRyb3V0ZSddO1xuICpcbiAqICAgLy8gVGhlblxuICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7XG4gKiBgYGBcbiAqXG4gKiAjIFRoZSBhcnJheSBub3RhdGlvblxuICpcbiAqIEl0IGlzIG9mdGVuIGRlc2lyYWJsZSB0byBpbmxpbmUgSW5qZWN0ZWQgZnVuY3Rpb25zIGFuZCB0aGF0J3Mgd2hlbiBzZXR0aW5nIHRoZSBgJGluamVjdGAgcHJvcGVydHlcbiAqIGlzIHZlcnkgaW5jb252ZW5pZW50LiBJbiB0aGVzZSBzaXR1YXRpb25zIHVzaW5nIHRoZSBhcnJheSBub3RhdGlvbiB0byBzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgaW5cbiAqIGEgd2F5IHRoYXQgc3Vydml2ZXMgbWluaWZpY2F0aW9uIGlzIGEgYmV0dGVyIGNob2ljZTpcbiAqXG4gKiBgYGBqc1xuICogICAvLyBXZSB3aXNoIHRvIHdyaXRlIHRoaXMgKG5vdCBtaW5pZmljYXRpb24gLyBvYmZ1c2NhdGlvbiBzYWZlKVxuICogICBpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUsICRyb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfSk7XG4gKlxuICogICAvLyBXZSBhcmUgZm9yY2VkIHRvIHdyaXRlIGJyZWFrIGlubGluaW5nXG4gKiAgIHZhciB0bXBGbiA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRDb21waWxlLCBvYmZ1c2NhdGVkUm9vdFNjb3BlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH07XG4gKiAgIHRtcEZuLiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRyb290U2NvcGUnXTtcbiAqICAgaW5qZWN0b3IuaW52b2tlKHRtcEZuKTtcbiAqXG4gKiAgIC8vIFRvIGJldHRlciBzdXBwb3J0IGlubGluZSBmdW5jdGlvbiB0aGUgaW5saW5lIGFubm90YXRpb24gaXMgc3VwcG9ydGVkXG4gKiAgIGluamVjdG9yLmludm9rZShbJyRjb21waWxlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihvYmZDb21waWxlLCBvYmZSb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfV0pO1xuICpcbiAqICAgLy8gVGhlcmVmb3JlXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShcbiAqICAgICAgWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmdXNfJGNvbXBpbGUsIG9iZnVzXyRyb290U2NvcGUpIHt9XSlcbiAqICAgICkudG9FcXVhbChbJyRjb21waWxlJywgJyRyb290U2NvcGUnXSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBGdW5jdGlvbiBmb3Igd2hpY2ggZGVwZW5kZW50IHNlcnZpY2UgbmFtZXMgbmVlZCB0b1xuICogYmUgcmV0cmlldmVkIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbc3RyaWN0RGk9ZmFsc2VdIERpc2FsbG93IGFyZ3VtZW50IG5hbWUgYW5ub3RhdGlvbiBpbmZlcmVuY2UuXG4gKlxuICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSBUaGUgbmFtZXMgb2YgdGhlIHNlcnZpY2VzIHdoaWNoIHRoZSBmdW5jdGlvbiByZXF1aXJlcy5cbiAqL1xuXG5cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcHJvdmlkZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSB7QGxpbmsgYXV0by4kcHJvdmlkZSAkcHJvdmlkZX0gc2VydmljZSBoYXMgYSBudW1iZXIgb2YgbWV0aG9kcyBmb3IgcmVnaXN0ZXJpbmcgY29tcG9uZW50c1xuICogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIE1hbnkgb2YgdGhlc2UgZnVuY3Rpb25zIGFyZSBhbHNvIGV4cG9zZWQgb25cbiAqIHtAbGluayBhbmd1bGFyLk1vZHVsZX0uXG4gKlxuICogQW4gQW5ndWxhciAqKnNlcnZpY2UqKiBpcyBhIHNpbmdsZXRvbiBvYmplY3QgY3JlYXRlZCBieSBhICoqc2VydmljZSBmYWN0b3J5KiouICBUaGVzZSAqKnNlcnZpY2VcbiAqIGZhY3RvcmllcyoqIGFyZSBmdW5jdGlvbnMgd2hpY2gsIGluIHR1cm4sIGFyZSBjcmVhdGVkIGJ5IGEgKipzZXJ2aWNlIHByb3ZpZGVyKiouXG4gKiBUaGUgKipzZXJ2aWNlIHByb3ZpZGVycyoqIGFyZSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMuIFdoZW4gaW5zdGFudGlhdGVkIHRoZXkgbXVzdCBjb250YWluIGFcbiAqIHByb3BlcnR5IGNhbGxlZCBgJGdldGAsIHdoaWNoIGhvbGRzIHRoZSAqKnNlcnZpY2UgZmFjdG9yeSoqIGZ1bmN0aW9uLlxuICpcbiAqIFdoZW4geW91IHJlcXVlc3QgYSBzZXJ2aWNlLCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0gaXMgcmVzcG9uc2libGUgZm9yIGZpbmRpbmcgdGhlXG4gKiBjb3JyZWN0ICoqc2VydmljZSBwcm92aWRlcioqLCBpbnN0YW50aWF0aW5nIGl0IGFuZCB0aGVuIGNhbGxpbmcgaXRzIGAkZ2V0YCAqKnNlcnZpY2UgZmFjdG9yeSoqXG4gKiBmdW5jdGlvbiB0byBnZXQgdGhlIGluc3RhbmNlIG9mIHRoZSAqKnNlcnZpY2UqKi5cbiAqXG4gKiBPZnRlbiBzZXJ2aWNlcyBoYXZlIG5vIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhbmQgdGhlcmUgaXMgbm8gbmVlZCB0byBhZGQgbWV0aG9kcyB0byB0aGUgc2VydmljZVxuICogcHJvdmlkZXIuICBUaGUgcHJvdmlkZXIgd2lsbCBiZSBubyBtb3JlIHRoYW4gYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB3aXRoIGEgYCRnZXRgIHByb3BlcnR5LiBGb3JcbiAqIHRoZXNlIGNhc2VzIHRoZSB7QGxpbmsgYXV0by4kcHJvdmlkZSAkcHJvdmlkZX0gc2VydmljZSBoYXMgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kcyB0byByZWdpc3RlclxuICogc2VydmljZXMgd2l0aG91dCBzcGVjaWZ5aW5nIGEgcHJvdmlkZXIuXG4gKlxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciBwcm92aWRlcihwcm92aWRlcil9IC0gcmVnaXN0ZXJzIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogd2l0aCB0aGVcbiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfVxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNjb25zdGFudCBjb25zdGFudChvYmopfSAtIHJlZ2lzdGVycyBhIHZhbHVlL29iamVjdCB0aGF0IGNhbiBiZSBhY2Nlc3NlZCBieVxuICogICAgIHByb3ZpZGVycyBhbmQgc2VydmljZXMuXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlIHZhbHVlKG9iail9IC0gcmVnaXN0ZXJzIGEgdmFsdWUvb2JqZWN0IHRoYXQgY2FuIG9ubHkgYmUgYWNjZXNzZWQgYnlcbiAqICAgICBzZXJ2aWNlcywgbm90IHByb3ZpZGVycy5cbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjZmFjdG9yeSBmYWN0b3J5KGZuKX0gLSByZWdpc3RlcnMgYSBzZXJ2aWNlICoqZmFjdG9yeSBmdW5jdGlvbioqLCBgZm5gLFxuICogICAgIHRoYXQgd2lsbCBiZSB3cmFwcGVkIGluIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogb2JqZWN0LCB3aG9zZSBgJGdldGAgcHJvcGVydHkgd2lsbCBjb250YWluIHRoZVxuICogICAgIGdpdmVuIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2Ugc2VydmljZShjbGFzcyl9IC0gcmVnaXN0ZXJzIGEgKipjb25zdHJ1Y3RvciBmdW5jdGlvbioqLCBgY2xhc3NgXG4gKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGluc3RhbnRpYXRlXG4gKiAgICAgIGEgbmV3IG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogU2VlIHRoZSBpbmRpdmlkdWFsIG1ldGhvZHMgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjcHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipwcm92aWRlciBmdW5jdGlvbioqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBQcm92aWRlciBmdW5jdGlvbnNcbiAqIGFyZSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMsIHdob3NlIGluc3RhbmNlcyBhcmUgcmVzcG9uc2libGUgZm9yIFwicHJvdmlkaW5nXCIgYSBmYWN0b3J5IGZvciBhXG4gKiBzZXJ2aWNlLlxuICpcbiAqIFNlcnZpY2UgcHJvdmlkZXIgbmFtZXMgc3RhcnQgd2l0aCB0aGUgbmFtZSBvZiB0aGUgc2VydmljZSB0aGV5IHByb3ZpZGUgZm9sbG93ZWQgYnkgYFByb3ZpZGVyYC5cbiAqIEZvciBleGFtcGxlLCB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSBoYXMgYSBwcm92aWRlciBjYWxsZWRcbiAqIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgJGxvZ1Byb3ZpZGVyfS5cbiAqXG4gKiBTZXJ2aWNlIHByb3ZpZGVyIG9iamVjdHMgY2FuIGhhdmUgYWRkaXRpb25hbCBtZXRob2RzIHdoaWNoIGFsbG93IGNvbmZpZ3VyYXRpb24gb2YgdGhlIHByb3ZpZGVyXG4gKiBhbmQgaXRzIHNlcnZpY2UuIEltcG9ydGFudGx5LCB5b3UgY2FuIGNvbmZpZ3VyZSB3aGF0IGtpbmQgb2Ygc2VydmljZSBpcyBjcmVhdGVkIGJ5IHRoZSBgJGdldGBcbiAqIG1ldGhvZCwgb3IgaG93IHRoYXQgc2VydmljZSB3aWxsIGFjdC4gRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyICRsb2dQcm92aWRlcn0gaGFzIGFcbiAqIG1ldGhvZCB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZCBkZWJ1Z0VuYWJsZWR9XG4gKiB3aGljaCBsZXRzIHlvdSBzcGVjaWZ5IHdoZXRoZXIgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2Ugd2lsbCBsb2cgZGVidWcgbWVzc2FnZXMgdG8gdGhlXG4gKiBjb25zb2xlIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuIE5PVEU6IHRoZSBwcm92aWRlciB3aWxsIGJlIGF2YWlsYWJsZSB1bmRlciBgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnUHJvdmlkZXInYCBrZXkuXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oKSl9IHByb3ZpZGVyIElmIHRoZSBwcm92aWRlciBpczpcbiAqXG4gKiAgIC0gYE9iamVjdGA6IHRoZW4gaXQgc2hvdWxkIGhhdmUgYSBgJGdldGAgbWV0aG9kLiBUaGUgYCRnZXRgIG1ldGhvZCB3aWxsIGJlIGludm9rZWQgdXNpbmdcbiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW52b2tlICRpbmplY3Rvci5pbnZva2UoKX0gd2hlbiBhbiBpbnN0YW5jZSBuZWVkcyB0byBiZSBjcmVhdGVkLlxuICogICAtIGBDb25zdHJ1Y3RvcmA6IGEgbmV3IGluc3RhbmNlIG9mIHRoZSBwcm92aWRlciB3aWxsIGJlIGNyZWF0ZWQgdXNpbmdcbiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW5zdGFudGlhdGUgJGluamVjdG9yLmluc3RhbnRpYXRlKCl9LCB0aGVuIHRyZWF0ZWQgYXMgYG9iamVjdGAuXG4gKlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuXG4gKiBAZXhhbXBsZVxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gY3JlYXRlIGEgc2ltcGxlIGV2ZW50IHRyYWNraW5nIHNlcnZpY2UgYW5kIHJlZ2lzdGVyIGl0IHVzaW5nXG4gKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciAkcHJvdmlkZS5wcm92aWRlcigpfS5cbiAqXG4gKiBgYGBqc1xuICogIC8vIERlZmluZSB0aGUgZXZlbnRUcmFja2VyIHByb3ZpZGVyXG4gKiAgZnVuY3Rpb24gRXZlbnRUcmFja2VyUHJvdmlkZXIoKSB7XG4gKiAgICB2YXIgdHJhY2tpbmdVcmwgPSAnL3RyYWNrJztcbiAqXG4gKiAgICAvLyBBIHByb3ZpZGVyIG1ldGhvZCBmb3IgY29uZmlndXJpbmcgd2hlcmUgdGhlIHRyYWNrZWQgZXZlbnRzIHNob3VsZCBiZWVuIHNhdmVkXG4gKiAgICB0aGlzLnNldFRyYWNraW5nVXJsID0gZnVuY3Rpb24odXJsKSB7XG4gKiAgICAgIHRyYWNraW5nVXJsID0gdXJsO1xuICogICAgfTtcbiAqXG4gKiAgICAvLyBUaGUgc2VydmljZSBmYWN0b3J5IGZ1bmN0aW9uXG4gKiAgICB0aGlzLiRnZXQgPSBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcbiAqICAgICAgdmFyIHRyYWNrZWRFdmVudHMgPSB7fTtcbiAqICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAvLyBDYWxsIHRoaXMgdG8gdHJhY2sgYW4gZXZlbnRcbiAqICAgICAgICBldmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAqICAgICAgICAgIHZhciBjb3VudCA9IHRyYWNrZWRFdmVudHNbZXZlbnRdIHx8IDA7XG4gKiAgICAgICAgICBjb3VudCArPSAxO1xuICogICAgICAgICAgdHJhY2tlZEV2ZW50c1tldmVudF0gPSBjb3VudDtcbiAqICAgICAgICAgIHJldHVybiBjb3VudDtcbiAqICAgICAgICB9LFxuICogICAgICAgIC8vIENhbGwgdGhpcyB0byBzYXZlIHRoZSB0cmFja2VkIGV2ZW50cyB0byB0aGUgdHJhY2tpbmdVcmxcbiAqICAgICAgICBzYXZlOiBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICRodHRwLnBvc3QodHJhY2tpbmdVcmwsIHRyYWNrZWRFdmVudHMpO1xuICogICAgICAgIH1cbiAqICAgICAgfTtcbiAqICAgIH1dO1xuICogIH1cbiAqXG4gKiAgZGVzY3JpYmUoJ2V2ZW50VHJhY2tlcicsIGZ1bmN0aW9uKCkge1xuICogICAgdmFyIHBvc3RTcHk7XG4gKlxuICogICAgYmVmb3JlRWFjaChtb2R1bGUoZnVuY3Rpb24oJHByb3ZpZGUpIHtcbiAqICAgICAgLy8gUmVnaXN0ZXIgdGhlIGV2ZW50VHJhY2tlciBwcm92aWRlclxuICogICAgICAkcHJvdmlkZS5wcm92aWRlcignZXZlbnRUcmFja2VyJywgRXZlbnRUcmFja2VyUHJvdmlkZXIpO1xuICogICAgfSkpO1xuICpcbiAqICAgIGJlZm9yZUVhY2gobW9kdWxlKGZ1bmN0aW9uKGV2ZW50VHJhY2tlclByb3ZpZGVyKSB7XG4gKiAgICAgIC8vIENvbmZpZ3VyZSBldmVudFRyYWNrZXIgcHJvdmlkZXJcbiAqICAgICAgZXZlbnRUcmFja2VyUHJvdmlkZXIuc2V0VHJhY2tpbmdVcmwoJy9jdXN0b20tdHJhY2snKTtcbiAqICAgIH0pKTtcbiAqXG4gKiAgICBpdCgndHJhY2tzIGV2ZW50cycsIGluamVjdChmdW5jdGlvbihldmVudFRyYWNrZXIpIHtcbiAqICAgICAgZXhwZWN0KGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKSkudG9FcXVhbCgxKTtcbiAqICAgICAgZXhwZWN0KGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKSkudG9FcXVhbCgyKTtcbiAqICAgIH0pKTtcbiAqXG4gKiAgICBpdCgnc2F2ZXMgdG8gdGhlIHRyYWNraW5nIHVybCcsIGluamVjdChmdW5jdGlvbihldmVudFRyYWNrZXIsICRodHRwKSB7XG4gKiAgICAgIHBvc3RTcHkgPSBzcHlPbigkaHR0cCwgJ3Bvc3QnKTtcbiAqICAgICAgZXZlbnRUcmFja2VyLmV2ZW50KCdsb2dpbicpO1xuICogICAgICBldmVudFRyYWNrZXIuc2F2ZSgpO1xuICogICAgICBleHBlY3QocG9zdFNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzBdKS5ub3QudG9FcXVhbCgnL3RyYWNrJyk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMF0pLnRvRXF1YWwoJy9jdXN0b20tdHJhY2snKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1sxXSkudG9FcXVhbCh7ICdsb2dpbic6IDEgfSk7XG4gKiAgICB9KSk7XG4gKiAgfSk7XG4gKiBgYGBcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI2ZhY3RvcnlcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipzZXJ2aWNlIGZhY3RvcnkqKiwgd2hpY2ggd2lsbCBiZSBjYWxsZWQgdG8gcmV0dXJuIHRoZSBzZXJ2aWNlIGluc3RhbmNlLlxuICogVGhpcyBpcyBzaG9ydCBmb3IgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHdoZXJlIGl0cyBwcm92aWRlciBjb25zaXN0cyBvZiBvbmx5IGEgYCRnZXRgIHByb3BlcnR5LFxuICogd2hpY2ggaXMgdGhlIGdpdmVuIHNlcnZpY2UgZmFjdG9yeSBmdW5jdGlvbi5cbiAqIFlvdSBzaG91bGQgdXNlIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgJHByb3ZpZGUuZmFjdG9yeShnZXRGbil9IGlmIHlvdSBkbyBub3QgbmVlZCB0b1xuICogY29uZmlndXJlIHlvdXIgc2VydmljZSBpbiBhIHByb3ZpZGVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59ICRnZXRGbiBUaGUgaW5qZWN0YWJsZSAkZ2V0Rm4gZm9yIHRoZSBpbnN0YW5jZSBjcmVhdGlvbi5cbiAqICAgICAgICAgICAgICAgICAgICAgIEludGVybmFsbHkgdGhpcyBpcyBhIHNob3J0IGhhbmQgZm9yIGAkcHJvdmlkZS5wcm92aWRlcihuYW1lLCB7JGdldDogJGdldEZufSlgLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlXG4gKiBgYGBqc1xuICogICAkcHJvdmlkZS5mYWN0b3J5KCdwaW5nJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XG4gKiAgICAgcmV0dXJuIGZ1bmN0aW9uIHBpbmcoKSB7XG4gKiAgICAgICByZXR1cm4gJGh0dHAuc2VuZCgnL3BpbmcnKTtcbiAqICAgICB9O1xuICogICB9XSk7XG4gKiBgYGBcbiAqIFlvdSB3b3VsZCB0aGVuIGluamVjdCBhbmQgdXNlIHRoaXMgc2VydmljZSBsaWtlIHRoaXM6XG4gKiBgYGBqc1xuICogICBzb21lTW9kdWxlLmNvbnRyb2xsZXIoJ0N0cmwnLCBbJ3BpbmcnLCBmdW5jdGlvbihwaW5nKSB7XG4gKiAgICAgcGluZygpO1xuICogICB9XSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjc2VydmljZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgY29uc3RydWN0b3IqKiwgd2hpY2ggd2lsbCBiZSBpbnZva2VkIHdpdGggYG5ld2AgdG8gY3JlYXRlIHRoZSBzZXJ2aWNlXG4gKiBpbnN0YW5jZS5cbiAqIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHMgcHJvdmlkZXIncyBgJGdldGAgcHJvcGVydHkgaXMgdGhlIHNlcnZpY2VcbiAqIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGluc3RhbnRpYXRlIHRoZSBzZXJ2aWNlIGluc3RhbmNlLlxuICpcbiAqIFlvdSBzaG91bGQgdXNlIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZShjbGFzcyl9IGlmIHlvdSBkZWZpbmUgeW91ciBzZXJ2aWNlXG4gKiBhcyBhIHR5cGUvY2xhc3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLlxuICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gY29uc3RydWN0b3IgQW4gaW5qZWN0YWJsZSBjbGFzcyAoY29uc3RydWN0b3IgZnVuY3Rpb24pXG4gKiAgICAgdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBpcyBhbiBleGFtcGxlIG9mIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB1c2luZ1xuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKGNsYXNzKX0uXG4gKiBgYGBqc1xuICogICB2YXIgUGluZyA9IGZ1bmN0aW9uKCRodHRwKSB7XG4gKiAgICAgdGhpcy4kaHR0cCA9ICRodHRwO1xuICogICB9O1xuICpcbiAqICAgUGluZy4kaW5qZWN0ID0gWyckaHR0cCddO1xuICpcbiAqICAgUGluZy5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKCkge1xuICogICAgIHJldHVybiB0aGlzLiRodHRwLmdldCgnL3BpbmcnKTtcbiAqICAgfTtcbiAqICAgJHByb3ZpZGUuc2VydmljZSgncGluZycsIFBpbmcpO1xuICogYGBgXG4gKiBZb3Ugd291bGQgdGhlbiBpbmplY3QgYW5kIHVzZSB0aGlzIHNlcnZpY2UgbGlrZSB0aGlzOlxuICogYGBganNcbiAqICAgc29tZU1vZHVsZS5jb250cm9sbGVyKCdDdHJsJywgWydwaW5nJywgZnVuY3Rpb24ocGluZykge1xuICogICAgIHBpbmcuc2VuZCgpO1xuICogICB9XSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjdmFsdWVcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKip2YWx1ZSBzZXJ2aWNlKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0sIHN1Y2ggYXMgYSBzdHJpbmcsIGFcbiAqIG51bWJlciwgYW4gYXJyYXksIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLiAgVGhpcyBpcyBzaG9ydCBmb3IgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHdoZXJlIGl0c1xuICogcHJvdmlkZXIncyBgJGdldGAgcHJvcGVydHkgaXMgYSBmYWN0b3J5IGZ1bmN0aW9uIHRoYXQgdGFrZXMgbm8gYXJndW1lbnRzIGFuZCByZXR1cm5zIHRoZSAqKnZhbHVlXG4gKiBzZXJ2aWNlKiouXG4gKlxuICogVmFsdWUgc2VydmljZXMgYXJlIHNpbWlsYXIgdG8gY29uc3RhbnQgc2VydmljZXMsIGV4Y2VwdCB0aGF0IHRoZXkgY2Fubm90IGJlIGluamVjdGVkIGludG8gYVxuICogbW9kdWxlIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gKHNlZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnfSkgYnV0IHRoZXkgY2FuIGJlIG92ZXJyaWRkZW4gYnlcbiAqIGFuIEFuZ3VsYXJcbiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciBkZWNvcmF0b3J9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGFyZSBzb21lIGV4YW1wbGVzIG9mIGNyZWF0aW5nIHZhbHVlIHNlcnZpY2VzLlxuICogYGBganNcbiAqICAgJHByb3ZpZGUudmFsdWUoJ0FETUlOX1VTRVInLCAnYWRtaW4nKTtcbiAqXG4gKiAgICRwcm92aWRlLnZhbHVlKCdSb2xlTG9va3VwJywgeyBhZG1pbjogMCwgd3JpdGVyOiAxLCByZWFkZXI6IDIgfSk7XG4gKlxuICogICAkcHJvdmlkZS52YWx1ZSgnaGFsZk9mJywgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICByZXR1cm4gdmFsdWUgLyAyO1xuICogICB9KTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNjb25zdGFudFxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKmNvbnN0YW50IHNlcnZpY2UqKiwgc3VjaCBhcyBhIHN0cmluZywgYSBudW1iZXIsIGFuIGFycmF5LCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbixcbiAqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBVbmxpa2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgdmFsdWV9IGl0IGNhbiBiZVxuICogaW5qZWN0ZWQgaW50byBhIG1vZHVsZSBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIChzZWUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZ30pIGFuZCBpdCBjYW5ub3RcbiAqIGJlIG92ZXJyaWRkZW4gYnkgYW4gQW5ndWxhciB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yfS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgY29uc3RhbnQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBjb25zdGFudCB2YWx1ZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBhIHNvbWUgZXhhbXBsZXMgb2YgY3JlYXRpbmcgY29uc3RhbnRzOlxuICogYGBganNcbiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ1NIQVJEX0hFSUdIVCcsIDMwNik7XG4gKlxuICogICAkcHJvdmlkZS5jb25zdGFudCgnTVlfQ09MT1VSUycsIFsncmVkJywgJ2JsdWUnLCAnZ3JleSddKTtcbiAqXG4gKiAgICRwcm92aWRlLmNvbnN0YW50KCdkb3VibGUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgIHJldHVybiB2YWx1ZSAqIDI7XG4gKiAgIH0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI2RlY29yYXRvclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgZGVjb3JhdG9yKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIEEgc2VydmljZSBkZWNvcmF0b3JcbiAqIGludGVyY2VwdHMgdGhlIGNyZWF0aW9uIG9mIGEgc2VydmljZSwgYWxsb3dpbmcgaXQgdG8gb3ZlcnJpZGUgb3IgbW9kaWZ5IHRoZSBiZWhhdmlvdXIgb2YgdGhlXG4gKiBzZXJ2aWNlLiBUaGUgb2JqZWN0IHJldHVybmVkIGJ5IHRoZSBkZWNvcmF0b3IgbWF5IGJlIHRoZSBvcmlnaW5hbCBzZXJ2aWNlLCBvciBhIG5ldyBzZXJ2aWNlXG4gKiBvYmplY3Qgd2hpY2ggcmVwbGFjZXMgb3Igd3JhcHMgYW5kIGRlbGVnYXRlcyB0byB0aGUgb3JpZ2luYWwgc2VydmljZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VydmljZSB0byBkZWNvcmF0ZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IGRlY29yYXRvciBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBzZXJ2aWNlIG5lZWRzIHRvIGJlXG4gKiAgICBpbnN0YW50aWF0ZWQgYW5kIHNob3VsZCByZXR1cm4gdGhlIGRlY29yYXRlZCBzZXJ2aWNlIGluc3RhbmNlLiBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIHVzaW5nXG4gKiAgICB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3Rvci5pbnZva2V9IG1ldGhvZCBhbmQgaXMgdGhlcmVmb3JlIGZ1bGx5IGluamVjdGFibGUuXG4gKiAgICBMb2NhbCBpbmplY3Rpb24gYXJndW1lbnRzOlxuICpcbiAqICAgICogYCRkZWxlZ2F0ZWAgLSBUaGUgb3JpZ2luYWwgc2VydmljZSBpbnN0YW5jZSwgd2hpY2ggY2FuIGJlIG1vbmtleSBwYXRjaGVkLCBjb25maWd1cmVkLFxuICogICAgICBkZWNvcmF0ZWQgb3IgZGVsZWdhdGVkIHRvLlxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIHdlIGRlY29yYXRlIHRoZSB7QGxpbmsgbmcuJGxvZyAkbG9nfSBzZXJ2aWNlIHRvIGNvbnZlcnQgd2FybmluZ3MgdG8gZXJyb3JzIGJ5IGludGVyY2VwdGluZ1xuICogY2FsbHMgdG8ge0BsaW5rIG5nLiRsb2cjZXJyb3IgJGxvZy53YXJuKCl9LlxuICogYGBganNcbiAqICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckbG9nJywgWyckZGVsZWdhdGUnLCBmdW5jdGlvbigkZGVsZWdhdGUpIHtcbiAqICAgICAkZGVsZWdhdGUud2FybiA9ICRkZWxlZ2F0ZS5lcnJvcjtcbiAqICAgICByZXR1cm4gJGRlbGVnYXRlO1xuICogICB9XSk7XG4gKiBgYGBcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUluamVjdG9yKG1vZHVsZXNUb0xvYWQsIHN0cmljdERpKSB7XG4gIHN0cmljdERpID0gKHN0cmljdERpID09PSB0cnVlKTtcbiAgdmFyIElOU1RBTlRJQVRJTkcgPSB7fSxcbiAgICAgIHByb3ZpZGVyU3VmZml4ID0gJ1Byb3ZpZGVyJyxcbiAgICAgIHBhdGggPSBbXSxcbiAgICAgIGxvYWRlZE1vZHVsZXMgPSBuZXcgSGFzaE1hcChbXSwgdHJ1ZSksXG4gICAgICBwcm92aWRlckNhY2hlID0ge1xuICAgICAgICAkcHJvdmlkZToge1xuICAgICAgICAgICAgcHJvdmlkZXI6IHN1cHBvcnRPYmplY3QocHJvdmlkZXIpLFxuICAgICAgICAgICAgZmFjdG9yeTogc3VwcG9ydE9iamVjdChmYWN0b3J5KSxcbiAgICAgICAgICAgIHNlcnZpY2U6IHN1cHBvcnRPYmplY3Qoc2VydmljZSksXG4gICAgICAgICAgICB2YWx1ZTogc3VwcG9ydE9iamVjdCh2YWx1ZSksXG4gICAgICAgICAgICBjb25zdGFudDogc3VwcG9ydE9iamVjdChjb25zdGFudCksXG4gICAgICAgICAgICBkZWNvcmF0b3I6IGRlY29yYXRvclxuICAgICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm92aWRlckluamVjdG9yID0gKHByb3ZpZGVyQ2FjaGUuJGluamVjdG9yID1cbiAgICAgICAgICBjcmVhdGVJbnRlcm5hbEluamVjdG9yKHByb3ZpZGVyQ2FjaGUsIGZ1bmN0aW9uKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGNhbGxlcikpIHtcbiAgICAgICAgICAgICAgcGF0aC5wdXNoKGNhbGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VucHInLCBcIlVua25vd24gcHJvdmlkZXI6IHswfVwiLCBwYXRoLmpvaW4oJyA8LSAnKSk7XG4gICAgICAgICAgfSkpLFxuICAgICAgaW5zdGFuY2VDYWNoZSA9IHt9LFxuICAgICAgaW5zdGFuY2VJbmplY3RvciA9IChpbnN0YW5jZUNhY2hlLiRpbmplY3RvciA9XG4gICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3RvcihpbnN0YW5jZUNhY2hlLCBmdW5jdGlvbihzZXJ2aWNlTmFtZSwgY2FsbGVyKSB7XG4gICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4LCBjYWxsZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKHByb3ZpZGVyLiRnZXQsIHByb3ZpZGVyLCB1bmRlZmluZWQsIHNlcnZpY2VOYW1lKTtcbiAgICAgICAgICB9KSk7XG5cblxuICBmb3JFYWNoKGxvYWRNb2R1bGVzKG1vZHVsZXNUb0xvYWQpLCBmdW5jdGlvbihmbikgeyBpZiAoZm4pIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGZuKTsgfSk7XG5cbiAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3I7XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vICRwcm92aWRlclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICBmdW5jdGlvbiBzdXBwb3J0T2JqZWN0KGRlbGVnYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICAgIGZvckVhY2goa2V5LCByZXZlcnNlUGFyYW1zKGRlbGVnYXRlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVsZWdhdGUoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3ZpZGVyKG5hbWUsIHByb3ZpZGVyXykge1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdzZXJ2aWNlJyk7XG4gICAgaWYgKGlzRnVuY3Rpb24ocHJvdmlkZXJfKSB8fCBpc0FycmF5KHByb3ZpZGVyXykpIHtcbiAgICAgIHByb3ZpZGVyXyA9IHByb3ZpZGVySW5qZWN0b3IuaW5zdGFudGlhdGUocHJvdmlkZXJfKTtcbiAgICB9XG4gICAgaWYgKCFwcm92aWRlcl8uJGdldCkge1xuICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdwZ2V0JywgXCJQcm92aWRlciAnezB9JyBtdXN0IGRlZmluZSAkZ2V0IGZhY3RvcnkgbWV0aG9kLlwiLCBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3ZpZGVyQ2FjaGVbbmFtZSArIHByb3ZpZGVyU3VmZml4XSA9IHByb3ZpZGVyXztcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZm9yY2VSZXR1cm5WYWx1ZShuYW1lLCBmYWN0b3J5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGVuZm9yY2VkUmV0dXJuVmFsdWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZmFjdG9yeSwgdGhpcyk7XG4gICAgICBpZiAoaXNVbmRlZmluZWQocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VuZGVmJywgXCJQcm92aWRlciAnezB9JyBtdXN0IHJldHVybiBhIHZhbHVlIGZyb20gJGdldCBmYWN0b3J5IG1ldGhvZC5cIiwgbmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBmYWN0b3J5KG5hbWUsIGZhY3RvcnlGbiwgZW5mb3JjZSkge1xuICAgIHJldHVybiBwcm92aWRlcihuYW1lLCB7XG4gICAgICAkZ2V0OiBlbmZvcmNlICE9PSBmYWxzZSA/IGVuZm9yY2VSZXR1cm5WYWx1ZShuYW1lLCBmYWN0b3J5Rm4pIDogZmFjdG9yeUZuXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXJ2aWNlKG5hbWUsIGNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkobmFtZSwgWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAgICAgIHJldHVybiAkaW5qZWN0b3IuaW5zdGFudGlhdGUoY29uc3RydWN0b3IpO1xuICAgIH1dKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbHVlKG5hbWUsIHZhbCkgeyByZXR1cm4gZmFjdG9yeShuYW1lLCB2YWx1ZUZuKHZhbCksIGZhbHNlKTsgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2NvbnN0YW50Jyk7XG4gICAgcHJvdmlkZXJDYWNoZVtuYW1lXSA9IHZhbHVlO1xuICAgIGluc3RhbmNlQ2FjaGVbbmFtZV0gPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29yYXRvcihzZXJ2aWNlTmFtZSwgZGVjb3JGbikge1xuICAgIHZhciBvcmlnUHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4KSxcbiAgICAgICAgb3JpZyRnZXQgPSBvcmlnUHJvdmlkZXIuJGdldDtcblxuICAgIG9yaWdQcm92aWRlci4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3JpZ0luc3RhbmNlID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2Uob3JpZyRnZXQsIG9yaWdQcm92aWRlcik7XG4gICAgICByZXR1cm4gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZGVjb3JGbiwgbnVsbCwgeyRkZWxlZ2F0ZTogb3JpZ0luc3RhbmNlfSk7XG4gICAgfTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBNb2R1bGUgTG9hZGluZ1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgZnVuY3Rpb24gbG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCkge1xuICAgIGFzc2VydEFyZyhpc1VuZGVmaW5lZChtb2R1bGVzVG9Mb2FkKSB8fCBpc0FycmF5KG1vZHVsZXNUb0xvYWQpLCAnbW9kdWxlc1RvTG9hZCcsICdub3QgYW4gYXJyYXknKTtcbiAgICB2YXIgcnVuQmxvY2tzID0gW10sIG1vZHVsZUZuO1xuICAgIGZvckVhY2gobW9kdWxlc1RvTG9hZCwgZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBpZiAobG9hZGVkTW9kdWxlcy5nZXQobW9kdWxlKSkgcmV0dXJuO1xuICAgICAgbG9hZGVkTW9kdWxlcy5wdXQobW9kdWxlLCB0cnVlKTtcblxuICAgICAgZnVuY3Rpb24gcnVuSW52b2tlUXVldWUocXVldWUpIHtcbiAgICAgICAgdmFyIGksIGlpO1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHF1ZXVlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICB2YXIgaW52b2tlQXJncyA9IHF1ZXVlW2ldLFxuICAgICAgICAgICAgICBwcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KGludm9rZUFyZ3NbMF0pO1xuXG4gICAgICAgICAgcHJvdmlkZXJbaW52b2tlQXJnc1sxXV0uYXBwbHkocHJvdmlkZXIsIGludm9rZUFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChpc1N0cmluZyhtb2R1bGUpKSB7XG4gICAgICAgICAgbW9kdWxlRm4gPSBhbmd1bGFyTW9kdWxlKG1vZHVsZSk7XG4gICAgICAgICAgcnVuQmxvY2tzID0gcnVuQmxvY2tzLmNvbmNhdChsb2FkTW9kdWxlcyhtb2R1bGVGbi5yZXF1aXJlcykpLmNvbmNhdChtb2R1bGVGbi5fcnVuQmxvY2tzKTtcbiAgICAgICAgICBydW5JbnZva2VRdWV1ZShtb2R1bGVGbi5faW52b2tlUXVldWUpO1xuICAgICAgICAgIHJ1bkludm9rZVF1ZXVlKG1vZHVsZUZuLl9jb25maWdCbG9ja3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24obW9kdWxlKSkge1xuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2gocHJvdmlkZXJJbmplY3Rvci5pbnZva2UobW9kdWxlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICAgICAgICBydW5CbG9ja3MucHVzaChwcm92aWRlckluamVjdG9yLmludm9rZShtb2R1bGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NlcnRBcmdGbihtb2R1bGUsICdtb2R1bGUnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICAgICAgbW9kdWxlID0gbW9kdWxlW21vZHVsZS5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS5tZXNzYWdlICYmIGUuc3RhY2sgJiYgZS5zdGFjay5pbmRleE9mKGUubWVzc2FnZSkgPT0gLTEpIHtcbiAgICAgICAgICAvLyBTYWZhcmkgJiBGRidzIHN0YWNrIHRyYWNlcyBkb24ndCBjb250YWluIGVycm9yLm1lc3NhZ2UgY29udGVudFxuICAgICAgICAgIC8vIHVubGlrZSB0aG9zZSBvZiBDaHJvbWUgYW5kIElFXG4gICAgICAgICAgLy8gU28gaWYgc3RhY2sgZG9lc24ndCBjb250YWluIG1lc3NhZ2UsIHdlIGNyZWF0ZSBhIG5ldyBzdHJpbmcgdGhhdCBjb250YWlucyBib3RoLlxuICAgICAgICAgIC8vIFNpbmNlIGVycm9yLnN0YWNrIGlzIHJlYWQtb25seSBpbiBTYWZhcmksIEknbSBvdmVycmlkaW5nIGUgYW5kIG5vdCBlLnN0YWNrIGhlcmUuXG4gICAgICAgICAgLyoganNoaW50IC1XMDIyICovXG4gICAgICAgICAgZSA9IGUubWVzc2FnZSArICdcXG4nICsgZS5zdGFjaztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ21vZHVsZXJyJywgXCJGYWlsZWQgdG8gaW5zdGFudGlhdGUgbW9kdWxlIHswfSBkdWUgdG86XFxuezF9XCIsXG4gICAgICAgICAgICAgICAgICBtb2R1bGUsIGUuc3RhY2sgfHwgZS5tZXNzYWdlIHx8IGUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBydW5CbG9ja3M7XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gaW50ZXJuYWwgSW5qZWN0b3JcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgZnVuY3Rpb24gY3JlYXRlSW50ZXJuYWxJbmplY3RvcihjYWNoZSwgZmFjdG9yeSkge1xuXG4gICAgZnVuY3Rpb24gZ2V0U2VydmljZShzZXJ2aWNlTmFtZSwgY2FsbGVyKSB7XG4gICAgICBpZiAoY2FjaGUuaGFzT3duUHJvcGVydHkoc2VydmljZU5hbWUpKSB7XG4gICAgICAgIGlmIChjYWNoZVtzZXJ2aWNlTmFtZV0gPT09IElOU1RBTlRJQVRJTkcpIHtcbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ2NkZXAnLCAnQ2lyY3VsYXIgZGVwZW5kZW5jeSBmb3VuZDogezB9JyxcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWUgKyAnIDwtICcgKyBwYXRoLmpvaW4oJyA8LSAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlW3NlcnZpY2VOYW1lXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcGF0aC51bnNoaWZ0KHNlcnZpY2VOYW1lKTtcbiAgICAgICAgICBjYWNoZVtzZXJ2aWNlTmFtZV0gPSBJTlNUQU5USUFUSU5HO1xuICAgICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV0gPSBmYWN0b3J5KHNlcnZpY2VOYW1lLCBjYWxsZXIpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBpZiAoY2FjaGVbc2VydmljZU5hbWVdID09PSBJTlNUQU5USUFUSU5HKSB7XG4gICAgICAgICAgICBkZWxldGUgY2FjaGVbc2VydmljZU5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgcGF0aC5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52b2tlKGZuLCBzZWxmLCBsb2NhbHMsIHNlcnZpY2VOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIGxvY2FscyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2VydmljZU5hbWUgPSBsb2NhbHM7XG4gICAgICAgIGxvY2FscyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgICAgJGluamVjdCA9IGNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUoZm4sIHN0cmljdERpLCBzZXJ2aWNlTmFtZSksXG4gICAgICAgICAgbGVuZ3RoLCBpLFxuICAgICAgICAgIGtleTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gJGluamVjdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSAkaW5qZWN0W2ldO1xuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ2l0a24nLFxuICAgICAgICAgICAgICAgICAgJ0luY29ycmVjdCBpbmplY3Rpb24gdG9rZW4hIEV4cGVjdGVkIHNlcnZpY2UgbmFtZSBhcyBzdHJpbmcsIGdvdCB7MH0nLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MucHVzaChcbiAgICAgICAgICBsb2NhbHMgJiYgbG9jYWxzLmhhc093blByb3BlcnR5KGtleSlcbiAgICAgICAgICA/IGxvY2Fsc1trZXldXG4gICAgICAgICAgOiBnZXRTZXJ2aWNlKGtleSwgc2VydmljZU5hbWUpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheShmbikpIHtcbiAgICAgICAgZm4gPSBmbltsZW5ndGhdO1xuICAgICAgfVxuXG4gICAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9hbmd1bGFyanMtaW52b2tlLWFwcGx5LXZzLXN3aXRjaFxuICAgICAgLy8gIzUzODhcbiAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YW50aWF0ZShUeXBlLCBsb2NhbHMsIHNlcnZpY2VOYW1lKSB7XG4gICAgICAvLyBDaGVjayBpZiBUeXBlIGlzIGFubm90YXRlZCBhbmQgdXNlIGp1c3QgdGhlIGdpdmVuIGZ1bmN0aW9uIGF0IG4tMSBhcyBwYXJhbWV0ZXJcbiAgICAgIC8vIGUuZy4gc29tZU1vZHVsZS5mYWN0b3J5KCdncmVldGVyJywgWyckd2luZG93JywgZnVuY3Rpb24ocmVuYW1lZCR3aW5kb3cpIHt9XSk7XG4gICAgICAvLyBPYmplY3QgY3JlYXRpb246IGh0dHA6Ly9qc3BlcmYuY29tL2NyZWF0ZS1jb25zdHJ1Y3Rvci8yXG4gICAgICB2YXIgaW5zdGFuY2UgPSBPYmplY3QuY3JlYXRlKChpc0FycmF5KFR5cGUpID8gVHlwZVtUeXBlLmxlbmd0aCAtIDFdIDogVHlwZSkucHJvdG90eXBlIHx8IG51bGwpO1xuICAgICAgdmFyIHJldHVybmVkVmFsdWUgPSBpbnZva2UoVHlwZSwgaW5zdGFuY2UsIGxvY2Fscywgc2VydmljZU5hbWUpO1xuXG4gICAgICByZXR1cm4gaXNPYmplY3QocmV0dXJuZWRWYWx1ZSkgfHwgaXNGdW5jdGlvbihyZXR1cm5lZFZhbHVlKSA/IHJldHVybmVkVmFsdWUgOiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaW52b2tlOiBpbnZva2UsXG4gICAgICBpbnN0YW50aWF0ZTogaW5zdGFudGlhdGUsXG4gICAgICBnZXQ6IGdldFNlcnZpY2UsXG4gICAgICBhbm5vdGF0ZTogY3JlYXRlSW5qZWN0b3IuJCRhbm5vdGF0ZSxcbiAgICAgIGhhczogZnVuY3Rpb24obmFtZSkge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXJDYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lICsgcHJvdmlkZXJTdWZmaXgpIHx8IGNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxuY3JlYXRlSW5qZWN0b3IuJCRhbm5vdGF0ZSA9IGFubm90YXRlO1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGFuY2hvclNjcm9sbFByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgYCRhbmNob3JTY3JvbGxQcm92aWRlcmAgdG8gZGlzYWJsZSBhdXRvbWF0aWMgc2Nyb2xsaW5nIHdoZW5ldmVyXG4gKiB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gY2hhbmdlcy5cbiAqL1xuZnVuY3Rpb24gJEFuY2hvclNjcm9sbFByb3ZpZGVyKCkge1xuXG4gIHZhciBhdXRvU2Nyb2xsaW5nRW5hYmxlZCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFuY2hvclNjcm9sbFByb3ZpZGVyI2Rpc2FibGVBdXRvU2Nyb2xsaW5nXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCeSBkZWZhdWx0LCB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCAkYW5jaG9yU2Nyb2xsKCl9IHdpbGwgYXV0b21hdGljYWxseSBkZXRlY3QgY2hhbmdlcyB0b1xuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gYW5kIHNjcm9sbCB0byB0aGUgZWxlbWVudCBtYXRjaGluZyB0aGUgbmV3IGhhc2guPGJyIC8+XG4gICAqIFVzZSB0aGlzIG1ldGhvZCB0byBkaXNhYmxlIGF1dG9tYXRpYyBzY3JvbGxpbmcuXG4gICAqXG4gICAqIElmIGF1dG9tYXRpYyBzY3JvbGxpbmcgaXMgZGlzYWJsZWQsIG9uZSBtdXN0IGV4cGxpY2l0bHkgY2FsbFxuICAgKiB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCAkYW5jaG9yU2Nyb2xsKCl9IGluIG9yZGVyIHRvIHNjcm9sbCB0byB0aGUgZWxlbWVudCByZWxhdGVkIHRvIHRoZVxuICAgKiBjdXJyZW50IGhhc2guXG4gICAqL1xuICB0aGlzLmRpc2FibGVBdXRvU2Nyb2xsaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgYXV0b1Njcm9sbGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGFuY2hvclNjcm9sbFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKiBAcmVxdWlyZXMgJHdpbmRvd1xuICAgKiBAcmVxdWlyZXMgJGxvY2F0aW9uXG4gICAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBXaGVuIGNhbGxlZCwgaXQgc2Nyb2xscyB0byB0aGUgZWxlbWVudCByZWxhdGVkIHRvIHRoZSBzcGVjaWZpZWQgYGhhc2hgIG9yIChpZiBvbWl0dGVkKSB0byB0aGVcbiAgICogY3VycmVudCB2YWx1ZSBvZiB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0sIGFjY29yZGluZyB0byB0aGUgcnVsZXMgc3BlY2lmaWVkXG4gICAqIGluIHRoZVxuICAgKiBbSFRNTDUgc3BlY10oaHR0cDovL3d3dy53My5vcmcvaHRtbC93Zy9kcmFmdHMvaHRtbC9tYXN0ZXIvYnJvd3NlcnMuaHRtbCN0aGUtaW5kaWNhdGVkLXBhcnQtb2YtdGhlLWRvY3VtZW50KS5cbiAgICpcbiAgICogSXQgYWxzbyB3YXRjaGVzIHRoZSB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gYW5kIGF1dG9tYXRpY2FsbHkgc2Nyb2xscyB0b1xuICAgKiBtYXRjaCBhbnkgYW5jaG9yIHdoZW5ldmVyIGl0IGNoYW5nZXMuIFRoaXMgY2FuIGJlIGRpc2FibGVkIGJ5IGNhbGxpbmdcbiAgICoge0BsaW5rIG5nLiRhbmNob3JTY3JvbGxQcm92aWRlciNkaXNhYmxlQXV0b1Njcm9sbGluZyAkYW5jaG9yU2Nyb2xsUHJvdmlkZXIuZGlzYWJsZUF1dG9TY3JvbGxpbmcoKX0uXG4gICAqXG4gICAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiB1c2UgaXRzIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsI3lPZmZzZXQgeU9mZnNldH0gcHJvcGVydHkgdG8gc3BlY2lmeSBhXG4gICAqIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQgKGVpdGhlciBmaXhlZCBvciBkeW5hbWljKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBoYXNoIFRoZSBoYXNoIHNwZWNpZnlpbmcgdGhlIGVsZW1lbnQgdG8gc2Nyb2xsIHRvLiBJZiBvbWl0dGVkLCB0aGUgdmFsdWUgb2ZcbiAgICogICAgICAgICAgICAgICAgICAgICAgIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSB3aWxsIGJlIHVzZWQuXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7KG51bWJlcnxmdW5jdGlvbnxqcUxpdGUpfSB5T2Zmc2V0XG4gICAqIElmIHNldCwgc3BlY2lmaWVzIGEgdmVydGljYWwgc2Nyb2xsLW9mZnNldC4gVGhpcyBpcyBvZnRlbiB1c2VmdWwgd2hlbiB0aGVyZSBhcmUgZml4ZWRcbiAgICogcG9zaXRpb25lZCBlbGVtZW50cyBhdCB0aGUgdG9wIG9mIHRoZSBwYWdlLCBzdWNoIGFzIG5hdmJhcnMsIGhlYWRlcnMgZXRjLlxuICAgKlxuICAgKiBgeU9mZnNldGAgY2FuIGJlIHNwZWNpZmllZCBpbiB2YXJpb3VzIHdheXM6XG4gICAqIC0gKipudW1iZXIqKjogQSBmaXhlZCBudW1iZXIgb2YgcGl4ZWxzIHRvIGJlIHVzZWQgYXMgb2Zmc2V0LjxiciAvPjxiciAvPlxuICAgKiAtICoqZnVuY3Rpb24qKjogQSBnZXR0ZXIgZnVuY3Rpb24gY2FsbGVkIGV2ZXJ5dGltZSBgJGFuY2hvclNjcm9sbCgpYCBpcyBleGVjdXRlZC4gTXVzdCByZXR1cm5cbiAgICogICBhIG51bWJlciByZXByZXNlbnRpbmcgdGhlIG9mZnNldCAoaW4gcGl4ZWxzKS48YnIgLz48YnIgLz5cbiAgICogLSAqKmpxTGl0ZSoqOiBBIGpxTGl0ZS9qUXVlcnkgZWxlbWVudCB0byBiZSB1c2VkIGZvciBzcGVjaWZ5aW5nIHRoZSBvZmZzZXQuIFRoZSBkaXN0YW5jZSBmcm9tXG4gICAqICAgdGhlIHRvcCBvZiB0aGUgcGFnZSB0byB0aGUgZWxlbWVudCdzIGJvdHRvbSB3aWxsIGJlIHVzZWQgYXMgb2Zmc2V0LjxiciAvPlxuICAgKiAgICoqTm90ZSoqOiBUaGUgZWxlbWVudCB3aWxsIGJlIHRha2VuIGludG8gYWNjb3VudCBvbmx5IGFzIGxvbmcgYXMgaXRzIGBwb3NpdGlvbmAgaXMgc2V0IHRvXG4gICAqICAgYGZpeGVkYC4gVGhpcyBvcHRpb24gaXMgdXNlZnVsLCB3aGVuIGRlYWxpbmcgd2l0aCByZXNwb25zaXZlIG5hdmJhcnMvaGVhZGVycyB0aGF0IGFkanVzdFxuICAgKiAgIHRoZWlyIGhlaWdodCBhbmQvb3IgcG9zaXRpb25pbmcgYWNjb3JkaW5nIHRvIHRoZSB2aWV3cG9ydCdzIHNpemUuXG4gICAqXG4gICAqIDxiciAvPlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiBJbiBvcmRlciBmb3IgYHlPZmZzZXRgIHRvIHdvcmsgcHJvcGVybHksIHNjcm9sbGluZyBzaG91bGQgdGFrZSBwbGFjZSBvbiB0aGUgZG9jdW1lbnQncyByb290IGFuZFxuICAgKiBub3Qgc29tZSBjaGlsZCBlbGVtZW50LlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwiYW5jaG9yU2Nyb2xsRXhhbXBsZVwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8ZGl2IGlkPVwic2Nyb2xsQXJlYVwiIG5nLWNvbnRyb2xsZXI9XCJTY3JvbGxDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxhIG5nLWNsaWNrPVwiZ290b0JvdHRvbSgpXCI+R28gdG8gYm90dG9tPC9hPlxuICAgICAgICAgICA8YSBpZD1cImJvdHRvbVwiPjwvYT4gWW91J3JlIGF0IHRoZSBib3R0b20hXG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2FuY2hvclNjcm9sbEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ1Njcm9sbENvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnJGFuY2hvclNjcm9sbCcsXG4gICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkYW5jaG9yU2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZ290b0JvdHRvbSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIGxvY2F0aW9uLmhhc2ggdG8gdGhlIGlkIG9mXG4gICAgICAgICAgICAgICAgIC8vIHRoZSBlbGVtZW50IHlvdSB3aXNoIHRvIHNjcm9sbCB0by5cbiAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLmhhc2goJ2JvdHRvbScpO1xuXG4gICAgICAgICAgICAgICAgIC8vIGNhbGwgJGFuY2hvclNjcm9sbCgpXG4gICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICAjc2Nyb2xsQXJlYSB7XG4gICAgICAgICAgIGhlaWdodDogMjgwcHg7XG4gICAgICAgICAgIG92ZXJmbG93OiBhdXRvO1xuICAgICAgICAgfVxuXG4gICAgICAgICAjYm90dG9tIHtcbiAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgIG1hcmdpbi10b3A6IDIwMDBweDtcbiAgICAgICAgIH1cbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICpcbiAgICogPGhyIC8+XG4gICAqIFRoZSBleGFtcGxlIGJlbG93IGlsbHVzdHJhdGVzIHRoZSB1c2Ugb2YgYSB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0IChzcGVjaWZpZWQgYXMgYSBmaXhlZCB2YWx1ZSkuXG4gICAqIFNlZSB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCN5T2Zmc2V0ICRhbmNob3JTY3JvbGwueU9mZnNldH0gZm9yIG1vcmUgZGV0YWlscy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbW9kdWxlPVwiYW5jaG9yU2Nyb2xsT2Zmc2V0RXhhbXBsZVwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8ZGl2IGNsYXNzPVwiZml4ZWQtaGVhZGVyXCIgbmctY29udHJvbGxlcj1cImhlYWRlckN0cmxcIj5cbiAgICAgICAgICAgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwiZ290b0FuY2hvcih4KVwiIG5nLXJlcGVhdD1cInggaW4gWzEsMiwzLDQsNV1cIj5cbiAgICAgICAgICAgICBHbyB0byBhbmNob3Ige3t4fX1cbiAgICAgICAgICAgPC9hPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgICA8ZGl2IGlkPVwiYW5jaG9ye3t4fX1cIiBjbGFzcz1cImFuY2hvclwiIG5nLXJlcGVhdD1cInggaW4gWzEsMiwzLDQsNV1cIj5cbiAgICAgICAgICAgQW5jaG9yIHt7eH19IG9mIDVcbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnYW5jaG9yU2Nyb2xsT2Zmc2V0RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAucnVuKFsnJGFuY2hvclNjcm9sbCcsIGZ1bmN0aW9uKCRhbmNob3JTY3JvbGwpIHtcbiAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsLnlPZmZzZXQgPSA1MDsgICAvLyBhbHdheXMgc2Nyb2xsIGJ5IDUwIGV4dHJhIHBpeGVsc1xuICAgICAgICAgICB9XSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ2hlYWRlckN0cmwnLCBbJyRhbmNob3JTY3JvbGwnLCAnJGxvY2F0aW9uJywgJyRzY29wZScsXG4gICAgICAgICAgICAgZnVuY3Rpb24gKCRhbmNob3JTY3JvbGwsICRsb2NhdGlvbiwgJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZ290b0FuY2hvciA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgICAgICAgdmFyIG5ld0hhc2ggPSAnYW5jaG9yJyArIHg7XG4gICAgICAgICAgICAgICAgIGlmICgkbG9jYXRpb24uaGFzaCgpICE9PSBuZXdIYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSAkbG9jYXRpb24uaGFzaCB0byBgbmV3SGFzaGAgYW5kXG4gICAgICAgICAgICAgICAgICAgLy8gJGFuY2hvclNjcm9sbCB3aWxsIGF1dG9tYXRpY2FsbHkgc2Nyb2xsIHRvIGl0XG4gICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLmhhc2goJ2FuY2hvcicgKyB4KTtcbiAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAvLyBjYWxsICRhbmNob3JTY3JvbGwoKSBleHBsaWNpdGx5LFxuICAgICAgICAgICAgICAgICAgIC8vIHNpbmNlICRsb2NhdGlvbi5oYXNoIGhhc24ndCBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgXSk7XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgIGJvZHkge1xuICAgICAgICAgICBwYWRkaW5nLXRvcDogNTBweDtcbiAgICAgICAgIH1cblxuICAgICAgICAgLmFuY2hvciB7XG4gICAgICAgICAgIGJvcmRlcjogMnB4IGRhc2hlZCBEYXJrT3JjaGlkO1xuICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDEwcHggMjAwcHggMTBweDtcbiAgICAgICAgIH1cblxuICAgICAgICAgLmZpeGVkLWhlYWRlciB7XG4gICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yKTtcbiAgICAgICAgICAgaGVpZ2h0OiA1MHB4O1xuICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgIHRvcDogMDsgbGVmdDogMDsgcmlnaHQ6IDA7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5maXhlZC1oZWFkZXIgPiBhIHtcbiAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICBtYXJnaW46IDVweCAxNXB4O1xuICAgICAgICAgfVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRsb2NhdGlvbicsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHdpbmRvdywgJGxvY2F0aW9uLCAkcm9vdFNjb3BlKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gJHdpbmRvdy5kb2N1bWVudDtcblxuICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgZmlyc3QgYW5jaG9yIGZyb20gYSBOb2RlTGlzdFxuICAgIC8vICh1c2luZyBgQXJyYXkjc29tZSgpYCBpbnN0ZWFkIG9mIGBhbmd1bGFyI2ZvckVhY2goKWAgc2luY2UgaXQncyBtb3JlIHBlcmZvcm1hbnRcbiAgICAvLyAgYW5kIHdvcmtpbmcgaW4gYWxsIHN1cHBvcnRlZCBicm93c2Vycy4pXG4gICAgZnVuY3Rpb24gZ2V0Rmlyc3RBbmNob3IobGlzdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XG4gICAgICBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGxpc3QsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKG5vZGVOYW1lXyhlbGVtZW50KSA9PT0gJ2EnKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZWxlbWVudDtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFlPZmZzZXQoKSB7XG5cbiAgICAgIHZhciBvZmZzZXQgPSBzY3JvbGwueU9mZnNldDtcblxuICAgICAgaWYgKGlzRnVuY3Rpb24ob2Zmc2V0KSkge1xuICAgICAgICBvZmZzZXQgPSBvZmZzZXQoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNFbGVtZW50KG9mZnNldCkpIHtcbiAgICAgICAgdmFyIGVsZW0gPSBvZmZzZXRbMF07XG4gICAgICAgIHZhciBzdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcbiAgICAgICAgaWYgKHN0eWxlLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghaXNOdW1iZXIob2Zmc2V0KSkge1xuICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvKGVsZW0pIHtcbiAgICAgIGlmIChlbGVtKSB7XG4gICAgICAgIGVsZW0uc2Nyb2xsSW50b1ZpZXcoKTtcblxuICAgICAgICB2YXIgb2Zmc2V0ID0gZ2V0WU9mZnNldCgpO1xuXG4gICAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgICAvLyBgb2Zmc2V0YCBpcyB0aGUgbnVtYmVyIG9mIHBpeGVscyB3ZSBzaG91bGQgc2Nyb2xsIFVQIGluIG9yZGVyIHRvIGFsaWduIGBlbGVtYCBwcm9wZXJseS5cbiAgICAgICAgICAvLyBUaGlzIGlzIHRydWUgT05MWSBpZiB0aGUgY2FsbCB0byBgZWxlbS5zY3JvbGxJbnRvVmlldygpYCBpbml0aWFsbHkgYWxpZ25zIGBlbGVtYCBhdCB0aGVcbiAgICAgICAgICAvLyB0b3Agb2YgdGhlIHZpZXdwb3J0LlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gSUYgdGhlIG51bWJlciBvZiBwaXhlbHMgZnJvbSB0aGUgdG9wIG9mIGBlbGVtYCB0byB0aGUgZW5kIG9mIHRoZSBwYWdlJ3MgY29udGVudCBpcyBsZXNzXG4gICAgICAgICAgLy8gdGhhbiB0aGUgaGVpZ2h0IG9mIHRoZSB2aWV3cG9ydCwgdGhlbiBgZWxlbS5zY3JvbGxJbnRvVmlldygpYCB3aWxsIGFsaWduIHRoZSBgZWxlbWAgc29tZVxuICAgICAgICAgIC8vIHdheSBkb3duIHRoZSBwYWdlLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gVGhpcyBpcyBvZnRlbiB0aGUgY2FzZSBmb3IgZWxlbWVudHMgbmVhciB0aGUgYm90dG9tIG9mIHRoZSBwYWdlLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gSW4gc3VjaCBjYXNlcyB3ZSBkbyBub3QgbmVlZCB0byBzY3JvbGwgdGhlIHdob2xlIGBvZmZzZXRgIHVwLCBqdXN0IHRoZSBkaWZmZXJlbmNlIGJldHdlZW5cbiAgICAgICAgICAvLyB0aGUgdG9wIG9mIHRoZSBlbGVtZW50IGFuZCB0aGUgb2Zmc2V0LCB3aGljaCBpcyBlbm91Z2ggdG8gYWxpZ24gdGhlIHRvcCBvZiBgZWxlbWAgYXQgdGhlXG4gICAgICAgICAgLy8gZGVzaXJlZCBwb3NpdGlvbi5cbiAgICAgICAgICB2YXIgZWxlbVRvcCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgICAgICR3aW5kb3cuc2Nyb2xsQnkoMCwgZWxlbVRvcCAtIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsKGhhc2gpIHtcbiAgICAgIGhhc2ggPSBpc1N0cmluZyhoYXNoKSA/IGhhc2ggOiAkbG9jYXRpb24uaGFzaCgpO1xuICAgICAgdmFyIGVsbTtcblxuICAgICAgLy8gZW1wdHkgaGFzaCwgc2Nyb2xsIHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2VcbiAgICAgIGlmICghaGFzaCkgc2Nyb2xsVG8obnVsbCk7XG5cbiAgICAgIC8vIGVsZW1lbnQgd2l0aCBnaXZlbiBpZFxuICAgICAgZWxzZSBpZiAoKGVsbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhhc2gpKSkgc2Nyb2xsVG8oZWxtKTtcblxuICAgICAgLy8gZmlyc3QgYW5jaG9yIHdpdGggZ2l2ZW4gbmFtZSA6LURcbiAgICAgIGVsc2UgaWYgKChlbG0gPSBnZXRGaXJzdEFuY2hvcihkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShoYXNoKSkpKSBzY3JvbGxUbyhlbG0pO1xuXG4gICAgICAvLyBubyBlbGVtZW50IGFuZCBoYXNoID09ICd0b3AnLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZVxuICAgICAgZWxzZSBpZiAoaGFzaCA9PT0gJ3RvcCcpIHNjcm9sbFRvKG51bGwpO1xuICAgIH1cblxuICAgIC8vIGRvZXMgbm90IHNjcm9sbCB3aGVuIHVzZXIgY2xpY2tzIG9uIGFuY2hvciBsaW5rIHRoYXQgaXMgY3VycmVudGx5IG9uXG4gICAgLy8gKG5vIHVybCBjaGFuZ2UsIG5vICRsb2NhdGlvbi5oYXNoKCkgY2hhbmdlKSwgYnJvd3NlciBuYXRpdmUgZG9lcyBzY3JvbGxcbiAgICBpZiAoYXV0b1Njcm9sbGluZ0VuYWJsZWQpIHtcbiAgICAgICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGF1dG9TY3JvbGxXYXRjaCgpIHtyZXR1cm4gJGxvY2F0aW9uLmhhc2goKTt9LFxuICAgICAgICBmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2hBY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICAvLyBza2lwIHRoZSBpbml0aWFsIHNjcm9sbCBpZiAkbG9jYXRpb24uaGFzaCBpcyBlbXB0eVxuICAgICAgICAgIGlmIChuZXdWYWwgPT09IG9sZFZhbCAmJiBuZXdWYWwgPT09ICcnKSByZXR1cm47XG5cbiAgICAgICAgICBqcUxpdGVEb2N1bWVudExvYWRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhzY3JvbGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2Nyb2xsO1xuICB9XTtcbn1cblxudmFyICRhbmltYXRlTWluRXJyID0gbWluRXJyKCckYW5pbWF0ZScpO1xudmFyIEVMRU1FTlRfTk9ERSA9IDE7XG52YXIgTkdfQU5JTUFURV9DTEFTU05BTUUgPSAnbmctYW5pbWF0ZSc7XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NlcyhhLGIpIHtcbiAgaWYgKCFhICYmICFiKSByZXR1cm4gJyc7XG4gIGlmICghYSkgcmV0dXJuIGI7XG4gIGlmICghYikgcmV0dXJuIGE7XG4gIGlmIChpc0FycmF5KGEpKSBhID0gYS5qb2luKCcgJyk7XG4gIGlmIChpc0FycmF5KGIpKSBiID0gYi5qb2luKCcgJyk7XG4gIHJldHVybiBhICsgJyAnICsgYjtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdEVsZW1lbnROb2RlKGVsZW1lbnQpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVsbSA9IGVsZW1lbnRbaV07XG4gICAgaWYgKGVsbS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICByZXR1cm4gZWxtO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzcGxpdENsYXNzZXMoY2xhc3Nlcykge1xuICBpZiAoaXNTdHJpbmcoY2xhc3NlcykpIHtcbiAgICBjbGFzc2VzID0gY2xhc3Nlcy5zcGxpdCgnICcpO1xuICB9XG5cbiAgLy8gVXNlIGNyZWF0ZU1hcCgpIHRvIHByZXZlbnQgY2xhc3MgYXNzdW1wdGlvbnMgaW52b2x2aW5nIHByb3BlcnR5IG5hbWVzIGluXG4gIC8vIE9iamVjdC5wcm90b3R5cGVcbiAgdmFyIG9iaiA9IGNyZWF0ZU1hcCgpO1xuICBmb3JFYWNoKGNsYXNzZXMsIGZ1bmN0aW9uKGtsYXNzKSB7XG4gICAgLy8gc29tZXRpbWVzIHRoZSBzcGxpdCBsZWF2ZXMgZW1wdHkgc3RyaW5nIHZhbHVlc1xuICAgIC8vIGluY2FzZSBleHRyYSBzcGFjZXMgd2VyZSBhcHBsaWVkIHRvIHRoZSBvcHRpb25zXG4gICAgaWYgKGtsYXNzLmxlbmd0aCkge1xuICAgICAgb2JqW2tsYXNzXSA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cblxuLy8gaWYgYW55IG90aGVyIHR5cGUgb2Ygb3B0aW9ucyB2YWx1ZSBiZXNpZGVzIGFuIE9iamVjdCB2YWx1ZSBpc1xuLy8gcGFzc2VkIGludG8gdGhlICRhbmltYXRlLm1ldGhvZCgpIGFuaW1hdGlvbiB0aGVuIHRoaXMgaGVscGVyIGNvZGVcbi8vIHdpbGwgYmUgcnVuIHdoaWNoIHdpbGwgaWdub3JlIGl0LiBXaGlsZSB0aGlzIHBhdGNoIGlzIG5vdCB0aGVcbi8vIGdyZWF0ZXN0IHNvbHV0aW9uIHRvIHRoaXMsIGEgbG90IG9mIGV4aXN0aW5nIHBsdWdpbnMgZGVwZW5kIG9uXG4vLyAkYW5pbWF0ZSB0byBlaXRoZXIgY2FsbCB0aGUgY2FsbGJhY2sgKDwgMS4yKSBvciByZXR1cm4gYSBwcm9taXNlXG4vLyB0aGF0IGNhbiBiZSBjaGFuZ2VkLiBUaGlzIGhlbHBlciBmdW5jdGlvbiBlbnN1cmVzIHRoYXQgdGhlIG9wdGlvbnNcbi8vIGFyZSB3aXBlZCBjbGVhbiBpbmNhc2UgYSBjYWxsYmFjayBmdW5jdGlvbiBpcyBwcm92aWRlZC5cbmZ1bmN0aW9uIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gIHJldHVybiBpc09iamVjdChvcHRpb25zKVxuICAgICAgPyBvcHRpb25zXG4gICAgICA6IHt9O1xufVxuXG52YXIgJCRDb3JlQW5pbWF0ZVJ1bm5lclByb3ZpZGVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFsnJHEnLCAnJCRyQUYnLCBmdW5jdGlvbigkcSwgJCRyQUYpIHtcbiAgICBmdW5jdGlvbiBBbmltYXRlUnVubmVyKCkge31cbiAgICBBbmltYXRlUnVubmVyLmFsbCA9IG5vb3A7XG4gICAgQW5pbWF0ZVJ1bm5lci5jaGFpbiA9IG5vb3A7XG4gICAgQW5pbWF0ZVJ1bm5lci5wcm90b3R5cGUgPSB7XG4gICAgICBlbmQ6IG5vb3AsXG4gICAgICBjYW5jZWw6IG5vb3AsXG4gICAgICByZXN1bWU6IG5vb3AsXG4gICAgICBwYXVzZTogbm9vcCxcbiAgICAgIGNvbXBsZXRlOiBub29wLFxuICAgICAgdGhlbjogZnVuY3Rpb24ocGFzcywgZmFpbCkge1xuICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KS50aGVuKHBhc3MsIGZhaWwpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFuaW1hdGVSdW5uZXI7XG4gIH1dO1xufTtcblxuLy8gdGhpcyBpcyBwcmVmaXhlZCB3aXRoIENvcmUgc2luY2UgaXQgY29uZmxpY3RzIHdpdGhcbi8vIHRoZSBhbmltYXRlUXVldWVQcm92aWRlciBkZWZpbmVkIGluIG5nQW5pbWF0ZS9hbmltYXRlUXVldWUuanNcbnZhciAkJENvcmVBbmltYXRlUXVldWVQcm92aWRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcG9zdERpZ2VzdFF1ZXVlID0gbmV3IEhhc2hNYXAoKTtcbiAgdmFyIHBvc3REaWdlc3RFbGVtZW50cyA9IFtdO1xuXG4gIHRoaXMuJGdldCA9IFsnJCRBbmltYXRlUnVubmVyJywgJyRyb290U2NvcGUnLFxuICAgICAgIGZ1bmN0aW9uKCQkQW5pbWF0ZVJ1bm5lciwgICAkcm9vdFNjb3BlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVuYWJsZWQ6IG5vb3AsXG4gICAgICBvbjogbm9vcCxcbiAgICAgIG9mZjogbm9vcCxcbiAgICAgIHBpbjogbm9vcCxcblxuICAgICAgcHVzaDogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGRvbU9wZXJhdGlvbikge1xuICAgICAgICBkb21PcGVyYXRpb24gICAgICAgICYmIGRvbU9wZXJhdGlvbigpO1xuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBvcHRpb25zLmZyb20gICAgICAgICYmIGVsZW1lbnQuY3NzKG9wdGlvbnMuZnJvbSk7XG4gICAgICAgIG9wdGlvbnMudG8gICAgICAgICAgJiYgZWxlbWVudC5jc3Mob3B0aW9ucy50byk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYWRkQ2xhc3MgfHwgb3B0aW9ucy5yZW1vdmVDbGFzcykge1xuICAgICAgICAgIGFkZFJlbW92ZUNsYXNzZXNQb3N0RGlnZXN0KGVsZW1lbnQsIG9wdGlvbnMuYWRkQ2xhc3MsIG9wdGlvbnMucmVtb3ZlQ2xhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyAkJEFuaW1hdGVSdW5uZXIoKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gICAgICB9XG4gICAgfTtcblxuXG4gICAgZnVuY3Rpb24gdXBkYXRlRGF0YShkYXRhLCBjbGFzc2VzLCB2YWx1ZSkge1xuICAgICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIGlmIChjbGFzc2VzKSB7XG4gICAgICAgIGNsYXNzZXMgPSBpc1N0cmluZyhjbGFzc2VzKSA/IGNsYXNzZXMuc3BsaXQoJyAnKSA6XG4gICAgICAgICAgICAgICAgICBpc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IFtdO1xuICAgICAgICBmb3JFYWNoKGNsYXNzZXMsIGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgZGF0YVtjbGFzc05hbWVdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUNTU0NsYXNzQ2hhbmdlcygpIHtcbiAgICAgIGZvckVhY2gocG9zdERpZ2VzdEVsZW1lbnRzLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHZhciBkYXRhID0gcG9zdERpZ2VzdFF1ZXVlLmdldChlbGVtZW50KTtcbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICB2YXIgZXhpc3RpbmcgPSBzcGxpdENsYXNzZXMoZWxlbWVudC5hdHRyKCdjbGFzcycpKTtcbiAgICAgICAgICB2YXIgdG9BZGQgPSAnJztcbiAgICAgICAgICB2YXIgdG9SZW1vdmUgPSAnJztcbiAgICAgICAgICBmb3JFYWNoKGRhdGEsIGZ1bmN0aW9uKHN0YXR1cywgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICB2YXIgaGFzQ2xhc3MgPSAhIWV4aXN0aW5nW2NsYXNzTmFtZV07XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSBoYXNDbGFzcykge1xuICAgICAgICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgdG9BZGQgKz0gKHRvQWRkLmxlbmd0aCA/ICcgJyA6ICcnKSArIGNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b1JlbW92ZSArPSAodG9SZW1vdmUubGVuZ3RoID8gJyAnIDogJycpICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uKGVsbSkge1xuICAgICAgICAgICAgdG9BZGQgICAgJiYganFMaXRlQWRkQ2xhc3MoZWxtLCB0b0FkZCk7XG4gICAgICAgICAgICB0b1JlbW92ZSAmJiBqcUxpdGVSZW1vdmVDbGFzcyhlbG0sIHRvUmVtb3ZlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwb3N0RGlnZXN0UXVldWUucmVtb3ZlKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHBvc3REaWdlc3RFbGVtZW50cy5sZW5ndGggPSAwO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QoZWxlbWVudCwgYWRkLCByZW1vdmUpIHtcbiAgICAgIHZhciBkYXRhID0gcG9zdERpZ2VzdFF1ZXVlLmdldChlbGVtZW50KSB8fCB7fTtcblxuICAgICAgdmFyIGNsYXNzZXNBZGRlZCA9IHVwZGF0ZURhdGEoZGF0YSwgYWRkLCB0cnVlKTtcbiAgICAgIHZhciBjbGFzc2VzUmVtb3ZlZCA9IHVwZGF0ZURhdGEoZGF0YSwgcmVtb3ZlLCBmYWxzZSk7XG5cbiAgICAgIGlmIChjbGFzc2VzQWRkZWQgfHwgY2xhc3Nlc1JlbW92ZWQpIHtcblxuICAgICAgICBwb3N0RGlnZXN0UXVldWUucHV0KGVsZW1lbnQsIGRhdGEpO1xuICAgICAgICBwb3N0RGlnZXN0RWxlbWVudHMucHVzaChlbGVtZW50KTtcblxuICAgICAgICBpZiAocG9zdERpZ2VzdEVsZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGhhbmRsZUNTU0NsYXNzQ2hhbmdlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgJGFuaW1hdGUgdGhhdCBkb2Vzbid0IHBlcmZvcm0gYW55IGFuaW1hdGlvbnMsIGluc3RlYWQganVzdFxuICogc3luY2hyb25vdXNseSBwZXJmb3JtcyBET00gdXBkYXRlcyBhbmQgcmVzb2x2ZXMgdGhlIHJldHVybmVkIHJ1bm5lciBwcm9taXNlLlxuICpcbiAqIEluIG9yZGVyIHRvIGVuYWJsZSBhbmltYXRpb25zIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaGFzIHRvIGJlIGxvYWRlZC5cbiAqXG4gKiBUbyBzZWUgdGhlIGZ1bmN0aW9uYWwgaW1wbGVtZW50YXRpb24gY2hlY2sgb3V0IGBzcmMvbmdBbmltYXRlL2FuaW1hdGUuanNgLlxuICovXG52YXIgJEFuaW1hdGVQcm92aWRlciA9IFsnJHByb3ZpZGUnLCBmdW5jdGlvbigkcHJvdmlkZSkge1xuICB2YXIgcHJvdmlkZXIgPSB0aGlzO1xuXG4gIHRoaXMuJCRyZWdpc3RlcmVkQW5pbWF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIG5ldyBpbmplY3RhYmxlIGFuaW1hdGlvbiBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBwcm9kdWNlcyB0aGVcbiAgICogYW5pbWF0aW9uIG9iamVjdCB3aGljaCBjb250YWlucyBjYWxsYmFjayBmdW5jdGlvbnMgZm9yIGVhY2ggZXZlbnQgdGhhdCBpcyBleHBlY3RlZCB0byBiZVxuICAgKiBhbmltYXRlZC5cbiAgICpcbiAgICogICAqIGBldmVudEZuYDogYGZ1bmN0aW9uKGVsZW1lbnQsIC4uLiAsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylgXG4gICAqICAgVGhlIGVsZW1lbnQgdG8gYW5pbWF0ZSwgdGhlIGBkb25lRnVuY3Rpb25gIGFuZCB0aGUgb3B0aW9ucyBmZWQgaW50byB0aGUgYW5pbWF0aW9uLiBEZXBlbmRpbmdcbiAgICogICBvbiB0aGUgdHlwZSBvZiBhbmltYXRpb24gYWRkaXRpb25hbCBhcmd1bWVudHMgd2lsbCBiZSBpbmplY3RlZCBpbnRvIHRoZSBhbmltYXRpb24gZnVuY3Rpb24uIFRoZVxuICAgKiAgIGxpc3QgYmVsb3cgZXhwbGFpbnMgdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZXMgZm9yIHRoZSBkaWZmZXJlbnQgYW5pbWF0aW9uIG1ldGhvZHM6XG4gICAqXG4gICAqICAgLSBzZXRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgYWRkZWRDbGFzc2VzLCByZW1vdmVkQ2xhc3NlcywgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZGVkQ2xhc3NlcywgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIHJlbW92ZWRDbGFzc2VzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqICAgLSBlbnRlciwgbGVhdmUsIG1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylcbiAgICogICAtIGFuaW1hdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb21TdHlsZXMsIHRvU3R5bGVzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqXG4gICAqICAgTWFrZSBzdXJlIHRvIHRyaWdnZXIgdGhlIGBkb25lRnVuY3Rpb25gIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBmdWxseSBjb21wbGV0ZS5cbiAgICpcbiAgICogYGBganNcbiAgICogICByZXR1cm4ge1xuICAgKiAgICAgLy9lbnRlciwgbGVhdmUsIG1vdmUgc2lnbmF0dXJlXG4gICAqICAgICBldmVudEZuIDogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSwgb3B0aW9ucykge1xuICAgKiAgICAgICAvL2NvZGUgdG8gcnVuIHRoZSBhbmltYXRpb25cbiAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcbiAgICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIGVuZEZ1bmN0aW9uKHdhc0NhbmNlbGxlZCkge1xuICAgKiAgICAgICAgIC8vY29kZSB0byBjYW5jZWwgdGhlIGFuaW1hdGlvblxuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGFuaW1hdGlvbiAodGhpcyBpcyB3aGF0IHRoZSBjbGFzcy1iYXNlZCBDU1MgdmFsdWUgd2lsbCBiZSBjb21wYXJlZCB0bykuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgVGhlIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHRvIHJldHVybiB0aGUgYW5pbWF0aW9uXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LlxuICAgKi9cbiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWUsIGZhY3RvcnkpIHtcbiAgICBpZiAobmFtZSAmJiBuYW1lLmNoYXJBdCgwKSAhPT0gJy4nKSB7XG4gICAgICB0aHJvdyAkYW5pbWF0ZU1pbkVycignbm90Y3NlbCcsIFwiRXhwZWN0aW5nIGNsYXNzIHNlbGVjdG9yIHN0YXJ0aW5nIHdpdGggJy4nIGdvdCAnezB9Jy5cIiwgbmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IG5hbWUgKyAnLWFuaW1hdGlvbic7XG4gICAgcHJvdmlkZXIuJCRyZWdpc3RlcmVkQW5pbWF0aW9uc1tuYW1lLnN1YnN0cigxKV0gPSBrZXk7XG4gICAgJHByb3ZpZGUuZmFjdG9yeShrZXksIGZhY3RvcnkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjY2xhc3NOYW1lRmlsdGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGFuZC9vciByZXR1cm5zIHRoZSBDU1MgY2xhc3MgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgY2hlY2tlZCB3aGVuIHBlcmZvcm1pbmdcbiAgICogYW4gYW5pbWF0aW9uLiBVcG9uIGJvb3RzdHJhcCB0aGUgY2xhc3NOYW1lRmlsdGVyIHZhbHVlIGlzIG5vdCBzZXQgYXQgYWxsIGFuZCB3aWxsXG4gICAqIHRoZXJlZm9yZSBlbmFibGUgJGFuaW1hdGUgdG8gYXR0ZW1wdCB0byBwZXJmb3JtIGFuIGFuaW1hdGlvbiBvbiBhbnkgZWxlbWVudCB0aGF0IGlzIHRyaWdnZXJlZC5cbiAgICogV2hlbiBzZXR0aW5nIHRoZSBgY2xhc3NOYW1lRmlsdGVyYCB2YWx1ZSwgYW5pbWF0aW9ucyB3aWxsIG9ubHkgYmUgcGVyZm9ybWVkIG9uIGVsZW1lbnRzXG4gICAqIHRoYXQgc3VjY2Vzc2Z1bGx5IG1hdGNoIHRoZSBmaWx0ZXIgZXhwcmVzc2lvbi4gVGhpcyBpbiB0dXJuIGNhbiBib29zdCBwZXJmb3JtYW5jZVxuICAgKiBmb3IgbG93LXBvd2VyZWQgZGV2aWNlcyBhcyB3ZWxsIGFzIGFwcGxpY2F0aW9ucyBjb250YWluaW5nIGEgbG90IG9mIHN0cnVjdHVyYWwgb3BlcmF0aW9ucy5cbiAgICogQHBhcmFtIHtSZWdFeHA9fSBleHByZXNzaW9uIFRoZSBjbGFzc05hbWUgZXhwcmVzc2lvbiB3aGljaCB3aWxsIGJlIGNoZWNrZWQgYWdhaW5zdCBhbGwgYW5pbWF0aW9uc1xuICAgKiBAcmV0dXJuIHtSZWdFeHB9IFRoZSBjdXJyZW50IENTUyBjbGFzc05hbWUgZXhwcmVzc2lvbiB2YWx1ZS4gSWYgbnVsbCB0aGVuIHRoZXJlIGlzIG5vIGV4cHJlc3Npb24gdmFsdWVcbiAgICovXG4gIHRoaXMuY2xhc3NOYW1lRmlsdGVyID0gZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLiQkY2xhc3NOYW1lRmlsdGVyID0gKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBSZWdFeHApID8gZXhwcmVzc2lvbiA6IG51bGw7XG4gICAgICBpZiAodGhpcy4kJGNsYXNzTmFtZUZpbHRlcikge1xuICAgICAgICB2YXIgcmVzZXJ2ZWRSZWdleCA9IG5ldyBSZWdFeHAoXCIoXFxcXHMrfFxcXFwvKVwiICsgTkdfQU5JTUFURV9DTEFTU05BTUUgKyBcIihcXFxccyt8XFxcXC8pXCIpO1xuICAgICAgICBpZiAocmVzZXJ2ZWRSZWdleC50ZXN0KHRoaXMuJCRjbGFzc05hbWVGaWx0ZXIudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICB0aHJvdyAkYW5pbWF0ZU1pbkVycignbm9uZ2NscycsJyRhbmltYXRlUHJvdmlkZXIuY2xhc3NOYW1lRmlsdGVyKHJlZ2V4KSBwcm9oaWJpdHMgYWNjZXB0aW5nIGEgcmVnZXggdmFsdWUgd2hpY2ggbWF0Y2hlcy9jb250YWlucyB0aGUgXCJ7MH1cIiBDU1MgY2xhc3MuJywgTkdfQU5JTUFURV9DTEFTU05BTUUpO1xuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuJCRjbGFzc05hbWVGaWx0ZXI7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gWyckJGFuaW1hdGVRdWV1ZScsIGZ1bmN0aW9uKCQkYW5pbWF0ZVF1ZXVlKSB7XG4gICAgZnVuY3Rpb24gZG9tSW5zZXJ0KGVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIGFmdGVyRWxlbWVudCkge1xuICAgICAgLy8gaWYgZm9yIHNvbWUgcmVhc29uIHRoZSBwcmV2aW91cyBlbGVtZW50IHdhcyByZW1vdmVkXG4gICAgICAvLyBmcm9tIHRoZSBkb20gc29tZXRpbWUgYmVmb3JlIHRoaXMgY29kZSBydW5zIHRoZW4gbGV0J3NcbiAgICAgIC8vIGp1c3Qgc3RpY2sgdG8gdXNpbmcgdGhlIHBhcmVudCBlbGVtZW50IGFzIHRoZSBhbmNob3JcbiAgICAgIGlmIChhZnRlckVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFmdGVyTm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShhZnRlckVsZW1lbnQpO1xuICAgICAgICBpZiAoYWZ0ZXJOb2RlICYmICFhZnRlck5vZGUucGFyZW50Tm9kZSAmJiAhYWZ0ZXJOb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICAgICAgICBhZnRlckVsZW1lbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhZnRlckVsZW1lbnQgPyBhZnRlckVsZW1lbnQuYWZ0ZXIoZWxlbWVudCkgOiBwYXJlbnRFbGVtZW50LnByZXBlbmQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkYW5pbWF0ZVxuICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgJGFuaW1hdGUgc2VydmljZSBleHBvc2VzIGEgc2VyaWVzIG9mIERPTSB1dGlsaXR5IG1ldGhvZHMgdGhhdCBwcm92aWRlIHN1cHBvcnRcbiAgICAgKiBmb3IgYW5pbWF0aW9uIGhvb2tzLiBUaGUgZGVmYXVsdCBiZWhhdmlvciBpcyB0aGUgYXBwbGljYXRpb24gb2YgRE9NIG9wZXJhdGlvbnMsIGhvd2V2ZXIsXG4gICAgICogd2hlbiBhbiBhbmltYXRpb24gaXMgZGV0ZWN0ZWQgKGFuZCBhbmltYXRpb25zIGFyZSBlbmFibGVkKSwgJGFuaW1hdGUgd2lsbCBkbyB0aGUgaGVhdnkgbGlmdGluZ1xuICAgICAqIHRvIGVuc3VyZSB0aGF0IGFuaW1hdGlvbiBydW5zIHdpdGggdGhlIHRyaWdnZXJlZCBET00gb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCAkYW5pbWF0ZSBkb2Vzbid0IHRyaWdnZXIgYW55IGFuaW1hdGlvbnMuIFRoaXMgaXMgYmVjYXVzZSB0aGUgYG5nQW5pbWF0ZWAgbW9kdWxlIGlzbid0XG4gICAgICogaW5jbHVkZWQgYW5kIG9ubHkgd2hlbiBpdCBpcyBhY3RpdmUgdGhlbiB0aGUgYW5pbWF0aW9uIGhvb2tzIHRoYXQgYCRhbmltYXRlYCB0cmlnZ2VycyB3aWxsIGJlXG4gICAgICogZnVuY3Rpb25hbC4gT25jZSBhY3RpdmUgdGhlbiBhbGwgc3RydWN0dXJhbCBgbmctYCBkaXJlY3RpdmVzIHdpbGwgdHJpZ2dlciBhbmltYXRpb25zIGFzIHRoZXkgcGVyZm9ybVxuICAgICAqIHRoZWlyIERPTS1yZWxhdGVkIG9wZXJhdGlvbnMgKGVudGVyLCBsZWF2ZSBhbmQgbW92ZSkuIE90aGVyIGRpcmVjdGl2ZXMgc3VjaCBhcyBgbmdDbGFzc2AsXG4gICAgICogYG5nU2hvd2AsIGBuZ0hpZGVgIGFuZCBgbmdNZXNzYWdlc2AgYWxzbyBwcm92aWRlIHN1cHBvcnQgZm9yIGFuaW1hdGlvbnMuXG4gICAgICpcbiAgICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHRoZWAkYW5pbWF0ZWAgc2VydmljZSBpcyBhbHdheXMgdXNlZCB3aGVuIGV4ZWN1dGluZyBET00tcmVsYXRlZCBwcm9jZWR1cmVzIHdpdGhpbiBkaXJlY3RpdmVzLlxuICAgICAqXG4gICAgICogVG8gbGVhcm4gbW9yZSBhYm91dCBlbmFibGluZyBhbmltYXRpb24gc3VwcG9ydCwgY2xpY2sgaGVyZSB0byB2aXNpdCB0aGVcbiAgICAgKiB7QGxpbmsgbmdBbmltYXRlIG5nQW5pbWF0ZSBtb2R1bGUgcGFnZX0uXG4gICAgICovXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIHdlIGRvbid0IGNhbGwgaXQgZGlyZWN0bHkgc2luY2Ugbm9uLWV4aXN0YW50IGFyZ3VtZW50cyBtYXlcbiAgICAgIC8vIGJlIGludGVycHJldGVkIGFzIG51bGwgd2l0aGluIHRoZSBzdWIgZW5hYmxlZCBmdW5jdGlvblxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXRzIHVwIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGZpcmUgd2hlbmV2ZXIgdGhlIGFuaW1hdGlvbiBldmVudCAoZW50ZXIsIGxlYXZlLCBtb3ZlLCBldGMuLi4pXG4gICAgICAgKiAgICBoYXMgZmlyZWQgb24gdGhlIGdpdmVuIGVsZW1lbnQgb3IgYW1vbmcgYW55IG9mIGl0cyBjaGlsZHJlbi4gT25jZSB0aGUgbGlzdGVuZXIgaXMgZmlyZWQsIHRoZSBwcm92aWRlZCBjYWxsYmFja1xuICAgICAgICogICAgaXMgZmlyZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtczpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogJGFuaW1hdGUub24oJ2VudGVyJywgY29udGFpbmVyLFxuICAgICAgICogICAgZnVuY3Rpb24gY2FsbGJhY2soZWxlbWVudCwgcGhhc2UpIHtcbiAgICAgICAqICAgICAgLy8gY29vbCB3ZSBkZXRlY3RlZCBhbiBlbnRlciBhbmltYXRpb24gd2l0aGluIHRoZSBjb250YWluZXJcbiAgICAgICAqICAgIH1cbiAgICAgICAqICk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgdGhlIGFuaW1hdGlvbiBldmVudCB0aGF0IHdpbGwgYmUgY2FwdHVyZWQgKGUuZy4gZW50ZXIsIGxlYXZlLCBtb3ZlLCBhZGRDbGFzcywgcmVtb3ZlQ2xhc3MsIGV0Yy4uLilcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIHRoZSBjb250YWluZXIgZWxlbWVudCB0aGF0IHdpbGwgY2FwdHVyZSBlYWNoIG9mIHRoZSBhbmltYXRpb24gZXZlbnRzIHRoYXQgYXJlIGZpcmVkIG9uIGl0c2VsZlxuICAgICAgICogICAgIGFzIHdlbGwgYXMgYW1vbmcgaXRzIGNoaWxkcmVuXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIGxpc3RlbmVyIGlzIHRyaWdnZXJlZFxuICAgICAgICpcbiAgICAgICAqIFRoZSBhcmd1bWVudHMgcHJlc2VudCBpbiB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gYXJlOlxuICAgICAgICogKiBgZWxlbWVudGAgLSBUaGUgY2FwdHVyZWQgRE9NIGVsZW1lbnQgdGhhdCB0aGUgYW5pbWF0aW9uIHdhcyBmaXJlZCBvbi5cbiAgICAgICAqICogYHBoYXNlYCAtIFRoZSBwaGFzZSBvZiB0aGUgYW5pbWF0aW9uLiBUaGUgdHdvIHBvc3NpYmxlIHBoYXNlcyBhcmUgKipzdGFydCoqICh3aGVuIHRoZSBhbmltYXRpb24gc3RhcnRzKSBhbmQgKipjbG9zZSoqICh3aGVuIGl0IGVuZHMpLlxuICAgICAgICovXG4gICAgICBvbjogJCRhbmltYXRlUXVldWUub24sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI29mZlxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBEZXJlZ2lzdGVycyBhbiBldmVudCBsaXN0ZW5lciBiYXNlZCBvbiB0aGUgZXZlbnQgd2hpY2ggaGFzIGJlZW4gYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm92aWRlZCBlbGVtZW50LiBUaGlzIG1ldGhvZFxuICAgICAgICogY2FuIGJlIHVzZWQgaW4gdGhyZWUgZGlmZmVyZW50IHdheXMgZGVwZW5kaW5nIG9uIHRoZSBhcmd1bWVudHM6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqIC8vIHJlbW92ZSBhbGwgdGhlIGFuaW1hdGlvbiBldmVudCBsaXN0ZW5lcnMgbGlzdGVuaW5nIGZvciBgZW50ZXJgXG4gICAgICAgKiAkYW5pbWF0ZS5vZmYoJ2VudGVyJyk7XG4gICAgICAgKlxuICAgICAgICogLy8gcmVtb3ZlIGFsbCB0aGUgYW5pbWF0aW9uIGV2ZW50IGxpc3RlbmVycyBsaXN0ZW5pbmcgZm9yIGBlbnRlcmAgb24gdGhlIGdpdmVuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlblxuICAgICAgICogJGFuaW1hdGUub2ZmKCdlbnRlcicsIGNvbnRhaW5lcik7XG4gICAgICAgKlxuICAgICAgICogLy8gcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciBmdW5jdGlvbiBwcm92aWRlZCBieSBgbGlzdGVuZXJGbmAgdGhhdCBpcyBzZXRcbiAgICAgICAqIC8vIHRvIGxpc3RlbiBmb3IgYGVudGVyYCBvbiB0aGUgZ2l2ZW4gYGVsZW1lbnRgIGFzIHdlbGwgYXMgaXRzIGNoaWxkcmVuXG4gICAgICAgKiAkYW5pbWF0ZS5vZmYoJ2VudGVyJywgY29udGFpbmVyLCBjYWxsYmFjayk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgdGhlIGFuaW1hdGlvbiBldmVudCAoZS5nLiBlbnRlciwgbGVhdmUsIG1vdmUsIGFkZENsYXNzLCByZW1vdmVDbGFzcywgZXRjLi4uKVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gY29udGFpbmVyIHRoZSBjb250YWluZXIgZWxlbWVudCB0aGUgZXZlbnQgbGlzdGVuZXIgd2FzIHBsYWNlZCBvblxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrIHRoZSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdhcyByZWdpc3RlcmVkIGFzIHRoZSBsaXN0ZW5lclxuICAgICAgICovXG4gICAgICBvZmY6ICQkYW5pbWF0ZVF1ZXVlLm9mZixcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNwaW5cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gQXNzb2NpYXRlcyB0aGUgcHJvdmlkZWQgZWxlbWVudCB3aXRoIGEgaG9zdCBwYXJlbnQgZWxlbWVudCB0byBhbGxvdyB0aGUgZWxlbWVudCB0byBiZSBhbmltYXRlZCBldmVuIGlmIGl0IGV4aXN0c1xuICAgICAgICogICAgb3V0c2lkZSBvZiB0aGUgRE9NIHN0cnVjdHVyZSBvZiB0aGUgQW5ndWxhciBhcHBsaWNhdGlvbi4gQnkgZG9pbmcgc28sIGFueSBhbmltYXRpb24gdHJpZ2dlcmVkIHZpYSBgJGFuaW1hdGVgIGNhbiBiZSBpc3N1ZWQgb24gdGhlXG4gICAgICAgKiAgICBlbGVtZW50IGRlc3BpdGUgYmVpbmcgb3V0c2lkZSB0aGUgcmVhbG0gb2YgdGhlIGFwcGxpY2F0aW9uIG9yIHdpdGhpbiBhbm90aGVyIGFwcGxpY2F0aW9uLiBTYXkgZm9yIGV4YW1wbGUgaWYgdGhlIGFwcGxpY2F0aW9uXG4gICAgICAgKiAgICB3YXMgYm9vdHN0cmFwcGVkIG9uIGFuIGVsZW1lbnQgdGhhdCBpcyBzb21ld2hlcmUgaW5zaWRlIG9mIHRoZSBgPGJvZHk+YCB0YWcsIGJ1dCB3ZSB3YW50ZWQgdG8gYWxsb3cgZm9yIGFuIGVsZW1lbnQgdG8gYmUgc2l0dWF0ZWRcbiAgICAgICAqICAgIGFzIGEgZGlyZWN0IGNoaWxkIG9mIGBkb2N1bWVudC5ib2R5YCwgdGhlbiB0aGlzIGNhbiBiZSBhY2hpZXZlZCBieSBwaW5uaW5nIHRoZSBlbGVtZW50IHZpYSBgJGFuaW1hdGUucGluKGVsZW1lbnQpYC4gS2VlcCBpbiBtaW5kXG4gICAgICAgKiAgICB0aGF0IGNhbGxpbmcgYCRhbmltYXRlLnBpbihlbGVtZW50LCBwYXJlbnRFbGVtZW50KWAgd2lsbCBub3QgYWN0dWFsbHkgaW5zZXJ0IGludG8gdGhlIERPTSBhbnl3aGVyZTsgaXQgd2lsbCBqdXN0IGNyZWF0ZSB0aGUgYXNzb2NpYXRpb24uXG4gICAgICAgKlxuICAgICAgICogICAgTm90ZSB0aGF0IHRoaXMgZmVhdHVyZSBpcyBvbmx5IGFjdGl2ZSB3aGVuIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaXMgdXNlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGV4dGVybmFsIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHBpbm5lZFxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnRFbGVtZW50IHRoZSBob3N0IHBhcmVudCBlbGVtZW50IHRoYXQgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGV4dGVybmFsIGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgcGluOiAkJGFuaW1hdGVRdWV1ZS5waW4sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2VuYWJsZWRcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVXNlZCB0byBnZXQgYW5kIHNldCB3aGV0aGVyIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgb3Igbm90IG9uIHRoZSBlbnRpcmUgYXBwbGljYXRpb24gb3Igb24gYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuLiBUaGlzXG4gICAgICAgKiBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGluIGZvdXIgd2F5czpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogLy8gcmV0dXJucyB0cnVlIG9yIGZhbHNlXG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKCk7XG4gICAgICAgKlxuICAgICAgICogLy8gY2hhbmdlcyB0aGUgZW5hYmxlZCBzdGF0ZSBmb3IgYWxsIGFuaW1hdGlvbnNcbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZmFsc2UpO1xuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZCh0cnVlKTtcbiAgICAgICAqXG4gICAgICAgKiAvLyByZXR1cm5zIHRydWUgb3IgZmFsc2UgaWYgYW5pbWF0aW9ucyBhcmUgZW5hYmxlZCBmb3IgYW4gZWxlbWVudFxuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZChlbGVtZW50KTtcbiAgICAgICAqXG4gICAgICAgKiAvLyBjaGFuZ2VzIHRoZSBlbmFibGVkIHN0YXRlIGZvciBhbiBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW5cbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGNvbnNpZGVyZWQgZm9yIGNoZWNraW5nL3NldHRpbmcgdGhlIGVuYWJsZWQgc3RhdGVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGVuYWJsZWQgd2hldGhlciBvciBub3QgdGhlIGFuaW1hdGlvbnMgd2lsbCBiZSBlbmFibGVkIGZvciB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IGFuaW1hdGlvbnMgYXJlIGVuYWJsZWRcbiAgICAgICAqL1xuICAgICAgZW5hYmxlZDogJCRhbmltYXRlUXVldWUuZW5hYmxlZCxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNjYW5jZWxcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gQ2FuY2VscyB0aGUgcHJvdmlkZWQgYW5pbWF0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7UHJvbWlzZX0gYW5pbWF0aW9uUHJvbWlzZSBUaGUgYW5pbWF0aW9uIHByb21pc2UgdGhhdCBpcyByZXR1cm5lZCB3aGVuIGFuIGFuaW1hdGlvbiBpcyBzdGFydGVkLlxuICAgICAgICovXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICBydW5uZXIuZW5kICYmIHJ1bm5lci5lbmQoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2VudGVyXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIEluc2VydHMgdGhlIGVsZW1lbnQgaW50byB0aGUgRE9NIGVpdGhlciBhZnRlciB0aGUgYGFmdGVyYCBlbGVtZW50IChpZiBwcm92aWRlZCkgb3JcbiAgICAgICAqICAgYXMgdGhlIGZpcnN0IGNoaWxkIHdpdGhpbiB0aGUgYHBhcmVudGAgZWxlbWVudCBhbmQgdGhlbiB0cmlnZ2VycyBhbiBhbmltYXRpb24uXG4gICAgICAgKiAgIEEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgZHVyaW5nIHRoZSBuZXh0IGRpZ2VzdCBvbmNlIHRoZSBhbmltYXRpb25cbiAgICAgICAqICAgaGFzIGNvbXBsZXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBpbnNlcnRlZCBpbnRvIHRoZSBET01cbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50IHRoZSBwYXJlbnQgZWxlbWVudCB3aGljaCB3aWxsIGFwcGVuZCB0aGUgZWxlbWVudCBhc1xuICAgICAgICogICBhIGNoaWxkIChzbyBsb25nIGFzIHRoZSBhZnRlciBlbGVtZW50IGlzIG5vdCBwcmVzZW50KVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gYWZ0ZXIgdGhlIHNpYmxpbmcgZWxlbWVudCBhZnRlciB3aGljaCB0aGUgZWxlbWVudCB3aWxsIGJlIGFwcGVuZGVkXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50LCBhZnRlciwgb3B0aW9ucykge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgJiYganFMaXRlKHBhcmVudCk7XG4gICAgICAgIGFmdGVyID0gYWZ0ZXIgJiYganFMaXRlKGFmdGVyKTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IGFmdGVyLnBhcmVudCgpO1xuICAgICAgICBkb21JbnNlcnQoZWxlbWVudCwgcGFyZW50LCBhZnRlcik7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdlbnRlcicsIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNtb3ZlXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIEluc2VydHMgKG1vdmVzKSB0aGUgZWxlbWVudCBpbnRvIGl0cyBuZXcgcG9zaXRpb24gaW4gdGhlIERPTSBlaXRoZXIgYWZ0ZXJcbiAgICAgICAqICAgdGhlIGBhZnRlcmAgZWxlbWVudCAoaWYgcHJvdmlkZWQpIG9yIGFzIHRoZSBmaXJzdCBjaGlsZCB3aXRoaW4gdGhlIGBwYXJlbnRgIGVsZW1lbnRcbiAgICAgICAqICAgYW5kIHRoZW4gdHJpZ2dlcnMgYW4gYW5pbWF0aW9uLiBBIHByb21pc2UgaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkXG4gICAgICAgKiAgIGR1cmluZyB0aGUgbmV4dCBkaWdlc3Qgb25jZSB0aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgbW92ZWQgaW50byB0aGUgbmV3IERPTSBwb3NpdGlvblxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnQgdGhlIHBhcmVudCBlbGVtZW50IHdoaWNoIHdpbGwgYXBwZW5kIHRoZSBlbGVtZW50IGFzXG4gICAgICAgKiAgIGEgY2hpbGQgKHNvIGxvbmcgYXMgdGhlIGFmdGVyIGVsZW1lbnQgaXMgbm90IHByZXNlbnQpXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBhZnRlciB0aGUgc2libGluZyBlbGVtZW50IGFmdGVyIHdoaWNoIHRoZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIG1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50ICYmIGpxTGl0ZShwYXJlbnQpO1xuICAgICAgICBhZnRlciA9IGFmdGVyICYmIGpxTGl0ZShhZnRlcik7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudCB8fCBhZnRlci5wYXJlbnQoKTtcbiAgICAgICAgZG9tSW5zZXJ0KGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnbW92ZScsIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2xlYXZlXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIFRyaWdnZXJzIGFuIGFuaW1hdGlvbiBhbmQgdGhlbiByZW1vdmVzIHRoZSBlbGVtZW50IGZyb20gdGhlIERPTS5cbiAgICAgICAqIFdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBhIHByb21pc2UgaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGR1cmluZyB0aGUgbmV4dFxuICAgICAgICogZGlnZXN0IG9uY2UgdGhlIGFuaW1hdGlvbiBoYXMgY29tcGxldGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBsZWF2ZTogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnbGVhdmUnLCBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNhZGRDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVHJpZ2dlcnMgYW4gYWRkQ2xhc3MgYW5pbWF0aW9uIHN1cnJvdW5kaW5nIHRoZSBhZGRpdGlvbiBvZiB0aGUgcHJvdmlkZWQgQ1NTIGNsYXNzKGVzKS4gVXBvblxuICAgICAgICogICBleGVjdXRpb24sIHRoZSBhZGRDbGFzcyBvcGVyYXRpb24gd2lsbCBvbmx5IGJlIGhhbmRsZWQgYWZ0ZXIgdGhlIG5leHQgZGlnZXN0IGFuZCBpdCB3aWxsIG5vdCB0cmlnZ2VyIGFuXG4gICAgICAgKiAgIGFuaW1hdGlvbiBpZiBlbGVtZW50IGFscmVhZHkgY29udGFpbnMgdGhlIENTUyBjbGFzcyBvciBpZiB0aGUgY2xhc3MgaXMgcmVtb3ZlZCBhdCBhIGxhdGVyIHN0ZXAuXG4gICAgICAgKiAgIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICogICAobGlrZSBlbnRlciwgbW92ZSBhbmQgbGVhdmUpIHNpbmNlIHRoZSBDU1MgY2xhc3NlcyBtYXkgYmUgYWRkZWQvcmVtb3ZlZCBhdCBkaWZmZXJlbnQgcG9pbnRzXG4gICAgICAgKiAgIGRlcGVuZGluZyBpZiBDU1Mgb3IgSmF2YVNjcmlwdCBhbmltYXRpb25zIGFyZSB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSBhZGRlZCAobXVsdGlwbGUgY2xhc3NlcyBhcmUgc2VwYXJhdGVkIHZpYSBzcGFjZXMpXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBhZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5hZGRjbGFzcywgY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ2FkZENsYXNzJywgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI3JlbW92ZUNsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUcmlnZ2VycyBhIHJlbW92ZUNsYXNzIGFuaW1hdGlvbiBzdXJyb3VuZGluZyB0aGUgcmVtb3ZhbCBvZiB0aGUgcHJvdmlkZWQgQ1NTIGNsYXNzKGVzKS4gVXBvblxuICAgICAgICogICBleGVjdXRpb24sIHRoZSByZW1vdmVDbGFzcyBvcGVyYXRpb24gd2lsbCBvbmx5IGJlIGhhbmRsZWQgYWZ0ZXIgdGhlIG5leHQgZGlnZXN0IGFuZCBpdCB3aWxsIG5vdCB0cmlnZ2VyIGFuXG4gICAgICAgKiAgIGFuaW1hdGlvbiBpZiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gdGhlIENTUyBjbGFzcyBvciBpZiB0aGUgY2xhc3MgaXMgYWRkZWQgYXQgYSBsYXRlciBzdGVwLlxuICAgICAgICogICBOb3RlIHRoYXQgY2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBhcmUgdHJlYXRlZCBkaWZmZXJlbnRseSBjb21wYXJlZCB0byBzdHJ1Y3R1cmFsIGFuaW1hdGlvbnNcbiAgICAgICAqICAgKGxpa2UgZW50ZXIsIG1vdmUgYW5kIGxlYXZlKSBzaW5jZSB0aGUgQ1NTIGNsYXNzZXMgbWF5IGJlIGFkZGVkL3JlbW92ZWQgYXQgZGlmZmVyZW50IHBvaW50c1xuICAgICAgICogICBkZXBlbmRpbmcgaWYgQ1NTIG9yIEphdmFTY3JpcHQgYW5pbWF0aW9ucyBhcmUgdXNlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggdGhlIENTUyBjbGFzc2VzIHdpbGwgYmUgYXBwbGllZCB0b1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzKGVzKSB0aGF0IHdpbGwgYmUgcmVtb3ZlZCAobXVsdGlwbGUgY2xhc3NlcyBhcmUgc2VwYXJhdGVkIHZpYSBzcGFjZXMpXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5yZW1vdmVDbGFzcywgY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ3JlbW92ZUNsYXNzJywgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI3NldENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBQZXJmb3JtcyBib3RoIHRoZSBhZGRpdGlvbiBhbmQgcmVtb3ZhbCBvZiBhIENTUyBjbGFzc2VzIG9uIGFuIGVsZW1lbnQgYW5kIChkdXJpbmcgdGhlIHByb2Nlc3MpXG4gICAgICAgKiAgICB0cmlnZ2VycyBhbiBhbmltYXRpb24gc3Vycm91bmRpbmcgdGhlIGNsYXNzIGFkZGl0aW9uL3JlbW92YWwuIE11Y2ggbGlrZSBgJGFuaW1hdGUuYWRkQ2xhc3NgIGFuZFxuICAgICAgICogICAgYCRhbmltYXRlLnJlbW92ZUNsYXNzYCwgYHNldENsYXNzYCB3aWxsIG9ubHkgZXZhbHVhdGUgdGhlIGNsYXNzZXMgYmVpbmcgYWRkZWQvcmVtb3ZlZCBvbmNlIGEgZGlnZXN0IGhhc1xuICAgICAgICogICAgcGFzc2VkLiBOb3RlIHRoYXQgY2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBhcmUgdHJlYXRlZCBkaWZmZXJlbnRseSBjb21wYXJlZCB0byBzdHJ1Y3R1cmFsIGFuaW1hdGlvbnNcbiAgICAgICAqICAgIChsaWtlIGVudGVyLCBtb3ZlIGFuZCBsZWF2ZSkgc2luY2UgdGhlIENTUyBjbGFzc2VzIG1heSBiZSBhZGRlZC9yZW1vdmVkIGF0IGRpZmZlcmVudCBwb2ludHNcbiAgICAgICAqICAgIGRlcGVuZGluZyBpZiBDU1Mgb3IgSmF2YVNjcmlwdCBhbmltYXRpb25zIGFyZSB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSBhZGRlZCAobXVsdGlwbGUgY2xhc3NlcyBhcmUgc2VwYXJhdGVkIHZpYSBzcGFjZXMpXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVtb3ZlIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSByZW1vdmVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIHNldENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBhZGQsIHJlbW92ZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zLmFkZENsYXNzID0gbWVyZ2VDbGFzc2VzKG9wdGlvbnMuYWRkQ2xhc3MsIGFkZCk7XG4gICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5yZW1vdmVDbGFzcywgcmVtb3ZlKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ3NldENsYXNzJywgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2FuaW1hdGVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFBlcmZvcm1zIGFuIGlubGluZSBhbmltYXRpb24gb24gdGhlIGVsZW1lbnQgd2hpY2ggYXBwbGllcyB0aGUgcHJvdmlkZWQgdG8gYW5kIGZyb20gQ1NTIHN0eWxlcyB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqIElmIGFueSBkZXRlY3RlZCBDU1MgdHJhbnNpdGlvbiwga2V5ZnJhbWUgb3IgSmF2YVNjcmlwdCBtYXRjaGVzIHRoZSBwcm92aWRlZCBjbGFzc05hbWUgdmFsdWUgdGhlbiB0aGUgYW5pbWF0aW9uIHdpbGwgdGFrZVxuICAgICAgICogb24gdGhlIHByb3ZpZGVkIHN0eWxlcy4gRm9yIGV4YW1wbGUsIGlmIGEgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgc2V0IGZvciB0aGUgZ2l2ZW4gY2xhc3NOYW1lIHRoZW4gdGhlIHByb3ZpZGVkIGZyb20gYW5kXG4gICAgICAgKiB0byBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIGFsb25nc2lkZSB0aGUgZ2l2ZW4gdHJhbnNpdGlvbi4gSWYgYSBKYXZhU2NyaXB0IGFuaW1hdGlvbiBpcyBkZXRlY3RlZCB0aGVuIHRoZSBwcm92aWRlZCBzdHlsZXNcbiAgICAgICAqIHdpbGwgYmUgZ2l2ZW4gaW4gYXMgZnVuY3Rpb24gcGFyYW10ZXJzIGludG8gdGhlIGBhbmltYXRlYCBtZXRob2QgKG9yIGFzIGFwYXJ0IG9mIHRoZSBgb3B0aW9uc2AgcGFyYW1ldGVyKS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggdGhlIENTUyBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gZnJvbSB0aGUgZnJvbSAoc3RhcnRpbmcpIENTUyBzdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgYW5kIGFjcm9zcyB0aGUgYW5pbWF0aW9uLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IHRvIHRoZSB0byAoZGVzdGluYXRpb24pIENTUyBzdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgYW5kIGFjcm9zcyB0aGUgYW5pbWF0aW9uLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBjbGFzc05hbWUgYW4gb3B0aW9uYWwgQ1NTIGNsYXNzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbi4gSWZcbiAgICAgICAqICAgIHRoaXMgdmFsdWUgaXMgbGVmdCBhcyBlbXB0eSB0aGVuIGEgQ1NTIGNsYXNzIG9mIGBuZy1pbmxpbmUtYW5pbWF0ZWAgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICAgKE5vdGUgdGhhdCBpZiBubyBhbmltYXRpb24gaXMgZGV0ZWN0ZWQgdGhlbiB0aGlzIHZhbHVlIHdpbGwgbm90IGJlIGFwcHBsaWVkIHRvIHRoZSBlbGVtZW50LilcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGFuaW1hdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb20sIHRvLCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5mcm9tID0gb3B0aW9ucy5mcm9tID8gZXh0ZW5kKG9wdGlvbnMuZnJvbSwgZnJvbSkgOiBmcm9tO1xuICAgICAgICBvcHRpb25zLnRvICAgPSBvcHRpb25zLnRvICAgPyBleHRlbmQob3B0aW9ucy50bywgdG8pICAgICA6IHRvO1xuXG4gICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZSB8fCAnbmctaW5saW5lLWFuaW1hdGUnO1xuICAgICAgICBvcHRpb25zLnRlbXBDbGFzc2VzID0gbWVyZ2VDbGFzc2VzKG9wdGlvbnMudGVtcENsYXNzZXMsIGNsYXNzTmFtZSk7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdhbmltYXRlJywgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG59XTtcblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGFuaW1hdGVDc3NcbiAqIEBraW5kIG9iamVjdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBpcyB0aGUgY29yZSB2ZXJzaW9uIG9mIGAkYW5pbWF0ZUNzc2AuIEJ5IGRlZmF1bHQsIG9ubHkgd2hlbiB0aGUgYG5nQW5pbWF0ZWAgaXMgaW5jbHVkZWQsXG4gKiB0aGVuIHRoZSBgJGFuaW1hdGVDc3NgIHNlcnZpY2Ugd2lsbCBhY3R1YWxseSBwZXJmb3JtIGFuaW1hdGlvbnMuXG4gKlxuICogQ2xpY2sgaGVyZSB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlQ3NzIHRvIHJlYWQgdGhlIGRvY3VtZW50YXRpb24gZm9yICRhbmltYXRlQ3NzfS5cbiAqL1xudmFyICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFsnJCRyQUYnLCAnJHEnLCBmdW5jdGlvbigkJHJBRiwgJHEpIHtcblxuICAgIHZhciBSQUZQcm9taXNlID0gZnVuY3Rpb24oKSB7fTtcbiAgICBSQUZQcm9taXNlLnByb3RvdHlwZSA9IHtcbiAgICAgIGRvbmU6IGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgICAgICB0aGlzLmRlZmVyICYmIHRoaXMuZGVmZXJbY2FuY2VsID09PSB0cnVlID8gJ3JlamVjdCcgOiAncmVzb2x2ZSddKCk7XG4gICAgICB9LFxuICAgICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kb25lKCk7XG4gICAgICB9LFxuICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kb25lKHRydWUpO1xuICAgICAgfSxcbiAgICAgIGdldFByb21pc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuZGVmZXIpIHtcbiAgICAgICAgICB0aGlzLmRlZmVyID0gJHEuZGVmZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kZWZlci5wcm9taXNlO1xuICAgICAgfSxcbiAgICAgIHRoZW46IGZ1bmN0aW9uKGYxLGYyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFByb21pc2UoKS50aGVuKGYxLGYyKTtcbiAgICAgIH0sXG4gICAgICAnY2F0Y2gnOiBmdW5jdGlvbihmMSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlKClbJ2NhdGNoJ10oZjEpO1xuICAgICAgfSxcbiAgICAgICdmaW5hbGx5JzogZnVuY3Rpb24oZjEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvbWlzZSgpWydmaW5hbGx5J10oZjEpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgLy8gdGhlcmUgaXMgbm8gcG9pbnQgaW4gYXBwbHlpbmcgdGhlIHN0eWxlcyBzaW5jZVxuICAgICAgLy8gdGhlcmUgaXMgbm8gYW5pbWF0aW9uIHRoYXQgZ29lcyBvbiBhdCBhbGwgaW5cbiAgICAgIC8vIHRoaXMgdmVyc2lvbiBvZiAkYW5pbWF0ZUNzcy5cbiAgICAgIGlmIChvcHRpb25zLmNsZWFudXBTdHlsZXMpIHtcbiAgICAgICAgb3B0aW9ucy5mcm9tID0gb3B0aW9ucy50byA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmZyb20pIHtcbiAgICAgICAgZWxlbWVudC5jc3Mob3B0aW9ucy5mcm9tKTtcbiAgICAgICAgb3B0aW9ucy5mcm9tID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsb3NlZCwgcnVubmVyID0gbmV3IFJBRlByb21pc2UoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBydW4sXG4gICAgICAgIGVuZDogcnVuXG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBydW4oKSB7XG4gICAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgaWYgKCFjbG9zZWQpIHtcbiAgICAgICAgICAgIHJ1bm5lci5kb25lKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYWRkQ2xhc3MpIHtcbiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKG9wdGlvbnMuYWRkQ2xhc3MpO1xuICAgICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnJlbW92ZUNsYXNzKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhvcHRpb25zLnJlbW92ZUNsYXNzKTtcbiAgICAgICAgICBvcHRpb25zLnJlbW92ZUNsYXNzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy50bykge1xuICAgICAgICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMudG8pO1xuICAgICAgICAgIG9wdGlvbnMudG8gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG59O1xuXG4vKiBnbG9iYWwgc3RyaXBIYXNoOiB0cnVlICovXG5cbi8qKlxuICogISBUaGlzIGlzIGEgcHJpdmF0ZSB1bmRvY3VtZW50ZWQgc2VydmljZSAhXG4gKlxuICogQG5hbWUgJGJyb3dzZXJcbiAqIEByZXF1aXJlcyAkbG9nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgb2JqZWN0IGhhcyB0d28gZ29hbHM6XG4gKlxuICogLSBoaWRlIGFsbCB0aGUgZ2xvYmFsIHN0YXRlIGluIHRoZSBicm93c2VyIGNhdXNlZCBieSB0aGUgd2luZG93IG9iamVjdFxuICogLSBhYnN0cmFjdCBhd2F5IGFsbCB0aGUgYnJvd3NlciBzcGVjaWZpYyBmZWF0dXJlcyBhbmQgaW5jb25zaXN0ZW5jaWVzXG4gKlxuICogRm9yIHRlc3RzIHdlIHByb3ZpZGUge0BsaW5rIG5nTW9jay4kYnJvd3NlciBtb2NrIGltcGxlbWVudGF0aW9ufSBvZiB0aGUgYCRicm93c2VyYFxuICogc2VydmljZSwgd2hpY2ggY2FuIGJlIHVzZWQgZm9yIGNvbnZlbmllbnQgdGVzdGluZyBvZiB0aGUgYXBwbGljYXRpb24gd2l0aG91dCB0aGUgaW50ZXJhY3Rpb24gd2l0aFxuICogdGhlIHJlYWwgYnJvd3NlciBhcGlzLlxuICovXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSB3aW5kb3cgVGhlIGdsb2JhbCB3aW5kb3cgb2JqZWN0LlxuICogQHBhcmFtIHtvYmplY3R9IGRvY3VtZW50IGpRdWVyeSB3cmFwcGVkIGRvY3VtZW50LlxuICogQHBhcmFtIHtvYmplY3R9ICRsb2cgd2luZG93LmNvbnNvbGUgb3IgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgaW50ZXJmYWNlLlxuICogQHBhcmFtIHtvYmplY3R9ICRzbmlmZmVyICRzbmlmZmVyIHNlcnZpY2VcbiAqL1xuZnVuY3Rpb24gQnJvd3Nlcih3aW5kb3csIGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcikge1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICByYXdEb2N1bWVudCA9IGRvY3VtZW50WzBdLFxuICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICBoaXN0b3J5ID0gd2luZG93Lmhpc3RvcnksXG4gICAgICBzZXRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQsXG4gICAgICBjbGVhclRpbWVvdXQgPSB3aW5kb3cuY2xlYXJUaW1lb3V0LFxuICAgICAgcGVuZGluZ0RlZmVySWRzID0ge307XG5cbiAgc2VsZi5pc01vY2sgPSBmYWxzZTtcblxuICB2YXIgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSAwO1xuICB2YXIgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzID0gW107XG5cbiAgLy8gVE9ETyh2b2p0YSk6IHJlbW92ZSB0aGlzIHRlbXBvcmFyeSBhcGlcbiAgc2VsZi4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0ID0gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Q7XG4gIHNlbGYuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9IGZ1bmN0aW9uKCkgeyBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCsrOyB9O1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgYGZuYCBmdW5jdGlvbihzdXBwb3J0cyBjdXJyeWluZykgYW5kIGRlY3JlbWVudHMgdGhlIGBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3NgXG4gICAqIGNvdW50ZXIuIElmIHRoZSBjb3VudGVyIHJlYWNoZXMgMCwgYWxsIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYCBhcmUgZXhlY3V0ZWQuXG4gICAqL1xuICBmdW5jdGlvbiBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbi5hcHBseShudWxsLCBzbGljZUFyZ3MoYXJndW1lbnRzLCAxKSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50LS07XG4gICAgICBpZiAob3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPT09IDApIHtcbiAgICAgICAgd2hpbGUgKG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGxvZy5lcnJvcihlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRIYXNoKHVybCkge1xuICAgIHZhciBpbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgcmV0dXJuIGluZGV4ID09PSAtMSA/ICcnIDogdXJsLnN1YnN0cihpbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogTm90ZTogdGhpcyBtZXRob2QgaXMgdXNlZCBvbmx5IGJ5IHNjZW5hcmlvIHJ1bm5lclxuICAgKiBUT0RPKHZvanRhKTogcHJlZml4IHRoaXMgbWV0aG9kIHdpdGggJCQgP1xuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiBubyBvdXRzdGFuZGluZyByZXF1ZXN0XG4gICAqL1xuICBzZWxmLm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBVUkwgQVBJXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgdmFyIGNhY2hlZFN0YXRlLCBsYXN0SGlzdG9yeVN0YXRlLFxuICAgICAgbGFzdEJyb3dzZXJVcmwgPSBsb2NhdGlvbi5ocmVmLFxuICAgICAgYmFzZUVsZW1lbnQgPSBkb2N1bWVudC5maW5kKCdiYXNlJyksXG4gICAgICBwZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gIGNhY2hlU3RhdGUoKTtcbiAgbGFzdEhpc3RvcnlTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciN1cmxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEdFVFRFUjpcbiAgICogV2l0aG91dCBhbnkgYXJndW1lbnQsIHRoaXMgbWV0aG9kIGp1c3QgcmV0dXJucyBjdXJyZW50IHZhbHVlIG9mIGxvY2F0aW9uLmhyZWYuXG4gICAqXG4gICAqIFNFVFRFUjpcbiAgICogV2l0aCBhdCBsZWFzdCBvbmUgYXJndW1lbnQsIHRoaXMgbWV0aG9kIHNldHMgdXJsIHRvIG5ldyB2YWx1ZS5cbiAgICogSWYgaHRtbDUgaGlzdG9yeSBhcGkgc3VwcG9ydGVkLCBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlIGlzIHVzZWQsIG90aGVyd2lzZVxuICAgKiBsb2NhdGlvbi5ocmVmL2xvY2F0aW9uLnJlcGxhY2UgaXMgdXNlZC5cbiAgICogUmV0dXJucyBpdHMgb3duIGluc3RhbmNlIHRvIGFsbG93IGNoYWluaW5nXG4gICAqXG4gICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSB0aGUgJGxvY2F0aW9uIHNlcnZpY2UuIFBsZWFzZSB1c2UgdGhlXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9uIHNlcnZpY2V9IHRvIGNoYW5nZSB1cmwuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgTmV3IHVybCAod2hlbiB1c2VkIGFzIHNldHRlcilcbiAgICogQHBhcmFtIHtib29sZWFuPX0gcmVwbGFjZSBTaG91bGQgbmV3IHVybCByZXBsYWNlIGN1cnJlbnQgaGlzdG9yeSByZWNvcmQ/XG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gc3RhdGUgb2JqZWN0IHRvIHVzZSB3aXRoIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGVcbiAgICovXG4gIHNlbGYudXJsID0gZnVuY3Rpb24odXJsLCByZXBsYWNlLCBzdGF0ZSkge1xuICAgIC8vIEluIG1vZGVybiBicm93c2VycyBgaGlzdG9yeS5zdGF0ZWAgaXMgYG51bGxgIGJ5IGRlZmF1bHQ7IHRyZWF0aW5nIGl0IHNlcGFyYXRlbHlcbiAgICAvLyBmcm9tIGB1bmRlZmluZWRgIHdvdWxkIGNhdXNlIGAkYnJvd3Nlci51cmwoJy9mb28nKWAgdG8gY2hhbmdlIGBoaXN0b3J5LnN0YXRlYFxuICAgIC8vIHRvIHVuZGVmaW5lZCB2aWEgYHB1c2hTdGF0ZWAuIEluc3RlYWQsIGxldCdzIGNoYW5nZSBgdW5kZWZpbmVkYCB0byBgbnVsbGAgaGVyZS5cbiAgICBpZiAoaXNVbmRlZmluZWQoc3RhdGUpKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gQW5kcm9pZCBCcm93c2VyIEJGQ2FjaGUgY2F1c2VzIGxvY2F0aW9uLCBoaXN0b3J5IHJlZmVyZW5jZSB0byBiZWNvbWUgc3RhbGUuXG4gICAgaWYgKGxvY2F0aW9uICE9PSB3aW5kb3cubG9jYXRpb24pIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgIGlmIChoaXN0b3J5ICE9PSB3aW5kb3cuaGlzdG9yeSkgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuXG4gICAgLy8gc2V0dGVyXG4gICAgaWYgKHVybCkge1xuICAgICAgdmFyIHNhbWVTdGF0ZSA9IGxhc3RIaXN0b3J5U3RhdGUgPT09IHN0YXRlO1xuXG4gICAgICAvLyBEb24ndCBjaGFuZ2UgYW55dGhpbmcgaWYgcHJldmlvdXMgYW5kIGN1cnJlbnQgVVJMcyBhbmQgc3RhdGVzIG1hdGNoLiBUaGlzIGFsc28gcHJldmVudHNcbiAgICAgIC8vIElFPDEwIGZyb20gZ2V0dGluZyBpbnRvIHJlZGlyZWN0IGxvb3Agd2hlbiBpbiBMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybCBtb2RlLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvY29tbWl0L2ZmYjI3MDFcbiAgICAgIGlmIChsYXN0QnJvd3NlclVybCA9PT0gdXJsICYmICghJHNuaWZmZXIuaGlzdG9yeSB8fCBzYW1lU3RhdGUpKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuICAgICAgdmFyIHNhbWVCYXNlID0gbGFzdEJyb3dzZXJVcmwgJiYgc3RyaXBIYXNoKGxhc3RCcm93c2VyVXJsKSA9PT0gc3RyaXBIYXNoKHVybCk7XG4gICAgICBsYXN0QnJvd3NlclVybCA9IHVybDtcbiAgICAgIGxhc3RIaXN0b3J5U3RhdGUgPSBzdGF0ZTtcbiAgICAgIC8vIERvbid0IHVzZSBoaXN0b3J5IEFQSSBpZiBvbmx5IHRoZSBoYXNoIGNoYW5nZWRcbiAgICAgIC8vIGR1ZSB0byBhIGJ1ZyBpbiBJRTEwL0lFMTEgd2hpY2ggbGVhZHNcbiAgICAgIC8vIHRvIG5vdCBmaXJpbmcgYSBgaGFzaGNoYW5nZWAgbm9yIGBwb3BzdGF0ZWAgZXZlbnRcbiAgICAgIC8vIGluIHNvbWUgY2FzZXMgKHNlZSAjOTE0MykuXG4gICAgICBpZiAoJHNuaWZmZXIuaGlzdG9yeSAmJiAoIXNhbWVCYXNlIHx8ICFzYW1lU3RhdGUpKSB7XG4gICAgICAgIGhpc3RvcnlbcmVwbGFjZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSddKHN0YXRlLCAnJywgdXJsKTtcbiAgICAgICAgY2FjaGVTdGF0ZSgpO1xuICAgICAgICAvLyBEbyB0aGUgYXNzaWdubWVudCBhZ2FpbiBzbyB0aGF0IHRob3NlIHR3byB2YXJpYWJsZXMgYXJlIHJlZmVyZW50aWFsbHkgaWRlbnRpY2FsLlxuICAgICAgICBsYXN0SGlzdG9yeVN0YXRlID0gY2FjaGVkU3RhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXNhbWVCYXNlIHx8IHBlbmRpbmdMb2NhdGlvbikge1xuICAgICAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IHVybDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgIGxvY2F0aW9uLnJlcGxhY2UodXJsKTtcbiAgICAgICAgfSBlbHNlIGlmICghc2FtZUJhc2UpIHtcbiAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvY2F0aW9uLmhhc2ggPSBnZXRIYXNoKHVybCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2F0aW9uLmhyZWYgIT09IHVybCkge1xuICAgICAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IHVybDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgLy8gZ2V0dGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIC0gcGVuZGluZ0xvY2F0aW9uIGlzIG5lZWRlZCBhcyBicm93c2VycyBkb24ndCBhbGxvdyB0byByZWFkIG91dFxuICAgICAgLy8gICB0aGUgbmV3IGxvY2F0aW9uLmhyZWYgaWYgYSByZWxvYWQgaGFwcGVuZWQgb3IgaWYgdGhlcmUgaXMgYSBidWcgbGlrZSBpbiBpT1MgOSAoc2VlXG4gICAgICAvLyAgIGh0dHBzOi8vb3BlbnJhZGFyLmFwcHNwb3QuY29tLzIyMTg2MTA5KS5cbiAgICAgIC8vIC0gdGhlIHJlcGxhY2VtZW50IGlzIGEgd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDA3MTcyXG4gICAgICByZXR1cm4gcGVuZGluZ0xvY2F0aW9uIHx8IGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvJTI3L2csXCInXCIpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjc3RhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGEgZ2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gaGlzdG9yeS5zdGF0ZSBvciBudWxsIGlmIGhpc3Rvcnkuc3RhdGUgaXMgdW5kZWZpbmVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBzdGF0ZVxuICAgKi9cbiAgc2VsZi5zdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjYWNoZWRTdGF0ZTtcbiAgfTtcblxuICB2YXIgdXJsQ2hhbmdlTGlzdGVuZXJzID0gW10sXG4gICAgICB1cmxDaGFuZ2VJbml0ID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UoKSB7XG4gICAgcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcbiAgICBjYWNoZVN0YXRlKCk7XG4gICAgZmlyZVVybENoYW5nZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudFN0YXRlKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5zdGF0ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBNU0lFIGNhbiByZXBvcnRlZGx5IHRocm93IHdoZW4gdGhlcmUgaXMgbm8gc3RhdGUgKFVOQ09ORklSTUVEKS5cbiAgICB9XG4gIH1cblxuICAvLyBUaGlzIHZhcmlhYmxlIHNob3VsZCBiZSB1c2VkICpvbmx5KiBpbnNpZGUgdGhlIGNhY2hlU3RhdGUgZnVuY3Rpb24uXG4gIHZhciBsYXN0Q2FjaGVkU3RhdGUgPSBudWxsO1xuICBmdW5jdGlvbiBjYWNoZVN0YXRlKCkge1xuICAgIC8vIFRoaXMgc2hvdWxkIGJlIHRoZSBvbmx5IHBsYWNlIGluICRicm93c2VyIHdoZXJlIGBoaXN0b3J5LnN0YXRlYCBpcyByZWFkLlxuICAgIGNhY2hlZFN0YXRlID0gZ2V0Q3VycmVudFN0YXRlKCk7XG4gICAgY2FjaGVkU3RhdGUgPSBpc1VuZGVmaW5lZChjYWNoZWRTdGF0ZSkgPyBudWxsIDogY2FjaGVkU3RhdGU7XG5cbiAgICAvLyBQcmV2ZW50IGNhbGxiYWNrcyBmbyBmaXJlIHR3aWNlIGlmIGJvdGggaGFzaGNoYW5nZSAmIHBvcHN0YXRlIHdlcmUgZmlyZWQuXG4gICAgaWYgKGVxdWFscyhjYWNoZWRTdGF0ZSwgbGFzdENhY2hlZFN0YXRlKSkge1xuICAgICAgY2FjaGVkU3RhdGUgPSBsYXN0Q2FjaGVkU3RhdGU7XG4gICAgfVxuICAgIGxhc3RDYWNoZWRTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlyZVVybENoYW5nZSgpIHtcbiAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT09IHNlbGYudXJsKCkgJiYgbGFzdEhpc3RvcnlTdGF0ZSA9PT0gY2FjaGVkU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsYXN0QnJvd3NlclVybCA9IHNlbGYudXJsKCk7XG4gICAgbGFzdEhpc3RvcnlTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICAgIGZvckVhY2godXJsQ2hhbmdlTGlzdGVuZXJzLCBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoc2VsZi51cmwoKSwgY2FjaGVkU3RhdGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI29uVXJsQ2hhbmdlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlciBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkLCB3aGVuIHVybCBjaGFuZ2VzLlxuICAgKlxuICAgKiBJdCdzIG9ubHkgY2FsbGVkIHdoZW4gdGhlIHVybCBpcyBjaGFuZ2VkIGZyb20gb3V0c2lkZSBvZiBhbmd1bGFyOlxuICAgKiAtIHVzZXIgdHlwZXMgZGlmZmVyZW50IHVybCBpbnRvIGFkZHJlc3MgYmFyXG4gICAqIC0gdXNlciBjbGlja3Mgb24gaGlzdG9yeSAoZm9yd2FyZC9iYWNrKSBidXR0b25cbiAgICogLSB1c2VyIGNsaWNrcyBvbiBhIGxpbmtcbiAgICpcbiAgICogSXQncyBub3QgY2FsbGVkIHdoZW4gdXJsIGlzIGNoYW5nZWQgYnkgJGJyb3dzZXIudXJsKCkgbWV0aG9kXG4gICAqXG4gICAqIFRoZSBsaXN0ZW5lciBnZXRzIGNhbGxlZCB3aXRoIG5ldyB1cmwgYXMgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBtb25pdG9yIHVybCBjaGFuZ2VzIGluIGFuZ3VsYXIgYXBwcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcpfSBsaXN0ZW5lciBMaXN0ZW5lciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB1cmwgY2hhbmdlcy5cbiAgICogQHJldHVybiB7ZnVuY3Rpb24oc3RyaW5nKX0gUmV0dXJucyB0aGUgcmVnaXN0ZXJlZCBsaXN0ZW5lciBmbiAtIGhhbmR5IGlmIHRoZSBmbiBpcyBhbm9ueW1vdXMuXG4gICAqL1xuICBzZWxmLm9uVXJsQ2hhbmdlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPKHZvanRhKTogcmVmYWN0b3IgdG8gdXNlIG5vZGUncyBzeW50YXggZm9yIGV2ZW50c1xuICAgIGlmICghdXJsQ2hhbmdlSW5pdCkge1xuICAgICAgLy8gV2UgbGlzdGVuIG9uIGJvdGggKGhhc2hjaGFuZ2UvcG9wc3RhdGUpIHdoZW4gYXZhaWxhYmxlLCBhcyBzb21lIGJyb3dzZXJzIChlLmcuIE9wZXJhKVxuICAgICAgLy8gZG9uJ3QgZmlyZSBwb3BzdGF0ZSB3aGVuIHVzZXIgY2hhbmdlIHRoZSBhZGRyZXNzIGJhciBhbmQgZG9uJ3QgZmlyZSBoYXNoY2hhbmdlIHdoZW4gdXJsXG4gICAgICAvLyBjaGFuZ2VkIGJ5IHB1c2gvcmVwbGFjZVN0YXRlXG5cbiAgICAgIC8vIGh0bWw1IGhpc3RvcnkgYXBpIC0gcG9wc3RhdGUgZXZlbnRcbiAgICAgIGlmICgkc25pZmZlci5oaXN0b3J5KSBqcUxpdGUod2luZG93KS5vbigncG9wc3RhdGUnLCBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSk7XG4gICAgICAvLyBoYXNoY2hhbmdlIGV2ZW50XG4gICAgICBqcUxpdGUod2luZG93KS5vbignaGFzaGNoYW5nZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTtcblxuICAgICAgdXJsQ2hhbmdlSW5pdCA9IHRydWU7XG4gICAgfVxuXG4gICAgdXJsQ2hhbmdlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfTtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogUmVtb3ZlIHBvcHN0YXRlIGFuZCBoYXNoY2hhbmdlIGhhbmRsZXIgZnJvbSB3aW5kb3cuXG4gICAqXG4gICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSAkcm9vdFNjb3BlLlxuICAgKi9cbiAgc2VsZi4kJGFwcGxpY2F0aW9uRGVzdHJveWVkID0gZnVuY3Rpb24oKSB7XG4gICAganFMaXRlKHdpbmRvdykub2ZmKCdoYXNoY2hhbmdlIHBvcHN0YXRlJywgY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciB0aGUgdXJsIGhhcyBjaGFuZ2VkIG91dHNpZGUgb2YgQW5ndWxhci5cbiAgICogTmVlZHMgdG8gYmUgZXhwb3J0ZWQgdG8gYmUgYWJsZSB0byBjaGVjayBmb3IgY2hhbmdlcyB0aGF0IGhhdmUgYmVlbiBkb25lIGluIHN5bmMsXG4gICAqIGFzIGhhc2hjaGFuZ2UvcG9wc3RhdGUgZXZlbnRzIGZpcmUgaW4gYXN5bmMuXG4gICAqL1xuICBzZWxmLiQkY2hlY2tVcmxDaGFuZ2UgPSBmaXJlVXJsQ2hhbmdlO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE1pc2MgQVBJXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI2Jhc2VIcmVmXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIGN1cnJlbnQgPGJhc2UgaHJlZj5cbiAgICogKGFsd2F5cyByZWxhdGl2ZSAtIHdpdGhvdXQgZG9tYWluKVxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY3VycmVudCBiYXNlIGhyZWZcbiAgICovXG4gIHNlbGYuYmFzZUhyZWYgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaHJlZiA9IGJhc2VFbGVtZW50LmF0dHIoJ2hyZWYnKTtcbiAgICByZXR1cm4gaHJlZiA/IGhyZWYucmVwbGFjZSgvXihodHRwcz9cXDopP1xcL1xcL1teXFwvXSovLCAnJykgOiAnJztcbiAgfTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjZGVmZXJcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBBIGZ1bmN0aW9uLCB3aG8ncyBleGVjdXRpb24gc2hvdWxkIGJlIGRlZmVycmVkLlxuICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBvZiBtaWxsaXNlY29uZHMgdG8gZGVmZXIgdGhlIGZ1bmN0aW9uIGV4ZWN1dGlvbi5cbiAgICogQHJldHVybnMgeyp9IERlZmVySWQgdGhhdCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgdGhlIHRhc2sgdmlhIGAkYnJvd3Nlci5kZWZlci5jYW5jZWwoKWAuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBFeGVjdXRlcyBhIGZuIGFzeW5jaHJvbm91c2x5IHZpYSBgc2V0VGltZW91dChmbiwgZGVsYXkpYC5cbiAgICpcbiAgICogVW5saWtlIHdoZW4gY2FsbGluZyBgc2V0VGltZW91dGAgZGlyZWN0bHksIGluIHRlc3QgdGhpcyBmdW5jdGlvbiBpcyBtb2NrZWQgYW5kIGluc3RlYWQgb2YgdXNpbmdcbiAgICogYHNldFRpbWVvdXRgIGluIHRlc3RzLCB0aGUgZm5zIGFyZSBxdWV1ZWQgaW4gYW4gYXJyYXksIHdoaWNoIGNhbiBiZSBwcm9ncmFtbWF0aWNhbGx5IGZsdXNoZWRcbiAgICogdmlhIGAkYnJvd3Nlci5kZWZlci5mbHVzaCgpYC5cbiAgICpcbiAgICovXG4gIHNlbGYuZGVmZXIgPSBmdW5jdGlvbihmbiwgZGVsYXkpIHtcbiAgICB2YXIgdGltZW91dElkO1xuICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50Kys7XG4gICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGRlbGV0ZSBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXTtcbiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KGZuKTtcbiAgICB9LCBkZWxheSB8fCAwKTtcbiAgICBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXSA9IHRydWU7XG4gICAgcmV0dXJuIHRpbWVvdXRJZDtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNkZWZlci5jYW5jZWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENhbmNlbHMgYSBkZWZlcnJlZCB0YXNrIGlkZW50aWZpZWQgd2l0aCBgZGVmZXJJZGAuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZGVmZXJJZCBUb2tlbiByZXR1cm5lZCBieSB0aGUgYCRicm93c2VyLmRlZmVyYCBmdW5jdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICAgIGNhbmNlbGVkLlxuICAgKi9cbiAgc2VsZi5kZWZlci5jYW5jZWwgPSBmdW5jdGlvbihkZWZlcklkKSB7XG4gICAgaWYgKHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXSkge1xuICAgICAgZGVsZXRlIHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXTtcbiAgICAgIGNsZWFyVGltZW91dChkZWZlcklkKTtcbiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxufVxuXG5mdW5jdGlvbiAkQnJvd3NlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGxvZycsICckc25pZmZlcicsICckZG9jdW1lbnQnLFxuICAgICAgZnVuY3Rpb24oJHdpbmRvdywgJGxvZywgJHNuaWZmZXIsICRkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gbmV3IEJyb3dzZXIoJHdpbmRvdywgJGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcik7XG4gICAgICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGNhY2hlRmFjdG9yeVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmFjdG9yeSB0aGF0IGNvbnN0cnVjdHMge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdHMgYW5kIGdpdmVzIGFjY2VzcyB0b1xuICogdGhlbS5cbiAqXG4gKiBgYGBqc1xuICpcbiAqICB2YXIgY2FjaGUgPSAkY2FjaGVGYWN0b3J5KCdjYWNoZUlkJyk7XG4gKiAgZXhwZWN0KCRjYWNoZUZhY3RvcnkuZ2V0KCdjYWNoZUlkJykpLnRvQmUoY2FjaGUpO1xuICogIGV4cGVjdCgkY2FjaGVGYWN0b3J5LmdldCgnbm9TdWNoQ2FjaGVJZCcpKS5ub3QudG9CZURlZmluZWQoKTtcbiAqXG4gKiAgY2FjaGUucHV0KFwia2V5XCIsIFwidmFsdWVcIik7XG4gKiAgY2FjaGUucHV0KFwiYW5vdGhlciBrZXlcIiwgXCJhbm90aGVyIHZhbHVlXCIpO1xuICpcbiAqICAvLyBXZSd2ZSBzcGVjaWZpZWQgbm8gb3B0aW9ucyBvbiBjcmVhdGlvblxuICogIGV4cGVjdChjYWNoZS5pbmZvKCkpLnRvRXF1YWwoe2lkOiAnY2FjaGVJZCcsIHNpemU6IDJ9KTtcbiAqXG4gKiBgYGBcbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlSWQgTmFtZSBvciBpZCBvZiB0aGUgbmV3bHkgY3JlYXRlZCBjYWNoZS5cbiAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgY2FjaGUgYmVoYXZpb3IuIFByb3BlcnRpZXM6XG4gKlxuICogICAtIGB7bnVtYmVyPX1gIGBjYXBhY2l0eWAg4oCUIHR1cm5zIHRoZSBjYWNoZSBpbnRvIExSVSBjYWNoZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBOZXdseSBjcmVhdGVkIGNhY2hlIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgc2V0IG9mIG1ldGhvZHM6XG4gKlxuICogLSBge29iamVjdH1gIGBpbmZvKClgIOKAlCBSZXR1cm5zIGlkLCBzaXplLCBhbmQgb3B0aW9ucyBvZiBjYWNoZS5cbiAqIC0gYHt7Kn19YCBgcHV0KHtzdHJpbmd9IGtleSwgeyp9IHZhbHVlKWAg4oCUIFB1dHMgYSBuZXcga2V5LXZhbHVlIHBhaXIgaW50byB0aGUgY2FjaGUgYW5kIHJldHVybnNcbiAqICAgaXQuXG4gKiAtIGB7eyp9fWAgYGdldCh7c3RyaW5nfSBrZXkpYCDigJQgUmV0dXJucyBjYWNoZWQgdmFsdWUgZm9yIGBrZXlgIG9yIHVuZGVmaW5lZCBmb3IgY2FjaGUgbWlzcy5cbiAqIC0gYHt2b2lkfWAgYHJlbW92ZSh7c3RyaW5nfSBrZXkpYCDigJQgUmVtb3ZlcyBhIGtleS12YWx1ZSBwYWlyIGZyb20gdGhlIGNhY2hlLlxuICogLSBge3ZvaWR9YCBgcmVtb3ZlQWxsKClgIOKAlCBSZW1vdmVzIGFsbCBjYWNoZWQgdmFsdWVzLlxuICogLSBge3ZvaWR9YCBgZGVzdHJveSgpYCDigJQgUmVtb3ZlcyByZWZlcmVuY2VzIHRvIHRoaXMgY2FjaGUgZnJvbSAkY2FjaGVGYWN0b3J5LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJjYWNoZUV4YW1wbGVBcHBcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDYWNoZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cIm5ld0NhY2hlS2V5XCIgcGxhY2Vob2xkZXI9XCJLZXlcIj5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cIm5ld0NhY2hlVmFsdWVcIiBwbGFjZWhvbGRlcj1cIlZhbHVlXCI+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwicHV0KG5ld0NhY2hlS2V5LCBuZXdDYWNoZVZhbHVlKVwiPkNhY2hlPC9idXR0b24+XG5cbiAgICAgICAgIDxwIG5nLWlmPVwia2V5cy5sZW5ndGhcIj5DYWNoZWQgVmFsdWVzPC9wPlxuICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XCJrZXkgaW4ga2V5c1wiPlxuICAgICAgICAgICA8c3BhbiBuZy1iaW5kPVwia2V5XCI+PC9zcGFuPlxuICAgICAgICAgICA8c3Bhbj46IDwvc3Bhbj5cbiAgICAgICAgICAgPGIgbmctYmluZD1cImNhY2hlLmdldChrZXkpXCI+PC9iPlxuICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgIDxwPkNhY2hlIEluZm88L3A+XG4gICAgICAgICA8ZGl2IG5nLXJlcGVhdD1cIihrZXksIHZhbHVlKSBpbiBjYWNoZS5pbmZvKClcIj5cbiAgICAgICAgICAgPHNwYW4gbmctYmluZD1cImtleVwiPjwvc3Bhbj5cbiAgICAgICAgICAgPHNwYW4+OiA8L3NwYW4+XG4gICAgICAgICAgIDxiIG5nLWJpbmQ9XCJ2YWx1ZVwiPjwvYj5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnY2FjaGVFeGFtcGxlQXBwJywgW10pLlxuICAgICAgICAgY29udHJvbGxlcignQ2FjaGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRzY29wZSwgJGNhY2hlRmFjdG9yeSkge1xuICAgICAgICAgICAkc2NvcGUua2V5cyA9IFtdO1xuICAgICAgICAgICAkc2NvcGUuY2FjaGUgPSAkY2FjaGVGYWN0b3J5KCdjYWNoZUlkJyk7XG4gICAgICAgICAgICRzY29wZS5wdXQgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoJHNjb3BlLmNhY2hlLmdldChrZXkpKSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAkc2NvcGUuY2FjaGUucHV0KGtleSwgYW5ndWxhci5pc1VuZGVmaW5lZCh2YWx1ZSkgPyBudWxsIDogdmFsdWUpO1xuICAgICAgICAgICB9O1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICBwIHtcbiAgICAgICAgIG1hcmdpbjogMTBweCAwIDNweDtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gJENhY2hlRmFjdG9yeVByb3ZpZGVyKCkge1xuXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYWNoZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGNhY2hlRmFjdG9yeShjYWNoZUlkLCBvcHRpb25zKSB7XG4gICAgICBpZiAoY2FjaGVJZCBpbiBjYWNoZXMpIHtcbiAgICAgICAgdGhyb3cgbWluRXJyKCckY2FjaGVGYWN0b3J5JykoJ2lpZCcsIFwiQ2FjaGVJZCAnezB9JyBpcyBhbHJlYWR5IHRha2VuIVwiLCBjYWNoZUlkKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNpemUgPSAwLFxuICAgICAgICAgIHN0YXRzID0gZXh0ZW5kKHt9LCBvcHRpb25zLCB7aWQ6IGNhY2hlSWR9KSxcbiAgICAgICAgICBkYXRhID0gY3JlYXRlTWFwKCksXG4gICAgICAgICAgY2FwYWNpdHkgPSAob3B0aW9ucyAmJiBvcHRpb25zLmNhcGFjaXR5KSB8fCBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgIGxydUhhc2ggPSBjcmVhdGVNYXAoKSxcbiAgICAgICAgICBmcmVzaEVuZCA9IG51bGwsXG4gICAgICAgICAgc3RhbGVFbmQgPSBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIGNhY2hlIG9iamVjdCB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBkYXRhLCBwcmltYXJpbHkgdXNlZCBieVxuICAgICAgICoge0BsaW5rICRodHRwICRodHRwfSBhbmQgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6c2NyaXB0IHNjcmlwdH0gZGlyZWN0aXZlIHRvIGNhY2hlXG4gICAgICAgKiB0ZW1wbGF0ZXMgYW5kIG90aGVyIGRhdGEuXG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqICBhbmd1bGFyLm1vZHVsZSgnc3VwZXJDYWNoZScpXG4gICAgICAgKiAgICAuZmFjdG9yeSgnc3VwZXJDYWNoZScsIFsnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRjYWNoZUZhY3RvcnkpIHtcbiAgICAgICAqICAgICAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ3N1cGVyLWNhY2hlJyk7XG4gICAgICAgKiAgICB9XSk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBFeGFtcGxlIHRlc3Q6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqICBpdCgnc2hvdWxkIGJlaGF2ZSBsaWtlIGEgY2FjaGUnLCBpbmplY3QoZnVuY3Rpb24oc3VwZXJDYWNoZSkge1xuICAgICAgICogICAgc3VwZXJDYWNoZS5wdXQoJ2tleScsICd2YWx1ZScpO1xuICAgICAgICogICAgc3VwZXJDYWNoZS5wdXQoJ2Fub3RoZXIga2V5JywgJ2Fub3RoZXIgdmFsdWUnKTtcbiAgICAgICAqXG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5pbmZvKCkpLnRvRXF1YWwoe1xuICAgICAgICogICAgICBpZDogJ3N1cGVyLWNhY2hlJyxcbiAgICAgICAqICAgICAgc2l6ZTogMlxuICAgICAgICogICAgfSk7XG4gICAgICAgKlxuICAgICAgICogICAgc3VwZXJDYWNoZS5yZW1vdmUoJ2Fub3RoZXIga2V5Jyk7XG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5nZXQoJ2Fub3RoZXIga2V5JykpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgICAqXG4gICAgICAgKiAgICBzdXBlckNhY2hlLnJlbW92ZUFsbCgpO1xuICAgICAgICogICAgZXhwZWN0KHN1cGVyQ2FjaGUuaW5mbygpKS50b0VxdWFsKHtcbiAgICAgICAqICAgICAgaWQ6ICdzdXBlci1jYWNoZScsXG4gICAgICAgKiAgICAgIHNpemU6IDBcbiAgICAgICAqICAgIH0pO1xuICAgICAgICogIH0pKTtcbiAgICAgICAqIGBgYFxuICAgICAgICovXG4gICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdID0ge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjcHV0XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBJbnNlcnRzIGEgbmFtZWQgZW50cnkgaW50byB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdCB0byBiZVxuICAgICAgICAgKiByZXRyaWV2ZWQgbGF0ZXIsIGFuZCBpbmNyZW1lbnRpbmcgdGhlIHNpemUgb2YgdGhlIGNhY2hlIGlmIHRoZSBrZXkgd2FzIG5vdCBhbHJlYWR5XG4gICAgICAgICAqIHByZXNlbnQgaW4gdGhlIGNhY2hlLiBJZiBiZWhhdmluZyBsaWtlIGFuIExSVSBjYWNoZSwgaXQgd2lsbCBhbHNvIHJlbW92ZSBzdGFsZVxuICAgICAgICAgKiBlbnRyaWVzIGZyb20gdGhlIHNldC5cbiAgICAgICAgICpcbiAgICAgICAgICogSXQgd2lsbCBub3QgaW5zZXJ0IHVuZGVmaW5lZCB2YWx1ZXMgaW50byB0aGUgY2FjaGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSB1bmRlciB3aGljaCB0aGUgY2FjaGVkIGRhdGEgaXMgc3RvcmVkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIHRoZSB2YWx1ZSB0byBzdG9yZSBhbG9uZ3NpZGUgdGhlIGtleS4gSWYgaXQgaXMgdW5kZWZpbmVkLCB0aGUga2V5XG4gICAgICAgICAqICAgIHdpbGwgbm90IGJlIHN0b3JlZC5cbiAgICAgICAgICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBzdG9yZWQuXG4gICAgICAgICAqL1xuICAgICAgICBwdXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG4gICAgICAgICAgaWYgKGNhcGFjaXR5IDwgTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldIHx8IChscnVIYXNoW2tleV0gPSB7a2V5OiBrZXl9KTtcblxuICAgICAgICAgICAgcmVmcmVzaChscnVFbnRyeSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCEoa2V5IGluIGRhdGEpKSBzaXplKys7XG4gICAgICAgICAgZGF0YVtrZXldID0gdmFsdWU7XG5cbiAgICAgICAgICBpZiAoc2l6ZSA+IGNhcGFjaXR5KSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShzdGFsZUVuZC5rZXkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2dldFxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogUmV0cmlldmVzIG5hbWVkIGRhdGEgc3RvcmVkIGluIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgb2YgdGhlIGRhdGEgdG8gYmUgcmV0cmlldmVkXG4gICAgICAgICAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgc3RvcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICBpZiAoY2FwYWNpdHkgPCBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgICB2YXIgbHJ1RW50cnkgPSBscnVIYXNoW2tleV07XG5cbiAgICAgICAgICAgIGlmICghbHJ1RW50cnkpIHJldHVybjtcblxuICAgICAgICAgICAgcmVmcmVzaChscnVFbnRyeSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjcmVtb3ZlXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBSZW1vdmVzIGFuIGVudHJ5IGZyb20gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSBvZiB0aGUgZW50cnkgdG8gYmUgcmVtb3ZlZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICBpZiAoY2FwYWNpdHkgPCBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgICB2YXIgbHJ1RW50cnkgPSBscnVIYXNoW2tleV07XG5cbiAgICAgICAgICAgIGlmICghbHJ1RW50cnkpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKGxydUVudHJ5ID09IGZyZXNoRW5kKSBmcmVzaEVuZCA9IGxydUVudHJ5LnA7XG4gICAgICAgICAgICBpZiAobHJ1RW50cnkgPT0gc3RhbGVFbmQpIHN0YWxlRW5kID0gbHJ1RW50cnkubjtcbiAgICAgICAgICAgIGxpbmsobHJ1RW50cnkubixscnVFbnRyeS5wKTtcblxuICAgICAgICAgICAgZGVsZXRlIGxydUhhc2hba2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIShrZXkgaW4gZGF0YSkpIHJldHVybjtcblxuICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07XG4gICAgICAgICAgc2l6ZS0tO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmVBbGxcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIENsZWFycyB0aGUgY2FjaGUgb2JqZWN0IG9mIGFueSBlbnRyaWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlQWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkYXRhID0gY3JlYXRlTWFwKCk7XG4gICAgICAgICAgc2l6ZSA9IDA7XG4gICAgICAgICAgbHJ1SGFzaCA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIGZyZXNoRW5kID0gc3RhbGVFbmQgPSBudWxsO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNkZXN0cm95XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBEZXN0cm95cyB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdCBlbnRpcmVseSxcbiAgICAgICAgICogcmVtb3ZpbmcgaXQgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0gc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgICAgc3RhdHMgPSBudWxsO1xuICAgICAgICAgIGxydUhhc2ggPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBjYWNoZXNbY2FjaGVJZF07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2luZm9cbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJldHJpZXZlIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBhIHBhcnRpY3VsYXIge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgICAqICAgPHVsPlxuICAgICAgICAgKiAgICAgPGxpPioqaWQqKjogdGhlIGlkIG9mIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KipzaXplKio6IHRoZSBudW1iZXIgb2YgZW50cmllcyBrZXB0IGluIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KiouLi4qKjogYW55IGFkZGl0aW9uYWwgcHJvcGVydGllcyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCB3aGVuIGNyZWF0aW5nIHRoZVxuICAgICAgICAgKiAgICAgICBjYWNoZS48L2xpPlxuICAgICAgICAgKiAgIDwvdWw+XG4gICAgICAgICAqL1xuICAgICAgICBpbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBzdGF0cywge3NpemU6IHNpemV9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuXG4gICAgICAvKipcbiAgICAgICAqIG1ha2VzIHRoZSBgZW50cnlgIHRoZSBmcmVzaEVuZCBvZiB0aGUgTFJVIGxpbmtlZCBsaXN0XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlZnJlc2goZW50cnkpIHtcbiAgICAgICAgaWYgKGVudHJ5ICE9IGZyZXNoRW5kKSB7XG4gICAgICAgICAgaWYgKCFzdGFsZUVuZCkge1xuICAgICAgICAgICAgc3RhbGVFbmQgPSBlbnRyeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWxlRW5kID09IGVudHJ5KSB7XG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5Lm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluayhlbnRyeS5uLCBlbnRyeS5wKTtcbiAgICAgICAgICBsaW5rKGVudHJ5LCBmcmVzaEVuZCk7XG4gICAgICAgICAgZnJlc2hFbmQgPSBlbnRyeTtcbiAgICAgICAgICBmcmVzaEVuZC5uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogYmlkaXJlY3Rpb25hbGx5IGxpbmtzIHR3byBlbnRyaWVzIG9mIHRoZSBMUlUgbGlua2VkIGxpc3RcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gbGluayhuZXh0RW50cnksIHByZXZFbnRyeSkge1xuICAgICAgICBpZiAobmV4dEVudHJ5ICE9IHByZXZFbnRyeSkge1xuICAgICAgICAgIGlmIChuZXh0RW50cnkpIG5leHRFbnRyeS5wID0gcHJldkVudHJ5OyAvL3Agc3RhbmRzIGZvciBwcmV2aW91cywgJ3ByZXYnIGRpZG4ndCBtaW5pZnlcbiAgICAgICAgICBpZiAocHJldkVudHJ5KSBwcmV2RW50cnkubiA9IG5leHRFbnRyeTsgLy9uIHN0YW5kcyBmb3IgbmV4dCwgJ25leHQnIGRpZG4ndCBtaW5pZnlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjYWNoZUZhY3RvcnkjaW5mb1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCB0aGUgY2FjaGVzIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWRcbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gLSBrZXktdmFsdWUgbWFwIG9mIGBjYWNoZUlkYCB0byB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYGNhY2hlI2luZm9gXG4gICAqL1xuICAgIGNhY2hlRmFjdG9yeS5pbmZvID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaW5mbyA9IHt9O1xuICAgICAgZm9yRWFjaChjYWNoZXMsIGZ1bmN0aW9uKGNhY2hlLCBjYWNoZUlkKSB7XG4gICAgICAgIGluZm9bY2FjaGVJZF0gPSBjYWNoZS5pbmZvKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH07XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5I2dldFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogR2V0IGFjY2VzcyB0byBhIGNhY2hlIG9iamVjdCBieSB0aGUgYGNhY2hlSWRgIHVzZWQgd2hlbiBpdCB3YXMgY3JlYXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlSWQgTmFtZSBvciBpZCBvZiBhIGNhY2hlIHRvIGFjY2Vzcy5cbiAgICogQHJldHVybnMge29iamVjdH0gQ2FjaGUgb2JqZWN0IGlkZW50aWZpZWQgYnkgdGhlIGNhY2hlSWQgb3IgdW5kZWZpbmVkIGlmIG5vIHN1Y2ggY2FjaGUuXG4gICAqL1xuICAgIGNhY2hlRmFjdG9yeS5nZXQgPSBmdW5jdGlvbihjYWNoZUlkKSB7XG4gICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdO1xuICAgIH07XG5cblxuICAgIHJldHVybiBjYWNoZUZhY3Rvcnk7XG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR0ZW1wbGF0ZUNhY2hlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgZmlyc3QgdGltZSBhIHRlbXBsYXRlIGlzIHVzZWQsIGl0IGlzIGxvYWRlZCBpbiB0aGUgdGVtcGxhdGUgY2FjaGUgZm9yIHF1aWNrIHJldHJpZXZhbC4gWW91XG4gKiBjYW4gbG9hZCB0ZW1wbGF0ZXMgZGlyZWN0bHkgaW50byB0aGUgY2FjaGUgaW4gYSBgc2NyaXB0YCB0YWcsIG9yIGJ5IGNvbnN1bWluZyB0aGVcbiAqIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZSBkaXJlY3RseS5cbiAqXG4gKiBBZGRpbmcgdmlhIHRoZSBgc2NyaXB0YCB0YWc6XG4gKlxuICogYGBgaHRtbFxuICogICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L25nLXRlbXBsYXRlXCIgaWQ9XCJ0ZW1wbGF0ZUlkLmh0bWxcIj5cbiAqICAgICA8cD5UaGlzIGlzIHRoZSBjb250ZW50IG9mIHRoZSB0ZW1wbGF0ZTwvcD5cbiAqICAgPC9zY3JpcHQ+XG4gKiBgYGBcbiAqXG4gKiAqKk5vdGU6KiogdGhlIGBzY3JpcHRgIHRhZyBjb250YWluaW5nIHRoZSB0ZW1wbGF0ZSBkb2VzIG5vdCBuZWVkIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBgaGVhZGAgb2ZcbiAqIHRoZSBkb2N1bWVudCwgYnV0IGl0IG11c3QgYmUgYSBkZXNjZW5kZW50IG9mIHRoZSB7QGxpbmsgbmcuJHJvb3RFbGVtZW50ICRyb290RWxlbWVudH0gKElFLFxuICogZWxlbWVudCB3aXRoIG5nLWFwcCBhdHRyaWJ1dGUpLCBvdGhlcndpc2UgdGhlIHRlbXBsYXRlIHdpbGwgYmUgaWdub3JlZC5cbiAqXG4gKiBBZGRpbmcgdmlhIHRoZSBgJHRlbXBsYXRlQ2FjaGVgIHNlcnZpY2U6XG4gKlxuICogYGBganNcbiAqIHZhciBteUFwcCA9IGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKTtcbiAqIG15QXBwLnJ1bihmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICogICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3RlbXBsYXRlSWQuaHRtbCcsICdUaGlzIGlzIHRoZSBjb250ZW50IG9mIHRoZSB0ZW1wbGF0ZScpO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBUbyByZXRyaWV2ZSB0aGUgdGVtcGxhdGUgbGF0ZXIsIHNpbXBseSB1c2UgaXQgaW4geW91ciBIVE1MOlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1pbmNsdWRlPVwiICd0ZW1wbGF0ZUlkLmh0bWwnIFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogb3IgZ2V0IGl0IHZpYSBKYXZhc2NyaXB0OlxuICogYGBganNcbiAqICR0ZW1wbGF0ZUNhY2hlLmdldCgndGVtcGxhdGVJZC5odG1sJylcbiAqIGBgYFxuICpcbiAqIFNlZSB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSAkY2FjaGVGYWN0b3J5fS5cbiAqXG4gKi9cbmZ1bmN0aW9uICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRjYWNoZUZhY3RvcnkpIHtcbiAgICByZXR1cm4gJGNhY2hlRmFjdG9yeSgndGVtcGxhdGVzJyk7XG4gIH1dO1xufVxuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gKiAgICAgQW55IGNvbW1pdHMgdG8gdGhpcyBmaWxlIHNob3VsZCBiZSByZXZpZXdlZCB3aXRoIHNlY3VyaXR5IGluIG1pbmQuICAqXG4gKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgaXMgcmVxdWlyZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gKiAgICBPciBhbGxvd3MgZm9yIHNvbWVvbmUgdG8gY2hhbmdlIHRoZSBwcm90b3R5cGUgb2YgYnVpbHQtaW4gb2JqZWN0cz8gICAqXG4gKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKiAhIFZBUklBQkxFL0ZVTkNUSU9OIE5BTUlORyBDT05WRU5USU9OUyBUSEFUIEFQUExZIFRPIFRISVMgRklMRSFcbiAqXG4gKiBET00tcmVsYXRlZCB2YXJpYWJsZXM6XG4gKlxuICogLSBcIm5vZGVcIiAtIERPTSBOb2RlXG4gKiAtIFwiZWxlbWVudFwiIC0gRE9NIEVsZW1lbnQgb3IgTm9kZVxuICogLSBcIiRub2RlXCIgb3IgXCIkZWxlbWVudFwiIC0ganFMaXRlLXdyYXBwZWQgbm9kZSBvciBlbGVtZW50XG4gKlxuICpcbiAqIENvbXBpbGVyIHJlbGF0ZWQgc3R1ZmY6XG4gKlxuICogLSBcImxpbmtGblwiIC0gbGlua2luZyBmbiBvZiBhIHNpbmdsZSBkaXJlY3RpdmVcbiAqIC0gXCJub2RlTGlua0ZuXCIgLSBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBhIHBhcnRpY3VsYXIgbm9kZVxuICogLSBcImNoaWxkTGlua0ZuXCIgLSAgZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgY2hpbGQgbm9kZXMgb2YgYSBwYXJ0aWN1bGFyIG5vZGVcbiAqIC0gXCJjb21wb3NpdGVMaW5rRm5cIiAtIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGEgY29tcGlsYXRpb24gcm9vdCAobm9kZUxpc3QpXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkY29tcGlsZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBpbGVzIGFuIEhUTUwgc3RyaW5nIG9yIERPTSBpbnRvIGEgdGVtcGxhdGUgYW5kIHByb2R1Y2VzIGEgdGVtcGxhdGUgZnVuY3Rpb24sIHdoaWNoXG4gKiBjYW4gdGhlbiBiZSB1c2VkIHRvIGxpbmsge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgYHNjb3BlYH0gYW5kIHRoZSB0ZW1wbGF0ZSB0b2dldGhlci5cbiAqXG4gKiBUaGUgY29tcGlsYXRpb24gaXMgYSBwcm9jZXNzIG9mIHdhbGtpbmcgdGhlIERPTSB0cmVlIGFuZCBtYXRjaGluZyBET00gZWxlbWVudHMgdG9cbiAqIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIFRoaXMgZG9jdW1lbnQgaXMgYW4gaW4tZGVwdGggcmVmZXJlbmNlIG9mIGFsbCBkaXJlY3RpdmUgb3B0aW9ucy5cbiAqIEZvciBhIGdlbnRsZSBpbnRyb2R1Y3Rpb24gdG8gZGlyZWN0aXZlcyB3aXRoIGV4YW1wbGVzIG9mIGNvbW1vbiB1c2UgY2FzZXMsXG4gKiBzZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlIGd1aWRlfS5cbiAqIDwvZGl2PlxuICpcbiAqICMjIENvbXByZWhlbnNpdmUgRGlyZWN0aXZlIEFQSVxuICpcbiAqIFRoZXJlIGFyZSBtYW55IGRpZmZlcmVudCBvcHRpb25zIGZvciBhIGRpcmVjdGl2ZS5cbiAqXG4gKiBUaGUgZGlmZmVyZW5jZSByZXNpZGVzIGluIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiBZb3UgY2FuIGVpdGhlciByZXR1cm4gYSBcIkRpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdFwiIChzZWUgYmVsb3cpIHRoYXQgZGVmaW5lcyB0aGUgZGlyZWN0aXZlIHByb3BlcnRpZXMsXG4gKiBvciBqdXN0IHRoZSBgcG9zdExpbmtgIGZ1bmN0aW9uIChhbGwgb3RoZXIgcHJvcGVydGllcyB3aWxsIGhhdmUgdGhlIGRlZmF1bHQgdmFsdWVzKS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPlxuICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBcImRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdFwiIGZvcm0uXG4gKiA8L2Rpdj5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBkaXJlY3RpdmUgZGVjbGFyZWQgd2l0aCBhIERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdDpcbiAqXG4gKiBgYGBqc1xuICogICB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSguLi4pO1xuICpcbiAqICAgbXlNb2R1bGUuZGlyZWN0aXZlKCdkaXJlY3RpdmVOYW1lJywgZnVuY3Rpb24gZmFjdG9yeShpbmplY3RhYmxlcykge1xuICogICAgIHZhciBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0ID0ge1xuICogICAgICAgcHJpb3JpdHk6IDAsXG4gKiAgICAgICB0ZW1wbGF0ZTogJzxkaXY+PC9kaXY+JywgLy8gb3IgLy8gZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgeyAuLi4gfSxcbiAqICAgICAgIC8vIG9yXG4gKiAgICAgICAvLyB0ZW1wbGF0ZVVybDogJ2RpcmVjdGl2ZS5odG1sJywgLy8gb3IgLy8gZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgeyAuLi4gfSxcbiAqICAgICAgIHRyYW5zY2x1ZGU6IGZhbHNlLFxuICogICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAqICAgICAgIHRlbXBsYXRlTmFtZXNwYWNlOiAnaHRtbCcsXG4gKiAgICAgICBzY29wZTogZmFsc2UsXG4gKiAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICR0cmFuc2NsdWRlLCBvdGhlckluamVjdGFibGVzKSB7IC4uLiB9LFxuICogICAgICAgY29udHJvbGxlckFzOiAnc3RyaW5nSWRlbnRpZmllcicsXG4gKiAgICAgICBiaW5kVG9Db250cm9sbGVyOiBmYWxzZSxcbiAqICAgICAgIHJlcXVpcmU6ICdzaWJsaW5nRGlyZWN0aXZlTmFtZScsIC8vIG9yIC8vIFsnXnBhcmVudERpcmVjdGl2ZU5hbWUnLCAnP29wdGlvbmFsRGlyZWN0aXZlTmFtZScsICc/Xm9wdGlvbmFsUGFyZW50J10sXG4gKiAgICAgICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIHByZUxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH0sXG4gKiAgICAgICAgICAgcG9zdDogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH1cbiAqICAgICAgICAgfVxuICogICAgICAgICAvLyBvclxuICogICAgICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8gbGluazoge1xuICogICAgICAgLy8gIHByZTogZnVuY3Rpb24gcHJlTGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfSxcbiAqICAgICAgIC8vICBwb3N0OiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfVxuICogICAgICAgLy8gfVxuICogICAgICAgLy8gb3JcbiAqICAgICAgIC8vIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKCAuLi4gKSB7IC4uLiB9XG4gKiAgICAgfTtcbiAqICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIEFueSB1bnNwZWNpZmllZCBvcHRpb25zIHdpbGwgdXNlIHRoZSBkZWZhdWx0IHZhbHVlLiBZb3UgY2FuIHNlZSB0aGUgZGVmYXVsdCB2YWx1ZXMgYmVsb3cuXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGVyZWZvcmUgdGhlIGFib3ZlIGNhbiBiZSBzaW1wbGlmaWVkIGFzOlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKC4uLik7XG4gKlxuICogICBteU1vZHVsZS5kaXJlY3RpdmUoJ2RpcmVjdGl2ZU5hbWUnLCBmdW5jdGlvbiBmYWN0b3J5KGluamVjdGFibGVzKSB7XG4gKiAgICAgdmFyIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3QgPSB7XG4gKiAgICAgICBsaW5rOiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgeyAuLi4gfVxuICogICAgIH07XG4gKiAgICAgcmV0dXJuIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3Q7XG4gKiAgICAgLy8gb3JcbiAqICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMpIHsgLi4uIH1cbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKlxuICpcbiAqICMjIyBEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3RcbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0IHByb3ZpZGVzIGluc3RydWN0aW9ucyB0byB0aGUge0BsaW5rIG5nLiRjb21waWxlXG4gKiBjb21waWxlcn0uIFRoZSBhdHRyaWJ1dGVzIGFyZTpcbiAqXG4gKiAjIyMjIGBtdWx0aUVsZW1lbnRgXG4gKiBXaGVuIHRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIHRydWUsIHRoZSBIVE1MIGNvbXBpbGVyIHdpbGwgY29sbGVjdCBET00gbm9kZXMgYmV0d2VlblxuICogbm9kZXMgd2l0aCB0aGUgYXR0cmlidXRlcyBgZGlyZWN0aXZlLW5hbWUtc3RhcnRgIGFuZCBgZGlyZWN0aXZlLW5hbWUtZW5kYCwgYW5kIGdyb3VwIHRoZW1cbiAqIHRvZ2V0aGVyIGFzIHRoZSBkaXJlY3RpdmUgZWxlbWVudHMuIEl0IGlzIHJlY29tbWVuZGVkIHRoYXQgdGhpcyBmZWF0dXJlIGJlIHVzZWQgb24gZGlyZWN0aXZlc1xuICogd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBiZWhhdmlvdXJhbCAoc3VjaCBhcyB7QGxpbmsgbmdDbGlja30pLCBhbmQgd2hpY2hcbiAqIGRvIG5vdCBtYW5pcHVsYXRlIG9yIHJlcGxhY2UgY2hpbGQgbm9kZXMgKHN1Y2ggYXMge0BsaW5rIG5nSW5jbHVkZX0pLlxuICpcbiAqICMjIyMgYHByaW9yaXR5YFxuICogV2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgZGlyZWN0aXZlcyBkZWZpbmVkIG9uIGEgc2luZ2xlIERPTSBlbGVtZW50LCBzb21ldGltZXMgaXRcbiAqIGlzIG5lY2Vzc2FyeSB0byBzcGVjaWZ5IHRoZSBvcmRlciBpbiB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYXBwbGllZC4gVGhlIGBwcmlvcml0eWAgaXMgdXNlZFxuICogdG8gc29ydCB0aGUgZGlyZWN0aXZlcyBiZWZvcmUgdGhlaXIgYGNvbXBpbGVgIGZ1bmN0aW9ucyBnZXQgY2FsbGVkLiBQcmlvcml0eSBpcyBkZWZpbmVkIGFzIGFcbiAqIG51bWJlci4gRGlyZWN0aXZlcyB3aXRoIGdyZWF0ZXIgbnVtZXJpY2FsIGBwcmlvcml0eWAgYXJlIGNvbXBpbGVkIGZpcnN0LiBQcmUtbGluayBmdW5jdGlvbnNcbiAqIGFyZSBhbHNvIHJ1biBpbiBwcmlvcml0eSBvcmRlciwgYnV0IHBvc3QtbGluayBmdW5jdGlvbnMgYXJlIHJ1biBpbiByZXZlcnNlIG9yZGVyLiBUaGUgb3JkZXJcbiAqIG9mIGRpcmVjdGl2ZXMgd2l0aCB0aGUgc2FtZSBwcmlvcml0eSBpcyB1bmRlZmluZWQuIFRoZSBkZWZhdWx0IHByaW9yaXR5IGlzIGAwYC5cbiAqXG4gKiAjIyMjIGB0ZXJtaW5hbGBcbiAqIElmIHNldCB0byB0cnVlIHRoZW4gdGhlIGN1cnJlbnQgYHByaW9yaXR5YCB3aWxsIGJlIHRoZSBsYXN0IHNldCBvZiBkaXJlY3RpdmVzXG4gKiB3aGljaCB3aWxsIGV4ZWN1dGUgKGFueSBkaXJlY3RpdmVzIGF0IHRoZSBjdXJyZW50IHByaW9yaXR5IHdpbGwgc3RpbGwgZXhlY3V0ZVxuICogYXMgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiBvbiBzYW1lIGBwcmlvcml0eWAgaXMgdW5kZWZpbmVkKS4gTm90ZSB0aGF0IGV4cHJlc3Npb25zXG4gKiBhbmQgb3RoZXIgZGlyZWN0aXZlcyB1c2VkIGluIHRoZSBkaXJlY3RpdmUncyB0ZW1wbGF0ZSB3aWxsIGFsc28gYmUgZXhjbHVkZWQgZnJvbSBleGVjdXRpb24uXG4gKlxuICogIyMjIyBgc2NvcGVgXG4gKiBUaGUgc2NvcGUgcHJvcGVydHkgY2FuIGJlIGB0cnVlYCwgYW4gb2JqZWN0IG9yIGEgZmFsc3kgdmFsdWU6XG4gKlxuICogKiAqKmZhbHN5OioqIE5vIHNjb3BlIHdpbGwgYmUgY3JlYXRlZCBmb3IgdGhlIGRpcmVjdGl2ZS4gVGhlIGRpcmVjdGl2ZSB3aWxsIHVzZSBpdHMgcGFyZW50J3Mgc2NvcGUuXG4gKlxuICogKiAqKmB0cnVlYDoqKiBBIG5ldyBjaGlsZCBzY29wZSB0aGF0IHByb3RvdHlwaWNhbGx5IGluaGVyaXRzIGZyb20gaXRzIHBhcmVudCB3aWxsIGJlIGNyZWF0ZWQgZm9yXG4gKiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC4gSWYgbXVsdGlwbGUgZGlyZWN0aXZlcyBvbiB0aGUgc2FtZSBlbGVtZW50IHJlcXVlc3QgYSBuZXcgc2NvcGUsXG4gKiBvbmx5IG9uZSBuZXcgc2NvcGUgaXMgY3JlYXRlZC4gVGhlIG5ldyBzY29wZSBydWxlIGRvZXMgbm90IGFwcGx5IGZvciB0aGUgcm9vdCBvZiB0aGUgdGVtcGxhdGVcbiAqIHNpbmNlIHRoZSByb290IG9mIHRoZSB0ZW1wbGF0ZSBhbHdheXMgZ2V0cyBhIG5ldyBzY29wZS5cbiAqXG4gKiAqICoqYHsuLi59YCAoYW4gb2JqZWN0IGhhc2gpOioqIEEgbmV3IFwiaXNvbGF0ZVwiIHNjb3BlIGlzIGNyZWF0ZWQgZm9yIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LiBUaGVcbiAqICdpc29sYXRlJyBzY29wZSBkaWZmZXJzIGZyb20gbm9ybWFsIHNjb3BlIGluIHRoYXQgaXQgZG9lcyBub3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdCBmcm9tIGl0cyBwYXJlbnRcbiAqIHNjb3BlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGNyZWF0aW5nIHJldXNhYmxlIGNvbXBvbmVudHMsIHdoaWNoIHNob3VsZCBub3QgYWNjaWRlbnRhbGx5IHJlYWQgb3IgbW9kaWZ5XG4gKiBkYXRhIGluIHRoZSBwYXJlbnQgc2NvcGUuXG4gKlxuICogVGhlICdpc29sYXRlJyBzY29wZSBvYmplY3QgaGFzaCBkZWZpbmVzIGEgc2V0IG9mIGxvY2FsIHNjb3BlIHByb3BlcnRpZXMgZGVyaXZlZCBmcm9tIGF0dHJpYnV0ZXMgb24gdGhlXG4gKiBkaXJlY3RpdmUncyBlbGVtZW50LiBUaGVzZSBsb2NhbCBwcm9wZXJ0aWVzIGFyZSB1c2VmdWwgZm9yIGFsaWFzaW5nIHZhbHVlcyBmb3IgdGVtcGxhdGVzLiBUaGUga2V5cyBpblxuICogdGhlIG9iamVjdCBoYXNoIG1hcCB0byB0aGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgb24gdGhlIGlzb2xhdGUgc2NvcGU7IHRoZSB2YWx1ZXMgZGVmaW5lIGhvdyB0aGUgcHJvcGVydHlcbiAqIGlzIGJvdW5kIHRvIHRoZSBwYXJlbnQgc2NvcGUsIHZpYSBtYXRjaGluZyBhdHRyaWJ1dGVzIG9uIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50OlxuICpcbiAqICogYEBgIG9yIGBAYXR0cmAgLSBiaW5kIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgdG8gdGhlIHZhbHVlIG9mIERPTSBhdHRyaWJ1dGUuIFRoZSByZXN1bHQgaXNcbiAqICAgYWx3YXlzIGEgc3RyaW5nIHNpbmNlIERPTSBhdHRyaWJ1dGVzIGFyZSBzdHJpbmdzLiBJZiBubyBgYXR0cmAgbmFtZSBpcyBzcGVjaWZpZWQgIHRoZW4gdGhlXG4gKiAgIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUuXG4gKiAgIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9XCJoZWxsbyB7e25hbWV9fVwiPmAgYW5kIHdpZGdldCBkZWZpbml0aW9uXG4gKiAgIG9mIGBzY29wZTogeyBsb2NhbE5hbWU6J0BteUF0dHInIH1gLCB0aGVuIHdpZGdldCBzY29wZSBwcm9wZXJ0eSBgbG9jYWxOYW1lYCB3aWxsIHJlZmxlY3RcbiAqICAgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiBgaGVsbG8ge3tuYW1lfX1gLiBBcyB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBjaGFuZ2VzIHNvIHdpbGwgdGhlXG4gKiAgIGBsb2NhbE5hbWVgIHByb3BlcnR5IG9uIHRoZSB3aWRnZXQgc2NvcGUuIFRoZSBgbmFtZWAgaXMgcmVhZCBmcm9tIHRoZSBwYXJlbnQgc2NvcGUgKG5vdFxuICogICBjb21wb25lbnQgc2NvcGUpLlxuICpcbiAqICogYD1gIG9yIGA9YXR0cmAgLSBzZXQgdXAgYmktZGlyZWN0aW9uYWwgYmluZGluZyBiZXR3ZWVuIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgYW5kIHRoZVxuICogICBwYXJlbnQgc2NvcGUgcHJvcGVydHkgb2YgbmFtZSBkZWZpbmVkIHZpYSB0aGUgdmFsdWUgb2YgdGhlIGBhdHRyYCBhdHRyaWJ1dGUuIElmIG5vIGBhdHRyYFxuICogICBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLlxuICogICBHaXZlbiBgPHdpZGdldCBteS1hdHRyPVwicGFyZW50TW9kZWxcIj5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvbiBvZlxuICogICBgc2NvcGU6IHsgbG9jYWxNb2RlbDonPW15QXR0cicgfWAsIHRoZW4gd2lkZ2V0IHNjb3BlIHByb3BlcnR5IGBsb2NhbE1vZGVsYCB3aWxsIHJlZmxlY3QgdGhlXG4gKiAgIHZhbHVlIG9mIGBwYXJlbnRNb2RlbGAgb24gdGhlIHBhcmVudCBzY29wZS4gQW55IGNoYW5nZXMgdG8gYHBhcmVudE1vZGVsYCB3aWxsIGJlIHJlZmxlY3RlZFxuICogICBpbiBgbG9jYWxNb2RlbGAgYW5kIGFueSBjaGFuZ2VzIGluIGBsb2NhbE1vZGVsYCB3aWxsIHJlZmxlY3QgaW4gYHBhcmVudE1vZGVsYC4gSWYgdGhlIHBhcmVudFxuICogICBzY29wZSBwcm9wZXJ0eSBkb2Vzbid0IGV4aXN0LCBpdCB3aWxsIHRocm93IGEgTk9OX0FTU0lHTkFCTEVfTU9ERUxfRVhQUkVTU0lPTiBleGNlcHRpb24uIFlvdVxuICogICBjYW4gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2luZyBgPT9gIG9yIGA9P2F0dHJgIGluIG9yZGVyIHRvIGZsYWcgdGhlIHByb3BlcnR5IGFzIG9wdGlvbmFsLiBJZlxuICogICB5b3Ugd2FudCB0byBzaGFsbG93IHdhdGNoIGZvciBjaGFuZ2VzIChpLmUuICR3YXRjaENvbGxlY3Rpb24gaW5zdGVhZCBvZiAkd2F0Y2gpIHlvdSBjYW4gdXNlXG4gKiAgIGA9KmAgb3IgYD0qYXR0cmAgKGA9Kj9gIG9yIGA9Kj9hdHRyYCBpZiB0aGUgcHJvcGVydHkgaXMgb3B0aW9uYWwpLlxuICpcbiAqICogYCZgIG9yIGAmYXR0cmAgLSBwcm92aWRlcyBhIHdheSB0byBleGVjdXRlIGFuIGV4cHJlc3Npb24gaW4gdGhlIGNvbnRleHQgb2YgdGhlIHBhcmVudCBzY29wZS5cbiAqICAgSWYgbm8gYGF0dHJgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlXG4gKiAgIGxvY2FsIG5hbWUuIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9XCJjb3VudCA9IGNvdW50ICsgdmFsdWVcIj5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvbiBvZlxuICogICBgc2NvcGU6IHsgbG9jYWxGbjonJm15QXR0cicgfWAsIHRoZW4gaXNvbGF0ZSBzY29wZSBwcm9wZXJ0eSBgbG9jYWxGbmAgd2lsbCBwb2ludCB0b1xuICogICBhIGZ1bmN0aW9uIHdyYXBwZXIgZm9yIHRoZSBgY291bnQgPSBjb3VudCArIHZhbHVlYCBleHByZXNzaW9uLiBPZnRlbiBpdCdzIGRlc2lyYWJsZSB0b1xuICogICBwYXNzIGRhdGEgZnJvbSB0aGUgaXNvbGF0ZWQgc2NvcGUgdmlhIGFuIGV4cHJlc3Npb24gdG8gdGhlIHBhcmVudCBzY29wZSwgdGhpcyBjYW4gYmVcbiAqICAgZG9uZSBieSBwYXNzaW5nIGEgbWFwIG9mIGxvY2FsIHZhcmlhYmxlIG5hbWVzIGFuZCB2YWx1ZXMgaW50byB0aGUgZXhwcmVzc2lvbiB3cmFwcGVyIGZuLlxuICogICBGb3IgZXhhbXBsZSwgaWYgdGhlIGV4cHJlc3Npb24gaXMgYGluY3JlbWVudChhbW91bnQpYCB0aGVuIHdlIGNhbiBzcGVjaWZ5IHRoZSBhbW91bnQgdmFsdWVcbiAqICAgYnkgY2FsbGluZyB0aGUgYGxvY2FsRm5gIGFzIGBsb2NhbEZuKHthbW91bnQ6IDIyfSlgLlxuICpcbiAqIEluIGdlbmVyYWwgaXQncyBwb3NzaWJsZSB0byBhcHBseSBtb3JlIHRoYW4gb25lIGRpcmVjdGl2ZSB0byBvbmUgZWxlbWVudCwgYnV0IHRoZXJlIG1pZ2h0IGJlIGxpbWl0YXRpb25zXG4gKiBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2Ygc2NvcGUgcmVxdWlyZWQgYnkgdGhlIGRpcmVjdGl2ZXMuIFRoZSBmb2xsb3dpbmcgcG9pbnRzIHdpbGwgaGVscCBleHBsYWluIHRoZXNlIGxpbWl0YXRpb25zLlxuICogRm9yIHNpbXBsaWNpdHkgb25seSB0d28gZGlyZWN0aXZlcyBhcmUgdGFrZW4gaW50byBhY2NvdW50LCBidXQgaXQgaXMgYWxzbyBhcHBsaWNhYmxlIGZvciBzZXZlcmFsIGRpcmVjdGl2ZXM6XG4gKlxuICogKiAqKm5vIHNjb3BlKiogKyAqKm5vIHNjb3BlKiogPT4gVHdvIGRpcmVjdGl2ZXMgd2hpY2ggZG9uJ3QgcmVxdWlyZSB0aGVpciBvd24gc2NvcGUgd2lsbCB1c2UgdGhlaXIgcGFyZW50J3Mgc2NvcGVcbiAqICogKipjaGlsZCBzY29wZSoqICsgKipubyBzY29wZSoqID0+ICBCb3RoIGRpcmVjdGl2ZXMgd2lsbCBzaGFyZSBvbmUgc2luZ2xlIGNoaWxkIHNjb3BlXG4gKiAqICoqY2hpbGQgc2NvcGUqKiArICoqY2hpbGQgc2NvcGUqKiA9PiAgQm90aCBkaXJlY3RpdmVzIHdpbGwgc2hhcmUgb25lIHNpbmdsZSBjaGlsZCBzY29wZVxuICogKiAqKmlzb2xhdGVkIHNjb3BlKiogKyAqKm5vIHNjb3BlKiogPT4gIFRoZSBpc29sYXRlZCBkaXJlY3RpdmUgd2lsbCB1c2UgaXQncyBvd24gY3JlYXRlZCBpc29sYXRlZCBzY29wZS4gVGhlIG90aGVyIGRpcmVjdGl2ZSB3aWxsIHVzZVxuICogaXRzIHBhcmVudCdzIHNjb3BlXG4gKiAqICoqaXNvbGF0ZWQgc2NvcGUqKiArICoqY2hpbGQgc2NvcGUqKiA9PiAgKipXb24ndCB3b3JrISoqIE9ubHkgb25lIHNjb3BlIGNhbiBiZSByZWxhdGVkIHRvIG9uZSBlbGVtZW50LiBUaGVyZWZvcmUgdGhlc2UgZGlyZWN0aXZlcyBjYW5ub3RcbiAqIGJlIGFwcGxpZWQgdG8gdGhlIHNhbWUgZWxlbWVudC5cbiAqICogKippc29sYXRlZCBzY29wZSoqICsgKippc29sYXRlZCBzY29wZSoqICA9PiAgKipXb24ndCB3b3JrISoqIE9ubHkgb25lIHNjb3BlIGNhbiBiZSByZWxhdGVkIHRvIG9uZSBlbGVtZW50LiBUaGVyZWZvcmUgdGhlc2UgZGlyZWN0aXZlc1xuICogY2Fubm90IGJlIGFwcGxpZWQgdG8gdGhlIHNhbWUgZWxlbWVudC5cbiAqXG4gKlxuICogIyMjIyBgYmluZFRvQ29udHJvbGxlcmBcbiAqIFdoZW4gYW4gaXNvbGF0ZSBzY29wZSBpcyB1c2VkIGZvciBhIGNvbXBvbmVudCAoc2VlIGFib3ZlKSwgYW5kIGBjb250cm9sbGVyQXNgIGlzIHVzZWQsIGBiaW5kVG9Db250cm9sbGVyOiB0cnVlYCB3aWxsXG4gKiBhbGxvdyBhIGNvbXBvbmVudCB0byBoYXZlIGl0cyBwcm9wZXJ0aWVzIGJvdW5kIHRvIHRoZSBjb250cm9sbGVyLCByYXRoZXIgdGhhbiB0byBzY29wZS4gV2hlbiB0aGUgY29udHJvbGxlclxuICogaXMgaW5zdGFudGlhdGVkLCB0aGUgaW5pdGlhbCB2YWx1ZXMgb2YgdGhlIGlzb2xhdGUgc2NvcGUgYmluZGluZ3MgYXJlIGFscmVhZHkgYXZhaWxhYmxlLlxuICpcbiAqICMjIyMgYGNvbnRyb2xsZXJgXG4gKiBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBUaGUgY29udHJvbGxlciBpcyBpbnN0YW50aWF0ZWQgYmVmb3JlIHRoZVxuICogcHJlLWxpbmtpbmcgcGhhc2UgYW5kIGNhbiBiZSBhY2Nlc3NlZCBieSBvdGhlciBkaXJlY3RpdmVzIChzZWVcbiAqIGByZXF1aXJlYCBhdHRyaWJ1dGUpLiBUaGlzIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byBjb21tdW5pY2F0ZSB3aXRoIGVhY2ggb3RoZXIgYW5kIGF1Z21lbnRcbiAqIGVhY2ggb3RoZXIncyBiZWhhdmlvci4gVGhlIGNvbnRyb2xsZXIgaXMgaW5qZWN0YWJsZSAoYW5kIHN1cHBvcnRzIGJyYWNrZXQgbm90YXRpb24pIHdpdGggdGhlIGZvbGxvd2luZyBsb2NhbHM6XG4gKlxuICogKiBgJHNjb3BlYCAtIEN1cnJlbnQgc2NvcGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gKiAqIGAkZWxlbWVudGAgLSBDdXJyZW50IGVsZW1lbnRcbiAqICogYCRhdHRyc2AgLSBDdXJyZW50IGF0dHJpYnV0ZXMgb2JqZWN0IGZvciB0aGUgZWxlbWVudFxuICogKiBgJHRyYW5zY2x1ZGVgIC0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb24gcHJlLWJvdW5kIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZTpcbiAqICAgYGZ1bmN0aW9uKFtzY29wZV0sIGNsb25lTGlua2luZ0ZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KWAuXG4gKiAgICAqIGBzY29wZWA6IG9wdGlvbmFsIGFyZ3VtZW50IHRvIG92ZXJyaWRlIHRoZSBzY29wZS5cbiAqICAgICogYGNsb25lTGlua2luZ0ZuYDogb3B0aW9uYWwgYXJndW1lbnQgdG8gY3JlYXRlIGNsb25lcyBvZiB0aGUgb3JpZ2luYWwgdHJhbnNjbHVkZWQgY29udGVudC5cbiAqICAgICogYGZ1dHVyZVBhcmVudEVsZW1lbnRgOlxuICogICAgICAgICogZGVmaW5lcyB0aGUgcGFyZW50IHRvIHdoaWNoIHRoZSBgY2xvbmVMaW5raW5nRm5gIHdpbGwgYWRkIHRoZSBjbG9uZWQgZWxlbWVudHMuXG4gKiAgICAgICAgKiBkZWZhdWx0OiBgJGVsZW1lbnQucGFyZW50KClgIHJlc3AuIGAkZWxlbWVudGAgZm9yIGB0cmFuc2NsdWRlOidlbGVtZW50J2AgcmVzcC4gYHRyYW5zY2x1ZGU6dHJ1ZWAuXG4gKiAgICAgICAgKiBvbmx5IG5lZWRlZCBmb3IgdHJhbnNjbHVkZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBjb250YWluIG5vbiBodG1sIGVsZW1lbnRzIChlLmcuIFNWRyBlbGVtZW50cylcbiAqICAgICAgICAgIGFuZCB3aGVuIHRoZSBgY2xvbmVMaW5raW5GbmAgaXMgcGFzc2VkLFxuICogICAgICAgICAgYXMgdGhvc2UgZWxlbWVudHMgbmVlZCB0byBjcmVhdGVkIGFuZCBjbG9uZWQgaW4gYSBzcGVjaWFsIHdheSB3aGVuIHRoZXkgYXJlIGRlZmluZWQgb3V0c2lkZSB0aGVpclxuICogICAgICAgICAgdXN1YWwgY29udGFpbmVycyAoZS5nLiBsaWtlIGA8c3ZnPmApLlxuICogICAgICAgICogU2VlIGFsc28gdGhlIGBkaXJlY3RpdmUudGVtcGxhdGVOYW1lc3BhY2VgIHByb3BlcnR5LlxuICpcbiAqXG4gKiAjIyMjIGByZXF1aXJlYFxuICogUmVxdWlyZSBhbm90aGVyIGRpcmVjdGl2ZSBhbmQgaW5qZWN0IGl0cyBjb250cm9sbGVyIGFzIHRoZSBmb3VydGggYXJndW1lbnQgdG8gdGhlIGxpbmtpbmcgZnVuY3Rpb24uIFRoZVxuICogYHJlcXVpcmVgIHRha2VzIGEgc3RyaW5nIG5hbWUgKG9yIGFycmF5IG9mIHN0cmluZ3MpIG9mIHRoZSBkaXJlY3RpdmUocykgdG8gcGFzcyBpbi4gSWYgYW4gYXJyYXkgaXMgdXNlZCwgdGhlXG4gKiBpbmplY3RlZCBhcmd1bWVudCB3aWxsIGJlIGFuIGFycmF5IGluIGNvcnJlc3BvbmRpbmcgb3JkZXIuIElmIG5vIHN1Y2ggZGlyZWN0aXZlIGNhbiBiZVxuICogZm91bmQsIG9yIGlmIHRoZSBkaXJlY3RpdmUgZG9lcyBub3QgaGF2ZSBhIGNvbnRyb2xsZXIsIHRoZW4gYW4gZXJyb3IgaXMgcmFpc2VkICh1bmxlc3Mgbm8gbGluayBmdW5jdGlvblxuICogaXMgc3BlY2lmaWVkLCBpbiB3aGljaCBjYXNlIGVycm9yIGNoZWNraW5nIGlzIHNraXBwZWQpLiBUaGUgbmFtZSBjYW4gYmUgcHJlZml4ZWQgd2l0aDpcbiAqXG4gKiAqIChubyBwcmVmaXgpIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC5cbiAqICogYD9gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgb3IgcGFzcyBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuXG4gKiAqIGBeYCAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQgYW5kIGl0cyBwYXJlbnRzLiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuXG4gKiAqIGBeXmAgLSBMb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50J3MgcGFyZW50cy4gVGhyb3cgYW4gZXJyb3IgaWYgbm90IGZvdW5kLlxuICogKiBgP15gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50IGFuZCBpdHMgcGFyZW50cyBvciBwYXNzXG4gKiAgIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAqICogYD9eXmAgLSBBdHRlbXB0IHRvIGxvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQncyBwYXJlbnRzLCBvciBwYXNzXG4gKiAgIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAqXG4gKlxuICogIyMjIyBgY29udHJvbGxlckFzYFxuICogSWRlbnRpZmllciBuYW1lIGZvciBhIHJlZmVyZW5jZSB0byB0aGUgY29udHJvbGxlciBpbiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUuXG4gKiBUaGlzIGFsbG93cyB0aGUgY29udHJvbGxlciB0byBiZSByZWZlcmVuY2VkIGZyb20gdGhlIGRpcmVjdGl2ZSB0ZW1wbGF0ZS4gVGhpcyBpcyBlc3BlY2lhbGx5XG4gKiB1c2VmdWwgd2hlbiBhIGRpcmVjdGl2ZSBpcyB1c2VkIGFzIGNvbXBvbmVudCwgaS5lLiB3aXRoIGFuIGBpc29sYXRlYCBzY29wZS4gSXQncyBhbHNvIHBvc3NpYmxlXG4gKiB0byB1c2UgaXQgaW4gYSBkaXJlY3RpdmUgd2l0aG91dCBhbiBgaXNvbGF0ZWAgLyBgbmV3YCBzY29wZSwgYnV0IHlvdSBuZWVkIHRvIGJlIGF3YXJlIHRoYXQgdGhlXG4gKiBgY29udHJvbGxlckFzYCByZWZlcmVuY2UgbWlnaHQgb3ZlcndyaXRlIGEgcHJvcGVydHkgdGhhdCBhbHJlYWR5IGV4aXN0cyBvbiB0aGUgcGFyZW50IHNjb3BlLlxuICpcbiAqXG4gKiAjIyMjIGByZXN0cmljdGBcbiAqIFN0cmluZyBvZiBzdWJzZXQgb2YgYEVBQ01gIHdoaWNoIHJlc3RyaWN0cyB0aGUgZGlyZWN0aXZlIHRvIGEgc3BlY2lmaWMgZGlyZWN0aXZlXG4gKiBkZWNsYXJhdGlvbiBzdHlsZS4gSWYgb21pdHRlZCwgdGhlIGRlZmF1bHRzIChlbGVtZW50cyBhbmQgYXR0cmlidXRlcykgYXJlIHVzZWQuXG4gKlxuICogKiBgRWAgLSBFbGVtZW50IG5hbWUgKGRlZmF1bHQpOiBgPG15LWRpcmVjdGl2ZT48L215LWRpcmVjdGl2ZT5gXG4gKiAqIGBBYCAtIEF0dHJpYnV0ZSAoZGVmYXVsdCk6IGA8ZGl2IG15LWRpcmVjdGl2ZT1cImV4cFwiPjwvZGl2PmBcbiAqICogYENgIC0gQ2xhc3M6IGA8ZGl2IGNsYXNzPVwibXktZGlyZWN0aXZlOiBleHA7XCI+PC9kaXY+YFxuICogKiBgTWAgLSBDb21tZW50OiBgPCEtLSBkaXJlY3RpdmU6IG15LWRpcmVjdGl2ZSBleHAgLS0+YFxuICpcbiAqXG4gKiAjIyMjIGB0ZW1wbGF0ZU5hbWVzcGFjZWBcbiAqIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIGRvY3VtZW50IHR5cGUgdXNlZCBieSB0aGUgbWFya3VwIGluIHRoZSB0ZW1wbGF0ZS5cbiAqIEFuZ3VsYXJKUyBuZWVkcyB0aGlzIGluZm9ybWF0aW9uIGFzIHRob3NlIGVsZW1lbnRzIG5lZWQgdG8gYmUgY3JlYXRlZCBhbmQgY2xvbmVkXG4gKiBpbiBhIHNwZWNpYWwgd2F5IHdoZW4gdGhleSBhcmUgZGVmaW5lZCBvdXRzaWRlIHRoZWlyIHVzdWFsIGNvbnRhaW5lcnMgbGlrZSBgPHN2Zz5gIGFuZCBgPG1hdGg+YC5cbiAqXG4gKiAqIGBodG1sYCAtIEFsbCByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgSFRNTC4gUm9vdCBub2RlcyBtYXkgYWxzbyBiZVxuICogICB0b3AtbGV2ZWwgZWxlbWVudHMgc3VjaCBhcyBgPHN2Zz5gIG9yIGA8bWF0aD5gLlxuICogKiBgc3ZnYCAtIFRoZSByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgU1ZHIGVsZW1lbnRzIChleGNsdWRpbmcgYDxtYXRoPmApLlxuICogKiBgbWF0aGAgLSBUaGUgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIE1hdGhNTCBlbGVtZW50cyAoZXhjbHVkaW5nIGA8c3ZnPmApLlxuICpcbiAqIElmIG5vIGB0ZW1wbGF0ZU5hbWVzcGFjZWAgaXMgc3BlY2lmaWVkLCB0aGVuIHRoZSBuYW1lc3BhY2UgaXMgY29uc2lkZXJlZCB0byBiZSBgaHRtbGAuXG4gKlxuICogIyMjIyBgdGVtcGxhdGVgXG4gKiBIVE1MIG1hcmt1cCB0aGF0IG1heTpcbiAqICogUmVwbGFjZSB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgKGRlZmF1bHQpLlxuICogKiBSZXBsYWNlIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IGl0c2VsZiAoaWYgYHJlcGxhY2VgIGlzIHRydWUgLSBERVBSRUNBVEVEKS5cbiAqICogV3JhcCB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgKGlmIGB0cmFuc2NsdWRlYCBpcyB0cnVlKS5cbiAqXG4gKiBWYWx1ZSBtYXkgYmU6XG4gKlxuICogKiBBIHN0cmluZy4gRm9yIGV4YW1wbGUgYDxkaXYgcmVkLW9uLWhvdmVyPnt7ZGVsZXRlX3N0cn19PC9kaXY+YC5cbiAqICogQSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0d28gYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYFxuICogICBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZCByZXR1cm5zIGEgc3RyaW5nIHZhbHVlLlxuICpcbiAqXG4gKiAjIyMjIGB0ZW1wbGF0ZVVybGBcbiAqIFRoaXMgaXMgc2ltaWxhciB0byBgdGVtcGxhdGVgIGJ1dCB0aGUgdGVtcGxhdGUgaXMgbG9hZGVkIGZyb20gdGhlIHNwZWNpZmllZCBVUkwsIGFzeW5jaHJvbm91c2x5LlxuICpcbiAqIEJlY2F1c2UgdGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgdGhlIGNvbXBpbGVyIHdpbGwgc3VzcGVuZCBjb21waWxhdGlvbiBvZiBkaXJlY3RpdmVzIG9uIHRoYXQgZWxlbWVudFxuICogZm9yIGxhdGVyIHdoZW4gdGhlIHRlbXBsYXRlIGhhcyBiZWVuIHJlc29sdmVkLiAgSW4gdGhlIG1lYW50aW1lIGl0IHdpbGwgY29udGludWUgdG8gY29tcGlsZSBhbmQgbGlua1xuICogc2libGluZyBhbmQgcGFyZW50IGVsZW1lbnRzIGFzIHRob3VnaCB0aGlzIGVsZW1lbnQgaGFkIG5vdCBjb250YWluZWQgYW55IGRpcmVjdGl2ZXMuXG4gKlxuICogVGhlIGNvbXBpbGVyIGRvZXMgbm90IHN1c3BlbmQgdGhlIGVudGlyZSBjb21waWxhdGlvbiB0byB3YWl0IGZvciB0ZW1wbGF0ZXMgdG8gYmUgbG9hZGVkIGJlY2F1c2UgdGhpc1xuICogd291bGQgcmVzdWx0IGluIHRoZSB3aG9sZSBhcHAgXCJzdGFsbGluZ1wiIHVudGlsIGFsbCB0ZW1wbGF0ZXMgYXJlIGxvYWRlZCBhc3luY2hyb25vdXNseSAtIGV2ZW4gaW4gdGhlXG4gKiBjYXNlIHdoZW4gb25seSBvbmUgZGVlcGx5IG5lc3RlZCBkaXJlY3RpdmUgaGFzIGB0ZW1wbGF0ZVVybGAuXG4gKlxuICogVGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgZXZlbiBpZiB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gcHJlbG9hZGVkIGludG8gdGhlIHtAbGluayAkdGVtcGxhdGVDYWNoZX1cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgYHRlbXBsYXRlVXJsYCBhcyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIFVSTCBvciBhcyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3b1xuICogYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYCBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZCByZXR1cm5zXG4gKiBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIHVybC4gIEluIGVpdGhlciBjYXNlLCB0aGUgdGVtcGxhdGUgVVJMIGlzIHBhc3NlZCB0aHJvdWdoIHtAbGlua1xuICogJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmwgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9LlxuICpcbiAqXG4gKiAjIyMjIGByZXBsYWNlYCAoWypERVBSRUNBVEVEKiFdLCB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtYWpvciByZWxlYXNlIC0gaS5lLiB2Mi4wKVxuICogc3BlY2lmeSB3aGF0IHRoZSB0ZW1wbGF0ZSBzaG91bGQgcmVwbGFjZS4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqXG4gKiAqIGB0cnVlYCAtIHRoZSB0ZW1wbGF0ZSB3aWxsIHJlcGxhY2UgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuXG4gKiAqIGBmYWxzZWAgLSB0aGUgdGVtcGxhdGUgd2lsbCByZXBsYWNlIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAqXG4gKiBUaGUgcmVwbGFjZW1lbnQgcHJvY2VzcyBtaWdyYXRlcyBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgLyBjbGFzc2VzIGZyb20gdGhlIG9sZCBlbGVtZW50IHRvIHRoZSBuZXdcbiAqIG9uZS4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI3RlbXBsYXRlLWV4cGFuZGluZy1kaXJlY3RpdmVcbiAqIERpcmVjdGl2ZXMgR3VpZGV9IGZvciBhbiBleGFtcGxlLlxuICpcbiAqIFRoZXJlIGFyZSB2ZXJ5IGZldyBzY2VuYXJpb3Mgd2hlcmUgZWxlbWVudCByZXBsYWNlbWVudCBpcyByZXF1aXJlZCBmb3IgdGhlIGFwcGxpY2F0aW9uIGZ1bmN0aW9uLFxuICogdGhlIG1haW4gb25lIGJlaW5nIHJldXNhYmxlIGN1c3RvbSBjb21wb25lbnRzIHRoYXQgYXJlIHVzZWQgd2l0aGluIFNWRyBjb250ZXh0c1xuICogKGJlY2F1c2UgU1ZHIGRvZXNuJ3Qgd29yayB3aXRoIGN1c3RvbSBlbGVtZW50cyBpbiB0aGUgRE9NIHRyZWUpLlxuICpcbiAqICMjIyMgYHRyYW5zY2x1ZGVgXG4gKiBFeHRyYWN0IHRoZSBjb250ZW50cyBvZiB0aGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGFwcGVhcnMgYW5kIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBkaXJlY3RpdmUuXG4gKiBUaGUgY29udGVudHMgYXJlIGNvbXBpbGVkIGFuZCBwcm92aWRlZCB0byB0aGUgZGlyZWN0aXZlIGFzIGEgKip0cmFuc2NsdXNpb24gZnVuY3Rpb24qKi4gU2VlIHRoZVxuICoge0BsaW5rICRjb21waWxlI3RyYW5zY2x1c2lvbiBUcmFuc2NsdXNpb259IHNlY3Rpb24gYmVsb3cuXG4gKlxuICogVGhlcmUgYXJlIHR3byBraW5kcyBvZiB0cmFuc2NsdXNpb24gZGVwZW5kaW5nIHVwb24gd2hldGhlciB5b3Ugd2FudCB0byB0cmFuc2NsdWRlIGp1c3QgdGhlIGNvbnRlbnRzIG9mIHRoZVxuICogZGlyZWN0aXZlJ3MgZWxlbWVudCBvciB0aGUgZW50aXJlIGVsZW1lbnQ6XG4gKlxuICogKiBgdHJ1ZWAgLSB0cmFuc2NsdWRlIHRoZSBjb250ZW50IChpLmUuIHRoZSBjaGlsZCBub2Rlcykgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuXG4gKiAqIGAnZWxlbWVudCdgIC0gdHJhbnNjbHVkZSB0aGUgd2hvbGUgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgaW5jbHVkaW5nIGFueSBkaXJlY3RpdmVzIG9uIHRoaXNcbiAqICAgZWxlbWVudCB0aGF0IGRlZmluZWQgYXQgYSBsb3dlciBwcmlvcml0eSB0aGFuIHRoaXMgZGlyZWN0aXZlLiBXaGVuIHVzZWQsIHRoZSBgdGVtcGxhdGVgXG4gKiAgIHByb3BlcnR5IGlzIGlnbm9yZWQuXG4gKlxuICpcbiAqICMjIyMgYGNvbXBpbGVgXG4gKlxuICogYGBganNcbiAqICAgZnVuY3Rpb24gY29tcGlsZSh0RWxlbWVudCwgdEF0dHJzLCB0cmFuc2NsdWRlKSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBkZWFscyB3aXRoIHRyYW5zZm9ybWluZyB0aGUgdGVtcGxhdGUgRE9NLiBTaW5jZSBtb3N0IGRpcmVjdGl2ZXMgZG8gbm90IGRvXG4gKiB0ZW1wbGF0ZSB0cmFuc2Zvcm1hdGlvbiwgaXQgaXMgbm90IHVzZWQgb2Z0ZW4uIFRoZSBjb21waWxlIGZ1bmN0aW9uIHRha2VzIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuICpcbiAqICAgKiBgdEVsZW1lbnRgIC0gdGVtcGxhdGUgZWxlbWVudCAtIFRoZSBlbGVtZW50IHdoZXJlIHRoZSBkaXJlY3RpdmUgaGFzIGJlZW4gZGVjbGFyZWQuIEl0IGlzXG4gKiAgICAgc2FmZSB0byBkbyB0ZW1wbGF0ZSB0cmFuc2Zvcm1hdGlvbiBvbiB0aGUgZWxlbWVudCBhbmQgY2hpbGQgZWxlbWVudHMgb25seS5cbiAqXG4gKiAgICogYHRBdHRyc2AgLSB0ZW1wbGF0ZSBhdHRyaWJ1dGVzIC0gTm9ybWFsaXplZCBsaXN0IG9mIGF0dHJpYnV0ZXMgZGVjbGFyZWQgb24gdGhpcyBlbGVtZW50IHNoYXJlZFxuICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBjb21waWxlIGZ1bmN0aW9ucy5cbiAqXG4gKiAgICogYHRyYW5zY2x1ZGVgIC0gIFsqREVQUkVDQVRFRCohXSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbjogYGZ1bmN0aW9uKHNjb3BlLCBjbG9uZUxpbmtpbmdGbilgXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGUgdGVtcGxhdGUgaW5zdGFuY2UgYW5kIHRoZSBsaW5rIGluc3RhbmNlIG1heSBiZSBkaWZmZXJlbnQgb2JqZWN0cyBpZiB0aGUgdGVtcGxhdGUgaGFzXG4gKiBiZWVuIGNsb25lZC4gRm9yIHRoaXMgcmVhc29uIGl0IGlzICoqbm90Kiogc2FmZSB0byBkbyBhbnl0aGluZyBvdGhlciB0aGFuIERPTSB0cmFuc2Zvcm1hdGlvbnMgdGhhdFxuICogYXBwbHkgdG8gYWxsIGNsb25lZCBET00gbm9kZXMgd2l0aGluIHRoZSBjb21waWxlIGZ1bmN0aW9uLiBTcGVjaWZpY2FsbHksIERPTSBsaXN0ZW5lciByZWdpc3RyYXRpb25cbiAqIHNob3VsZCBiZSBkb25lIGluIGEgbGlua2luZyBmdW5jdGlvbiByYXRoZXIgdGhhbiBpbiBhIGNvbXBpbGUgZnVuY3Rpb24uXG4gKiA8L2Rpdj5cblxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBjYW5ub3QgaGFuZGxlIGRpcmVjdGl2ZXMgdGhhdCByZWN1cnNpdmVseSB1c2UgdGhlbXNlbHZlcyBpbiB0aGVpclxuICogb3duIHRlbXBsYXRlcyBvciBjb21waWxlIGZ1bmN0aW9ucy4gQ29tcGlsaW5nIHRoZXNlIGRpcmVjdGl2ZXMgcmVzdWx0cyBpbiBhbiBpbmZpbml0ZSBsb29wIGFuZCBhXG4gKiBzdGFjayBvdmVyZmxvdyBlcnJvcnMuXG4gKlxuICogVGhpcyBjYW4gYmUgYXZvaWRlZCBieSBtYW51YWxseSB1c2luZyAkY29tcGlsZSBpbiB0aGUgcG9zdExpbmsgZnVuY3Rpb24gdG8gaW1wZXJhdGl2ZWx5IGNvbXBpbGVcbiAqIGEgZGlyZWN0aXZlJ3MgdGVtcGxhdGUgaW5zdGVhZCBvZiByZWx5aW5nIG9uIGF1dG9tYXRpYyB0ZW1wbGF0ZSBjb21waWxhdGlvbiB2aWEgYHRlbXBsYXRlYCBvclxuICogYHRlbXBsYXRlVXJsYCBkZWNsYXJhdGlvbiBvciBtYW51YWwgY29tcGlsYXRpb24gaW5zaWRlIHRoZSBjb21waWxlIGZ1bmN0aW9uLlxuICogPC9kaXY+XG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICogKipOb3RlOioqIFRoZSBgdHJhbnNjbHVkZWAgZnVuY3Rpb24gdGhhdCBpcyBwYXNzZWQgdG8gdGhlIGNvbXBpbGUgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgYXMgaXRcbiAqICAgZS5nLiBkb2VzIG5vdCBrbm93IGFib3V0IHRoZSByaWdodCBvdXRlciBzY29wZS4gUGxlYXNlIHVzZSB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiB0aGF0IGlzIHBhc3NlZFxuICogICB0byB0aGUgbGluayBmdW5jdGlvbiBpbnN0ZWFkLlxuICogPC9kaXY+XG5cbiAqIEEgY29tcGlsZSBmdW5jdGlvbiBjYW4gaGF2ZSBhIHJldHVybiB2YWx1ZSB3aGljaCBjYW4gYmUgZWl0aGVyIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0LlxuICpcbiAqICogcmV0dXJuaW5nIGEgKHBvc3QtbGluaykgZnVuY3Rpb24gLSBpcyBlcXVpdmFsZW50IHRvIHJlZ2lzdGVyaW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHZpYSB0aGVcbiAqICAgYGxpbmtgIHByb3BlcnR5IG9mIHRoZSBjb25maWcgb2JqZWN0IHdoZW4gdGhlIGNvbXBpbGUgZnVuY3Rpb24gaXMgZW1wdHkuXG4gKlxuICogKiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggZnVuY3Rpb24ocykgcmVnaXN0ZXJlZCB2aWEgYHByZWAgYW5kIGBwb3N0YCBwcm9wZXJ0aWVzIC0gYWxsb3dzIHlvdSB0b1xuICogICBjb250cm9sIHdoZW4gYSBsaW5raW5nIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlLiBTZWUgaW5mbyBhYm91dFxuICogICBwcmUtbGlua2luZyBhbmQgcG9zdC1saW5raW5nIGZ1bmN0aW9ucyBiZWxvdy5cbiAqXG4gKlxuICogIyMjIyBgbGlua2BcbiAqIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBvbmx5IGlmIHRoZSBgY29tcGlsZWAgcHJvcGVydHkgaXMgbm90IGRlZmluZWQuXG4gKlxuICogYGBganNcbiAqICAgZnVuY3Rpb24gbGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlciwgdHJhbnNjbHVkZUZuKSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgbGluayBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3IgcmVnaXN0ZXJpbmcgRE9NIGxpc3RlbmVycyBhcyB3ZWxsIGFzIHVwZGF0aW5nIHRoZSBET00uIEl0IGlzXG4gKiBleGVjdXRlZCBhZnRlciB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gY2xvbmVkLiBUaGlzIGlzIHdoZXJlIG1vc3Qgb2YgdGhlIGRpcmVjdGl2ZSBsb2dpYyB3aWxsIGJlXG4gKiBwdXQuXG4gKlxuICogICAqIGBzY29wZWAgLSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gLSBUaGUgc2NvcGUgdG8gYmUgdXNlZCBieSB0aGVcbiAqICAgICBkaXJlY3RpdmUgZm9yIHJlZ2lzdGVyaW5nIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVzfS5cbiAqXG4gKiAgICogYGlFbGVtZW50YCAtIGluc3RhbmNlIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGlzIHRvIGJlIHVzZWQuIEl0IGlzIHNhZmUgdG9cbiAqICAgICBtYW5pcHVsYXRlIHRoZSBjaGlsZHJlbiBvZiB0aGUgZWxlbWVudCBvbmx5IGluIGBwb3N0TGlua2AgZnVuY3Rpb24gc2luY2UgdGhlIGNoaWxkcmVuIGhhdmVcbiAqICAgICBhbHJlYWR5IGJlZW4gbGlua2VkLlxuICpcbiAqICAgKiBgaUF0dHJzYCAtIGluc3RhbmNlIGF0dHJpYnV0ZXMgLSBOb3JtYWxpemVkIGxpc3Qgb2YgYXR0cmlidXRlcyBkZWNsYXJlZCBvbiB0aGlzIGVsZW1lbnQgc2hhcmVkXG4gKiAgICAgYmV0d2VlbiBhbGwgZGlyZWN0aXZlIGxpbmtpbmcgZnVuY3Rpb25zLlxuICpcbiAqICAgKiBgY29udHJvbGxlcmAgLSB0aGUgZGlyZWN0aXZlJ3MgcmVxdWlyZWQgY29udHJvbGxlciBpbnN0YW5jZShzKSAtIEluc3RhbmNlcyBhcmUgc2hhcmVkXG4gKiAgICAgYW1vbmcgYWxsIGRpcmVjdGl2ZXMsIHdoaWNoIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byB1c2UgdGhlIGNvbnRyb2xsZXJzIGFzIGEgY29tbXVuaWNhdGlvblxuICogICAgIGNoYW5uZWwuIFRoZSBleGFjdCB2YWx1ZSBkZXBlbmRzIG9uIHRoZSBkaXJlY3RpdmUncyBgcmVxdWlyZWAgcHJvcGVydHk6XG4gKiAgICAgICAqIG5vIGNvbnRyb2xsZXIocykgcmVxdWlyZWQ6IHRoZSBkaXJlY3RpdmUncyBvd24gY29udHJvbGxlciwgb3IgYHVuZGVmaW5lZGAgaWYgaXQgZG9lc24ndCBoYXZlIG9uZVxuICogICAgICAgKiBgc3RyaW5nYDogdGhlIGNvbnRyb2xsZXIgaW5zdGFuY2VcbiAqICAgICAgICogYGFycmF5YDogYXJyYXkgb2YgY29udHJvbGxlciBpbnN0YW5jZXNcbiAqXG4gKiAgICAgSWYgYSByZXF1aXJlZCBjb250cm9sbGVyIGNhbm5vdCBiZSBmb3VuZCwgYW5kIGl0IGlzIG9wdGlvbmFsLCB0aGUgaW5zdGFuY2UgaXMgYG51bGxgLFxuICogICAgIG90aGVyd2lzZSB0aGUge0BsaW5rIGVycm9yOiRjb21waWxlOmN0cmVxIE1pc3NpbmcgUmVxdWlyZWQgQ29udHJvbGxlcn0gZXJyb3IgaXMgdGhyb3duLlxuICpcbiAqICAgICBOb3RlIHRoYXQgeW91IGNhbiBhbHNvIHJlcXVpcmUgdGhlIGRpcmVjdGl2ZSdzIG93biBjb250cm9sbGVyIC0gaXQgd2lsbCBiZSBtYWRlIGF2YWlsYWJsZSBsaWtlXG4gKiAgICAgYW55IG90aGVyIGNvbnRyb2xsZXIuXG4gKlxuICogICAqIGB0cmFuc2NsdWRlRm5gIC0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb24gcHJlLWJvdW5kIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZS5cbiAqICAgICBUaGlzIGlzIHRoZSBzYW1lIGFzIHRoZSBgJHRyYW5zY2x1ZGVgXG4gKiAgICAgcGFyYW1ldGVyIG9mIGRpcmVjdGl2ZSBjb250cm9sbGVycywgc2VlIHRoZXJlIGZvciBkZXRhaWxzLlxuICogICAgIGBmdW5jdGlvbihbc2NvcGVdLCBjbG9uZUxpbmtpbmdGbiwgZnV0dXJlUGFyZW50RWxlbWVudClgLlxuICpcbiAqICMjIyMgUHJlLWxpbmtpbmcgZnVuY3Rpb25cbiAqXG4gKiBFeGVjdXRlZCBiZWZvcmUgdGhlIGNoaWxkIGVsZW1lbnRzIGFyZSBsaW5rZWQuIE5vdCBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBzaW5jZSB0aGVcbiAqIGNvbXBpbGVyIGxpbmtpbmcgZnVuY3Rpb24gd2lsbCBmYWlsIHRvIGxvY2F0ZSB0aGUgY29ycmVjdCBlbGVtZW50cyBmb3IgbGlua2luZy5cbiAqXG4gKiAjIyMjIFBvc3QtbGlua2luZyBmdW5jdGlvblxuICpcbiAqIEV4ZWN1dGVkIGFmdGVyIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgbGlua2VkLlxuICpcbiAqIE5vdGUgdGhhdCBjaGlsZCBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYHRlbXBsYXRlVXJsYCBkaXJlY3RpdmVzIHdpbGwgbm90IGhhdmUgYmVlbiBjb21waWxlZFxuICogYW5kIGxpbmtlZCBzaW5jZSB0aGV5IGFyZSB3YWl0aW5nIGZvciB0aGVpciB0ZW1wbGF0ZSB0byBsb2FkIGFzeW5jaHJvbm91c2x5IGFuZCB0aGVpciBvd25cbiAqIGNvbXBpbGF0aW9uIGFuZCBsaW5raW5nIGhhcyBiZWVuIHN1c3BlbmRlZCB1bnRpbCB0aGF0IG9jY3Vycy5cbiAqXG4gKiBJdCBpcyBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBpbiB0aGUgcG9zdC1saW5raW5nIGZ1bmN0aW9uIG9uIGVsZW1lbnRzIHRoYXQgYXJlIG5vdCB3YWl0aW5nXG4gKiBmb3IgdGhlaXIgYXN5bmMgdGVtcGxhdGVzIHRvIGJlIHJlc29sdmVkLlxuICpcbiAqXG4gKiAjIyMgVHJhbnNjbHVzaW9uXG4gKlxuICogVHJhbnNjbHVzaW9uIGlzIHRoZSBwcm9jZXNzIG9mIGV4dHJhY3RpbmcgYSBjb2xsZWN0aW9uIG9mIERPTSBlbGVtZW50cyBmcm9tIG9uZSBwYXJ0IG9mIHRoZSBET00gYW5kXG4gKiBjb3B5aW5nIHRoZW0gdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBET00sIHdoaWxlIG1haW50YWluaW5nIHRoZWlyIGNvbm5lY3Rpb24gdG8gdGhlIG9yaWdpbmFsIEFuZ3VsYXJKU1xuICogc2NvcGUgZnJvbSB3aGVyZSB0aGV5IHdlcmUgdGFrZW4uXG4gKlxuICogVHJhbnNjbHVzaW9uIGlzIHVzZWQgKG9mdGVuIHdpdGgge0BsaW5rIG5nVHJhbnNjbHVkZX0pIHRvIGluc2VydCB0aGVcbiAqIG9yaWdpbmFsIGNvbnRlbnRzIG9mIGEgZGlyZWN0aXZlJ3MgZWxlbWVudCBpbnRvIGEgc3BlY2lmaWVkIHBsYWNlIGluIHRoZSB0ZW1wbGF0ZSBvZiB0aGUgZGlyZWN0aXZlLlxuICogVGhlIGJlbmVmaXQgb2YgdHJhbnNjbHVzaW9uLCBvdmVyIHNpbXBseSBtb3ZpbmcgdGhlIERPTSBlbGVtZW50cyBtYW51YWxseSwgaXMgdGhhdCB0aGUgdHJhbnNjbHVkZWRcbiAqIGNvbnRlbnQgaGFzIGFjY2VzcyB0byB0aGUgcHJvcGVydGllcyBvbiB0aGUgc2NvcGUgZnJvbSB3aGljaCBpdCB3YXMgdGFrZW4sIGV2ZW4gaWYgdGhlIGRpcmVjdGl2ZVxuICogaGFzIGlzb2xhdGVkIHNjb3BlLlxuICogU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI2NyZWF0aW5nLWEtZGlyZWN0aXZlLXRoYXQtd3JhcHMtb3RoZXItZWxlbWVudHMgRGlyZWN0aXZlcyBHdWlkZX0uXG4gKlxuICogVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgdGhlIHdpZGdldCB0byBoYXZlIHByaXZhdGUgc3RhdGUgZm9yIGl0cyB0ZW1wbGF0ZSwgd2hpbGUgdGhlIHRyYW5zY2x1ZGVkXG4gKiBjb250ZW50IGhhcyBhY2Nlc3MgdG8gaXRzIG9yaWdpbmF0aW5nIHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogV2hlbiB0ZXN0aW5nIGFuIGVsZW1lbnQgdHJhbnNjbHVkZSBkaXJlY3RpdmUgeW91IG11c3Qgbm90IHBsYWNlIHRoZSBkaXJlY3RpdmUgYXQgdGhlIHJvb3Qgb2YgdGhlXG4gKiBET00gZnJhZ21lbnQgdGhhdCBpcyBiZWluZyBjb21waWxlZC4gU2VlIHtAbGluayBndWlkZS91bml0LXRlc3RpbmcjdGVzdGluZy10cmFuc2NsdXNpb24tZGlyZWN0aXZlc1xuICogVGVzdGluZyBUcmFuc2NsdXNpb24gRGlyZWN0aXZlc30uXG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyMjIFRyYW5zY2x1c2lvbiBGdW5jdGlvbnNcbiAqXG4gKiBXaGVuIGEgZGlyZWN0aXZlIHJlcXVlc3RzIHRyYW5zY2x1c2lvbiwgdGhlIGNvbXBpbGVyIGV4dHJhY3RzIGl0cyBjb250ZW50cyBhbmQgcHJvdmlkZXMgYSAqKnRyYW5zY2x1c2lvblxuICogZnVuY3Rpb24qKiB0byB0aGUgZGlyZWN0aXZlJ3MgYGxpbmtgIGZ1bmN0aW9uIGFuZCBgY29udHJvbGxlcmAuIFRoaXMgdHJhbnNjbHVzaW9uIGZ1bmN0aW9uIGlzIGEgc3BlY2lhbFxuICogKipsaW5raW5nIGZ1bmN0aW9uKiogdGhhdCB3aWxsIHJldHVybiB0aGUgY29tcGlsZWQgY29udGVudHMgbGlua2VkIHRvIGEgbmV3IHRyYW5zY2x1c2lvbiBzY29wZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogSWYgeW91IGFyZSBqdXN0IHVzaW5nIHtAbGluayBuZ1RyYW5zY2x1ZGV9IHRoZW4geW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhpcyBmdW5jdGlvbiwgc2luY2VcbiAqIG5nVHJhbnNjbHVkZSB3aWxsIGRlYWwgd2l0aCBpdCBmb3IgdXMuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJZiB5b3Ugd2FudCB0byBtYW51YWxseSBjb250cm9sIHRoZSBpbnNlcnRpb24gYW5kIHJlbW92YWwgb2YgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaW4geW91ciBkaXJlY3RpdmVcbiAqIHRoZW4geW91IG11c3QgdXNlIHRoaXMgdHJhbnNjbHVkZSBmdW5jdGlvbi4gV2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1ZGUgZnVuY3Rpb24gaXQgcmV0dXJucyBhIGEganFMaXRlL0pRdWVyeVxuICogb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGNvbXBpbGVkIERPTSwgd2hpY2ggaXMgbGlua2VkIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZS5cbiAqXG4gKiBXaGVuIHlvdSBjYWxsIGEgdHJhbnNjbHVzaW9uIGZ1bmN0aW9uIHlvdSBjYW4gcGFzcyBpbiBhICoqY2xvbmUgYXR0YWNoIGZ1bmN0aW9uKiouIFRoaXMgZnVuY3Rpb24gYWNjZXB0c1xuICogdHdvIHBhcmFtZXRlcnMsIGBmdW5jdGlvbihjbG9uZSwgc2NvcGUpIHsgLi4uIH1gLCB3aGVyZSB0aGUgYGNsb25lYCBpcyBhIGZyZXNoIGNvbXBpbGVkIGNvcHkgb2YgeW91ciB0cmFuc2NsdWRlZFxuICogY29udGVudCBhbmQgdGhlIGBzY29wZWAgaXMgdGhlIG5ld2x5IGNyZWF0ZWQgdHJhbnNjbHVzaW9uIHNjb3BlLCB0byB3aGljaCB0aGUgY2xvbmUgaXMgYm91bmQuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqQmVzdCBQcmFjdGljZSoqOiBBbHdheXMgcHJvdmlkZSBhIGBjbG9uZUZuYCAoY2xvbmUgYXR0YWNoIGZ1bmN0aW9uKSB3aGVuIHlvdSBjYWxsIGEgdHJhbnNsdWRlIGZ1bmN0aW9uXG4gKiBzaW5jZSB5b3UgdGhlbiBnZXQgYSBmcmVzaCBjbG9uZSBvZiB0aGUgb3JpZ2luYWwgRE9NIGFuZCBhbHNvIGhhdmUgYWNjZXNzIHRvIHRoZSBuZXcgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICogPC9kaXY+XG4gKlxuICogSXQgaXMgbm9ybWFsIHByYWN0aWNlIHRvIGF0dGFjaCB5b3VyIHRyYW5zY2x1ZGVkIGNvbnRlbnQgKGBjbG9uZWApIHRvIHRoZSBET00gaW5zaWRlIHlvdXIgKipjbG9uZVxuICogYXR0YWNoIGZ1bmN0aW9uKio6XG4gKlxuICogYGBganNcbiAqIHZhciB0cmFuc2NsdWRlZENvbnRlbnQsIHRyYW5zY2x1c2lvblNjb3BlO1xuICpcbiAqICR0cmFuc2NsdWRlKGZ1bmN0aW9uKGNsb25lLCBzY29wZSkge1xuICogICBlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gKiAgIHRyYW5zY2x1ZGVkQ29udGVudCA9IGNsb25lO1xuICogICB0cmFuc2NsdXNpb25TY29wZSA9IHNjb3BlO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBMYXRlciwgaWYgeW91IHdhbnQgdG8gcmVtb3ZlIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGZyb20geW91ciBET00gdGhlbiB5b3Ugc2hvdWxkIGFsc28gZGVzdHJveSB0aGVcbiAqIGFzc29jaWF0ZWQgdHJhbnNjbHVzaW9uIHNjb3BlOlxuICpcbiAqIGBgYGpzXG4gKiB0cmFuc2NsdWRlZENvbnRlbnQucmVtb3ZlKCk7XG4gKiB0cmFuc2NsdXNpb25TY29wZS4kZGVzdHJveSgpO1xuICogYGBgXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqQmVzdCBQcmFjdGljZSoqOiBpZiB5b3UgaW50ZW5kIHRvIGFkZCBhbmQgcmVtb3ZlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgbWFudWFsbHkgaW4geW91ciBkaXJlY3RpdmVcbiAqIChieSBjYWxsaW5nIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIHRvIGdldCB0aGUgRE9NIGFuZCBjYWxsaW5nIGBlbGVtZW50LnJlbW92ZSgpYCB0byByZW1vdmUgaXQpLFxuICogdGhlbiB5b3UgYXJlIGFsc28gcmVzcG9uc2libGUgZm9yIGNhbGxpbmcgYCRkZXN0cm95YCBvbiB0aGUgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICogPC9kaXY+XG4gKlxuICogVGhlIGJ1aWx0LWluIERPTSBtYW5pcHVsYXRpb24gZGlyZWN0aXZlcywgc3VjaCBhcyB7QGxpbmsgbmdJZn0sIHtAbGluayBuZ1N3aXRjaH0gYW5kIHtAbGluayBuZ1JlcGVhdH1cbiAqIGF1dG9tYXRpY2FsbHkgZGVzdHJveSB0aGVpciB0cmFuc2x1ZGVkIGNsb25lcyBhcyBuZWNlc3Nhcnkgc28geW91IGRvIG5vdCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoaXMgaWZcbiAqIHlvdSBhcmUgc2ltcGx5IHVzaW5nIHtAbGluayBuZ1RyYW5zY2x1ZGV9IHRvIGluamVjdCB0aGUgdHJhbnNjbHVzaW9uIGludG8geW91ciBkaXJlY3RpdmUuXG4gKlxuICpcbiAqICMjIyMgVHJhbnNjbHVzaW9uIFNjb3Blc1xuICpcbiAqIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGl0IHJldHVybnMgYSBET00gZnJhZ21lbnQgdGhhdCBpcyBwcmUtYm91bmQgdG8gYSAqKnRyYW5zY2x1c2lvblxuICogc2NvcGUqKi4gVGhpcyBzY29wZSBpcyBzcGVjaWFsLCBpbiB0aGF0IGl0IGlzIGEgY2hpbGQgb2YgdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIChhbmQgc28gZ2V0cyBkZXN0cm95ZWRcbiAqIHdoZW4gdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIGdldHMgZGVzdHJveWVkKSBidXQgaXQgaW5oZXJpdHMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHNjb3BlIGZyb20gd2hpY2ggaXRcbiAqIHdhcyB0YWtlbi5cbiAqXG4gKiBGb3IgZXhhbXBsZSBjb25zaWRlciBhIGRpcmVjdGl2ZSB0aGF0IHVzZXMgdHJhbnNjbHVzaW9uIGFuZCBpc29sYXRlZCBzY29wZS4gVGhlIERPTSBoaWVyYXJjaHkgbWlnaHQgbG9va1xuICogbGlrZSB0aGlzOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctYXBwPlxuICogICA8ZGl2IGlzb2xhdGU+XG4gKiAgICAgPGRpdiB0cmFuc2NsdXNpb24+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBUaGUgYCRwYXJlbnRgIHNjb3BlIGhpZXJhcmNoeSB3aWxsIGxvb2sgbGlrZSB0aGlzOlxuICpcbiAqIGBgYFxuICogLSAkcm9vdFNjb3BlXG4gKiAgIC0gaXNvbGF0ZVxuICogICAgIC0gdHJhbnNjbHVzaW9uXG4gKiBgYGBcbiAqXG4gKiBidXQgdGhlIHNjb3BlcyB3aWxsIGluaGVyaXQgcHJvdG90eXBpY2FsbHkgZnJvbSBkaWZmZXJlbnQgc2NvcGVzIHRvIHRoZWlyIGAkcGFyZW50YC5cbiAqXG4gKiBgYGBcbiAqIC0gJHJvb3RTY29wZVxuICogICAtIHRyYW5zY2x1c2lvblxuICogLSBpc29sYXRlXG4gKiBgYGBcbiAqXG4gKlxuICogIyMjIEF0dHJpYnV0ZXNcbiAqXG4gKiBUaGUge0BsaW5rIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIEF0dHJpYnV0ZXN9IG9iamVjdCAtIHBhc3NlZCBhcyBhIHBhcmFtZXRlciBpbiB0aGVcbiAqIGBsaW5rKClgIG9yIGBjb21waWxlKClgIGZ1bmN0aW9ucy4gSXQgaGFzIGEgdmFyaWV0eSBvZiB1c2VzLlxuICpcbiAqIGFjY2Vzc2luZyAqTm9ybWFsaXplZCBhdHRyaWJ1dGUgbmFtZXM6KlxuICogRGlyZWN0aXZlcyBsaWtlICduZ0JpbmQnIGNhbiBiZSBleHByZXNzZWQgaW4gbWFueSB3YXlzOiAnbmc6YmluZCcsIGBkYXRhLW5nLWJpbmRgLCBvciAneC1uZy1iaW5kJy5cbiAqIHRoZSBhdHRyaWJ1dGVzIG9iamVjdCBhbGxvd3MgZm9yIG5vcm1hbGl6ZWQgYWNjZXNzIHRvXG4gKiAgIHRoZSBhdHRyaWJ1dGVzLlxuICpcbiAqICogKkRpcmVjdGl2ZSBpbnRlci1jb21tdW5pY2F0aW9uOiogQWxsIGRpcmVjdGl2ZXMgc2hhcmUgdGhlIHNhbWUgaW5zdGFuY2Ugb2YgdGhlIGF0dHJpYnV0ZXNcbiAqICAgb2JqZWN0IHdoaWNoIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byB1c2UgdGhlIGF0dHJpYnV0ZXMgb2JqZWN0IGFzIGludGVyIGRpcmVjdGl2ZVxuICogICBjb21tdW5pY2F0aW9uLlxuICpcbiAqICogKlN1cHBvcnRzIGludGVycG9sYXRpb246KiBJbnRlcnBvbGF0aW9uIGF0dHJpYnV0ZXMgYXJlIGFzc2lnbmVkIHRvIHRoZSBhdHRyaWJ1dGUgb2JqZWN0XG4gKiAgIGFsbG93aW5nIG90aGVyIGRpcmVjdGl2ZXMgdG8gcmVhZCB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlLlxuICpcbiAqICogKk9ic2VydmluZyBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlczoqIFVzZSBgJG9ic2VydmVgIHRvIG9ic2VydmUgdGhlIHZhbHVlIGNoYW5nZXMgb2YgYXR0cmlidXRlc1xuICogICB0aGF0IGNvbnRhaW4gaW50ZXJwb2xhdGlvbiAoZS5nLiBgc3JjPVwie3tiYXJ9fVwiYCkuIE5vdCBvbmx5IGlzIHRoaXMgdmVyeSBlZmZpY2llbnQgYnV0IGl0J3MgYWxzb1xuICogICB0aGUgb25seSB3YXkgdG8gZWFzaWx5IGdldCB0aGUgYWN0dWFsIHZhbHVlIGJlY2F1c2UgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlIHRoZSBpbnRlcnBvbGF0aW9uXG4gKiAgIGhhc24ndCBiZWVuIGV2YWx1YXRlZCB5ZXQgYW5kIHNvIHRoZSB2YWx1ZSBpcyBhdCB0aGlzIHRpbWUgc2V0IHRvIGB1bmRlZmluZWRgLlxuICpcbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiBsaW5raW5nRm4oc2NvcGUsIGVsbSwgYXR0cnMsIGN0cmwpIHtcbiAqICAgLy8gZ2V0IHRoZSBhdHRyaWJ1dGUgdmFsdWVcbiAqICAgY29uc29sZS5sb2coYXR0cnMubmdNb2RlbCk7XG4gKlxuICogICAvLyBjaGFuZ2UgdGhlIGF0dHJpYnV0ZVxuICogICBhdHRycy4kc2V0KCduZ01vZGVsJywgJ25ldyB2YWx1ZScpO1xuICpcbiAqICAgLy8gb2JzZXJ2ZSBjaGFuZ2VzIHRvIGludGVycG9sYXRlZCBhdHRyaWJ1dGVcbiAqICAgYXR0cnMuJG9ic2VydmUoJ25nTW9kZWwnLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgIGNvbnNvbGUubG9nKCduZ01vZGVsIGhhcyBjaGFuZ2VkIHZhbHVlIHRvICcgKyB2YWx1ZSk7XG4gKiAgIH0pO1xuICogfVxuICogYGBgXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGUqKjogVHlwaWNhbGx5IGRpcmVjdGl2ZXMgYXJlIHJlZ2lzdGVyZWQgd2l0aCBgbW9kdWxlLmRpcmVjdGl2ZWAuIFRoZSBleGFtcGxlIGJlbG93IGlzXG4gKiB0byBpbGx1c3RyYXRlIGhvdyBgJGNvbXBpbGVgIHdvcmtzLlxuICogPC9kaXY+XG4gKlxuIDxleGFtcGxlIG1vZHVsZT1cImNvbXBpbGVFeGFtcGxlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgIDxzY3JpcHQ+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnY29tcGlsZUV4YW1wbGUnLCBbXSwgZnVuY3Rpb24oJGNvbXBpbGVQcm92aWRlcikge1xuICAgICAgICAvLyBjb25maWd1cmUgbmV3ICdjb21waWxlJyBkaXJlY3RpdmUgYnkgcGFzc2luZyBhIGRpcmVjdGl2ZVxuICAgICAgICAvLyBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBpbmplY3RzIHRoZSAnJGNvbXBpbGUnXG4gICAgICAgICRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlKCdjb21waWxlJywgZnVuY3Rpb24oJGNvbXBpbGUpIHtcbiAgICAgICAgICAvLyBkaXJlY3RpdmUgZmFjdG9yeSBjcmVhdGVzIGEgbGluayBmdW5jdGlvblxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICAgZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgLy8gd2F0Y2ggdGhlICdjb21waWxlJyBleHByZXNzaW9uIGZvciBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiRldmFsKGF0dHJzLmNvbXBpbGUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlICdjb21waWxlJyBleHByZXNzaW9uIGNoYW5nZXNcbiAgICAgICAgICAgICAgICAvLyBhc3NpZ24gaXQgaW50byB0aGUgY3VycmVudCBET01cbiAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwodmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZSB0aGUgbmV3IERPTSBhbmQgbGluayBpdCB0byB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgIC8vIHNjb3BlLlxuICAgICAgICAgICAgICAgIC8vIE5PVEU6IHdlIG9ubHkgY29tcGlsZSAuY2hpbGROb2RlcyBzbyB0aGF0XG4gICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgZ2V0IGludG8gaW5maW5pdGUgbG9vcCBjb21waWxpbmcgb3Vyc2VsdmVzXG4gICAgICAgICAgICAgICAgJGNvbXBpbGUoZWxlbWVudC5jb250ZW50cygpKShzY29wZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNvbnRyb2xsZXIoJ0dyZWV0ZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLm5hbWUgPSAnQW5ndWxhcic7XG4gICAgICAgICRzY29wZS5odG1sID0gJ0hlbGxvIHt7bmFtZX19JztcbiAgICAgIH1dKTtcbiAgICA8L3NjcmlwdD5cbiAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJHcmVldGVyQ29udHJvbGxlclwiPlxuICAgICAgPGlucHV0IG5nLW1vZGVsPVwibmFtZVwiPiA8YnIvPlxuICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPVwiaHRtbFwiPjwvdGV4dGFyZWE+IDxici8+XG4gICAgICA8ZGl2IGNvbXBpbGU9XCJodG1sXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgIGl0KCdzaG91bGQgYXV0byBjb21waWxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgdmFyIHRleHRhcmVhID0gJCgndGV4dGFyZWEnKTtcbiAgICAgICB2YXIgb3V0cHV0ID0gJCgnZGl2W2NvbXBpbGVdJyk7XG4gICAgICAgLy8gVGhlIGluaXRpYWwgc3RhdGUgcmVhZHMgJ0hlbGxvIEFuZ3VsYXInLlxuICAgICAgIGV4cGVjdChvdXRwdXQuZ2V0VGV4dCgpKS50b0JlKCdIZWxsbyBBbmd1bGFyJyk7XG4gICAgICAgdGV4dGFyZWEuY2xlYXIoKTtcbiAgICAgICB0ZXh0YXJlYS5zZW5kS2V5cygne3tuYW1lfX0hJyk7XG4gICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQmUoJ0FuZ3VsYXIhJyk7XG4gICAgIH0pO1xuICAgPC9maWxlPlxuIDwvZXhhbXBsZT5cblxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgdG8gY29tcGlsZSBpbnRvIGEgdGVtcGxhdGUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZSBmdW5jdGlvbiBhdmFpbGFibGUgdG8gZGlyZWN0aXZlcyAtIERFUFJFQ0FURUQuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICogKipOb3RlOioqIFBhc3NpbmcgYSBgdHJhbnNjbHVkZWAgZnVuY3Rpb24gdG8gdGhlICRjb21waWxlIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQsIGFzIGl0XG4gKiAgIGUuZy4gd2lsbCBub3QgdXNlIHRoZSByaWdodCBvdXRlciBzY29wZS4gUGxlYXNlIHBhc3MgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gYXMgYVxuICogICBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIHRvIHRoZSBsaW5rIGZ1bmN0aW9uIGluc3RlYWQuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4UHJpb3JpdHkgb25seSBhcHBseSBkaXJlY3RpdmVzIGxvd2VyIHRoYW4gZ2l2ZW4gcHJpb3JpdHkgKE9ubHkgZWZmZWN0cyB0aGVcbiAqICAgICAgICAgICAgICAgICByb290IGVsZW1lbnQocyksIG5vdCB0aGVpciBjaGlsZHJlbilcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzY29wZSwgY2xvbmVBdHRhY2hGbj0sIG9wdGlvbnM9KX0gYSBsaW5rIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gYmluZCB0ZW1wbGF0ZVxuICogKGEgRE9NIGVsZW1lbnQvdHJlZSkgdG8gYSBzY29wZS4gV2hlcmU6XG4gKlxuICogICogYHNjb3BlYCAtIEEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgU2NvcGV9IHRvIGJpbmQgdG8uXG4gKiAgKiBgY2xvbmVBdHRhY2hGbmAgLSBJZiBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGxpbmsgZnVuY3Rpb24gd2lsbCBjbG9uZSB0aGVcbiAqICBgdGVtcGxhdGVgIGFuZCBjYWxsIHRoZSBgY2xvbmVBdHRhY2hGbmAgZnVuY3Rpb24gYWxsb3dpbmcgdGhlIGNhbGxlciB0byBhdHRhY2ggdGhlXG4gKiAgY2xvbmVkIGVsZW1lbnRzIHRvIHRoZSBET00gZG9jdW1lbnQgYXQgdGhlIGFwcHJvcHJpYXRlIHBsYWNlLiBUaGUgYGNsb25lQXR0YWNoRm5gIGlzXG4gKiAgY2FsbGVkIGFzOiA8YnIvPiBgY2xvbmVBdHRhY2hGbihjbG9uZWRFbGVtZW50LCBzY29wZSlgIHdoZXJlOlxuICpcbiAqICAgICAgKiBgY2xvbmVkRWxlbWVudGAgLSBpcyBhIGNsb25lIG9mIHRoZSBvcmlnaW5hbCBgZWxlbWVudGAgcGFzc2VkIGludG8gdGhlIGNvbXBpbGVyLlxuICogICAgICAqIGBzY29wZWAgLSBpcyB0aGUgY3VycmVudCBzY29wZSB3aXRoIHdoaWNoIHRoZSBsaW5raW5nIGZ1bmN0aW9uIGlzIHdvcmtpbmcgd2l0aC5cbiAqXG4gKiAgKiBgb3B0aW9uc2AgLSBBbiBvcHRpb25hbCBvYmplY3QgaGFzaCB3aXRoIGxpbmtpbmcgb3B0aW9ucy4gSWYgYG9wdGlvbnNgIGlzIHByb3ZpZGVkLCB0aGVuIHRoZSBmb2xsb3dpbmdcbiAqICBrZXlzIG1heSBiZSB1c2VkIHRvIGNvbnRyb2wgbGlua2luZyBiZWhhdmlvcjpcbiAqXG4gKiAgICAgICogYHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuYCAtIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIG1hZGUgYXZhaWxhYmxlIHRvXG4gKiAgICAgICAgZGlyZWN0aXZlczsgaWYgZ2l2ZW4sIGl0IHdpbGwgYmUgcGFzc2VkIHRocm91Z2ggdG8gdGhlIGxpbmsgZnVuY3Rpb25zIG9mXG4gKiAgICAgICAgZGlyZWN0aXZlcyBmb3VuZCBpbiBgZWxlbWVudGAgZHVyaW5nIGNvbXBpbGF0aW9uLlxuICogICAgICAqIGB0cmFuc2NsdWRlQ29udHJvbGxlcnNgIC0gYW4gb2JqZWN0IGhhc2ggd2l0aCBrZXlzIHRoYXQgbWFwIGNvbnRyb2xsZXIgbmFtZXNcbiAqICAgICAgICB0byBjb250cm9sbGVyIGluc3RhbmNlczsgaWYgZ2l2ZW4sIGl0IHdpbGwgbWFrZSB0aGUgY29udHJvbGxlcnNcbiAqICAgICAgICBhdmFpbGFibGUgdG8gZGlyZWN0aXZlcy5cbiAqICAgICAgKiBgZnV0dXJlUGFyZW50RWxlbWVudGAgLSBkZWZpbmVzIHRoZSBwYXJlbnQgdG8gd2hpY2ggdGhlIGBjbG9uZUF0dGFjaEZuYCB3aWxsIGFkZFxuICogICAgICAgIHRoZSBjbG9uZWQgZWxlbWVudHM7IG9ubHkgbmVlZGVkIGZvciB0cmFuc2NsdWRlcyB0aGF0IGFyZSBhbGxvd2VkIHRvIGNvbnRhaW4gbm9uIGh0bWxcbiAqICAgICAgICBlbGVtZW50cyAoZS5nLiBTVkcgZWxlbWVudHMpLiBTZWUgYWxzbyB0aGUgZGlyZWN0aXZlLmNvbnRyb2xsZXIgcHJvcGVydHkuXG4gKlxuICogQ2FsbGluZyB0aGUgbGlua2luZyBmdW5jdGlvbiByZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSB0ZW1wbGF0ZS4gSXQgaXMgZWl0aGVyIHRoZSBvcmlnaW5hbFxuICogZWxlbWVudCBwYXNzZWQgaW4sIG9yIHRoZSBjbG9uZSBvZiB0aGUgZWxlbWVudCBpZiB0aGUgYGNsb25lQXR0YWNoRm5gIGlzIHByb3ZpZGVkLlxuICpcbiAqIEFmdGVyIGxpbmtpbmcgdGhlIHZpZXcgaXMgbm90IHVwZGF0ZWQgdW50aWwgYWZ0ZXIgYSBjYWxsIHRvICRkaWdlc3Qgd2hpY2ggdHlwaWNhbGx5IGlzIGRvbmUgYnlcbiAqIEFuZ3VsYXIgYXV0b21hdGljYWxseS5cbiAqXG4gKiBJZiB5b3UgbmVlZCBhY2Nlc3MgdG8gdGhlIGJvdW5kIHZpZXcsIHRoZXJlIGFyZSB0d28gd2F5cyB0byBkbyBpdDpcbiAqXG4gKiAtIElmIHlvdSBhcmUgbm90IGFza2luZyB0aGUgbGlua2luZyBmdW5jdGlvbiB0byBjbG9uZSB0aGUgdGVtcGxhdGUsIGNyZWF0ZSB0aGUgRE9NIGVsZW1lbnQocylcbiAqICAgYmVmb3JlIHlvdSBzZW5kIHRoZW0gdG8gdGhlIGNvbXBpbGVyIGFuZCBrZWVwIHRoaXMgcmVmZXJlbmNlIGFyb3VuZC5cbiAqICAgYGBganNcbiAqICAgICB2YXIgZWxlbWVudCA9ICRjb21waWxlKCc8cD57e3RvdGFsfX08L3A+Jykoc2NvcGUpO1xuICogICBgYGBcbiAqXG4gKiAtIGlmIG9uIHRoZSBvdGhlciBoYW5kLCB5b3UgbmVlZCB0aGUgZWxlbWVudCB0byBiZSBjbG9uZWQsIHRoZSB2aWV3IHJlZmVyZW5jZSBmcm9tIHRoZSBvcmlnaW5hbFxuICogICBleGFtcGxlIHdvdWxkIG5vdCBwb2ludCB0byB0aGUgY2xvbmUsIGJ1dCByYXRoZXIgdG8gdGhlIG9yaWdpbmFsIHRlbXBsYXRlIHRoYXQgd2FzIGNsb25lZC4gSW5cbiAqICAgdGhpcyBjYXNlLCB5b3UgY2FuIGFjY2VzcyB0aGUgY2xvbmUgdmlhIHRoZSBjbG9uZUF0dGFjaEZuOlxuICogICBgYGBqc1xuICogICAgIHZhciB0ZW1wbGF0ZUVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoJzxwPnt7dG90YWx9fTwvcD4nKSxcbiAqICAgICAgICAgc2NvcGUgPSAuLi4uO1xuICpcbiAqICAgICB2YXIgY2xvbmVkRWxlbWVudCA9ICRjb21waWxlKHRlbXBsYXRlRWxlbWVudCkoc2NvcGUsIGZ1bmN0aW9uKGNsb25lZEVsZW1lbnQsIHNjb3BlKSB7XG4gKiAgICAgICAvL2F0dGFjaCB0aGUgY2xvbmUgdG8gRE9NIGRvY3VtZW50IGF0IHRoZSByaWdodCBwbGFjZVxuICogICAgIH0pO1xuICpcbiAqICAgICAvL25vdyB3ZSBoYXZlIHJlZmVyZW5jZSB0byB0aGUgY2xvbmVkIERPTSB2aWEgYGNsb25lZEVsZW1lbnRgXG4gKiAgIGBgYFxuICpcbiAqXG4gKiBGb3IgaW5mb3JtYXRpb24gb24gaG93IHRoZSBjb21waWxlciB3b3Jrcywgc2VlIHRoZVxuICoge0BsaW5rIGd1aWRlL2NvbXBpbGVyIEFuZ3VsYXIgSFRNTCBDb21waWxlcn0gc2VjdGlvbiBvZiB0aGUgRGV2ZWxvcGVyIEd1aWRlLlxuICovXG5cbnZhciAkY29tcGlsZU1pbkVyciA9IG1pbkVycignJGNvbXBpbGUnKTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRjb21waWxlUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqL1xuJENvbXBpbGVQcm92aWRlci4kaW5qZWN0ID0gWyckcHJvdmlkZScsICckJHNhbml0aXplVXJpUHJvdmlkZXInXTtcbmZ1bmN0aW9uICRDb21waWxlUHJvdmlkZXIoJHByb3ZpZGUsICQkc2FuaXRpemVVcmlQcm92aWRlcikge1xuICB2YXIgaGFzRGlyZWN0aXZlcyA9IHt9LFxuICAgICAgU3VmZml4ID0gJ0RpcmVjdGl2ZScsXG4gICAgICBDT01NRU5UX0RJUkVDVElWRV9SRUdFWFAgPSAvXlxccypkaXJlY3RpdmVcXDpcXHMqKFtcXHdcXC1dKylcXHMrKC4qKSQvLFxuICAgICAgQ0xBU1NfRElSRUNUSVZFX1JFR0VYUCA9IC8oKFtcXHdcXC1dKykoPzpcXDooW147XSspKT87PykvLFxuICAgICAgQUxMX09SX05PVEhJTkdfQVRUUlMgPSBtYWtlTWFwKCduZ1NyYyxuZ1NyY3NldCxzcmMsc3Jjc2V0JyksXG4gICAgICBSRVFVSVJFX1BSRUZJWF9SRUdFWFAgPSAvXig/OihcXF5cXF4/KT8oXFw/KT8oXFxeXFxePyk/KT8vO1xuXG4gIC8vIFJlZjogaHR0cDovL2RldmVsb3BlcnMud2hhdHdnLm9yZy93ZWJhcHBhcGlzLmh0bWwjZXZlbnQtaGFuZGxlci1pZGwtYXR0cmlidXRlc1xuICAvLyBUaGUgYXNzdW1wdGlvbiBpcyB0aGF0IGZ1dHVyZSBET00gZXZlbnQgYXR0cmlidXRlIG5hbWVzIHdpbGwgYmVnaW4gd2l0aFxuICAvLyAnb24nIGFuZCBiZSBjb21wb3NlZCBvZiBvbmx5IEVuZ2xpc2ggbGV0dGVycy5cbiAgdmFyIEVWRU5UX0hBTkRMRVJfQVRUUl9SRUdFWFAgPSAvXihvblthLXpdK3xmb3JtYWN0aW9uKSQvO1xuXG4gIGZ1bmN0aW9uIHBhcnNlSXNvbGF0ZUJpbmRpbmdzKHNjb3BlLCBkaXJlY3RpdmVOYW1lLCBpc0NvbnRyb2xsZXIpIHtcbiAgICB2YXIgTE9DQUxfUkVHRVhQID0gL15cXHMqKFtAJl18PShcXCo/KSkoXFw/PylcXHMqKFxcdyopXFxzKiQvO1xuXG4gICAgdmFyIGJpbmRpbmdzID0ge307XG5cbiAgICBmb3JFYWNoKHNjb3BlLCBmdW5jdGlvbihkZWZpbml0aW9uLCBzY29wZU5hbWUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGRlZmluaXRpb24ubWF0Y2goTE9DQUxfUkVHRVhQKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignaXNjcCcsXG4gICAgICAgICAgICBcIkludmFsaWQgezN9IGZvciBkaXJlY3RpdmUgJ3swfScuXCIgK1xuICAgICAgICAgICAgXCIgRGVmaW5pdGlvbjogey4uLiB7MX06ICd7Mn0nIC4uLn1cIixcbiAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsIHNjb3BlTmFtZSwgZGVmaW5pdGlvbixcbiAgICAgICAgICAgIChpc0NvbnRyb2xsZXIgPyBcImNvbnRyb2xsZXIgYmluZGluZ3MgZGVmaW5pdGlvblwiIDpcbiAgICAgICAgICAgIFwiaXNvbGF0ZSBzY29wZSBkZWZpbml0aW9uXCIpKTtcbiAgICAgIH1cblxuICAgICAgYmluZGluZ3Nbc2NvcGVOYW1lXSA9IHtcbiAgICAgICAgbW9kZTogbWF0Y2hbMV1bMF0sXG4gICAgICAgIGNvbGxlY3Rpb246IG1hdGNoWzJdID09PSAnKicsXG4gICAgICAgIG9wdGlvbmFsOiBtYXRjaFszXSA9PT0gJz8nLFxuICAgICAgICBhdHRyTmFtZTogbWF0Y2hbNF0gfHwgc2NvcGVOYW1lXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJpbmRpbmdzO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VEaXJlY3RpdmVCaW5kaW5ncyhkaXJlY3RpdmUsIGRpcmVjdGl2ZU5hbWUpIHtcbiAgICB2YXIgYmluZGluZ3MgPSB7XG4gICAgICBpc29sYXRlU2NvcGU6IG51bGwsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiBudWxsXG4gICAgfTtcbiAgICBpZiAoaXNPYmplY3QoZGlyZWN0aXZlLnNjb3BlKSkge1xuICAgICAgaWYgKGRpcmVjdGl2ZS5iaW5kVG9Db250cm9sbGVyID09PSB0cnVlKSB7XG4gICAgICAgIGJpbmRpbmdzLmJpbmRUb0NvbnRyb2xsZXIgPSBwYXJzZUlzb2xhdGVCaW5kaW5ncyhkaXJlY3RpdmUuc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVOYW1lLCB0cnVlKTtcbiAgICAgICAgYmluZGluZ3MuaXNvbGF0ZVNjb3BlID0ge307XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiaW5kaW5ncy5pc29sYXRlU2NvcGUgPSBwYXJzZUlzb2xhdGVCaW5kaW5ncyhkaXJlY3RpdmUuc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZS5iaW5kVG9Db250cm9sbGVyKSkge1xuICAgICAgYmluZGluZ3MuYmluZFRvQ29udHJvbGxlciA9XG4gICAgICAgICAgcGFyc2VJc29sYXRlQmluZGluZ3MoZGlyZWN0aXZlLmJpbmRUb0NvbnRyb2xsZXIsIGRpcmVjdGl2ZU5hbWUsIHRydWUpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3QoYmluZGluZ3MuYmluZFRvQ29udHJvbGxlcikpIHtcbiAgICAgIHZhciBjb250cm9sbGVyID0gZGlyZWN0aXZlLmNvbnRyb2xsZXI7XG4gICAgICB2YXIgY29udHJvbGxlckFzID0gZGlyZWN0aXZlLmNvbnRyb2xsZXJBcztcbiAgICAgIGlmICghY29udHJvbGxlcikge1xuICAgICAgICAvLyBUaGVyZSBpcyBubyBjb250cm9sbGVyLCB0aGVyZSBtYXkgb3IgbWF5IG5vdCBiZSBhIGNvbnRyb2xsZXJBcyBwcm9wZXJ0eVxuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9jdHJsJyxcbiAgICAgICAgICAgICAgXCJDYW5ub3QgYmluZCB0byBjb250cm9sbGVyIHdpdGhvdXQgZGlyZWN0aXZlICd7MH0ncyBjb250cm9sbGVyLlwiLFxuICAgICAgICAgICAgICBkaXJlY3RpdmVOYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlkZW50aWZpZXJGb3JDb250cm9sbGVyKGNvbnRyb2xsZXIsIGNvbnRyb2xsZXJBcykpIHtcbiAgICAgICAgLy8gVGhlcmUgaXMgYSBjb250cm9sbGVyLCBidXQgbm8gaWRlbnRpZmllciBvciBjb250cm9sbGVyQXMgcHJvcGVydHlcbiAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vaWRlbnQnLFxuICAgICAgICAgICAgICBcIkNhbm5vdCBiaW5kIHRvIGNvbnRyb2xsZXIgd2l0aG91dCBpZGVudGlmaWVyIGZvciBkaXJlY3RpdmUgJ3swfScuXCIsXG4gICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmluZGluZ3M7XG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnRWYWxpZERpcmVjdGl2ZU5hbWUobmFtZSkge1xuICAgIHZhciBsZXR0ZXIgPSBuYW1lLmNoYXJBdCgwKTtcbiAgICBpZiAoIWxldHRlciB8fCBsZXR0ZXIgIT09IGxvd2VyY2FzZShsZXR0ZXIpKSB7XG4gICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignYmFkZGlyJywgXCJEaXJlY3RpdmUgbmFtZSAnezB9JyBpcyBpbnZhbGlkLiBUaGUgZmlyc3QgY2hhcmFjdGVyIG11c3QgYmUgYSBsb3dlcmNhc2UgbGV0dGVyXCIsIG5hbWUpO1xuICAgIH1cbiAgICBpZiAobmFtZSAhPT0gbmFtZS50cmltKCkpIHtcbiAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdiYWRkaXInLFxuICAgICAgICAgICAgXCJEaXJlY3RpdmUgbmFtZSAnezB9JyBpcyBpbnZhbGlkLiBUaGUgbmFtZSBzaG91bGQgbm90IGNvbnRhaW4gbGVhZGluZyBvciB0cmFpbGluZyB3aGl0ZXNwYWNlc1wiLFxuICAgICAgICAgICAgbmFtZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmVcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVyIGEgbmV3IGRpcmVjdGl2ZSB3aXRoIHRoZSBjb21waWxlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIE5hbWUgb2YgdGhlIGRpcmVjdGl2ZSBpbiBjYW1lbC1jYXNlIChpLmUuIDxjb2RlPm5nQmluZDwvY29kZT4gd2hpY2hcbiAgICogICAgd2lsbCBtYXRjaCBhcyA8Y29kZT5uZy1iaW5kPC9jb2RlPiksIG9yIGFuIG9iamVjdCBtYXAgb2YgZGlyZWN0aXZlcyB3aGVyZSB0aGUga2V5cyBhcmUgdGhlXG4gICAqICAgIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmFjdG9yaWVzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fSBkaXJlY3RpdmVGYWN0b3J5IEFuIGluamVjdGFibGUgZGlyZWN0aXZlIGZhY3RvcnkgZnVuY3Rpb24uIFNlZVxuICAgKiAgICB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlfSBmb3IgbW9yZSBpbmZvLlxuICAgKiBAcmV0dXJucyB7bmcuJGNvbXBpbGVQcm92aWRlcn0gU2VsZiBmb3IgY2hhaW5pbmcuXG4gICAqL1xuICAgdGhpcy5kaXJlY3RpdmUgPSBmdW5jdGlvbiByZWdpc3RlckRpcmVjdGl2ZShuYW1lLCBkaXJlY3RpdmVGYWN0b3J5KSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2RpcmVjdGl2ZScpO1xuICAgIGlmIChpc1N0cmluZyhuYW1lKSkge1xuICAgICAgYXNzZXJ0VmFsaWREaXJlY3RpdmVOYW1lKG5hbWUpO1xuICAgICAgYXNzZXJ0QXJnKGRpcmVjdGl2ZUZhY3RvcnksICdkaXJlY3RpdmVGYWN0b3J5Jyk7XG4gICAgICBpZiAoIWhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXSA9IFtdO1xuICAgICAgICAkcHJvdmlkZS5mYWN0b3J5KG5hbWUgKyBTdWZmaXgsIFsnJGluamVjdG9yJywgJyRleGNlcHRpb25IYW5kbGVyJyxcbiAgICAgICAgICBmdW5jdGlvbigkaW5qZWN0b3IsICRleGNlcHRpb25IYW5kbGVyKSB7XG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IFtdO1xuICAgICAgICAgICAgZm9yRWFjaChoYXNEaXJlY3RpdmVzW25hbWVdLCBmdW5jdGlvbihkaXJlY3RpdmVGYWN0b3J5LCBpbmRleCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBkaXJlY3RpdmUgPSAkaW5qZWN0b3IuaW52b2tlKGRpcmVjdGl2ZUZhY3RvcnkpO1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGRpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZSA9IHsgY29tcGlsZTogdmFsdWVGbihkaXJlY3RpdmUpIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZGlyZWN0aXZlLmNvbXBpbGUgJiYgZGlyZWN0aXZlLmxpbmspIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5jb21waWxlID0gdmFsdWVGbihkaXJlY3RpdmUubGluayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5wcmlvcml0eSA9IGRpcmVjdGl2ZS5wcmlvcml0eSB8fCAwO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5pbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5uYW1lID0gZGlyZWN0aXZlLm5hbWUgfHwgbmFtZTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlIHx8IChkaXJlY3RpdmUuY29udHJvbGxlciAmJiBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZGlyZWN0aXZlLnJlc3RyaWN0IHx8ICdFQSc7XG4gICAgICAgICAgICAgICAgdmFyIGJpbmRpbmdzID0gZGlyZWN0aXZlLiQkYmluZGluZ3MgPVxuICAgICAgICAgICAgICAgICAgICBwYXJzZURpcmVjdGl2ZUJpbmRpbmdzKGRpcmVjdGl2ZSwgZGlyZWN0aXZlLm5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChiaW5kaW5ncy5pc29sYXRlU2NvcGUpKSB7XG4gICAgICAgICAgICAgICAgICBkaXJlY3RpdmUuJCRpc29sYXRlQmluZGluZ3MgPSBiaW5kaW5ncy5pc29sYXRlU2NvcGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS4kJG1vZHVsZU5hbWUgPSBkaXJlY3RpdmVGYWN0b3J5LiQkbW9kdWxlTmFtZTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzLnB1c2goZGlyZWN0aXZlKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkaXJlY3RpdmVzO1xuICAgICAgICAgIH1dKTtcbiAgICAgIH1cbiAgICAgIGhhc0RpcmVjdGl2ZXNbbmFtZV0ucHVzaChkaXJlY3RpdmVGYWN0b3J5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yRWFjaChuYW1lLCByZXZlcnNlUGFyYW1zKHJlZ2lzdGVyRGlyZWN0aXZlKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudGluZyBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBhW2hyZWZdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KHJlZ2V4cCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQkc2FuaXRpemVVcmlQcm92aWRlci5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCgpO1xuICAgIH1cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdChyZWdleHApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkJHNhbml0aXplVXJpUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICAkY29tcGlsZVByb3ZpZGVyI2RlYnVnSW5mb0VuYWJsZWRcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gZW5hYmxlZCB1cGRhdGUgdGhlIGRlYnVnSW5mb0VuYWJsZWQgc3RhdGUgaWYgcHJvdmlkZWQsIG90aGVyd2lzZSBqdXN0IHJldHVybiB0aGVcbiAgICogY3VycmVudCBkZWJ1Z0luZm9FbmFibGVkIHN0YXRlXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGVuYWJsZS9kaXNhYmxlIHZhcmlvdXMgZGVidWcgcnVudGltZSBpbmZvcm1hdGlvbiBpbiB0aGUgY29tcGlsZXIgc3VjaCBhcyBhZGRpbmdcbiAgICogYmluZGluZyBpbmZvcm1hdGlvbiBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgc2NvcGUgb24gdG8gRE9NIGVsZW1lbnRzLlxuICAgKiBJZiBlbmFibGVkLCB0aGUgY29tcGlsZXIgd2lsbCBhZGQgdGhlIGZvbGxvd2luZyB0byBET00gZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gYm91bmQgdG8gdGhlIHNjb3BlXG4gICAqICogYG5nLWJpbmRpbmdgIENTUyBjbGFzc1xuICAgKiAqIGAkYmluZGluZ2AgZGF0YSBwcm9wZXJ0eSBjb250YWluaW5nIGFuIGFycmF5IG9mIHRoZSBiaW5kaW5nIGV4cHJlc3Npb25zXG4gICAqXG4gICAqIFlvdSBtYXkgd2FudCB0byBkaXNhYmxlIHRoaXMgaW4gcHJvZHVjdGlvbiBmb3IgYSBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBib29zdC4gU2VlXG4gICAqIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERpc2FibGluZyBEZWJ1ZyBEYXRhfSBmb3IgbW9yZS5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICovXG4gIHZhciBkZWJ1Z0luZm9FbmFibGVkID0gdHJ1ZTtcbiAgdGhpcy5kZWJ1Z0luZm9FbmFibGVkID0gZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgIGlmIChpc0RlZmluZWQoZW5hYmxlZCkpIHtcbiAgICAgIGRlYnVnSW5mb0VuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBkZWJ1Z0luZm9FbmFibGVkO1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFtcbiAgICAgICAgICAgICckaW5qZWN0b3InLCAnJGludGVycG9sYXRlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJHBhcnNlJyxcbiAgICAgICAgICAgICckY29udHJvbGxlcicsICckcm9vdFNjb3BlJywgJyRkb2N1bWVudCcsICckc2NlJywgJyRhbmltYXRlJywgJyQkc2FuaXRpemVVcmknLFxuICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgICAkaW50ZXJwb2xhdGUsICAgJGV4Y2VwdGlvbkhhbmRsZXIsICAgJHRlbXBsYXRlUmVxdWVzdCwgICAkcGFyc2UsXG4gICAgICAgICAgICAgJGNvbnRyb2xsZXIsICAgJHJvb3RTY29wZSwgICAkZG9jdW1lbnQsICAgJHNjZSwgICAkYW5pbWF0ZSwgICAkJHNhbml0aXplVXJpKSB7XG5cbiAgICB2YXIgQXR0cmlidXRlcyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJpYnV0ZXNUb0NvcHkpIHtcbiAgICAgIGlmIChhdHRyaWJ1dGVzVG9Db3B5KSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlc1RvQ29weSk7XG4gICAgICAgIHZhciBpLCBsLCBrZXk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICB0aGlzW2tleV0gPSBhdHRyaWJ1dGVzVG9Db3B5W2tleV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGF0dHIgPSB7fTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIH07XG5cbiAgICBBdHRyaWJ1dGVzLnByb3RvdHlwZSA9IHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJG5vcm1hbGl6ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIENvbnZlcnRzIGFuIGF0dHJpYnV0ZSBuYW1lIChlLmcuIGRhc2gvY29sb24vdW5kZXJzY29yZS1kZWxpbWl0ZWQgc3RyaW5nLCBvcHRpb25hbGx5IHByZWZpeGVkIHdpdGggYHgtYCBvclxuICAgICAgICogYGRhdGEtYCkgdG8gaXRzIG5vcm1hbGl6ZWQsIGNhbWVsQ2FzZSBmb3JtLlxuICAgICAgICpcbiAgICAgICAqIEFsc28gdGhlcmUgaXMgc3BlY2lhbCBjYXNlIGZvciBNb3ogcHJlZml4IHN0YXJ0aW5nIHdpdGggdXBwZXIgY2FzZSBsZXR0ZXIuXG4gICAgICAgKlxuICAgICAgICogRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gY2hlY2sgb3V0IHRoZSBndWlkZSBvbiB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI21hdGNoaW5nLWRpcmVjdGl2ZXMgTWF0Y2hpbmcgRGlyZWN0aXZlc31cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZVxuICAgICAgICovXG4gICAgICAkbm9ybWFsaXplOiBkaXJlY3RpdmVOb3JtYWxpemUsXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYWRkQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBZGRzIHRoZSBDU1MgY2xhc3MgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBjbGFzc1ZhbCBwYXJhbWV0ZXIgdG8gdGhlIGVsZW1lbnQuIElmIGFuaW1hdGlvbnNcbiAgICAgICAqIGFyZSBlbmFibGVkIHRoZW4gYW4gYW5pbWF0aW9uIHdpbGwgYmUgdHJpZ2dlcmVkIGZvciB0aGUgY2xhc3MgYWRkaXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzVmFsIFRoZSBjbGFzc05hbWUgdmFsdWUgdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKi9cbiAgICAgICRhZGRDbGFzczogZnVuY3Rpb24oY2xhc3NWYWwpIHtcbiAgICAgICAgaWYgKGNsYXNzVmFsICYmIGNsYXNzVmFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgY2xhc3NWYWwpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRyZW1vdmVDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlbW92ZXMgdGhlIENTUyBjbGFzcyB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGNsYXNzVmFsIHBhcmFtZXRlciBmcm9tIHRoZSBlbGVtZW50LiBJZlxuICAgICAgICogYW5pbWF0aW9ucyBhcmUgZW5hYmxlZCB0aGVuIGFuIGFuaW1hdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGNsYXNzIHJlbW92YWwuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzVmFsIFRoZSBjbGFzc05hbWUgdmFsdWUgdGhhdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICAgICAgICovXG4gICAgICAkcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzVmFsKSB7XG4gICAgICAgIGlmIChjbGFzc1ZhbCAmJiBjbGFzc1ZhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIGNsYXNzVmFsKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkdXBkYXRlQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBZGRzIGFuZCByZW1vdmVzIHRoZSBhcHByb3ByaWF0ZSBDU1MgY2xhc3MgdmFsdWVzIHRvIHRoZSBlbGVtZW50IGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlXG4gICAgICAgKiBiZXR3ZWVuIHRoZSBuZXcgYW5kIG9sZCBDU1MgY2xhc3MgdmFsdWVzIChzcGVjaWZpZWQgYXMgbmV3Q2xhc3NlcyBhbmQgb2xkQ2xhc3NlcykuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0NsYXNzZXMgVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSB2YWx1ZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG9sZENsYXNzZXMgVGhlIGZvcm1lciBDU1MgY2xhc3NOYW1lIHZhbHVlXG4gICAgICAgKi9cbiAgICAgICR1cGRhdGVDbGFzczogZnVuY3Rpb24obmV3Q2xhc3Nlcywgb2xkQ2xhc3Nlcykge1xuICAgICAgICB2YXIgdG9BZGQgPSB0b2tlbkRpZmZlcmVuY2UobmV3Q2xhc3Nlcywgb2xkQ2xhc3Nlcyk7XG4gICAgICAgIGlmICh0b0FkZCAmJiB0b0FkZC5sZW5ndGgpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgdG9BZGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvUmVtb3ZlID0gdG9rZW5EaWZmZXJlbmNlKG9sZENsYXNzZXMsIG5ld0NsYXNzZXMpO1xuICAgICAgICBpZiAodG9SZW1vdmUgJiYgdG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIHRvUmVtb3ZlKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgYSBub3JtYWxpemVkIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBpbiBhIHdheSBzdWNoIHRoYXQgYWxsIGRpcmVjdGl2ZXNcbiAgICAgICAqIGNhbiBzaGFyZSB0aGUgYXR0cmlidXRlLiBUaGlzIGZ1bmN0aW9uIHByb3Blcmx5IGhhbmRsZXMgYm9vbGVhbiBhdHRyaWJ1dGVzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBOb3JtYWxpemVkIGtleS4gKGllIG5nQXR0cmlidXRlKVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8Ym9vbGVhbn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC4gSWYgYG51bGxgIGF0dHJpYnV0ZSB3aWxsIGJlIGRlbGV0ZWQuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB3cml0ZUF0dHIgSWYgZmFsc2UsIGRvZXMgbm90IHdyaXRlIHRoZSB2YWx1ZSB0byBET00gZWxlbWVudCBhdHRyaWJ1dGUuXG4gICAgICAgKiAgICAgRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gYXR0ck5hbWUgT3B0aW9uYWwgbm9uZSBub3JtYWxpemVkIG5hbWUuIERlZmF1bHRzIHRvIGtleS5cbiAgICAgICAqL1xuICAgICAgJHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSwgd3JpdGVBdHRyLCBhdHRyTmFtZSkge1xuICAgICAgICAvLyBUT0RPOiBkZWNpZGUgd2hldGhlciBvciBub3QgdG8gdGhyb3cgYW4gZXJyb3IgaWYgXCJjbGFzc1wiXG4gICAgICAgIC8vaXMgc2V0IHRocm91Z2ggdGhpcyBmdW5jdGlvbiBzaW5jZSBpdCBtYXkgY2F1c2UgJHVwZGF0ZUNsYXNzIHRvXG4gICAgICAgIC8vYmVjb21lIHVuc3RhYmxlLlxuXG4gICAgICAgIHZhciBub2RlID0gdGhpcy4kJGVsZW1lbnRbMF0sXG4gICAgICAgICAgICBib29sZWFuS2V5ID0gZ2V0Qm9vbGVhbkF0dHJOYW1lKG5vZGUsIGtleSksXG4gICAgICAgICAgICBhbGlhc2VkS2V5ID0gZ2V0QWxpYXNlZEF0dHJOYW1lKGtleSksXG4gICAgICAgICAgICBvYnNlcnZlciA9IGtleSxcbiAgICAgICAgICAgIG5vZGVOYW1lO1xuXG4gICAgICAgIGlmIChib29sZWFuS2V5KSB7XG4gICAgICAgICAgdGhpcy4kJGVsZW1lbnQucHJvcChrZXksIHZhbHVlKTtcbiAgICAgICAgICBhdHRyTmFtZSA9IGJvb2xlYW5LZXk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWxpYXNlZEtleSkge1xuICAgICAgICAgIHRoaXNbYWxpYXNlZEtleV0gPSB2YWx1ZTtcbiAgICAgICAgICBvYnNlcnZlciA9IGFsaWFzZWRLZXk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcblxuICAgICAgICAvLyB0cmFuc2xhdGUgbm9ybWFsaXplZCBrZXkgdG8gYWN0dWFsIGtleVxuICAgICAgICBpZiAoYXR0ck5hbWUpIHtcbiAgICAgICAgICB0aGlzLiRhdHRyW2tleV0gPSBhdHRyTmFtZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdHRyTmFtZSA9IHRoaXMuJGF0dHJba2V5XTtcbiAgICAgICAgICBpZiAoIWF0dHJOYW1lKSB7XG4gICAgICAgICAgICB0aGlzLiRhdHRyW2tleV0gPSBhdHRyTmFtZSA9IHNuYWtlX2Nhc2Uoa2V5LCAnLScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGVOYW1lID0gbm9kZU5hbWVfKHRoaXMuJCRlbGVtZW50KTtcblxuICAgICAgICBpZiAoKG5vZGVOYW1lID09PSAnYScgJiYga2V5ID09PSAnaHJlZicpIHx8XG4gICAgICAgICAgICAobm9kZU5hbWUgPT09ICdpbWcnICYmIGtleSA9PT0gJ3NyYycpKSB7XG4gICAgICAgICAgLy8gc2FuaXRpemUgYVtocmVmXSBhbmQgaW1nW3NyY10gdmFsdWVzXG4gICAgICAgICAgdGhpc1trZXldID0gdmFsdWUgPSAkJHNhbml0aXplVXJpKHZhbHVlLCBrZXkgPT09ICdzcmMnKTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlTmFtZSA9PT0gJ2ltZycgJiYga2V5ID09PSAnc3Jjc2V0Jykge1xuICAgICAgICAgIC8vIHNhbml0aXplIGltZ1tzcmNzZXRdIHZhbHVlc1xuICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuXG4gICAgICAgICAgLy8gZmlyc3QgY2hlY2sgaWYgdGhlcmUgYXJlIHNwYWNlcyBiZWNhdXNlIGl0J3Mgbm90IHRoZSBzYW1lIHBhdHRlcm5cbiAgICAgICAgICB2YXIgdHJpbW1lZFNyY3NldCA9IHRyaW0odmFsdWUpO1xuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICggICA5OTl4ICAgLHwgICA5OTl3ICAgLHwgICAsfCwgICApXG4gICAgICAgICAgdmFyIHNyY1BhdHRlcm4gPSAvKFxccytcXGQreFxccyosfFxccytcXGQrd1xccyosfFxccyssfCxcXHMrKS87XG4gICAgICAgICAgdmFyIHBhdHRlcm4gPSAvXFxzLy50ZXN0KHRyaW1tZWRTcmNzZXQpID8gc3JjUGF0dGVybiA6IC8oLCkvO1xuXG4gICAgICAgICAgLy8gc3BsaXQgc3Jjc2V0IGludG8gdHVwbGUgb2YgdXJpIGFuZCBkZXNjcmlwdG9yIGV4Y2VwdCBmb3IgdGhlIGxhc3QgaXRlbVxuICAgICAgICAgIHZhciByYXdVcmlzID0gdHJpbW1lZFNyY3NldC5zcGxpdChwYXR0ZXJuKTtcblxuICAgICAgICAgIC8vIGZvciBlYWNoIHR1cGxlc1xuICAgICAgICAgIHZhciBuYnJVcmlzV2l0aDJwYXJ0cyA9IE1hdGguZmxvb3IocmF3VXJpcy5sZW5ndGggLyAyKTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5iclVyaXNXaXRoMnBhcnRzOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpbm5lcklkeCA9IGkgKiAyO1xuICAgICAgICAgICAgLy8gc2FuaXRpemUgdGhlIHVyaVxuICAgICAgICAgICAgcmVzdWx0ICs9ICQkc2FuaXRpemVVcmkodHJpbShyYXdVcmlzW2lubmVySWR4XSksIHRydWUpO1xuICAgICAgICAgICAgLy8gYWRkIHRoZSBkZXNjcmlwdG9yXG4gICAgICAgICAgICByZXN1bHQgKz0gKFwiIFwiICsgdHJpbShyYXdVcmlzW2lubmVySWR4ICsgMV0pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzcGxpdCB0aGUgbGFzdCBpdGVtIGludG8gdXJpIGFuZCBkZXNjcmlwdG9yXG4gICAgICAgICAgdmFyIGxhc3RUdXBsZSA9IHRyaW0ocmF3VXJpc1tpICogMl0pLnNwbGl0KC9cXHMvKTtcblxuICAgICAgICAgIC8vIHNhbml0aXplIHRoZSBsYXN0IHVyaVxuICAgICAgICAgIHJlc3VsdCArPSAkJHNhbml0aXplVXJpKHRyaW0obGFzdFR1cGxlWzBdKSwgdHJ1ZSk7XG5cbiAgICAgICAgICAvLyBhbmQgYWRkIHRoZSBsYXN0IGRlc2NyaXB0b3IgaWYgYW55XG4gICAgICAgICAgaWYgKGxhc3RUdXBsZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAoXCIgXCIgKyB0cmltKGxhc3RUdXBsZVsxXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZSA9IHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3cml0ZUF0dHIgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy4kJGVsZW1lbnQucmVtb3ZlQXR0cihhdHRyTmFtZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LmF0dHIoYXR0ck5hbWUsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaXJlIG9ic2VydmVyc1xuICAgICAgICB2YXIgJCRvYnNlcnZlcnMgPSB0aGlzLiQkb2JzZXJ2ZXJzO1xuICAgICAgICAkJG9ic2VydmVycyAmJiBmb3JFYWNoKCQkb2JzZXJ2ZXJzW29ic2VydmVyXSwgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4odmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJG9ic2VydmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBPYnNlcnZlcyBhbiBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBvYnNlcnZlciBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgb25jZSBkdXJpbmcgdGhlIG5leHQgYCRkaWdlc3RgIGZvbGxvd2luZ1xuICAgICAgICogY29tcGlsYXRpb24uIFRoZSBvYnNlcnZlciBpcyB0aGVuIGludm9rZWQgd2hlbmV2ZXIgdGhlIGludGVycG9sYXRlZCB2YWx1ZVxuICAgICAgICogY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IE5vcm1hbGl6ZWQga2V5LiAoaWUgbmdBdHRyaWJ1dGUpIC5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oaW50ZXJwb2xhdGVkVmFsdWUpfSBmbiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyXG4gICAgICAgICAgICAgICAgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIGNoYW5nZXMuXG4gICAgICAgKiAgICAgICAgU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI3RleHQtYW5kLWF0dHJpYnV0ZS1iaW5kaW5ncyBEaXJlY3RpdmVzfSBndWlkZSBmb3IgbW9yZSBpbmZvLlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBvYnNlcnZlci5cbiAgICAgICAqL1xuICAgICAgJG9ic2VydmU6IGZ1bmN0aW9uKGtleSwgZm4pIHtcbiAgICAgICAgdmFyIGF0dHJzID0gdGhpcyxcbiAgICAgICAgICAgICQkb2JzZXJ2ZXJzID0gKGF0dHJzLiQkb2JzZXJ2ZXJzIHx8IChhdHRycy4kJG9ic2VydmVycyA9IGNyZWF0ZU1hcCgpKSksXG4gICAgICAgICAgICBsaXN0ZW5lcnMgPSAoJCRvYnNlcnZlcnNba2V5XSB8fCAoJCRvYnNlcnZlcnNba2V5XSA9IFtdKSk7XG5cbiAgICAgICAgbGlzdGVuZXJzLnB1c2goZm4pO1xuICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCFsaXN0ZW5lcnMuJCRpbnRlciAmJiBhdHRycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFpc1VuZGVmaW5lZChhdHRyc1trZXldKSkge1xuICAgICAgICAgICAgLy8gbm8gb25lIHJlZ2lzdGVyZWQgYXR0cmlidXRlIGludGVycG9sYXRpb24gZnVuY3Rpb24sIHNvIGxldHMgY2FsbCBpdCBtYW51YWxseVxuICAgICAgICAgICAgZm4oYXR0cnNba2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJzLCBmbik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuXG4gICAgZnVuY3Rpb24gc2FmZUFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgICRlbGVtZW50LmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlnbm9yZSwgc2luY2UgaXQgbWVhbnMgdGhhdCB3ZSBhcmUgdHJ5aW5nIHRvIHNldCBjbGFzcyBvblxuICAgICAgICAvLyBTVkcgZWxlbWVudCwgd2hlcmUgY2xhc3MgbmFtZSBpcyByZWFkLW9ubHkuXG4gICAgICB9XG4gICAgfVxuXG5cbiAgICB2YXIgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcbiAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLFxuICAgICAgICBkZW5vcm1hbGl6ZVRlbXBsYXRlID0gKHN0YXJ0U3ltYm9sID09ICd7eycgfHwgZW5kU3ltYm9sICA9PSAnfX0nKVxuICAgICAgICAgICAgPyBpZGVudGl0eVxuICAgICAgICAgICAgOiBmdW5jdGlvbiBkZW5vcm1hbGl6ZVRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtcXHsvZywgc3RhcnRTeW1ib2wpLnJlcGxhY2UoL319L2csIGVuZFN5bWJvbCk7XG4gICAgICAgIH0sXG4gICAgICAgIE5HX0FUVFJfQklORElORyA9IC9ebmdBdHRyW0EtWl0vO1xuICAgIHZhciBNVUxUSV9FTEVNRU5UX0RJUl9SRSA9IC9eKC4rKVN0YXJ0JC87XG5cbiAgICBjb21waWxlLiQkYWRkQmluZGluZ0luZm8gPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRCaW5kaW5nSW5mbygkZWxlbWVudCwgYmluZGluZykge1xuICAgICAgdmFyIGJpbmRpbmdzID0gJGVsZW1lbnQuZGF0YSgnJGJpbmRpbmcnKSB8fCBbXTtcblxuICAgICAgaWYgKGlzQXJyYXkoYmluZGluZykpIHtcbiAgICAgICAgYmluZGluZ3MgPSBiaW5kaW5ncy5jb25jYXQoYmluZGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xuICAgICAgfVxuXG4gICAgICAkZWxlbWVudC5kYXRhKCckYmluZGluZycsIGJpbmRpbmdzKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3MgPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRCaW5kaW5nQ2xhc3MoJGVsZW1lbnQpIHtcbiAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgJ25nLWJpbmRpbmcnKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8gPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRTY29wZUluZm8oJGVsZW1lbnQsIHNjb3BlLCBpc29sYXRlZCwgbm9UZW1wbGF0ZSkge1xuICAgICAgdmFyIGRhdGFOYW1lID0gaXNvbGF0ZWQgPyAobm9UZW1wbGF0ZSA/ICckaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZScgOiAnJGlzb2xhdGVTY29wZScpIDogJyRzY29wZSc7XG4gICAgICAkZWxlbWVudC5kYXRhKGRhdGFOYW1lLCBzY29wZSk7XG4gICAgfSA6IG5vb3A7XG5cbiAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZFNjb3BlQ2xhc3MoJGVsZW1lbnQsIGlzb2xhdGVkKSB7XG4gICAgICBzYWZlQWRkQ2xhc3MoJGVsZW1lbnQsIGlzb2xhdGVkID8gJ25nLWlzb2xhdGUtc2NvcGUnIDogJ25nLXNjb3BlJyk7XG4gICAgfSA6IG5vb3A7XG5cbiAgICByZXR1cm4gY29tcGlsZTtcblxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIGZ1bmN0aW9uIGNvbXBpbGUoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgaWYgKCEoJGNvbXBpbGVOb2RlcyBpbnN0YW5jZW9mIGpxTGl0ZSkpIHtcbiAgICAgICAgLy8ganF1ZXJ5IGFsd2F5cyByZXdyYXBzLCB3aGVyZWFzIHdlIG5lZWQgdG8gcHJlc2VydmUgdGhlIG9yaWdpbmFsIHNlbGVjdG9yIHNvIHRoYXQgd2UgY2FuXG4gICAgICAgIC8vIG1vZGlmeSBpdC5cbiAgICAgICAgJGNvbXBpbGVOb2RlcyA9IGpxTGl0ZSgkY29tcGlsZU5vZGVzKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGNhbiBub3QgY29tcGlsZSB0b3AgbGV2ZWwgdGV4dCBlbGVtZW50cyBzaW5jZSB0ZXh0IG5vZGVzIGNhbiBiZSBtZXJnZWQgYW5kIHdlIHdpbGxcbiAgICAgIC8vIG5vdCBiZSBhYmxlIHRvIGF0dGFjaCBzY29wZSBkYXRhIHRvIHRoZW0sIHNvIHdlIHdpbGwgd3JhcCB0aGVtIGluIDxzcGFuPlxuICAgICAgZm9yRWFjaCgkY29tcGlsZU5vZGVzLCBmdW5jdGlvbihub2RlLCBpbmRleCkge1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSBOT0RFX1RZUEVfVEVYVCAmJiBub2RlLm5vZGVWYWx1ZS5tYXRjaCgvXFxTKy8pIC8qIG5vbi1lbXB0eSAqLyApIHtcbiAgICAgICAgICAkY29tcGlsZU5vZGVzW2luZGV4XSA9IGpxTGl0ZShub2RlKS53cmFwKCc8c3Bhbj48L3NwYW4+JykucGFyZW50KClbMF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbXBvc2l0ZUxpbmtGbiA9XG4gICAgICAgICAgICAgIGNvbXBpbGVOb2RlcygkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sICRjb21waWxlTm9kZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KTtcbiAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzKCRjb21waWxlTm9kZXMpO1xuICAgICAgdmFyIG5hbWVzcGFjZSA9IG51bGw7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gcHVibGljTGlua0ZuKHNjb3BlLCBjbG9uZUNvbm5lY3RGbiwgb3B0aW9ucykge1xuICAgICAgICBhc3NlcnRBcmcoc2NvcGUsICdzY29wZScpO1xuXG4gICAgICAgIGlmIChwcmV2aW91c0NvbXBpbGVDb250ZXh0ICYmIHByZXZpb3VzQ29tcGlsZUNvbnRleHQubmVlZHNOZXdTY29wZSkge1xuICAgICAgICAgIC8vIEEgcGFyZW50IGRpcmVjdGl2ZSBkaWQgYSByZXBsYWNlIGFuZCBhIGRpcmVjdGl2ZSBvbiB0aGlzIGVsZW1lbnQgYXNrZWRcbiAgICAgICAgICAvLyBmb3IgdHJhbnNjbHVzaW9uLCB3aGljaCBjYXVzZWQgdXMgdG8gbG9zZSBhIGxheWVyIG9mIGVsZW1lbnQgb24gd2hpY2hcbiAgICAgICAgICAvLyB3ZSBjb3VsZCBob2xkIHRoZSBuZXcgdHJhbnNjbHVzaW9uIHNjb3BlLCBzbyB3ZSB3aWxsIGNyZWF0ZSBpdCBtYW51YWxseVxuICAgICAgICAgIC8vIGhlcmUuXG4gICAgICAgICAgc2NvcGUgPSBzY29wZS4kcGFyZW50LiRuZXcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gPSBvcHRpb25zLnBhcmVudEJvdW5kVHJhbnNjbHVkZUZuLFxuICAgICAgICAgIHRyYW5zY2x1ZGVDb250cm9sbGVycyA9IG9wdGlvbnMudHJhbnNjbHVkZUNvbnRyb2xsZXJzLFxuICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBvcHRpb25zLmZ1dHVyZVBhcmVudEVsZW1lbnQ7XG5cbiAgICAgICAgLy8gV2hlbiBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIGlzIHBhc3NlZCwgaXQgaXMgYVxuICAgICAgICAvLyBgY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGVgIGZ1bmN0aW9uIChpdCB3YXMgcHJldmlvdXNseSBwYXNzZWRcbiAgICAgICAgLy8gYXMgYHRyYW5zY2x1ZGVgIHRvIGRpcmVjdGl2ZS5saW5rKSBzbyB3ZSBtdXN0IHVud3JhcCBpdCB0byBnZXRcbiAgICAgICAgLy8gaXRzIGBib3VuZFRyYW5zY2x1ZGVGbmBcbiAgICAgICAgaWYgKHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuICYmIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuLiQkYm91bmRUcmFuc2NsdWRlKSB7XG4gICAgICAgICAgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gPSBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbmFtZXNwYWNlKSB7XG4gICAgICAgICAgbmFtZXNwYWNlID0gZGV0ZWN0TmFtZXNwYWNlRm9yQ2hpbGRFbGVtZW50cyhmdXR1cmVQYXJlbnRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgJGxpbmtOb2RlO1xuICAgICAgICBpZiAobmFtZXNwYWNlICE9PSAnaHRtbCcpIHtcbiAgICAgICAgICAvLyBXaGVuIHVzaW5nIGEgZGlyZWN0aXZlIHdpdGggcmVwbGFjZTp0cnVlIGFuZCB0ZW1wbGF0ZVVybCB0aGUgJGNvbXBpbGVOb2Rlc1xuICAgICAgICAgIC8vIChvciBhIGNoaWxkIGVsZW1lbnQgaW5zaWRlIG9mIHRoZW0pXG4gICAgICAgICAgLy8gbWlnaHQgY2hhbmdlLCBzbyB3ZSBuZWVkIHRvIHJlY3JlYXRlIHRoZSBuYW1lc3BhY2UgYWRhcHRlZCBjb21waWxlTm9kZXNcbiAgICAgICAgICAvLyBmb3IgY2FsbCB0byB0aGUgbGluayBmdW5jdGlvbi5cbiAgICAgICAgICAvLyBOb3RlOiBUaGlzIHdpbGwgYWxyZWFkeSBjbG9uZSB0aGUgbm9kZXMuLi5cbiAgICAgICAgICAkbGlua05vZGUgPSBqcUxpdGUoXG4gICAgICAgICAgICB3cmFwVGVtcGxhdGUobmFtZXNwYWNlLCBqcUxpdGUoJzxkaXY+JykuYXBwZW5kKCRjb21waWxlTm9kZXMpLmh0bWwoKSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKGNsb25lQ29ubmVjdEZuKSB7XG4gICAgICAgICAgLy8gaW1wb3J0YW50ISE6IHdlIG11c3QgY2FsbCBvdXIganFMaXRlLmNsb25lKCkgc2luY2UgdGhlIGpRdWVyeSBvbmUgaXMgdHJ5aW5nIHRvIGJlIHNtYXJ0XG4gICAgICAgICAgLy8gYW5kIHNvbWV0aW1lcyBjaGFuZ2VzIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIERPTS5cbiAgICAgICAgICAkbGlua05vZGUgPSBKUUxpdGVQcm90b3R5cGUuY2xvbmUuY2FsbCgkY29tcGlsZU5vZGVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkbGlua05vZGUgPSAkY29tcGlsZU5vZGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zY2x1ZGVDb250cm9sbGVycykge1xuICAgICAgICAgIGZvciAodmFyIGNvbnRyb2xsZXJOYW1lIGluIHRyYW5zY2x1ZGVDb250cm9sbGVycykge1xuICAgICAgICAgICAgJGxpbmtOb2RlLmRhdGEoJyQnICsgY29udHJvbGxlck5hbWUgKyAnQ29udHJvbGxlcicsIHRyYW5zY2x1ZGVDb250cm9sbGVyc1tjb250cm9sbGVyTmFtZV0uaW5zdGFuY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oJGxpbmtOb2RlLCBzY29wZSk7XG5cbiAgICAgICAgaWYgKGNsb25lQ29ubmVjdEZuKSBjbG9uZUNvbm5lY3RGbigkbGlua05vZGUsIHNjb3BlKTtcbiAgICAgICAgaWYgKGNvbXBvc2l0ZUxpbmtGbikgY29tcG9zaXRlTGlua0ZuKHNjb3BlLCAkbGlua05vZGUsICRsaW5rTm9kZSwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICByZXR1cm4gJGxpbmtOb2RlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzKHBhcmVudEVsZW1lbnQpIHtcbiAgICAgIC8vIFRPRE86IE1ha2UgdGhpcyBkZXRlY3QgTWF0aE1MIGFzIHdlbGwuLi5cbiAgICAgIHZhciBub2RlID0gcGFyZW50RWxlbWVudCAmJiBwYXJlbnRFbGVtZW50WzBdO1xuICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgIHJldHVybiAnaHRtbCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbm9kZU5hbWVfKG5vZGUpICE9PSAnZm9yZWlnbm9iamVjdCcgJiYgbm9kZS50b1N0cmluZygpLm1hdGNoKC9TVkcvKSA/ICdzdmcnIDogJ2h0bWwnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBpbGUgZnVuY3Rpb24gbWF0Y2hlcyBlYWNoIG5vZGUgaW4gbm9kZUxpc3QgYWdhaW5zdCB0aGUgZGlyZWN0aXZlcy4gT25jZSBhbGwgZGlyZWN0aXZlc1xuICAgICAqIGZvciBhIHBhcnRpY3VsYXIgbm9kZSBhcmUgY29sbGVjdGVkIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb25zIGFyZSBleGVjdXRlZC4gVGhlIGNvbXBpbGVcbiAgICAgKiBmdW5jdGlvbnMgcmV0dXJuIHZhbHVlcyAtIHRoZSBsaW5raW5nIGZ1bmN0aW9ucyAtIGFyZSBjb21iaW5lZCBpbnRvIGEgY29tcG9zaXRlIGxpbmtpbmdcbiAgICAgKiBmdW5jdGlvbiwgd2hpY2ggaXMgdGhlIGEgbGlua2luZyBmdW5jdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05vZGVMaXN0fSBub2RlTGlzdCBhbiBhcnJheSBvZiBub2RlcyBvciBOb2RlTGlzdCB0byBjb21waWxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZVxuICAgICAqICAgICAgICBzY29wZSBhcmd1bWVudCBpcyBhdXRvLWdlbmVyYXRlZCB0byB0aGUgbmV3IGNoaWxkIG9mIHRoZSB0cmFuc2NsdWRlZCBwYXJlbnQgc2NvcGUuXG4gICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gJHJvb3RFbGVtZW50IElmIHRoZSBub2RlTGlzdCBpcyB0aGUgcm9vdCBvZiB0aGUgY29tcGlsYXRpb24gdHJlZSB0aGVuXG4gICAgICogICAgICAgIHRoZSByb290RWxlbWVudCBtdXN0IGJlIHNldCB0aGUganFMaXRlIGNvbGxlY3Rpb24gb2YgdGhlIGNvbXBpbGUgcm9vdC4gVGhpcyBpc1xuICAgICAqICAgICAgICBuZWVkZWQgc28gdGhhdCB0aGUganFMaXRlIGNvbGxlY3Rpb24gaXRlbXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggd2lkZ2V0cy5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG1heFByaW9yaXR5IE1heCBkaXJlY3RpdmUgcHJpb3JpdHkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGNvbXBvc2l0ZSBsaW5raW5nIGZ1bmN0aW9uIG9mIGFsbCBvZiB0aGUgbWF0Y2hlZCBkaXJlY3RpdmVzIG9yIG51bGwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGlsZU5vZGVzKG5vZGVMaXN0LCB0cmFuc2NsdWRlRm4sICRyb290RWxlbWVudCwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICB2YXIgbGlua0ZucyA9IFtdLFxuICAgICAgICAgIGF0dHJzLCBkaXJlY3RpdmVzLCBub2RlTGlua0ZuLCBjaGlsZE5vZGVzLCBjaGlsZExpbmtGbiwgbGlua0ZuRm91bmQsIG5vZGVMaW5rRm5Gb3VuZDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBhdHRycyA9IG5ldyBBdHRyaWJ1dGVzKCk7XG5cbiAgICAgICAgLy8gd2UgbXVzdCBhbHdheXMgcmVmZXIgdG8gbm9kZUxpc3RbaV0gc2luY2UgdGhlIG5vZGVzIGNhbiBiZSByZXBsYWNlZCB1bmRlcm5lYXRoIHVzLlxuICAgICAgICBkaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMobm9kZUxpc3RbaV0sIFtdLCBhdHRycywgaSA9PT0gMCA/IG1heFByaW9yaXR5IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZURpcmVjdGl2ZSk7XG5cbiAgICAgICAgbm9kZUxpbmtGbiA9IChkaXJlY3RpdmVzLmxlbmd0aClcbiAgICAgICAgICAgID8gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIG5vZGVMaXN0W2ldLCBhdHRycywgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsIFtdLCBbXSwgcHJldmlvdXNDb21waWxlQ29udGV4dClcbiAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICBpZiAobm9kZUxpbmtGbiAmJiBub2RlTGlua0ZuLnNjb3BlKSB7XG4gICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoYXR0cnMuJCRlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkTGlua0ZuID0gKG5vZGVMaW5rRm4gJiYgbm9kZUxpbmtGbi50ZXJtaW5hbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICEoY2hpbGROb2RlcyA9IG5vZGVMaXN0W2ldLmNoaWxkTm9kZXMpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgIWNoaWxkTm9kZXMubGVuZ3RoKVxuICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICA6IGNvbXBpbGVOb2RlcyhjaGlsZE5vZGVzLFxuICAgICAgICAgICAgICAgICBub2RlTGlua0ZuID8gKFxuICAgICAgICAgICAgICAgICAgKG5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQgfHwgIW5vZGVMaW5rRm4udGVtcGxhdGVPblRoaXNFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgJiYgbm9kZUxpbmtGbi50cmFuc2NsdWRlKSA6IHRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgaWYgKG5vZGVMaW5rRm4gfHwgY2hpbGRMaW5rRm4pIHtcbiAgICAgICAgICBsaW5rRm5zLnB1c2goaSwgbm9kZUxpbmtGbiwgY2hpbGRMaW5rRm4pO1xuICAgICAgICAgIGxpbmtGbkZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBub2RlTGlua0ZuRm91bmQgPSBub2RlTGlua0ZuRm91bmQgfHwgbm9kZUxpbmtGbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdXNlIHRoZSBwcmV2aW91cyBjb250ZXh0IG9ubHkgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSB2aXJ0dWFsIGdyb3VwXG4gICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyByZXR1cm4gYSBsaW5raW5nIGZ1bmN0aW9uIGlmIHdlIGhhdmUgZm91bmQgYW55dGhpbmcsIG51bGwgb3RoZXJ3aXNlXG4gICAgICByZXR1cm4gbGlua0ZuRm91bmQgPyBjb21wb3NpdGVMaW5rRm4gOiBudWxsO1xuXG4gICAgICBmdW5jdGlvbiBjb21wb3NpdGVMaW5rRm4oc2NvcGUsIG5vZGVMaXN0LCAkcm9vdEVsZW1lbnQsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBub2RlTGlua0ZuLCBjaGlsZExpbmtGbiwgbm9kZSwgY2hpbGRTY29wZSwgaSwgaWksIGlkeCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbjtcbiAgICAgICAgdmFyIHN0YWJsZU5vZGVMaXN0O1xuXG5cbiAgICAgICAgaWYgKG5vZGVMaW5rRm5Gb3VuZCkge1xuICAgICAgICAgIC8vIGNvcHkgbm9kZUxpc3Qgc28gdGhhdCBpZiBhIG5vZGVMaW5rRm4gcmVtb3ZlcyBvciBhZGRzIGFuIGVsZW1lbnQgYXQgdGhpcyBET00gbGV2ZWwgb3VyXG4gICAgICAgICAgLy8gb2Zmc2V0cyBkb24ndCBnZXQgc2NyZXdlZCB1cFxuICAgICAgICAgIHZhciBub2RlTGlzdExlbmd0aCA9IG5vZGVMaXN0Lmxlbmd0aDtcbiAgICAgICAgICBzdGFibGVOb2RlTGlzdCA9IG5ldyBBcnJheShub2RlTGlzdExlbmd0aCk7XG5cbiAgICAgICAgICAvLyBjcmVhdGUgYSBzcGFyc2UgYXJyYXkgYnkgb25seSBjb3B5aW5nIHRoZSBlbGVtZW50cyB3aGljaCBoYXZlIGEgbGlua0ZuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpbmtGbnMubGVuZ3RoOyBpKz0zKSB7XG4gICAgICAgICAgICBpZHggPSBsaW5rRm5zW2ldO1xuICAgICAgICAgICAgc3RhYmxlTm9kZUxpc3RbaWR4XSA9IG5vZGVMaXN0W2lkeF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YWJsZU5vZGVMaXN0ID0gbm9kZUxpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGxpbmtGbnMubGVuZ3RoOyBpIDwgaWk7KSB7XG4gICAgICAgICAgbm9kZSA9IHN0YWJsZU5vZGVMaXN0W2xpbmtGbnNbaSsrXV07XG4gICAgICAgICAgbm9kZUxpbmtGbiA9IGxpbmtGbnNbaSsrXTtcbiAgICAgICAgICBjaGlsZExpbmtGbiA9IGxpbmtGbnNbaSsrXTtcblxuICAgICAgICAgIGlmIChub2RlTGlua0ZuKSB7XG4gICAgICAgICAgICBpZiAobm9kZUxpbmtGbi5zY29wZSkge1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGUuJG5ldygpO1xuICAgICAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVJbmZvKGpxTGl0ZShub2RlKSwgY2hpbGRTY29wZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChub2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihcbiAgICAgICAgICAgICAgICAgIHNjb3BlLCBub2RlTGlua0ZuLnRyYW5zY2x1ZGUsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICghbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQgJiYgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiAmJiB0cmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgY2hpbGRTY29wZSwgbm9kZSwgJHJvb3RFbGVtZW50LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRMaW5rRm4pIHtcbiAgICAgICAgICAgIGNoaWxkTGlua0ZuKHNjb3BlLCBub2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4sIHByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4pIHtcblxuICAgICAgdmFyIGJvdW5kVHJhbnNjbHVkZUZuID0gZnVuY3Rpb24odHJhbnNjbHVkZWRTY29wZSwgY2xvbmVGbiwgY29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIGNvbnRhaW5pbmdTY29wZSkge1xuXG4gICAgICAgIGlmICghdHJhbnNjbHVkZWRTY29wZSkge1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUgPSBzY29wZS4kbmV3KGZhbHNlLCBjb250YWluaW5nU2NvcGUpO1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJCR0cmFuc2NsdWRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVkU2NvcGUsIGNsb25lRm4sIHtcbiAgICAgICAgICBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjogcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnM6IGNvbnRyb2xsZXJzLFxuICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQ6IGZ1dHVyZVBhcmVudEVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9va3MgZm9yIGRpcmVjdGl2ZXMgb24gdGhlIGdpdmVuIG5vZGUgYW5kIGFkZHMgdGhlbSB0byB0aGUgZGlyZWN0aXZlIGNvbGxlY3Rpb24gd2hpY2ggaXNcbiAgICAgKiBzb3J0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZSBOb2RlIHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0gZGlyZWN0aXZlcyBBbiBhcnJheSB0byB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYWRkZWQgdG8uIFRoaXMgYXJyYXkgaXMgc29ydGVkIGJlZm9yZVxuICAgICAqICAgICAgICB0aGUgZnVuY3Rpb24gcmV0dXJucy5cbiAgICAgKiBAcGFyYW0gYXR0cnMgVGhlIHNoYXJlZCBhdHRycyBvYmplY3Qgd2hpY2ggaXMgdXNlZCB0byBwb3B1bGF0ZSB0aGUgbm9ybWFsaXplZCBhdHRyaWJ1dGVzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb2xsZWN0RGlyZWN0aXZlcyhub2RlLCBkaXJlY3RpdmVzLCBhdHRycywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkge1xuICAgICAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZSxcbiAgICAgICAgICBhdHRyc01hcCA9IGF0dHJzLiRhdHRyLFxuICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgIGNsYXNzTmFtZTtcblxuICAgICAgc3dpdGNoIChub2RlVHlwZSkge1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9FTEVNRU5UOiAvKiBFbGVtZW50ICovXG4gICAgICAgICAgLy8gdXNlIHRoZSBub2RlIG5hbWU6IDxkaXJlY3RpdmU+XG4gICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsXG4gICAgICAgICAgICAgIGRpcmVjdGl2ZU5vcm1hbGl6ZShub2RlTmFtZV8obm9kZSkpLCAnRScsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpO1xuXG4gICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBhdHRyaWJ1dGVzXG4gICAgICAgICAgZm9yICh2YXIgYXR0ciwgbmFtZSwgbk5hbWUsIG5nQXR0ck5hbWUsIHZhbHVlLCBpc05nQXR0ciwgbkF0dHJzID0gbm9kZS5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgIGogPSAwLCBqaiA9IG5BdHRycyAmJiBuQXR0cnMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgdmFyIGF0dHJTdGFydE5hbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBhdHRyRW5kTmFtZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBhdHRyID0gbkF0dHJzW2pdO1xuICAgICAgICAgICAgbmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgICAgIHZhbHVlID0gdHJpbShhdHRyLnZhbHVlKTtcblxuICAgICAgICAgICAgLy8gc3VwcG9ydCBuZ0F0dHIgYXR0cmlidXRlIGJpbmRpbmdcbiAgICAgICAgICAgIG5nQXR0ck5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobmFtZSk7XG4gICAgICAgICAgICBpZiAoaXNOZ0F0dHIgPSBOR19BVFRSX0JJTkRJTkcudGVzdChuZ0F0dHJOYW1lKSkge1xuICAgICAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKFBSRUZJWF9SRUdFWFAsICcnKVxuICAgICAgICAgICAgICAgIC5zdWJzdHIoOCkucmVwbGFjZSgvXyguKS9nLCBmdW5jdGlvbihtYXRjaCwgbGV0dGVyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBtdWx0aUVsZW1lbnRNYXRjaCA9IG5nQXR0ck5hbWUubWF0Y2goTVVMVElfRUxFTUVOVF9ESVJfUkUpO1xuICAgICAgICAgICAgaWYgKG11bHRpRWxlbWVudE1hdGNoICYmIGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KG11bHRpRWxlbWVudE1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICBhdHRyU3RhcnROYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgYXR0ckVuZE5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDUpICsgJ2VuZCc7XG4gICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgYXR0cnNNYXBbbk5hbWVdID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChpc05nQXR0ciB8fCAhYXR0cnMuaGFzT3duUHJvcGVydHkobk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGdldEJvb2xlYW5BdHRyTmFtZShub2RlLCBuTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRydWU7IC8vIHByZXNlbmNlIG1lYW5zIHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUobm9kZSwgZGlyZWN0aXZlcywgdmFsdWUsIG5OYW1lLCBpc05nQXR0cik7XG4gICAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdBJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgYXR0clN0YXJ0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ckVuZE5hbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHVzZSBjbGFzcyBhcyBkaXJlY3RpdmVcbiAgICAgICAgICBjbGFzc05hbWUgPSBub2RlLmNsYXNzTmFtZTtcbiAgICAgICAgICBpZiAoaXNPYmplY3QoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAvLyBNYXliZSBTVkdBbmltYXRlZFN0cmluZ1xuICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUuYW5pbVZhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzU3RyaW5nKGNsYXNzTmFtZSkgJiYgY2xhc3NOYW1lICE9PSAnJykge1xuICAgICAgICAgICAgd2hpbGUgKG1hdGNoID0gQ0xBU1NfRElSRUNUSVZFX1JFR0VYUC5leGVjKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMl0pO1xuICAgICAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQycsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFszXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnN1YnN0cihtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9URVhUOiAvKiBUZXh0IE5vZGUgKi9cbiAgICAgICAgICBpZiAobXNpZSA9PT0gMTEpIHtcbiAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yICMxMTc4MVxuICAgICAgICAgICAgd2hpbGUgKG5vZGUucGFyZW50Tm9kZSAmJiBub2RlLm5leHRTaWJsaW5nICYmIG5vZGUubmV4dFNpYmxpbmcubm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUKSB7XG4gICAgICAgICAgICAgIG5vZGUubm9kZVZhbHVlID0gbm9kZS5ub2RlVmFsdWUgKyBub2RlLm5leHRTaWJsaW5nLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgbm9kZS5ub2RlVmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9DT01NRU5UOiAvKiBDb21tZW50ICovXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG1hdGNoID0gQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMobm9kZS5ub2RlVmFsdWUpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzFdKTtcbiAgICAgICAgICAgICAgaWYgKGFkZERpcmVjdGl2ZShkaXJlY3RpdmVzLCBuTmFtZSwgJ00nLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbMl0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gdHVybnMgb3V0IHRoYXQgdW5kZXIgc29tZSBjaXJjdW1zdGFuY2VzIElFOSB0aHJvd3MgZXJyb3JzIHdoZW4gb25lIGF0dGVtcHRzIHRvIHJlYWRcbiAgICAgICAgICAgIC8vIGNvbW1lbnQncyBub2RlIHZhbHVlLlxuICAgICAgICAgICAgLy8gSnVzdCBpZ25vcmUgaXQgYW5kIGNvbnRpbnVlLiAoQ2FuJ3Qgc2VlbSB0byByZXByb2R1Y2UgaW4gdGVzdCBjYXNlLilcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRpcmVjdGl2ZXMuc29ydChieVByaW9yaXR5KTtcbiAgICAgIHJldHVybiBkaXJlY3RpdmVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgbm9kZSB3aXRoIGFuIGRpcmVjdGl2ZS1zdGFydCBpdCBjb2xsZWN0cyBhbGwgb2YgdGhlIHNpYmxpbmdzIHVudGlsIGl0IGZpbmRzXG4gICAgICogZGlyZWN0aXZlLWVuZC5cbiAgICAgKiBAcGFyYW0gbm9kZVxuICAgICAqIEBwYXJhbSBhdHRyU3RhcnRcbiAgICAgKiBAcGFyYW0gYXR0ckVuZFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdyb3VwU2Nhbihub2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgdmFyIGRlcHRoID0gMDtcbiAgICAgIGlmIChhdHRyU3RhcnQgJiYgbm9kZS5oYXNBdHRyaWJ1dGUgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoYXR0clN0YXJ0KSkge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndXRlcmRpcicsXG4gICAgICAgICAgICAgICAgICAgICAgXCJVbnRlcm1pbmF0ZWQgYXR0cmlidXRlLCBmb3VuZCAnezB9JyBidXQgbm8gbWF0Y2hpbmcgJ3sxfScgZm91bmQuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyU3RhcnQpKSBkZXB0aCsrO1xuICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKGF0dHJFbmQpKSBkZXB0aC0tO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICB9IHdoaWxlIChkZXB0aCA+IDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGpxTGl0ZShub2Rlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV3JhcHBlciBmb3IgbGlua2luZyBmdW5jdGlvbiB3aGljaCBjb252ZXJ0cyBub3JtYWwgbGlua2luZyBmdW5jdGlvbiBpbnRvIGEgZ3JvdXBlZFxuICAgICAqIGxpbmtpbmcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIGxpbmtGblxuICAgICAqIEBwYXJhbSBhdHRyU3RhcnRcbiAgICAgKiBAcGFyYW0gYXR0ckVuZFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihsaW5rRm4sIGF0dHJTdGFydCwgYXR0ckVuZCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbikge1xuICAgICAgICBlbGVtZW50ID0gZ3JvdXBTY2FuKGVsZW1lbnRbMF0sIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgIHJldHVybiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT25jZSB0aGUgZGlyZWN0aXZlcyBoYXZlIGJlZW4gY29sbGVjdGVkLCB0aGVpciBjb21waWxlIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQuIFRoaXMgbWV0aG9kXG4gICAgICogaXMgcmVzcG9uc2libGUgZm9yIGlubGluaW5nIGRpcmVjdGl2ZSB0ZW1wbGF0ZXMgYXMgd2VsbCBhcyB0ZXJtaW5hdGluZyB0aGUgYXBwbGljYXRpb25cbiAgICAgKiBvZiB0aGUgZGlyZWN0aXZlcyBpZiB0aGUgdGVybWluYWwgZGlyZWN0aXZlIGhhcyBiZWVuIHJlYWNoZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkaXJlY3RpdmVzIEFycmF5IG9mIGNvbGxlY3RlZCBkaXJlY3RpdmVzIHRvIGV4ZWN1dGUgdGhlaXIgY29tcGlsZSBmdW5jdGlvbi5cbiAgICAgKiAgICAgICAgdGhpcyBuZWVkcyB0byBiZSBwcmUtc29ydGVkIGJ5IHByaW9yaXR5IG9yZGVyLlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gY29tcGlsZU5vZGUgVGhlIHJhdyBET00gbm9kZSB0byBhcHBseSB0aGUgY29tcGlsZSBmdW5jdGlvbnMgdG9cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVBdHRycyBUaGUgc2hhcmVkIGF0dHJpYnV0ZSBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZSwgY2xvbmVBdHRhY2hGbj0pfSB0cmFuc2NsdWRlRm4gQSBsaW5raW5nIGZ1bmN0aW9uLCB3aGVyZSB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUgYXJndW1lbnQgaXMgYXV0by1nZW5lcmF0ZWQgdG8gdGhlIG5ld1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCBvZiB0aGUgdHJhbnNjbHVkZWQgcGFyZW50IHNjb3BlLlxuICAgICAqIEBwYXJhbSB7SlFMaXRlfSBqcUNvbGxlY3Rpb24gSWYgd2UgYXJlIHdvcmtpbmcgb24gdGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGUgdHJlZSB0aGVuIHRoaXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50IGhhcyB0aGUgcm9vdCBqcUxpdGUgYXJyYXkgc28gdGhhdCB3ZSBjYW4gcmVwbGFjZSBub2Rlc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gaXQuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcmlnaW5hbFJlcGxhY2VEaXJlY3RpdmUgQW4gb3B0aW9uYWwgZGlyZWN0aXZlIHRoYXQgd2lsbCBiZSBpZ25vcmVkIHdoZW5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21waWxpbmcgdGhlIHRyYW5zY2x1c2lvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5LjxGdW5jdGlvbj59IHByZUxpbmtGbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxGdW5jdGlvbj59IHBvc3RMaW5rRm5zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQgQ29udGV4dCB1c2VkIGZvciBwcmV2aW91cyBjb21waWxhdGlvbiBvZiB0aGUgY3VycmVudFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IGxpbmtGblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgdHJhbnNjbHVkZUZuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcUNvbGxlY3Rpb24sIG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0IHx8IHt9O1xuXG4gICAgICB2YXIgdGVybWluYWxQcmlvcml0eSA9IC1OdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5uZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlcyA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQuY29udHJvbGxlckRpcmVjdGl2ZXMsXG4gICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5uZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0LnRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IGZhbHNlLFxuICAgICAgICAgIGhhc1RlbXBsYXRlID0gZmFsc2UsXG4gICAgICAgICAgaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID0ganFMaXRlKGNvbXBpbGVOb2RlKSxcbiAgICAgICAgICBkaXJlY3RpdmUsXG4gICAgICAgICAgZGlyZWN0aXZlTmFtZSxcbiAgICAgICAgICAkdGVtcGxhdGUsXG4gICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSxcbiAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiA9IHRyYW5zY2x1ZGVGbixcbiAgICAgICAgICBsaW5rRm4sXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWU7XG5cbiAgICAgIC8vIGV4ZWN1dGVzIGFsbCBkaXJlY3RpdmVzIG9uIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICB2YXIgYXR0clN0YXJ0ID0gZGlyZWN0aXZlLiQkc3RhcnQ7XG4gICAgICAgIHZhciBhdHRyRW5kID0gZGlyZWN0aXZlLiQkZW5kO1xuXG4gICAgICAgIC8vIGNvbGxlY3QgbXVsdGlibG9jayBzZWN0aW9uc1xuICAgICAgICBpZiAoYXR0clN0YXJ0KSB7XG4gICAgICAgICAgJGNvbXBpbGVOb2RlID0gZ3JvdXBTY2FuKGNvbXBpbGVOb2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICB9XG4gICAgICAgICR0ZW1wbGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAodGVybWluYWxQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkge1xuICAgICAgICAgIGJyZWFrOyAvLyBwcmV2ZW50IGZ1cnRoZXIgcHJvY2Vzc2luZyBvZiBkaXJlY3RpdmVzXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUuc2NvcGUpIHtcblxuICAgICAgICAgIC8vIHNraXAgdGhlIGNoZWNrIGZvciBkaXJlY3RpdmVzIHdpdGggYXN5bmMgdGVtcGxhdGVzLCB3ZSdsbCBjaGVjayB0aGUgZGVyaXZlZCBzeW5jXG4gICAgICAgICAgLy8gZGlyZWN0aXZlIHdoZW4gdGhlIHRlbXBsYXRlIGFycml2ZXNcbiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGFuIGlzb2xhdGVkIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZXJlIGlzIG5vIHNjb3BlIG9mIGFueSBraW5kIGFscmVhZHlcbiAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ25ldy9pc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBuZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGEgY2hpbGQgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlcmUgaXMgbm8gaXNvbGF0ZWQgc2NvcGUgYWxyZWFkeVxuICAgICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnbmV3L2lzb2xhdGVkIHNjb3BlJywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLCBkaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBuZXdTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlLm5hbWU7XG5cbiAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwgJiYgZGlyZWN0aXZlLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS5jb250cm9sbGVyO1xuICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzID0gY29udHJvbGxlckRpcmVjdGl2ZXMgfHwgY3JlYXRlTWFwKCk7XG4gICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoXCInXCIgKyBkaXJlY3RpdmVOYW1lICsgXCInIGNvbnRyb2xsZXJcIixcbiAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0sIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS50cmFuc2NsdWRlKSB7XG4gICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgbmdJZiBhbmQgbmdSZXBlYXQgc28gdGhhdCB3ZSBkb24ndCBjb21wbGFpbiBhYm91dCBkdXBsaWNhdGUgdHJhbnNjbHVzaW9uLlxuICAgICAgICAgIC8vIFRoaXMgb3B0aW9uIHNob3VsZCBvbmx5IGJlIHVzZWQgYnkgZGlyZWN0aXZlcyB0aGF0IGtub3cgaG93IHRvIHNhZmVseSBoYW5kbGUgZWxlbWVudCB0cmFuc2NsdXNpb24sXG4gICAgICAgICAgLy8gd2hlcmUgdGhlIHRyYW5zY2x1ZGVkIG5vZGVzIGFyZSBhZGRlZCBvciByZXBsYWNlZCBhZnRlciBsaW5raW5nLlxuICAgICAgICAgIGlmICghZGlyZWN0aXZlLiQkdGxiKSB7XG4gICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndHJhbnNjbHVzaW9uJywgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPT0gJ2VsZW1lbnQnKSB7XG4gICAgICAgICAgICBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5O1xuICAgICAgICAgICAgJHRlbXBsYXRlID0gJGNvbXBpbGVOb2RlO1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPVxuICAgICAgICAgICAgICAgIGpxTGl0ZShkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgJyArIGRpcmVjdGl2ZU5hbWUgKyAnOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZUF0dHJzW2RpcmVjdGl2ZU5hbWVdICsgJyAnKSk7XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXTtcbiAgICAgICAgICAgIHJlcGxhY2VXaXRoKGpxQ29sbGVjdGlvbiwgc2xpY2VBcmdzKCR0ZW1wbGF0ZSksIGNvbXBpbGVOb2RlKTtcblxuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuLCB0ZXJtaW5hbFByaW9yaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgJiYgcmVwbGFjZURpcmVjdGl2ZS5uYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBwYXNzIGluOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBjb250cm9sbGVyRGlyZWN0aXZlcyAtIG90aGVyd2lzZSB3ZSdsbCBjcmVhdGUgZHVwbGljYXRlcyBjb250cm9sbGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgb3IgdGVtcGxhdGVEaXJlY3RpdmUgLSBjb21iaW5pbmcgdGVtcGxhdGVzIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZWxlbWVudCB0cmFuc2NsdXNpb24gZG9lc24ndCBtYWtlIHNlbnNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgb25seSBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlIHNvIHRoYXQgd2UgcHJldmVudCBwdXR0aW5nIHRyYW5zY2x1c2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb24gdGhlIHNhbWUgZWxlbWVudCBtb3JlIHRoYW4gb25jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHRlbXBsYXRlID0ganFMaXRlKGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKSkuY29udGVudHMoKTtcbiAgICAgICAgICAgICRjb21waWxlTm9kZS5lbXB0eSgpOyAvLyBjbGVhciBjb250ZW50c1xuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuLCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLCB7IG5lZWRzTmV3U2NvcGU6IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSB8fCBkaXJlY3RpdmUuJCRuZXdTY29wZX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmUudGVtcGxhdGUpIHtcbiAgICAgICAgICBoYXNUZW1wbGF0ZSA9IHRydWU7XG4gICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RlbXBsYXRlJywgdGVtcGxhdGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcblxuICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlID0gKGlzRnVuY3Rpb24oZGlyZWN0aXZlLnRlbXBsYXRlKSlcbiAgICAgICAgICAgICAgPyBkaXJlY3RpdmUudGVtcGxhdGUoJGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzKVxuICAgICAgICAgICAgICA6IGRpcmVjdGl2ZS50ZW1wbGF0ZTtcblxuICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlID0gZGVub3JtYWxpemVUZW1wbGF0ZShkaXJlY3RpdmVWYWx1ZSk7XG5cbiAgICAgICAgICBpZiAoZGlyZWN0aXZlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgICBpZiAoanFMaXRlSXNUZXh0Tm9kZShkaXJlY3RpdmVWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gW107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSByZW1vdmVDb21tZW50cyh3cmFwVGVtcGxhdGUoZGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlLCB0cmltKGRpcmVjdGl2ZVZhbHVlKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkdGVtcGxhdGVbMF07XG5cbiAgICAgICAgICAgIGlmICgkdGVtcGxhdGUubGVuZ3RoICE9IDEgfHwgY29tcGlsZU5vZGUubm9kZVR5cGUgIT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCd0cGxydCcsXG4gICAgICAgICAgICAgICAgICBcIlRlbXBsYXRlIGZvciBkaXJlY3RpdmUgJ3swfScgbXVzdCBoYXZlIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gezF9XCIsXG4gICAgICAgICAgICAgICAgICBkaXJlY3RpdmVOYW1lLCAnJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlcGxhY2VXaXRoKGpxQ29sbGVjdGlvbiwgJGNvbXBpbGVOb2RlLCBjb21waWxlTm9kZSk7XG5cbiAgICAgICAgICAgIHZhciBuZXdUZW1wbGF0ZUF0dHJzID0geyRhdHRyOiB7fX07XG5cbiAgICAgICAgICAgIC8vIGNvbWJpbmUgZGlyZWN0aXZlcyBmcm9tIHRoZSBvcmlnaW5hbCBub2RlIGFuZCBmcm9tIHRoZSB0ZW1wbGF0ZTpcbiAgICAgICAgICAgIC8vIC0gdGFrZSB0aGUgYXJyYXkgb2YgZGlyZWN0aXZlcyBmb3IgdGhpcyBlbGVtZW50XG4gICAgICAgICAgICAvLyAtIHNwbGl0IGl0IGludG8gdHdvIHBhcnRzLCB0aG9zZSB0aGF0IGFscmVhZHkgYXBwbGllZCAocHJvY2Vzc2VkKSBhbmQgdGhvc2UgdGhhdCB3ZXJlbid0ICh1bnByb2Nlc3NlZClcbiAgICAgICAgICAgIC8vIC0gY29sbGVjdCBkaXJlY3RpdmVzIGZyb20gdGhlIHRlbXBsYXRlIGFuZCBzb3J0IHRoZW0gYnkgcHJpb3JpdHlcbiAgICAgICAgICAgIC8vIC0gY29tYmluZSBkaXJlY3RpdmVzIGFzOiBwcm9jZXNzZWQgKyB0ZW1wbGF0ZSArIHVucHJvY2Vzc2VkXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMoY29tcGlsZU5vZGUsIFtdLCBuZXdUZW1wbGF0ZUF0dHJzKTtcbiAgICAgICAgICAgIHZhciB1bnByb2Nlc3NlZERpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLnNwbGljZShpICsgMSwgZGlyZWN0aXZlcy5sZW5ndGggLSAoaSArIDEpKTtcblxuICAgICAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBuZXdTY29wZURpcmVjdGl2ZSkge1xuICAgICAgICAgICAgICAvLyBUaGUgb3JpZ2luYWwgZGlyZWN0aXZlIGNhdXNlZCB0aGUgY3VycmVudCBlbGVtZW50IHRvIGJlIHJlcGxhY2VkIGJ1dCB0aGlzIGVsZW1lbnRcbiAgICAgICAgICAgICAgLy8gYWxzbyBuZWVkcyB0byBoYXZlIGEgbmV3IHNjb3BlLCBzbyB3ZSBuZWVkIHRvIHRlbGwgdGhlIHRlbXBsYXRlIGRpcmVjdGl2ZXNcbiAgICAgICAgICAgICAgLy8gdGhhdCB0aGV5IHdvdWxkIG5lZWQgdG8gZ2V0IHRoZWlyIHNjb3BlIGZyb20gZnVydGhlciB1cCwgaWYgdGhleSByZXF1aXJlIHRyYW5zY2x1c2lvblxuICAgICAgICAgICAgICBtYXJrRGlyZWN0aXZlU2NvcGUodGVtcGxhdGVEaXJlY3RpdmVzLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsIG5ld1Njb3BlRGlyZWN0aXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLmNvbmNhdCh0ZW1wbGF0ZURpcmVjdGl2ZXMpLmNvbmNhdCh1bnByb2Nlc3NlZERpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXModGVtcGxhdGVBdHRycywgbmV3VGVtcGxhdGVBdHRycyk7XG5cbiAgICAgICAgICAgIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKGRpcmVjdGl2ZVZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlVXJsKSB7XG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0ZW1wbGF0ZScsIHRlbXBsYXRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG5cbiAgICAgICAgICBpZiAoZGlyZWN0aXZlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbm9kZUxpbmtGbiA9IGNvbXBpbGVUZW1wbGF0ZVVybChkaXJlY3RpdmVzLnNwbGljZShpLCBkaXJlY3RpdmVzLmxlbmd0aCAtIGkpLCAkY29tcGlsZU5vZGUsXG4gICAgICAgICAgICAgIHRlbXBsYXRlQXR0cnMsIGpxQ29sbGVjdGlvbiwgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSAmJiBjaGlsZFRyYW5zY2x1ZGVGbiwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlczogY29udHJvbGxlckRpcmVjdGl2ZXMsXG4gICAgICAgICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmU6IChuZXdTY29wZURpcmVjdGl2ZSAhPT0gZGlyZWN0aXZlKSAmJiBuZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmU6IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZTogdGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZTogbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoO1xuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGl2ZS5jb21waWxlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxpbmtGbiA9IGRpcmVjdGl2ZS5jb21waWxlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgY2hpbGRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlua0ZuKSkge1xuICAgICAgICAgICAgICBhZGRMaW5rRm5zKG51bGwsIGxpbmtGbiwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlua0ZuKSB7XG4gICAgICAgICAgICAgIGFkZExpbmtGbnMobGlua0ZuLnByZSwgbGlua0ZuLnBvc3QsIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSwgc3RhcnRpbmdUYWcoJGNvbXBpbGVOb2RlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZXJtaW5hbCkge1xuICAgICAgICAgIG5vZGVMaW5rRm4udGVybWluYWwgPSB0cnVlO1xuICAgICAgICAgIHRlcm1pbmFsUHJpb3JpdHkgPSBNYXRoLm1heCh0ZXJtaW5hbFByaW9yaXR5LCBkaXJlY3RpdmUucHJpb3JpdHkpO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgbm9kZUxpbmtGbi5zY29wZSA9IG5ld1Njb3BlRGlyZWN0aXZlICYmIG5ld1Njb3BlRGlyZWN0aXZlLnNjb3BlID09PSB0cnVlO1xuICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCA9IGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmU7XG4gICAgICBub2RlTGlua0ZuLnRlbXBsYXRlT25UaGlzRWxlbWVudCA9IGhhc1RlbXBsYXRlO1xuICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlID0gY2hpbGRUcmFuc2NsdWRlRm47XG5cbiAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZTtcblxuICAgICAgLy8gbWlnaHQgYmUgbm9ybWFsIG9yIGRlbGF5ZWQgbm9kZUxpbmtGbiBkZXBlbmRpbmcgb24gaWYgdGVtcGxhdGVVcmwgaXMgcHJlc2VudFxuICAgICAgcmV0dXJuIG5vZGVMaW5rRm47XG5cbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgIGZ1bmN0aW9uIGFkZExpbmtGbnMocHJlLCBwb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgICAgaWYgKHByZSkge1xuICAgICAgICAgIGlmIChhdHRyU3RhcnQpIHByZSA9IGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKHByZSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICBwcmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlO1xuICAgICAgICAgIHByZS5kaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTmFtZTtcbiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID09PSBkaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlKSB7XG4gICAgICAgICAgICBwcmUgPSBjbG9uZUFuZEFubm90YXRlRm4ocHJlLCB7aXNvbGF0ZVNjb3BlOiB0cnVlfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZUxpbmtGbnMucHVzaChwcmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3N0KSB7XG4gICAgICAgICAgaWYgKGF0dHJTdGFydCkgcG9zdCA9IGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKHBvc3QsIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgcG9zdC5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmU7XG4gICAgICAgICAgcG9zdC5kaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTmFtZTtcbiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID09PSBkaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlKSB7XG4gICAgICAgICAgICBwb3N0ID0gY2xvbmVBbmRBbm5vdGF0ZUZuKHBvc3QsIHtpc29sYXRlU2NvcGU6IHRydWV9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9zdExpbmtGbnMucHVzaChwb3N0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIGZ1bmN0aW9uIGdldENvbnRyb2xsZXJzKGRpcmVjdGl2ZU5hbWUsIHJlcXVpcmUsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpIHtcbiAgICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICAgIGlmIChpc1N0cmluZyhyZXF1aXJlKSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IHJlcXVpcmUubWF0Y2goUkVRVUlSRV9QUkVGSVhfUkVHRVhQKTtcbiAgICAgICAgICB2YXIgbmFtZSA9IHJlcXVpcmUuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgdmFyIGluaGVyaXRUeXBlID0gbWF0Y2hbMV0gfHwgbWF0Y2hbM107XG4gICAgICAgICAgdmFyIG9wdGlvbmFsID0gbWF0Y2hbMl0gPT09ICc/JztcblxuICAgICAgICAgIC8vSWYgb25seSBwYXJlbnRzIHRoZW4gc3RhcnQgYXQgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICAgICAgaWYgKGluaGVyaXRUeXBlID09PSAnXl4nKSB7XG4gICAgICAgICAgICAkZWxlbWVudCA9ICRlbGVtZW50LnBhcmVudCgpO1xuICAgICAgICAgIC8vT3RoZXJ3aXNlIGF0dGVtcHQgZ2V0dGluZyB0aGUgY29udHJvbGxlciBmcm9tIGVsZW1lbnRDb250cm9sbGVycyBpbiBjYXNlXG4gICAgICAgICAgLy90aGUgZWxlbWVudCBpcyB0cmFuc2NsdWRlZCAoYW5kIGhhcyBubyBkYXRhKSBhbmQgdG8gYXZvaWQgLmRhdGEgaWYgcG9zc2libGVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBlbGVtZW50Q29udHJvbGxlcnMgJiYgZWxlbWVudENvbnRyb2xsZXJzW25hbWVdO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAmJiB2YWx1ZS5pbnN0YW5jZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZGF0YU5hbWUgPSAnJCcgKyBuYW1lICsgJ0NvbnRyb2xsZXInO1xuICAgICAgICAgICAgdmFsdWUgPSBpbmhlcml0VHlwZSA/ICRlbGVtZW50LmluaGVyaXRlZERhdGEoZGF0YU5hbWUpIDogJGVsZW1lbnQuZGF0YShkYXRhTmFtZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF2YWx1ZSAmJiAhb3B0aW9uYWwpIHtcbiAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdjdHJlcScsXG4gICAgICAgICAgICAgICAgXCJDb250cm9sbGVyICd7MH0nLCByZXF1aXJlZCBieSBkaXJlY3RpdmUgJ3sxfScsIGNhbid0IGJlIGZvdW5kIVwiLFxuICAgICAgICAgICAgICAgIG5hbWUsIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHJlcXVpcmUpKSB7XG4gICAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSByZXF1aXJlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIHZhbHVlW2ldID0gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgcmVxdWlyZVtpXSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldHVwQ29udHJvbGxlcnMoJGVsZW1lbnQsIGF0dHJzLCB0cmFuc2NsdWRlRm4sIGNvbnRyb2xsZXJEaXJlY3RpdmVzLCBpc29sYXRlU2NvcGUsIHNjb3BlKSB7XG4gICAgICAgIHZhciBlbGVtZW50Q29udHJvbGxlcnMgPSBjcmVhdGVNYXAoKTtcbiAgICAgICAgZm9yICh2YXIgY29udHJvbGxlcktleSBpbiBjb250cm9sbGVyRGlyZWN0aXZlcykge1xuICAgICAgICAgIHZhciBkaXJlY3RpdmUgPSBjb250cm9sbGVyRGlyZWN0aXZlc1tjb250cm9sbGVyS2V5XTtcbiAgICAgICAgICB2YXIgbG9jYWxzID0ge1xuICAgICAgICAgICAgJHNjb3BlOiBkaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUgPyBpc29sYXRlU2NvcGUgOiBzY29wZSxcbiAgICAgICAgICAgICRlbGVtZW50OiAkZWxlbWVudCxcbiAgICAgICAgICAgICRhdHRyczogYXR0cnMsXG4gICAgICAgICAgICAkdHJhbnNjbHVkZTogdHJhbnNjbHVkZUZuXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciBjb250cm9sbGVyID0gZGlyZWN0aXZlLmNvbnRyb2xsZXI7XG4gICAgICAgICAgaWYgKGNvbnRyb2xsZXIgPT0gJ0AnKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyID0gYXR0cnNbZGlyZWN0aXZlLm5hbWVdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSAkY29udHJvbGxlcihjb250cm9sbGVyLCBsb2NhbHMsIHRydWUsIGRpcmVjdGl2ZS5jb250cm9sbGVyQXMpO1xuXG4gICAgICAgICAgLy8gRm9yIGRpcmVjdGl2ZXMgd2l0aCBlbGVtZW50IHRyYW5zY2x1c2lvbiB0aGUgZWxlbWVudCBpcyBhIGNvbW1lbnQsXG4gICAgICAgICAgLy8gYnV0IGpRdWVyeSAuZGF0YSBkb2Vzbid0IHN1cHBvcnQgYXR0YWNoaW5nIGRhdGEgdG8gY29tbWVudCBub2RlcyBhcyBpdCdzIGhhcmQgdG9cbiAgICAgICAgICAvLyBjbGVhbiB1cCAoaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvODMzNSkuXG4gICAgICAgICAgLy8gSW5zdGVhZCwgd2Ugc2F2ZSB0aGUgY29udHJvbGxlcnMgZm9yIHRoZSBlbGVtZW50IGluIGEgbG9jYWwgaGFzaCBhbmQgYXR0YWNoIHRvIC5kYXRhXG4gICAgICAgICAgLy8gbGF0ZXIsIG9uY2Ugd2UgaGF2ZSB0aGUgYWN0dWFsIGVsZW1lbnQuXG4gICAgICAgICAgZWxlbWVudENvbnRyb2xsZXJzW2RpcmVjdGl2ZS5uYW1lXSA9IGNvbnRyb2xsZXJJbnN0YW5jZTtcbiAgICAgICAgICBpZiAoIWhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5kYXRhKCckJyArIGRpcmVjdGl2ZS5uYW1lICsgJ0NvbnRyb2xsZXInLCBjb250cm9sbGVySW5zdGFuY2UuaW5zdGFuY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudENvbnRyb2xsZXJzO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdmFyIGxpbmtGbiwgaXNvbGF0ZVNjb3BlLCBjb250cm9sbGVyU2NvcGUsIGVsZW1lbnRDb250cm9sbGVycywgdHJhbnNjbHVkZUZuLCAkZWxlbWVudCxcbiAgICAgICAgICAgIGF0dHJzLCByZW1vdmVTY29wZUJpbmRpbmdXYXRjaGVzLCByZW1vdmVDb250cm9sbGVyQmluZGluZ1dhdGNoZXM7XG5cbiAgICAgICAgaWYgKGNvbXBpbGVOb2RlID09PSBsaW5rTm9kZSkge1xuICAgICAgICAgIGF0dHJzID0gdGVtcGxhdGVBdHRycztcbiAgICAgICAgICAkZWxlbWVudCA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRlbGVtZW50ID0ganFMaXRlKGxpbmtOb2RlKTtcbiAgICAgICAgICBhdHRycyA9IG5ldyBBdHRyaWJ1dGVzKCRlbGVtZW50LCB0ZW1wbGF0ZUF0dHJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRyb2xsZXJTY29wZSA9IHNjb3BlO1xuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgaXNvbGF0ZVNjb3BlID0gc2NvcGUuJG5ldyh0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChuZXdTY29wZURpcmVjdGl2ZSkge1xuICAgICAgICAgIGNvbnRyb2xsZXJTY29wZSA9IHNjb3BlLiRwYXJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAvLyB0cmFjayBgYm91bmRUcmFuc2NsdWRlRm5gIHNvIGl0IGNhbiBiZSB1bndyYXBwZWQgaWYgYHRyYW5zY2x1ZGVGbmBcbiAgICAgICAgICAvLyBpcyBsYXRlciBwYXNzZWQgYXMgYHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuYCB0byBgcHVibGljTGlua0ZuYFxuICAgICAgICAgIHRyYW5zY2x1ZGVGbiA9IGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlO1xuICAgICAgICAgIHRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZSA9IGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRyb2xsZXJEaXJlY3RpdmVzKSB7XG4gICAgICAgICAgZWxlbWVudENvbnRyb2xsZXJzID0gc2V0dXBDb250cm9sbGVycygkZWxlbWVudCwgYXR0cnMsIHRyYW5zY2x1ZGVGbiwgY29udHJvbGxlckRpcmVjdGl2ZXMsIGlzb2xhdGVTY29wZSwgc2NvcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSkge1xuICAgICAgICAgIC8vIEluaXRpYWxpemUgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBmb3IgbmV3IGlzb2xhdGUgc2NvcGUgZGlyZWN0aXZlLlxuICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oJGVsZW1lbnQsIGlzb2xhdGVTY29wZSwgdHJ1ZSwgISh0ZW1wbGF0ZURpcmVjdGl2ZSAmJiAodGVtcGxhdGVEaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fFxuICAgICAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLiQkb3JpZ2luYWxEaXJlY3RpdmUpKSk7XG4gICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoJGVsZW1lbnQsIHRydWUpO1xuICAgICAgICAgIGlzb2xhdGVTY29wZS4kJGlzb2xhdGVCaW5kaW5ncyA9XG4gICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncztcbiAgICAgICAgICByZW1vdmVTY29wZUJpbmRpbmdXYXRjaGVzID0gaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKHNjb3BlLCBhdHRycywgaXNvbGF0ZVNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGVTY29wZS4kJGlzb2xhdGVCaW5kaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpO1xuICAgICAgICAgIGlmIChyZW1vdmVTY29wZUJpbmRpbmdXYXRjaGVzKSB7XG4gICAgICAgICAgICBpc29sYXRlU2NvcGUuJG9uKCckZGVzdHJveScsIHJlbW92ZVNjb3BlQmluZGluZ1dhdGNoZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemUgYmluZFRvQ29udHJvbGxlciBiaW5kaW5nc1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIGVsZW1lbnRDb250cm9sbGVycykge1xuICAgICAgICAgIHZhciBjb250cm9sbGVyRGlyZWN0aXZlID0gY29udHJvbGxlckRpcmVjdGl2ZXNbbmFtZV07XG4gICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBlbGVtZW50Q29udHJvbGxlcnNbbmFtZV07XG4gICAgICAgICAgdmFyIGJpbmRpbmdzID0gY29udHJvbGxlckRpcmVjdGl2ZS4kJGJpbmRpbmdzLmJpbmRUb0NvbnRyb2xsZXI7XG5cbiAgICAgICAgICBpZiAoY29udHJvbGxlci5pZGVudGlmaWVyICYmIGJpbmRpbmdzKSB7XG4gICAgICAgICAgICByZW1vdmVDb250cm9sbGVyQmluZGluZ1dhdGNoZXMgPVxuICAgICAgICAgICAgICBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3MoY29udHJvbGxlclNjb3BlLCBhdHRycywgY29udHJvbGxlci5pbnN0YW5jZSwgYmluZGluZ3MsIGNvbnRyb2xsZXJEaXJlY3RpdmUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjb250cm9sbGVyUmVzdWx0ID0gY29udHJvbGxlcigpO1xuICAgICAgICAgIGlmIChjb250cm9sbGVyUmVzdWx0ICE9PSBjb250cm9sbGVyLmluc3RhbmNlKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgY29udHJvbGxlciBjb25zdHJ1Y3RvciBoYXMgYSByZXR1cm4gdmFsdWUsIG92ZXJ3cml0ZSB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgIC8vIGZyb20gc2V0dXBDb250cm9sbGVyc1xuICAgICAgICAgICAgY29udHJvbGxlci5pbnN0YW5jZSA9IGNvbnRyb2xsZXJSZXN1bHQ7XG4gICAgICAgICAgICAkZWxlbWVudC5kYXRhKCckJyArIGNvbnRyb2xsZXJEaXJlY3RpdmUubmFtZSArICdDb250cm9sbGVyJywgY29udHJvbGxlclJlc3VsdCk7XG4gICAgICAgICAgICByZW1vdmVDb250cm9sbGVyQmluZGluZ1dhdGNoZXMgJiYgcmVtb3ZlQ29udHJvbGxlckJpbmRpbmdXYXRjaGVzKCk7XG4gICAgICAgICAgICByZW1vdmVDb250cm9sbGVyQmluZGluZ1dhdGNoZXMgPVxuICAgICAgICAgICAgICBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3MoY29udHJvbGxlclNjb3BlLCBhdHRycywgY29udHJvbGxlci5pbnN0YW5jZSwgYmluZGluZ3MsIGNvbnRyb2xsZXJEaXJlY3RpdmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBSRUxJTktJTkdcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBwcmVMaW5rRm5zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBsaW5rRm4gPSBwcmVMaW5rRm5zW2ldO1xuICAgICAgICAgIGludm9rZUxpbmtGbihsaW5rRm4sXG4gICAgICAgICAgICAgIGxpbmtGbi5pc29sYXRlU2NvcGUgPyBpc29sYXRlU2NvcGUgOiBzY29wZSxcbiAgICAgICAgICAgICAgJGVsZW1lbnQsXG4gICAgICAgICAgICAgIGF0dHJzLFxuICAgICAgICAgICAgICBsaW5rRm4ucmVxdWlyZSAmJiBnZXRDb250cm9sbGVycyhsaW5rRm4uZGlyZWN0aXZlTmFtZSwgbGlua0ZuLnJlcXVpcmUsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpLFxuICAgICAgICAgICAgICB0cmFuc2NsdWRlRm5cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUkVDVVJTSU9OXG4gICAgICAgIC8vIFdlIG9ubHkgcGFzcyB0aGUgaXNvbGF0ZSBzY29wZSwgaWYgdGhlIGlzb2xhdGUgZGlyZWN0aXZlIGhhcyBhIHRlbXBsYXRlLFxuICAgICAgICAvLyBvdGhlcndpc2UgdGhlIGNoaWxkIGVsZW1lbnRzIGRvIG5vdCBiZWxvbmcgdG8gdGhlIGlzb2xhdGUgZGlyZWN0aXZlLlxuICAgICAgICB2YXIgc2NvcGVUb0NoaWxkID0gc2NvcGU7XG4gICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgJiYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS50ZW1wbGF0ZSB8fCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUudGVtcGxhdGVVcmwgPT09IG51bGwpKSB7XG4gICAgICAgICAgc2NvcGVUb0NoaWxkID0gaXNvbGF0ZVNjb3BlO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkTGlua0ZuICYmIGNoaWxkTGlua0ZuKHNjb3BlVG9DaGlsZCwgbGlua05vZGUuY2hpbGROb2RlcywgdW5kZWZpbmVkLCBib3VuZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgLy8gUE9TVExJTktJTkdcbiAgICAgICAgZm9yIChpID0gcG9zdExpbmtGbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBsaW5rRm4gPSBwb3N0TGlua0Zuc1tpXTtcbiAgICAgICAgICBpbnZva2VMaW5rRm4obGlua0ZuLFxuICAgICAgICAgICAgICBsaW5rRm4uaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICAgICBhdHRycyxcbiAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLmRpcmVjdGl2ZU5hbWUsIGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSxcbiAgICAgICAgICAgICAgdHJhbnNjbHVkZUZuXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgaXMgaW5qZWN0ZWQgYXMgYCR0cmFuc2NsdWRlYC5cbiAgICAgICAgLy8gTm90ZTogYWxsIGFyZ3VtZW50cyBhcmUgb3B0aW9uYWwhXG4gICAgICAgIGZ1bmN0aW9uIGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlKHNjb3BlLCBjbG9uZUF0dGFjaEZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgdmFyIHRyYW5zY2x1ZGVDb250cm9sbGVycztcblxuICAgICAgICAgIC8vIE5vIHNjb3BlIHBhc3NlZCBpbjpcbiAgICAgICAgICBpZiAoIWlzU2NvcGUoc2NvcGUpKSB7XG4gICAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gY2xvbmVBdHRhY2hGbjtcbiAgICAgICAgICAgIGNsb25lQXR0YWNoRm4gPSBzY29wZTtcbiAgICAgICAgICAgIHNjb3BlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSkge1xuICAgICAgICAgICAgdHJhbnNjbHVkZUNvbnRyb2xsZXJzID0gZWxlbWVudENvbnRyb2xsZXJzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWZ1dHVyZVBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA/ICRlbGVtZW50LnBhcmVudCgpIDogJGVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBib3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgY2xvbmVBdHRhY2hGbiwgdHJhbnNjbHVkZUNvbnRyb2xsZXJzLCBmdXR1cmVQYXJlbnRFbGVtZW50LCBzY29wZVRvQ2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVwZW5kaW5nIHVwb24gdGhlIGNvbnRleHQgaW4gd2hpY2ggYSBkaXJlY3RpdmUgZmluZHMgaXRzZWxmIGl0IG1pZ2h0IG5lZWQgdG8gaGF2ZSBhIG5ldyBpc29sYXRlZFxuICAgIC8vIG9yIGNoaWxkIHNjb3BlIGNyZWF0ZWQuIEZvciBpbnN0YW5jZTpcbiAgICAvLyAqIGlmIHRoZSBkaXJlY3RpdmUgaGFzIGJlZW4gcHVsbGVkIGludG8gYSB0ZW1wbGF0ZSBiZWNhdXNlIGFub3RoZXIgZGlyZWN0aXZlIHdpdGggYSBoaWdoZXIgcHJpb3JpdHlcbiAgICAvLyBhc2tlZCBmb3IgZWxlbWVudCB0cmFuc2NsdXNpb25cbiAgICAvLyAqIGlmIHRoZSBkaXJlY3RpdmUgaXRzZWxmIGFza3MgZm9yIHRyYW5zY2x1c2lvbiBidXQgaXQgaXMgYXQgdGhlIHJvb3Qgb2YgYSB0ZW1wbGF0ZSBhbmQgdGhlIG9yaWdpbmFsXG4gICAgLy8gZWxlbWVudCB3YXMgcmVwbGFjZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xMjkzNlxuICAgIGZ1bmN0aW9uIG1hcmtEaXJlY3RpdmVTY29wZShkaXJlY3RpdmVzLCBpc29sYXRlU2NvcGUsIG5ld1Njb3BlKSB7XG4gICAgICBmb3IgKHZhciBqID0gMCwgamogPSBkaXJlY3RpdmVzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgZGlyZWN0aXZlc1tqXSA9IGluaGVyaXQoZGlyZWN0aXZlc1tqXSwgeyQkaXNvbGF0ZVNjb3BlOiBpc29sYXRlU2NvcGUsICQkbmV3U2NvcGU6IG5ld1Njb3BlfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbG9va3MgdXAgdGhlIGRpcmVjdGl2ZSBhbmQgZGVjb3JhdGVzIGl0IHdpdGggZXhjZXB0aW9uIGhhbmRsaW5nIGFuZCBwcm9wZXIgcGFyYW1ldGVycy4gV2VcbiAgICAgKiBjYWxsIHRoaXMgdGhlIGJvdW5kRGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgZGlyZWN0aXZlIHRvIGxvb2sgdXAuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIFRoZSBkaXJlY3RpdmUgbXVzdCBiZSBmb3VuZCBpbiBzcGVjaWZpYyBmb3JtYXQuXG4gICAgICogICBTdHJpbmcgY29udGFpbmluZyBhbnkgb2YgdGhlc2VzIGNoYXJhY3RlcnM6XG4gICAgICpcbiAgICAgKiAgICogYEVgOiBlbGVtZW50IG5hbWVcbiAgICAgKiAgICogYEEnOiBhdHRyaWJ1dGVcbiAgICAgKiAgICogYENgOiBjbGFzc1xuICAgICAqICAgKiBgTWA6IGNvbW1lbnRcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBkaXJlY3RpdmUgd2FzIGFkZGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZERpcmVjdGl2ZSh0RGlyZWN0aXZlcywgbmFtZSwgbG9jYXRpb24sIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHN0YXJ0QXR0ck5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEF0dHJOYW1lKSB7XG4gICAgICBpZiAobmFtZSA9PT0gaWdub3JlRGlyZWN0aXZlKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBtYXRjaCA9IG51bGw7XG4gICAgICBpZiAoaGFzRGlyZWN0aXZlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBmb3IgKHZhciBkaXJlY3RpdmUsIGRpcmVjdGl2ZXMgPSAkaW5qZWN0b3IuZ2V0KG5hbWUgKyBTdWZmaXgpLFxuICAgICAgICAgICAgaSA9IDAsIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgICAgICBpZiAoKGlzVW5kZWZpbmVkKG1heFByaW9yaXR5KSB8fCBtYXhQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkgJiZcbiAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0LmluZGV4T2YobG9jYXRpb24pICE9IC0xKSB7XG4gICAgICAgICAgICAgIGlmIChzdGFydEF0dHJOYW1lKSB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlID0gaW5oZXJpdChkaXJlY3RpdmUsIHskJHN0YXJ0OiBzdGFydEF0dHJOYW1lLCAkJGVuZDogZW5kQXR0ck5hbWV9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0RGlyZWN0aXZlcy5wdXNoKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgIG1hdGNoID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogbG9va3MgdXAgdGhlIGRpcmVjdGl2ZSBhbmQgcmV0dXJucyB0cnVlIGlmIGl0IGlzIGEgbXVsdGktZWxlbWVudCBkaXJlY3RpdmUsXG4gICAgICogYW5kIHRoZXJlZm9yZSByZXF1aXJlcyBET00gbm9kZXMgYmV0d2VlbiAtc3RhcnQgYW5kIC1lbmQgbWFya2VycyB0byBiZSBncm91cGVkXG4gICAgICogdG9nZXRoZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGRpcmVjdGl2ZSB3YXMgcmVnaXN0ZXJlZCBhcyBtdWx0aS1lbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KG5hbWUpIHtcbiAgICAgIGlmIChoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGZvciAodmFyIGRpcmVjdGl2ZSwgZGlyZWN0aXZlcyA9ICRpbmplY3Rvci5nZXQobmFtZSArIFN1ZmZpeCksXG4gICAgICAgICAgICBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICAgIGlmIChkaXJlY3RpdmUubXVsdGlFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBlbGVtZW50IGlzIHJlcGxhY2VkIHdpdGggSFRNTCB0ZW1wbGF0ZSB0aGVuIHRoZSBuZXcgYXR0cmlidXRlc1xuICAgICAqIG9uIHRoZSB0ZW1wbGF0ZSBuZWVkIHRvIGJlIG1lcmdlZCB3aXRoIHRoZSBleGlzdGluZyBhdHRyaWJ1dGVzIGluIHRoZSBET00uXG4gICAgICogVGhlIGRlc2lyZWQgZWZmZWN0IGlzIHRvIGhhdmUgYm90aCBvZiB0aGUgYXR0cmlidXRlcyBwcmVzZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRzdCBkZXN0aW5hdGlvbiBhdHRyaWJ1dGVzIChvcmlnaW5hbCBET00pXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHNyYyBzb3VyY2UgYXR0cmlidXRlcyAoZnJvbSB0aGUgZGlyZWN0aXZlIHRlbXBsYXRlKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKGRzdCwgc3JjKSB7XG4gICAgICB2YXIgc3JjQXR0ciA9IHNyYy4kYXR0cixcbiAgICAgICAgICBkc3RBdHRyID0gZHN0LiRhdHRyLFxuICAgICAgICAgICRlbGVtZW50ID0gZHN0LiQkZWxlbWVudDtcblxuICAgICAgLy8gcmVhcHBseSB0aGUgb2xkIGF0dHJpYnV0ZXMgdG8gdGhlIG5ldyBlbGVtZW50XG4gICAgICBmb3JFYWNoKGRzdCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSAhPSAnJCcpIHtcbiAgICAgICAgICBpZiAoc3JjW2tleV0gJiYgc3JjW2tleV0gIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSArPSAoa2V5ID09PSAnc3R5bGUnID8gJzsnIDogJyAnKSArIHNyY1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkc3QuJHNldChrZXksIHZhbHVlLCB0cnVlLCBzcmNBdHRyW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gY29weSB0aGUgbmV3IGF0dHJpYnV0ZXMgb24gdGhlIG9sZCBhdHRycyBvYmplY3RcbiAgICAgIGZvckVhY2goc3JjLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT0gJ2NsYXNzJykge1xuICAgICAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgdmFsdWUpO1xuICAgICAgICAgIGRzdFsnY2xhc3MnXSA9IChkc3RbJ2NsYXNzJ10gPyBkc3RbJ2NsYXNzJ10gKyAnICcgOiAnJykgKyB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0gJ3N0eWxlJykge1xuICAgICAgICAgICRlbGVtZW50LmF0dHIoJ3N0eWxlJywgJGVsZW1lbnQuYXR0cignc3R5bGUnKSArICc7JyArIHZhbHVlKTtcbiAgICAgICAgICBkc3RbJ3N0eWxlJ10gPSAoZHN0WydzdHlsZSddID8gZHN0WydzdHlsZSddICsgJzsnIDogJycpICsgdmFsdWU7XG4gICAgICAgICAgLy8gYGRzdGAgd2lsbCBuZXZlciBjb250YWluIGhhc093blByb3BlcnR5IGFzIERPTSBwYXJzZXIgd29uJ3QgbGV0IGl0LlxuICAgICAgICAgIC8vIFlvdSB3aWxsIGdldCBhbiBcIkludmFsaWRDaGFyYWN0ZXJFcnJvcjogRE9NIEV4Y2VwdGlvbiA1XCIgZXJyb3IgaWYgeW91XG4gICAgICAgICAgLy8gaGF2ZSBhbiBhdHRyaWJ1dGUgbGlrZSBcImhhcy1vd24tcHJvcGVydHlcIiBvciBcImRhdGEtaGFzLW93bi1wcm9wZXJ0eVwiLCBldGMuXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5LmNoYXJBdCgwKSAhPSAnJCcgJiYgIWRzdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICBkc3RBdHRyW2tleV0gPSBzcmNBdHRyW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY29tcGlsZVRlbXBsYXRlVXJsKGRpcmVjdGl2ZXMsICRjb21waWxlTm9kZSwgdEF0dHJzLFxuICAgICAgICAkcm9vdEVsZW1lbnQsIGNoaWxkVHJhbnNjbHVkZUZuLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucywgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgdmFyIGxpbmtRdWV1ZSA9IFtdLFxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLFxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbixcbiAgICAgICAgICBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlID0gJGNvbXBpbGVOb2RlWzBdLFxuICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZSA9IGRpcmVjdGl2ZXMuc2hpZnQoKSxcbiAgICAgICAgICBkZXJpdmVkU3luY0RpcmVjdGl2ZSA9IGluaGVyaXQob3JpZ0FzeW5jRGlyZWN0aXZlLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogbnVsbCwgdHJhbnNjbHVkZTogbnVsbCwgcmVwbGFjZTogbnVsbCwgJCRvcmlnaW5hbERpcmVjdGl2ZTogb3JpZ0FzeW5jRGlyZWN0aXZlXG4gICAgICAgICAgfSksXG4gICAgICAgICAgdGVtcGxhdGVVcmwgPSAoaXNGdW5jdGlvbihvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwpKVxuICAgICAgICAgICAgICA/IG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZVVybCgkY29tcGlsZU5vZGUsIHRBdHRycylcbiAgICAgICAgICAgICAgOiBvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwsXG4gICAgICAgICAgdGVtcGxhdGVOYW1lc3BhY2UgPSBvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVOYW1lc3BhY2U7XG5cbiAgICAgICRjb21waWxlTm9kZS5lbXB0eSgpO1xuXG4gICAgICAkdGVtcGxhdGVSZXF1ZXN0KHRlbXBsYXRlVXJsKVxuICAgICAgICAudGhlbihmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICAgICAgdmFyIGNvbXBpbGVOb2RlLCB0ZW1wVGVtcGxhdGVBdHRycywgJHRlbXBsYXRlLCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuO1xuXG4gICAgICAgICAgY29udGVudCA9IGRlbm9ybWFsaXplVGVtcGxhdGUoY29udGVudCk7XG5cbiAgICAgICAgICBpZiAob3JpZ0FzeW5jRGlyZWN0aXZlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIGlmIChqcUxpdGVJc1RleHROb2RlKGNvbnRlbnQpKSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gcmVtb3ZlQ29tbWVudHMod3JhcFRlbXBsYXRlKHRlbXBsYXRlTmFtZXNwYWNlLCB0cmltKGNvbnRlbnQpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICR0ZW1wbGF0ZVswXTtcblxuICAgICAgICAgICAgaWYgKCR0ZW1wbGF0ZS5sZW5ndGggIT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JyxcbiAgICAgICAgICAgICAgICAgIFwiVGVtcGxhdGUgZm9yIGRpcmVjdGl2ZSAnezB9JyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX1cIixcbiAgICAgICAgICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZS5uYW1lLCB0ZW1wbGF0ZVVybCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRlbXBUZW1wbGF0ZUF0dHJzID0geyRhdHRyOiB7fX07XG4gICAgICAgICAgICByZXBsYWNlV2l0aCgkcm9vdEVsZW1lbnQsICRjb21waWxlTm9kZSwgY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKGNvbXBpbGVOb2RlLCBbXSwgdGVtcFRlbXBsYXRlQXR0cnMpO1xuXG4gICAgICAgICAgICBpZiAoaXNPYmplY3Qob3JpZ0FzeW5jRGlyZWN0aXZlLnNjb3BlKSkge1xuICAgICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgZGlyZWN0aXZlIHRoYXQgY2F1c2VkIHRoZSB0ZW1wbGF0ZSB0byBiZSBsb2FkZWQgYXN5bmMgcmVxdWlyZWRcbiAgICAgICAgICAgICAgLy8gYW4gaXNvbGF0ZSBzY29wZVxuICAgICAgICAgICAgICBtYXJrRGlyZWN0aXZlU2NvcGUodGVtcGxhdGVEaXJlY3RpdmVzLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpcmVjdGl2ZXMgPSB0ZW1wbGF0ZURpcmVjdGl2ZXMuY29uY2F0KGRpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXModEF0dHJzLCB0ZW1wVGVtcGxhdGVBdHRycyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZTtcbiAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKGNvbnRlbnQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpcmVjdGl2ZXMudW5zaGlmdChkZXJpdmVkU3luY0RpcmVjdGl2ZSk7XG5cbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbiA9IGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBjb21waWxlTm9kZSwgdEF0dHJzLFxuICAgICAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiwgJGNvbXBpbGVOb2RlLCBvcmlnQXN5bmNEaXJlY3RpdmUsIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLFxuICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KTtcbiAgICAgICAgICBmb3JFYWNoKCRyb290RWxlbWVudCwgZnVuY3Rpb24obm9kZSwgaSkge1xuICAgICAgICAgICAgaWYgKG5vZGUgPT0gY29tcGlsZU5vZGUpIHtcbiAgICAgICAgICAgICAgJHJvb3RFbGVtZW50W2ldID0gJGNvbXBpbGVOb2RlWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiA9IGNvbXBpbGVOb2RlcygkY29tcGlsZU5vZGVbMF0uY2hpbGROb2RlcywgY2hpbGRUcmFuc2NsdWRlRm4pO1xuXG4gICAgICAgICAgd2hpbGUgKGxpbmtRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBzY29wZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGJlZm9yZVRlbXBsYXRlTGlua05vZGUgPSBsaW5rUXVldWUuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICBsaW5rUm9vdEVsZW1lbnQgPSBsaW5rUXVldWUuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICBib3VuZFRyYW5zY2x1ZGVGbiA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGxpbmtOb2RlID0gJGNvbXBpbGVOb2RlWzBdO1xuXG4gICAgICAgICAgICBpZiAoc2NvcGUuJCRkZXN0cm95ZWQpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAoYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSAhPT0gYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSkge1xuICAgICAgICAgICAgICB2YXIgb2xkQ2xhc3NlcyA9IGJlZm9yZVRlbXBsYXRlTGlua05vZGUuY2xhc3NOYW1lO1xuXG4gICAgICAgICAgICAgIGlmICghKHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgJiZcbiAgICAgICAgICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZS5yZXBsYWNlKSkge1xuICAgICAgICAgICAgICAgIC8vIGl0IHdhcyBjbG9uZWQgdGhlcmVmb3JlIHdlIGhhdmUgdG8gY2xvbmUgYXMgd2VsbC5cbiAgICAgICAgICAgICAgICBsaW5rTm9kZSA9IGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXBsYWNlV2l0aChsaW5rUm9vdEVsZW1lbnQsIGpxTGl0ZShiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlKSwgbGlua05vZGUpO1xuXG4gICAgICAgICAgICAgIC8vIENvcHkgaW4gQ1NTIGNsYXNzZXMgZnJvbSBvcmlnaW5hbCBub2RlXG4gICAgICAgICAgICAgIHNhZmVBZGRDbGFzcyhqcUxpdGUobGlua05vZGUpLCBvbGRDbGFzc2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGUsIGJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBib3VuZFRyYW5zY2x1ZGVGbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuKGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsXG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsaW5rUXVldWUgPSBudWxsO1xuICAgICAgICB9KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGF5ZWROb2RlTGlua0ZuKGlnbm9yZUNoaWxkTGlua0ZuLCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAobGlua1F1ZXVlKSB7XG4gICAgICAgICAgbGlua1F1ZXVlLnB1c2goc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICByb290RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbihhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTb3J0aW5nIGZ1bmN0aW9uIGZvciBib3VuZCBkaXJlY3RpdmVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJ5UHJpb3JpdHkoYSwgYikge1xuICAgICAgdmFyIGRpZmYgPSBiLnByaW9yaXR5IC0gYS5wcmlvcml0eTtcbiAgICAgIGlmIChkaWZmICE9PSAwKSByZXR1cm4gZGlmZjtcbiAgICAgIGlmIChhLm5hbWUgIT09IGIubmFtZSkgcmV0dXJuIChhLm5hbWUgPCBiLm5hbWUpID8gLTEgOiAxO1xuICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzc2VydE5vRHVwbGljYXRlKHdoYXQsIHByZXZpb3VzRGlyZWN0aXZlLCBkaXJlY3RpdmUsIGVsZW1lbnQpIHtcblxuICAgICAgZnVuY3Rpb24gd3JhcE1vZHVsZU5hbWVJZkRlZmluZWQobW9kdWxlTmFtZSkge1xuICAgICAgICByZXR1cm4gbW9kdWxlTmFtZSA/XG4gICAgICAgICAgKCcgKG1vZHVsZTogJyArIG1vZHVsZU5hbWUgKyAnKScpIDpcbiAgICAgICAgICAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZpb3VzRGlyZWN0aXZlKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdtdWx0aWRpcicsICdNdWx0aXBsZSBkaXJlY3RpdmVzIFt7MH17MX0sIHsyfXszfV0gYXNraW5nIGZvciB7NH0gb246IHs1fScsXG4gICAgICAgICAgICBwcmV2aW91c0RpcmVjdGl2ZS5uYW1lLCB3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZChwcmV2aW91c0RpcmVjdGl2ZS4kJG1vZHVsZU5hbWUpLFxuICAgICAgICAgICAgZGlyZWN0aXZlLm5hbWUsIHdyYXBNb2R1bGVOYW1lSWZEZWZpbmVkKGRpcmVjdGl2ZS4kJG1vZHVsZU5hbWUpLCB3aGF0LCBzdGFydGluZ1RhZyhlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgdGV4dCkge1xuICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodGV4dCwgdHJ1ZSk7XG4gICAgICBpZiAoaW50ZXJwb2xhdGVGbikge1xuICAgICAgICBkaXJlY3RpdmVzLnB1c2goe1xuICAgICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZUNvbXBpbGVGbih0ZW1wbGF0ZU5vZGUpIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZU5vZGVQYXJlbnQgPSB0ZW1wbGF0ZU5vZGUucGFyZW50KCksXG4gICAgICAgICAgICAgICAgaGFzQ29tcGlsZVBhcmVudCA9ICEhdGVtcGxhdGVOb2RlUGFyZW50Lmxlbmd0aDtcblxuICAgICAgICAgICAgLy8gV2hlbiB0cmFuc2NsdWRpbmcgYSB0ZW1wbGF0ZSB0aGF0IGhhcyBiaW5kaW5ncyBpbiB0aGUgcm9vdFxuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSBhIHBhcmVudCBhbmQgdGh1cyBuZWVkIHRvIGFkZCB0aGUgY2xhc3MgZHVyaW5nIGxpbmtpbmcgZm4uXG4gICAgICAgICAgICBpZiAoaGFzQ29tcGlsZVBhcmVudCkgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZU5vZGVQYXJlbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGV4dEludGVycG9sYXRlTGlua0ZuKHNjb3BlLCBub2RlKSB7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudCgpO1xuICAgICAgICAgICAgICBpZiAoIWhhc0NvbXBpbGVQYXJlbnQpIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3MocGFyZW50KTtcbiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKHBhcmVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7XG4gICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBub2RlWzBdLm5vZGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHdyYXBUZW1wbGF0ZSh0eXBlLCB0ZW1wbGF0ZSkge1xuICAgICAgdHlwZSA9IGxvd2VyY2FzZSh0eXBlIHx8ICdodG1sJyk7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3N2Zyc6XG4gICAgICBjYXNlICdtYXRoJzpcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgd3JhcHBlci5pbm5lckhUTUwgPSAnPCcgKyB0eXBlICsgJz4nICsgdGVtcGxhdGUgKyAnPC8nICsgdHlwZSArICc+JztcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gZ2V0VHJ1c3RlZENvbnRleHQobm9kZSwgYXR0ck5vcm1hbGl6ZWROYW1lKSB7XG4gICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09IFwic3JjZG9jXCIpIHtcbiAgICAgICAgcmV0dXJuICRzY2UuSFRNTDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBub2RlTmFtZV8obm9kZSk7XG4gICAgICAvLyBtYWN0aW9uW3hsaW5rOmhyZWZdIGNhbiBzb3VyY2UgU1ZHLiAgSXQncyBub3QgbGltaXRlZCB0byA8bWFjdGlvbj4uXG4gICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09IFwieGxpbmtIcmVmXCIgfHxcbiAgICAgICAgICAodGFnID09IFwiZm9ybVwiICYmIGF0dHJOb3JtYWxpemVkTmFtZSA9PSBcImFjdGlvblwiKSB8fFxuICAgICAgICAgICh0YWcgIT0gXCJpbWdcIiAmJiAoYXR0ck5vcm1hbGl6ZWROYW1lID09IFwic3JjXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyTm9ybWFsaXplZE5hbWUgPT0gXCJuZ1NyY1wiKSkpIHtcbiAgICAgICAgcmV0dXJuICRzY2UuUkVTT1VSQ0VfVVJMO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuYW1lLCBhbGxPck5vdGhpbmcpIHtcbiAgICAgIHZhciB0cnVzdGVkQ29udGV4dCA9IGdldFRydXN0ZWRDb250ZXh0KG5vZGUsIG5hbWUpO1xuICAgICAgYWxsT3JOb3RoaW5nID0gQUxMX09SX05PVEhJTkdfQVRUUlNbbmFtZV0gfHwgYWxsT3JOb3RoaW5nO1xuXG4gICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh2YWx1ZSwgdHJ1ZSwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZyk7XG5cbiAgICAgIC8vIG5vIGludGVycG9sYXRpb24gZm91bmQgLT4gaWdub3JlXG4gICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjtcblxuXG4gICAgICBpZiAobmFtZSA9PT0gXCJtdWx0aXBsZVwiICYmIG5vZGVOYW1lXyhub2RlKSA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycihcInNlbG11bHRpXCIsXG4gICAgICAgICAgICBcIkJpbmRpbmcgdG8gdGhlICdtdWx0aXBsZScgYXR0cmlidXRlIGlzIG5vdCBzdXBwb3J0ZWQuIEVsZW1lbnQ6IHswfVwiLFxuICAgICAgICAgICAgc3RhcnRpbmdUYWcobm9kZSkpO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVzLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHByZTogZnVuY3Rpb24gYXR0ckludGVycG9sYXRlUHJlTGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gKGF0dHIuJCRvYnNlcnZlcnMgfHwgKGF0dHIuJCRvYnNlcnZlcnMgPSBjcmVhdGVNYXAoKSkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKEVWRU5UX0hBTkRMRVJfQVRUUl9SRUdFWFAudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vZG9tZXZlbnRzJyxcbiAgICAgICAgICAgICAgICAgICAgICBcIkludGVycG9sYXRpb25zIGZvciBIVE1MIERPTSBldmVudCBhdHRyaWJ1dGVzIGFyZSBkaXNhbGxvd2VkLiAgUGxlYXNlIHVzZSB0aGUgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5nLSB2ZXJzaW9ucyAoc3VjaCBhcyBuZy1jbGljayBpbnN0ZWFkIG9mIG9uY2xpY2spIGluc3RlYWQuXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQgc2luY2UgbGFzdCAkaW50ZXJwb2xhdGUoKWVkXG4gICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gYXR0cltuYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGludGVycG9sYXRlIGFnYWluIHNpbmNlIHRoZSBhdHRyaWJ1dGUgdmFsdWUgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgICAgICAgICAgICAgLy8gKGUuZy4gYnkgYW5vdGhlciBkaXJlY3RpdmUncyBjb21waWxlIGZ1bmN0aW9uKVxuICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIHVuc2V0L2VtcHR5IHZhbHVlcyBtYWtlIGludGVycG9sYXRlRm4gZmFsc3lcbiAgICAgICAgICAgICAgICAgIGludGVycG9sYXRlRm4gPSBuZXdWYWx1ZSAmJiAkaW50ZXJwb2xhdGUobmV3VmFsdWUsIHRydWUsIHRydXN0ZWRDb250ZXh0LCBhbGxPck5vdGhpbmcpO1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBhdHRyaWJ1dGUgd2FzIHVwZGF0ZWQgc28gdGhhdCB0aGVyZSBpcyBubyBpbnRlcnBvbGF0aW9uIGdvaW5nIG9uIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgICAgICAgICAvLyByZWdpc3RlciBhbnkgb2JzZXJ2ZXJzXG4gICAgICAgICAgICAgICAgaWYgKCFpbnRlcnBvbGF0ZUZuKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIGF0dHIgb2JqZWN0IHNvIHRoYXQgaXQncyByZWFkeSBpbiBjYXNlIHdlIG5lZWQgdGhlIHZhbHVlIGZvciBpc29sYXRlXG4gICAgICAgICAgICAgICAgLy8gc2NvcGUgaW5pdGlhbGl6YXRpb24sIG90aGVyd2lzZSB0aGUgdmFsdWUgd291bGQgbm90IGJlIGF2YWlsYWJsZSBmcm9tIGlzb2xhdGVcbiAgICAgICAgICAgICAgICAvLyBkaXJlY3RpdmUncyBsaW5raW5nIGZuIGR1cmluZyBsaW5raW5nIHBoYXNlXG4gICAgICAgICAgICAgICAgYXR0cltuYW1lXSA9IGludGVycG9sYXRlRm4oc2NvcGUpO1xuXG4gICAgICAgICAgICAgICAgKCQkb2JzZXJ2ZXJzW25hbWVdIHx8ICgkJG9ic2VydmVyc1tuYW1lXSA9IFtdKSkuJCRpbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgKGF0dHIuJCRvYnNlcnZlcnMgJiYgYXR0ci4kJG9ic2VydmVyc1tuYW1lXS4kJHNjb3BlIHx8IHNjb3BlKS5cbiAgICAgICAgICAgICAgICAgICR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciBjbGFzcyBhdHRyaWJ1dGUgYWRkaXRpb24gKyByZW1vdmFsXG4gICAgICAgICAgICAgICAgICAgIC8vc28gdGhhdCBjbGFzcyBjaGFuZ2VzIGNhbiB0YXAgaW50byB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vaG9va3MgcHJvdmlkZWQgYnkgdGhlICRhbmltYXRlIHNlcnZpY2UuIEJlIHN1cmUgdG9cbiAgICAgICAgICAgICAgICAgICAgLy9za2lwIGFuaW1hdGlvbnMgd2hlbiB0aGUgZmlyc3QgZGlnZXN0IG9jY3VycyAod2hlblxuICAgICAgICAgICAgICAgICAgICAvL2JvdGggdGhlIG5ldyBhbmQgdGhlIG9sZCB2YWx1ZXMgYXJlIHRoZSBzYW1lKSBzaW5jZVxuICAgICAgICAgICAgICAgICAgICAvL3RoZSBDU1MgY2xhc3NlcyBhcmUgdGhlIG5vbi1pbnRlcnBvbGF0ZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnY2xhc3MnICYmIG5ld1ZhbHVlICE9IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0ci4kdXBkYXRlQ2xhc3MobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBzcGVjaWFsIGpxTGl0ZS5yZXBsYWNlV2l0aCwgd2hpY2ggY2FuIHJlcGxhY2UgaXRlbXMgd2hpY2hcbiAgICAgKiBoYXZlIG5vIHBhcmVudHMsIHByb3ZpZGVkIHRoYXQgdGhlIGNvbnRhaW5pbmcganFMaXRlIGNvbGxlY3Rpb24gaXMgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0pxTGl0ZT19ICRyb290RWxlbWVudCBUaGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlLiBVc2VkIHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcm9vdCBvZiB0aGUgdHJlZS5cbiAgICAgKiBAcGFyYW0ge0pxTGl0ZX0gZWxlbWVudHNUb1JlbW92ZSBUaGUganFMaXRlIGVsZW1lbnQgd2hpY2ggd2UgYXJlIGdvaW5nIHRvIHJlcGxhY2UuIFdlIGtlZXBcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2hlbGwsIGJ1dCByZXBsYWNlIGl0cyBET00gbm9kZSByZWZlcmVuY2UuXG4gICAgICogQHBhcmFtIHtOb2RlfSBuZXdOb2RlIFRoZSBuZXcgRE9NIG5vZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCBlbGVtZW50c1RvUmVtb3ZlLCBuZXdOb2RlKSB7XG4gICAgICB2YXIgZmlyc3RFbGVtZW50VG9SZW1vdmUgPSBlbGVtZW50c1RvUmVtb3ZlWzBdLFxuICAgICAgICAgIHJlbW92ZUNvdW50ID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGgsXG4gICAgICAgICAgcGFyZW50ID0gZmlyc3RFbGVtZW50VG9SZW1vdmUucGFyZW50Tm9kZSxcbiAgICAgICAgICBpLCBpaTtcblxuICAgICAgaWYgKCRyb290RWxlbWVudCkge1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9ICRyb290RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgaWYgKCRyb290RWxlbWVudFtpXSA9PSBmaXJzdEVsZW1lbnRUb1JlbW92ZSkge1xuICAgICAgICAgICAgJHJvb3RFbGVtZW50W2krK10gPSBuZXdOb2RlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGksIGoyID0gaiArIHJlbW92ZUNvdW50IC0gMSxcbiAgICAgICAgICAgICAgICAgICAgIGpqID0gJHJvb3RFbGVtZW50Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgaiA8IGpqOyBqKyssIGoyKyspIHtcbiAgICAgICAgICAgICAgaWYgKGoyIDwgamopIHtcbiAgICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbal0gPSAkcm9vdEVsZW1lbnRbajJdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkcm9vdEVsZW1lbnRbal07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRyb290RWxlbWVudC5sZW5ndGggLT0gcmVtb3ZlQ291bnQgLSAxO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgcmVwbGFjZWQgZWxlbWVudCBpcyBhbHNvIHRoZSBqUXVlcnkgLmNvbnRleHQgdGhlbiByZXBsYWNlIGl0XG4gICAgICAgICAgICAvLyAuY29udGV4dCBpcyBhIGRlcHJlY2F0ZWQgalF1ZXJ5IGFwaSwgc28gd2Ugc2hvdWxkIHNldCBpdCBvbmx5IHdoZW4galF1ZXJ5IHNldCBpdFxuICAgICAgICAgICAgLy8gaHR0cDovL2FwaS5qcXVlcnkuY29tL2NvbnRleHQvXG4gICAgICAgICAgICBpZiAoJHJvb3RFbGVtZW50LmNvbnRleHQgPT09IGZpcnN0RWxlbWVudFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAgICRyb290RWxlbWVudC5jb250ZXh0ID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgZmlyc3RFbGVtZW50VG9SZW1vdmUpO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPKHBlcmYpOiB3aGF0J3MgdGhpcyBkb2N1bWVudCBmcmFnbWVudCBmb3I/IGlzIGl0IG5lZWRlZD8gY2FuIHdlIGF0IGxlYXN0IHJldXNlIGl0P1xuICAgICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZmlyc3RFbGVtZW50VG9SZW1vdmUpO1xuXG4gICAgICBpZiAoanFMaXRlLmhhc0RhdGEoZmlyc3RFbGVtZW50VG9SZW1vdmUpKSB7XG4gICAgICAgIC8vIENvcHkgb3ZlciB1c2VyIGRhdGEgKHRoYXQgaW5jbHVkZXMgQW5ndWxhcidzICRzY29wZSBldGMuKS4gRG9uJ3QgY29weSBwcml2YXRlXG4gICAgICAgIC8vIGRhdGEgaGVyZSBiZWNhdXNlIHRoZXJlJ3Mgbm8gcHVibGljIGludGVyZmFjZSBpbiBqUXVlcnkgdG8gZG8gdGhhdCBhbmQgY29weWluZyBvdmVyXG4gICAgICAgIC8vIGV2ZW50IGxpc3RlbmVycyAod2hpY2ggaXMgdGhlIG1haW4gdXNlIG9mIHByaXZhdGUgZGF0YSkgd291bGRuJ3Qgd29yayBhbnl3YXkuXG4gICAgICAgIGpxTGl0ZS5kYXRhKG5ld05vZGUsIGpxTGl0ZS5kYXRhKGZpcnN0RWxlbWVudFRvUmVtb3ZlKSk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGRhdGEgb2YgdGhlIHJlcGxhY2VkIGVsZW1lbnQuIFdlIGNhbm5vdCBqdXN0IGNhbGwgLnJlbW92ZSgpXG4gICAgICAgIC8vIG9uIHRoZSBlbGVtZW50IGl0IHNpbmNlIHRoYXQgd291bGQgZGVhbGxvY2F0ZSBzY29wZSB0aGF0IGlzIG5lZWRlZFxuICAgICAgICAvLyBmb3IgdGhlIG5ldyBub2RlLiBJbnN0ZWFkLCByZW1vdmUgdGhlIGRhdGEgXCJtYW51YWxseVwiLlxuICAgICAgICBpZiAoIWpRdWVyeSkge1xuICAgICAgICAgIGRlbGV0ZSBqcUxpdGUuY2FjaGVbZmlyc3RFbGVtZW50VG9SZW1vdmVbanFMaXRlLmV4cGFuZG9dXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBqUXVlcnkgMi54IGRvZXNuJ3QgZXhwb3NlIHRoZSBkYXRhIHN0b3JhZ2UuIFVzZSBqUXVlcnkuY2xlYW5EYXRhIHRvIGNsZWFuIHVwIGFmdGVyXG4gICAgICAgICAgLy8gdGhlIHJlcGxhY2VkIGVsZW1lbnQuIFRoZSBjbGVhbkRhdGEgdmVyc2lvbiBtb25rZXktcGF0Y2hlZCBieSBBbmd1bGFyIHdvdWxkIGNhdXNlXG4gICAgICAgICAgLy8gdGhlIHNjb3BlIHRvIGJlIHRyYXNoZWQgYW5kIHdlIGRvIG5lZWQgdGhlIHZlcnkgc2FtZSBzY29wZSB0byB3b3JrIHdpdGggdGhlIG5ld1xuICAgICAgICAgIC8vIGVsZW1lbnQuIEhvd2V2ZXIsIHdlIGNhbm5vdCBqdXN0IGNhY2hlIHRoZSBub24tcGF0Y2hlZCB2ZXJzaW9uIGFuZCB1c2UgaXQgaGVyZSBhc1xuICAgICAgICAgIC8vIHRoYXQgd291bGQgYnJlYWsgaWYgYW5vdGhlciBsaWJyYXJ5IHBhdGNoZXMgdGhlIG1ldGhvZCBhZnRlciBBbmd1bGFyIGRvZXMgKG9uZVxuICAgICAgICAgIC8vIGV4YW1wbGUgaXMgalF1ZXJ5IFVJKS4gSW5zdGVhZCwgc2V0IGEgZmxhZyBpbmRpY2F0aW5nIHNjb3BlIGRlc3Ryb3lpbmcgc2hvdWxkIGJlXG4gICAgICAgICAgLy8gc2tpcHBlZCB0aGlzIG9uZSB0aW1lLlxuICAgICAgICAgIHNraXBEZXN0cm95T25OZXh0SlF1ZXJ5Q2xlYW5EYXRhID0gdHJ1ZTtcbiAgICAgICAgICBqUXVlcnkuY2xlYW5EYXRhKFtmaXJzdEVsZW1lbnRUb1JlbW92ZV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGsgPSAxLCBrayA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoOyBrIDwga2s7IGsrKykge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGVsZW1lbnRzVG9SZW1vdmVba107XG4gICAgICAgIGpxTGl0ZShlbGVtZW50KS5yZW1vdmUoKTsgLy8gbXVzdCBkbyB0aGlzIHdheSB0byBjbGVhbiB1cCBleHBhbmRvXG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICBkZWxldGUgZWxlbWVudHNUb1JlbW92ZVtrXTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudHNUb1JlbW92ZVswXSA9IG5ld05vZGU7XG4gICAgICBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aCA9IDE7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjbG9uZUFuZEFubm90YXRlRm4oZm4sIGFubm90YXRpb24pIHtcbiAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oKSB7IHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9LCBmbiwgYW5ub3RhdGlvbik7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbnZva2VMaW5rRm4obGlua0ZuLCBzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsaW5rRm4oc2NvcGUsICRlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBTZXQgdXAgJHdhdGNoZXMgZm9yIGlzb2xhdGUgc2NvcGUgYW5kIGNvbnRyb2xsZXIgYmluZGluZ3MuIFRoaXMgcHJvY2Vzc1xuICAgIC8vIG9ubHkgb2NjdXJzIGZvciBpc29sYXRlIHNjb3BlcyBhbmQgbmV3IHNjb3BlcyB3aXRoIGNvbnRyb2xsZXJBcy5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3Moc2NvcGUsIGF0dHJzLCBkZXN0aW5hdGlvbiwgYmluZGluZ3MsIGRpcmVjdGl2ZSkge1xuICAgICAgdmFyIHJlbW92ZVdhdGNoQ29sbGVjdGlvbiA9IFtdO1xuICAgICAgZm9yRWFjaChiaW5kaW5ncywgZnVuY3Rpb24oZGVmaW5pdGlvbiwgc2NvcGVOYW1lKSB7XG4gICAgICAgIHZhciBhdHRyTmFtZSA9IGRlZmluaXRpb24uYXR0ck5hbWUsXG4gICAgICAgIG9wdGlvbmFsID0gZGVmaW5pdGlvbi5vcHRpb25hbCxcbiAgICAgICAgbW9kZSA9IGRlZmluaXRpb24ubW9kZSwgLy8gQCwgPSwgb3IgJlxuICAgICAgICBsYXN0VmFsdWUsXG4gICAgICAgIHBhcmVudEdldCwgcGFyZW50U2V0LCBjb21wYXJlO1xuXG4gICAgICAgIHN3aXRjaCAobW9kZSkge1xuXG4gICAgICAgICAgY2FzZSAnQCc6XG4gICAgICAgICAgICBpZiAoIW9wdGlvbmFsICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKGF0dHJzLCBhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXSA9IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKGF0dHJOYW1lLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF0dHJzLiQkb2JzZXJ2ZXJzW2F0dHJOYW1lXS4kJHNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgICBpZiAoaXNTdHJpbmcoYXR0cnNbYXR0ck5hbWVdKSkge1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgYXR0cmlidXRlIGhhcyBiZWVuIHByb3ZpZGVkIHRoZW4gd2UgdHJpZ2dlciBhbiBpbnRlcnBvbGF0aW9uIHRvIGVuc3VyZVxuICAgICAgICAgICAgICAvLyB0aGUgdmFsdWUgaXMgdGhlcmUgZm9yIHVzZSBpbiB0aGUgbGluayBmblxuICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gJGludGVycG9sYXRlKGF0dHJzW2F0dHJOYW1lXSkoc2NvcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICc9JzpcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChhdHRycywgYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgIGlmIChvcHRpb25hbCkgYnJlYWs7XG4gICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSA9IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25hbCAmJiAhYXR0cnNbYXR0ck5hbWVdKSBicmVhaztcblxuICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICAgICAgICBpZiAocGFyZW50R2V0LmxpdGVyYWwpIHtcbiAgICAgICAgICAgICAgY29tcGFyZSA9IGVxdWFscztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbXBhcmUgPSBmdW5jdGlvbihhLCBiKSB7IHJldHVybiBhID09PSBiIHx8IChhICE9PSBhICYmIGIgIT09IGIpOyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50U2V0ID0gcGFyZW50R2V0LmFzc2lnbiB8fCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgLy8gcmVzZXQgdGhlIGNoYW5nZSwgb3Igd2Ugd2lsbCB0aHJvdyB0aGlzIGV4Y2VwdGlvbiBvbiBldmVyeSAkZGlnZXN0XG4gICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQoc2NvcGUpO1xuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9uYXNzaWduJyxcbiAgICAgICAgICAgICAgICAgIFwiRXhwcmVzc2lvbiAnezB9JyB1c2VkIHdpdGggZGlyZWN0aXZlICd7MX0nIGlzIG5vbi1hc3NpZ25hYmxlIVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnNbYXR0ck5hbWVdLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGFzdFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudEdldChzY29wZSk7XG4gICAgICAgICAgICB2YXIgcGFyZW50VmFsdWVXYXRjaCA9IGZ1bmN0aW9uIHBhcmVudFZhbHVlV2F0Y2gocGFyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBkZXN0aW5hdGlvbltzY29wZU5hbWVdKSkge1xuICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBvdXQgb2Ygc3luYyBhbmQgbmVlZCB0byBjb3B5XG4gICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBwYXJlbnQgY2hhbmdlZCBhbmQgaXQgaGFzIHByZWNlZGVuY2VcbiAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBwYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHBhcmVudCBjYW4gYmUgYXNzaWduZWQgdGhlbiBkbyBzb1xuICAgICAgICAgICAgICAgICAgcGFyZW50U2V0KHNjb3BlLCBwYXJlbnRWYWx1ZSA9IGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gbGFzdFZhbHVlID0gcGFyZW50VmFsdWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcGFyZW50VmFsdWVXYXRjaC4kc3RhdGVmdWwgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIHJlbW92ZVdhdGNoO1xuICAgICAgICAgICAgaWYgKGRlZmluaXRpb24uY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICByZW1vdmVXYXRjaCA9IHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oYXR0cnNbYXR0ck5hbWVdLCBwYXJlbnRWYWx1ZVdhdGNoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlbW92ZVdhdGNoID0gc2NvcGUuJHdhdGNoKCRwYXJzZShhdHRyc1thdHRyTmFtZV0sIHBhcmVudFZhbHVlV2F0Y2gpLCBudWxsLCBwYXJlbnRHZXQubGl0ZXJhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1vdmVXYXRjaENvbGxlY3Rpb24ucHVzaChyZW1vdmVXYXRjaCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJyYnOlxuICAgICAgICAgICAgLy8gRG9uJ3QgYXNzaWduIE9iamVjdC5wcm90b3R5cGUgbWV0aG9kIHRvIHNjb3BlXG4gICAgICAgICAgICBwYXJlbnRHZXQgPSBhdHRycy5oYXNPd25Qcm9wZXJ0eShhdHRyTmFtZSkgPyAkcGFyc2UoYXR0cnNbYXR0ck5hbWVdKSA6IG5vb3A7XG5cbiAgICAgICAgICAgIC8vIERvbid0IGFzc2lnbiBub29wIHRvIGRlc3RpbmF0aW9uIGlmIGV4cHJlc3Npb24gaXMgbm90IHZhbGlkXG4gICAgICAgICAgICBpZiAocGFyZW50R2V0ID09PSBub29wICYmIG9wdGlvbmFsKSBicmVhaztcblxuICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgICAgICAgICAgICByZXR1cm4gcGFyZW50R2V0KHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5sZW5ndGggJiYgZnVuY3Rpb24gcmVtb3ZlV2F0Y2hlcygpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVtb3ZlV2F0Y2hDb2xsZWN0aW9uLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICByZW1vdmVXYXRjaENvbGxlY3Rpb25baV0oKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1dO1xufVxuXG52YXIgUFJFRklYX1JFR0VYUCA9IC9eKCg/Onh8ZGF0YSlbXFw6XFwtX10pL2k7XG4vKipcbiAqIENvbnZlcnRzIGFsbCBhY2NlcHRlZCBkaXJlY3RpdmVzIGZvcm1hdCBpbnRvIHByb3BlciBkaXJlY3RpdmUgbmFtZS5cbiAqIEBwYXJhbSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gKi9cbmZ1bmN0aW9uIGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKSB7XG4gIHJldHVybiBjYW1lbENhc2UobmFtZS5yZXBsYWNlKFBSRUZJWF9SRUdFWFAsICcnKSk7XG59XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHNoYXJlZCBvYmplY3QgYmV0d2VlbiBkaXJlY3RpdmUgY29tcGlsZSAvIGxpbmtpbmcgZnVuY3Rpb25zIHdoaWNoIGNvbnRhaW5zIG5vcm1hbGl6ZWQgRE9NXG4gKiBlbGVtZW50IGF0dHJpYnV0ZXMuIFRoZSB2YWx1ZXMgcmVmbGVjdCBjdXJyZW50IGJpbmRpbmcgc3RhdGUgYHt7IH19YC4gVGhlIG5vcm1hbGl6YXRpb24gaXNcbiAqIG5lZWRlZCBzaW5jZSBhbGwgb2YgdGhlc2UgYXJlIHRyZWF0ZWQgYXMgZXF1aXZhbGVudCBpbiBBbmd1bGFyOlxuICpcbiAqIGBgYFxuICogICAgPHNwYW4gbmc6YmluZD1cImFcIiBuZy1iaW5kPVwiYVwiIGRhdGEtbmctYmluZD1cImFcIiB4LW5nLWJpbmQ9XCJhXCI+XG4gKiBgYGBcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm9wZXJ0eVxuICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGF0dHJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgbWFwIG9mIERPTSBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lcyB0byB0aGUgbm9ybWFsaXplZCBuYW1lLiBUaGlzIGlzXG4gKiBuZWVkZWQgdG8gZG8gcmV2ZXJzZSBsb29rdXAgZnJvbSBub3JtYWxpemVkIG5hbWUgYmFjayB0byBhY3R1YWwgbmFtZS5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHNldFxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNldCBET00gZWxlbWVudCBhdHRyaWJ1dGUgdmFsdWUuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5vcm1hbGl6ZWQgZWxlbWVudCBhdHRyaWJ1dGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gbW9kaWZ5LiBUaGUgbmFtZSBpc1xuICogICAgICAgICAgcmV2ZXJzZS10cmFuc2xhdGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGF0dHIgJGF0dHJ9XG4gKiAgICAgICAgICBwcm9wZXJ0eSB0byB0aGUgb3JpZ2luYWwgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byBzZXQgdGhlIGF0dHJpYnV0ZSB0by4gVGhlIHZhbHVlIGNhbiBiZSBhbiBpbnRlcnBvbGF0ZWQgc3RyaW5nLlxuICovXG5cblxuXG4vKipcbiAqIENsb3N1cmUgY29tcGlsZXIgdHlwZSBpbmZvcm1hdGlvblxuICovXG5cbmZ1bmN0aW9uIG5vZGVzZXRMaW5raW5nRm4oXG4gIC8qIGFuZ3VsYXIuU2NvcGUgKi8gc2NvcGUsXG4gIC8qIE5vZGVMaXN0ICovIG5vZGVMaXN0LFxuICAvKiBFbGVtZW50ICovIHJvb3RFbGVtZW50LFxuICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi8gYm91bmRUcmFuc2NsdWRlRm5cbikge31cblxuZnVuY3Rpb24gZGlyZWN0aXZlTGlua2luZ0ZuKFxuICAvKiBub2Rlc2V0TGlua2luZ0ZuICovIG5vZGVzZXRMaW5raW5nRm4sXG4gIC8qIGFuZ3VsYXIuU2NvcGUgKi8gc2NvcGUsXG4gIC8qIE5vZGUgKi8gbm9kZSxcbiAgLyogRWxlbWVudCAqLyByb290RWxlbWVudCxcbiAgLyogZnVuY3Rpb24oRnVuY3Rpb24pICovIGJvdW5kVHJhbnNjbHVkZUZuXG4pIHt9XG5cbmZ1bmN0aW9uIHRva2VuRGlmZmVyZW5jZShzdHIxLCBzdHIyKSB7XG4gIHZhciB2YWx1ZXMgPSAnJyxcbiAgICAgIHRva2VuczEgPSBzdHIxLnNwbGl0KC9cXHMrLyksXG4gICAgICB0b2tlbnMyID0gc3RyMi5zcGxpdCgvXFxzKy8pO1xuXG4gIG91dGVyOlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnMxW2ldO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdG9rZW5zMi5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKHRva2VuID09IHRva2VuczJbal0pIGNvbnRpbnVlIG91dGVyO1xuICAgIH1cbiAgICB2YWx1ZXMgKz0gKHZhbHVlcy5sZW5ndGggPiAwID8gJyAnIDogJycpICsgdG9rZW47XG4gIH1cbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ29tbWVudHMoanFOb2Rlcykge1xuICBqcU5vZGVzID0ganFMaXRlKGpxTm9kZXMpO1xuICB2YXIgaSA9IGpxTm9kZXMubGVuZ3RoO1xuXG4gIGlmIChpIDw9IDEpIHtcbiAgICByZXR1cm4ganFOb2RlcztcbiAgfVxuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgbm9kZSA9IGpxTm9kZXNbaV07XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UKSB7XG4gICAgICBzcGxpY2UuY2FsbChqcU5vZGVzLCBpLCAxKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGpxTm9kZXM7XG59XG5cbnZhciAkY29udHJvbGxlck1pbkVyciA9IG1pbkVycignJGNvbnRyb2xsZXInKTtcblxuXG52YXIgQ05UUkxfUkVHID0gL14oXFxTKykoXFxzK2FzXFxzKyhcXHcrKSk/JC87XG5mdW5jdGlvbiBpZGVudGlmaWVyRm9yQ29udHJvbGxlcihjb250cm9sbGVyLCBpZGVudCkge1xuICBpZiAoaWRlbnQgJiYgaXNTdHJpbmcoaWRlbnQpKSByZXR1cm4gaWRlbnQ7XG4gIGlmIChpc1N0cmluZyhjb250cm9sbGVyKSkge1xuICAgIHZhciBtYXRjaCA9IENOVFJMX1JFRy5leGVjKGNvbnRyb2xsZXIpO1xuICAgIGlmIChtYXRjaCkgcmV0dXJuIG1hdGNoWzNdO1xuICB9XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRjb250cm9sbGVyUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIHtAbGluayBuZy4kY29udHJvbGxlciAkY29udHJvbGxlciBzZXJ2aWNlfSBpcyB1c2VkIGJ5IEFuZ3VsYXIgdG8gY3JlYXRlIG5ld1xuICogY29udHJvbGxlcnMuXG4gKlxuICogVGhpcyBwcm92aWRlciBhbGxvd3MgY29udHJvbGxlciByZWdpc3RyYXRpb24gdmlhIHRoZVxuICoge0BsaW5rIG5nLiRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXIgcmVnaXN0ZXJ9IG1ldGhvZC5cbiAqL1xuZnVuY3Rpb24gJENvbnRyb2xsZXJQcm92aWRlcigpIHtcbiAgdmFyIGNvbnRyb2xsZXJzID0ge30sXG4gICAgICBnbG9iYWxzID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlclxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgQ29udHJvbGxlciBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGNvbnRyb2xsZXJzIHdoZXJlIHRoZSBrZXlzIGFyZVxuICAgKiAgICB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjb25zdHJ1Y3RvcnMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZm4gKG9wdGlvbmFsbHkgZGVjb3JhdGVkIHdpdGggRElcbiAgICogICAgYW5ub3RhdGlvbnMgaW4gdGhlIGFycmF5IG5vdGF0aW9uKS5cbiAgICovXG4gIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lLCBjb25zdHJ1Y3Rvcikge1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdjb250cm9sbGVyJyk7XG4gICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICBleHRlbmQoY29udHJvbGxlcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250cm9sbGVyc1tuYW1lXSA9IGNvbnN0cnVjdG9yO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFsc1xuICAgKiBAZGVzY3JpcHRpb24gSWYgY2FsbGVkLCBhbGxvd3MgYCRjb250cm9sbGVyYCB0byBmaW5kIGNvbnRyb2xsZXIgY29uc3RydWN0b3JzIG9uIGB3aW5kb3dgXG4gICAqL1xuICB0aGlzLmFsbG93R2xvYmFscyA9IGZ1bmN0aW9uKCkge1xuICAgIGdsb2JhbHMgPSB0cnVlO1xuICB9O1xuXG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRpbmplY3RvciwgJHdpbmRvdykge1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkY29udHJvbGxlclxuICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBjb25zdHJ1Y3RvciBJZiBjYWxsZWQgd2l0aCBhIGZ1bmN0aW9uIHRoZW4gaXQncyBjb25zaWRlcmVkIHRvIGJlIHRoZVxuICAgICAqICAgIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIE90aGVyd2lzZSBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgYSBzdHJpbmcgd2hpY2ggaXMgdXNlZFxuICAgICAqICAgIHRvIHJldHJpZXZlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIHVzaW5nIHRoZSBmb2xsb3dpbmcgc3RlcHM6XG4gICAgICpcbiAgICAgKiAgICAqIGNoZWNrIGlmIGEgY29udHJvbGxlciB3aXRoIGdpdmVuIG5hbWUgaXMgcmVnaXN0ZXJlZCB2aWEgYCRjb250cm9sbGVyUHJvdmlkZXJgXG4gICAgICogICAgKiBjaGVjayBpZiBldmFsdWF0aW5nIHRoZSBzdHJpbmcgb24gdGhlIGN1cnJlbnQgc2NvcGUgcmV0dXJucyBhIGNvbnN0cnVjdG9yXG4gICAgICogICAgKiBpZiAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFscywgY2hlY2sgYHdpbmRvd1tjb25zdHJ1Y3Rvcl1gIG9uIHRoZSBnbG9iYWxcbiAgICAgKiAgICAgIGB3aW5kb3dgIG9iamVjdCAobm90IHJlY29tbWVuZGVkKVxuICAgICAqXG4gICAgICogICAgVGhlIHN0cmluZyBjYW4gdXNlIHRoZSBgY29udHJvbGxlciBhcyBwcm9wZXJ0eWAgc3ludGF4LCB3aGVyZSB0aGUgY29udHJvbGxlciBpbnN0YW5jZSBpcyBwdWJsaXNoZWRcbiAgICAgKiAgICBhcyB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IG9uIHRoZSBgc2NvcGVgOyB0aGUgYHNjb3BlYCBtdXN0IGJlIGluamVjdGVkIGludG8gYGxvY2Fsc2AgcGFyYW0gZm9yIHRoaXNcbiAgICAgKiAgICB0byB3b3JrIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhbHMgSW5qZWN0aW9uIGxvY2FscyBmb3IgQ29udHJvbGxlci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEluc3RhbmNlIG9mIGdpdmVuIGNvbnRyb2xsZXIuXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBgJGNvbnRyb2xsZXJgIHNlcnZpY2UgaXMgcmVzcG9uc2libGUgZm9yIGluc3RhbnRpYXRpbmcgY29udHJvbGxlcnMuXG4gICAgICpcbiAgICAgKiBJdCdzIGp1c3QgYSBzaW1wbGUgY2FsbCB0byB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSwgYnV0IGV4dHJhY3RlZCBpbnRvXG4gICAgICogYSBzZXJ2aWNlLCBzbyB0aGF0IG9uZSBjYW4gb3ZlcnJpZGUgdGhpcyBzZXJ2aWNlIHdpdGggW0JDIHZlcnNpb25dKGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzE2NDk3ODgpLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbihleHByZXNzaW9uLCBsb2NhbHMsIGxhdGVyLCBpZGVudCkge1xuICAgICAgLy8gUFJJVkFURSBBUEk6XG4gICAgICAvLyAgIHBhcmFtIGBsYXRlcmAgLS0tIGluZGljYXRlcyB0aGF0IHRoZSBjb250cm9sbGVyJ3MgY29uc3RydWN0b3IgaXMgaW52b2tlZCBhdCBhIGxhdGVyIHRpbWUuXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIElmIHRydWUsICRjb250cm9sbGVyIHdpbGwgYWxsb2NhdGUgdGhlIG9iamVjdCB3aXRoIHRoZSBjb3JyZWN0XG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHByb3RvdHlwZSBjaGFpbiwgYnV0IHdpbGwgbm90IGludm9rZSB0aGUgY29udHJvbGxlciB1bnRpbCBhIHJldHVybmVkXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrIGlzIGludm9rZWQuXG4gICAgICAvLyAgIHBhcmFtIGBpZGVudGAgLS0tIEFuIG9wdGlvbmFsIGxhYmVsIHdoaWNoIG92ZXJyaWRlcyB0aGUgbGFiZWwgcGFyc2VkIGZyb20gdGhlIGNvbnRyb2xsZXJcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbiwgaWYgYW55LlxuICAgICAgdmFyIGluc3RhbmNlLCBtYXRjaCwgY29uc3RydWN0b3IsIGlkZW50aWZpZXI7XG4gICAgICBsYXRlciA9IGxhdGVyID09PSB0cnVlO1xuICAgICAgaWYgKGlkZW50ICYmIGlzU3RyaW5nKGlkZW50KSkge1xuICAgICAgICBpZGVudGlmaWVyID0gaWRlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZyhleHByZXNzaW9uKSkge1xuICAgICAgICBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goQ05UUkxfUkVHKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgIHRocm93ICRjb250cm9sbGVyTWluRXJyKCdjdHJsZm10JyxcbiAgICAgICAgICAgIFwiQmFkbHkgZm9ybWVkIGNvbnRyb2xsZXIgc3RyaW5nICd7MH0nLiBcIiArXG4gICAgICAgICAgICBcIk11c3QgbWF0Y2ggYF9fbmFtZV9fIGFzIF9faWRfX2Agb3IgYF9fbmFtZV9fYC5cIiwgZXhwcmVzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3RydWN0b3IgPSBtYXRjaFsxXSxcbiAgICAgICAgaWRlbnRpZmllciA9IGlkZW50aWZpZXIgfHwgbWF0Y2hbM107XG4gICAgICAgIGV4cHJlc3Npb24gPSBjb250cm9sbGVycy5oYXNPd25Qcm9wZXJ0eShjb25zdHJ1Y3RvcilcbiAgICAgICAgICAgID8gY29udHJvbGxlcnNbY29uc3RydWN0b3JdXG4gICAgICAgICAgICA6IGdldHRlcihsb2NhbHMuJHNjb3BlLCBjb25zdHJ1Y3RvciwgdHJ1ZSkgfHxcbiAgICAgICAgICAgICAgICAoZ2xvYmFscyA/IGdldHRlcigkd2luZG93LCBjb25zdHJ1Y3RvciwgdHJ1ZSkgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgIGFzc2VydEFyZ0ZuKGV4cHJlc3Npb24sIGNvbnN0cnVjdG9yLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxhdGVyKSB7XG4gICAgICAgIC8vIEluc3RhbnRpYXRlIGNvbnRyb2xsZXIgbGF0ZXI6XG4gICAgICAgIC8vIFRoaXMgbWFjaGluZXJ5IGlzIHVzZWQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBvYmplY3QgYmVmb3JlIGNhbGxpbmcgdGhlXG4gICAgICAgIC8vIGNvbnRyb2xsZXIncyBjb25zdHJ1Y3RvciBpdHNlbGYuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoaXMgYWxsb3dzIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXIgYmVmb3JlIHRoZSBjb25zdHJ1Y3RvciBpc1xuICAgICAgICAvLyBpbnZva2VkLiBQcmltYXJpbHksIHRoaXMgaXMgdXNlZCBmb3IgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBpbiAkY29tcGlsZS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBmZWF0dXJlIGlzIG5vdCBpbnRlbmRlZCBmb3IgdXNlIGJ5IGFwcGxpY2F0aW9ucywgYW5kIGlzIHRodXMgbm90IGRvY3VtZW50ZWRcbiAgICAgICAgLy8gcHVibGljbHkuXG4gICAgICAgIC8vIE9iamVjdCBjcmVhdGlvbjogaHR0cDovL2pzcGVyZi5jb20vY3JlYXRlLWNvbnN0cnVjdG9yLzJcbiAgICAgICAgdmFyIGNvbnRyb2xsZXJQcm90b3R5cGUgPSAoaXNBcnJheShleHByZXNzaW9uKSA/XG4gICAgICAgICAgZXhwcmVzc2lvbltleHByZXNzaW9uLmxlbmd0aCAtIDFdIDogZXhwcmVzc2lvbikucHJvdG90eXBlO1xuICAgICAgICBpbnN0YW5jZSA9IE9iamVjdC5jcmVhdGUoY29udHJvbGxlclByb3RvdHlwZSB8fCBudWxsKTtcblxuICAgICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICAgIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbnN0YW50aWF0ZTtcbiAgICAgICAgcmV0dXJuIGluc3RhbnRpYXRlID0gZXh0ZW5kKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSAkaW5qZWN0b3IuaW52b2tlKGV4cHJlc3Npb24sIGluc3RhbmNlLCBsb2NhbHMsIGNvbnN0cnVjdG9yKTtcbiAgICAgICAgICBpZiAocmVzdWx0ICE9PSBpbnN0YW5jZSAmJiAoaXNPYmplY3QocmVzdWx0KSB8fCBpc0Z1bmN0aW9uKHJlc3VsdCkpKSB7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IHJlc3VsdDtcbiAgICAgICAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgIC8vIElmIHJlc3VsdCBjaGFuZ2VkLCByZS1hc3NpZ24gY29udHJvbGxlckFzIHZhbHVlIHRvIHNjb3BlLlxuICAgICAgICAgICAgICBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIGNvbnN0cnVjdG9yIHx8IGV4cHJlc3Npb24ubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgfSwge1xuICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpbnN0YW5jZSA9ICRpbmplY3Rvci5pbnN0YW50aWF0ZShleHByZXNzaW9uLCBsb2NhbHMsIGNvbnN0cnVjdG9yKTtcblxuICAgICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBjb25zdHJ1Y3RvciB8fCBleHByZXNzaW9uLm5hbWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgbmFtZSkge1xuICAgICAgaWYgKCEobG9jYWxzICYmIGlzT2JqZWN0KGxvY2Fscy4kc2NvcGUpKSkge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJyRjb250cm9sbGVyJykoJ25vc2NwJyxcbiAgICAgICAgICBcIkNhbm5vdCBleHBvcnQgY29udHJvbGxlciAnezB9JyBhcyAnezF9JyEgTm8gJHNjb3BlIG9iamVjdCBwcm92aWRlZCB2aWEgYGxvY2Fsc2AuXCIsXG4gICAgICAgICAgbmFtZSwgaWRlbnRpZmllcik7XG4gICAgICB9XG5cbiAgICAgIGxvY2Fscy4kc2NvcGVbaWRlbnRpZmllcl0gPSBpbnN0YW5jZTtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkZG9jdW1lbnRcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHtAbGluayBhbmd1bGFyLmVsZW1lbnQgalF1ZXJ5IG9yIGpxTGl0ZX0gd3JhcHBlciBmb3IgdGhlIGJyb3dzZXIncyBgd2luZG93LmRvY3VtZW50YCBvYmplY3QuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImRvY3VtZW50RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8cD4kZG9jdW1lbnQgdGl0bGU6IDxiIG5nLWJpbmQ9XCJ0aXRsZVwiPjwvYj48L3A+XG4gICAgICAgICA8cD53aW5kb3cuZG9jdW1lbnQgdGl0bGU6IDxiIG5nLWJpbmQ9XCJ3aW5kb3dUaXRsZVwiPjwvYj48L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdkb2N1bWVudEV4YW1wbGUnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGRvY3VtZW50KSB7XG4gICAgICAgICAgICRzY29wZS50aXRsZSA9ICRkb2N1bWVudFswXS50aXRsZTtcbiAgICAgICAgICAgJHNjb3BlLndpbmRvd1RpdGxlID0gYW5ndWxhci5lbGVtZW50KHdpbmRvdy5kb2N1bWVudClbMF0udGl0bGU7XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gJERvY3VtZW50UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsIGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIHJldHVybiBqcUxpdGUod2luZG93LmRvY3VtZW50KTtcbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRleGNlcHRpb25IYW5kbGVyXG4gKiBAcmVxdWlyZXMgbmcuJGxvZ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQW55IHVuY2F1Z2h0IGV4Y2VwdGlvbiBpbiBhbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRlbGVnYXRlZCB0byB0aGlzIHNlcnZpY2UuXG4gKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzaW1wbHkgZGVsZWdhdGVzIHRvIGAkbG9nLmVycm9yYCB3aGljaCBsb2dzIGl0IGludG9cbiAqIHRoZSBicm93c2VyIGNvbnNvbGUuXG4gKlxuICogSW4gdW5pdCB0ZXN0cywgaWYgYGFuZ3VsYXItbW9ja3MuanNgIGlzIGxvYWRlZCwgdGhpcyBzZXJ2aWNlIGlzIG92ZXJyaWRkZW4gYnlcbiAqIHtAbGluayBuZ01vY2suJGV4Y2VwdGlvbkhhbmRsZXIgbW9jayAkZXhjZXB0aW9uSGFuZGxlcn0gd2hpY2ggYWlkcyBpbiB0ZXN0aW5nLlxuICpcbiAqICMjIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqICAgYW5ndWxhci5tb2R1bGUoJ2V4Y2VwdGlvbk92ZXJyaWRlJywgW10pLmZhY3RvcnkoJyRleGNlcHRpb25IYW5kbGVyJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgcmV0dXJuIGZ1bmN0aW9uKGV4Y2VwdGlvbiwgY2F1c2UpIHtcbiAqICAgICAgIGV4Y2VwdGlvbi5tZXNzYWdlICs9ICcgKGNhdXNlZCBieSBcIicgKyBjYXVzZSArICdcIiknO1xuICogICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICogICAgIH07XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogVGhpcyBleGFtcGxlIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbCBhY3Rpb24gb2YgYCRleGNlcHRpb25IYW5kbGVyYCwgdG8gbWFrZSBhbmd1bGFyXG4gKiBleGNlcHRpb25zIGZhaWwgaGFyZCB3aGVuIHRoZXkgaGFwcGVuLCBpbnN0ZWFkIG9mIGp1c3QgbG9nZ2luZyB0byB0aGUgY29uc29sZS5cbiAqXG4gKiA8aHIgLz5cbiAqIE5vdGUsIHRoYXQgY29kZSBleGVjdXRlZCBpbiBldmVudC1saXN0ZW5lcnMgKGV2ZW4gdGhvc2UgcmVnaXN0ZXJlZCB1c2luZyBqcUxpdGUncyBgb25gL2BiaW5kYFxuICogbWV0aG9kcykgZG9lcyBub3QgZGVsZWdhdGUgZXhjZXB0aW9ucyB0byB0aGUge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfVxuICogKHVubGVzcyBleGVjdXRlZCBkdXJpbmcgYSBkaWdlc3QpLlxuICpcbiAqIElmIHlvdSB3aXNoLCB5b3UgY2FuIG1hbnVhbGx5IGRlbGVnYXRlIGV4Y2VwdGlvbnMsIGUuZy5cbiAqIGB0cnkgeyAuLi4gfSBjYXRjaChlKSB7ICRleGNlcHRpb25IYW5kbGVyKGUpOyB9YFxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGV4Y2VwdGlvbiBFeGNlcHRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBlcnJvci5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gY2F1c2Ugb3B0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbnRleHQgaW4gd2hpY2hcbiAqICAgICAgIHRoZSBlcnJvciB3YXMgdGhyb3duLlxuICpcbiAqL1xuZnVuY3Rpb24gJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckbG9nJywgZnVuY3Rpb24oJGxvZykge1xuICAgIHJldHVybiBmdW5jdGlvbihleGNlcHRpb24sIGNhdXNlKSB7XG4gICAgICAkbG9nLmVycm9yLmFwcGx5KCRsb2csIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfV07XG59XG5cbnZhciAkJEZvcmNlUmVmbG93UHJvdmlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckZG9jdW1lbnQnLCBmdW5jdGlvbigkZG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZG9tTm9kZSkge1xuICAgICAgLy90aGUgbGluZSBiZWxvdyB3aWxsIGZvcmNlIHRoZSBicm93c2VyIHRvIHBlcmZvcm0gYSByZXBhaW50IHNvXG4gICAgICAvL3RoYXQgYWxsIHRoZSBhbmltYXRlZCBlbGVtZW50cyB3aXRoaW4gdGhlIGFuaW1hdGlvbiBmcmFtZSB3aWxsXG4gICAgICAvL2JlIHByb3Blcmx5IHVwZGF0ZWQgYW5kIGRyYXduIG9uIHNjcmVlbi4gVGhpcyBpcyByZXF1aXJlZCB0b1xuICAgICAgLy9lbnN1cmUgdGhhdCB0aGUgcHJlcGFyYXRpb24gYW5pbWF0aW9uIGlzIHByb3Blcmx5IGZsdXNoZWQgc28gdGhhdFxuICAgICAgLy90aGUgYWN0aXZlIHN0YXRlIHBpY2tzIHVwIGZyb20gdGhlcmUuIERPIE5PVCBSRU1PVkUgVEhJUyBMSU5FLlxuICAgICAgLy9ETyBOT1QgT1BUSU1JWkUgVEhJUyBMSU5FLiBUSEUgTUlOSUZJRVIgV0lMTCBSRU1PVkUgSVQgT1RIRVJXSVNFIFdISUNIXG4gICAgICAvL1dJTEwgUkVTVUxUIElOIEFOIFVOUFJFRElDVEFCTEUgQlVHIFRIQVQgSVMgVkVSWSBIQVJEIFRPIFRSQUNLIERPV04gQU5EXG4gICAgICAvL1dJTEwgVEFLRSBZRUFSUyBBV0FZIEZST00gWU9VUiBMSUZFLlxuICAgICAgaWYgKGRvbU5vZGUpIHtcbiAgICAgICAgaWYgKCFkb21Ob2RlLm5vZGVUeXBlICYmIGRvbU5vZGUgaW5zdGFuY2VvZiBqcUxpdGUpIHtcbiAgICAgICAgICBkb21Ob2RlID0gZG9tTm9kZVswXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9tTm9kZSA9ICRkb2N1bWVudFswXS5ib2R5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvbU5vZGUub2Zmc2V0V2lkdGggKyAxO1xuICAgIH07XG4gIH1dO1xufTtcblxudmFyIEFQUExJQ0FUSU9OX0pTT04gPSAnYXBwbGljYXRpb24vanNvbic7XG52YXIgQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04gPSB7J0NvbnRlbnQtVHlwZSc6IEFQUExJQ0FUSU9OX0pTT04gKyAnO2NoYXJzZXQ9dXRmLTgnfTtcbnZhciBKU09OX1NUQVJUID0gL15cXFt8Xlxceyg/IVxceykvO1xudmFyIEpTT05fRU5EUyA9IHtcbiAgJ1snOiAvXSQvLFxuICAneyc6IC99JC9cbn07XG52YXIgSlNPTl9QUk9URUNUSU9OX1BSRUZJWCA9IC9eXFwpXFxdXFx9Jyw/XFxuLztcbnZhciAkaHR0cE1pbkVyciA9IG1pbkVycignJGh0dHAnKTtcbnZhciAkaHR0cE1pbkVyckxlZ2FjeUZuID0gZnVuY3Rpb24obWV0aG9kKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyAkaHR0cE1pbkVycignbGVnYWN5JywgJ1RoZSBtZXRob2QgYHswfWAgb24gdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbSBgJGh0dHBgIGhhcyBiZWVuIGRpc2FibGVkLicsIG1ldGhvZCk7XG4gIH07XG59O1xuXG5mdW5jdGlvbiBzZXJpYWxpemVWYWx1ZSh2KSB7XG4gIGlmIChpc09iamVjdCh2KSkge1xuICAgIHJldHVybiBpc0RhdGUodikgPyB2LnRvSVNPU3RyaW5nKCkgOiB0b0pzb24odik7XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cblxuZnVuY3Rpb24gJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlcigpIHtcbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRodHRwUGFyYW1TZXJpYWxpemVyXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZhdWx0IHtAbGluayAkaHR0cCBgJGh0dHBgfSBwYXJhbXMgc2VyaWFsaXplciB0aGF0IGNvbnZlcnRzIG9iamVjdHMgdG8gc3RyaW5nc1xuICAgKiBhY2NvcmRpbmcgdG8gdGhlIGZvbGxvd2luZyBydWxlczpcbiAgICpcbiAgICogKiBgeydmb28nOiAnYmFyJ31gIHJlc3VsdHMgaW4gYGZvbz1iYXJgXG4gICAqICogYHsnZm9vJzogRGF0ZS5ub3coKX1gIHJlc3VsdHMgaW4gYGZvbz0yMDE1LTA0LTAxVDA5JTNBNTAlM0E0OS4yNjJaYCAoYHRvSVNPU3RyaW5nKClgIGFuZCBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIGEgRGF0ZSBvYmplY3QpXG4gICAqICogYHsnZm9vJzogWydiYXInLCAnYmF6J119YCByZXN1bHRzIGluIGBmb289YmFyJmZvbz1iYXpgIChyZXBlYXRlZCBrZXkgZm9yIGVhY2ggYXJyYXkgZWxlbWVudClcbiAgICogKiBgeydmb28nOiB7J2Jhcic6J2Jheid9fWAgcmVzdWx0cyBpbiBgZm9vPSU3QiUyMmJhciUyMiUzQSUyMmJheiUyMiU3RFwiYCAoc3RyaW5naWZpZWQgYW5kIGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0KVxuICAgKlxuICAgKiBOb3RlIHRoYXQgc2VyaWFsaXplciB3aWxsIHNvcnQgdGhlIHJlcXVlc3QgcGFyYW1ldGVycyBhbHBoYWJldGljYWxseS5cbiAgICogKi9cblxuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbmdQYXJhbVNlcmlhbGl6ZXIocGFyYW1zKSB7XG4gICAgICBpZiAoIXBhcmFtcykgcmV0dXJuICcnO1xuICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICBmb3JFYWNoU29ydGVkKHBhcmFtcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKHYsIGspIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5KSAgKyAnPScgKyBlbmNvZGVVcmlRdWVyeShzZXJpYWxpemVWYWx1ZSh2KSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5KSArICc9JyArIGVuY29kZVVyaVF1ZXJ5KHNlcmlhbGl6ZVZhbHVlKHZhbHVlKSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJyYnKTtcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyKCkge1xuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEFsdGVybmF0aXZlIHtAbGluayAkaHR0cCBgJGh0dHBgfSBwYXJhbXMgc2VyaWFsaXplciB0aGF0IGZvbGxvd3NcbiAgICogalF1ZXJ5J3MgW2BwYXJhbSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2pxdWVyeS5wYXJhbS8pIG1ldGhvZCBsb2dpYy5cbiAgICogVGhlIHNlcmlhbGl6ZXIgd2lsbCBhbHNvIHNvcnQgdGhlIHBhcmFtcyBhbHBoYWJldGljYWxseS5cbiAgICpcbiAgICogVG8gdXNlIGl0IGZvciBzZXJpYWxpemluZyBgJGh0dHBgIHJlcXVlc3QgcGFyYW1ldGVycywgc2V0IGl0IGFzIHRoZSBgcGFyYW1TZXJpYWxpemVyYCBwcm9wZXJ0eTpcbiAgICpcbiAgICogYGBganNcbiAgICogJGh0dHAoe1xuICAgKiAgIHVybDogbXlVcmwsXG4gICAqICAgbWV0aG9kOiAnR0VUJyxcbiAgICogICBwYXJhbXM6IG15UGFyYW1zLFxuICAgKiAgIHBhcmFtU2VyaWFsaXplcjogJyRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlJ1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gc2V0IGl0IGFzIHRoZSBkZWZhdWx0IGBwYXJhbVNlcmlhbGl6ZXJgIGluIHRoZVxuICAgKiB7QGxpbmsgJGh0dHBQcm92aWRlciNkZWZhdWx0cyBgJGh0dHBQcm92aWRlcmB9LlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gaW5qZWN0IHRoZSBzZXJpYWxpemVyIGFuZCB1c2UgaXQgZXhwbGljaXRseSwgZm9yIGV4YW1wbGUgdG8gc2VyaWFsaXplXG4gICAqIGZvcm0gZGF0YSBmb3Igc3VibWlzc2lvbjpcbiAgICpcbiAgICogYGBganNcbiAgICogLmNvbnRyb2xsZXIoZnVuY3Rpb24oJGh0dHAsICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlKSB7XG4gICAqICAgLy8uLi5cbiAgICpcbiAgICogICAkaHR0cCh7XG4gICAqICAgICB1cmw6IG15VXJsLFxuICAgKiAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAqICAgICBkYXRhOiAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZShteURhdGEpLFxuICAgKiAgICAgaGVhZGVyczoge1xuICAgKiAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICpcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiAqL1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24galF1ZXJ5TGlrZVBhcmFtU2VyaWFsaXplcihwYXJhbXMpIHtcbiAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gJyc7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgIHNlcmlhbGl6ZShwYXJhbXMsICcnLCB0cnVlKTtcbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcmJyk7XG5cbiAgICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZSh0b1NlcmlhbGl6ZSwgcHJlZml4LCB0b3BMZXZlbCkge1xuICAgICAgICBpZiAodG9TZXJpYWxpemUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodG9TZXJpYWxpemUpKSByZXR1cm47XG4gICAgICAgIGlmIChpc0FycmF5KHRvU2VyaWFsaXplKSkge1xuICAgICAgICAgIGZvckVhY2godG9TZXJpYWxpemUsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgc2VyaWFsaXplKHZhbHVlLCBwcmVmaXggKyAnWycgKyAoaXNPYmplY3QodmFsdWUpID8gaW5kZXggOiAnJykgKyAnXScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRvU2VyaWFsaXplKSAmJiAhaXNEYXRlKHRvU2VyaWFsaXplKSkge1xuICAgICAgICAgIGZvckVhY2hTb3J0ZWQodG9TZXJpYWxpemUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIHNlcmlhbGl6ZSh2YWx1ZSwgcHJlZml4ICtcbiAgICAgICAgICAgICAgICAodG9wTGV2ZWwgPyAnJyA6ICdbJykgK1xuICAgICAgICAgICAgICAgIGtleSArXG4gICAgICAgICAgICAgICAgKHRvcExldmVsID8gJycgOiAnXScpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KHByZWZpeCkgKyAnPScgKyBlbmNvZGVVcmlRdWVyeShzZXJpYWxpemVWYWx1ZSh0b1NlcmlhbGl6ZSkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0oZGF0YSwgaGVhZGVycykge1xuICBpZiAoaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAvLyBTdHJpcCBqc29uIHZ1bG5lcmFiaWxpdHkgcHJvdGVjdGlvbiBwcmVmaXggYW5kIHRyaW0gd2hpdGVzcGFjZVxuICAgIHZhciB0ZW1wRGF0YSA9IGRhdGEucmVwbGFjZShKU09OX1BST1RFQ1RJT05fUFJFRklYLCAnJykudHJpbSgpO1xuXG4gICAgaWYgKHRlbXBEYXRhKSB7XG4gICAgICB2YXIgY29udGVudFR5cGUgPSBoZWFkZXJzKCdDb250ZW50LVR5cGUnKTtcbiAgICAgIGlmICgoY29udGVudFR5cGUgJiYgKGNvbnRlbnRUeXBlLmluZGV4T2YoQVBQTElDQVRJT05fSlNPTikgPT09IDApKSB8fCBpc0pzb25MaWtlKHRlbXBEYXRhKSkge1xuICAgICAgICBkYXRhID0gZnJvbUpzb24odGVtcERhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBpc0pzb25MaWtlKHN0cikge1xuICAgIHZhciBqc29uU3RhcnQgPSBzdHIubWF0Y2goSlNPTl9TVEFSVCk7XG4gICAgcmV0dXJuIGpzb25TdGFydCAmJiBKU09OX0VORFNbanNvblN0YXJ0WzBdXS50ZXN0KHN0cik7XG59XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGtleSB2YWx1ZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaGVhZGVycyBSYXcgaGVhZGVycyBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge09iamVjdH0gUGFyc2VkIGhlYWRlcnMgYXMga2V5IHZhbHVlIG9iamVjdFxuICovXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0gY3JlYXRlTWFwKCksIGk7XG5cbiAgZnVuY3Rpb24gZmlsbEluUGFyc2VkKGtleSwgdmFsKSB7XG4gICAgaWYgKGtleSkge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH1cblxuICBpZiAoaXNTdHJpbmcoaGVhZGVycykpIHtcbiAgICBmb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbihsaW5lKSB7XG4gICAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAgICBmaWxsSW5QYXJzZWQobG93ZXJjYXNlKHRyaW0obGluZS5zdWJzdHIoMCwgaSkpKSwgdHJpbShsaW5lLnN1YnN0cihpICsgMSkpKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChpc09iamVjdChoZWFkZXJzKSkge1xuICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24oaGVhZGVyVmFsLCBoZWFkZXJLZXkpIHtcbiAgICAgIGZpbGxJblBhcnNlZChsb3dlcmNhc2UoaGVhZGVyS2V5KSwgdHJpbShoZWFkZXJWYWwpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZWQ7XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gcGFyc2VkIGhlYWRlcnMuXG4gKlxuICogSGVhZGVycyBhcmUgbGF6eSBwYXJzZWQgd2hlbiBmaXJzdCByZXF1ZXN0ZWQuXG4gKiBAc2VlIHBhcnNlSGVhZGVyc1xuICpcbiAqIEBwYXJhbSB7KHN0cmluZ3xPYmplY3QpfSBoZWFkZXJzIEhlYWRlcnMgdG8gcHJvdmlkZSBhY2Nlc3MgdG8uXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nPSl9IFJldHVybnMgYSBnZXR0ZXIgZnVuY3Rpb24gd2hpY2ggaWYgY2FsbGVkIHdpdGg6XG4gKlxuICogICAtIGlmIGNhbGxlZCB3aXRoIHNpbmdsZSBhbiBhcmd1bWVudCByZXR1cm5zIGEgc2luZ2xlIGhlYWRlciB2YWx1ZSBvciBudWxsXG4gKiAgIC0gaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGhlYWRlcnMuXG4gKi9cbmZ1bmN0aW9uIGhlYWRlcnNHZXR0ZXIoaGVhZGVycykge1xuICB2YXIgaGVhZGVyc09iajtcblxuICByZXR1cm4gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICghaGVhZGVyc09iaikgaGVhZGVyc09iaiA9ICBwYXJzZUhlYWRlcnMoaGVhZGVycyk7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gaGVhZGVyc09ialtsb3dlcmNhc2UobmFtZSldO1xuICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBoZWFkZXJzT2JqO1xuICB9O1xufVxuXG5cbi8qKlxuICogQ2hhaW4gYWxsIGdpdmVuIGZ1bmN0aW9uc1xuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBmb3IgYm90aCByZXF1ZXN0IGFuZCByZXNwb25zZSB0cmFuc2Zvcm1pbmdcbiAqXG4gKiBAcGFyYW0geyp9IGRhdGEgRGF0YSB0byB0cmFuc2Zvcm0uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZz0pfSBoZWFkZXJzIEhUVFAgaGVhZGVycyBnZXR0ZXIgZm4uXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhdHVzIEhUVFAgc3RhdHVzIGNvZGUgb2YgdGhlIHJlc3BvbnNlLlxuICogQHBhcmFtIHsoRnVuY3Rpb258QXJyYXkuPEZ1bmN0aW9uPil9IGZucyBGdW5jdGlvbiBvciBhbiBhcnJheSBvZiBmdW5jdGlvbnMuXG4gKiBAcmV0dXJucyB7Kn0gVHJhbnNmb3JtZWQgZGF0YS5cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBzdGF0dXMsIGZucykge1xuICBpZiAoaXNGdW5jdGlvbihmbnMpKSB7XG4gICAgcmV0dXJuIGZucyhkYXRhLCBoZWFkZXJzLCBzdGF0dXMpO1xuICB9XG5cbiAgZm9yRWFjaChmbnMsIGZ1bmN0aW9uKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMsIHN0YXR1cyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5cbmZ1bmN0aW9uIGlzU3VjY2VzcyhzdGF0dXMpIHtcbiAgcmV0dXJuIDIwMCA8PSBzdGF0dXMgJiYgc3RhdHVzIDwgMzAwO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkaHR0cFByb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSBgJGh0dHBQcm92aWRlcmAgdG8gY2hhbmdlIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IHNlcnZpY2UuXG4gKiAqL1xuZnVuY3Rpb24gJEh0dHBQcm92aWRlcigpIHtcbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI2RlZmF1bHRzXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmplY3QgY29udGFpbmluZyBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gcmVxdWVzdHMuXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMuY2FjaGVgKiogLSB7T2JqZWN0fSAtIGFuIG9iamVjdCBidWlsdCB3aXRoIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH1cbiAgICogdGhhdCB3aWxsIHByb3ZpZGUgdGhlIGNhY2hlIGZvciBhbGwgcmVxdWVzdHMgd2hvIHNldCB0aGVpciBgY2FjaGVgIHByb3BlcnR5IHRvIGB0cnVlYC5cbiAgICogSWYgeW91IHNldCB0aGUgYGRlZmF1bHRzLmNhY2hlID0gZmFsc2VgIHRoZW4gb25seSByZXF1ZXN0cyB0aGF0IHNwZWNpZnkgdGhlaXIgb3duIGN1c3RvbVxuICAgKiBjYWNoZSBvYmplY3Qgd2lsbCBiZSBjYWNoZWQuIFNlZSB7QGxpbmsgJGh0dHAjY2FjaGluZyAkaHR0cCBDYWNoaW5nfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy54c3JmQ29va2llTmFtZWAqKiAtIHtzdHJpbmd9IC0gTmFtZSBvZiBjb29raWUgY29udGFpbmluZyB0aGUgWFNSRiB0b2tlbi5cbiAgICogRGVmYXVsdHMgdmFsdWUgaXMgYCdYU1JGLVRPS0VOJ2AuXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMueHNyZkhlYWRlck5hbWVgKiogLSB7c3RyaW5nfSAtIE5hbWUgb2YgSFRUUCBoZWFkZXIgdG8gcG9wdWxhdGUgd2l0aCB0aGVcbiAgICogWFNSRiB0b2tlbi4gRGVmYXVsdHMgdmFsdWUgaXMgYCdYLVhTUkYtVE9LRU4nYC5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5oZWFkZXJzYCoqIC0ge09iamVjdH0gLSBEZWZhdWx0IGhlYWRlcnMgZm9yIGFsbCAkaHR0cCByZXF1ZXN0cy5cbiAgICogUmVmZXIgdG8ge0BsaW5rIG5nLiRodHRwI3NldHRpbmctaHR0cC1oZWFkZXJzICRodHRwfSBmb3IgZG9jdW1lbnRhdGlvbiBvblxuICAgKiBzZXR0aW5nIGRlZmF1bHQgaGVhZGVycy5cbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5jb21tb25gKipcbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wb3N0YCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucHV0YCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucGF0Y2hgKipcbiAgICpcbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXJgKiogLSBge3N0cmluZ3xmdW5jdGlvbihPYmplY3Q8c3RyaW5nLHN0cmluZz4pOnN0cmluZ31gIC0gQSBmdW5jdGlvblxuICAgKiAgdXNlZCB0byB0aGUgcHJlcGFyZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgcmVxdWVzdCBwYXJhbWV0ZXJzIChzcGVjaWZpZWQgYXMgYW4gb2JqZWN0KS5cbiAgICogIElmIHNwZWNpZmllZCBhcyBzdHJpbmcsIGl0IGlzIGludGVycHJldGVkIGFzIGEgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAgICogIERlZmF1bHRzIHRvIHtAbGluayBuZy4kaHR0cFBhcmFtU2VyaWFsaXplciAkaHR0cFBhcmFtU2VyaWFsaXplcn0uXG4gICAqXG4gICAqKi9cbiAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAvLyB0cmFuc2Zvcm0gaW5jb21pbmcgcmVzcG9uc2UgZGF0YVxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBbZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybV0sXG5cbiAgICAvLyB0cmFuc2Zvcm0gb3V0Z29pbmcgcmVxdWVzdCBkYXRhXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBpc09iamVjdChkKSAmJiAhaXNGaWxlKGQpICYmICFpc0Jsb2IoZCkgJiYgIWlzRm9ybURhdGEoZCkgPyB0b0pzb24oZCkgOiBkO1xuICAgIH1dLFxuXG4gICAgLy8gZGVmYXVsdCBoZWFkZXJzXG4gICAgaGVhZGVyczoge1xuICAgICAgY29tbW9uOiB7XG4gICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICAgICAgfSxcbiAgICAgIHBvc3Q6ICAgc2hhbGxvd0NvcHkoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pLFxuICAgICAgcHV0OiAgICBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiksXG4gICAgICBwYXRjaDogIHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKVxuICAgIH0sXG5cbiAgICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICAgIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICAgIHBhcmFtU2VyaWFsaXplcjogJyRodHRwUGFyYW1TZXJpYWxpemVyJ1xuICB9O1xuXG4gIHZhciB1c2VBcHBseUFzeW5jID0gZmFsc2U7XG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwUHJvdmlkZXIjdXNlQXBwbHlBc3luY1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQ29uZmlndXJlICRodHRwIHNlcnZpY2UgdG8gY29tYmluZSBwcm9jZXNzaW5nIG9mIG11bHRpcGxlIGh0dHAgcmVzcG9uc2VzIHJlY2VpdmVkIGF0IGFyb3VuZFxuICAgKiB0aGUgc2FtZSB0aW1lIHZpYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHlBc3luYyAkcm9vdFNjb3BlLiRhcHBseUFzeW5jfS4gVGhpcyBjYW4gcmVzdWx0IGluXG4gICAqIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGltcHJvdmVtZW50IGZvciBiaWdnZXIgYXBwbGljYXRpb25zIHRoYXQgbWFrZSBtYW55IEhUVFAgcmVxdWVzdHNcbiAgICogY29uY3VycmVudGx5IChjb21tb24gZHVyaW5nIGFwcGxpY2F0aW9uIGJvb3RzdHJhcCkuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvIGZhbHNlLiBJZiBubyB2YWx1ZSBpcyBzcGVjaWZpZWQsIHJldHVybnMgdGhlIGN1cnJlbnQgY29uZmlndXJlZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgSWYgdHJ1ZSwgd2hlbiByZXF1ZXN0cyBhcmUgbG9hZGVkLCB0aGV5IHdpbGwgc2NoZWR1bGUgYSBkZWZlcnJlZFxuICAgKiAgICBcImFwcGx5XCIgb24gdGhlIG5leHQgdGljaywgZ2l2aW5nIHRpbWUgZm9yIHN1YnNlcXVlbnQgcmVxdWVzdHMgaW4gYSByb3VnaGx5IH4xMG1zIHdpbmRvd1xuICAgKiAgICB0byBsb2FkIGFuZCBzaGFyZSB0aGUgc2FtZSBkaWdlc3QgY3ljbGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufE9iamVjdH0gSWYgYSB2YWx1ZSBpcyBzcGVjaWZpZWQsIHJldHVybnMgdGhlICRodHRwUHJvdmlkZXIgZm9yIGNoYWluaW5nLlxuICAgKiAgICBvdGhlcndpc2UsIHJldHVybnMgdGhlIGN1cnJlbnQgY29uZmlndXJlZCB2YWx1ZS5cbiAgICoqL1xuICB0aGlzLnVzZUFwcGx5QXN5bmMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICB1c2VBcHBseUFzeW5jID0gISF2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdXNlQXBwbHlBc3luYztcbiAgfTtcblxuICB2YXIgdXNlTGVnYWN5UHJvbWlzZSA9IHRydWU7XG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwUHJvdmlkZXIjdXNlTGVnYWN5UHJvbWlzZUV4dGVuc2lvbnNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIENvbmZpZ3VyZSBgJGh0dHBgIHNlcnZpY2UgdG8gcmV0dXJuIHByb21pc2VzIHdpdGhvdXQgdGhlIHNob3J0aGFuZCBtZXRob2RzIGBzdWNjZXNzYCBhbmQgYGVycm9yYC5cbiAgICogVGhpcyBzaG91bGQgYmUgdXNlZCB0byBtYWtlIHN1cmUgdGhhdCBhcHBsaWNhdGlvbnMgd29yayB3aXRob3V0IHRoZXNlIG1ldGhvZHMuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvIHRydWUuIElmIG5vIHZhbHVlIGlzIHNwZWNpZmllZCwgcmV0dXJucyB0aGUgY3VycmVudCBjb25maWd1cmVkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB2YWx1ZSBJZiB0cnVlLCBgJGh0dHBgIHdpbGwgcmV0dXJuIGEgcHJvbWlzZSB3aXRoIHRoZSBkZXByZWNhdGVkIGxlZ2FjeSBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAgbWV0aG9kcy5cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW58T2JqZWN0fSBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCwgcmV0dXJucyB0aGUgJGh0dHBQcm92aWRlciBmb3IgY2hhaW5pbmcuXG4gICAqICAgIG90aGVyd2lzZSwgcmV0dXJucyB0aGUgY3VycmVudCBjb25maWd1cmVkIHZhbHVlLlxuICAgKiovXG4gIHRoaXMudXNlTGVnYWN5UHJvbWlzZUV4dGVuc2lvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICB1c2VMZWdhY3lQcm9taXNlID0gISF2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdXNlTGVnYWN5UHJvbWlzZTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIHByb3BlcnR5XG4gICAqIEBuYW1lICRodHRwUHJvdmlkZXIjaW50ZXJjZXB0b3JzXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBcnJheSBjb250YWluaW5nIHNlcnZpY2UgZmFjdG9yaWVzIGZvciBhbGwgc3luY2hyb25vdXMgb3IgYXN5bmNocm9ub3VzIHtAbGluayBuZy4kaHR0cCAkaHR0cH1cbiAgICogcHJlLXByb2Nlc3Npbmcgb2YgcmVxdWVzdCBvciBwb3N0cHJvY2Vzc2luZyBvZiByZXNwb25zZXMuXG4gICAqXG4gICAqIFRoZXNlIHNlcnZpY2UgZmFjdG9yaWVzIGFyZSBvcmRlcmVkIGJ5IHJlcXVlc3QsIGkuZS4gdGhleSBhcmUgYXBwbGllZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbiAgICogYXJyYXksIG9uIHJlcXVlc3QsIGJ1dCByZXZlcnNlIG9yZGVyLCBvbiByZXNwb25zZS5cbiAgICpcbiAgICoge0BsaW5rIG5nLiRodHRwI2ludGVyY2VwdG9ycyBJbnRlcmNlcHRvcnMgZGV0YWlsZWQgaW5mb31cbiAgICoqL1xuICB2YXIgaW50ZXJjZXB0b3JGYWN0b3JpZXMgPSB0aGlzLmludGVyY2VwdG9ycyA9IFtdO1xuXG4gIHRoaXMuJGdldCA9IFsnJGh0dHBCYWNrZW5kJywgJyQkY29va2llUmVhZGVyJywgJyRjYWNoZUZhY3RvcnknLCAnJHJvb3RTY29wZScsICckcScsICckaW5qZWN0b3InLFxuICAgICAgZnVuY3Rpb24oJGh0dHBCYWNrZW5kLCAkJGNvb2tpZVJlYWRlciwgJGNhY2hlRmFjdG9yeSwgJHJvb3RTY29wZSwgJHEsICRpbmplY3Rvcikge1xuXG4gICAgdmFyIGRlZmF1bHRDYWNoZSA9ICRjYWNoZUZhY3RvcnkoJyRodHRwJyk7XG5cbiAgICAvKipcbiAgICAgKiBNYWtlIHN1cmUgdGhhdCBkZWZhdWx0IHBhcmFtIHNlcmlhbGl6ZXIgaXMgZXhwb3NlZCBhcyBhIGZ1bmN0aW9uXG4gICAgICovXG4gICAgZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyID0gaXNTdHJpbmcoZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyKSA/XG4gICAgICAkaW5qZWN0b3IuZ2V0KGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcikgOiBkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXI7XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcmNlcHRvcnMgc3RvcmVkIGluIHJldmVyc2Ugb3JkZXIuIElubmVyIGludGVyY2VwdG9ycyBiZWZvcmUgb3V0ZXIgaW50ZXJjZXB0b3JzLlxuICAgICAqIFRoZSByZXZlcnNhbCBpcyBuZWVkZWQgc28gdGhhdCB3ZSBjYW4gYnVpbGQgdXAgdGhlIGludGVyY2VwdGlvbiBjaGFpbiBhcm91bmQgdGhlXG4gICAgICogc2VydmVyIHJlcXVlc3QuXG4gICAgICovXG4gICAgdmFyIHJldmVyc2VkSW50ZXJjZXB0b3JzID0gW107XG5cbiAgICBmb3JFYWNoKGludGVyY2VwdG9yRmFjdG9yaWVzLCBmdW5jdGlvbihpbnRlcmNlcHRvckZhY3RvcnkpIHtcbiAgICAgIHJldmVyc2VkSW50ZXJjZXB0b3JzLnVuc2hpZnQoaXNTdHJpbmcoaW50ZXJjZXB0b3JGYWN0b3J5KVxuICAgICAgICAgID8gJGluamVjdG9yLmdldChpbnRlcmNlcHRvckZhY3RvcnkpIDogJGluamVjdG9yLmludm9rZShpbnRlcmNlcHRvckZhY3RvcnkpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSAkaHR0cFxuICAgICAqIEByZXF1aXJlcyBuZy4kaHR0cEJhY2tlbmRcbiAgICAgKiBAcmVxdWlyZXMgJGNhY2hlRmFjdG9yeVxuICAgICAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gICAgICogQHJlcXVpcmVzICRxXG4gICAgICogQHJlcXVpcmVzICRpbmplY3RvclxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGhlIGAkaHR0cGAgc2VydmljZSBpcyBhIGNvcmUgQW5ndWxhciBzZXJ2aWNlIHRoYXQgZmFjaWxpdGF0ZXMgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSByZW1vdGVcbiAgICAgKiBIVFRQIHNlcnZlcnMgdmlhIHRoZSBicm93c2VyJ3MgW1hNTEh0dHBSZXF1ZXN0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi94bWxodHRwcmVxdWVzdClcbiAgICAgKiBvYmplY3Qgb3IgdmlhIFtKU09OUF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OUCkuXG4gICAgICpcbiAgICAgKiBGb3IgdW5pdCB0ZXN0aW5nIGFwcGxpY2F0aW9ucyB0aGF0IHVzZSBgJGh0dHBgIHNlcnZpY2UsIHNlZVxuICAgICAqIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kICRodHRwQmFja2VuZCBtb2NrfS5cbiAgICAgKlxuICAgICAqIEZvciBhIGhpZ2hlciBsZXZlbCBvZiBhYnN0cmFjdGlvbiwgcGxlYXNlIGNoZWNrIG91dCB0aGUge0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlXG4gICAgICogJHJlc291cmNlfSBzZXJ2aWNlLlxuICAgICAqXG4gICAgICogVGhlICRodHRwIEFQSSBpcyBiYXNlZCBvbiB0aGUge0BsaW5rIG5nLiRxIGRlZmVycmVkL3Byb21pc2UgQVBJc30gZXhwb3NlZCBieVxuICAgICAqIHRoZSAkcSBzZXJ2aWNlLiBXaGlsZSBmb3Igc2ltcGxlIHVzYWdlIHBhdHRlcm5zIHRoaXMgZG9lc24ndCBtYXR0ZXIgbXVjaCwgZm9yIGFkdmFuY2VkIHVzYWdlXG4gICAgICogaXQgaXMgaW1wb3J0YW50IHRvIGZhbWlsaWFyaXplIHlvdXJzZWxmIHdpdGggdGhlc2UgQVBJcyBhbmQgdGhlIGd1YXJhbnRlZXMgdGhleSBwcm92aWRlLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBHZW5lcmFsIHVzYWdlXG4gICAgICogVGhlIGAkaHR0cGAgc2VydmljZSBpcyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIGEgc2luZ2xlIGFyZ3VtZW50IOKAlCBhIHtAbGluayAkaHR0cCN1c2FnZSBjb25maWd1cmF0aW9uIG9iamVjdH0g4oCUXG4gICAgICogdGhhdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGFuIEhUVFAgcmVxdWVzdCBhbmQgcmV0dXJucyAgYSB7QGxpbmsgbmcuJHEgcHJvbWlzZX0uXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgLy8gU2ltcGxlIEdFVCByZXF1ZXN0IGV4YW1wbGU6XG4gICAgICogICAkaHR0cCh7XG4gICAgICogICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICogICAgIHVybDogJy9zb21lVXJsJ1xuICAgICAqICAgfSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgKiAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlXG4gICAgICogICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgKiAgICAgICAvLyBjYWxsZWQgYXN5bmNocm9ub3VzbHkgaWYgYW4gZXJyb3Igb2NjdXJzXG4gICAgICogICAgICAgLy8gb3Igc2VydmVyIHJldHVybnMgcmVzcG9uc2Ugd2l0aCBhbiBlcnJvciBzdGF0dXMuXG4gICAgICogICAgIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlIHJlc3BvbnNlIG9iamVjdCBoYXMgdGhlc2UgcHJvcGVydGllczpcbiAgICAgKlxuICAgICAqICAgLSAqKmRhdGEqKiDigJMgYHtzdHJpbmd8T2JqZWN0fWAg4oCTIFRoZSByZXNwb25zZSBib2R5IHRyYW5zZm9ybWVkIHdpdGggdGhlIHRyYW5zZm9ybVxuICAgICAqICAgICBmdW5jdGlvbnMuXG4gICAgICogICAtICoqc3RhdHVzKiog4oCTIGB7bnVtYmVyfWAg4oCTIEhUVFAgc3RhdHVzIGNvZGUgb2YgdGhlIHJlc3BvbnNlLlxuICAgICAqICAgLSAqKmhlYWRlcnMqKiDigJMgYHtmdW5jdGlvbihbaGVhZGVyTmFtZV0pfWAg4oCTIEhlYWRlciBnZXR0ZXIgZnVuY3Rpb24uXG4gICAgICogICAtICoqY29uZmlnKiog4oCTIGB7T2JqZWN0fWAg4oCTIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IHdhcyB1c2VkIHRvIGdlbmVyYXRlIHRoZSByZXF1ZXN0LlxuICAgICAqICAgLSAqKnN0YXR1c1RleHQqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBzdGF0dXMgdGV4dCBvZiB0aGUgcmVzcG9uc2UuXG4gICAgICpcbiAgICAgKiBBIHJlc3BvbnNlIHN0YXR1cyBjb2RlIGJldHdlZW4gMjAwIGFuZCAyOTkgaXMgY29uc2lkZXJlZCBhIHN1Y2Nlc3Mgc3RhdHVzIGFuZFxuICAgICAqIHdpbGwgcmVzdWx0IGluIHRoZSBzdWNjZXNzIGNhbGxiYWNrIGJlaW5nIGNhbGxlZC4gTm90ZSB0aGF0IGlmIHRoZSByZXNwb25zZSBpcyBhIHJlZGlyZWN0LFxuICAgICAqIFhNTEh0dHBSZXF1ZXN0IHdpbGwgdHJhbnNwYXJlbnRseSBmb2xsb3cgaXQsIG1lYW5pbmcgdGhhdCB0aGUgZXJyb3IgY2FsbGJhY2sgd2lsbCBub3QgYmVcbiAgICAgKiBjYWxsZWQgZm9yIHN1Y2ggcmVzcG9uc2VzLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBTaG9ydGN1dCBtZXRob2RzXG4gICAgICpcbiAgICAgKiBTaG9ydGN1dCBtZXRob2RzIGFyZSBhbHNvIGF2YWlsYWJsZS4gQWxsIHNob3J0Y3V0IG1ldGhvZHMgcmVxdWlyZSBwYXNzaW5nIGluIHRoZSBVUkwsIGFuZFxuICAgICAqIHJlcXVlc3QgZGF0YSBtdXN0IGJlIHBhc3NlZCBpbiBmb3IgUE9TVC9QVVQgcmVxdWVzdHMuIEFuIG9wdGlvbmFsIGNvbmZpZyBjYW4gYmUgcGFzc2VkIGFzIHRoZVxuICAgICAqIGxhc3QgYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgJGh0dHAuZ2V0KCcvc29tZVVybCcsIGNvbmZpZykudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgICAqICAgJGh0dHAucG9zdCgnL3NvbWVVcmwnLCBkYXRhLCBjb25maWcpLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIENvbXBsZXRlIGxpc3Qgb2Ygc2hvcnRjdXQgbWV0aG9kczpcbiAgICAgKlxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2dldCAkaHR0cC5nZXR9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjaGVhZCAkaHR0cC5oZWFkfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3Bvc3QgJGh0dHAucG9zdH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwdXQgJGh0dHAucHV0fVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2RlbGV0ZSAkaHR0cC5kZWxldGV9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjanNvbnAgJGh0dHAuanNvbnB9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcGF0Y2ggJGh0dHAucGF0Y2h9XG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIFdyaXRpbmcgVW5pdCBUZXN0cyB0aGF0IHVzZSAkaHR0cFxuICAgICAqIFdoZW4gdW5pdCB0ZXN0aW5nICh1c2luZyB7QGxpbmsgbmdNb2NrIG5nTW9ja30pLCBpdCBpcyBuZWNlc3NhcnkgdG8gY2FsbFxuICAgICAqIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kI2ZsdXNoICRodHRwQmFja2VuZC5mbHVzaCgpfSB0byBmbHVzaCBlYWNoIHBlbmRpbmdcbiAgICAgKiByZXF1ZXN0IHVzaW5nIHRyYWluZWQgcmVzcG9uc2VzLlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogJGh0dHBCYWNrZW5kLmV4cGVjdEdFVCguLi4pO1xuICAgICAqICRodHRwLmdldCguLi4pO1xuICAgICAqICRodHRwQmFja2VuZC5mbHVzaCgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMgRGVwcmVjYXRpb24gTm90aWNlXG4gICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICAgICAqICAgVGhlIGAkaHR0cGAgbGVnYWN5IHByb21pc2UgbWV0aG9kcyBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAgaGF2ZSBiZWVuIGRlcHJlY2F0ZWQuXG4gICAgICogICBVc2UgdGhlIHN0YW5kYXJkIGB0aGVuYCBtZXRob2QgaW5zdGVhZC5cbiAgICAgKiAgIElmIHtAbGluayAkaHR0cFByb3ZpZGVyI3VzZUxlZ2FjeVByb21pc2VFeHRlbnNpb25zIGAkaHR0cFByb3ZpZGVyLnVzZUxlZ2FjeVByb21pc2VFeHRlbnNpb25zYH0gaXMgc2V0IHRvXG4gICAgICogICBgZmFsc2VgIHRoZW4gdGhlc2UgbWV0aG9kcyB3aWxsIHRocm93IHtAbGluayAkaHR0cDpsZWdhY3kgYCRodHRwL2xlZ2FjeWB9IGVycm9yLlxuICAgICAqIDwvZGl2PlxuICAgICAqXG4gICAgICogIyMgU2V0dGluZyBIVFRQIEhlYWRlcnNcbiAgICAgKlxuICAgICAqIFRoZSAkaHR0cCBzZXJ2aWNlIHdpbGwgYXV0b21hdGljYWxseSBhZGQgY2VydGFpbiBIVFRQIGhlYWRlcnMgdG8gYWxsIHJlcXVlc3RzLiBUaGVzZSBkZWZhdWx0c1xuICAgICAqIGNhbiBiZSBmdWxseSBjb25maWd1cmVkIGJ5IGFjY2Vzc2luZyB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVyc2AgY29uZmlndXJhdGlvblxuICAgICAqIG9iamVjdCwgd2hpY2ggY3VycmVudGx5IGNvbnRhaW5zIHRoaXMgZGVmYXVsdCBjb25maWd1cmF0aW9uOlxuICAgICAqXG4gICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbmAgKGhlYWRlcnMgdGhhdCBhcmUgY29tbW9uIGZvciBhbGwgcmVxdWVzdHMpOlxuICAgICAqICAgLSBgQWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqIC8gKmBcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucG9zdGA6IChoZWFkZXIgZGVmYXVsdHMgZm9yIFBPU1QgcmVxdWVzdHMpXG4gICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gXG4gICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnB1dGAgKGhlYWRlciBkZWZhdWx0cyBmb3IgUFVUIHJlcXVlc3RzKVxuICAgICAqICAgLSBgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uYFxuICAgICAqXG4gICAgICogVG8gYWRkIG9yIG92ZXJ3cml0ZSB0aGVzZSBkZWZhdWx0cywgc2ltcGx5IGFkZCBvciByZW1vdmUgYSBwcm9wZXJ0eSBmcm9tIHRoZXNlIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBvYmplY3RzLiBUbyBhZGQgaGVhZGVycyBmb3IgYW4gSFRUUCBtZXRob2Qgb3RoZXIgdGhhbiBQT1NUIG9yIFBVVCwgc2ltcGx5IGFkZCBhIG5ldyBvYmplY3RcbiAgICAgKiB3aXRoIHRoZSBsb3dlcmNhc2VkIEhUVFAgbWV0aG9kIG5hbWUgYXMgdGhlIGtleSwgZS5nLlxuICAgICAqIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0ID0geyAnTXktSGVhZGVyJyA6ICd2YWx1ZScgfWAuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdHMgY2FuIGFsc28gYmUgc2V0IGF0IHJ1bnRpbWUgdmlhIHRoZSBgJGh0dHAuZGVmYXVsdHNgIG9iamVjdCBpbiB0aGUgc2FtZVxuICAgICAqIGZhc2hpb24uIEZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogbW9kdWxlLnJ1bihmdW5jdGlvbigkaHR0cCkge1xuICAgICAqICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyBZbVZsY0RwaWIyOXcnXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiwgeW91IGNhbiBzdXBwbHkgYSBgaGVhZGVyc2AgcHJvcGVydHkgaW4gdGhlIGNvbmZpZyBvYmplY3QgcGFzc2VkIHdoZW5cbiAgICAgKiBjYWxsaW5nIGAkaHR0cChjb25maWcpYCwgd2hpY2ggb3ZlcnJpZGVzIHRoZSBkZWZhdWx0cyB3aXRob3V0IGNoYW5naW5nIHRoZW0gZ2xvYmFsbHkuXG4gICAgICpcbiAgICAgKiBUbyBleHBsaWNpdGx5IHJlbW92ZSBhIGhlYWRlciBhdXRvbWF0aWNhbGx5IGFkZGVkIHZpYSAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMgb24gYSBwZXIgcmVxdWVzdCBiYXNpcyxcbiAgICAgKiBVc2UgdGhlIGBoZWFkZXJzYCBwcm9wZXJ0eSwgc2V0dGluZyB0aGUgZGVzaXJlZCBoZWFkZXIgdG8gYHVuZGVmaW5lZGAuIEZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiB2YXIgcmVxID0ge1xuICAgICAqICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgKiAgdXJsOiAnaHR0cDovL2V4YW1wbGUuY29tJyxcbiAgICAgKiAgaGVhZGVyczoge1xuICAgICAqICAgICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWRcbiAgICAgKiAgfSxcbiAgICAgKiAgZGF0YTogeyB0ZXN0OiAndGVzdCcgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqICRodHRwKHJlcSkudGhlbihmdW5jdGlvbigpey4uLn0sIGZ1bmN0aW9uKCl7Li4ufSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyBUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlc1xuICAgICAqXG4gICAgICogQm90aCByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzIGNhbiBiZSB0cmFuc2Zvcm1lZCB1c2luZyB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnM6IGB0cmFuc2Zvcm1SZXF1ZXN0YFxuICAgICAqIGFuZCBgdHJhbnNmb3JtUmVzcG9uc2VgLiBUaGVzZSBwcm9wZXJ0aWVzIGNhbiBiZSBhIHNpbmdsZSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdHJhbnNmb3JtZWQgdmFsdWUgKGBmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpYCkgb3IgYW4gYXJyYXkgb2Ygc3VjaCB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnMsXG4gICAgICogd2hpY2ggYWxsb3dzIHlvdSB0byBgcHVzaGAgb3IgYHVuc2hpZnRgIGEgbmV3IHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIGludG8gdGhlIHRyYW5zZm9ybWF0aW9uIGNoYWluLlxuICAgICAqXG4gICAgICogIyMjIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zXG4gICAgICpcbiAgICAgKiBUaGUgYCRodHRwUHJvdmlkZXJgIHByb3ZpZGVyIGFuZCBgJGh0dHBgIHNlcnZpY2UgZXhwb3NlIGBkZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0YCBhbmRcbiAgICAgKiBgZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgIHByb3BlcnRpZXMuIElmIGEgcmVxdWVzdCBkb2VzIG5vdCBwcm92aWRlIGl0cyBvd24gdHJhbnNmb3JtYXRpb25zXG4gICAgICogdGhlbiB0aGVzZSB3aWxsIGJlIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIGF1Z21lbnQgb3IgcmVwbGFjZSB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnMgYnkgbW9kaWZ5aW5nIHRoZXNlIHByb3BlcnRpZXMgYnkgYWRkaW5nIHRvIG9yXG4gICAgICogcmVwbGFjaW5nIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEFuZ3VsYXIgcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBkZWZhdWx0IHRyYW5zZm9ybWF0aW9uczpcbiAgICAgKlxuICAgICAqIFJlcXVlc3QgdHJhbnNmb3JtYXRpb25zIChgJGh0dHBQcm92aWRlci5kZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0YCBhbmQgYCRodHRwLmRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgKTpcbiAgICAgKlxuICAgICAqIC0gSWYgdGhlIGBkYXRhYCBwcm9wZXJ0eSBvZiB0aGUgcmVxdWVzdCBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWlucyBhbiBvYmplY3QsIHNlcmlhbGl6ZSBpdFxuICAgICAqICAgaW50byBKU09OIGZvcm1hdC5cbiAgICAgKlxuICAgICAqIFJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucyAoYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgIGFuZCBgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgKTpcbiAgICAgKlxuICAgICAqICAtIElmIFhTUkYgcHJlZml4IGlzIGRldGVjdGVkLCBzdHJpcCBpdCAoc2VlIFNlY3VyaXR5IENvbnNpZGVyYXRpb25zIHNlY3Rpb24gYmVsb3cpLlxuICAgICAqICAtIElmIEpTT04gcmVzcG9uc2UgaXMgZGV0ZWN0ZWQsIGRlc2VyaWFsaXplIGl0IHVzaW5nIGEgSlNPTiBwYXJzZXIuXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIyBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9ucyBQZXIgUmVxdWVzdFxuICAgICAqXG4gICAgICogSWYgeW91IHdpc2ggb3ZlcnJpZGUgdGhlIHJlcXVlc3QvcmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zIG9ubHkgZm9yIGEgc2luZ2xlIHJlcXVlc3QgdGhlbiBwcm92aWRlXG4gICAgICogYHRyYW5zZm9ybVJlcXVlc3RgIGFuZC9vciBgdHJhbnNmb3JtUmVzcG9uc2VgIHByb3BlcnRpZXMgb24gdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHBhc3NlZFxuICAgICAqIGludG8gYCRodHRwYC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBpZiB5b3UgcHJvdmlkZSB0aGVzZSBwcm9wZXJ0aWVzIG9uIHRoZSBjb25maWcgb2JqZWN0IHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyB3aWxsIGJlXG4gICAgICogb3ZlcndyaXR0ZW4uIElmIHlvdSB3aXNoIHRvIGF1Z21lbnQgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIHRoZW4geW91IG11c3QgaW5jbHVkZSB0aGVtIGluIHlvdXJcbiAgICAgKiBsb2NhbCB0cmFuc2Zvcm1hdGlvbiBhcnJheS5cbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgY29kZSBkZW1vbnN0cmF0ZXMgYWRkaW5nIGEgbmV3IHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9uIHRvIGJlIHJ1biBhZnRlciB0aGUgZGVmYXVsdCByZXNwb25zZVxuICAgICAqIHRyYW5zZm9ybWF0aW9ucyBoYXZlIGJlZW4gcnVuLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBmdW5jdGlvbiBhcHBlbmRUcmFuc2Zvcm0oZGVmYXVsdHMsIHRyYW5zZm9ybSkge1xuICAgICAqXG4gICAgICogICAvLyBXZSBjYW4ndCBndWFyYW50ZWUgdGhhdCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbiBpcyBhbiBhcnJheVxuICAgICAqICAgZGVmYXVsdHMgPSBhbmd1bGFyLmlzQXJyYXkoZGVmYXVsdHMpID8gZGVmYXVsdHMgOiBbZGVmYXVsdHNdO1xuICAgICAqXG4gICAgICogICAvLyBBcHBlbmQgdGhlIG5ldyB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgZGVmYXVsdHNcbiAgICAgKiAgIHJldHVybiBkZWZhdWx0cy5jb25jYXQodHJhbnNmb3JtKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiAkaHR0cCh7XG4gICAgICogICB1cmw6ICcuLi4nLFxuICAgICAqICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgKiAgIHRyYW5zZm9ybVJlc3BvbnNlOiBhcHBlbmRUcmFuc2Zvcm0oJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2UsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgIHJldHVybiBkb1RyYW5zZm9ybSh2YWx1ZSk7XG4gICAgICogICB9KVxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBDYWNoaW5nXG4gICAgICpcbiAgICAgKiBUbyBlbmFibGUgY2FjaGluZywgc2V0IHRoZSByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gYGNhY2hlYCBwcm9wZXJ0eSB0byBgdHJ1ZWAgKHRvIHVzZSBkZWZhdWx0XG4gICAgICogY2FjaGUpIG9yIHRvIGEgY3VzdG9tIGNhY2hlIG9iamVjdCAoYnVpbHQgd2l0aCB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSBgJGNhY2hlRmFjdG9yeWB9KS5cbiAgICAgKiBXaGVuIHRoZSBjYWNoZSBpcyBlbmFibGVkLCBgJGh0dHBgIHN0b3JlcyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIGluIHRoZSBzcGVjaWZpZWRcbiAgICAgKiBjYWNoZS4gVGhlIG5leHQgdGltZSB0aGUgc2FtZSByZXF1ZXN0IGlzIG1hZGUsIHRoZSByZXNwb25zZSBpcyBzZXJ2ZWQgZnJvbSB0aGUgY2FjaGUgd2l0aG91dFxuICAgICAqIHNlbmRpbmcgYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgZXZlbiBpZiB0aGUgcmVzcG9uc2UgaXMgc2VydmVkIGZyb20gY2FjaGUsIGRlbGl2ZXJ5IG9mIHRoZSBkYXRhIGlzIGFzeW5jaHJvbm91cyBpblxuICAgICAqIHRoZSBzYW1lIHdheSB0aGF0IHJlYWwgcmVxdWVzdHMgYXJlLlxuICAgICAqXG4gICAgICogSWYgdGhlcmUgYXJlIG11bHRpcGxlIEdFVCByZXF1ZXN0cyBmb3IgdGhlIHNhbWUgVVJMIHRoYXQgc2hvdWxkIGJlIGNhY2hlZCB1c2luZyB0aGUgc2FtZVxuICAgICAqIGNhY2hlLCBidXQgdGhlIGNhY2hlIGlzIG5vdCBwb3B1bGF0ZWQgeWV0LCBvbmx5IG9uZSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgd2lsbCBiZSBtYWRlIGFuZFxuICAgICAqIHRoZSByZW1haW5pbmcgcmVxdWVzdHMgd2lsbCBiZSBmdWxmaWxsZWQgdXNpbmcgdGhlIHJlc3BvbnNlIGZyb20gdGhlIGZpcnN0IHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIGNoYW5nZSB0aGUgZGVmYXVsdCBjYWNoZSB0byBhIG5ldyBvYmplY3QgKGJ1aWx0IHdpdGhcbiAgICAgKiB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSBgJGNhY2hlRmFjdG9yeWB9KSBieSB1cGRhdGluZyB0aGVcbiAgICAgKiB7QGxpbmsgbmcuJGh0dHAjZGVmYXVsdHMgYCRodHRwLmRlZmF1bHRzLmNhY2hlYH0gcHJvcGVydHkuIEFsbCByZXF1ZXN0cyB3aG8gc2V0XG4gICAgICogdGhlaXIgYGNhY2hlYCBwcm9wZXJ0eSB0byBgdHJ1ZWAgd2lsbCBub3cgdXNlIHRoaXMgY2FjaGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogSWYgeW91IHNldCB0aGUgZGVmYXVsdCBjYWNoZSB0byBgZmFsc2VgIHRoZW4gb25seSByZXF1ZXN0cyB0aGF0IHNwZWNpZnkgdGhlaXIgb3duIGN1c3RvbVxuICAgICAqIGNhY2hlIG9iamVjdCB3aWxsIGJlIGNhY2hlZC5cbiAgICAgKlxuICAgICAqICMjIEludGVyY2VwdG9yc1xuICAgICAqXG4gICAgICogQmVmb3JlIHlvdSBzdGFydCBjcmVhdGluZyBpbnRlcmNlcHRvcnMsIGJlIHN1cmUgdG8gdW5kZXJzdGFuZCB0aGVcbiAgICAgKiB7QGxpbmsgbmcuJHEgJHEgYW5kIGRlZmVycmVkL3Byb21pc2UgQVBJc30uXG4gICAgICpcbiAgICAgKiBGb3IgcHVycG9zZXMgb2YgZ2xvYmFsIGVycm9yIGhhbmRsaW5nLCBhdXRoZW50aWNhdGlvbiwgb3IgYW55IGtpbmQgb2Ygc3luY2hyb25vdXMgb3JcbiAgICAgKiBhc3luY2hyb25vdXMgcHJlLXByb2Nlc3Npbmcgb2YgcmVxdWVzdCBvciBwb3N0cHJvY2Vzc2luZyBvZiByZXNwb25zZXMsIGl0IGlzIGRlc2lyYWJsZSB0byBiZVxuICAgICAqIGFibGUgdG8gaW50ZXJjZXB0IHJlcXVlc3RzIGJlZm9yZSB0aGV5IGFyZSBoYW5kZWQgdG8gdGhlIHNlcnZlciBhbmRcbiAgICAgKiByZXNwb25zZXMgYmVmb3JlIHRoZXkgYXJlIGhhbmRlZCBvdmVyIHRvIHRoZSBhcHBsaWNhdGlvbiBjb2RlIHRoYXRcbiAgICAgKiBpbml0aWF0ZWQgdGhlc2UgcmVxdWVzdHMuIFRoZSBpbnRlcmNlcHRvcnMgbGV2ZXJhZ2UgdGhlIHtAbGluayBuZy4kcVxuICAgICAqIHByb21pc2UgQVBJc30gdG8gZnVsZmlsbCB0aGlzIG5lZWQgZm9yIGJvdGggc3luY2hyb25vdXMgYW5kIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZy5cbiAgICAgKlxuICAgICAqIFRoZSBpbnRlcmNlcHRvcnMgYXJlIHNlcnZpY2UgZmFjdG9yaWVzIHRoYXQgYXJlIHJlZ2lzdGVyZWQgd2l0aCB0aGUgYCRodHRwUHJvdmlkZXJgIGJ5XG4gICAgICogYWRkaW5nIHRoZW0gdG8gdGhlIGAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9yc2AgYXJyYXkuIFRoZSBmYWN0b3J5IGlzIGNhbGxlZCBhbmRcbiAgICAgKiBpbmplY3RlZCB3aXRoIGRlcGVuZGVuY2llcyAoaWYgc3BlY2lmaWVkKSBhbmQgcmV0dXJucyB0aGUgaW50ZXJjZXB0b3IuXG4gICAgICpcbiAgICAgKiBUaGVyZSBhcmUgdHdvIGtpbmRzIG9mIGludGVyY2VwdG9ycyAoYW5kIHR3byBraW5kcyBvZiByZWplY3Rpb24gaW50ZXJjZXB0b3JzKTpcbiAgICAgKlxuICAgICAqICAgKiBgcmVxdWVzdGA6IGludGVyY2VwdG9ycyBnZXQgY2FsbGVkIHdpdGggYSBodHRwIHtAbGluayAkaHR0cCN1c2FnZSBjb25maWd9IG9iamVjdC4gVGhlIGZ1bmN0aW9uIGlzIGZyZWUgdG9cbiAgICAgKiAgICAgbW9kaWZ5IHRoZSBgY29uZmlnYCBvYmplY3Qgb3IgY3JlYXRlIGEgbmV3IG9uZS4gVGhlIGZ1bmN0aW9uIG5lZWRzIHRvIHJldHVybiB0aGUgYGNvbmZpZ2BcbiAgICAgKiAgICAgb2JqZWN0IGRpcmVjdGx5LCBvciBhIHByb21pc2UgY29udGFpbmluZyB0aGUgYGNvbmZpZ2Agb3IgYSBuZXcgYGNvbmZpZ2Agb2JqZWN0LlxuICAgICAqICAgKiBgcmVxdWVzdEVycm9yYDogaW50ZXJjZXB0b3IgZ2V0cyBjYWxsZWQgd2hlbiBhIHByZXZpb3VzIGludGVyY2VwdG9yIHRocmV3IGFuIGVycm9yIG9yXG4gICAgICogICAgIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uXG4gICAgICogICAqIGByZXNwb25zZWA6IGludGVyY2VwdG9ycyBnZXQgY2FsbGVkIHdpdGggaHR0cCBgcmVzcG9uc2VgIG9iamVjdC4gVGhlIGZ1bmN0aW9uIGlzIGZyZWUgdG9cbiAgICAgKiAgICAgbW9kaWZ5IHRoZSBgcmVzcG9uc2VgIG9iamVjdCBvciBjcmVhdGUgYSBuZXcgb25lLiBUaGUgZnVuY3Rpb24gbmVlZHMgdG8gcmV0dXJuIHRoZSBgcmVzcG9uc2VgXG4gICAgICogICAgIG9iamVjdCBkaXJlY3RseSwgb3IgYXMgYSBwcm9taXNlIGNvbnRhaW5pbmcgdGhlIGByZXNwb25zZWAgb3IgYSBuZXcgYHJlc3BvbnNlYCBvYmplY3QuXG4gICAgICogICAqIGByZXNwb25zZUVycm9yYDogaW50ZXJjZXB0b3IgZ2V0cyBjYWxsZWQgd2hlbiBhIHByZXZpb3VzIGludGVyY2VwdG9yIHRocmV3IGFuIGVycm9yIG9yXG4gICAgICogICAgIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uXG4gICAgICpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICAvLyByZWdpc3RlciB0aGUgaW50ZXJjZXB0b3IgYXMgYSBzZXJ2aWNlXG4gICAgICogICAkcHJvdmlkZS5mYWN0b3J5KCdteUh0dHBJbnRlcmNlcHRvcicsIGZ1bmN0aW9uKCRxLCBkZXBlbmRlbmN5MSwgZGVwZW5kZW5jeTIpIHtcbiAgICAgKiAgICAgcmV0dXJuIHtcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcbiAgICAgKiAgICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3NcbiAgICAgKiAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgJ3JlcXVlc3RFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yXG4gICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZWplY3Rpb24pKSB7XG4gICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZVxuICAgICAqICAgICAgICAgfVxuICAgICAqICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAqICAgICAgIH0sXG4gICAgICpcbiAgICAgKlxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAgJ3Jlc3BvbnNlJzogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBzdWNjZXNzXG4gICAgICogICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgJ3Jlc3BvbnNlRXJyb3InOiBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBlcnJvclxuICAgICAqICAgICAgICAgaWYgKGNhblJlY292ZXIocmVqZWN0aW9uKSkge1xuICAgICAqICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VPck5ld1Byb21pc2VcbiAgICAgKiAgICAgICAgIH1cbiAgICAgKiAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH07XG4gICAgICogICB9KTtcbiAgICAgKlxuICAgICAqICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnbXlIdHRwSW50ZXJjZXB0b3InKTtcbiAgICAgKlxuICAgICAqXG4gICAgICogICAvLyBhbHRlcm5hdGl2ZWx5LCByZWdpc3RlciB0aGUgaW50ZXJjZXB0b3IgdmlhIGFuIGFub255bW91cyBmYWN0b3J5XG4gICAgICogICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKGZ1bmN0aW9uKCRxLCBkZXBlbmRlbmN5MSwgZGVwZW5kZW5jeTIpIHtcbiAgICAgKiAgICAgcmV0dXJuIHtcbiAgICAgKiAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZVxuICAgICAqICAgICAgIH0sXG4gICAgICpcbiAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAqICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmVcbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH07XG4gICAgICogICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIFNlY3VyaXR5IENvbnNpZGVyYXRpb25zXG4gICAgICpcbiAgICAgKiBXaGVuIGRlc2lnbmluZyB3ZWIgYXBwbGljYXRpb25zLCBjb25zaWRlciBzZWN1cml0eSB0aHJlYXRzIGZyb206XG4gICAgICpcbiAgICAgKiAtIFtKU09OIHZ1bG5lcmFiaWxpdHldKGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweClcbiAgICAgKiAtIFtYU1JGXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb3NzLXNpdGVfcmVxdWVzdF9mb3JnZXJ5KVxuICAgICAqXG4gICAgICogQm90aCBzZXJ2ZXIgYW5kIHRoZSBjbGllbnQgbXVzdCBjb29wZXJhdGUgaW4gb3JkZXIgdG8gZWxpbWluYXRlIHRoZXNlIHRocmVhdHMuIEFuZ3VsYXIgY29tZXNcbiAgICAgKiBwcmUtY29uZmlndXJlZCB3aXRoIHN0cmF0ZWdpZXMgdGhhdCBhZGRyZXNzIHRoZXNlIGlzc3VlcywgYnV0IGZvciB0aGlzIHRvIHdvcmsgYmFja2VuZCBzZXJ2ZXJcbiAgICAgKiBjb29wZXJhdGlvbiBpcyByZXF1aXJlZC5cbiAgICAgKlxuICAgICAqICMjIyBKU09OIFZ1bG5lcmFiaWxpdHkgUHJvdGVjdGlvblxuICAgICAqXG4gICAgICogQSBbSlNPTiB2dWxuZXJhYmlsaXR5XShodHRwOi8vaGFhY2tlZC5jb20vYXJjaGl2ZS8yMDA4LzExLzIwL2FuYXRvbXktb2YtYS1zdWJ0bGUtanNvbi12dWxuZXJhYmlsaXR5LmFzcHgpXG4gICAgICogYWxsb3dzIHRoaXJkIHBhcnR5IHdlYnNpdGUgdG8gdHVybiB5b3VyIEpTT04gcmVzb3VyY2UgVVJMIGludG9cbiAgICAgKiBbSlNPTlBdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlApIHJlcXVlc3QgdW5kZXIgc29tZSBjb25kaXRpb25zLiBUb1xuICAgICAqIGNvdW50ZXIgdGhpcyB5b3VyIHNlcnZlciBjYW4gcHJlZml4IGFsbCBKU09OIHJlcXVlc3RzIHdpdGggZm9sbG93aW5nIHN0cmluZyBgXCIpXX0nLFxcblwiYC5cbiAgICAgKiBBbmd1bGFyIHdpbGwgYXV0b21hdGljYWxseSBzdHJpcCB0aGUgcHJlZml4IGJlZm9yZSBwcm9jZXNzaW5nIGl0IGFzIEpTT04uXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZSBpZiB5b3VyIHNlcnZlciBuZWVkcyB0byByZXR1cm46XG4gICAgICogYGBganNcbiAgICAgKiBbJ29uZScsJ3R3byddXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiB3aGljaCBpcyB2dWxuZXJhYmxlIHRvIGF0dGFjaywgeW91ciBzZXJ2ZXIgY2FuIHJldHVybjpcbiAgICAgKiBgYGBqc1xuICAgICAqICldfScsXG4gICAgICogWydvbmUnLCd0d28nXVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQW5ndWxhciB3aWxsIHN0cmlwIHRoZSBwcmVmaXgsIGJlZm9yZSBwcm9jZXNzaW5nIHRoZSBKU09OLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyMgQ3Jvc3MgU2l0ZSBSZXF1ZXN0IEZvcmdlcnkgKFhTUkYpIFByb3RlY3Rpb25cbiAgICAgKlxuICAgICAqIFtYU1JGXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb3NzLXNpdGVfcmVxdWVzdF9mb3JnZXJ5KSBpcyBhIHRlY2huaXF1ZSBieSB3aGljaFxuICAgICAqIGFuIHVuYXV0aG9yaXplZCBzaXRlIGNhbiBnYWluIHlvdXIgdXNlcidzIHByaXZhdGUgZGF0YS4gQW5ndWxhciBwcm92aWRlcyBhIG1lY2hhbmlzbVxuICAgICAqIHRvIGNvdW50ZXIgWFNSRi4gV2hlbiBwZXJmb3JtaW5nIFhIUiByZXF1ZXN0cywgdGhlICRodHRwIHNlcnZpY2UgcmVhZHMgYSB0b2tlbiBmcm9tIGEgY29va2llXG4gICAgICogKGJ5IGRlZmF1bHQsIGBYU1JGLVRPS0VOYCkgYW5kIHNldHMgaXQgYXMgYW4gSFRUUCBoZWFkZXIgKGBYLVhTUkYtVE9LRU5gKS4gU2luY2Ugb25seVxuICAgICAqIEphdmFTY3JpcHQgdGhhdCBydW5zIG9uIHlvdXIgZG9tYWluIGNvdWxkIHJlYWQgdGhlIGNvb2tpZSwgeW91ciBzZXJ2ZXIgY2FuIGJlIGFzc3VyZWQgdGhhdFxuICAgICAqIHRoZSBYSFIgY2FtZSBmcm9tIEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbi4gVGhlIGhlYWRlciB3aWxsIG5vdCBiZSBzZXQgZm9yXG4gICAgICogY3Jvc3MtZG9tYWluIHJlcXVlc3RzLlxuICAgICAqXG4gICAgICogVG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhpcywgeW91ciBzZXJ2ZXIgbmVlZHMgdG8gc2V0IGEgdG9rZW4gaW4gYSBKYXZhU2NyaXB0IHJlYWRhYmxlIHNlc3Npb25cbiAgICAgKiBjb29raWUgY2FsbGVkIGBYU1JGLVRPS0VOYCBvbiB0aGUgZmlyc3QgSFRUUCBHRVQgcmVxdWVzdC4gT24gc3Vic2VxdWVudCBYSFIgcmVxdWVzdHMgdGhlXG4gICAgICogc2VydmVyIGNhbiB2ZXJpZnkgdGhhdCB0aGUgY29va2llIG1hdGNoZXMgYFgtWFNSRi1UT0tFTmAgSFRUUCBoZWFkZXIsIGFuZCB0aGVyZWZvcmUgYmUgc3VyZVxuICAgICAqIHRoYXQgb25seSBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4gY291bGQgaGF2ZSBzZW50IHRoZSByZXF1ZXN0LiBUaGUgdG9rZW4gbXVzdCBiZVxuICAgICAqIHVuaXF1ZSBmb3IgZWFjaCB1c2VyIGFuZCBtdXN0IGJlIHZlcmlmaWFibGUgYnkgdGhlIHNlcnZlciAodG8gcHJldmVudCB0aGUgSmF2YVNjcmlwdCBmcm9tXG4gICAgICogbWFraW5nIHVwIGl0cyBvd24gdG9rZW5zKS4gV2UgcmVjb21tZW5kIHRoYXQgdGhlIHRva2VuIGlzIGEgZGlnZXN0IG9mIHlvdXIgc2l0ZSdzXG4gICAgICogYXV0aGVudGljYXRpb24gY29va2llIHdpdGggYSBbc2FsdF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2FsdF8oY3J5cHRvZ3JhcGh5JiM0MTspXG4gICAgICogZm9yIGFkZGVkIHNlY3VyaXR5LlxuICAgICAqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGhlYWRlcnMgY2FuIGJlIHNwZWNpZmllZCB1c2luZyB0aGUgeHNyZkhlYWRlck5hbWUgYW5kIHhzcmZDb29raWVOYW1lXG4gICAgICogcHJvcGVydGllcyBvZiBlaXRoZXIgJGh0dHBQcm92aWRlci5kZWZhdWx0cyBhdCBjb25maWctdGltZSwgJGh0dHAuZGVmYXVsdHMgYXQgcnVuLXRpbWUsXG4gICAgICogb3IgdGhlIHBlci1yZXF1ZXN0IGNvbmZpZyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBJbiBvcmRlciB0byBwcmV2ZW50IGNvbGxpc2lvbnMgaW4gZW52aXJvbm1lbnRzIHdoZXJlIG11bHRpcGxlIEFuZ3VsYXIgYXBwcyBzaGFyZSB0aGVcbiAgICAgKiBzYW1lIGRvbWFpbiBvciBzdWJkb21haW4sIHdlIHJlY29tbWVuZCB0aGF0IGVhY2ggYXBwbGljYXRpb24gdXNlcyB1bmlxdWUgY29va2llIG5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIE9iamVjdCBkZXNjcmliaW5nIHRoZSByZXF1ZXN0IHRvIGJlIG1hZGUgYW5kIGhvdyBpdCBzaG91bGQgYmVcbiAgICAgKiAgICBwcm9jZXNzZWQuIFRoZSBvYmplY3QgaGFzIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAqXG4gICAgICogICAgLSAqKm1ldGhvZCoqIOKAkyBge3N0cmluZ31gIOKAkyBIVFRQIG1ldGhvZCAoZS5nLiAnR0VUJywgJ1BPU1QnLCBldGMpXG4gICAgICogICAgLSAqKnVybCoqIOKAkyBge3N0cmluZ31gIOKAkyBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkLlxuICAgICAqICAgIC0gKipwYXJhbXMqKiDigJMgYHtPYmplY3QuPHN0cmluZ3xPYmplY3Q+fWAg4oCTIE1hcCBvZiBzdHJpbmdzIG9yIG9iamVjdHMgd2hpY2ggd2lsbCBiZSBzZXJpYWxpemVkXG4gICAgICogICAgICB3aXRoIHRoZSBgcGFyYW1TZXJpYWxpemVyYCBhbmQgYXBwZW5kZWQgYXMgR0VUIHBhcmFtZXRlcnMuXG4gICAgICogICAgLSAqKmRhdGEqKiDigJMgYHtzdHJpbmd8T2JqZWN0fWAg4oCTIERhdGEgdG8gYmUgc2VudCBhcyB0aGUgcmVxdWVzdCBtZXNzYWdlIGRhdGEuXG4gICAgICogICAgLSAqKmhlYWRlcnMqKiDigJMgYHtPYmplY3R9YCDigJMgTWFwIG9mIHN0cmluZ3Mgb3IgZnVuY3Rpb25zIHdoaWNoIHJldHVybiBzdHJpbmdzIHJlcHJlc2VudGluZ1xuICAgICAqICAgICAgSFRUUCBoZWFkZXJzIHRvIHNlbmQgdG8gdGhlIHNlcnZlci4gSWYgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIGlzIG51bGwsIHRoZVxuICAgICAqICAgICAgaGVhZGVyIHdpbGwgbm90IGJlIHNlbnQuIEZ1bmN0aW9ucyBhY2NlcHQgYSBjb25maWcgb2JqZWN0IGFzIGFuIGFyZ3VtZW50LlxuICAgICAqICAgIC0gKip4c3JmSGVhZGVyTmFtZSoqIOKAkyBge3N0cmluZ31gIOKAkyBOYW1lIG9mIEhUVFAgaGVhZGVyIHRvIHBvcHVsYXRlIHdpdGggdGhlIFhTUkYgdG9rZW4uXG4gICAgICogICAgLSAqKnhzcmZDb29raWVOYW1lKiog4oCTIGB7c3RyaW5nfWAg4oCTIE5hbWUgb2YgY29va2llIGNvbnRhaW5pbmcgdGhlIFhTUkYgdG9rZW4uXG4gICAgICogICAgLSAqKnRyYW5zZm9ybVJlcXVlc3QqKiDigJNcbiAgICAgKiAgICAgIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcil8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpPn1gIOKAk1xuICAgICAqICAgICAgdHJhbnNmb3JtIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN1Y2ggZnVuY3Rpb25zLiBUaGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHRha2VzIHRoZSBodHRwXG4gICAgICogICAgICByZXF1ZXN0IGJvZHkgYW5kIGhlYWRlcnMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgc2VyaWFsaXplZCkgdmVyc2lvbi5cbiAgICAgKiAgICAgIFNlZSB7QGxpbmsgbmcuJGh0dHAjb3ZlcnJpZGluZy10aGUtZGVmYXVsdC10cmFuc2Zvcm1hdGlvbnMtcGVyLXJlcXVlc3RcbiAgICAgKiAgICAgIE92ZXJyaWRpbmcgdGhlIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zfVxuICAgICAqICAgIC0gKip0cmFuc2Zvcm1SZXNwb25zZSoqIOKAk1xuICAgICAqICAgICAgYHtmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpPn1gIOKAk1xuICAgICAqICAgICAgdHJhbnNmb3JtIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN1Y2ggZnVuY3Rpb25zLiBUaGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHRha2VzIHRoZSBodHRwXG4gICAgICogICAgICByZXNwb25zZSBib2R5LCBoZWFkZXJzIGFuZCBzdGF0dXMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgZGVzZXJpYWxpemVkKSB2ZXJzaW9uLlxuICAgICAqICAgICAgU2VlIHtAbGluayBuZy4kaHR0cCNvdmVycmlkaW5nLXRoZS1kZWZhdWx0LXRyYW5zZm9ybWF0aW9ucy1wZXItcmVxdWVzdFxuICAgICAqICAgICAgT3ZlcnJpZGluZyB0aGUgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbmpxTGlrc31cbiAgICAgKiAgICAtICoqcGFyYW1TZXJpYWxpemVyKiogLSBge3N0cmluZ3xmdW5jdGlvbihPYmplY3Q8c3RyaW5nLHN0cmluZz4pOnN0cmluZ31gIC0gQSBmdW5jdGlvbiB1c2VkIHRvXG4gICAgICogICAgICBwcmVwYXJlIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgcmVxdWVzdCBwYXJhbWV0ZXJzIChzcGVjaWZpZWQgYXMgYW4gb2JqZWN0KS5cbiAgICAgKiAgICAgIElmIHNwZWNpZmllZCBhcyBzdHJpbmcsIGl0IGlzIGludGVycHJldGVkIGFzIGZ1bmN0aW9uIHJlZ2lzdGVyZWQgd2l0aCB0aGVcbiAgICAgKiAgICAgIHtAbGluayAkaW5qZWN0b3IgJGluamVjdG9yfSwgd2hpY2ggbWVhbnMgeW91IGNhbiBjcmVhdGUgeW91ciBvd24gc2VyaWFsaXplclxuICAgICAqICAgICAgYnkgcmVnaXN0ZXJpbmcgaXQgYXMgYSB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlIHNlcnZpY2V9LlxuICAgICAqICAgICAgVGhlIGRlZmF1bHQgc2VyaWFsaXplciBpcyB0aGUge0BsaW5rICRodHRwUGFyYW1TZXJpYWxpemVyICRodHRwUGFyYW1TZXJpYWxpemVyfTtcbiAgICAgKiAgICAgIGFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSB7QGxpbmsgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2V9XG4gICAgICogICAgLSAqKmNhY2hlKiog4oCTIGB7Ym9vbGVhbnxDYWNoZX1gIOKAkyBJZiB0cnVlLCBhIGRlZmF1bHQgJGh0dHAgY2FjaGUgd2lsbCBiZSB1c2VkIHRvIGNhY2hlIHRoZVxuICAgICAqICAgICAgR0VUIHJlcXVlc3QsIG90aGVyd2lzZSBpZiBhIGNhY2hlIGluc3RhbmNlIGJ1aWx0IHdpdGhcbiAgICAgKiAgICAgIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9LCB0aGlzIGNhY2hlIHdpbGwgYmUgdXNlZCBmb3JcbiAgICAgKiAgICAgIGNhY2hpbmcuXG4gICAgICogICAgLSAqKnRpbWVvdXQqKiDigJMgYHtudW1iZXJ8UHJvbWlzZX1gIOKAkyB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcywgb3Ige0BsaW5rIG5nLiRxIHByb21pc2V9XG4gICAgICogICAgICB0aGF0IHNob3VsZCBhYm9ydCB0aGUgcmVxdWVzdCB3aGVuIHJlc29sdmVkLlxuICAgICAqICAgIC0gKip3aXRoQ3JlZGVudGlhbHMqKiAtIGB7Ym9vbGVhbn1gIC0gd2hldGhlciB0byBzZXQgdGhlIGB3aXRoQ3JlZGVudGlhbHNgIGZsYWcgb24gdGhlXG4gICAgICogICAgICBYSFIgb2JqZWN0LiBTZWUgW3JlcXVlc3RzIHdpdGggY3JlZGVudGlhbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUVFAvQWNjZXNzX2NvbnRyb2xfQ09SUyNSZXF1ZXN0c193aXRoX2NyZWRlbnRpYWxzKVxuICAgICAqICAgICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICogICAgLSAqKnJlc3BvbnNlVHlwZSoqIC0gYHtzdHJpbmd9YCAtIHNlZVxuICAgICAqICAgICAgW1hNTEh0dHBSZXF1ZXN0LnJlc3BvbnNlVHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0I3htbGh0dHByZXF1ZXN0LXJlc3BvbnNldHlwZSkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IFJldHVybnMgYSB7QGxpbmsgbmcuJHEgYFByb21pc2V9YCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgdG8gYSByZXNwb25zZSBvYmplY3RcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHJlcXVlc3Qgc3VjY2VlZHMgb3IgZmFpbHMuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPE9iamVjdD59IHBlbmRpbmdSZXF1ZXN0cyBBcnJheSBvZiBjb25maWcgb2JqZWN0cyBmb3IgY3VycmVudGx5IHBlbmRpbmdcbiAgICAgKiAgIHJlcXVlc3RzLiBUaGlzIGlzIHByaW1hcmlseSBtZWFudCB0byBiZSB1c2VkIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG48ZXhhbXBsZSBtb2R1bGU9XCJodHRwRXhhbXBsZVwiPlxuPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgPGRpdiBuZy1jb250cm9sbGVyPVwiRmV0Y2hDb250cm9sbGVyXCI+XG4gICAgPHNlbGVjdCBuZy1tb2RlbD1cIm1ldGhvZFwiIGFyaWEtbGFiZWw9XCJSZXF1ZXN0IG1ldGhvZFwiPlxuICAgICAgPG9wdGlvbj5HRVQ8L29wdGlvbj5cbiAgICAgIDxvcHRpb24+SlNPTlA8L29wdGlvbj5cbiAgICA8L3NlbGVjdD5cbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVybFwiIHNpemU9XCI4MFwiIGFyaWEtbGFiZWw9XCJVUkxcIiAvPlxuICAgIDxidXR0b24gaWQ9XCJmZXRjaGJ0blwiIG5nLWNsaWNrPVwiZmV0Y2goKVwiPmZldGNoPC9idXR0b24+PGJyPlxuICAgIDxidXR0b24gaWQ9XCJzYW1wbGVnZXRidG5cIiBuZy1jbGljaz1cInVwZGF0ZU1vZGVsKCdHRVQnLCAnaHR0cC1oZWxsby5odG1sJylcIj5TYW1wbGUgR0VUPC9idXR0b24+XG4gICAgPGJ1dHRvbiBpZD1cInNhbXBsZWpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJyxcbiAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9ncmVldC5waHA/Y2FsbGJhY2s9SlNPTl9DQUxMQkFDSyZuYW1lPVN1cGVyJTIwSGVybycpXCI+XG4gICAgICBTYW1wbGUgSlNPTlBcbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGlkPVwiaW52YWxpZGpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJywgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9kb2VzbnRleGlzdCZjYWxsYmFjaz1KU09OX0NBTExCQUNLJylcIj5cbiAgICAgICAgSW52YWxpZCBKU09OUFxuICAgICAgPC9idXR0b24+XG4gICAgPHByZT5odHRwIHN0YXR1cyBjb2RlOiB7e3N0YXR1c319PC9wcmU+XG4gICAgPHByZT5odHRwIHJlc3BvbnNlIGRhdGE6IHt7ZGF0YX19PC9wcmU+XG4gIDwvZGl2PlxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICBhbmd1bGFyLm1vZHVsZSgnaHR0cEV4YW1wbGUnLCBbXSlcbiAgICAuY29udHJvbGxlcignRmV0Y2hDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLFxuICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHRlbXBsYXRlQ2FjaGUpIHtcbiAgICAgICAgJHNjb3BlLm1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAkc2NvcGUudXJsID0gJ2h0dHAtaGVsbG8uaHRtbCc7XG5cbiAgICAgICAgJHNjb3BlLmZldGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLmNvZGUgPSBudWxsO1xuICAgICAgICAgICRzY29wZS5yZXNwb25zZSA9IG51bGw7XG5cbiAgICAgICAgICAkaHR0cCh7bWV0aG9kOiAkc2NvcGUubWV0aG9kLCB1cmw6ICRzY29wZS51cmwsIGNhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLlxuICAgICAgICAgICAgdGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IHJlc3BvbnNlLmRhdGEgfHwgXCJSZXF1ZXN0IGZhaWxlZFwiO1xuICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS51cGRhdGVNb2RlbCA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsKSB7XG4gICAgICAgICAgJHNjb3BlLm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgICAgICAkc2NvcGUudXJsID0gdXJsO1xuICAgICAgICB9O1xuICAgICAgfV0pO1xuPC9maWxlPlxuPGZpbGUgbmFtZT1cImh0dHAtaGVsbG8uaHRtbFwiPlxuICBIZWxsbywgJGh0dHAhXG48L2ZpbGU+XG48ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gIHZhciBzdGF0dXMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3N0YXR1cycpKTtcbiAgdmFyIGRhdGEgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2RhdGEnKSk7XG4gIHZhciBmZXRjaEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2ZldGNoYnRuJykpO1xuICB2YXIgc2FtcGxlR2V0QnRuID0gZWxlbWVudChieS5pZCgnc2FtcGxlZ2V0YnRuJykpO1xuICB2YXIgc2FtcGxlSnNvbnBCdG4gPSBlbGVtZW50KGJ5LmlkKCdzYW1wbGVqc29ucGJ0bicpKTtcbiAgdmFyIGludmFsaWRKc29ucEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2ludmFsaWRqc29ucGJ0bicpKTtcblxuICBpdCgnc2hvdWxkIG1ha2UgYW4geGhyIEdFVCByZXF1ZXN0JywgZnVuY3Rpb24oKSB7XG4gICAgc2FtcGxlR2V0QnRuLmNsaWNrKCk7XG4gICAgZmV0Y2hCdG4uY2xpY2soKTtcbiAgICBleHBlY3Qoc3RhdHVzLmdldFRleHQoKSkudG9NYXRjaCgnMjAwJyk7XG4gICAgZXhwZWN0KGRhdGEuZ2V0VGV4dCgpKS50b01hdGNoKC9IZWxsbywgXFwkaHR0cCEvKTtcbiAgfSk7XG5cbi8vIENvbW1lbnRlZCBvdXQgZHVlIHRvIGZsYWtlcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzkxODVcbi8vIGl0KCdzaG91bGQgbWFrZSBhIEpTT05QIHJlcXVlc3QgdG8gYW5ndWxhcmpzLm9yZycsIGZ1bmN0aW9uKCkge1xuLy8gICBzYW1wbGVKc29ucEJ0bi5jbGljaygpO1xuLy8gICBmZXRjaEJ0bi5jbGljaygpO1xuLy8gICBleHBlY3Qoc3RhdHVzLmdldFRleHQoKSkudG9NYXRjaCgnMjAwJyk7XG4vLyAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgvU3VwZXIgSGVybyEvKTtcbi8vIH0pO1xuXG4gIGl0KCdzaG91bGQgbWFrZSBKU09OUCByZXF1ZXN0IHRvIGludmFsaWQgVVJMIGFuZCBpbnZva2UgdGhlIGVycm9yIGhhbmRsZXInLFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgaW52YWxpZEpzb25wQnRuLmNsaWNrKCk7XG4gICAgZmV0Y2hCdG4uY2xpY2soKTtcbiAgICBleHBlY3Qoc3RhdHVzLmdldFRleHQoKSkudG9NYXRjaCgnMCcpO1xuICAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgnUmVxdWVzdCBmYWlsZWQnKTtcbiAgfSk7XG48L2ZpbGU+XG48L2V4YW1wbGU+XG4gICAgICovXG4gICAgZnVuY3Rpb24gJGh0dHAocmVxdWVzdENvbmZpZykge1xuXG4gICAgICBpZiAoIWFuZ3VsYXIuaXNPYmplY3QocmVxdWVzdENvbmZpZykpIHtcbiAgICAgICAgdGhyb3cgbWluRXJyKCckaHR0cCcpKCdiYWRyZXEnLCAnSHR0cCByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gbXVzdCBiZSBhbiBvYmplY3QuICBSZWNlaXZlZDogezB9JywgcmVxdWVzdENvbmZpZyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb25maWcgPSBleHRlbmQoe1xuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0LFxuICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZTogZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICAgIHBhcmFtU2VyaWFsaXplcjogZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyXG4gICAgICB9LCByZXF1ZXN0Q29uZmlnKTtcblxuICAgICAgY29uZmlnLmhlYWRlcnMgPSBtZXJnZUhlYWRlcnMocmVxdWVzdENvbmZpZyk7XG4gICAgICBjb25maWcubWV0aG9kID0gdXBwZXJjYXNlKGNvbmZpZy5tZXRob2QpO1xuICAgICAgY29uZmlnLnBhcmFtU2VyaWFsaXplciA9IGlzU3RyaW5nKGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIpID9cbiAgICAgICAgJGluamVjdG9yLmdldChjb25maWcucGFyYW1TZXJpYWxpemVyKSA6IGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXI7XG5cbiAgICAgIHZhciBzZXJ2ZXJSZXF1ZXN0ID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHZhciBoZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgICAgIHZhciByZXFEYXRhID0gdHJhbnNmb3JtRGF0YShjb25maWcuZGF0YSwgaGVhZGVyc0dldHRlcihoZWFkZXJzKSwgdW5kZWZpbmVkLCBjb25maWcudHJhbnNmb3JtUmVxdWVzdCk7XG5cbiAgICAgICAgLy8gc3RyaXAgY29udGVudC10eXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChyZXFEYXRhKSkge1xuICAgICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24odmFsdWUsIGhlYWRlcikge1xuICAgICAgICAgICAgaWYgKGxvd2VyY2FzZShoZWFkZXIpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBoZWFkZXJzW2hlYWRlcl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykgJiYgIWlzVW5kZWZpbmVkKGRlZmF1bHRzLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgICAgICBjb25maWcud2l0aENyZWRlbnRpYWxzID0gZGVmYXVsdHMud2l0aENyZWRlbnRpYWxzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2VuZCByZXF1ZXN0XG4gICAgICAgIHJldHVybiBzZW5kUmVxKGNvbmZpZywgcmVxRGF0YSkudGhlbih0cmFuc2Zvcm1SZXNwb25zZSwgdHJhbnNmb3JtUmVzcG9uc2UpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGNoYWluID0gW3NlcnZlclJlcXVlc3QsIHVuZGVmaW5lZF07XG4gICAgICB2YXIgcHJvbWlzZSA9ICRxLndoZW4oY29uZmlnKTtcblxuICAgICAgLy8gYXBwbHkgaW50ZXJjZXB0b3JzXG4gICAgICBmb3JFYWNoKHJldmVyc2VkSW50ZXJjZXB0b3JzLCBmdW5jdGlvbihpbnRlcmNlcHRvcikge1xuICAgICAgICBpZiAoaW50ZXJjZXB0b3IucmVxdWVzdCB8fCBpbnRlcmNlcHRvci5yZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLnJlcXVlc3QsIGludGVyY2VwdG9yLnJlcXVlc3RFcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVyY2VwdG9yLnJlc3BvbnNlIHx8IGludGVyY2VwdG9yLnJlc3BvbnNlRXJyb3IpIHtcbiAgICAgICAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLnJlc3BvbnNlLCBpbnRlcmNlcHRvci5yZXNwb25zZUVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHRoZW5GbiA9IGNoYWluLnNoaWZ0KCk7XG4gICAgICAgIHZhciByZWplY3RGbiA9IGNoYWluLnNoaWZ0KCk7XG5cbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbih0aGVuRm4sIHJlamVjdEZuKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHVzZUxlZ2FjeVByb21pc2UpIHtcbiAgICAgICAgcHJvbWlzZS5zdWNjZXNzID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICBhc3NlcnRBcmdGbihmbiwgJ2ZuJyk7XG5cbiAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGZuKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UuaGVhZGVycywgY29uZmlnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBwcm9taXNlLmVycm9yID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICBhc3NlcnRBcmdGbihmbiwgJ2ZuJyk7XG5cbiAgICAgICAgICBwcm9taXNlLnRoZW4obnVsbCwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGZuKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UuaGVhZGVycywgY29uZmlnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2Uuc3VjY2VzcyA9ICRodHRwTWluRXJyTGVnYWN5Rm4oJ3N1Y2Nlc3MnKTtcbiAgICAgICAgcHJvbWlzZS5lcnJvciA9ICRodHRwTWluRXJyTGVnYWN5Rm4oJ2Vycm9yJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuXG4gICAgICBmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShyZXNwb25zZSkge1xuICAgICAgICAvLyBtYWtlIGEgY29weSBzaW5jZSB0aGUgcmVzcG9uc2UgbXVzdCBiZSBjYWNoZWFibGVcbiAgICAgICAgdmFyIHJlc3AgPSBleHRlbmQoe30sIHJlc3BvbnNlKTtcbiAgICAgICAgcmVzcC5kYXRhID0gdHJhbnNmb3JtRGF0YShyZXNwb25zZS5kYXRhLCByZXNwb25zZS5oZWFkZXJzLCByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlKTtcbiAgICAgICAgcmV0dXJuIChpc1N1Y2Nlc3MocmVzcG9uc2Uuc3RhdHVzKSlcbiAgICAgICAgICA/IHJlc3BcbiAgICAgICAgICA6ICRxLnJlamVjdChyZXNwKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZXhlY3V0ZUhlYWRlckZucyhoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgdmFyIGhlYWRlckNvbnRlbnQsIHByb2Nlc3NlZEhlYWRlcnMgPSB7fTtcblxuICAgICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKGhlYWRlckZuLCBoZWFkZXIpIHtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihoZWFkZXJGbikpIHtcbiAgICAgICAgICAgIGhlYWRlckNvbnRlbnQgPSBoZWFkZXJGbihjb25maWcpO1xuICAgICAgICAgICAgaWYgKGhlYWRlckNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBwcm9jZXNzZWRIZWFkZXJzW2hlYWRlcl0gPSBoZWFkZXJDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzZWRIZWFkZXJzW2hlYWRlcl0gPSBoZWFkZXJGbjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9jZXNzZWRIZWFkZXJzO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBtZXJnZUhlYWRlcnMoY29uZmlnKSB7XG4gICAgICAgIHZhciBkZWZIZWFkZXJzID0gZGVmYXVsdHMuaGVhZGVycyxcbiAgICAgICAgICAgIHJlcUhlYWRlcnMgPSBleHRlbmQoe30sIGNvbmZpZy5oZWFkZXJzKSxcbiAgICAgICAgICAgIGRlZkhlYWRlck5hbWUsIGxvd2VyY2FzZURlZkhlYWRlck5hbWUsIHJlcUhlYWRlck5hbWU7XG5cbiAgICAgICAgZGVmSGVhZGVycyA9IGV4dGVuZCh7fSwgZGVmSGVhZGVycy5jb21tb24sIGRlZkhlYWRlcnNbbG93ZXJjYXNlKGNvbmZpZy5tZXRob2QpXSk7XG5cbiAgICAgICAgLy8gdXNpbmcgZm9yLWluIGluc3RlYWQgb2YgZm9yRWFjaCB0byBhdm9pZCB1bmVjZXNzYXJ5IGl0ZXJhdGlvbiBhZnRlciBoZWFkZXIgaGFzIGJlZW4gZm91bmRcbiAgICAgICAgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb246XG4gICAgICAgIGZvciAoZGVmSGVhZGVyTmFtZSBpbiBkZWZIZWFkZXJzKSB7XG4gICAgICAgICAgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSA9IGxvd2VyY2FzZShkZWZIZWFkZXJOYW1lKTtcblxuICAgICAgICAgIGZvciAocmVxSGVhZGVyTmFtZSBpbiByZXFIZWFkZXJzKSB7XG4gICAgICAgICAgICBpZiAobG93ZXJjYXNlKHJlcUhlYWRlck5hbWUpID09PSBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIGRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlcUhlYWRlcnNbZGVmSGVhZGVyTmFtZV0gPSBkZWZIZWFkZXJzW2RlZkhlYWRlck5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXhlY3V0ZSBpZiBoZWFkZXIgdmFsdWUgaXMgYSBmdW5jdGlvbiBmb3IgbWVyZ2VkIGhlYWRlcnNcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVIZWFkZXJGbnMocmVxSGVhZGVycywgc2hhbGxvd0NvcHkoY29uZmlnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjZ2V0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgR0VUYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2RlbGV0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYERFTEVURWAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNoZWFkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSEVBRGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNqc29ucFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEpTT05QYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QuXG4gICAgICogICAgICAgICAgICAgICAgICAgICBUaGUgbmFtZSBvZiB0aGUgY2FsbGJhY2sgc2hvdWxkIGJlIHRoZSBzdHJpbmcgYEpTT05fQ0FMTEJBQ0tgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG4gICAgY3JlYXRlU2hvcnRNZXRob2RzKCdnZXQnLCAnZGVsZXRlJywgJ2hlYWQnLCAnanNvbnAnKTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNwb3N0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUE9TVGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjcHV0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUFVUYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgKiBAbmFtZSAkaHR0cCNwYXRjaFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYFBBVENIYCByZXF1ZXN0LlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50XG4gICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAgKi9cbiAgICBjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YSgncG9zdCcsICdwdXQnLCAncGF0Y2gnKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgICAqIEBuYW1lICRodHRwI2RlZmF1bHRzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBSdW50aW1lIGVxdWl2YWxlbnQgb2YgdGhlIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzYCBwcm9wZXJ0eS4gQWxsb3dzIGNvbmZpZ3VyYXRpb24gb2ZcbiAgICAgICAgICogZGVmYXVsdCBoZWFkZXJzLCB3aXRoQ3JlZGVudGlhbHMgYXMgd2VsbCBhcyByZXF1ZXN0IGFuZCByZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBcIlNldHRpbmcgSFRUUCBIZWFkZXJzXCIgYW5kIFwiVHJhbnNmb3JtaW5nIFJlcXVlc3RzIGFuZCBSZXNwb25zZXNcIiBzZWN0aW9ucyBhYm92ZS5cbiAgICAgICAgICovXG4gICAgJGh0dHAuZGVmYXVsdHMgPSBkZWZhdWx0cztcblxuXG4gICAgcmV0dXJuICRodHRwO1xuXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVTaG9ydE1ldGhvZHMobmFtZXMpIHtcbiAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICAgICAgICByZXR1cm4gJGh0dHAoZXh0ZW5kKHt9LCBjb25maWcgfHwge30sIHtcbiAgICAgICAgICAgIG1ldGhvZDogbmFtZSxcbiAgICAgICAgICAgIHVybDogdXJsXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YShuYW1lKSB7XG4gICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAkaHR0cFtuYW1lXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuICRodHRwKGV4dGVuZCh7fSwgY29uZmlnIHx8IHt9LCB7XG4gICAgICAgICAgICBtZXRob2Q6IG5hbWUsXG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIE1ha2VzIHRoZSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogISEhIEFDQ0VTU0VTIENMT1NVUkUgVkFSUzpcbiAgICAgKiAkaHR0cEJhY2tlbmQsIGRlZmF1bHRzLCAkbG9nLCAkcm9vdFNjb3BlLCBkZWZhdWx0Q2FjaGUsICRodHRwLnBlbmRpbmdSZXF1ZXN0c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNlbmRSZXEoY29uZmlnLCByZXFEYXRhKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgIGNhY2hlLFxuICAgICAgICAgIGNhY2hlZFJlc3AsXG4gICAgICAgICAgcmVxSGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzLFxuICAgICAgICAgIHVybCA9IGJ1aWxkVXJsKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIoY29uZmlnLnBhcmFtcykpO1xuXG4gICAgICAkaHR0cC5wZW5kaW5nUmVxdWVzdHMucHVzaChjb25maWcpO1xuICAgICAgcHJvbWlzZS50aGVuKHJlbW92ZVBlbmRpbmdSZXEsIHJlbW92ZVBlbmRpbmdSZXEpO1xuXG5cbiAgICAgIGlmICgoY29uZmlnLmNhY2hlIHx8IGRlZmF1bHRzLmNhY2hlKSAmJiBjb25maWcuY2FjaGUgIT09IGZhbHNlICYmXG4gICAgICAgICAgKGNvbmZpZy5tZXRob2QgPT09ICdHRVQnIHx8IGNvbmZpZy5tZXRob2QgPT09ICdKU09OUCcpKSB7XG4gICAgICAgIGNhY2hlID0gaXNPYmplY3QoY29uZmlnLmNhY2hlKSA/IGNvbmZpZy5jYWNoZVxuICAgICAgICAgICAgICA6IGlzT2JqZWN0KGRlZmF1bHRzLmNhY2hlKSA/IGRlZmF1bHRzLmNhY2hlXG4gICAgICAgICAgICAgIDogZGVmYXVsdENhY2hlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGVkUmVzcCA9IGNhY2hlLmdldCh1cmwpO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgaWYgKGlzUHJvbWlzZUxpa2UoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgICAgIC8vIGNhY2hlZCByZXF1ZXN0IGhhcyBhbHJlYWR5IGJlZW4gc2VudCwgYnV0IHRoZXJlIGlzIG5vIHJlc3BvbnNlIHlldFxuICAgICAgICAgICAgY2FjaGVkUmVzcC50aGVuKHJlc29sdmVQcm9taXNlV2l0aFJlc3VsdCwgcmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2VydmluZyBmcm9tIGNhY2hlXG4gICAgICAgICAgICBpZiAoaXNBcnJheShjYWNoZWRSZXNwKSkge1xuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwWzFdLCBjYWNoZWRSZXNwWzBdLCBzaGFsbG93Q29weShjYWNoZWRSZXNwWzJdKSwgY2FjaGVkUmVzcFszXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwLCAyMDAsIHt9LCAnT0snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHV0IHRoZSBwcm9taXNlIGZvciB0aGUgbm9uLXRyYW5zZm9ybWVkIHJlc3BvbnNlIGludG8gY2FjaGUgYXMgYSBwbGFjZWhvbGRlclxuICAgICAgICAgIGNhY2hlLnB1dCh1cmwsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLy8gaWYgd2Ugd29uJ3QgaGF2ZSB0aGUgcmVzcG9uc2UgaW4gY2FjaGUsIHNldCB0aGUgeHNyZiBoZWFkZXJzIGFuZFxuICAgICAgLy8gc2VuZCB0aGUgcmVxdWVzdCB0byB0aGUgYmFja2VuZFxuICAgICAgaWYgKGlzVW5kZWZpbmVkKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgIHZhciB4c3JmVmFsdWUgPSB1cmxJc1NhbWVPcmlnaW4oY29uZmlnLnVybClcbiAgICAgICAgICAgID8gJCRjb29raWVSZWFkZXIoKVtjb25maWcueHNyZkNvb2tpZU5hbWUgfHwgZGVmYXVsdHMueHNyZkNvb2tpZU5hbWVdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICAgIHJlcUhlYWRlcnNbKGNvbmZpZy54c3JmSGVhZGVyTmFtZSB8fCBkZWZhdWx0cy54c3JmSGVhZGVyTmFtZSldID0geHNyZlZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgJGh0dHBCYWNrZW5kKGNvbmZpZy5tZXRob2QsIHVybCwgcmVxRGF0YSwgZG9uZSwgcmVxSGVhZGVycywgY29uZmlnLnRpbWVvdXQsXG4gICAgICAgICAgICBjb25maWcud2l0aENyZWRlbnRpYWxzLCBjb25maWcucmVzcG9uc2VUeXBlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBDYWxsYmFjayByZWdpc3RlcmVkIHRvICRodHRwQmFja2VuZCgpOlxuICAgICAgICogIC0gY2FjaGVzIHRoZSByZXNwb25zZSBpZiBkZXNpcmVkXG4gICAgICAgKiAgLSByZXNvbHZlcyB0aGUgcmF3ICRodHRwIHByb21pc2VcbiAgICAgICAqICAtIGNhbGxzICRhcHBseVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBkb25lKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpIHtcbiAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgaWYgKGlzU3VjY2VzcyhzdGF0dXMpKSB7XG4gICAgICAgICAgICBjYWNoZS5wdXQodXJsLCBbc3RhdHVzLCByZXNwb25zZSwgcGFyc2VIZWFkZXJzKGhlYWRlcnNTdHJpbmcpLCBzdGF0dXNUZXh0XSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBwcm9taXNlIGZyb20gdGhlIGNhY2hlXG4gICAgICAgICAgICBjYWNoZS5yZW1vdmUodXJsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlSHR0cFByb21pc2UoKSB7XG4gICAgICAgICAgcmVzb2x2ZVByb21pc2UocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXNlQXBwbHlBc3luYykge1xuICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5QXN5bmMocmVzb2x2ZUh0dHBQcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlSHR0cFByb21pc2UoKTtcbiAgICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVzb2x2ZXMgdGhlIHJhdyAkaHR0cCBwcm9taXNlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlUHJvbWlzZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBzdGF0dXNUZXh0KSB7XG4gICAgICAgIC8vc3RhdHVzOiBIVFRQIHJlc3BvbnNlIHN0YXR1cyBjb2RlLCAwLCAtMSAoYWJvcnRlZCBieSB0aW1lb3V0IC8gcHJvbWlzZSlcbiAgICAgICAgc3RhdHVzID0gc3RhdHVzID49IC0xID8gc3RhdHVzIDogMDtcblxuICAgICAgICAoaXNTdWNjZXNzKHN0YXR1cykgPyBkZWZlcnJlZC5yZXNvbHZlIDogZGVmZXJyZWQucmVqZWN0KSh7XG4gICAgICAgICAgZGF0YTogcmVzcG9uc2UsXG4gICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgICAgaGVhZGVyczogaGVhZGVyc0dldHRlcihoZWFkZXJzKSxcbiAgICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgICBzdGF0dXNUZXh0OiBzdGF0dXNUZXh0XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZXNvbHZlUHJvbWlzZVdpdGhSZXN1bHQocmVzdWx0KSB7XG4gICAgICAgIHJlc29sdmVQcm9taXNlKHJlc3VsdC5kYXRhLCByZXN1bHQuc3RhdHVzLCBzaGFsbG93Q29weShyZXN1bHQuaGVhZGVycygpKSwgcmVzdWx0LnN0YXR1c1RleHQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1vdmVQZW5kaW5nUmVxKCkge1xuICAgICAgICB2YXIgaWR4ID0gJGh0dHAucGVuZGluZ1JlcXVlc3RzLmluZGV4T2YoY29uZmlnKTtcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGJ1aWxkVXJsKHVybCwgc2VyaWFsaXplZFBhcmFtcykge1xuICAgICAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgICB1cmwgKz0gKCh1cmwuaW5kZXhPZignPycpID09IC0xKSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkeGhyRmFjdG9yeVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmFjdG9yeSBmdW5jdGlvbiB1c2VkIHRvIGNyZWF0ZSBYTUxIdHRwUmVxdWVzdCBvYmplY3RzLlxuICpcbiAqIFJlcGxhY2Ugb3IgZGVjb3JhdGUgdGhpcyBzZXJ2aWNlIHRvIGNyZWF0ZSB5b3VyIG93biBjdXN0b20gWE1MSHR0cFJlcXVlc3Qgb2JqZWN0cy5cbiAqXG4gKiBgYGBcbiAqIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKVxuICogLmZhY3RvcnkoJyR4aHJGYWN0b3J5JywgZnVuY3Rpb24oKSB7XG4gKiAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVYaHIobWV0aG9kLCB1cmwpIHtcbiAqICAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCh7bW96U3lzdGVtOiB0cnVlfSk7XG4gKiAgIH07XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgSFRUUCBtZXRob2Qgb2YgdGhlIHJlcXVlc3QgKEdFVCwgUE9TVCwgUFVULCAuLilcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVVJMIG9mIHRoZSByZXF1ZXN0LlxuICovXG5mdW5jdGlvbiAkeGhyRmFjdG9yeVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlWGhyKCkge1xuICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9O1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkaHR0cEJhY2tlbmRcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gKiBAcmVxdWlyZXMgJHhockZhY3RvcnlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUVFAgYmFja2VuZCB1c2VkIGJ5IHRoZSB7QGxpbmsgbmcuJGh0dHAgc2VydmljZX0gdGhhdCBkZWxlZ2F0ZXMgdG9cbiAqIFhNTEh0dHBSZXF1ZXN0IG9iamVjdCBvciBKU09OUCBhbmQgZGVhbHMgd2l0aCBicm93c2VyIGluY29tcGF0aWJpbGl0aWVzLlxuICpcbiAqIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byB1c2UgdGhpcyBzZXJ2aWNlIGRpcmVjdGx5LCBpbnN0ZWFkIHVzZSB0aGUgaGlnaGVyLWxldmVsIGFic3RyYWN0aW9uczpcbiAqIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gb3Ige0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlICRyZXNvdXJjZX0uXG4gKlxuICogRHVyaW5nIHRlc3RpbmcgdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBzd2FwcGVkIHdpdGgge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgbW9ja1xuICogJGh0dHBCYWNrZW5kfSB3aGljaCBjYW4gYmUgdHJhaW5lZCB3aXRoIHJlc3BvbnNlcy5cbiAqL1xuZnVuY3Rpb24gJEh0dHBCYWNrZW5kUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJGJyb3dzZXInLCAnJHdpbmRvdycsICckZG9jdW1lbnQnLCAnJHhockZhY3RvcnknLCBmdW5jdGlvbigkYnJvd3NlciwgJHdpbmRvdywgJGRvY3VtZW50LCAkeGhyRmFjdG9yeSkge1xuICAgIHJldHVybiBjcmVhdGVIdHRwQmFja2VuZCgkYnJvd3NlciwgJHhockZhY3RvcnksICRicm93c2VyLmRlZmVyLCAkd2luZG93LmFuZ3VsYXIuY2FsbGJhY2tzLCAkZG9jdW1lbnRbMF0pO1xuICB9XTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSHR0cEJhY2tlbmQoJGJyb3dzZXIsIGNyZWF0ZVhociwgJGJyb3dzZXJEZWZlciwgY2FsbGJhY2tzLCByYXdEb2N1bWVudCkge1xuICAvLyBUT0RPKHZvanRhKTogZml4IHRoZSBzaWduYXR1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBwb3N0LCBjYWxsYmFjaywgaGVhZGVycywgdGltZW91dCwgd2l0aENyZWRlbnRpYWxzLCByZXNwb25zZVR5cGUpIHtcbiAgICAkYnJvd3Nlci4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50KCk7XG4gICAgdXJsID0gdXJsIHx8ICRicm93c2VyLnVybCgpO1xuXG4gICAgaWYgKGxvd2VyY2FzZShtZXRob2QpID09ICdqc29ucCcpIHtcbiAgICAgIHZhciBjYWxsYmFja0lkID0gJ18nICsgKGNhbGxiYWNrcy5jb3VudGVyKyspLnRvU3RyaW5nKDM2KTtcbiAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmRhdGEgPSBkYXRhO1xuICAgICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0uY2FsbGVkID0gdHJ1ZTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBqc29ucERvbmUgPSBqc29ucFJlcSh1cmwucmVwbGFjZSgnSlNPTl9DQUxMQkFDSycsICdhbmd1bGFyLmNhbGxiYWNrcy4nICsgY2FsbGJhY2tJZCksXG4gICAgICAgICAgY2FsbGJhY2tJZCwgZnVuY3Rpb24oc3RhdHVzLCB0ZXh0KSB7XG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgc3RhdHVzLCBjYWxsYmFja3NbY2FsbGJhY2tJZF0uZGF0YSwgXCJcIiwgdGV4dCk7XG4gICAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXSA9IG5vb3A7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICB2YXIgeGhyID0gY3JlYXRlWGhyKG1ldGhvZCwgdXJsKTtcblxuICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiByZXF1ZXN0TG9hZGVkKCkge1xuICAgICAgICB2YXIgc3RhdHVzVGV4dCA9IHhoci5zdGF0dXNUZXh0IHx8ICcnO1xuXG4gICAgICAgIC8vIHJlc3BvbnNlVGV4dCBpcyB0aGUgb2xkLXNjaG9vbCB3YXkgb2YgcmV0cmlldmluZyByZXNwb25zZSAoc3VwcG9ydGVkIGJ5IElFOSlcbiAgICAgICAgLy8gcmVzcG9uc2UvcmVzcG9uc2VUeXBlIHByb3BlcnRpZXMgd2VyZSBpbnRyb2R1Y2VkIGluIFhIUiBMZXZlbDIgc3BlYyAoc3VwcG9ydGVkIGJ5IElFMTApXG4gICAgICAgIHZhciByZXNwb25zZSA9ICgncmVzcG9uc2UnIGluIHhocikgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0O1xuXG4gICAgICAgIC8vIG5vcm1hbGl6ZSBJRTkgYnVnIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwKVxuICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHhoci5zdGF0dXM7XG5cbiAgICAgICAgLy8gZml4IHN0YXR1cyBjb2RlIHdoZW4gaXQgaXMgMCAoMCBzdGF0dXMgaXMgdW5kb2N1bWVudGVkKS5cbiAgICAgICAgLy8gT2NjdXJzIHdoZW4gYWNjZXNzaW5nIGZpbGUgcmVzb3VyY2VzIG9yIG9uIEFuZHJvaWQgNC4xIHN0b2NrIGJyb3dzZXJcbiAgICAgICAgLy8gd2hpbGUgcmV0cmlldmluZyBmaWxlcyBmcm9tIGFwcGxpY2F0aW9uIGNhY2hlLlxuICAgICAgICBpZiAoc3RhdHVzID09PSAwKSB7XG4gICAgICAgICAgc3RhdHVzID0gcmVzcG9uc2UgPyAyMDAgOiB1cmxSZXNvbHZlKHVybCkucHJvdG9jb2wgPT0gJ2ZpbGUnID8gNDA0IDogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjayxcbiAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLFxuICAgICAgICAgICAgc3RhdHVzVGV4dCk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVxdWVzdEVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFRoZSByZXNwb25zZSBpcyBhbHdheXMgZW1wdHlcbiAgICAgICAgLy8gU2VlIGh0dHBzOi8veGhyLnNwZWMud2hhdHdnLm9yZy8jcmVxdWVzdC1lcnJvci1zdGVwcyBhbmQgaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbmV0d29yay1lcnJvclxuICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIC0xLCBudWxsLCBudWxsLCAnJyk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub25lcnJvciA9IHJlcXVlc3RFcnJvcjtcbiAgICAgIHhoci5vbmFib3J0ID0gcmVxdWVzdEVycm9yO1xuXG4gICAgICBpZiAod2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzcG9uc2VUeXBlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFdlYktpdCBhZGRlZCBzdXBwb3J0IGZvciB0aGUganNvbiByZXNwb25zZVR5cGUgdmFsdWUgb24gMDkvMDMvMjAxM1xuICAgICAgICAgIC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD03MzY0OC4gVmVyc2lvbnMgb2YgU2FmYXJpIHByaW9yIHRvIDcgYXJlXG4gICAgICAgICAgLy8ga25vd24gdG8gdGhyb3cgd2hlbiBzZXR0aW5nIHRoZSB2YWx1ZSBcImpzb25cIiBhcyB0aGUgcmVzcG9uc2UgdHlwZS4gT3RoZXIgb2xkZXJcbiAgICAgICAgICAvLyBicm93c2VycyBpbXBsZW1lbnRpbmcgdGhlIHJlc3BvbnNlVHlwZVxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gVGhlIGpzb24gcmVzcG9uc2UgdHlwZSBjYW4gYmUgaWdub3JlZCBpZiBub3Qgc3VwcG9ydGVkLCBiZWNhdXNlIEpTT04gcGF5bG9hZHMgYXJlXG4gICAgICAgICAgLy8gcGFyc2VkIG9uIHRoZSBjbGllbnQtc2lkZSByZWdhcmRsZXNzLlxuICAgICAgICAgIGlmIChyZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgeGhyLnNlbmQoaXNVbmRlZmluZWQocG9zdCkgPyBudWxsIDogcG9zdCk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICB2YXIgdGltZW91dElkID0gJGJyb3dzZXJEZWZlcih0aW1lb3V0UmVxdWVzdCwgdGltZW91dCk7XG4gICAgfSBlbHNlIGlmIChpc1Byb21pc2VMaWtlKHRpbWVvdXQpKSB7XG4gICAgICB0aW1lb3V0LnRoZW4odGltZW91dFJlcXVlc3QpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gdGltZW91dFJlcXVlc3QoKSB7XG4gICAgICBqc29ucERvbmUgJiYganNvbnBEb25lKCk7XG4gICAgICB4aHIgJiYgeGhyLmFib3J0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLCBzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0KSB7XG4gICAgICAvLyBjYW5jZWwgdGltZW91dCBhbmQgc3Vic2VxdWVudCB0aW1lb3V0IHByb21pc2UgcmVzb2x1dGlvblxuICAgICAgaWYgKGlzRGVmaW5lZCh0aW1lb3V0SWQpKSB7XG4gICAgICAgICRicm93c2VyRGVmZXIuY2FuY2VsKHRpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgICBqc29ucERvbmUgPSB4aHIgPSBudWxsO1xuXG4gICAgICBjYWxsYmFjayhzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0KTtcbiAgICAgICRicm93c2VyLiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Qobm9vcCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGpzb25wUmVxKHVybCwgY2FsbGJhY2tJZCwgZG9uZSkge1xuICAgIC8vIHdlIGNhbid0IHVzZSBqUXVlcnkvanFMaXRlIGhlcmUgYmVjYXVzZSBqUXVlcnkgZG9lcyBjcmF6eSBzdHVmZiB3aXRoIHNjcmlwdCBlbGVtZW50cywgZS5nLjpcbiAgICAvLyAtIGZldGNoZXMgbG9jYWwgc2NyaXB0cyB2aWEgWEhSIGFuZCBldmFscyB0aGVtXG4gICAgLy8gLSBhZGRzIGFuZCBpbW1lZGlhdGVseSByZW1vdmVzIHNjcmlwdCBlbGVtZW50cyBmcm9tIHRoZSBkb2N1bWVudFxuICAgIHZhciBzY3JpcHQgPSByYXdEb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSwgY2FsbGJhY2sgPSBudWxsO1xuICAgIHNjcmlwdC50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcbiAgICBzY3JpcHQuc3JjID0gdXJsO1xuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG5cbiAgICBjYWxsYmFjayA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oc2NyaXB0LCBcImxvYWRcIiwgY2FsbGJhY2spO1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKHNjcmlwdCwgXCJlcnJvclwiLCBjYWxsYmFjayk7XG4gICAgICByYXdEb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgdmFyIHN0YXR1cyA9IC0xO1xuICAgICAgdmFyIHRleHQgPSBcInVua25vd25cIjtcblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50eXBlID09PSBcImxvYWRcIiAmJiAhY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmNhbGxlZCkge1xuICAgICAgICAgIGV2ZW50ID0geyB0eXBlOiBcImVycm9yXCIgfTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gZXZlbnQudHlwZTtcbiAgICAgICAgc3RhdHVzID0gZXZlbnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICBkb25lKHN0YXR1cywgdGV4dCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGFkZEV2ZW50TGlzdGVuZXJGbihzY3JpcHQsIFwibG9hZFwiLCBjYWxsYmFjayk7XG4gICAgYWRkRXZlbnRMaXN0ZW5lckZuKHNjcmlwdCwgXCJlcnJvclwiLCBjYWxsYmFjayk7XG4gICAgcmF3RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfVxufVxuXG52YXIgJGludGVycG9sYXRlTWluRXJyID0gYW5ndWxhci4kaW50ZXJwb2xhdGVNaW5FcnIgPSBtaW5FcnIoJyRpbnRlcnBvbGF0ZScpO1xuJGludGVycG9sYXRlTWluRXJyLnRocm93Tm9jb25jYXQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHRocm93ICRpbnRlcnBvbGF0ZU1pbkVycignbm9jb25jYXQnLFxuICAgICAgXCJFcnJvciB3aGlsZSBpbnRlcnBvbGF0aW5nOiB7MH1cXG5TdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBkaXNhbGxvd3MgXCIgK1xuICAgICAgXCJpbnRlcnBvbGF0aW9ucyB0aGF0IGNvbmNhdGVuYXRlIG11bHRpcGxlIGV4cHJlc3Npb25zIHdoZW4gYSB0cnVzdGVkIHZhbHVlIGlzIFwiICtcbiAgICAgIFwicmVxdWlyZWQuICBTZWUgaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcuJHNjZVwiLCB0ZXh0KTtcbn07XG5cbiRpbnRlcnBvbGF0ZU1pbkVyci5pbnRlcnIgPSBmdW5jdGlvbih0ZXh0LCBlcnIpIHtcbiAgcmV0dXJuICRpbnRlcnBvbGF0ZU1pbkVycignaW50ZXJyJywgXCJDYW4ndCBpbnRlcnBvbGF0ZTogezB9XFxuezF9XCIsIHRleHQsIGVyci50b1N0cmluZygpKTtcbn07XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFVzZWQgZm9yIGNvbmZpZ3VyaW5nIHRoZSBpbnRlcnBvbGF0aW9uIG1hcmt1cC4gRGVmYXVsdHMgdG8gYHt7YCBhbmQgYH19YC5cbiAqXG4gKiBAZXhhbXBsZVxuPGV4YW1wbGUgbW9kdWxlPVwiY3VzdG9tSW50ZXJwb2xhdGlvbkFwcFwiPlxuPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbjxzY3JpcHQ+XG4gIHZhciBjdXN0b21JbnRlcnBvbGF0aW9uQXBwID0gYW5ndWxhci5tb2R1bGUoJ2N1c3RvbUludGVycG9sYXRpb25BcHAnLCBbXSk7XG5cbiAgY3VzdG9tSW50ZXJwb2xhdGlvbkFwcC5jb25maWcoZnVuY3Rpb24oJGludGVycG9sYXRlUHJvdmlkZXIpIHtcbiAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5zdGFydFN5bWJvbCgnLy8nKTtcbiAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5lbmRTeW1ib2woJy8vJyk7XG4gIH0pO1xuXG5cbiAgY3VzdG9tSW50ZXJwb2xhdGlvbkFwcC5jb250cm9sbGVyKCdEZW1vQ29udHJvbGxlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5sYWJlbCA9IFwiVGhpcyBiaW5kaW5nIGlzIGJyb3VnaHQgeW91IGJ5IC8vIGludGVycG9sYXRpb24gc3ltYm9scy5cIjtcbiAgfSk7XG48L3NjcmlwdD5cbjxkaXYgbmctYXBwPVwiQXBwXCIgbmctY29udHJvbGxlcj1cIkRlbW9Db250cm9sbGVyIGFzIGRlbW9cIj5cbiAgICAvL2RlbW8ubGFiZWwvL1xuPC9kaXY+XG48L2ZpbGU+XG48ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gIGl0KCdzaG91bGQgaW50ZXJwb2xhdGUgYmluZGluZyB3aXRoIGN1c3RvbSBzeW1ib2xzJywgZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnZGVtby5sYWJlbCcpKS5nZXRUZXh0KCkpLnRvQmUoJ1RoaXMgYmluZGluZyBpcyBicm91Z2h0IHlvdSBieSAvLyBpbnRlcnBvbGF0aW9uIHN5bWJvbHMuJyk7XG4gIH0pO1xuPC9maWxlPlxuPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkSW50ZXJwb2xhdGVQcm92aWRlcigpIHtcbiAgdmFyIHN0YXJ0U3ltYm9sID0gJ3t7JztcbiAgdmFyIGVuZFN5bWJvbCA9ICd9fSc7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGludGVycG9sYXRlUHJvdmlkZXIjc3RhcnRTeW1ib2xcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFN5bWJvbCB0byBkZW5vdGUgc3RhcnQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYHt7YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSB2YWx1ZSBuZXcgdmFsdWUgdG8gc2V0IHRoZSBzdGFydGluZyBzeW1ib2wgdG8uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8c2VsZn0gUmV0dXJucyB0aGUgc3ltYm9sIHdoZW4gdXNlZCBhcyBnZXR0ZXIgYW5kIHNlbGYgaWYgdXNlZCBhcyBzZXR0ZXIuXG4gICAqL1xuICB0aGlzLnN0YXJ0U3ltYm9sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHN0YXJ0U3ltYm9sID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlciNlbmRTeW1ib2xcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIGVuZCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBgfX1gLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIGVuZGluZyBzeW1ib2wgdG8uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8c2VsZn0gUmV0dXJucyB0aGUgc3ltYm9sIHdoZW4gdXNlZCBhcyBnZXR0ZXIgYW5kIHNlbGYgaWYgdXNlZCBhcyBzZXR0ZXIuXG4gICAqL1xuICB0aGlzLmVuZFN5bWJvbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBlbmRTeW1ib2wgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZW5kU3ltYm9sO1xuICAgIH1cbiAgfTtcblxuXG4gIHRoaXMuJGdldCA9IFsnJHBhcnNlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyRzY2UnLCBmdW5jdGlvbigkcGFyc2UsICRleGNlcHRpb25IYW5kbGVyLCAkc2NlKSB7XG4gICAgdmFyIHN0YXJ0U3ltYm9sTGVuZ3RoID0gc3RhcnRTeW1ib2wubGVuZ3RoLFxuICAgICAgICBlbmRTeW1ib2xMZW5ndGggPSBlbmRTeW1ib2wubGVuZ3RoLFxuICAgICAgICBlc2NhcGVkU3RhcnRSZWdleHAgPSBuZXcgUmVnRXhwKHN0YXJ0U3ltYm9sLnJlcGxhY2UoLy4vZywgZXNjYXBlKSwgJ2cnKSxcbiAgICAgICAgZXNjYXBlZEVuZFJlZ2V4cCA9IG5ldyBSZWdFeHAoZW5kU3ltYm9sLnJlcGxhY2UoLy4vZywgZXNjYXBlKSwgJ2cnKTtcblxuICAgIGZ1bmN0aW9uIGVzY2FwZShjaCkge1xuICAgICAgcmV0dXJuICdcXFxcXFxcXFxcXFwnICsgY2g7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5lc2NhcGVUZXh0KHRleHQpIHtcbiAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoZXNjYXBlZFN0YXJ0UmVnZXhwLCBzdGFydFN5bWJvbCkuXG4gICAgICAgIHJlcGxhY2UoZXNjYXBlZEVuZFJlZ2V4cCwgZW5kU3ltYm9sKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7IC8vIG51bGwgfHwgdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgdmFsdWUgPSAnJyArIHZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHZhbHVlID0gdG9Kc29uKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEByZXF1aXJlcyAkcGFyc2VcbiAgICAgKiBAcmVxdWlyZXMgJHNjZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBDb21waWxlcyBhIHN0cmluZyB3aXRoIG1hcmt1cCBpbnRvIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFRoaXMgc2VydmljZSBpcyB1c2VkIGJ5IHRoZVxuICAgICAqIEhUTUwge0BsaW5rIG5nLiRjb21waWxlICRjb21waWxlfSBzZXJ2aWNlIGZvciBkYXRhIGJpbmRpbmcuIFNlZVxuICAgICAqIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciAkaW50ZXJwb2xhdGVQcm92aWRlcn0gZm9yIGNvbmZpZ3VyaW5nIHRoZVxuICAgICAqIGludGVycG9sYXRpb24gbWFya3VwLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgdmFyICRpbnRlcnBvbGF0ZSA9IC4uLjsgLy8gaW5qZWN0ZWRcbiAgICAgKiAgIHZhciBleHAgPSAkaW50ZXJwb2xhdGUoJ0hlbGxvIHt7bmFtZSB8IHVwcGVyY2FzZX19IScpO1xuICAgICAqICAgZXhwZWN0KGV4cCh7bmFtZTonQW5ndWxhcid9KSkudG9FcXVhbCgnSGVsbG8gQU5HVUxBUiEnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGAkaW50ZXJwb2xhdGVgIHRha2VzIGFuIG9wdGlvbmFsIGZvdXJ0aCBhcmd1bWVudCwgYGFsbE9yTm90aGluZ2AuIElmIGBhbGxPck5vdGhpbmdgIGlzXG4gICAgICogYHRydWVgLCB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiB3aWxsIHJldHVybiBgdW5kZWZpbmVkYCB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zXG4gICAgICogZXZhbHVhdGUgdG8gYSB2YWx1ZSBvdGhlciB0aGFuIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIHZhciAkaW50ZXJwb2xhdGUgPSAuLi47IC8vIGluamVjdGVkXG4gICAgICogICB2YXIgY29udGV4dCA9IHtncmVldGluZzogJ0hlbGxvJywgbmFtZTogdW5kZWZpbmVkIH07XG4gICAgICpcbiAgICAgKiAgIC8vIGRlZmF1bHQgXCJmb3JnaXZpbmdcIiBtb2RlXG4gICAgICogICB2YXIgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJyk7XG4gICAgICogICBleHBlY3QoZXhwKGNvbnRleHQpKS50b0VxdWFsKCdIZWxsbyAhJyk7XG4gICAgICpcbiAgICAgKiAgIC8vIFwiYWxsT3JOb3RoaW5nXCIgbW9kZVxuICAgICAqICAgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJywgZmFsc2UsIG51bGwsIHRydWUpO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAqICAgY29udGV4dC5uYW1lID0gJ0FuZ3VsYXInO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9FcXVhbCgnSGVsbG8gQW5ndWxhciEnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBhbGxPck5vdGhpbmdgIGlzIHVzZWZ1bCBmb3IgaW50ZXJwb2xhdGluZyBVUkxzLiBgbmdTcmNgIGFuZCBgbmdTcmNzZXRgIHVzZSB0aGlzIGJlaGF2aW9yLlxuICAgICAqXG4gICAgICogIyMjI0VzY2FwZWQgSW50ZXJwb2xhdGlvblxuICAgICAqICRpbnRlcnBvbGF0ZSBwcm92aWRlcyBhIG1lY2hhbmlzbSBmb3IgZXNjYXBpbmcgaW50ZXJwb2xhdGlvbiBtYXJrZXJzLiBTdGFydCBhbmQgZW5kIG1hcmtlcnNcbiAgICAgKiBjYW4gYmUgZXNjYXBlZCBieSBwcmVjZWRpbmcgZWFjaCBvZiB0aGVpciBjaGFyYWN0ZXJzIHdpdGggYSBSRVZFUlNFIFNPTElEVVMgVSswMDVDIChiYWNrc2xhc2gpLlxuICAgICAqIEl0IHdpbGwgYmUgcmVuZGVyZWQgYXMgYSByZWd1bGFyIHN0YXJ0L2VuZCBtYXJrZXIsIGFuZCB3aWxsIG5vdCBiZSBpbnRlcnByZXRlZCBhcyBhbiBleHByZXNzaW9uXG4gICAgICogb3IgYmluZGluZy5cbiAgICAgKlxuICAgICAqIFRoaXMgZW5hYmxlcyB3ZWItc2VydmVycyB0byBwcmV2ZW50IHNjcmlwdCBpbmplY3Rpb24gYXR0YWNrcyBhbmQgZGVmYWNpbmcgYXR0YWNrcywgdG8gc29tZVxuICAgICAqIGRlZ3JlZSwgd2hpbGUgYWxzbyBlbmFibGluZyBjb2RlIGV4YW1wbGVzIHRvIHdvcmsgd2l0aG91dCByZWx5aW5nIG9uIHRoZVxuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdOb25CaW5kYWJsZSBuZ05vbkJpbmRhYmxlfSBkaXJlY3RpdmUuXG4gICAgICpcbiAgICAgKiAqKkZvciBzZWN1cml0eSBwdXJwb3NlcywgaXQgaXMgc3Ryb25nbHkgZW5jb3VyYWdlZCB0aGF0IHdlYiBzZXJ2ZXJzIGVzY2FwZSB1c2VyLXN1cHBsaWVkIGRhdGEsXG4gICAgICogcmVwbGFjaW5nIGFuZ2xlIGJyYWNrZXRzICgmbHQ7LCAmZ3Q7KSB3aXRoICZhbXA7bHQ7IGFuZCAmYW1wO2d0OyByZXNwZWN0aXZlbHksIGFuZCByZXBsYWNpbmcgYWxsXG4gICAgICogaW50ZXJwb2xhdGlvbiBzdGFydC9lbmQgbWFya2VycyB3aXRoIHRoZWlyIGVzY2FwZWQgY291bnRlcnBhcnRzLioqXG4gICAgICpcbiAgICAgKiBFc2NhcGVkIGludGVycG9sYXRpb24gbWFya2VycyBhcmUgb25seSByZXBsYWNlZCB3aXRoIHRoZSBhY3R1YWwgaW50ZXJwb2xhdGlvbiBtYXJrZXJzIGluIHJlbmRlcmVkXG4gICAgICogb3V0cHV0IHdoZW4gdGhlICRpbnRlcnBvbGF0ZSBzZXJ2aWNlIHByb2Nlc3NlcyB0aGUgdGV4dC4gU28sIGZvciBIVE1MIGVsZW1lbnRzIGludGVycG9sYXRlZFxuICAgICAqIGJ5IHtAbGluayBuZy4kY29tcGlsZSAkY29tcGlsZX0sIG9yIG90aGVyd2lzZSBpbnRlcnBvbGF0ZWQgd2l0aCB0aGUgYG11c3RIYXZlRXhwcmVzc2lvbmAgcGFyYW1ldGVyXG4gICAgICogc2V0IHRvIGB0cnVlYCwgdGhlIGludGVycG9sYXRlZCB0ZXh0IG11c3QgY29udGFpbiBhbiB1bmVzY2FwZWQgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uLiBBcyBzdWNoLFxuICAgICAqIHRoaXMgaXMgdHlwaWNhbGx5IHVzZWZ1bCBvbmx5IHdoZW4gdXNlci1kYXRhIGlzIHVzZWQgaW4gcmVuZGVyaW5nIGEgdGVtcGxhdGUgZnJvbSB0aGUgc2VydmVyLCBvclxuICAgICAqIHdoZW4gb3RoZXJ3aXNlIHVudHJ1c3RlZCBkYXRhIGlzIHVzZWQgYnkgYSBkaXJlY3RpdmUuXG4gICAgICpcbiAgICAgKiA8ZXhhbXBsZT5cbiAgICAgKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgKiAgICA8ZGl2IG5nLWluaXQ9XCJ1c2VybmFtZT0nQSB1c2VyJ1wiPlxuICAgICAqICAgICAgPHAgbmctaW5pdD1cImFwcHRpdGxlPSdFc2NhcGluZyBkZW1vJ1wiPnt7YXBwdGl0bGV9fTogXFx7XFx7IHVzZXJuYW1lID0gXCJkZWZhY2VkIHZhbHVlXCI7IFxcfVxcfVxuICAgICAqICAgICAgICA8L3A+XG4gICAgICogICAgICA8cD48c3Ryb25nPnt7dXNlcm5hbWV9fTwvc3Ryb25nPiBhdHRlbXB0cyB0byBpbmplY3QgY29kZSB3aGljaCB3aWxsIGRlZmFjZSB0aGVcbiAgICAgKiAgICAgICAgYXBwbGljYXRpb24sIGJ1dCBmYWlscyB0byBhY2NvbXBsaXNoIHRoZWlyIHRhc2ssIGJlY2F1c2UgdGhlIHNlcnZlciBoYXMgY29ycmVjdGx5XG4gICAgICogICAgICAgIGVzY2FwZWQgdGhlIGludGVycG9sYXRpb24gc3RhcnQvZW5kIG1hcmtlcnMgd2l0aCBSRVZFUlNFIFNPTElEVVMgVSswMDVDIChiYWNrc2xhc2gpXG4gICAgICogICAgICAgIGNoYXJhY3RlcnMuPC9wPlxuICAgICAqICAgICAgPHA+SW5zdGVhZCwgdGhlIHJlc3VsdCBvZiB0aGUgYXR0ZW1wdGVkIHNjcmlwdCBpbmplY3Rpb24gaXMgdmlzaWJsZSwgYW5kIGNhbiBiZSByZW1vdmVkXG4gICAgICogICAgICAgIGZyb20gdGhlIGRhdGFiYXNlIGJ5IGFuIGFkbWluaXN0cmF0b3IuPC9wPlxuICAgICAqICAgIDwvZGl2PlxuICAgICAqICA8L2ZpbGU+XG4gICAgICogPC9leGFtcGxlPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgd2l0aCBtYXJrdXAgdG8gaW50ZXJwb2xhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbXVzdEhhdmVFeHByZXNzaW9uIGlmIHNldCB0byB0cnVlIHRoZW4gdGhlIGludGVycG9sYXRpb24gc3RyaW5nIG11c3QgaGF2ZVxuICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gaW4gb3JkZXIgdG8gcmV0dXJuIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFN0cmluZ3Mgd2l0aCBub1xuICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gd2lsbCByZXR1cm4gbnVsbCBmb3IgdGhlIGludGVycG9sYXRpb24gZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSB0cnVzdGVkQ29udGV4dCB3aGVuIHByb3ZpZGVkLCB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gcGFzc2VzIHRoZSBpbnRlcnBvbGF0ZWRcbiAgICAgKiAgICByZXN1bHQgdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZChpbnRlcnBvbGF0ZWRSZXN1bHQsXG4gICAgICogICAgdHJ1c3RlZENvbnRleHQpfSBiZWZvcmUgcmV0dXJuaW5nIGl0LiAgUmVmZXIgdG8gdGhlIHtAbGluayBuZy4kc2NlICRzY2V9IHNlcnZpY2UgdGhhdFxuICAgICAqICAgIHByb3ZpZGVzIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGZvciBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGFsbE9yTm90aGluZyBpZiBgdHJ1ZWAsIHRoZW4gdGhlIHJldHVybmVkIGZ1bmN0aW9uIHJldHVybnMgdW5kZWZpbmVkXG4gICAgICogICAgdW5sZXNzIGFsbCBlbWJlZGRlZCBleHByZXNzaW9ucyBldmFsdWF0ZSB0byBhIHZhbHVlIG90aGVyIHRoYW4gYHVuZGVmaW5lZGAuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQpfSBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGVcbiAgICAgKiAgICBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBUaGUgZnVuY3Rpb24gaGFzIHRoZXNlIHBhcmFtZXRlcnM6XG4gICAgICpcbiAgICAgKiAtIGBjb250ZXh0YDogZXZhbHVhdGlvbiBjb250ZXh0IGZvciBhbGwgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIGludGVycG9sYXRlZCB0ZXh0XG4gICAgICovXG4gICAgZnVuY3Rpb24gJGludGVycG9sYXRlKHRleHQsIG11c3RIYXZlRXhwcmVzc2lvbiwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZykge1xuICAgICAgYWxsT3JOb3RoaW5nID0gISFhbGxPck5vdGhpbmc7XG4gICAgICB2YXIgc3RhcnRJbmRleCxcbiAgICAgICAgICBlbmRJbmRleCxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgZXhwcmVzc2lvbnMgPSBbXSxcbiAgICAgICAgICBwYXJzZUZucyA9IFtdLFxuICAgICAgICAgIHRleHRMZW5ndGggPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgICBleHAsXG4gICAgICAgICAgY29uY2F0ID0gW10sXG4gICAgICAgICAgZXhwcmVzc2lvblBvc2l0aW9ucyA9IFtdO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgIGlmICgoKHN0YXJ0SW5kZXggPSB0ZXh0LmluZGV4T2Yoc3RhcnRTeW1ib2wsIGluZGV4KSkgIT0gLTEpICYmXG4gICAgICAgICAgICAgKChlbmRJbmRleCA9IHRleHQuaW5kZXhPZihlbmRTeW1ib2wsIHN0YXJ0SW5kZXggKyBzdGFydFN5bWJvbExlbmd0aCkpICE9IC0xKSkge1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgY29uY2F0LnB1c2godW5lc2NhcGVUZXh0KHRleHQuc3Vic3RyaW5nKGluZGV4LCBzdGFydEluZGV4KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleHAgPSB0ZXh0LnN1YnN0cmluZyhzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgsIGVuZEluZGV4KTtcbiAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKGV4cCk7XG4gICAgICAgICAgcGFyc2VGbnMucHVzaCgkcGFyc2UoZXhwLCBwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yKSk7XG4gICAgICAgICAgaW5kZXggPSBlbmRJbmRleCArIGVuZFN5bWJvbExlbmd0aDtcbiAgICAgICAgICBleHByZXNzaW9uUG9zaXRpb25zLnB1c2goY29uY2F0Lmxlbmd0aCk7XG4gICAgICAgICAgY29uY2F0LnB1c2goJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHdlIGRpZCBub3QgZmluZCBhbiBpbnRlcnBvbGF0aW9uLCBzbyB3ZSBoYXZlIHRvIGFkZCB0aGUgcmVtYWluZGVyIHRvIHRoZSBzZXBhcmF0b3JzIGFycmF5XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25jYXQucHVzaCh1bmVzY2FwZVRleHQodGV4dC5zdWJzdHJpbmcoaW5kZXgpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENvbmNhdGVuYXRpbmcgZXhwcmVzc2lvbnMgbWFrZXMgaXQgaGFyZCB0byByZWFzb24gYWJvdXQgd2hldGhlciBzb21lIGNvbWJpbmF0aW9uIG9mXG4gICAgICAvLyBjb25jYXRlbmF0ZWQgdmFsdWVzIGFyZSB1bnNhZmUgdG8gdXNlIGFuZCBjb3VsZCBlYXNpbHkgbGVhZCB0byBYU1MuICBCeSByZXF1aXJpbmcgdGhhdCBhXG4gICAgICAvLyBzaW5nbGUgZXhwcmVzc2lvbiBiZSB1c2VkIGZvciBpZnJhbWVbc3JjXSwgb2JqZWN0W3NyY10sIGV0Yy4sIHdlIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZVxuICAgICAgLy8gdGhhdCdzIHVzZWQgaXMgYXNzaWduZWQgb3IgY29uc3RydWN0ZWQgYnkgc29tZSBKUyBjb2RlIHNvbWV3aGVyZSB0aGF0IGlzIG1vcmUgdGVzdGFibGUgb3JcbiAgICAgIC8vIG1ha2UgaXQgb2J2aW91cyB0aGF0IHlvdSBib3VuZCB0aGUgdmFsdWUgdG8gc29tZSB1c2VyIGNvbnRyb2xsZWQgdmFsdWUuICBUaGlzIGhlbHBzIHJlZHVjZVxuICAgICAgLy8gdGhlIGxvYWQgd2hlbiBhdWRpdGluZyBmb3IgWFNTIGlzc3Vlcy5cbiAgICAgIGlmICh0cnVzdGVkQ29udGV4dCAmJiBjb25jYXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICRpbnRlcnBvbGF0ZU1pbkVyci50aHJvd05vY29uY2F0KHRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW11c3RIYXZlRXhwcmVzc2lvbiB8fCBleHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGNvbXB1dGUgPSBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBleHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYWxsT3JOb3RoaW5nICYmIGlzVW5kZWZpbmVkKHZhbHVlc1tpXSkpIHJldHVybjtcbiAgICAgICAgICAgIGNvbmNhdFtleHByZXNzaW9uUG9zaXRpb25zW2ldXSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbmNhdC5qb2luKCcnKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB0cnVzdGVkQ29udGV4dCA/XG4gICAgICAgICAgICAkc2NlLmdldFRydXN0ZWQodHJ1c3RlZENvbnRleHQsIHZhbHVlKSA6XG4gICAgICAgICAgICAkc2NlLnZhbHVlT2YodmFsdWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gaW50ZXJwb2xhdGlvbkZuKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHZhciBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkoaWkpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3IgKDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXNbaV0gPSBwYXJzZUZuc1tpXShjb250ZXh0KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBjb21wdXRlKHZhbHVlcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoJGludGVycG9sYXRlTWluRXJyLmludGVycih0ZXh0LCBlcnIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAvLyBhbGwgb2YgdGhlc2UgcHJvcGVydGllcyBhcmUgdW5kb2N1bWVudGVkIGZvciBub3dcbiAgICAgICAgICBleHA6IHRleHQsIC8vanVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHJlZ3VsYXIgd2F0Y2hlcnMgY3JlYXRlZCB2aWEgJHdhdGNoXG4gICAgICAgICAgZXhwcmVzc2lvbnM6IGV4cHJlc3Npb25zLFxuICAgICAgICAgICQkd2F0Y2hEZWxlZ2F0ZTogZnVuY3Rpb24oc2NvcGUsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgICB2YXIgbGFzdFZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaEdyb3VwKHBhcnNlRm5zLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hlcih2YWx1ZXMsIG9sZFZhbHVlcykge1xuICAgICAgICAgICAgICB2YXIgY3VyclZhbHVlID0gY29tcHV0ZSh2YWx1ZXMpO1xuICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGN1cnJWYWx1ZSwgdmFsdWVzICE9PSBvbGRWYWx1ZXMgPyBsYXN0VmFsdWUgOiBjdXJyVmFsdWUsIHNjb3BlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBjdXJyVmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFsdWUgPSBnZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIGFsbE9yTm90aGluZyAmJiAhaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoJGludGVycG9sYXRlTWluRXJyLmludGVycih0ZXh0LCBlcnIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRpbnRlcnBvbGF0ZSNzdGFydFN5bWJvbFxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIHN0YXJ0IG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB7e2AuXG4gICAgICpcbiAgICAgKiBVc2Uge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI3N0YXJ0U3ltYm9sIGAkaW50ZXJwb2xhdGVQcm92aWRlci5zdGFydFN5bWJvbGB9IHRvIGNoYW5nZVxuICAgICAqIHRoZSBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzdGFydCBzeW1ib2wuXG4gICAgICovXG4gICAgJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RhcnRTeW1ib2w7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRpbnRlcnBvbGF0ZSNlbmRTeW1ib2xcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBlbmQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYH19YC5cbiAgICAgKlxuICAgICAqIFVzZSB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIjZW5kU3ltYm9sIGAkaW50ZXJwb2xhdGVQcm92aWRlci5lbmRTeW1ib2xgfSB0byBjaGFuZ2VcbiAgICAgKiB0aGUgc3ltYm9sLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gZW5kIHN5bWJvbC5cbiAgICAgKi9cbiAgICAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZW5kU3ltYm9sO1xuICAgIH07XG5cbiAgICByZXR1cm4gJGludGVycG9sYXRlO1xuICB9XTtcbn1cblxuZnVuY3Rpb24gJEludGVydmFsUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckd2luZG93JywgJyRxJywgJyQkcScsXG4gICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkd2luZG93LCAgICRxLCAgICQkcSkge1xuICAgIHZhciBpbnRlcnZhbHMgPSB7fTtcblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAgKiBAbmFtZSAkaW50ZXJ2YWxcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldEludGVydmFsYC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgZXZlcnkgYGRlbGF5YFxuICAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICAqXG4gICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYW4gaW50ZXJ2YWwgZnVuY3Rpb24gaXMgYSBwcm9taXNlLiBUaGlzIHByb21pc2Ugd2lsbCBiZVxuICAgICAgKiBub3RpZmllZCB1cG9uIGVhY2ggdGljayBvZiB0aGUgaW50ZXJ2YWwsIGFuZCB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIGBjb3VudGAgaXRlcmF0aW9ucywgb3JcbiAgICAgICogcnVuIGluZGVmaW5pdGVseSBpZiBgY291bnRgIGlzIG5vdCBkZWZpbmVkLiBUaGUgdmFsdWUgb2YgdGhlIG5vdGlmaWNhdGlvbiB3aWxsIGJlIHRoZVxuICAgICAgKiBudW1iZXIgb2YgaXRlcmF0aW9ucyB0aGF0IGhhdmUgcnVuLlxuICAgICAgKiBUbyBjYW5jZWwgYW4gaW50ZXJ2YWwsIGNhbGwgYCRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSlgLlxuICAgICAgKlxuICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiRpbnRlcnZhbCNmbHVzaCBgJGludGVydmFsLmZsdXNoKG1pbGxpcylgfSB0b1xuICAgICAgKiBtb3ZlIGZvcndhcmQgYnkgYG1pbGxpc2AgbWlsbGlzZWNvbmRzIGFuZCB0cmlnZ2VyIGFueSBmdW5jdGlvbnMgc2NoZWR1bGVkIHRvIHJ1biBpbiB0aGF0XG4gICAgICAqIHRpbWUuXG4gICAgICAqXG4gICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICAqICoqTm90ZSoqOiBJbnRlcnZhbHMgY3JlYXRlZCBieSB0aGlzIHNlcnZpY2UgbXVzdCBiZSBleHBsaWNpdGx5IGRlc3Ryb3llZCB3aGVuIHlvdSBhcmUgZmluaXNoZWRcbiAgICAgICogd2l0aCB0aGVtLiAgSW4gcGFydGljdWxhciB0aGV5IGFyZSBub3QgYXV0b21hdGljYWxseSBkZXN0cm95ZWQgd2hlbiBhIGNvbnRyb2xsZXIncyBzY29wZSBvciBhXG4gICAgICAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQgYXJlIGRlc3Ryb3llZC5cbiAgICAgICogWW91IHNob3VsZCB0YWtlIHRoaXMgaW50byBjb25zaWRlcmF0aW9uIGFuZCBtYWtlIHN1cmUgdG8gYWx3YXlzIGNhbmNlbCB0aGUgaW50ZXJ2YWwgYXQgdGhlXG4gICAgICAqIGFwcHJvcHJpYXRlIG1vbWVudC4gIFNlZSB0aGUgZXhhbXBsZSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzIG9uIGhvdyBhbmQgd2hlbiB0byBkbyB0aGlzLlxuICAgICAgKiA8L2Rpdj5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCByZXBlYXRlZGx5LlxuICAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIGVhY2ggZnVuY3Rpb24gY2FsbC5cbiAgICAgICogQHBhcmFtIHtudW1iZXI9fSBbY291bnQ9MF0gTnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdC4gSWYgbm90IHNldCwgb3IgMCwgd2lsbCByZXBlYXRcbiAgICAgICogICBpbmRlZmluaXRlbHkuXG4gICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbnZva2VBcHBseT10cnVlXSBJZiBzZXQgdG8gYGZhbHNlYCBza2lwcyBtb2RlbCBkaXJ0eSBjaGVja2luZywgb3RoZXJ3aXNlXG4gICAgICAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLlxuICAgICAgKiBAcGFyYW0gey4uLio9fSBQYXNzIGFkZGl0aW9uYWwgcGFyYW1ldGVycyB0byB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24uXG4gICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2Ugd2hpY2ggd2lsbCBiZSBub3RpZmllZCBvbiBlYWNoIGl0ZXJhdGlvbi5cbiAgICAgICpcbiAgICAgICogQGV4YW1wbGVcbiAgICAgICogPGV4YW1wbGUgbW9kdWxlPVwiaW50ZXJ2YWxFeGFtcGxlXCI+XG4gICAgICAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAqICAgPHNjcmlwdD5cbiAgICAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdpbnRlcnZhbEV4YW1wbGUnLCBbXSlcbiAgICAgICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGludGVydmFsJyxcbiAgICAgICogICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRpbnRlcnZhbCkge1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmZvcm1hdCA9ICdNL2QveXkgaDptbTpzcyBhJztcbiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwO1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmJsb29kXzIgPSAxMjA7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICB2YXIgc3RvcDtcbiAgICAgICogICAgICAgICAgICRzY29wZS5maWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAvLyBEb24ndCBzdGFydCBhIG5ldyBmaWdodCBpZiB3ZSBhcmUgYWxyZWFkeSBmaWdodGluZ1xuICAgICAgKiAgICAgICAgICAgICBpZiAoIGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApICkgcmV0dXJuO1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgICBzdG9wID0gJGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYmxvb2RfMSA+IDAgJiYgJHNjb3BlLmJsb29kXzIgPiAwKSB7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9ICRzY29wZS5ibG9vZF8xIC0gMztcbiAgICAgICogICAgICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gJHNjb3BlLmJsb29kXzIgLSA0O1xuICAgICAgKiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0KCk7XG4gICAgICAqICAgICAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wKTtcbiAgICAgICogICAgICAgICAgICAgICBzdG9wID0gdW5kZWZpbmVkO1xuICAgICAgKiAgICAgICAgICAgICB9XG4gICAgICAqICAgICAgICAgICB9O1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgJHNjb3BlLnJlc2V0RmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgJHNjb3BlLmJsb29kXzEgPSAxMDA7XG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwO1xuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBpbnRlcnZhbCBpcyBkZXN0cm95ZWQgdG9vXG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQoKTtcbiAgICAgICogICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgIH1dKVxuICAgICAgKiAgICAgICAvLyBSZWdpc3RlciB0aGUgJ215Q3VycmVudFRpbWUnIGRpcmVjdGl2ZSBmYWN0b3J5IG1ldGhvZC5cbiAgICAgICogICAgICAgLy8gV2UgaW5qZWN0ICRpbnRlcnZhbCBhbmQgZGF0ZUZpbHRlciBzZXJ2aWNlIHNpbmNlIHRoZSBmYWN0b3J5IG1ldGhvZCBpcyBESS5cbiAgICAgICogICAgICAgLmRpcmVjdGl2ZSgnbXlDdXJyZW50VGltZScsIFsnJGludGVydmFsJywgJ2RhdGVGaWx0ZXInLFxuICAgICAgKiAgICAgICAgIGZ1bmN0aW9uKCRpbnRlcnZhbCwgZGF0ZUZpbHRlcikge1xuICAgICAgKiAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBkaXJlY3RpdmUgbGluayBmdW5jdGlvbi4gKGNvbXBpbGUgZnVuY3Rpb24gbm90IG5lZWRlZClcbiAgICAgICogICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICogICAgICAgICAgICAgdmFyIGZvcm1hdCwgIC8vIGRhdGUgZm9ybWF0XG4gICAgICAqICAgICAgICAgICAgICAgICBzdG9wVGltZTsgLy8gc28gdGhhdCB3ZSBjYW4gY2FuY2VsIHRoZSB0aW1lIHVwZGF0ZXNcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gdXNlZCB0byB1cGRhdGUgdGhlIFVJXG4gICAgICAqICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZWxlbWVudC50ZXh0KGRhdGVGaWx0ZXIobmV3IERhdGUoKSwgZm9ybWF0KSk7XG4gICAgICAqICAgICAgICAgICAgIH1cbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gd2F0Y2ggdGhlIGV4cHJlc3Npb24sIGFuZCB1cGRhdGUgdGhlIFVJIG9uIGNoYW5nZS5cbiAgICAgICogICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJzLm15Q3VycmVudFRpbWUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZm9ybWF0ID0gdmFsdWU7XG4gICAgICAqICAgICAgICAgICAgICAgdXBkYXRlVGltZSgpO1xuICAgICAgKiAgICAgICAgICAgICB9KTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgc3RvcFRpbWUgPSAkaW50ZXJ2YWwodXBkYXRlVGltZSwgMTAwMCk7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIC8vIGxpc3RlbiBvbiBET00gZGVzdHJveSAocmVtb3ZhbCkgZXZlbnQsIGFuZCBjYW5jZWwgdGhlIG5leHQgVUkgdXBkYXRlXG4gICAgICAqICAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgdXBkYXRpbmcgdGltZSBhZnRlciB0aGUgRE9NIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gICAgICAqICAgICAgICAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wVGltZSk7XG4gICAgICAqICAgICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgIH1dKTtcbiAgICAgICogICA8L3NjcmlwdD5cbiAgICAgICpcbiAgICAgICogICA8ZGl2PlxuICAgICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICogICAgICAgPGxhYmVsPkRhdGUgZm9ybWF0OiA8aW5wdXQgbmctbW9kZWw9XCJmb3JtYXRcIj48L2xhYmVsPiA8aHIvPlxuICAgICAgKiAgICAgICBDdXJyZW50IHRpbWUgaXM6IDxzcGFuIG15LWN1cnJlbnQtdGltZT1cImZvcm1hdFwiPjwvc3Bhbj5cbiAgICAgICogICAgICAgPGhyLz5cbiAgICAgICogICAgICAgQmxvb2QgMSA6IDxmb250IGNvbG9yPSdyZWQnPnt7Ymxvb2RfMX19PC9mb250PlxuICAgICAgKiAgICAgICBCbG9vZCAyIDogPGZvbnQgY29sb3I9J3JlZCc+e3tibG9vZF8yfX08L2ZvbnQ+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJmaWdodCgpXCI+RmlnaHQ8L2J1dHRvbj5cbiAgICAgICogICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1uZy1jbGljaz1cInN0b3BGaWdodCgpXCI+U3RvcEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJyZXNldEZpZ2h0KClcIj5yZXNldEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICA8L2Rpdj5cbiAgICAgICogICA8L2Rpdj5cbiAgICAgICpcbiAgICAgICogPC9maWxlPlxuICAgICAgKiA8L2V4YW1wbGU+XG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIGludGVydmFsKGZuLCBkZWxheSwgY291bnQsIGludm9rZUFwcGx5KSB7XG4gICAgICB2YXIgaGFzUGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQsXG4gICAgICAgICAgYXJncyA9IGhhc1BhcmFtcyA/IHNsaWNlQXJncyhhcmd1bWVudHMsIDQpIDogW10sXG4gICAgICAgICAgc2V0SW50ZXJ2YWwgPSAkd2luZG93LnNldEludGVydmFsLFxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwgPSAkd2luZG93LmNsZWFySW50ZXJ2YWwsXG4gICAgICAgICAgaXRlcmF0aW9uID0gMCxcbiAgICAgICAgICBza2lwQXBwbHkgPSAoaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHkpLFxuICAgICAgICAgIGRlZmVycmVkID0gKHNraXBBcHBseSA/ICQkcSA6ICRxKS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICBjb3VudCA9IGlzRGVmaW5lZChjb3VudCkgPyBjb3VudCA6IDA7XG5cbiAgICAgIHByb21pc2UudGhlbihudWxsLCBudWxsLCAoIWhhc1BhcmFtcykgPyBmbiA6IGZ1bmN0aW9uKCkge1xuICAgICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgIH0pO1xuXG4gICAgICBwcm9taXNlLiQkaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICAgIGRlZmVycmVkLm5vdGlmeShpdGVyYXRpb24rKyk7XG5cbiAgICAgICAgaWYgKGNvdW50ID4gMCAmJiBpdGVyYXRpb24gPj0gY291bnQpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGl0ZXJhdGlvbik7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7XG4gICAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcblxuICAgICAgfSwgZGVsYXkpO1xuXG4gICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdID0gZGVmZXJyZWQ7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICRpbnRlcnZhbCNjYW5jZWxcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIENhbmNlbHMgYSB0YXNrIGFzc29jaWF0ZWQgd2l0aCB0aGUgYHByb21pc2VgLlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge1Byb21pc2U9fSBwcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJGludGVydmFsYCBmdW5jdGlvbi5cbiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIHdhcyBzdWNjZXNzZnVsbHkgY2FuY2VsZWQuXG4gICAgICAqL1xuICAgIGludGVydmFsLmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCRpbnRlcnZhbElkIGluIGludGVydmFscykge1xuICAgICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdLnJlamVjdCgnY2FuY2VsZWQnKTtcbiAgICAgICAgJHdpbmRvdy5jbGVhckludGVydmFsKHByb21pc2UuJCRpbnRlcnZhbElkKTtcbiAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gaW50ZXJ2YWw7XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbG9jYWxlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAkbG9jYWxlIHNlcnZpY2UgcHJvdmlkZXMgbG9jYWxpemF0aW9uIHJ1bGVzIGZvciB2YXJpb3VzIEFuZ3VsYXIgY29tcG9uZW50cy4gQXMgb2YgcmlnaHQgbm93IHRoZVxuICogb25seSBwdWJsaWMgYXBpIGlzOlxuICpcbiAqICogYGlkYCDigJMgYHtzdHJpbmd9YCDigJMgbG9jYWxlIGlkIGZvcm1hdHRlZCBhcyBgbGFuZ3VhZ2VJZC1jb3VudHJ5SWRgIChlLmcuIGBlbi11c2ApXG4gKi9cblxudmFyIFBBVEhfTUFUQ0ggPSAvXihbXlxcPyNdKikoXFw/KFteI10qKSk/KCMoLiopKT8kLyxcbiAgICBERUZBVUxUX1BPUlRTID0geydodHRwJzogODAsICdodHRwcyc6IDQ0MywgJ2Z0cCc6IDIxfTtcbnZhciAkbG9jYXRpb25NaW5FcnIgPSBtaW5FcnIoJyRsb2NhdGlvbicpO1xuXG5cbi8qKlxuICogRW5jb2RlIHBhdGggdXNpbmcgZW5jb2RlVXJpU2VnbWVudCwgaWdub3JpbmcgZm9yd2FyZCBzbGFzaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byBlbmNvZGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcvJyksXG4gICAgICBpID0gc2VnbWVudHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBzZWdtZW50c1tpXSA9IGVuY29kZVVyaVNlZ21lbnQoc2VnbWVudHNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oJy8nKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VBYnNvbHV0ZVVybChhYnNvbHV0ZVVybCwgbG9jYXRpb25PYmopIHtcbiAgdmFyIHBhcnNlZFVybCA9IHVybFJlc29sdmUoYWJzb2x1dGVVcmwpO1xuXG4gIGxvY2F0aW9uT2JqLiQkcHJvdG9jb2wgPSBwYXJzZWRVcmwucHJvdG9jb2w7XG4gIGxvY2F0aW9uT2JqLiQkaG9zdCA9IHBhcnNlZFVybC5ob3N0bmFtZTtcbiAgbG9jYXRpb25PYmouJCRwb3J0ID0gdG9JbnQocGFyc2VkVXJsLnBvcnQpIHx8IERFRkFVTFRfUE9SVFNbcGFyc2VkVXJsLnByb3RvY29sXSB8fCBudWxsO1xufVxuXG5cbmZ1bmN0aW9uIHBhcnNlQXBwVXJsKHJlbGF0aXZlVXJsLCBsb2NhdGlvbk9iaikge1xuICB2YXIgcHJlZml4ZWQgPSAocmVsYXRpdmVVcmwuY2hhckF0KDApICE9PSAnLycpO1xuICBpZiAocHJlZml4ZWQpIHtcbiAgICByZWxhdGl2ZVVybCA9ICcvJyArIHJlbGF0aXZlVXJsO1xuICB9XG4gIHZhciBtYXRjaCA9IHVybFJlc29sdmUocmVsYXRpdmVVcmwpO1xuICBsb2NhdGlvbk9iai4kJHBhdGggPSBkZWNvZGVVUklDb21wb25lbnQocHJlZml4ZWQgJiYgbWF0Y2gucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycgP1xuICAgICAgbWF0Y2gucGF0aG5hbWUuc3Vic3RyaW5nKDEpIDogbWF0Y2gucGF0aG5hbWUpO1xuICBsb2NhdGlvbk9iai4kJHNlYXJjaCA9IHBhcnNlS2V5VmFsdWUobWF0Y2guc2VhcmNoKTtcbiAgbG9jYXRpb25PYmouJCRoYXNoID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoLmhhc2gpO1xuXG4gIC8vIG1ha2Ugc3VyZSBwYXRoIHN0YXJ0cyB3aXRoICcvJztcbiAgaWYgKGxvY2F0aW9uT2JqLiQkcGF0aCAmJiBsb2NhdGlvbk9iai4kJHBhdGguY2hhckF0KDApICE9ICcvJykge1xuICAgIGxvY2F0aW9uT2JqLiQkcGF0aCA9ICcvJyArIGxvY2F0aW9uT2JqLiQkcGF0aDtcbiAgfVxufVxuXG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiZWdpblxuICogQHBhcmFtIHtzdHJpbmd9IHdob2xlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZXR1cm5zIHRleHQgZnJvbSB3aG9sZSBhZnRlciBiZWdpbiBvciB1bmRlZmluZWQgaWYgaXQgZG9lcyBub3QgYmVnaW4gd2l0aFxuICogICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiZWdpbnNXaXRoKGJlZ2luLCB3aG9sZSkge1xuICBpZiAod2hvbGUuaW5kZXhPZihiZWdpbikgPT09IDApIHtcbiAgICByZXR1cm4gd2hvbGUuc3Vic3RyKGJlZ2luLmxlbmd0aCk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBpbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBpbmRleCA9PSAtMSA/IHVybCA6IHVybC5zdWJzdHIoMCwgaW5kZXgpO1xufVxuXG5mdW5jdGlvbiB0cmltRW1wdHlIYXNoKHVybCkge1xuICByZXR1cm4gdXJsLnJlcGxhY2UoLygjLispfCMkLywgJyQxJyk7XG59XG5cblxuZnVuY3Rpb24gc3RyaXBGaWxlKHVybCkge1xuICByZXR1cm4gdXJsLnN1YnN0cigwLCBzdHJpcEhhc2godXJsKS5sYXN0SW5kZXhPZignLycpICsgMSk7XG59XG5cbi8qIHJldHVybiB0aGUgc2VydmVyIG9ubHkgKHNjaGVtZTovL2hvc3Q6cG9ydCkgKi9cbmZ1bmN0aW9uIHNlcnZlckJhc2UodXJsKSB7XG4gIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCcvJywgdXJsLmluZGV4T2YoJy8vJykgKyAyKSk7XG59XG5cblxuLyoqXG4gKiBMb2NhdGlvbkh0bWw1VXJsIHJlcHJlc2VudHMgYW4gdXJsXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gSFRNTDUgbW9kZSBpcyBlbmFibGVkIGFuZCBzdXBwb3J0ZWRcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZU5vRmlsZSBhcHBsaWNhdGlvbiBiYXNlIFVSTCBzdHJpcHBlZCBvZiBhbnkgZmlsZW5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlUHJlZml4IHVybCBwYXRoIHByZWZpeFxuICovXG5mdW5jdGlvbiBMb2NhdGlvbkh0bWw1VXJsKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsIGJhc2VQcmVmaXgpIHtcbiAgdGhpcy4kJGh0bWw1ID0gdHJ1ZTtcbiAgYmFzZVByZWZpeCA9IGJhc2VQcmVmaXggfHwgJyc7XG4gIHBhcnNlQWJzb2x1dGVVcmwoYXBwQmFzZSwgdGhpcyk7XG5cblxuICAvKipcbiAgICogUGFyc2UgZ2l2ZW4gaHRtbDUgKHJlZ3VsYXIpIHVybCBzdHJpbmcgaW50byBwcm9wZXJ0aWVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSFRNTDUgdXJsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkcGFyc2UgPSBmdW5jdGlvbih1cmwpIHtcbiAgICB2YXIgcGF0aFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKTtcbiAgICBpZiAoIWlzU3RyaW5nKHBhdGhVcmwpKSB7XG4gICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2lwdGhwcmZ4JywgJ0ludmFsaWQgdXJsIFwiezB9XCIsIG1pc3NpbmcgcGF0aCBwcmVmaXggXCJ7MX1cIi4nLCB1cmwsXG4gICAgICAgICAgYXBwQmFzZU5vRmlsZSk7XG4gICAgfVxuXG4gICAgcGFyc2VBcHBVcmwocGF0aFVybCwgdGhpcyk7XG5cbiAgICBpZiAoIXRoaXMuJCRwYXRoKSB7XG4gICAgICB0aGlzLiQkcGF0aCA9ICcvJztcbiAgICB9XG5cbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb21wb3NlIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2VOb0ZpbGUgKyB0aGlzLiQkdXJsLnN1YnN0cigxKTsgLy8gZmlyc3QgY2hhciBpcyBhbHdheXMgJy8nXG4gIH07XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBsaW5rcyB0byBoYXNoIGZyYWdtZW50czpcbiAgICAgIC8vIGtlZXAgdGhlIG9sZCB1cmwgYW5kIG9ubHkgcmVwbGFjZSB0aGUgaGFzaCBmcmFnbWVudFxuICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBhcHBVcmwsIHByZXZBcHBVcmw7XG4gICAgdmFyIHJld3JpdHRlblVybDtcblxuICAgIGlmIChpc0RlZmluZWQoYXBwVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlLCB1cmwpKSkge1xuICAgICAgcHJldkFwcFVybCA9IGFwcFVybDtcbiAgICAgIGlmIChpc0RlZmluZWQoYXBwVXJsID0gYmVnaW5zV2l0aChiYXNlUHJlZml4LCBhcHBVcmwpKSkge1xuICAgICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlICsgKGJlZ2luc1dpdGgoJy8nLCBhcHBVcmwpIHx8IGFwcFVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlICsgcHJldkFwcFVybDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCkpKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlICsgYXBwVXJsO1xuICAgIH0gZWxzZSBpZiAoYXBwQmFzZU5vRmlsZSA9PSB1cmwgKyAnLycpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGU7XG4gICAgfVxuICAgIGlmIChyZXdyaXR0ZW5VcmwpIHtcbiAgICAgIHRoaXMuJCRwYXJzZShyZXdyaXR0ZW5VcmwpO1xuICAgIH1cbiAgICByZXR1cm4gISFyZXdyaXR0ZW5Vcmw7XG4gIH07XG59XG5cblxuLyoqXG4gKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgdXJsXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gZGV2ZWxvcGVyIGRvZXNuJ3Qgb3B0IGludG8gaHRtbDUgbW9kZS5cbiAqIEl0IGFsc28gc2VydmVzIGFzIHRoZSBiYXNlIGNsYXNzIGZvciBodG1sNSBtb2RlIGZhbGxiYWNrIG9uIGxlZ2FjeSBicm93c2Vycy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZU5vRmlsZSBhcHBsaWNhdGlvbiBiYXNlIFVSTCBzdHJpcHBlZCBvZiBhbnkgZmlsZW5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoUHJlZml4IGhhc2hiYW5nIHByZWZpeFxuICovXG5mdW5jdGlvbiBMb2NhdGlvbkhhc2hiYW5nVXJsKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsIGhhc2hQcmVmaXgpIHtcblxuICBwYXJzZUFic29sdXRlVXJsKGFwcEJhc2UsIHRoaXMpO1xuXG5cbiAgLyoqXG4gICAqIFBhcnNlIGdpdmVuIGhhc2hiYW5nIHVybCBpbnRvIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBIYXNoYmFuZyB1cmxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uKHVybCkge1xuICAgIHZhciB3aXRob3V0QmFzZVVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZSwgdXJsKSB8fCBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCk7XG4gICAgdmFyIHdpdGhvdXRIYXNoVXJsO1xuXG4gICAgaWYgKCFpc1VuZGVmaW5lZCh3aXRob3V0QmFzZVVybCkgJiYgd2l0aG91dEJhc2VVcmwuY2hhckF0KDApID09PSAnIycpIHtcblxuICAgICAgLy8gVGhlIHJlc3Qgb2YgdGhlIHVybCBzdGFydHMgd2l0aCBhIGhhc2ggc28gd2UgaGF2ZVxuICAgICAgLy8gZ290IGVpdGhlciBhIGhhc2hiYW5nIHBhdGggb3IgYSBwbGFpbiBoYXNoIGZyYWdtZW50XG4gICAgICB3aXRob3V0SGFzaFVybCA9IGJlZ2luc1dpdGgoaGFzaFByZWZpeCwgd2l0aG91dEJhc2VVcmwpO1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHdpdGhvdXRIYXNoVXJsKSkge1xuICAgICAgICAvLyBUaGVyZSB3YXMgbm8gaGFzaGJhbmcgcHJlZml4IHNvIHdlIGp1c3QgaGF2ZSBhIGhhc2ggZnJhZ21lbnRcbiAgICAgICAgd2l0aG91dEhhc2hVcmwgPSB3aXRob3V0QmFzZVVybDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGVyZSB3YXMgbm8gaGFzaGJhbmcgcGF0aCBub3IgaGFzaCBmcmFnbWVudDpcbiAgICAgIC8vIElmIHdlIGFyZSBpbiBIVE1MNSBtb2RlIHdlIHVzZSB3aGF0IGlzIGxlZnQgYXMgdGhlIHBhdGg7XG4gICAgICAvLyBPdGhlcndpc2Ugd2UgaWdub3JlIHdoYXQgaXMgbGVmdFxuICAgICAgaWYgKHRoaXMuJCRodG1sNSkge1xuICAgICAgICB3aXRob3V0SGFzaFVybCA9IHdpdGhvdXRCYXNlVXJsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2l0aG91dEhhc2hVcmwgPSAnJztcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHdpdGhvdXRCYXNlVXJsKSkge1xuICAgICAgICAgIGFwcEJhc2UgPSB1cmw7XG4gICAgICAgICAgdGhpcy5yZXBsYWNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZUFwcFVybCh3aXRob3V0SGFzaFVybCwgdGhpcyk7XG5cbiAgICB0aGlzLiQkcGF0aCA9IHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUodGhpcy4kJHBhdGgsIHdpdGhvdXRIYXNoVXJsLCBhcHBCYXNlKTtcblxuICAgIHRoaXMuJCRjb21wb3NlKCk7XG5cbiAgICAvKlxuICAgICAqIEluIFdpbmRvd3MsIG9uIGFuIGFuY2hvciBub2RlIG9uIGRvY3VtZW50cyBsb2FkZWQgZnJvbVxuICAgICAqIHRoZSBmaWxlc3lzdGVtLCB0aGUgYnJvd3NlciB3aWxsIHJldHVybiBhIHBhdGhuYW1lXG4gICAgICogcHJlZml4ZWQgd2l0aCB0aGUgZHJpdmUgbmFtZSAoJy9DOi9wYXRoJykgd2hlbiBhXG4gICAgICogcGF0aG5hbWUgd2l0aG91dCBhIGRyaXZlIGlzIHNldDpcbiAgICAgKiAgKiBhLnNldEF0dHJpYnV0ZSgnaHJlZicsICcvZm9vJylcbiAgICAgKiAgICogYS5wYXRobmFtZSA9PT0gJy9DOi9mb28nIC8vdHJ1ZVxuICAgICAqXG4gICAgICogSW5zaWRlIG9mIEFuZ3VsYXIsIHdlJ3JlIGFsd2F5cyB1c2luZyBwYXRobmFtZXMgdGhhdFxuICAgICAqIGRvIG5vdCBpbmNsdWRlIGRyaXZlIG5hbWVzIGZvciByb3V0aW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUocGF0aCwgdXJsLCBiYXNlKSB7XG4gICAgICAvKlxuICAgICAgTWF0Y2hlcyBwYXRocyBmb3IgZmlsZSBwcm90b2NvbCBvbiB3aW5kb3dzLFxuICAgICAgc3VjaCBhcyAvQzovZm9vL2JhciwgYW5kIGNhcHR1cmVzIG9ubHkgL2Zvby9iYXIuXG4gICAgICAqL1xuICAgICAgdmFyIHdpbmRvd3NGaWxlUGF0aEV4cCA9IC9eXFwvW0EtWl06KFxcLy4qKS87XG5cbiAgICAgIHZhciBmaXJzdFBhdGhTZWdtZW50TWF0Y2g7XG5cbiAgICAgIC8vR2V0IHRoZSByZWxhdGl2ZSBwYXRoIGZyb20gdGhlIGlucHV0IFVSTC5cbiAgICAgIGlmICh1cmwuaW5kZXhPZihiYXNlKSA9PT0gMCkge1xuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShiYXNlLCAnJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBpbnB1dCBVUkwgaW50ZW50aW9uYWxseSBjb250YWlucyBhIGZpcnN0IHBhdGggc2VnbWVudCB0aGF0IGVuZHMgd2l0aCBhIGNvbG9uLlxuICAgICAgaWYgKHdpbmRvd3NGaWxlUGF0aEV4cC5leGVjKHVybCkpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9XG5cbiAgICAgIGZpcnN0UGF0aFNlZ21lbnRNYXRjaCA9IHdpbmRvd3NGaWxlUGF0aEV4cC5leGVjKHBhdGgpO1xuICAgICAgcmV0dXJuIGZpcnN0UGF0aFNlZ21lbnRNYXRjaCA/IGZpcnN0UGF0aFNlZ21lbnRNYXRjaFsxXSA6IHBhdGg7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDb21wb3NlIGhhc2hiYW5nIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2UgKyAodGhpcy4kJHVybCA/IGhhc2hQcmVmaXggKyB0aGlzLiQkdXJsIDogJycpO1xuICB9O1xuXG4gIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbih1cmwsIHJlbEhyZWYpIHtcbiAgICBpZiAoc3RyaXBIYXNoKGFwcEJhc2UpID09IHN0cmlwSGFzaCh1cmwpKSB7XG4gICAgICB0aGlzLiQkcGFyc2UodXJsKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59XG5cblxuLyoqXG4gKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgdXJsXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gaHRtbDUgaGlzdG9yeSBhcGkgaXMgZW5hYmxlZCBidXQgdGhlIGJyb3dzZXJcbiAqIGRvZXMgbm90IHN1cHBvcnQgaXQuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2VOb0ZpbGUgYXBwbGljYXRpb24gYmFzZSBVUkwgc3RyaXBwZWQgb2YgYW55IGZpbGVuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaFByZWZpeCBoYXNoYmFuZyBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwoYXBwQmFzZSwgYXBwQmFzZU5vRmlsZSwgaGFzaFByZWZpeCkge1xuICB0aGlzLiQkaHRtbDUgPSB0cnVlO1xuICBMb2NhdGlvbkhhc2hiYW5nVXJsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBsaW5rcyB0byBoYXNoIGZyYWdtZW50czpcbiAgICAgIC8vIGtlZXAgdGhlIG9sZCB1cmwgYW5kIG9ubHkgcmVwbGFjZSB0aGUgaGFzaCBmcmFnbWVudFxuICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJld3JpdHRlblVybDtcbiAgICB2YXIgYXBwVXJsO1xuXG4gICAgaWYgKGFwcEJhc2UgPT0gc3RyaXBIYXNoKHVybCkpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IHVybDtcbiAgICB9IGVsc2UgaWYgKChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCkpKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlICsgaGFzaFByZWZpeCArIGFwcFVybDtcbiAgICB9IGVsc2UgaWYgKGFwcEJhc2VOb0ZpbGUgPT09IHVybCArICcvJykge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZTtcbiAgICB9XG4gICAgaWYgKHJld3JpdHRlblVybCkge1xuICAgICAgdGhpcy4kJHBhcnNlKHJld3JpdHRlblVybCk7XG4gICAgfVxuICAgIHJldHVybiAhIXJld3JpdHRlblVybDtcbiAgfTtcblxuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgLy8gaW5jbHVkZSBoYXNoUHJlZml4IGluICQkYWJzVXJsIHdoZW4gJCR1cmwgaXMgZW1wdHkgc28gSUU5IGRvZXMgbm90IHJlbG9hZCBwYWdlIGJlY2F1c2Ugb2YgcmVtb3ZhbCBvZiAnIydcbiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZSArIGhhc2hQcmVmaXggKyB0aGlzLiQkdXJsO1xuICB9O1xuXG59XG5cblxudmFyIGxvY2F0aW9uUHJvdG90eXBlID0ge1xuXG4gIC8qKlxuICAgKiBBcmUgd2UgaW4gaHRtbDUgbW9kZT9cbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkaHRtbDU6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBIYXMgYW55IGNoYW5nZSBiZWVuIHJlcGxhY2luZz9cbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkcmVwbGFjZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI2Fic1VybFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBmdWxsIHVybCByZXByZXNlbnRhdGlvbiB3aXRoIGFsbCBzZWdtZW50cyBlbmNvZGVkIGFjY29yZGluZyB0byBydWxlcyBzcGVjaWZpZWQgaW5cbiAgICogW1JGQyAzOTg2XShodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCkuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgYWJzVXJsID0gJGxvY2F0aW9uLmFic1VybCgpO1xuICAgKiAvLyA9PiBcImh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gZnVsbCB1cmxcbiAgICovXG4gIGFic1VybDogbG9jYXRpb25HZXR0ZXIoJyQkYWJzVXJsJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3VybFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gdXJsIChlLmcuIGAvcGF0aD9hPWIjaGFzaGApIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHBhdGgsIHNlYXJjaCBhbmQgaGFzaCwgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciB1cmwgPSAkbG9jYXRpb24udXJsKCk7XG4gICAqIC8vID0+IFwiL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdXJsIE5ldyB1cmwgd2l0aG91dCBiYXNlIHByZWZpeCAoZS5nLiBgL3BhdGg/YT1iI2hhc2hgKVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgdXJsOiBmdW5jdGlvbih1cmwpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodXJsKSkge1xuICAgICAgcmV0dXJuIHRoaXMuJCR1cmw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoID0gUEFUSF9NQVRDSC5leGVjKHVybCk7XG4gICAgaWYgKG1hdGNoWzFdIHx8IHVybCA9PT0gJycpIHRoaXMucGF0aChkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pKTtcbiAgICBpZiAobWF0Y2hbMl0gfHwgbWF0Y2hbMV0gfHwgdXJsID09PSAnJykgdGhpcy5zZWFyY2gobWF0Y2hbM10gfHwgJycpO1xuICAgIHRoaXMuaGFzaChtYXRjaFs1XSB8fCAnJyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcHJvdG9jb2xcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgKlxuICAgKiBSZXR1cm4gcHJvdG9jb2wgb2YgY3VycmVudCB1cmwuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgcHJvdG9jb2wgPSAkbG9jYXRpb24ucHJvdG9jb2woKTtcbiAgICogLy8gPT4gXCJodHRwXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcHJvdG9jb2wgb2YgY3VycmVudCB1cmxcbiAgICovXG4gIHByb3RvY29sOiBsb2NhdGlvbkdldHRlcignJCRwcm90b2NvbCcpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNob3N0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIGhvc3Qgb2YgY3VycmVudCB1cmwuXG4gICAqXG4gICAqIE5vdGU6IGNvbXBhcmVkIHRvIHRoZSBub24tYW5ndWxhciB2ZXJzaW9uIGBsb2NhdGlvbi5ob3N0YCB3aGljaCByZXR1cm5zIGBob3N0bmFtZTpwb3J0YCwgdGhpcyByZXR1cm5zIHRoZSBgaG9zdG5hbWVgIHBvcnRpb24gb25seS5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBob3N0ID0gJGxvY2F0aW9uLmhvc3QoKTtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbVwiXG4gICAqXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vdXNlcjpwYXNzd29yZEBleGFtcGxlLmNvbTo4MDgwLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogaG9zdCA9ICRsb2NhdGlvbi5ob3N0KCk7XG4gICAqIC8vID0+IFwiZXhhbXBsZS5jb21cIlxuICAgKiBob3N0ID0gbG9jYXRpb24uaG9zdDtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbTo4MDgwXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gaG9zdCBvZiBjdXJyZW50IHVybC5cbiAgICovXG4gIGhvc3Q6IGxvY2F0aW9uR2V0dGVyKCckJGhvc3QnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcG9ydFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBwb3J0IG9mIGN1cnJlbnQgdXJsLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiB1cmwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHBvcnQgPSAkbG9jYXRpb24ucG9ydCgpO1xuICAgKiAvLyA9PiA4MFxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBwb3J0XG4gICAqL1xuICBwb3J0OiBsb2NhdGlvbkdldHRlcignJCRwb3J0JyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3BhdGhcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHBhdGggb2YgY3VycmVudCB1cmwgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2UgcGF0aCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKiBOb3RlOiBQYXRoIHNob3VsZCBhbHdheXMgYmVnaW4gd2l0aCBmb3J3YXJkIHNsYXNoICgvKSwgdGhpcyBtZXRob2Qgd2lsbCBhZGQgdGhlIGZvcndhcmQgc2xhc2hcbiAgICogaWYgaXQgaXMgbWlzc2luZy5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBwYXRoID0gJGxvY2F0aW9uLnBhdGgoKTtcbiAgICogLy8gPT4gXCIvc29tZS9wYXRoXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gcGF0aCBOZXcgcGF0aFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHBhdGhcbiAgICovXG4gIHBhdGg6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJHBhdGgnLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgcGF0aCA9IHBhdGggIT09IG51bGwgPyBwYXRoLnRvU3RyaW5nKCkgOiAnJztcbiAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNzZWFyY2hcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHNlYXJjaCBwYXJ0IChhcyBvYmplY3QpIG9mIGN1cnJlbnQgdXJsIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHNlYXJjaCBwYXJ0IHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgc2VhcmNoT2JqZWN0ID0gJGxvY2F0aW9uLnNlYXJjaCgpO1xuICAgKiAvLyA9PiB7Zm9vOiAnYmFyJywgYmF6OiAneG94byd9XG4gICAqXG4gICAqIC8vIHNldCBmb28gdG8gJ3lpcGVlJ1xuICAgKiAkbG9jYXRpb24uc2VhcmNoKCdmb28nLCAneWlwZWUnKTtcbiAgICogLy8gJGxvY2F0aW9uLnNlYXJjaCgpID0+IHtmb286ICd5aXBlZScsIGJhejogJ3hveG8nfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0LjxzdHJpbmc+fE9iamVjdC48QXJyYXkuPHN0cmluZz4+fSBzZWFyY2ggTmV3IHNlYXJjaCBwYXJhbXMgLSBzdHJpbmcgb3JcbiAgICogaGFzaCBvYmplY3QuXG4gICAqXG4gICAqIFdoZW4gY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgdGhlIG1ldGhvZCBhY3RzIGFzIGEgc2V0dGVyLCBzZXR0aW5nIHRoZSBgc2VhcmNoYCBjb21wb25lbnRcbiAgICogb2YgYCRsb2NhdGlvbmAgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZS5cbiAgICpcbiAgICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgaGFzaCBvYmplY3QgY29udGFpbmluZyBhbiBhcnJheSBvZiB2YWx1ZXMsIHRoZXNlIHZhbHVlcyB3aWxsIGJlIGVuY29kZWRcbiAgICogYXMgZHVwbGljYXRlIHNlYXJjaCBwYXJhbWV0ZXJzIGluIHRoZSB1cmwuXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xOdW1iZXJ8QXJyYXk8c3RyaW5nPnxib29sZWFuKT19IHBhcmFtVmFsdWUgSWYgYHNlYXJjaGAgaXMgYSBzdHJpbmcgb3IgbnVtYmVyLCB0aGVuIGBwYXJhbVZhbHVlYFxuICAgKiB3aWxsIG92ZXJyaWRlIG9ubHkgYSBzaW5nbGUgc2VhcmNoIHByb3BlcnR5LlxuICAgKlxuICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYW4gYXJyYXksIGl0IHdpbGwgb3ZlcnJpZGUgdGhlIHByb3BlcnR5IG9mIHRoZSBgc2VhcmNoYCBjb21wb25lbnQgb2ZcbiAgICogYCRsb2NhdGlvbmAgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQuXG4gICAqXG4gICAqIElmIGBwYXJhbVZhbHVlYCBpcyBgbnVsbGAsIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGJlIGRlbGV0ZWQuXG4gICAqXG4gICAqIElmIGBwYXJhbVZhbHVlYCBpcyBgdHJ1ZWAsIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGJlIGFkZGVkIHdpdGggbm9cbiAgICogdmFsdWUgbm9yIHRyYWlsaW5nIGVxdWFsIHNpZ24uXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH0gSWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgdGhlIHBhcnNlZCBgc2VhcmNoYCBvYmplY3QuIElmIGNhbGxlZCB3aXRoXG4gICAqIG9uZSBvciBtb3JlIGFyZ3VtZW50cyByZXR1cm5zIGAkbG9jYXRpb25gIG9iamVjdCBpdHNlbGYuXG4gICAqL1xuICBzZWFyY2g6IGZ1bmN0aW9uKHNlYXJjaCwgcGFyYW1WYWx1ZSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gdGhpcy4kJHNlYXJjaDtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaWYgKGlzU3RyaW5nKHNlYXJjaCkgfHwgaXNOdW1iZXIoc2VhcmNoKSkge1xuICAgICAgICAgIHNlYXJjaCA9IHNlYXJjaC50b1N0cmluZygpO1xuICAgICAgICAgIHRoaXMuJCRzZWFyY2ggPSBwYXJzZUtleVZhbHVlKHNlYXJjaCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoc2VhcmNoKSkge1xuICAgICAgICAgIHNlYXJjaCA9IGNvcHkoc2VhcmNoLCB7fSk7XG4gICAgICAgICAgLy8gcmVtb3ZlIG9iamVjdCB1bmRlZmluZWQgb3IgbnVsbCBwcm9wZXJ0aWVzXG4gICAgICAgICAgZm9yRWFjaChzZWFyY2gsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSBkZWxldGUgc2VhcmNoW2tleV07XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB0aGlzLiQkc2VhcmNoID0gc2VhcmNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignaXNyY2hhcmcnLFxuICAgICAgICAgICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBgJGxvY2F0aW9uI3NlYXJjaCgpYCBjYWxsIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHBhcmFtVmFsdWUpIHx8IHBhcmFtVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy4kJHNlYXJjaFtzZWFyY2hdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJCRzZWFyY2hbc2VhcmNoXSA9IHBhcmFtVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNoYXNoXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybnMgdGhlIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQ2hhbmdlcyB0aGUgaGFzaCBmcmFnbWVudCB3aGVuIGNhbGxlZCB3aXRoIGEgcGFyYW1ldGVyIGFuZCByZXR1cm5zIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiB1cmwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG8jaGFzaFZhbHVlXG4gICAqIHZhciBoYXNoID0gJGxvY2F0aW9uLmhhc2goKTtcbiAgICogLy8gPT4gXCJoYXNoVmFsdWVcIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBoYXNoIE5ldyBoYXNoIGZyYWdtZW50XG4gICAqIEByZXR1cm4ge3N0cmluZ30gaGFzaFxuICAgKi9cbiAgaGFzaDogbG9jYXRpb25HZXR0ZXJTZXR0ZXIoJyQkaGFzaCcsIGZ1bmN0aW9uKGhhc2gpIHtcbiAgICByZXR1cm4gaGFzaCAhPT0gbnVsbCA/IGhhc2gudG9TdHJpbmcoKSA6ICcnO1xuICB9KSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcmVwbGFjZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSWYgY2FsbGVkLCBhbGwgY2hhbmdlcyB0byAkbG9jYXRpb24gZHVyaW5nIHRoZSBjdXJyZW50IGAkZGlnZXN0YCB3aWxsIHJlcGxhY2UgdGhlIGN1cnJlbnQgaGlzdG9yeVxuICAgKiByZWNvcmQsIGluc3RlYWQgb2YgYWRkaW5nIGEgbmV3IG9uZS5cbiAgICovXG4gIHJlcGxhY2U6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJCRyZXBsYWNlID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxuZm9yRWFjaChbTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwsIExvY2F0aW9uSGFzaGJhbmdVcmwsIExvY2F0aW9uSHRtbDVVcmxdLCBmdW5jdGlvbihMb2NhdGlvbikge1xuICBMb2NhdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGxvY2F0aW9uUHJvdG90eXBlKTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jc3RhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHRoZSBoaXN0b3J5IHN0YXRlIG9iamVjdCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSB0aGUgaGlzdG9yeSBzdGF0ZSBvYmplY3Qgd2hlbiBjYWxsZWQgd2l0aCBvbmUgcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqIFRoZSBzdGF0ZSBvYmplY3QgaXMgbGF0ZXIgcGFzc2VkIHRvIGBwdXNoU3RhdGVgIG9yIGByZXBsYWNlU3RhdGVgLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIG1ldGhvZCBpcyBzdXBwb3J0ZWQgb25seSBpbiBIVE1MNSBtb2RlIGFuZCBvbmx5IGluIGJyb3dzZXJzIHN1cHBvcnRpbmdcbiAgICogdGhlIEhUTUw1IEhpc3RvcnkgQVBJIChpLmUuIG1ldGhvZHMgYHB1c2hTdGF0ZWAgYW5kIGByZXBsYWNlU3RhdGVgKS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydFxuICAgKiBvbGRlciBicm93c2VycyAobGlrZSBJRTkgb3IgQW5kcm9pZCA8IDQuMCksIGRvbid0IHVzZSB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZSBTdGF0ZSBvYmplY3QgZm9yIHB1c2hTdGF0ZSBvciByZXBsYWNlU3RhdGVcbiAgICogQHJldHVybiB7b2JqZWN0fSBzdGF0ZVxuICAgKi9cbiAgTG9jYXRpb24ucHJvdG90eXBlLnN0YXRlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLiQkc3RhdGU7XG4gICAgfVxuXG4gICAgaWYgKExvY2F0aW9uICE9PSBMb2NhdGlvbkh0bWw1VXJsIHx8ICF0aGlzLiQkaHRtbDUpIHtcbiAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignbm9zdGF0ZScsICdIaXN0b3J5IEFQSSBzdGF0ZSBzdXBwb3J0IGlzIGF2YWlsYWJsZSBvbmx5ICcgK1xuICAgICAgICAnaW4gSFRNTDUgbW9kZSBhbmQgb25seSBpbiBicm93c2VycyBzdXBwb3J0aW5nIEhUTUw1IEhpc3RvcnkgQVBJJyk7XG4gICAgfVxuICAgIC8vIFRoZSB1c2VyIG1pZ2h0IG1vZGlmeSBgc3RhdGVPYmplY3RgIGFmdGVyIGludm9raW5nIGAkbG9jYXRpb24uc3RhdGUoc3RhdGVPYmplY3QpYFxuICAgIC8vIGJ1dCB3ZSdyZSBjaGFuZ2luZyB0aGUgJCRzdGF0ZSByZWZlcmVuY2UgdG8gJGJyb3dzZXIuc3RhdGUoKSBkdXJpbmcgdGhlICRkaWdlc3RcbiAgICAvLyBzbyB0aGUgbW9kaWZpY2F0aW9uIHdpbmRvdyBpcyBuYXJyb3cuXG4gICAgdGhpcy4kJHN0YXRlID0gaXNVbmRlZmluZWQoc3RhdGUpID8gbnVsbCA6IHN0YXRlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KTtcblxuXG5mdW5jdGlvbiBsb2NhdGlvbkdldHRlcihwcm9wZXJ0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNbcHJvcGVydHldO1xuICB9O1xufVxuXG5cbmZ1bmN0aW9uIGxvY2F0aW9uR2V0dGVyU2V0dGVyKHByb3BlcnR5LCBwcmVwcm9jZXNzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0aGlzW3Byb3BlcnR5XTtcbiAgICB9XG5cbiAgICB0aGlzW3Byb3BlcnR5XSA9IHByZXByb2Nlc3ModmFsdWUpO1xuICAgIHRoaXMuJCRjb21wb3NlKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbG9jYXRpb25cbiAqXG4gKiBAcmVxdWlyZXMgJHJvb3RFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgJGxvY2F0aW9uIHNlcnZpY2UgcGFyc2VzIHRoZSBVUkwgaW4gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIgKGJhc2VkIG9uIHRoZVxuICogW3dpbmRvdy5sb2NhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vd2luZG93LmxvY2F0aW9uKSkgYW5kIG1ha2VzIHRoZSBVUkxcbiAqIGF2YWlsYWJsZSB0byB5b3VyIGFwcGxpY2F0aW9uLiBDaGFuZ2VzIHRvIHRoZSBVUkwgaW4gdGhlIGFkZHJlc3MgYmFyIGFyZSByZWZsZWN0ZWQgaW50b1xuICogJGxvY2F0aW9uIHNlcnZpY2UgYW5kIGNoYW5nZXMgdG8gJGxvY2F0aW9uIGFyZSByZWZsZWN0ZWQgaW50byB0aGUgYnJvd3NlciBhZGRyZXNzIGJhci5cbiAqXG4gKiAqKlRoZSAkbG9jYXRpb24gc2VydmljZToqKlxuICpcbiAqIC0gRXhwb3NlcyB0aGUgY3VycmVudCBVUkwgaW4gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIsIHNvIHlvdSBjYW5cbiAqICAgLSBXYXRjaCBhbmQgb2JzZXJ2ZSB0aGUgVVJMLlxuICogICAtIENoYW5nZSB0aGUgVVJMLlxuICogLSBTeW5jaHJvbml6ZXMgdGhlIFVSTCB3aXRoIHRoZSBicm93c2VyIHdoZW4gdGhlIHVzZXJcbiAqICAgLSBDaGFuZ2VzIHRoZSBhZGRyZXNzIGJhci5cbiAqICAgLSBDbGlja3MgdGhlIGJhY2sgb3IgZm9yd2FyZCBidXR0b24gKG9yIGNsaWNrcyBhIEhpc3RvcnkgbGluaykuXG4gKiAgIC0gQ2xpY2tzIG9uIGEgbGluay5cbiAqIC0gUmVwcmVzZW50cyB0aGUgVVJMIG9iamVjdCBhcyBhIHNldCBvZiBtZXRob2RzIChwcm90b2NvbCwgaG9zdCwgcG9ydCwgcGF0aCwgc2VhcmNoLCBoYXNoKS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUge0BsaW5rIGd1aWRlLyRsb2NhdGlvbiBEZXZlbG9wZXIgR3VpZGU6IFVzaW5nICRsb2NhdGlvbn1cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoZSBgJGxvY2F0aW9uUHJvdmlkZXJgIHRvIGNvbmZpZ3VyZSBob3cgdGhlIGFwcGxpY2F0aW9uIGRlZXAgbGlua2luZyBwYXRocyBhcmUgc3RvcmVkLlxuICovXG5mdW5jdGlvbiAkTG9jYXRpb25Qcm92aWRlcigpIHtcbiAgdmFyIGhhc2hQcmVmaXggPSAnJyxcbiAgICAgIGh0bWw1TW9kZSA9IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHJlcXVpcmVCYXNlOiB0cnVlLFxuICAgICAgICByZXdyaXRlTGlua3M6IHRydWVcbiAgICAgIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXIjaGFzaFByZWZpeFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwcmVmaXggUHJlZml4IGZvciBoYXNoIHBhcnQgKGNvbnRhaW5pbmcgcGF0aCBhbmQgc2VhcmNoKVxuICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgKi9cbiAgdGhpcy5oYXNoUHJlZml4ID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgaWYgKGlzRGVmaW5lZChwcmVmaXgpKSB7XG4gICAgICBoYXNoUHJlZml4ID0gcHJlZml4O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBoYXNoUHJlZml4O1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlciNodG1sNU1vZGVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7KGJvb2xlYW58T2JqZWN0KT19IG1vZGUgSWYgYm9vbGVhbiwgc2V0cyBgaHRtbDVNb2RlLmVuYWJsZWRgIHRvIHZhbHVlLlxuICAgKiAgIElmIG9iamVjdCwgc2V0cyBgZW5hYmxlZGAsIGByZXF1aXJlQmFzZWAgYW5kIGByZXdyaXRlTGlua3NgIHRvIHJlc3BlY3RpdmUgdmFsdWVzLiBTdXBwb3J0ZWRcbiAgICogICBwcm9wZXJ0aWVzOlxuICAgKiAgIC0gKiplbmFibGVkKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyAoZGVmYXVsdDogZmFsc2UpIElmIHRydWUsIHdpbGwgcmVseSBvbiBgaGlzdG9yeS5wdXNoU3RhdGVgIHRvXG4gICAqICAgICBjaGFuZ2UgdXJscyB3aGVyZSBzdXBwb3J0ZWQuIFdpbGwgZmFsbCBiYWNrIHRvIGhhc2gtcHJlZml4ZWQgcGF0aHMgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3RcbiAgICogICAgIHN1cHBvcnQgYHB1c2hTdGF0ZWAuXG4gICAqICAgLSAqKnJlcXVpcmVCYXNlKiogLSBge2Jvb2xlYW59YCAtIChkZWZhdWx0OiBgdHJ1ZWApIFdoZW4gaHRtbDVNb2RlIGlzIGVuYWJsZWQsIHNwZWNpZmllc1xuICAgKiAgICAgd2hldGhlciBvciBub3QgYSA8YmFzZT4gdGFnIGlzIHJlcXVpcmVkIHRvIGJlIHByZXNlbnQuIElmIGBlbmFibGVkYCBhbmQgYHJlcXVpcmVCYXNlYCBhcmVcbiAgICogICAgIHRydWUsIGFuZCBhIGJhc2UgdGFnIGlzIG5vdCBwcmVzZW50LCBhbiBlcnJvciB3aWxsIGJlIHRocm93biB3aGVuIGAkbG9jYXRpb25gIGlzIGluamVjdGVkLlxuICAgKiAgICAgU2VlIHRoZSB7QGxpbmsgZ3VpZGUvJGxvY2F0aW9uICRsb2NhdGlvbiBndWlkZSBmb3IgbW9yZSBpbmZvcm1hdGlvbn1cbiAgICogICAtICoqcmV3cml0ZUxpbmtzKiogLSBge2Jvb2xlYW59YCAtIChkZWZhdWx0OiBgdHJ1ZWApIFdoZW4gaHRtbDVNb2RlIGlzIGVuYWJsZWQsXG4gICAqICAgICBlbmFibGVzL2Rpc2FibGVzIHVybCByZXdyaXRpbmcgZm9yIHJlbGF0aXZlIGxpbmtzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBodG1sNU1vZGUgb2JqZWN0IGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqL1xuICB0aGlzLmh0bWw1TW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHtcbiAgICBpZiAoaXNCb29sZWFuKG1vZGUpKSB7XG4gICAgICBodG1sNU1vZGUuZW5hYmxlZCA9IG1vZGU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG1vZGUpKSB7XG5cbiAgICAgIGlmIChpc0Jvb2xlYW4obW9kZS5lbmFibGVkKSkge1xuICAgICAgICBodG1sNU1vZGUuZW5hYmxlZCA9IG1vZGUuZW5hYmxlZDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQm9vbGVhbihtb2RlLnJlcXVpcmVCYXNlKSkge1xuICAgICAgICBodG1sNU1vZGUucmVxdWlyZUJhc2UgPSBtb2RlLnJlcXVpcmVCYXNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNCb29sZWFuKG1vZGUucmV3cml0ZUxpbmtzKSkge1xuICAgICAgICBodG1sNU1vZGUucmV3cml0ZUxpbmtzID0gbW9kZS5yZXdyaXRlTGlua3M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaHRtbDVNb2RlO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGV2ZW50XG4gICAqIEBuYW1lICRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdGFydFxuICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCcm9hZGNhc3RlZCBiZWZvcmUgYSBVUkwgd2lsbCBjaGFuZ2UuXG4gICAqXG4gICAqIFRoaXMgY2hhbmdlIGNhbiBiZSBwcmV2ZW50ZWQgYnkgY2FsbGluZ1xuICAgKiBgcHJldmVudERlZmF1bHRgIG1ldGhvZCBvZiB0aGUgZXZlbnQuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGZvciBtb3JlXG4gICAqIGRldGFpbHMgYWJvdXQgZXZlbnQgb2JqZWN0LiBVcG9uIHN1Y2Nlc3NmdWwgY2hhbmdlXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcyAkbG9jYXRpb25DaGFuZ2VTdWNjZXNzfSBpcyBmaXJlZC5cbiAgICpcbiAgICogVGhlIGBuZXdTdGF0ZWAgYW5kIGBvbGRTdGF0ZWAgcGFyYW1ldGVycyBtYXkgYmUgZGVmaW5lZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIHdoZW5cbiAgICogdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIEhUTUw1IEhpc3RvcnkgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmwgTmV3IFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFVybCBVUkwgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5ld1N0YXRlIE5ldyBoaXN0b3J5IHN0YXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFN0YXRlIEhpc3Rvcnkgc3RhdGUgb2JqZWN0IHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBldmVudFxuICAgKiBAbmFtZSAkbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc1xuICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCcm9hZGNhc3RlZCBhZnRlciBhIFVSTCB3YXMgY2hhbmdlZC5cbiAgICpcbiAgICogVGhlIGBuZXdTdGF0ZWAgYW5kIGBvbGRTdGF0ZWAgcGFyYW1ldGVycyBtYXkgYmUgZGVmaW5lZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIHdoZW5cbiAgICogdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIEhUTUw1IEhpc3RvcnkgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmwgTmV3IFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFVybCBVUkwgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5ld1N0YXRlIE5ldyBoaXN0b3J5IHN0YXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFN0YXRlIEhpc3Rvcnkgc3RhdGUgb2JqZWN0IHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICovXG5cbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRzbmlmZmVyJywgJyRyb290RWxlbWVudCcsICckd2luZG93JyxcbiAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICRicm93c2VyLCAkc25pZmZlciwgJHJvb3RFbGVtZW50LCAkd2luZG93KSB7XG4gICAgdmFyICRsb2NhdGlvbixcbiAgICAgICAgTG9jYXRpb25Nb2RlLFxuICAgICAgICBiYXNlSHJlZiA9ICRicm93c2VyLmJhc2VIcmVmKCksIC8vIGlmIGJhc2VbaHJlZl0gaXMgdW5kZWZpbmVkLCBpdCBkZWZhdWx0cyB0byAnJ1xuICAgICAgICBpbml0aWFsVXJsID0gJGJyb3dzZXIudXJsKCksXG4gICAgICAgIGFwcEJhc2U7XG5cbiAgICBpZiAoaHRtbDVNb2RlLmVuYWJsZWQpIHtcbiAgICAgIGlmICghYmFzZUhyZWYgJiYgaHRtbDVNb2RlLnJlcXVpcmVCYXNlKSB7XG4gICAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignbm9iYXNlJyxcbiAgICAgICAgICBcIiRsb2NhdGlvbiBpbiBIVE1MNSBtb2RlIHJlcXVpcmVzIGEgPGJhc2U+IHRhZyB0byBiZSBwcmVzZW50IVwiKTtcbiAgICAgIH1cbiAgICAgIGFwcEJhc2UgPSBzZXJ2ZXJCYXNlKGluaXRpYWxVcmwpICsgKGJhc2VIcmVmIHx8ICcvJyk7XG4gICAgICBMb2NhdGlvbk1vZGUgPSAkc25pZmZlci5oaXN0b3J5ID8gTG9jYXRpb25IdG1sNVVybCA6IExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcHBCYXNlID0gc3RyaXBIYXNoKGluaXRpYWxVcmwpO1xuICAgICAgTG9jYXRpb25Nb2RlID0gTG9jYXRpb25IYXNoYmFuZ1VybDtcbiAgICB9XG4gICAgdmFyIGFwcEJhc2VOb0ZpbGUgPSBzdHJpcEZpbGUoYXBwQmFzZSk7XG5cbiAgICAkbG9jYXRpb24gPSBuZXcgTG9jYXRpb25Nb2RlKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsICcjJyArIGhhc2hQcmVmaXgpO1xuICAgICRsb2NhdGlvbi4kJHBhcnNlTGlua1VybChpbml0aWFsVXJsLCBpbml0aWFsVXJsKTtcblxuICAgICRsb2NhdGlvbi4kJHN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcblxuICAgIHZhciBJR05PUkVfVVJJX1JFR0VYUCA9IC9eXFxzKihqYXZhc2NyaXB0fG1haWx0byk6L2k7XG5cbiAgICBmdW5jdGlvbiBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICAgIHZhciBvbGRVcmwgPSAkbG9jYXRpb24udXJsKCk7XG4gICAgICB2YXIgb2xkU3RhdGUgPSAkbG9jYXRpb24uJCRzdGF0ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgICRicm93c2VyLnVybCh1cmwsIHJlcGxhY2UsIHN0YXRlKTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgJGxvY2F0aW9uLnN0YXRlKCkgcmV0dXJucyByZWZlcmVudGlhbGx5IGlkZW50aWNhbCAobm90IGp1c3QgZGVlcGx5IGVxdWFsKVxuICAgICAgICAvLyBzdGF0ZSBvYmplY3Q7IHRoaXMgbWFrZXMgcG9zc2libGUgcXVpY2sgY2hlY2tpbmcgaWYgdGhlIHN0YXRlIGNoYW5nZWQgaW4gdGhlIGRpZ2VzdFxuICAgICAgICAvLyBsb29wLiBDaGVja2luZyBkZWVwIGVxdWFsaXR5IHdvdWxkIGJlIHRvbyBleHBlbnNpdmUuXG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gUmVzdG9yZSBvbGQgdmFsdWVzIGlmIHB1c2hTdGF0ZSBmYWlsc1xuICAgICAgICAkbG9jYXRpb24udXJsKG9sZFVybCk7XG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7XG5cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkcm9vdEVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIC8vIFRPRE8odm9qdGEpOiByZXdyaXRlIGxpbmsgd2hlbiBvcGVuaW5nIGluIG5ldyB0YWIvd2luZG93IChpbiBsZWdhY3kgYnJvd3NlcilcbiAgICAgIC8vIGN1cnJlbnRseSB3ZSBvcGVuIG5pY2UgdXJsIGxpbmsgYW5kIHJlZGlyZWN0IHRoZW5cblxuICAgICAgaWYgKCFodG1sNU1vZGUucmV3cml0ZUxpbmtzIHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSB8fCBldmVudC53aGljaCA9PSAyIHx8IGV2ZW50LmJ1dHRvbiA9PSAyKSByZXR1cm47XG5cbiAgICAgIHZhciBlbG0gPSBqcUxpdGUoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgLy8gdHJhdmVyc2UgdGhlIERPTSB1cCB0byBmaW5kIGZpcnN0IEEgdGFnXG4gICAgICB3aGlsZSAobm9kZU5hbWVfKGVsbVswXSkgIT09ICdhJykge1xuICAgICAgICAvLyBpZ25vcmUgcmV3cml0aW5nIGlmIG5vIEEgdGFnIChyZWFjaGVkIHJvb3QgZWxlbWVudCwgb3Igbm8gcGFyZW50IC0gcmVtb3ZlZCBmcm9tIGRvY3VtZW50KVxuICAgICAgICBpZiAoZWxtWzBdID09PSAkcm9vdEVsZW1lbnRbMF0gfHwgIShlbG0gPSBlbG0ucGFyZW50KCkpWzBdKSByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhYnNIcmVmID0gZWxtLnByb3AoJ2hyZWYnKTtcbiAgICAgIC8vIGdldCB0aGUgYWN0dWFsIGhyZWYgYXR0cmlidXRlIC0gc2VlXG4gICAgICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZGQzNDcxNDgodj12cy44NSkuYXNweFxuICAgICAgdmFyIHJlbEhyZWYgPSBlbG0uYXR0cignaHJlZicpIHx8IGVsbS5hdHRyKCd4bGluazpocmVmJyk7XG5cbiAgICAgIGlmIChpc09iamVjdChhYnNIcmVmKSAmJiBhYnNIcmVmLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScpIHtcbiAgICAgICAgLy8gU1ZHQW5pbWF0ZWRTdHJpbmcuYW5pbVZhbCBzaG91bGQgYmUgaWRlbnRpY2FsIHRvIFNWR0FuaW1hdGVkU3RyaW5nLmJhc2VWYWwsIHVubGVzcyBkdXJpbmdcbiAgICAgICAgLy8gYW4gYW5pbWF0aW9uLlxuICAgICAgICBhYnNIcmVmID0gdXJsUmVzb2x2ZShhYnNIcmVmLmFuaW1WYWwpLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIC8vIElnbm9yZSB3aGVuIHVybCBpcyBzdGFydGVkIHdpdGggamF2YXNjcmlwdDogb3IgbWFpbHRvOlxuICAgICAgaWYgKElHTk9SRV9VUklfUkVHRVhQLnRlc3QoYWJzSHJlZikpIHJldHVybjtcblxuICAgICAgaWYgKGFic0hyZWYgJiYgIWVsbS5hdHRyKCd0YXJnZXQnKSAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgaWYgKCRsb2NhdGlvbi4kJHBhcnNlTGlua1VybChhYnNIcmVmLCByZWxIcmVmKSkge1xuICAgICAgICAgIC8vIFdlIGRvIGEgcHJldmVudERlZmF1bHQgZm9yIGFsbCB1cmxzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIGFuZ3VsYXIgYXBwbGljYXRpb24sXG4gICAgICAgICAgLy8gaW4gaHRtbDVtb2RlIGFuZCBhbHNvIHdpdGhvdXQsIHNvIHRoYXQgd2UgYXJlIGFibGUgdG8gYWJvcnQgbmF2aWdhdGlvbiB3aXRob3V0XG4gICAgICAgICAgLy8gZ2V0dGluZyBkb3VibGUgZW50cmllcyBpbiB0aGUgbG9jYXRpb24gaGlzdG9yeS5cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIC8vIHVwZGF0ZSBsb2NhdGlvbiBtYW51YWxseVxuICAgICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT0gJGJyb3dzZXIudXJsKCkpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICAvLyBoYWNrIHRvIHdvcmsgYXJvdW5kIEZGNiBidWcgNjg0MjA4IHdoZW4gc2NlbmFyaW8gcnVubmVyIGNsaWNrcyBvbiBsaW5rc1xuICAgICAgICAgICAgJHdpbmRvdy5hbmd1bGFyWydmZi02ODQyMDgtcHJldmVudERlZmF1bHQnXSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cblxuICAgIC8vIHJld3JpdGUgaGFzaGJhbmcgdXJsIDw+IGh0bWw1IHVybFxuICAgIGlmICh0cmltRW1wdHlIYXNoKCRsb2NhdGlvbi5hYnNVcmwoKSkgIT0gdHJpbUVtcHR5SGFzaChpbml0aWFsVXJsKSkge1xuICAgICAgJGJyb3dzZXIudXJsKCRsb2NhdGlvbi5hYnNVcmwoKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxpemluZyA9IHRydWU7XG5cbiAgICAvLyB1cGRhdGUgJGxvY2F0aW9uIHdoZW4gJGJyb3dzZXIgdXJsIGNoYW5nZXNcbiAgICAkYnJvd3Nlci5vblVybENoYW5nZShmdW5jdGlvbihuZXdVcmwsIG5ld1N0YXRlKSB7XG5cbiAgICAgIGlmIChpc1VuZGVmaW5lZChiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIG5ld1VybCkpKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBuYXZpZ2F0aW5nIG91dHNpZGUgb2YgdGhlIGFwcCB0aGVuIGZvcmNlIGEgcmVsb2FkXG4gICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9IG5ld1VybDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvbGRVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XG4gICAgICAgIHZhciBvbGRTdGF0ZSA9ICRsb2NhdGlvbi4kJHN0YXRlO1xuICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgbmV3VXJsID0gdHJpbUVtcHR5SGFzaChuZXdVcmwpO1xuICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShuZXdVcmwpO1xuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG5ld1N0YXRlO1xuXG4gICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbmV3VXJsLCBvbGRVcmwsXG4gICAgICAgICAgICBuZXdTdGF0ZSwgb2xkU3RhdGUpLmRlZmF1bHRQcmV2ZW50ZWQ7XG5cbiAgICAgICAgLy8gaWYgdGhlIGxvY2F0aW9uIHdhcyBjaGFuZ2VkIGJ5IGEgYCRsb2NhdGlvbkNoYW5nZVN0YXJ0YCBoYW5kbGVyIHRoZW4gc3RvcFxuICAgICAgICAvLyBwcm9jZXNzaW5nIHRoaXMgbG9jYXRpb24gY2hhbmdlXG4gICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT09IG5ld1VybCkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTtcbiAgICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG9sZFN0YXRlO1xuICAgICAgICAgIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sob2xkVXJsLCBmYWxzZSwgb2xkU3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIGJyb3dzZXJcbiAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiAkbG9jYXRpb25XYXRjaCgpIHtcbiAgICAgIHZhciBvbGRVcmwgPSB0cmltRW1wdHlIYXNoKCRicm93c2VyLnVybCgpKTtcbiAgICAgIHZhciBuZXdVcmwgPSB0cmltRW1wdHlIYXNoKCRsb2NhdGlvbi5hYnNVcmwoKSk7XG4gICAgICB2YXIgb2xkU3RhdGUgPSAkYnJvd3Nlci5zdGF0ZSgpO1xuICAgICAgdmFyIGN1cnJlbnRSZXBsYWNlID0gJGxvY2F0aW9uLiQkcmVwbGFjZTtcbiAgICAgIHZhciB1cmxPclN0YXRlQ2hhbmdlZCA9IG9sZFVybCAhPT0gbmV3VXJsIHx8XG4gICAgICAgICgkbG9jYXRpb24uJCRodG1sNSAmJiAkc25pZmZlci5oaXN0b3J5ICYmIG9sZFN0YXRlICE9PSAkbG9jYXRpb24uJCRzdGF0ZSk7XG5cbiAgICAgIGlmIChpbml0aWFsaXppbmcgfHwgdXJsT3JTdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG5cbiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBuZXdVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XG4gICAgICAgICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbmV3VXJsLCBvbGRVcmwsXG4gICAgICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlLCBvbGRTdGF0ZSkuZGVmYXVsdFByZXZlbnRlZDtcblxuICAgICAgICAgIC8vIGlmIHRoZSBsb2NhdGlvbiB3YXMgY2hhbmdlZCBieSBhIGAkbG9jYXRpb25DaGFuZ2VTdGFydGAgaGFuZGxlciB0aGVuIHN0b3BcbiAgICAgICAgICAvLyBwcm9jZXNzaW5nIHRoaXMgbG9jYXRpb24gY2hhbmdlXG4gICAgICAgICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPT0gbmV3VXJsKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTtcbiAgICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh1cmxPclN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKG5ld1VybCwgY3VycmVudFJlcGxhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkU3RhdGUgPT09ICRsb2NhdGlvbi4kJHN0YXRlID8gbnVsbCA6ICRsb2NhdGlvbi4kJHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgJGxvY2F0aW9uLiQkcmVwbGFjZSA9IGZhbHNlO1xuXG4gICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIHJldHVybiBhbnl0aGluZyBiZWNhdXNlICRldmFsQXN5bmMgd2lsbCBtYWtlIHRoZSBkaWdlc3QgbG9vcCBkaXJ0eSB3aGVuXG4gICAgICAvLyB0aGVyZSBpcyBhIGNoYW5nZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuICRsb2NhdGlvbjtcblxuICAgIGZ1bmN0aW9uIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSkge1xuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgJGxvY2F0aW9uLmFic1VybCgpLCBvbGRVcmwsXG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlLCBvbGRTdGF0ZSk7XG4gICAgfVxufV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRsb2dcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTaW1wbGUgc2VydmljZSBmb3IgbG9nZ2luZy4gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzYWZlbHkgd3JpdGVzIHRoZSBtZXNzYWdlXG4gKiBpbnRvIHRoZSBicm93c2VyJ3MgY29uc29sZSAoaWYgcHJlc2VudCkuXG4gKlxuICogVGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIHNlcnZpY2UgaXMgdG8gc2ltcGxpZnkgZGVidWdnaW5nIGFuZCB0cm91Ymxlc2hvb3RpbmcuXG4gKlxuICogVGhlIGRlZmF1bHQgaXMgdG8gbG9nIGBkZWJ1Z2AgbWVzc2FnZXMuIFlvdSBjYW4gdXNlXG4gKiB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyIG5nLiRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWR9IHRvIGNoYW5nZSB0aGlzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJsb2dFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbG9nRXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0xvZ0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9nJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9nKSB7XG4gICAgICAgICAgICRzY29wZS4kbG9nID0gJGxvZztcbiAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSAnSGVsbG8gV29ybGQhJztcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkxvZ0NvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwPlJlbG9hZCB0aGlzIHBhZ2Ugd2l0aCBvcGVuIGNvbnNvbGUsIGVudGVyIHRleHQgYW5kIGhpdCB0aGUgbG9nIGJ1dHRvbi4uLjwvcD5cbiAgICAgICAgIDxsYWJlbD5NZXNzYWdlOlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtZXNzYWdlXCIgLz48L2xhYmVsPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cubG9nKG1lc3NhZ2UpXCI+bG9nPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy53YXJuKG1lc3NhZ2UpXCI+d2FybjwvYnV0dG9uPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cuaW5mbyhtZXNzYWdlKVwiPmluZm88L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmVycm9yKG1lc3NhZ2UpXCI+ZXJyb3I8L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmRlYnVnKG1lc3NhZ2UpXCI+ZGVidWc8L2J1dHRvbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkbG9nUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoZSBgJGxvZ1Byb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBsb2dzIG1lc3NhZ2VzXG4gKi9cbmZ1bmN0aW9uICRMb2dQcm92aWRlcigpIHtcbiAgdmFyIGRlYnVnID0gdHJ1ZSxcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWRcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGZsYWcgZW5hYmxlIG9yIGRpc2FibGUgZGVidWcgbGV2ZWwgbWVzc2FnZXNcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuZGVidWdFbmFibGVkID0gZnVuY3Rpb24oZmxhZykge1xuICAgIGlmIChpc0RlZmluZWQoZmxhZykpIHtcbiAgICAgIGRlYnVnID0gZmxhZztcbiAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRlYnVnO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbigkd2luZG93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNsb2dcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGEgbG9nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgbG9nOiBjb25zb2xlTG9nKCdsb2cnKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2luZm9cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGluZm9ybWF0aW9uIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgaW5mbzogY29uc29sZUxvZygnaW5mbycpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjd2FyblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSB3YXJuaW5nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgd2FybjogY29uc29sZUxvZygnd2FybicpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjZXJyb3JcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGVycm9yIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgZXJyb3I6IGNvbnNvbGVMb2coJ2Vycm9yJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNkZWJ1Z1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSBkZWJ1ZyBtZXNzYWdlXG4gICAgICAgKi9cbiAgICAgIGRlYnVnOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBmbiA9IGNvbnNvbGVMb2coJ2RlYnVnJyk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICAgICAgZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KCkpXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdEVycm9yKGFyZykge1xuICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGlmIChhcmcuc3RhY2spIHtcbiAgICAgICAgICBhcmcgPSAoYXJnLm1lc3NhZ2UgJiYgYXJnLnN0YWNrLmluZGV4T2YoYXJnLm1lc3NhZ2UpID09PSAtMSlcbiAgICAgICAgICAgICAgPyAnRXJyb3I6ICcgKyBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnN0YWNrXG4gICAgICAgICAgICAgIDogYXJnLnN0YWNrO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZy5zb3VyY2VVUkwpIHtcbiAgICAgICAgICBhcmcgPSBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnNvdXJjZVVSTCArICc6JyArIGFyZy5saW5lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnNvbGVMb2codHlwZSkge1xuICAgICAgdmFyIGNvbnNvbGUgPSAkd2luZG93LmNvbnNvbGUgfHwge30sXG4gICAgICAgICAgbG9nRm4gPSBjb25zb2xlW3R5cGVdIHx8IGNvbnNvbGUubG9nIHx8IG5vb3AsXG4gICAgICAgICAgaGFzQXBwbHkgPSBmYWxzZTtcblxuICAgICAgLy8gTm90ZTogcmVhZGluZyBsb2dGbi5hcHBseSB0aHJvd3MgYW4gZXJyb3IgaW4gSUUxMSBpbiBJRTggZG9jdW1lbnQgbW9kZS5cbiAgICAgIC8vIFRoZSByZWFzb24gYmVoaW5kIHRoaXMgaXMgdGhhdCBjb25zb2xlLmxvZyBoYXMgdHlwZSBcIm9iamVjdFwiIGluIElFOC4uLlxuICAgICAgdHJ5IHtcbiAgICAgICAgaGFzQXBwbHkgPSAhIWxvZ0ZuLmFwcGx5O1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgaWYgKGhhc0FwcGx5KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaChmb3JtYXRFcnJvcihhcmcpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gbG9nRm4uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIHdlIGFyZSBJRSB3aGljaCBlaXRoZXIgZG9lc24ndCBoYXZlIHdpbmRvdy5jb25zb2xlID0+IHRoaXMgaXMgbm9vcCBhbmQgd2UgZG8gbm90aGluZyxcbiAgICAgIC8vIG9yIHdlIGFyZSBJRSB3aGVyZSBjb25zb2xlLmxvZyBkb2Vzbid0IGhhdmUgYXBwbHkgc28gd2UgbG9nIGF0IGxlYXN0IGZpcnN0IDIgYXJnc1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFyZzEsIGFyZzIpIHtcbiAgICAgICAgbG9nRm4oYXJnMSwgYXJnMiA9PSBudWxsID8gJycgOiBhcmcyKTtcbiAgICAgIH07XG4gICAgfVxuICB9XTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2VzIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi9cblxudmFyICRwYXJzZU1pbkVyciA9IG1pbkVycignJHBhcnNlJyk7XG5cbi8vIFNhbmRib3hpbmcgQW5ndWxhciBFeHByZXNzaW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBbmd1bGFyIGV4cHJlc3Npb25zIGFyZSBnZW5lcmFsbHkgY29uc2lkZXJlZCBzYWZlIGJlY2F1c2UgdGhlc2UgZXhwcmVzc2lvbnMgb25seSBoYXZlIGRpcmVjdFxuLy8gYWNjZXNzIHRvIGAkc2NvcGVgIGFuZCBsb2NhbHMuIEhvd2V2ZXIsIG9uZSBjYW4gb2J0YWluIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IEpTIGNvZGUgYnlcbi8vIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byBuYXRpdmUgSlMgZnVuY3Rpb25zIHN1Y2ggYXMgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yLlxuLy9cbi8vIEFzIGFuIGV4YW1wbGUsIGNvbnNpZGVyIHRoZSBmb2xsb3dpbmcgQW5ndWxhciBleHByZXNzaW9uOlxuLy9cbi8vICAge30udG9TdHJpbmcuY29uc3RydWN0b3IoJ2FsZXJ0KFwiZXZpbCBKUyBjb2RlXCIpJylcbi8vXG4vLyBUaGlzIHNhbmRib3hpbmcgdGVjaG5pcXVlIGlzIG5vdCBwZXJmZWN0IGFuZCBkb2Vzbid0IGFpbSB0byBiZS4gVGhlIGdvYWwgaXMgdG8gcHJldmVudCBleHBsb2l0c1xuLy8gYWdhaW5zdCB0aGUgZXhwcmVzc2lvbiBsYW5ndWFnZSwgYnV0IG5vdCB0byBwcmV2ZW50IGV4cGxvaXRzIHRoYXQgd2VyZSBlbmFibGVkIGJ5IGV4cG9zaW5nXG4vLyBzZW5zaXRpdmUgSmF2YVNjcmlwdCBvciBicm93c2VyIEFQSXMgb24gU2NvcGUuIEV4cG9zaW5nIHN1Y2ggb2JqZWN0cyBvbiBhIFNjb3BlIGlzIG5ldmVyIGEgZ29vZFxuLy8gcHJhY3RpY2UgYW5kIHRoZXJlZm9yZSB3ZSBhcmUgbm90IGV2ZW4gdHJ5aW5nIHRvIHByb3RlY3QgYWdhaW5zdCBpbnRlcmFjdGlvbiB3aXRoIGFuIG9iamVjdFxuLy8gZXhwbGljaXRseSBleHBvc2VkIGluIHRoaXMgd2F5LlxuLy9cbi8vIEluIGdlbmVyYWwsIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBhY2Nlc3MgYSBXaW5kb3cgb2JqZWN0IGZyb20gYW4gYW5ndWxhciBleHByZXNzaW9uIHVubGVzcyBhXG4vLyB3aW5kb3cgb3Igc29tZSBET00gb2JqZWN0IHRoYXQgaGFzIGEgcmVmZXJlbmNlIHRvIHdpbmRvdyBpcyBwdWJsaXNoZWQgb250byBhIFNjb3BlLlxuLy8gU2ltaWxhcmx5IHdlIHByZXZlbnQgaW52b2NhdGlvbnMgb2YgZnVuY3Rpb24ga25vd24gdG8gYmUgZGFuZ2Vyb3VzLCBhcyB3ZWxsIGFzIGFzc2lnbm1lbnRzIHRvXG4vLyBuYXRpdmUgb2JqZWN0cy5cbi8vXG4vLyBTZWUgaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvZ3VpZGUvc2VjdXJpdHlcblxuXG5mdW5jdGlvbiBlbnN1cmVTYWZlTWVtYmVyTmFtZShuYW1lLCBmdWxsRXhwcmVzc2lvbikge1xuICBpZiAobmFtZSA9PT0gXCJfX2RlZmluZUdldHRlcl9fXCIgfHwgbmFtZSA9PT0gXCJfX2RlZmluZVNldHRlcl9fXCJcbiAgICAgIHx8IG5hbWUgPT09IFwiX19sb29rdXBHZXR0ZXJfX1wiIHx8IG5hbWUgPT09IFwiX19sb29rdXBTZXR0ZXJfX1wiXG4gICAgICB8fCBuYW1lID09PSBcIl9fcHJvdG9fX1wiKSB7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZmxkJyxcbiAgICAgICAgJ0F0dGVtcHRpbmcgdG8gYWNjZXNzIGEgZGlzYWxsb3dlZCBmaWVsZCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zISAnXG4gICAgICAgICsgJ0V4cHJlc3Npb246IHswfScsIGZ1bGxFeHByZXNzaW9uKTtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RyaW5nVmFsdWUobmFtZSwgZnVsbEV4cHJlc3Npb24pIHtcbiAgLy8gRnJvbSB0aGUgSmF2YVNjcmlwdCBkb2NzOlxuICAvLyBQcm9wZXJ0eSBuYW1lcyBtdXN0IGJlIHN0cmluZ3MuIFRoaXMgbWVhbnMgdGhhdCBub24tc3RyaW5nIG9iamVjdHMgY2Fubm90IGJlIHVzZWRcbiAgLy8gYXMga2V5cyBpbiBhbiBvYmplY3QuIEFueSBub24tc3RyaW5nIG9iamVjdCwgaW5jbHVkaW5nIGEgbnVtYmVyLCBpcyB0eXBlY2FzdGVkXG4gIC8vIGludG8gYSBzdHJpbmcgdmlhIHRoZSB0b1N0cmluZyBtZXRob2QuXG4gIC8vXG4gIC8vIFNvLCB0byBlbnN1cmUgdGhhdCB3ZSBhcmUgY2hlY2tpbmcgdGhlIHNhbWUgYG5hbWVgIHRoYXQgSmF2YVNjcmlwdCB3b3VsZCB1c2UsXG4gIC8vIHdlIGNhc3QgaXQgdG8gYSBzdHJpbmcsIGlmIHBvc3NpYmxlLlxuICAvLyBEb2luZyBgbmFtZSArICcnYCBjYW4gY2F1c2UgYSByZXBsIGVycm9yIGlmIHRoZSByZXN1bHQgdG8gYHRvU3RyaW5nYCBpcyBub3QgYSBzdHJpbmcsXG4gIC8vIHRoaXMgaXMsIHRoaXMgd2lsbCBoYW5kbGUgb2JqZWN0cyB0aGF0IG1pc2JlaGF2ZS5cbiAgbmFtZSA9IG5hbWUgKyAnJztcbiAgaWYgKCFpc1N0cmluZyhuYW1lKSkge1xuICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2NzdCcsXG4gICAgICAgICdDYW5ub3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlISAnXG4gICAgICAgICsgJ0V4cHJlc3Npb246IHswfScsIGZ1bGxFeHByZXNzaW9uKTtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlU2FmZU9iamVjdChvYmosIGZ1bGxFeHByZXNzaW9uKSB7XG4gIC8vIG5pZnR5IGNoZWNrIGlmIG9iaiBpcyBGdW5jdGlvbiB0aGF0IGlzIGZhc3QgYW5kIHdvcmtzIGFjcm9zcyBpZnJhbWVzIGFuZCBvdGhlciBjb250ZXh0c1xuICBpZiAob2JqKSB7XG4gICAgaWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gb2JqKSB7XG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNmbicsXG4gICAgICAgICAgJ1JlZmVyZW5jaW5nIEZ1bmN0aW9uIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JyxcbiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmICgvLyBpc1dpbmRvdyhvYmopXG4gICAgICAgIG9iai53aW5kb3cgPT09IG9iaikge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2Vjd2luZG93JyxcbiAgICAgICAgICAnUmVmZXJlbmNpbmcgdGhlIFdpbmRvdyBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgICAgZnVsbEV4cHJlc3Npb24pO1xuICAgIH0gZWxzZSBpZiAoLy8gaXNFbGVtZW50KG9iailcbiAgICAgICAgb2JqLmNoaWxkcmVuICYmIChvYmoubm9kZU5hbWUgfHwgKG9iai5wcm9wICYmIG9iai5hdHRyICYmIG9iai5maW5kKSkpIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2RvbScsXG4gICAgICAgICAgJ1JlZmVyZW5jaW5nIERPTSBub2RlcyBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgICAgZnVsbEV4cHJlc3Npb24pO1xuICAgIH0gZWxzZSBpZiAoLy8gYmxvY2sgT2JqZWN0IHNvIHRoYXQgd2UgY2FuJ3QgZ2V0IGhvbGQgb2YgZGFuZ2Vyb3VzIE9iamVjdC4qIG1ldGhvZHNcbiAgICAgICAgb2JqID09PSBPYmplY3QpIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY29iaicsXG4gICAgICAgICAgJ1JlZmVyZW5jaW5nIE9iamVjdCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgICAgZnVsbEV4cHJlc3Npb24pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG52YXIgQ0FMTCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xudmFyIEFQUExZID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xudmFyIEJJTkQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcblxuZnVuY3Rpb24gZW5zdXJlU2FmZUZ1bmN0aW9uKG9iaiwgZnVsbEV4cHJlc3Npb24pIHtcbiAgaWYgKG9iaikge1xuICAgIGlmIChvYmouY29uc3RydWN0b3IgPT09IG9iaikge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZm4nLFxuICAgICAgICAnUmVmZXJlbmNpbmcgRnVuY3Rpb24gaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLFxuICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmIChvYmogPT09IENBTEwgfHwgb2JqID09PSBBUFBMWSB8fCBvYmogPT09IEJJTkQpIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2ZmJyxcbiAgICAgICAgJ1JlZmVyZW5jaW5nIGNhbGwsIGFwcGx5IG9yIGJpbmQgaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLFxuICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVNhZmVBc3NpZ25Db250ZXh0KG9iaiwgZnVsbEV4cHJlc3Npb24pIHtcbiAgaWYgKG9iaikge1xuICAgIGlmIChvYmogPT09ICgwKS5jb25zdHJ1Y3RvciB8fCBvYmogPT09IChmYWxzZSkuY29uc3RydWN0b3IgfHwgb2JqID09PSAnJy5jb25zdHJ1Y3RvciB8fFxuICAgICAgICBvYmogPT09IHt9LmNvbnN0cnVjdG9yIHx8IG9iaiA9PT0gW10uY29uc3RydWN0b3IgfHwgb2JqID09PSBGdW5jdGlvbi5jb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjYWYnLFxuICAgICAgICAnQXNzaWduaW5nIHRvIGEgY29uc3RydWN0b3IgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JywgZnVsbEV4cHJlc3Npb24pO1xuICAgIH1cbiAgfVxufVxuXG52YXIgT1BFUkFUT1JTID0gY3JlYXRlTWFwKCk7XG5mb3JFYWNoKCcrIC0gKiAvICUgPT09ICE9PSA9PSAhPSA8ID4gPD0gPj0gJiYgfHwgISA9IHwnLnNwbGl0KCcgJyksIGZ1bmN0aW9uKG9wZXJhdG9yKSB7IE9QRVJBVE9SU1tvcGVyYXRvcl0gPSB0cnVlOyB9KTtcbnZhciBFU0NBUEUgPSB7XCJuXCI6XCJcXG5cIiwgXCJmXCI6XCJcXGZcIiwgXCJyXCI6XCJcXHJcIiwgXCJ0XCI6XCJcXHRcIiwgXCJ2XCI6XCJcXHZcIiwgXCInXCI6XCInXCIsICdcIic6J1wiJ307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTGV4ZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5MZXhlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBMZXhlcixcblxuICBsZXg6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIHRoaXMudG9rZW5zID0gW107XG5cbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgICBpZiAoY2ggPT09ICdcIicgfHwgY2ggPT09IFwiJ1wiKSB7XG4gICAgICAgIHRoaXMucmVhZFN0cmluZyhjaCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNOdW1iZXIoY2gpIHx8IGNoID09PSAnLicgJiYgdGhpcy5pc051bWJlcih0aGlzLnBlZWsoKSkpIHtcbiAgICAgICAgdGhpcy5yZWFkTnVtYmVyKCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNJZGVudChjaCkpIHtcbiAgICAgICAgdGhpcy5yZWFkSWRlbnQoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pcyhjaCwgJygpe31bXS4sOzo/JykpIHtcbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7aW5kZXg6IHRoaXMuaW5kZXgsIHRleHQ6IGNofSk7XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1doaXRlc3BhY2UoY2gpKSB7XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjaDIgPSBjaCArIHRoaXMucGVlaygpO1xuICAgICAgICB2YXIgY2gzID0gY2gyICsgdGhpcy5wZWVrKDIpO1xuICAgICAgICB2YXIgb3AxID0gT1BFUkFUT1JTW2NoXTtcbiAgICAgICAgdmFyIG9wMiA9IE9QRVJBVE9SU1tjaDJdO1xuICAgICAgICB2YXIgb3AzID0gT1BFUkFUT1JTW2NoM107XG4gICAgICAgIGlmIChvcDEgfHwgb3AyIHx8IG9wMykge1xuICAgICAgICAgIHZhciB0b2tlbiA9IG9wMyA/IGNoMyA6IChvcDIgPyBjaDIgOiBjaCk7XG4gICAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7aW5kZXg6IHRoaXMuaW5kZXgsIHRleHQ6IHRva2VuLCBvcGVyYXRvcjogdHJ1ZX0pO1xuICAgICAgICAgIHRoaXMuaW5kZXggKz0gdG9rZW4ubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignVW5leHBlY3RlZCBuZXh0IGNoYXJhY3RlciAnLCB0aGlzLmluZGV4LCB0aGlzLmluZGV4ICsgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudG9rZW5zO1xuICB9LFxuXG4gIGlzOiBmdW5jdGlvbihjaCwgY2hhcnMpIHtcbiAgICByZXR1cm4gY2hhcnMuaW5kZXhPZihjaCkgIT09IC0xO1xuICB9LFxuXG4gIHBlZWs6IGZ1bmN0aW9uKGkpIHtcbiAgICB2YXIgbnVtID0gaSB8fCAxO1xuICAgIHJldHVybiAodGhpcy5pbmRleCArIG51bSA8IHRoaXMudGV4dC5sZW5ndGgpID8gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4ICsgbnVtKSA6IGZhbHNlO1xuICB9LFxuXG4gIGlzTnVtYmVyOiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiAoJzAnIDw9IGNoICYmIGNoIDw9ICc5JykgJiYgdHlwZW9mIGNoID09PSBcInN0cmluZ1wiO1xuICB9LFxuXG4gIGlzV2hpdGVzcGFjZTogZnVuY3Rpb24oY2gpIHtcbiAgICAvLyBJRSB0cmVhdHMgbm9uLWJyZWFraW5nIHNwYWNlIGFzIFxcdTAwQTBcbiAgICByZXR1cm4gKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHInIHx8IGNoID09PSAnXFx0JyB8fFxuICAgICAgICAgICAgY2ggPT09ICdcXG4nIHx8IGNoID09PSAnXFx2JyB8fCBjaCA9PT0gJ1xcdTAwQTAnKTtcbiAgfSxcblxuICBpc0lkZW50OiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiAoJ2EnIDw9IGNoICYmIGNoIDw9ICd6JyB8fFxuICAgICAgICAgICAgJ0EnIDw9IGNoICYmIGNoIDw9ICdaJyB8fFxuICAgICAgICAgICAgJ18nID09PSBjaCB8fCBjaCA9PT0gJyQnKTtcbiAgfSxcblxuICBpc0V4cE9wZXJhdG9yOiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnIHx8IHRoaXMuaXNOdW1iZXIoY2gpKTtcbiAgfSxcblxuICB0aHJvd0Vycm9yOiBmdW5jdGlvbihlcnJvciwgc3RhcnQsIGVuZCkge1xuICAgIGVuZCA9IGVuZCB8fCB0aGlzLmluZGV4O1xuICAgIHZhciBjb2xTdHIgPSAoaXNEZWZpbmVkKHN0YXJ0KVxuICAgICAgICAgICAgPyAncyAnICsgc3RhcnQgKyAgJy0nICsgdGhpcy5pbmRleCArICcgWycgKyB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpICsgJ10nXG4gICAgICAgICAgICA6ICcgJyArIGVuZCk7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdsZXhlcnInLCAnTGV4ZXIgRXJyb3I6IHswfSBhdCBjb2x1bW57MX0gaW4gZXhwcmVzc2lvbiBbezJ9XS4nLFxuICAgICAgICBlcnJvciwgY29sU3RyLCB0aGlzLnRleHQpO1xuICB9LFxuXG4gIHJlYWROdW1iZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBudW1iZXIgPSAnJztcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gbG93ZXJjYXNlKHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCkpO1xuICAgICAgaWYgKGNoID09ICcuJyB8fCB0aGlzLmlzTnVtYmVyKGNoKSkge1xuICAgICAgICBudW1iZXIgKz0gY2g7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcGVla0NoID0gdGhpcy5wZWVrKCk7XG4gICAgICAgIGlmIChjaCA9PSAnZScgJiYgdGhpcy5pc0V4cE9wZXJhdG9yKHBlZWtDaCkpIHtcbiAgICAgICAgICBudW1iZXIgKz0gY2g7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0V4cE9wZXJhdG9yKGNoKSAmJlxuICAgICAgICAgICAgcGVla0NoICYmIHRoaXMuaXNOdW1iZXIocGVla0NoKSAmJlxuICAgICAgICAgICAgbnVtYmVyLmNoYXJBdChudW1iZXIubGVuZ3RoIC0gMSkgPT0gJ2UnKSB7XG4gICAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHBPcGVyYXRvcihjaCkgJiZcbiAgICAgICAgICAgICghcGVla0NoIHx8ICF0aGlzLmlzTnVtYmVyKHBlZWtDaCkpICYmXG4gICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PSAnZScpIHtcbiAgICAgICAgICB0aGlzLnRocm93RXJyb3IoJ0ludmFsaWQgZXhwb25lbnQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5pbmRleCsrO1xuICAgIH1cbiAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgIHRleHQ6IG51bWJlcixcbiAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgdmFsdWU6IE51bWJlcihudW1iZXIpXG4gICAgfSk7XG4gIH0sXG5cbiAgcmVhZElkZW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtcbiAgICAgIGlmICghKHRoaXMuaXNJZGVudChjaCkgfHwgdGhpcy5pc051bWJlcihjaCkpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5pbmRleCsrO1xuICAgIH1cbiAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgIHRleHQ6IHRoaXMudGV4dC5zbGljZShzdGFydCwgdGhpcy5pbmRleCksXG4gICAgICBpZGVudGlmaWVyOiB0cnVlXG4gICAgfSk7XG4gIH0sXG5cbiAgcmVhZFN0cmluZzogZnVuY3Rpb24ocXVvdGUpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHRoaXMuaW5kZXgrKztcbiAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgdmFyIHJhd1N0cmluZyA9IHF1b3RlO1xuICAgIHZhciBlc2NhcGUgPSBmYWxzZTtcbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgICByYXdTdHJpbmcgKz0gY2g7XG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIGlmIChjaCA9PT0gJ3UnKSB7XG4gICAgICAgICAgdmFyIGhleCA9IHRoaXMudGV4dC5zdWJzdHJpbmcodGhpcy5pbmRleCArIDEsIHRoaXMuaW5kZXggKyA1KTtcbiAgICAgICAgICBpZiAoIWhleC5tYXRjaCgvW1xcZGEtZl17NH0vaSkpIHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSW52YWxpZCB1bmljb2RlIGVzY2FwZSBbXFxcXHUnICsgaGV4ICsgJ10nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pbmRleCArPSA0O1xuICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleCwgMTYpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcmVwID0gRVNDQVBFW2NoXTtcbiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAocmVwIHx8IGNoKTtcbiAgICAgICAgfVxuICAgICAgICBlc2NhcGUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXFxcJykge1xuICAgICAgICBlc2NhcGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gcXVvdGUpIHtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICBpbmRleDogc3RhcnQsXG4gICAgICAgICAgdGV4dDogcmF3U3RyaW5nLFxuICAgICAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiBzdHJpbmdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmluZyArPSBjaDtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXgrKztcbiAgICB9XG4gICAgdGhpcy50aHJvd0Vycm9yKCdVbnRlcm1pbmF0ZWQgcXVvdGUnLCBzdGFydCk7XG4gIH1cbn07XG5cbnZhciBBU1QgPSBmdW5jdGlvbihsZXhlciwgb3B0aW9ucykge1xuICB0aGlzLmxleGVyID0gbGV4ZXI7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5BU1QuUHJvZ3JhbSA9ICdQcm9ncmFtJztcbkFTVC5FeHByZXNzaW9uU3RhdGVtZW50ID0gJ0V4cHJlc3Npb25TdGF0ZW1lbnQnO1xuQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uID0gJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJztcbkFTVC5Db25kaXRpb25hbEV4cHJlc3Npb24gPSAnQ29uZGl0aW9uYWxFeHByZXNzaW9uJztcbkFTVC5Mb2dpY2FsRXhwcmVzc2lvbiA9ICdMb2dpY2FsRXhwcmVzc2lvbic7XG5BU1QuQmluYXJ5RXhwcmVzc2lvbiA9ICdCaW5hcnlFeHByZXNzaW9uJztcbkFTVC5VbmFyeUV4cHJlc3Npb24gPSAnVW5hcnlFeHByZXNzaW9uJztcbkFTVC5DYWxsRXhwcmVzc2lvbiA9ICdDYWxsRXhwcmVzc2lvbic7XG5BU1QuTWVtYmVyRXhwcmVzc2lvbiA9ICdNZW1iZXJFeHByZXNzaW9uJztcbkFTVC5JZGVudGlmaWVyID0gJ0lkZW50aWZpZXInO1xuQVNULkxpdGVyYWwgPSAnTGl0ZXJhbCc7XG5BU1QuQXJyYXlFeHByZXNzaW9uID0gJ0FycmF5RXhwcmVzc2lvbic7XG5BU1QuUHJvcGVydHkgPSAnUHJvcGVydHknO1xuQVNULk9iamVjdEV4cHJlc3Npb24gPSAnT2JqZWN0RXhwcmVzc2lvbic7XG5BU1QuVGhpc0V4cHJlc3Npb24gPSAnVGhpc0V4cHJlc3Npb24nO1xuXG4vLyBJbnRlcm5hbCB1c2Ugb25seVxuQVNULk5HVmFsdWVQYXJhbWV0ZXIgPSAnTkdWYWx1ZVBhcmFtZXRlcic7XG5cbkFTVC5wcm90b3R5cGUgPSB7XG4gIGFzdDogZnVuY3Rpb24odGV4dCkge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy50b2tlbnMgPSB0aGlzLmxleGVyLmxleCh0ZXh0KTtcblxuICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvZ3JhbSgpO1xuXG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBhbiB1bmV4cGVjdGVkIHRva2VuJywgdGhpcy50b2tlbnNbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcblxuICBwcm9ncmFtOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm9keSA9IFtdO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID4gMCAmJiAhdGhpcy5wZWVrKCd9JywgJyknLCAnOycsICddJykpXG4gICAgICAgIGJvZHkucHVzaCh0aGlzLmV4cHJlc3Npb25TdGF0ZW1lbnQoKSk7XG4gICAgICBpZiAoIXRoaXMuZXhwZWN0KCc7JykpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogQVNULlByb2dyYW0sIGJvZHk6IGJvZHl9O1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBleHByZXNzaW9uU3RhdGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geyB0eXBlOiBBU1QuRXhwcmVzc2lvblN0YXRlbWVudCwgZXhwcmVzc2lvbjogdGhpcy5maWx0ZXJDaGFpbigpIH07XG4gIH0sXG5cbiAgZmlsdGVyQ2hhaW46IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnfCcpKSkge1xuICAgICAgbGVmdCA9IHRoaXMuZmlsdGVyKGxlZnQpO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBleHByZXNzaW9uOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hc3NpZ25tZW50KCk7XG4gIH0sXG5cbiAgYXNzaWdubWVudDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMudGVybmFyeSgpO1xuICAgIGlmICh0aGlzLmV4cGVjdCgnPScpKSB7XG4gICAgICByZXN1bHQgPSB7IHR5cGU6IEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbiwgbGVmdDogcmVzdWx0LCByaWdodDogdGhpcy5hc3NpZ25tZW50KCksIG9wZXJhdG9yOiAnPSd9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuXG4gIHRlcm5hcnk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ZXN0ID0gdGhpcy5sb2dpY2FsT1IoKTtcbiAgICB2YXIgYWx0ZXJuYXRlO1xuICAgIHZhciBjb25zZXF1ZW50O1xuICAgIGlmICh0aGlzLmV4cGVjdCgnPycpKSB7XG4gICAgICBhbHRlcm5hdGUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgIGlmICh0aGlzLmNvbnN1bWUoJzonKSkge1xuICAgICAgICBjb25zZXF1ZW50ID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb24sIHRlc3Q6IHRlc3QsIGFsdGVybmF0ZTogYWx0ZXJuYXRlLCBjb25zZXF1ZW50OiBjb25zZXF1ZW50fTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRlc3Q7XG4gIH0sXG5cbiAgbG9naWNhbE9SOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMubG9naWNhbEFORCgpO1xuICAgIHdoaWxlICh0aGlzLmV4cGVjdCgnfHwnKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkxvZ2ljYWxFeHByZXNzaW9uLCBvcGVyYXRvcjogJ3x8JywgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMubG9naWNhbEFORCgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIGxvZ2ljYWxBTkQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5lcXVhbGl0eSgpO1xuICAgIHdoaWxlICh0aGlzLmV4cGVjdCgnJiYnKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkxvZ2ljYWxFeHByZXNzaW9uLCBvcGVyYXRvcjogJyYmJywgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMuZXF1YWxpdHkoKX07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIGVxdWFsaXR5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMucmVsYXRpb25hbCgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJz09JywnIT0nLCc9PT0nLCchPT0nKSkpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMucmVsYXRpb25hbCgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIHJlbGF0aW9uYWw6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5hZGRpdGl2ZSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJzwnLCAnPicsICc8PScsICc+PScpKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkJpbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy5hZGRpdGl2ZSgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIGFkZGl0aXZlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMubXVsdGlwbGljYXRpdmUoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCcrJywnLScpKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkJpbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy5tdWx0aXBsaWNhdGl2ZSgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIG11bHRpcGxpY2F0aXZlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMudW5hcnkoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCcqJywnLycsJyUnKSkpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMudW5hcnkoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICB1bmFyeTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRva2VuO1xuICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKycsICctJywgJyEnKSkpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IEFTVC5VbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBwcmVmaXg6IHRydWUsIGFyZ3VtZW50OiB0aGlzLnVuYXJ5KCkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucHJpbWFyeSgpO1xuICAgIH1cbiAgfSxcblxuICBwcmltYXJ5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJpbWFyeTtcbiAgICBpZiAodGhpcy5leHBlY3QoJygnKSkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuZmlsdGVyQ2hhaW4oKTtcbiAgICAgIHRoaXMuY29uc3VtZSgnKScpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5leHBlY3QoJ1snKSkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuYXJyYXlEZWNsYXJhdGlvbigpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5leHBlY3QoJ3snKSkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMub2JqZWN0KCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbnN0YW50cy5oYXNPd25Qcm9wZXJ0eSh0aGlzLnBlZWsoKS50ZXh0KSkge1xuICAgICAgcHJpbWFyeSA9IGNvcHkodGhpcy5jb25zdGFudHNbdGhpcy5jb25zdW1lKCkudGV4dF0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuaWRlbnRpZmllcikge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuaWRlbnRpZmllcigpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuY29uc3RhbnQpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmNvbnN0YW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignbm90IGEgcHJpbWFyeSBleHByZXNzaW9uJywgdGhpcy5wZWVrKCkpO1xuICAgIH1cblxuICAgIHZhciBuZXh0O1xuICAgIHdoaWxlICgobmV4dCA9IHRoaXMuZXhwZWN0KCcoJywgJ1snLCAnLicpKSkge1xuICAgICAgaWYgKG5leHQudGV4dCA9PT0gJygnKSB7XG4gICAgICAgIHByaW1hcnkgPSB7dHlwZTogQVNULkNhbGxFeHByZXNzaW9uLCBjYWxsZWU6IHByaW1hcnksIGFyZ3VtZW50czogdGhpcy5wYXJzZUFyZ3VtZW50cygpIH07XG4gICAgICAgIHRoaXMuY29uc3VtZSgnKScpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICdbJykge1xuICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTWVtYmVyRXhwcmVzc2lvbiwgb2JqZWN0OiBwcmltYXJ5LCBwcm9wZXJ0eTogdGhpcy5leHByZXNzaW9uKCksIGNvbXB1dGVkOiB0cnVlIH07XG4gICAgICAgIHRoaXMuY29uc3VtZSgnXScpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICcuJykge1xuICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTWVtYmVyRXhwcmVzc2lvbiwgb2JqZWN0OiBwcmltYXJ5LCBwcm9wZXJ0eTogdGhpcy5pZGVudGlmaWVyKCksIGNvbXB1dGVkOiBmYWxzZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJTVBPU1NJQkxFJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcmltYXJ5O1xuICB9LFxuXG4gIGZpbHRlcjogZnVuY3Rpb24oYmFzZUV4cHJlc3Npb24pIHtcbiAgICB2YXIgYXJncyA9IFtiYXNlRXhwcmVzc2lvbl07XG4gICAgdmFyIHJlc3VsdCA9IHt0eXBlOiBBU1QuQ2FsbEV4cHJlc3Npb24sIGNhbGxlZTogdGhpcy5pZGVudGlmaWVyKCksIGFyZ3VtZW50czogYXJncywgZmlsdGVyOiB0cnVlfTtcblxuICAgIHdoaWxlICh0aGlzLmV4cGVjdCgnOicpKSB7XG4gICAgICBhcmdzLnB1c2godGhpcy5leHByZXNzaW9uKCkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgcGFyc2VBcmd1bWVudHM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJyknKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGFyZ3MucHVzaCh0aGlzLmV4cHJlc3Npb24oKSk7XG4gICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZ3M7XG4gIH0sXG5cbiAgaWRlbnRpZmllcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy5jb25zdW1lKCk7XG4gICAgaWYgKCF0b2tlbi5pZGVudGlmaWVyKSB7XG4gICAgICB0aGlzLnRocm93RXJyb3IoJ2lzIG5vdCBhIHZhbGlkIGlkZW50aWZpZXInLCB0b2tlbik7XG4gICAgfVxuICAgIHJldHVybiB7IHR5cGU6IEFTVC5JZGVudGlmaWVyLCBuYW1lOiB0b2tlbi50ZXh0IH07XG4gIH0sXG5cbiAgY29uc3RhbnQ6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFRPRE8gY2hlY2sgdGhhdCBpdCBpcyBhIGNvbnN0YW50XG4gICAgcmV0dXJuIHsgdHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiB0aGlzLmNvbnN1bWUoKS52YWx1ZSB9O1xuICB9LFxuXG4gIGFycmF5RGVjbGFyYXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICddJykge1xuICAgICAgZG8ge1xuICAgICAgICBpZiAodGhpcy5wZWVrKCddJykpIHtcbiAgICAgICAgICAvLyBTdXBwb3J0IHRyYWlsaW5nIGNvbW1hcyBwZXIgRVM1LjEuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLmV4cHJlc3Npb24oKSk7XG4gICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTtcbiAgICB9XG4gICAgdGhpcy5jb25zdW1lKCddJyk7XG5cbiAgICByZXR1cm4geyB0eXBlOiBBU1QuQXJyYXlFeHByZXNzaW9uLCBlbGVtZW50czogZWxlbWVudHMgfTtcbiAgfSxcblxuICBvYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcm9wZXJ0aWVzID0gW10sIHByb3BlcnR5O1xuICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICd9Jykge1xuICAgICAgZG8ge1xuICAgICAgICBpZiAodGhpcy5wZWVrKCd9JykpIHtcbiAgICAgICAgICAvLyBTdXBwb3J0IHRyYWlsaW5nIGNvbW1hcyBwZXIgRVM1LjEuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcGVydHkgPSB7dHlwZTogQVNULlByb3BlcnR5LCBraW5kOiAnaW5pdCd9O1xuICAgICAgICBpZiAodGhpcy5wZWVrKCkuY29uc3RhbnQpIHtcbiAgICAgICAgICBwcm9wZXJ0eS5rZXkgPSB0aGlzLmNvbnN0YW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuaWRlbnRpZmllcikge1xuICAgICAgICAgIHByb3BlcnR5LmtleSA9IHRoaXMuaWRlbnRpZmllcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihcImludmFsaWQga2V5XCIsIHRoaXMucGVlaygpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnN1bWUoJzonKTtcbiAgICAgICAgcHJvcGVydHkudmFsdWUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgcHJvcGVydGllcy5wdXNoKHByb3BlcnR5KTtcbiAgICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0KCcsJykpO1xuICAgIH1cbiAgICB0aGlzLmNvbnN1bWUoJ30nKTtcblxuICAgIHJldHVybiB7dHlwZTogQVNULk9iamVjdEV4cHJlc3Npb24sIHByb3BlcnRpZXM6IHByb3BlcnRpZXMgfTtcbiAgfSxcblxuICB0aHJvd0Vycm9yOiBmdW5jdGlvbihtc2csIHRva2VuKSB7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdzeW50YXgnLFxuICAgICAgICAnU3ludGF4IEVycm9yOiBUb2tlbiBcXCd7MH1cXCcgezF9IGF0IGNvbHVtbiB7Mn0gb2YgdGhlIGV4cHJlc3Npb24gW3szfV0gc3RhcnRpbmcgYXQgW3s0fV0uJyxcbiAgICAgICAgICB0b2tlbi50ZXh0LCBtc2csICh0b2tlbi5pbmRleCArIDEpLCB0aGlzLnRleHQsIHRoaXMudGV4dC5zdWJzdHJpbmcodG9rZW4uaW5kZXgpKTtcbiAgfSxcblxuICBjb25zdW1lOiBmdW5jdGlvbihlMSkge1xuICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycigndWVvZScsICdVbmV4cGVjdGVkIGVuZCBvZiBleHByZXNzaW9uOiB7MH0nLCB0aGlzLnRleHQpO1xuICAgIH1cblxuICAgIHZhciB0b2tlbiA9IHRoaXMuZXhwZWN0KGUxKTtcbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICB0aGlzLnRocm93RXJyb3IoJ2lzIHVuZXhwZWN0ZWQsIGV4cGVjdGluZyBbJyArIGUxICsgJ10nLCB0aGlzLnBlZWsoKSk7XG4gICAgfVxuICAgIHJldHVybiB0b2tlbjtcbiAgfSxcblxuICBwZWVrVG9rZW46IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycigndWVvZScsICdVbmV4cGVjdGVkIGVuZCBvZiBleHByZXNzaW9uOiB7MH0nLCB0aGlzLnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b2tlbnNbMF07XG4gIH0sXG5cbiAgcGVlazogZnVuY3Rpb24oZTEsIGUyLCBlMywgZTQpIHtcbiAgICByZXR1cm4gdGhpcy5wZWVrQWhlYWQoMCwgZTEsIGUyLCBlMywgZTQpO1xuICB9LFxuXG4gIHBlZWtBaGVhZDogZnVuY3Rpb24oaSwgZTEsIGUyLCBlMywgZTQpIHtcbiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID4gaSkge1xuICAgICAgdmFyIHRva2VuID0gdGhpcy50b2tlbnNbaV07XG4gICAgICB2YXIgdCA9IHRva2VuLnRleHQ7XG4gICAgICBpZiAodCA9PT0gZTEgfHwgdCA9PT0gZTIgfHwgdCA9PT0gZTMgfHwgdCA9PT0gZTQgfHxcbiAgICAgICAgICAoIWUxICYmICFlMiAmJiAhZTMgJiYgIWU0KSkge1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICBleHBlY3Q6IGZ1bmN0aW9uKGUxLCBlMiwgZTMsIGU0KSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy5wZWVrKGUxLCBlMiwgZTMsIGU0KTtcbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIHRoaXMudG9rZW5zLnNoaWZ0KCk7XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuXG4gIC8qIGB1bmRlZmluZWRgIGlzIG5vdCBhIGNvbnN0YW50LCBpdCBpcyBhbiBpZGVudGlmaWVyLFxuICAgKiBidXQgdXNpbmcgaXQgYXMgYW4gaWRlbnRpZmllciBpcyBub3Qgc3VwcG9ydGVkXG4gICAqL1xuICBjb25zdGFudHM6IHtcbiAgICAndHJ1ZSc6IHsgdHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiB0cnVlIH0sXG4gICAgJ2ZhbHNlJzogeyB0eXBlOiBBU1QuTGl0ZXJhbCwgdmFsdWU6IGZhbHNlIH0sXG4gICAgJ251bGwnOiB7IHR5cGU6IEFTVC5MaXRlcmFsLCB2YWx1ZTogbnVsbCB9LFxuICAgICd1bmRlZmluZWQnOiB7dHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiB1bmRlZmluZWQgfSxcbiAgICAndGhpcyc6IHt0eXBlOiBBU1QuVGhpc0V4cHJlc3Npb24gfVxuICB9XG59O1xuXG5mdW5jdGlvbiBpZkRlZmluZWQodiwgZCkge1xuICByZXR1cm4gdHlwZW9mIHYgIT09ICd1bmRlZmluZWQnID8gdiA6IGQ7XG59XG5cbmZ1bmN0aW9uIHBsdXNGbihsLCByKSB7XG4gIGlmICh0eXBlb2YgbCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiByO1xuICBpZiAodHlwZW9mIHIgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gbDtcbiAgcmV0dXJuIGwgKyByO1xufVxuXG5mdW5jdGlvbiBpc1N0YXRlbGVzcygkZmlsdGVyLCBmaWx0ZXJOYW1lKSB7XG4gIHZhciBmbiA9ICRmaWx0ZXIoZmlsdGVyTmFtZSk7XG4gIHJldHVybiAhZm4uJHN0YXRlZnVsO1xufVxuXG5mdW5jdGlvbiBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdCwgJGZpbHRlcikge1xuICB2YXIgYWxsQ29uc3RhbnRzO1xuICB2YXIgYXJnc1RvV2F0Y2g7XG4gIHN3aXRjaCAoYXN0LnR5cGUpIHtcbiAgY2FzZSBBU1QuUHJvZ3JhbTpcbiAgICBhbGxDb25zdGFudHMgPSB0cnVlO1xuICAgIGZvckVhY2goYXN0LmJvZHksIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoZXhwci5leHByZXNzaW9uLCAkZmlsdGVyKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmV4cHJlc3Npb24uY29uc3RhbnQ7XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5MaXRlcmFsOlxuICAgIGFzdC5jb25zdGFudCA9IHRydWU7XG4gICAgYXN0LnRvV2F0Y2ggPSBbXTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmFyZ3VtZW50LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QuYXJndW1lbnQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QuYXJndW1lbnQudG9XYXRjaDtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQmluYXJ5RXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5sZWZ0LCAkZmlsdGVyKTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5yaWdodCwgJGZpbHRlcik7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LmxlZnQuY29uc3RhbnQgJiYgYXN0LnJpZ2h0LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmxlZnQudG9XYXRjaC5jb25jYXQoYXN0LnJpZ2h0LnRvV2F0Y2gpO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5Mb2dpY2FsRXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5sZWZ0LCAkZmlsdGVyKTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5yaWdodCwgJGZpbHRlcik7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LmxlZnQuY29uc3RhbnQgJiYgYXN0LnJpZ2h0LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmNvbnN0YW50ID8gW10gOiBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnRlc3QsICRmaWx0ZXIpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmFsdGVybmF0ZSwgJGZpbHRlcik7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QuY29uc2VxdWVudCwgJGZpbHRlcik7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LnRlc3QuY29uc3RhbnQgJiYgYXN0LmFsdGVybmF0ZS5jb25zdGFudCAmJiBhc3QuY29uc2VxdWVudC5jb25zdGFudDtcbiAgICBhc3QudG9XYXRjaCA9IGFzdC5jb25zdGFudCA/IFtdIDogW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULklkZW50aWZpZXI6XG4gICAgYXN0LmNvbnN0YW50ID0gZmFsc2U7XG4gICAgYXN0LnRvV2F0Y2ggPSBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuTWVtYmVyRXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5vYmplY3QsICRmaWx0ZXIpO1xuICAgIGlmIChhc3QuY29tcHV0ZWQpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnByb3BlcnR5LCAkZmlsdGVyKTtcbiAgICB9XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0Lm9iamVjdC5jb25zdGFudCAmJiAoIWFzdC5jb21wdXRlZCB8fCBhc3QucHJvcGVydHkuY29uc3RhbnQpO1xuICAgIGFzdC50b1dhdGNoID0gW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkNhbGxFeHByZXNzaW9uOlxuICAgIGFsbENvbnN0YW50cyA9IGFzdC5maWx0ZXIgPyBpc1N0YXRlbGVzcygkZmlsdGVyLCBhc3QuY2FsbGVlLm5hbWUpIDogZmFsc2U7XG4gICAgYXJnc1RvV2F0Y2ggPSBbXTtcbiAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoZXhwciwgJGZpbHRlcik7XG4gICAgICBhbGxDb25zdGFudHMgPSBhbGxDb25zdGFudHMgJiYgZXhwci5jb25zdGFudDtcbiAgICAgIGlmICghZXhwci5jb25zdGFudCkge1xuICAgICAgICBhcmdzVG9XYXRjaC5wdXNoLmFwcGx5KGFyZ3NUb1dhdGNoLCBleHByLnRvV2F0Y2gpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGFzdC5jb25zdGFudCA9IGFsbENvbnN0YW50cztcbiAgICBhc3QudG9XYXRjaCA9IGFzdC5maWx0ZXIgJiYgaXNTdGF0ZWxlc3MoJGZpbHRlciwgYXN0LmNhbGxlZS5uYW1lKSA/IGFyZ3NUb1dhdGNoIDogW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnJpZ2h0LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QubGVmdC5jb25zdGFudCAmJiBhc3QucmlnaHQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQXJyYXlFeHByZXNzaW9uOlxuICAgIGFsbENvbnN0YW50cyA9IHRydWU7XG4gICAgYXJnc1RvV2F0Y2ggPSBbXTtcbiAgICBmb3JFYWNoKGFzdC5lbGVtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhleHByLCAkZmlsdGVyKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmNvbnN0YW50O1xuICAgICAgaWYgKCFleHByLmNvbnN0YW50KSB7XG4gICAgICAgIGFyZ3NUb1dhdGNoLnB1c2guYXBwbHkoYXJnc1RvV2F0Y2gsIGV4cHIudG9XYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGFzdC50b1dhdGNoID0gYXJnc1RvV2F0Y2g7XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULk9iamVjdEV4cHJlc3Npb246XG4gICAgYWxsQ29uc3RhbnRzID0gdHJ1ZTtcbiAgICBhcmdzVG9XYXRjaCA9IFtdO1xuICAgIGZvckVhY2goYXN0LnByb3BlcnRpZXMsIGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKHByb3BlcnR5LnZhbHVlLCAkZmlsdGVyKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBwcm9wZXJ0eS52YWx1ZS5jb25zdGFudDtcbiAgICAgIGlmICghcHJvcGVydHkudmFsdWUuY29uc3RhbnQpIHtcbiAgICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgcHJvcGVydHkudmFsdWUudG9XYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGFzdC50b1dhdGNoID0gYXJnc1RvV2F0Y2g7XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULlRoaXNFeHByZXNzaW9uOlxuICAgIGFzdC5jb25zdGFudCA9IGZhbHNlO1xuICAgIGFzdC50b1dhdGNoID0gW107XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXRzKGJvZHkpIHtcbiAgaWYgKGJvZHkubGVuZ3RoICE9IDEpIHJldHVybjtcbiAgdmFyIGxhc3RFeHByZXNzaW9uID0gYm9keVswXS5leHByZXNzaW9uO1xuICB2YXIgY2FuZGlkYXRlID0gbGFzdEV4cHJlc3Npb24udG9XYXRjaDtcbiAgaWYgKGNhbmRpZGF0ZS5sZW5ndGggIT09IDEpIHJldHVybiBjYW5kaWRhdGU7XG4gIHJldHVybiBjYW5kaWRhdGVbMF0gIT09IGxhc3RFeHByZXNzaW9uID8gY2FuZGlkYXRlIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc0Fzc2lnbmFibGUoYXN0KSB7XG4gIHJldHVybiBhc3QudHlwZSA9PT0gQVNULklkZW50aWZpZXIgfHwgYXN0LnR5cGUgPT09IEFTVC5NZW1iZXJFeHByZXNzaW9uO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25hYmxlQVNUKGFzdCkge1xuICBpZiAoYXN0LmJvZHkubGVuZ3RoID09PSAxICYmIGlzQXNzaWduYWJsZShhc3QuYm9keVswXS5leHByZXNzaW9uKSkge1xuICAgIHJldHVybiB7dHlwZTogQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uLCBsZWZ0OiBhc3QuYm9keVswXS5leHByZXNzaW9uLCByaWdodDoge3R5cGU6IEFTVC5OR1ZhbHVlUGFyYW1ldGVyfSwgb3BlcmF0b3I6ICc9J307XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNMaXRlcmFsKGFzdCkge1xuICByZXR1cm4gYXN0LmJvZHkubGVuZ3RoID09PSAwIHx8XG4gICAgICBhc3QuYm9keS5sZW5ndGggPT09IDEgJiYgKFxuICAgICAgYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlID09PSBBU1QuTGl0ZXJhbCB8fFxuICAgICAgYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlID09PSBBU1QuQXJyYXlFeHByZXNzaW9uIHx8XG4gICAgICBhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgPT09IEFTVC5PYmplY3RFeHByZXNzaW9uKTtcbn1cblxuZnVuY3Rpb24gaXNDb25zdGFudChhc3QpIHtcbiAgcmV0dXJuIGFzdC5jb25zdGFudDtcbn1cblxuZnVuY3Rpb24gQVNUQ29tcGlsZXIoYXN0QnVpbGRlciwgJGZpbHRlcikge1xuICB0aGlzLmFzdEJ1aWxkZXIgPSBhc3RCdWlsZGVyO1xuICB0aGlzLiRmaWx0ZXIgPSAkZmlsdGVyO1xufVxuXG5BU1RDb21waWxlci5wcm90b3R5cGUgPSB7XG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGV4cHJlc3Npb24sIGV4cGVuc2l2ZUNoZWNrcykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgYXN0ID0gdGhpcy5hc3RCdWlsZGVyLmFzdChleHByZXNzaW9uKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbmV4dElkOiAwLFxuICAgICAgZmlsdGVyczoge30sXG4gICAgICBleHBlbnNpdmVDaGVja3M6IGV4cGVuc2l2ZUNoZWNrcyxcbiAgICAgIGZuOiB7dmFyczogW10sIGJvZHk6IFtdLCBvd246IHt9fSxcbiAgICAgIGFzc2lnbjoge3ZhcnM6IFtdLCBib2R5OiBbXSwgb3duOiB7fX0sXG4gICAgICBpbnB1dHM6IFtdXG4gICAgfTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdCwgc2VsZi4kZmlsdGVyKTtcbiAgICB2YXIgZXh0cmEgPSAnJztcbiAgICB2YXIgYXNzaWduYWJsZTtcbiAgICB0aGlzLnN0YWdlID0gJ2Fzc2lnbic7XG4gICAgaWYgKChhc3NpZ25hYmxlID0gYXNzaWduYWJsZUFTVChhc3QpKSkge1xuICAgICAgdGhpcy5zdGF0ZS5jb21wdXRpbmcgPSAnYXNzaWduJztcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLm5leHRJZCgpO1xuICAgICAgdGhpcy5yZWN1cnNlKGFzc2lnbmFibGUsIHJlc3VsdCk7XG4gICAgICB0aGlzLnJldHVybl8ocmVzdWx0KTtcbiAgICAgIGV4dHJhID0gJ2ZuLmFzc2lnbj0nICsgdGhpcy5nZW5lcmF0ZUZ1bmN0aW9uKCdhc3NpZ24nLCAncyx2LGwnKTtcbiAgICB9XG4gICAgdmFyIHRvV2F0Y2ggPSBnZXRJbnB1dHMoYXN0LmJvZHkpO1xuICAgIHNlbGYuc3RhZ2UgPSAnaW5wdXRzJztcbiAgICBmb3JFYWNoKHRvV2F0Y2gsIGZ1bmN0aW9uKHdhdGNoLCBrZXkpIHtcbiAgICAgIHZhciBmbktleSA9ICdmbicgKyBrZXk7XG4gICAgICBzZWxmLnN0YXRlW2ZuS2V5XSA9IHt2YXJzOiBbXSwgYm9keTogW10sIG93bjoge319O1xuICAgICAgc2VsZi5zdGF0ZS5jb21wdXRpbmcgPSBmbktleTtcbiAgICAgIHZhciBpbnRvSWQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgc2VsZi5yZWN1cnNlKHdhdGNoLCBpbnRvSWQpO1xuICAgICAgc2VsZi5yZXR1cm5fKGludG9JZCk7XG4gICAgICBzZWxmLnN0YXRlLmlucHV0cy5wdXNoKGZuS2V5KTtcbiAgICAgIHdhdGNoLndhdGNoSWQgPSBrZXk7XG4gICAgfSk7XG4gICAgdGhpcy5zdGF0ZS5jb21wdXRpbmcgPSAnZm4nO1xuICAgIHRoaXMuc3RhZ2UgPSAnbWFpbic7XG4gICAgdGhpcy5yZWN1cnNlKGFzdCk7XG4gICAgdmFyIGZuU3RyaW5nID1cbiAgICAgIC8vIFRoZSBidWlsZCBhbmQgbWluaWZpY2F0aW9uIHN0ZXBzIHJlbW92ZSB0aGUgc3RyaW5nIFwidXNlIHN0cmljdFwiIGZyb20gdGhlIGNvZGUsIGJ1dCB0aGlzIGlzIGRvbmUgdXNpbmcgYSByZWdleC5cbiAgICAgIC8vIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciB0aGlzIHVudGlsIHdlIGRvIGEgYmV0dGVyIGpvYiBhdCBvbmx5IHJlbW92aW5nIHRoZSBwcmVmaXggb25seSB3aGVuIHdlIHNob3VsZC5cbiAgICAgICdcIicgKyB0aGlzLlVTRSArICcgJyArIHRoaXMuU1RSSUNUICsgJ1wiO1xcbicgK1xuICAgICAgdGhpcy5maWx0ZXJQcmVmaXgoKSArXG4gICAgICAndmFyIGZuPScgKyB0aGlzLmdlbmVyYXRlRnVuY3Rpb24oJ2ZuJywgJ3MsbCxhLGknKSArXG4gICAgICBleHRyYSArXG4gICAgICB0aGlzLndhdGNoRm5zKCkgK1xuICAgICAgJ3JldHVybiBmbjsnO1xuXG4gICAgLyoganNoaW50IC1XMDU0ICovXG4gICAgdmFyIGZuID0gKG5ldyBGdW5jdGlvbignJGZpbHRlcicsXG4gICAgICAgICdlbnN1cmVTYWZlTWVtYmVyTmFtZScsXG4gICAgICAgICdlbnN1cmVTYWZlT2JqZWN0JyxcbiAgICAgICAgJ2Vuc3VyZVNhZmVGdW5jdGlvbicsXG4gICAgICAgICdnZXRTdHJpbmdWYWx1ZScsXG4gICAgICAgICdlbnN1cmVTYWZlQXNzaWduQ29udGV4dCcsXG4gICAgICAgICdpZkRlZmluZWQnLFxuICAgICAgICAncGx1cycsXG4gICAgICAgICd0ZXh0JyxcbiAgICAgICAgZm5TdHJpbmcpKShcbiAgICAgICAgICB0aGlzLiRmaWx0ZXIsXG4gICAgICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUsXG4gICAgICAgICAgZW5zdXJlU2FmZU9iamVjdCxcbiAgICAgICAgICBlbnN1cmVTYWZlRnVuY3Rpb24sXG4gICAgICAgICAgZ2V0U3RyaW5nVmFsdWUsXG4gICAgICAgICAgZW5zdXJlU2FmZUFzc2lnbkNvbnRleHQsXG4gICAgICAgICAgaWZEZWZpbmVkLFxuICAgICAgICAgIHBsdXNGbixcbiAgICAgICAgICBleHByZXNzaW9uKTtcbiAgICAvKiBqc2hpbnQgK1cwNTQgKi9cbiAgICB0aGlzLnN0YXRlID0gdGhpcy5zdGFnZSA9IHVuZGVmaW5lZDtcbiAgICBmbi5saXRlcmFsID0gaXNMaXRlcmFsKGFzdCk7XG4gICAgZm4uY29uc3RhbnQgPSBpc0NvbnN0YW50KGFzdCk7XG4gICAgcmV0dXJuIGZuO1xuICB9LFxuXG4gIFVTRTogJ3VzZScsXG5cbiAgU1RSSUNUOiAnc3RyaWN0JyxcblxuICB3YXRjaEZuczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBmbnMgPSB0aGlzLnN0YXRlLmlucHV0cztcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZm9yRWFjaChmbnMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKCd2YXIgJyArIG5hbWUgKyAnPScgKyBzZWxmLmdlbmVyYXRlRnVuY3Rpb24obmFtZSwgJ3MnKSk7XG4gICAgfSk7XG4gICAgaWYgKGZucy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKCdmbi5pbnB1dHM9WycgKyBmbnMuam9pbignLCcpICsgJ107Jyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gIH0sXG5cbiAgZ2VuZXJhdGVGdW5jdGlvbjogZnVuY3Rpb24obmFtZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbignICsgcGFyYW1zICsgJyl7JyArXG4gICAgICAgIHRoaXMudmFyc1ByZWZpeChuYW1lKSArXG4gICAgICAgIHRoaXMuYm9keShuYW1lKSArXG4gICAgICAgICd9Oyc7XG4gIH0sXG5cbiAgZmlsdGVyUHJlZml4OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZm9yRWFjaCh0aGlzLnN0YXRlLmZpbHRlcnMsIGZ1bmN0aW9uKGlkLCBmaWx0ZXIpIHtcbiAgICAgIHBhcnRzLnB1c2goaWQgKyAnPSRmaWx0ZXIoJyArIHNlbGYuZXNjYXBlKGZpbHRlcikgKyAnKScpO1xuICAgIH0pO1xuICAgIGlmIChwYXJ0cy5sZW5ndGgpIHJldHVybiAndmFyICcgKyBwYXJ0cy5qb2luKCcsJykgKyAnOyc7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIHZhcnNQcmVmaXg6IGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVtzZWN0aW9uXS52YXJzLmxlbmd0aCA/ICd2YXIgJyArIHRoaXMuc3RhdGVbc2VjdGlvbl0udmFycy5qb2luKCcsJykgKyAnOycgOiAnJztcbiAgfSxcblxuICBib2R5OiBmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVbc2VjdGlvbl0uYm9keS5qb2luKCcnKTtcbiAgfSxcblxuICByZWN1cnNlOiBmdW5jdGlvbihhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKSB7XG4gICAgdmFyIGxlZnQsIHJpZ2h0LCBzZWxmID0gdGhpcywgYXJncywgZXhwcmVzc2lvbjtcbiAgICByZWN1cnNpb25GbiA9IHJlY3Vyc2lvbkZuIHx8IG5vb3A7XG4gICAgaWYgKCFza2lwV2F0Y2hJZENoZWNrICYmIGlzRGVmaW5lZChhc3Qud2F0Y2hJZCkpIHtcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgdGhpcy5pZl8oJ2knLFxuICAgICAgICB0aGlzLmxhenlBc3NpZ24oaW50b0lkLCB0aGlzLmNvbXB1dGVkTWVtYmVyKCdpJywgYXN0LndhdGNoSWQpKSxcbiAgICAgICAgdGhpcy5sYXp5UmVjdXJzZShhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCB0cnVlKVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpdGNoIChhc3QudHlwZSkge1xuICAgIGNhc2UgQVNULlByb2dyYW06XG4gICAgICBmb3JFYWNoKGFzdC5ib2R5LCBmdW5jdGlvbihleHByZXNzaW9uLCBwb3MpIHtcbiAgICAgICAgc2VsZi5yZWN1cnNlKGV4cHJlc3Npb24uZXhwcmVzc2lvbiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgcmlnaHQgPSBleHByOyB9KTtcbiAgICAgICAgaWYgKHBvcyAhPT0gYXN0LmJvZHkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHNlbGYuY3VycmVudCgpLmJvZHkucHVzaChyaWdodCwgJzsnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnJldHVybl8ocmlnaHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULkxpdGVyYWw6XG4gICAgICBleHByZXNzaW9uID0gdGhpcy5lc2NhcGUoYXN0LnZhbHVlKTtcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICByZWN1cnNpb25GbihleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULlVuYXJ5RXhwcmVzc2lvbjpcbiAgICAgIHRoaXMucmVjdXJzZShhc3QuYXJndW1lbnQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbihleHByKSB7IHJpZ2h0ID0gZXhwcjsgfSk7XG4gICAgICBleHByZXNzaW9uID0gYXN0Lm9wZXJhdG9yICsgJygnICsgdGhpcy5pZkRlZmluZWQocmlnaHQsIDApICsgJyknO1xuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQmluYXJ5RXhwcmVzc2lvbjpcbiAgICAgIHRoaXMucmVjdXJzZShhc3QubGVmdCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgbGVmdCA9IGV4cHI7IH0pO1xuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5yaWdodCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgcmlnaHQgPSBleHByOyB9KTtcbiAgICAgIGlmIChhc3Qub3BlcmF0b3IgPT09ICcrJykge1xuICAgICAgICBleHByZXNzaW9uID0gdGhpcy5wbHVzKGxlZnQsIHJpZ2h0KTtcbiAgICAgIH0gZWxzZSBpZiAoYXN0Lm9wZXJhdG9yID09PSAnLScpIHtcbiAgICAgICAgZXhwcmVzc2lvbiA9IHRoaXMuaWZEZWZpbmVkKGxlZnQsIDApICsgYXN0Lm9wZXJhdG9yICsgdGhpcy5pZkRlZmluZWQocmlnaHQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhwcmVzc2lvbiA9ICcoJyArIGxlZnQgKyAnKScgKyBhc3Qub3BlcmF0b3IgKyAnKCcgKyByaWdodCArICcpJztcbiAgICAgIH1cbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICByZWN1cnNpb25GbihleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULkxvZ2ljYWxFeHByZXNzaW9uOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0LmxlZnQsIGludG9JZCk7XG4gICAgICBzZWxmLmlmXyhhc3Qub3BlcmF0b3IgPT09ICcmJicgPyBpbnRvSWQgOiBzZWxmLm5vdChpbnRvSWQpLCBzZWxmLmxhenlSZWN1cnNlKGFzdC5yaWdodCwgaW50b0lkKSk7XG4gICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0LnRlc3QsIGludG9JZCk7XG4gICAgICBzZWxmLmlmXyhpbnRvSWQsIHNlbGYubGF6eVJlY3Vyc2UoYXN0LmFsdGVybmF0ZSwgaW50b0lkKSwgc2VsZi5sYXp5UmVjdXJzZShhc3QuY29uc2VxdWVudCwgaW50b0lkKSk7XG4gICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuSWRlbnRpZmllcjpcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgaWYgKG5hbWVJZCkge1xuICAgICAgICBuYW1lSWQuY29udGV4dCA9IHNlbGYuc3RhZ2UgPT09ICdpbnB1dHMnID8gJ3MnIDogdGhpcy5hc3NpZ24odGhpcy5uZXh0SWQoKSwgdGhpcy5nZXRIYXNPd25Qcm9wZXJ0eSgnbCcsIGFzdC5uYW1lKSArICc/bDpzJyk7XG4gICAgICAgIG5hbWVJZC5jb21wdXRlZCA9IGZhbHNlO1xuICAgICAgICBuYW1lSWQubmFtZSA9IGFzdC5uYW1lO1xuICAgICAgfVxuICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUoYXN0Lm5hbWUpO1xuICAgICAgc2VsZi5pZl8oc2VsZi5zdGFnZSA9PT0gJ2lucHV0cycgfHwgc2VsZi5ub3Qoc2VsZi5nZXRIYXNPd25Qcm9wZXJ0eSgnbCcsIGFzdC5uYW1lKSksXG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuaWZfKHNlbGYuc3RhZ2UgPT09ICdpbnB1dHMnIHx8ICdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhcbiAgICAgICAgICAgICAgICBzZWxmLm5vdChzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpKSxcbiAgICAgICAgICAgICAgICBzZWxmLmxhenlBc3NpZ24oc2VsZi5ub25Db21wdXRlZE1lbWJlcigncycsIGFzdC5uYW1lKSwgJ3t9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgaW50b0lkICYmIHNlbGYubGF6eUFzc2lnbihpbnRvSWQsIHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ2wnLCBhc3QubmFtZSkpXG4gICAgICAgICk7XG4gICAgICBpZiAoc2VsZi5zdGF0ZS5leHBlbnNpdmVDaGVja3MgfHwgaXNQb3NzaWJseURhbmdlcm91c01lbWJlck5hbWUoYXN0Lm5hbWUpKSB7XG4gICAgICAgIHNlbGYuYWRkRW5zdXJlU2FmZU9iamVjdChpbnRvSWQpO1xuICAgICAgfVxuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULk1lbWJlckV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gbmFtZUlkICYmIChuYW1lSWQuY29udGV4dCA9IHRoaXMubmV4dElkKCkpIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHNlbGYucmVjdXJzZShhc3Qub2JqZWN0LCBsZWZ0LCB1bmRlZmluZWQsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdE51bGwobGVmdCksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChhc3QuY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIHJpZ2h0ID0gc2VsZi5uZXh0SWQoKTtcbiAgICAgICAgICAgIHNlbGYucmVjdXJzZShhc3QucHJvcGVydHksIHJpZ2h0KTtcbiAgICAgICAgICAgIHNlbGYuZ2V0U3RyaW5nVmFsdWUocmlnaHQpO1xuICAgICAgICAgICAgc2VsZi5hZGRFbnN1cmVTYWZlTWVtYmVyTmFtZShyaWdodCk7XG4gICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdChzZWxmLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KSksIHNlbGYubGF6eUFzc2lnbihzZWxmLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KSwgJ3t9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYuZW5zdXJlU2FmZU9iamVjdChzZWxmLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KSk7XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgaWYgKG5hbWVJZCkge1xuICAgICAgICAgICAgICBuYW1lSWQuY29tcHV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBuYW1lSWQubmFtZSA9IHJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZShhc3QucHJvcGVydHkubmFtZSk7XG4gICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdChzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIGFzdC5wcm9wZXJ0eS5uYW1lKSksIHNlbGYubGF6eUFzc2lnbihzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIGFzdC5wcm9wZXJ0eS5uYW1lKSwgJ3t9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgYXN0LnByb3BlcnR5Lm5hbWUpO1xuICAgICAgICAgICAgaWYgKHNlbGYuc3RhdGUuZXhwZW5zaXZlQ2hlY2tzIHx8IGlzUG9zc2libHlEYW5nZXJvdXNNZW1iZXJOYW1lKGFzdC5wcm9wZXJ0eS5uYW1lKSkge1xuICAgICAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5lbnN1cmVTYWZlT2JqZWN0KGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICAgIGlmIChuYW1lSWQpIHtcbiAgICAgICAgICAgICAgbmFtZUlkLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIG5hbWVJZC5uYW1lID0gYXN0LnByb3BlcnR5Lm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsICd1bmRlZmluZWQnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICB9LCAhIWNyZWF0ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5DYWxsRXhwcmVzc2lvbjpcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgaWYgKGFzdC5maWx0ZXIpIHtcbiAgICAgICAgcmlnaHQgPSBzZWxmLmZpbHRlcihhc3QuY2FsbGVlLm5hbWUpO1xuICAgICAgICBhcmdzID0gW107XG4gICAgICAgIGZvckVhY2goYXN0LmFyZ3VtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgIHZhciBhcmd1bWVudCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgc2VsZi5yZWN1cnNlKGV4cHIsIGFyZ3VtZW50KTtcbiAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IHJpZ2h0ICsgJygnICsgYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByaWdodCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgIGxlZnQgPSB7fTtcbiAgICAgICAgYXJncyA9IFtdO1xuICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LmNhbGxlZSwgcmlnaHQsIGxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuaWZfKHNlbGYubm90TnVsbChyaWdodCksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5hZGRFbnN1cmVTYWZlRnVuY3Rpb24ocmlnaHQpO1xuICAgICAgICAgICAgZm9yRWFjaChhc3QuYXJndW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgICAgICAgIHNlbGYucmVjdXJzZShleHByLCBzZWxmLm5leHRJZCgpLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKHNlbGYuZW5zdXJlU2FmZU9iamVjdChhcmd1bWVudCkpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGxlZnQubmFtZSkge1xuICAgICAgICAgICAgICBpZiAoIXNlbGYuc3RhdGUuZXhwZW5zaXZlQ2hlY2tzKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hZGRFbnN1cmVTYWZlT2JqZWN0KGxlZnQuY29udGV4dCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubWVtYmVyKGxlZnQuY29udGV4dCwgbGVmdC5uYW1lLCBsZWZ0LmNvbXB1dGVkKSArICcoJyArIGFyZ3Muam9pbignLCcpICsgJyknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHJpZ2h0ICsgJygnICsgYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5lbnN1cmVTYWZlT2JqZWN0KGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgJ3VuZGVmaW5lZCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQXNzaWdubWVudEV4cHJlc3Npb246XG4gICAgICByaWdodCA9IHRoaXMubmV4dElkKCk7XG4gICAgICBsZWZ0ID0ge307XG4gICAgICBpZiAoIWlzQXNzaWduYWJsZShhc3QubGVmdCkpIHtcbiAgICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdsdmFsJywgJ1RyeWluZyB0byBhc3NpbmcgYSB2YWx1ZSB0byBhIG5vbiBsLXZhbHVlJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlY3Vyc2UoYXN0LmxlZnQsIHVuZGVmaW5lZCwgbGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuaWZfKHNlbGYubm90TnVsbChsZWZ0LmNvbnRleHQpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LnJpZ2h0LCByaWdodCk7XG4gICAgICAgICAgc2VsZi5hZGRFbnN1cmVTYWZlT2JqZWN0KHNlbGYubWVtYmVyKGxlZnQuY29udGV4dCwgbGVmdC5uYW1lLCBsZWZ0LmNvbXB1dGVkKSk7XG4gICAgICAgICAgc2VsZi5hZGRFbnN1cmVTYWZlQXNzaWduQ29udGV4dChsZWZ0LmNvbnRleHQpO1xuICAgICAgICAgIGV4cHJlc3Npb24gPSBzZWxmLm1lbWJlcihsZWZ0LmNvbnRleHQsIGxlZnQubmFtZSwgbGVmdC5jb21wdXRlZCkgKyBhc3Qub3BlcmF0b3IgKyByaWdodDtcbiAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCBleHByZXNzaW9uKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCAxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULkFycmF5RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LmVsZW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHNlbGYucmVjdXJzZShleHByLCBzZWxmLm5leHRJZCgpLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGFyZ3VtZW50KSB7XG4gICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGV4cHJlc3Npb24gPSAnWycgKyBhcmdzLmpvaW4oJywnKSArICddJztcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICByZWN1cnNpb25GbihleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULk9iamVjdEV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICBzZWxmLnJlY3Vyc2UocHJvcGVydHkudmFsdWUsIHNlbGYubmV4dElkKCksIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgIGFyZ3MucHVzaChzZWxmLmVzY2FwZShcbiAgICAgICAgICAgICAgcHJvcGVydHkua2V5LnR5cGUgPT09IEFTVC5JZGVudGlmaWVyID8gcHJvcGVydHkua2V5Lm5hbWUgOlxuICAgICAgICAgICAgICAgICgnJyArIHByb3BlcnR5LmtleS52YWx1ZSkpICtcbiAgICAgICAgICAgICAgJzonICsgZXhwcik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBleHByZXNzaW9uID0gJ3snICsgYXJncy5qb2luKCcsJykgKyAnfSc7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oZXhwcmVzc2lvbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5UaGlzRXhwcmVzc2lvbjpcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgJ3MnKTtcbiAgICAgIHJlY3Vyc2lvbkZuKCdzJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5OR1ZhbHVlUGFyYW1ldGVyOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAndicpO1xuICAgICAgcmVjdXJzaW9uRm4oJ3YnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSxcblxuICBnZXRIYXNPd25Qcm9wZXJ0eTogZnVuY3Rpb24oZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgICB2YXIga2V5ID0gZWxlbWVudCArICcuJyArIHByb3BlcnR5O1xuICAgIHZhciBvd24gPSB0aGlzLmN1cnJlbnQoKS5vd247XG4gICAgaWYgKCFvd24uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgb3duW2tleV0gPSB0aGlzLm5leHRJZChmYWxzZSwgZWxlbWVudCArICcmJignICsgdGhpcy5lc2NhcGUocHJvcGVydHkpICsgJyBpbiAnICsgZWxlbWVudCArICcpJyk7XG4gICAgfVxuICAgIHJldHVybiBvd25ba2V5XTtcbiAgfSxcblxuICBhc3NpZ246IGZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICAgIGlmICghaWQpIHJldHVybjtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2goaWQsICc9JywgdmFsdWUsICc7Jyk7XG4gICAgcmV0dXJuIGlkO1xuICB9LFxuXG4gIGZpbHRlcjogZnVuY3Rpb24oZmlsdGVyTmFtZSkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5maWx0ZXJzLmhhc093blByb3BlcnR5KGZpbHRlck5hbWUpKSB7XG4gICAgICB0aGlzLnN0YXRlLmZpbHRlcnNbZmlsdGVyTmFtZV0gPSB0aGlzLm5leHRJZCh0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZmlsdGVyc1tmaWx0ZXJOYW1lXTtcbiAgfSxcblxuICBpZkRlZmluZWQ6IGZ1bmN0aW9uKGlkLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gJ2lmRGVmaW5lZCgnICsgaWQgKyAnLCcgKyB0aGlzLmVzY2FwZShkZWZhdWx0VmFsdWUpICsgJyknO1xuICB9LFxuXG4gIHBsdXM6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgcmV0dXJuICdwbHVzKCcgKyBsZWZ0ICsgJywnICsgcmlnaHQgKyAnKSc7XG4gIH0sXG5cbiAgcmV0dXJuXzogZnVuY3Rpb24oaWQpIHtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2goJ3JldHVybiAnLCBpZCwgJzsnKTtcbiAgfSxcblxuICBpZl86IGZ1bmN0aW9uKHRlc3QsIGFsdGVybmF0ZSwgY29uc2VxdWVudCkge1xuICAgIGlmICh0ZXN0ID09PSB0cnVlKSB7XG4gICAgICBhbHRlcm5hdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGJvZHkgPSB0aGlzLmN1cnJlbnQoKS5ib2R5O1xuICAgICAgYm9keS5wdXNoKCdpZignLCB0ZXN0LCAnKXsnKTtcbiAgICAgIGFsdGVybmF0ZSgpO1xuICAgICAgYm9keS5wdXNoKCd9Jyk7XG4gICAgICBpZiAoY29uc2VxdWVudCkge1xuICAgICAgICBib2R5LnB1c2goJ2Vsc2V7Jyk7XG4gICAgICAgIGNvbnNlcXVlbnQoKTtcbiAgICAgICAgYm9keS5wdXNoKCd9Jyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIG5vdDogZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgIHJldHVybiAnISgnICsgZXhwcmVzc2lvbiArICcpJztcbiAgfSxcblxuICBub3ROdWxsOiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb24gKyAnIT1udWxsJztcbiAgfSxcblxuICBub25Db21wdXRlZE1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICByZXR1cm4gbGVmdCArICcuJyArIHJpZ2h0O1xuICB9LFxuXG4gIGNvbXB1dGVkTWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiBsZWZ0ICsgJ1snICsgcmlnaHQgKyAnXSc7XG4gIH0sXG5cbiAgbWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29tcHV0ZWQpIHtcbiAgICBpZiAoY29tcHV0ZWQpIHJldHVybiB0aGlzLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KTtcbiAgICByZXR1cm4gdGhpcy5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCk7XG4gIH0sXG5cbiAgYWRkRW5zdXJlU2FmZU9iamVjdDogZnVuY3Rpb24oaXRlbSkge1xuICAgIHRoaXMuY3VycmVudCgpLmJvZHkucHVzaCh0aGlzLmVuc3VyZVNhZmVPYmplY3QoaXRlbSksICc7Jyk7XG4gIH0sXG5cbiAgYWRkRW5zdXJlU2FmZU1lbWJlck5hbWU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2godGhpcy5lbnN1cmVTYWZlTWVtYmVyTmFtZShpdGVtKSwgJzsnKTtcbiAgfSxcblxuICBhZGRFbnN1cmVTYWZlRnVuY3Rpb246IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2godGhpcy5lbnN1cmVTYWZlRnVuY3Rpb24oaXRlbSksICc7Jyk7XG4gIH0sXG5cbiAgYWRkRW5zdXJlU2FmZUFzc2lnbkNvbnRleHQ6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2godGhpcy5lbnN1cmVTYWZlQXNzaWduQ29udGV4dChpdGVtKSwgJzsnKTtcbiAgfSxcblxuICBlbnN1cmVTYWZlT2JqZWN0OiBmdW5jdGlvbihpdGVtKSB7XG4gICAgcmV0dXJuICdlbnN1cmVTYWZlT2JqZWN0KCcgKyBpdGVtICsgJyx0ZXh0KSc7XG4gIH0sXG5cbiAgZW5zdXJlU2FmZU1lbWJlck5hbWU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4gJ2Vuc3VyZVNhZmVNZW1iZXJOYW1lKCcgKyBpdGVtICsgJyx0ZXh0KSc7XG4gIH0sXG5cbiAgZW5zdXJlU2FmZUZ1bmN0aW9uOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgcmV0dXJuICdlbnN1cmVTYWZlRnVuY3Rpb24oJyArIGl0ZW0gKyAnLHRleHQpJztcbiAgfSxcblxuICBnZXRTdHJpbmdWYWx1ZTogZnVuY3Rpb24oaXRlbSkge1xuICAgIHRoaXMuYXNzaWduKGl0ZW0sICdnZXRTdHJpbmdWYWx1ZSgnICsgaXRlbSArICcsdGV4dCknKTtcbiAgfSxcblxuICBlbnN1cmVTYWZlQXNzaWduQ29udGV4dDogZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiAnZW5zdXJlU2FmZUFzc2lnbkNvbnRleHQoJyArIGl0ZW0gKyAnLHRleHQpJztcbiAgfSxcblxuICBsYXp5UmVjdXJzZTogZnVuY3Rpb24oYXN0LCBpbnRvSWQsIG5hbWVJZCwgcmVjdXJzaW9uRm4sIGNyZWF0ZSwgc2tpcFdhdGNoSWRDaGVjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0LCBpbnRvSWQsIG5hbWVJZCwgcmVjdXJzaW9uRm4sIGNyZWF0ZSwgc2tpcFdhdGNoSWRDaGVjayk7XG4gICAgfTtcbiAgfSxcblxuICBsYXp5QXNzaWduOiBmdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5hc3NpZ24oaWQsIHZhbHVlKTtcbiAgICB9O1xuICB9LFxuXG4gIHN0cmluZ0VzY2FwZVJlZ2V4OiAvW14gYS16QS1aMC05XS9nLFxuXG4gIHN0cmluZ0VzY2FwZUZuOiBmdW5jdGlvbihjKSB7XG4gICAgcmV0dXJuICdcXFxcdScgKyAoJzAwMDAnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xuICB9LFxuXG4gIGVzY2FwZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSByZXR1cm4gXCInXCIgKyB2YWx1ZS5yZXBsYWNlKHRoaXMuc3RyaW5nRXNjYXBlUmVnZXgsIHRoaXMuc3RyaW5nRXNjYXBlRm4pICsgXCInXCI7XG4gICAgaWYgKGlzTnVtYmVyKHZhbHVlKSkgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgaWYgKHZhbHVlID09PSB0cnVlKSByZXR1cm4gJ3RydWUnO1xuICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHJldHVybiAnZmFsc2UnO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykgcmV0dXJuICd1bmRlZmluZWQnO1xuXG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdlc2MnLCAnSU1QT1NTSUJMRScpO1xuICB9LFxuXG4gIG5leHRJZDogZnVuY3Rpb24oc2tpcCwgaW5pdCkge1xuICAgIHZhciBpZCA9ICd2JyArICh0aGlzLnN0YXRlLm5leHRJZCsrKTtcbiAgICBpZiAoIXNraXApIHtcbiAgICAgIHRoaXMuY3VycmVudCgpLnZhcnMucHVzaChpZCArIChpbml0ID8gJz0nICsgaW5pdCA6ICcnKSk7XG4gICAgfVxuICAgIHJldHVybiBpZDtcbiAgfSxcblxuICBjdXJyZW50OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVt0aGlzLnN0YXRlLmNvbXB1dGluZ107XG4gIH1cbn07XG5cblxuZnVuY3Rpb24gQVNUSW50ZXJwcmV0ZXIoYXN0QnVpbGRlciwgJGZpbHRlcikge1xuICB0aGlzLmFzdEJ1aWxkZXIgPSBhc3RCdWlsZGVyO1xuICB0aGlzLiRmaWx0ZXIgPSAkZmlsdGVyO1xufVxuXG5BU1RJbnRlcnByZXRlci5wcm90b3R5cGUgPSB7XG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGV4cHJlc3Npb24sIGV4cGVuc2l2ZUNoZWNrcykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgYXN0ID0gdGhpcy5hc3RCdWlsZGVyLmFzdChleHByZXNzaW9uKTtcbiAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgIHRoaXMuZXhwZW5zaXZlQ2hlY2tzID0gZXhwZW5zaXZlQ2hlY2tzO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCBzZWxmLiRmaWx0ZXIpO1xuICAgIHZhciBhc3NpZ25hYmxlO1xuICAgIHZhciBhc3NpZ247XG4gICAgaWYgKChhc3NpZ25hYmxlID0gYXNzaWduYWJsZUFTVChhc3QpKSkge1xuICAgICAgYXNzaWduID0gdGhpcy5yZWN1cnNlKGFzc2lnbmFibGUpO1xuICAgIH1cbiAgICB2YXIgdG9XYXRjaCA9IGdldElucHV0cyhhc3QuYm9keSk7XG4gICAgdmFyIGlucHV0cztcbiAgICBpZiAodG9XYXRjaCkge1xuICAgICAgaW5wdXRzID0gW107XG4gICAgICBmb3JFYWNoKHRvV2F0Y2gsIGZ1bmN0aW9uKHdhdGNoLCBrZXkpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gc2VsZi5yZWN1cnNlKHdhdGNoKTtcbiAgICAgICAgd2F0Y2guaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgaW5wdXRzLnB1c2goaW5wdXQpO1xuICAgICAgICB3YXRjaC53YXRjaElkID0ga2V5O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBleHByZXNzaW9ucyA9IFtdO1xuICAgIGZvckVhY2goYXN0LmJvZHksIGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICAgIGV4cHJlc3Npb25zLnB1c2goc2VsZi5yZWN1cnNlKGV4cHJlc3Npb24uZXhwcmVzc2lvbikpO1xuICAgIH0pO1xuICAgIHZhciBmbiA9IGFzdC5ib2R5Lmxlbmd0aCA9PT0gMCA/IGZ1bmN0aW9uKCkge30gOlxuICAgICAgICAgICAgIGFzdC5ib2R5Lmxlbmd0aCA9PT0gMSA/IGV4cHJlc3Npb25zWzBdIDpcbiAgICAgICAgICAgICBmdW5jdGlvbihzY29wZSwgbG9jYWxzKSB7XG4gICAgICAgICAgICAgICB2YXIgbGFzdFZhbHVlO1xuICAgICAgICAgICAgICAgZm9yRWFjaChleHByZXNzaW9ucywgZnVuY3Rpb24oZXhwKSB7XG4gICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGV4cChzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RWYWx1ZTtcbiAgICAgICAgICAgICB9O1xuICAgIGlmIChhc3NpZ24pIHtcbiAgICAgIGZuLmFzc2lnbiA9IGZ1bmN0aW9uKHNjb3BlLCB2YWx1ZSwgbG9jYWxzKSB7XG4gICAgICAgIHJldHVybiBhc3NpZ24oc2NvcGUsIGxvY2FscywgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlucHV0cykge1xuICAgICAgZm4uaW5wdXRzID0gaW5wdXRzO1xuICAgIH1cbiAgICBmbi5saXRlcmFsID0gaXNMaXRlcmFsKGFzdCk7XG4gICAgZm4uY29uc3RhbnQgPSBpc0NvbnN0YW50KGFzdCk7XG4gICAgcmV0dXJuIGZuO1xuICB9LFxuXG4gIHJlY3Vyc2U6IGZ1bmN0aW9uKGFzdCwgY29udGV4dCwgY3JlYXRlKSB7XG4gICAgdmFyIGxlZnQsIHJpZ2h0LCBzZWxmID0gdGhpcywgYXJncywgZXhwcmVzc2lvbjtcbiAgICBpZiAoYXN0LmlucHV0KSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnB1dHMoYXN0LmlucHV0LCBhc3Qud2F0Y2hJZCk7XG4gICAgfVxuICAgIHN3aXRjaCAoYXN0LnR5cGUpIHtcbiAgICBjYXNlIEFTVC5MaXRlcmFsOlxuICAgICAgcmV0dXJuIHRoaXMudmFsdWUoYXN0LnZhbHVlLCBjb250ZXh0KTtcbiAgICBjYXNlIEFTVC5VbmFyeUV4cHJlc3Npb246XG4gICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QuYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHRoaXNbJ3VuYXJ5JyArIGFzdC5vcGVyYXRvcl0ocmlnaHQsIGNvbnRleHQpO1xuICAgIGNhc2UgQVNULkJpbmFyeUV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gdGhpcy5yZWN1cnNlKGFzdC5sZWZ0KTtcbiAgICAgIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5yaWdodCk7XG4gICAgICByZXR1cm4gdGhpc1snYmluYXJ5JyArIGFzdC5vcGVyYXRvcl0obGVmdCwgcmlnaHQsIGNvbnRleHQpO1xuICAgIGNhc2UgQVNULkxvZ2ljYWxFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3QubGVmdCk7XG4gICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucmlnaHQpO1xuICAgICAgcmV0dXJuIHRoaXNbJ2JpbmFyeScgKyBhc3Qub3BlcmF0b3JdKGxlZnQsIHJpZ2h0LCBjb250ZXh0KTtcbiAgICBjYXNlIEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb246XG4gICAgICByZXR1cm4gdGhpc1sndGVybmFyeT86J10oXG4gICAgICAgIHRoaXMucmVjdXJzZShhc3QudGVzdCksXG4gICAgICAgIHRoaXMucmVjdXJzZShhc3QuYWx0ZXJuYXRlKSxcbiAgICAgICAgdGhpcy5yZWN1cnNlKGFzdC5jb25zZXF1ZW50KSxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICBjYXNlIEFTVC5JZGVudGlmaWVyOlxuICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUoYXN0Lm5hbWUsIHNlbGYuZXhwcmVzc2lvbik7XG4gICAgICByZXR1cm4gc2VsZi5pZGVudGlmaWVyKGFzdC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmV4cGVuc2l2ZUNoZWNrcyB8fCBpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZShhc3QubmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQsIGNyZWF0ZSwgc2VsZi5leHByZXNzaW9uKTtcbiAgICBjYXNlIEFTVC5NZW1iZXJFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3Qub2JqZWN0LCBmYWxzZSwgISFjcmVhdGUpO1xuICAgICAgaWYgKCFhc3QuY29tcHV0ZWQpIHtcbiAgICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUoYXN0LnByb3BlcnR5Lm5hbWUsIHNlbGYuZXhwcmVzc2lvbik7XG4gICAgICAgIHJpZ2h0ID0gYXN0LnByb3BlcnR5Lm5hbWU7XG4gICAgICB9XG4gICAgICBpZiAoYXN0LmNvbXB1dGVkKSByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucHJvcGVydHkpO1xuICAgICAgcmV0dXJuIGFzdC5jb21wdXRlZCA/XG4gICAgICAgIHRoaXMuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQsIGNvbnRleHQsIGNyZWF0ZSwgc2VsZi5leHByZXNzaW9uKSA6XG4gICAgICAgIHRoaXMubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQsIHNlbGYuZXhwZW5zaXZlQ2hlY2tzLCBjb250ZXh0LCBjcmVhdGUsIHNlbGYuZXhwcmVzc2lvbik7XG4gICAgY2FzZSBBU1QuQ2FsbEV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgYXJncy5wdXNoKHNlbGYucmVjdXJzZShleHByKSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChhc3QuZmlsdGVyKSByaWdodCA9IHRoaXMuJGZpbHRlcihhc3QuY2FsbGVlLm5hbWUpO1xuICAgICAgaWYgKCFhc3QuZmlsdGVyKSByaWdodCA9IHRoaXMucmVjdXJzZShhc3QuY2FsbGVlLCB0cnVlKTtcbiAgICAgIHJldHVybiBhc3QuZmlsdGVyID9cbiAgICAgICAgZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChhcmdzW2ldKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB2YWx1ZSA9IHJpZ2h0LmFwcGx5KHVuZGVmaW5lZCwgdmFsdWVzLCBpbnB1dHMpO1xuICAgICAgICAgIHJldHVybiBjb250ZXh0ID8ge2NvbnRleHQ6IHVuZGVmaW5lZCwgbmFtZTogdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9IDogdmFsdWU7XG4gICAgICAgIH0gOlxuICAgICAgICBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICAgIHZhciByaHMgPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgIGlmIChyaHMudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgZW5zdXJlU2FmZU9iamVjdChyaHMuY29udGV4dCwgc2VsZi5leHByZXNzaW9uKTtcbiAgICAgICAgICAgIGVuc3VyZVNhZmVGdW5jdGlvbihyaHMudmFsdWUsIHNlbGYuZXhwcmVzc2lvbik7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgdmFsdWVzLnB1c2goZW5zdXJlU2FmZU9iamVjdChhcmdzW2ldKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSwgc2VsZi5leHByZXNzaW9uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IGVuc3VyZVNhZmVPYmplY3QocmhzLnZhbHVlLmFwcGx5KHJocy5jb250ZXh0LCB2YWx1ZXMpLCBzZWxmLmV4cHJlc3Npb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogdmFsdWV9IDogdmFsdWU7XG4gICAgICAgIH07XG4gICAgY2FzZSBBU1QuQXNzaWdubWVudEV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gdGhpcy5yZWN1cnNlKGFzdC5sZWZ0LCB0cnVlLCAxKTtcbiAgICAgIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5yaWdodCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICBlbnN1cmVTYWZlT2JqZWN0KGxocy52YWx1ZSwgc2VsZi5leHByZXNzaW9uKTtcbiAgICAgICAgZW5zdXJlU2FmZUFzc2lnbkNvbnRleHQobGhzLmNvbnRleHQpO1xuICAgICAgICBsaHMuY29udGV4dFtsaHMubmFtZV0gPSByaHM7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiByaHN9IDogcmhzO1xuICAgICAgfTtcbiAgICBjYXNlIEFTVC5BcnJheUV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5lbGVtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICBhcmdzLnB1c2goc2VsZi5yZWN1cnNlKGV4cHIpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICB2YWx1ZS5wdXNoKGFyZ3NbaV0oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogdmFsdWV9IDogdmFsdWU7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULk9iamVjdEV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICBhcmdzLnB1c2goe2tleTogcHJvcGVydHkua2V5LnR5cGUgPT09IEFTVC5JZGVudGlmaWVyID9cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LmtleS5uYW1lIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICgnJyArIHByb3BlcnR5LmtleS52YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYucmVjdXJzZShwcm9wZXJ0eS52YWx1ZSlcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgdmFsdWVbYXJnc1tpXS5rZXldID0gYXJnc1tpXS52YWx1ZShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHZhbHVlfSA6IHZhbHVlO1xuICAgICAgfTtcbiAgICBjYXNlIEFTVC5UaGlzRXhwcmVzc2lvbjpcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogc2NvcGV9IDogc2NvcGU7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULk5HVmFsdWVQYXJhbWV0ZXI6XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFzc2lnbn0gOiBhc3NpZ247XG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICAndW5hcnkrJzogZnVuY3Rpb24oYXJndW1lbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBhcmd1bWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICBpZiAoaXNEZWZpbmVkKGFyZykpIHtcbiAgICAgICAgYXJnID0gK2FyZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZyA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAndW5hcnktJzogZnVuY3Rpb24oYXJndW1lbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBhcmd1bWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICBpZiAoaXNEZWZpbmVkKGFyZykpIHtcbiAgICAgICAgYXJnID0gLWFyZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZyA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAndW5hcnkhJzogZnVuY3Rpb24oYXJndW1lbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSAhYXJndW1lbnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSsnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHZhciBhcmcgPSBwbHVzRm4obGhzLCByaHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeS0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHZhciBhcmcgPSAoaXNEZWZpbmVkKGxocykgPyBsaHMgOiAwKSAtIChpc0RlZmluZWQocmhzKSA/IHJocyA6IDApO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSonOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpICogcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeS8nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIC8gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSUnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpICUgcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeT09PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPT09IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnkhPT0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpICE9PSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PT0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpID09IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnkhPSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgIT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeTwnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIDwgcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeT4nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpID4gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeTw9JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA8PSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Pj0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpID49IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnkmJic6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgJiYgcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeXx8JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB8fCByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAndGVybmFyeT86JzogZnVuY3Rpb24odGVzdCwgYWx0ZXJuYXRlLCBjb25zZXF1ZW50LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gdGVzdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPyBhbHRlcm5hdGUoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIDogY29uc2VxdWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICB2YWx1ZTogZnVuY3Rpb24odmFsdWUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7IHJldHVybiBjb250ZXh0ID8ge2NvbnRleHQ6IHVuZGVmaW5lZCwgbmFtZTogdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9IDogdmFsdWU7IH07XG4gIH0sXG4gIGlkZW50aWZpZXI6IGZ1bmN0aW9uKG5hbWUsIGV4cGVuc2l2ZUNoZWNrcywgY29udGV4dCwgY3JlYXRlLCBleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYmFzZSA9IGxvY2FscyAmJiAobmFtZSBpbiBsb2NhbHMpID8gbG9jYWxzIDogc2NvcGU7XG4gICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSAmJiBiYXNlICYmICEoYmFzZVtuYW1lXSkpIHtcbiAgICAgICAgYmFzZVtuYW1lXSA9IHt9O1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYmFzZSA/IGJhc2VbbmFtZV0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoZXhwZW5zaXZlQ2hlY2tzKSB7XG4gICAgICAgIGVuc3VyZVNhZmVPYmplY3QodmFsdWUsIGV4cHJlc3Npb24pO1xuICAgICAgfVxuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHtjb250ZXh0OiBiYXNlLCBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkTWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCwgY3JlYXRlLCBleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgcmhzO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgaWYgKGxocyAhPSBudWxsKSB7XG4gICAgICAgIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgcmhzID0gZ2V0U3RyaW5nVmFsdWUocmhzKTtcbiAgICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUocmhzLCBleHByZXNzaW9uKTtcbiAgICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEgJiYgbGhzICYmICEobGhzW3Joc10pKSB7XG4gICAgICAgICAgbGhzW3Joc10gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IGxoc1tyaHNdO1xuICAgICAgICBlbnN1cmVTYWZlT2JqZWN0KHZhbHVlLCBleHByZXNzaW9uKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB7Y29udGV4dDogbGhzLCBuYW1lOiByaHMsIHZhbHVlOiB2YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgbm9uQ29tcHV0ZWRNZW1iZXI6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBleHBlbnNpdmVDaGVja3MsIGNvbnRleHQsIGNyZWF0ZSwgZXhwcmVzc2lvbikge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEgJiYgbGhzICYmICEobGhzW3JpZ2h0XSkpIHtcbiAgICAgICAgbGhzW3JpZ2h0XSA9IHt9O1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gbGhzICE9IG51bGwgPyBsaHNbcmlnaHRdIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGV4cGVuc2l2ZUNoZWNrcyB8fCBpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZShyaWdodCkpIHtcbiAgICAgICAgZW5zdXJlU2FmZU9iamVjdCh2YWx1ZSwgZXhwcmVzc2lvbik7XG4gICAgICB9XG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICByZXR1cm4ge2NvbnRleHQ6IGxocywgbmFtZTogcmlnaHQsIHZhbHVlOiB2YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgaW5wdXRzOiBmdW5jdGlvbihpbnB1dCwgd2F0Y2hJZCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgdmFsdWUsIGxvY2FscywgaW5wdXRzKSB7XG4gICAgICBpZiAoaW5wdXRzKSByZXR1cm4gaW5wdXRzW3dhdGNoSWRdO1xuICAgICAgcmV0dXJuIGlucHV0KHNjb3BlLCB2YWx1ZSwgbG9jYWxzKTtcbiAgICB9O1xuICB9XG59O1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgUGFyc2VyID0gZnVuY3Rpb24obGV4ZXIsICRmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgdGhpcy5sZXhlciA9IGxleGVyO1xuICB0aGlzLiRmaWx0ZXIgPSAkZmlsdGVyO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLmFzdCA9IG5ldyBBU1QodGhpcy5sZXhlcik7XG4gIHRoaXMuYXN0Q29tcGlsZXIgPSBvcHRpb25zLmNzcCA/IG5ldyBBU1RJbnRlcnByZXRlcih0aGlzLmFzdCwgJGZpbHRlcikgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQVNUQ29tcGlsZXIodGhpcy5hc3QsICRmaWx0ZXIpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFBhcnNlcixcblxuICBwYXJzZTogZnVuY3Rpb24odGV4dCkge1xuICAgIHJldHVybiB0aGlzLmFzdENvbXBpbGVyLmNvbXBpbGUodGV4dCwgdGhpcy5vcHRpb25zLmV4cGVuc2l2ZUNoZWNrcyk7XG4gIH1cbn07XG5cbnZhciBnZXR0ZXJGbkNhY2hlRGVmYXVsdCA9IGNyZWF0ZU1hcCgpO1xudmFyIGdldHRlckZuQ2FjaGVFeHBlbnNpdmUgPSBjcmVhdGVNYXAoKTtcblxuZnVuY3Rpb24gaXNQb3NzaWJseURhbmdlcm91c01lbWJlck5hbWUobmFtZSkge1xuICByZXR1cm4gbmFtZSA9PSAnY29uc3RydWN0b3InO1xufVxuXG52YXIgb2JqZWN0VmFsdWVPZiA9IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZjtcblxuZnVuY3Rpb24gZ2V0VmFsdWVPZih2YWx1ZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZS52YWx1ZU9mKSA/IHZhbHVlLnZhbHVlT2YoKSA6IG9iamVjdFZhbHVlT2YuY2FsbCh2YWx1ZSk7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRwYXJzZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb252ZXJ0cyBBbmd1bGFyIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGludG8gYSBmdW5jdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogICB2YXIgZ2V0dGVyID0gJHBhcnNlKCd1c2VyLm5hbWUnKTtcbiAqICAgdmFyIHNldHRlciA9IGdldHRlci5hc3NpZ247XG4gKiAgIHZhciBjb250ZXh0ID0ge3VzZXI6e25hbWU6J2FuZ3VsYXInfX07XG4gKiAgIHZhciBsb2NhbHMgPSB7dXNlcjp7bmFtZTonbG9jYWwnfX07XG4gKlxuICogICBleHBlY3QoZ2V0dGVyKGNvbnRleHQpKS50b0VxdWFsKCdhbmd1bGFyJyk7XG4gKiAgIHNldHRlcihjb250ZXh0LCAnbmV3VmFsdWUnKTtcbiAqICAgZXhwZWN0KGNvbnRleHQudXNlci5uYW1lKS50b0VxdWFsKCduZXdWYWx1ZScpO1xuICogICBleHBlY3QoZ2V0dGVyKGNvbnRleHQsIGxvY2FscykpLnRvRXF1YWwoJ2xvY2FsJyk7XG4gKiBgYGBcbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gKlxuICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gKiAgICAgIGBjb250ZXh0YC5cbiAqXG4gKiAgICBUaGUgcmV0dXJuZWQgZnVuY3Rpb24gYWxzbyBoYXMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogICAgICAqIGBsaXRlcmFsYCDigJMgYHtib29sZWFufWAg4oCTIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24ncyB0b3AtbGV2ZWwgbm9kZSBpcyBhIEphdmFTY3JpcHRcbiAqICAgICAgICBsaXRlcmFsLlxuICogICAgICAqIGBjb25zdGFudGAg4oCTIGB7Ym9vbGVhbn1gIOKAkyB3aGV0aGVyIHRoZSBleHByZXNzaW9uIGlzIG1hZGUgZW50aXJlbHkgb2YgSmF2YVNjcmlwdFxuICogICAgICAgIGNvbnN0YW50IGxpdGVyYWxzLlxuICogICAgICAqIGBhc3NpZ25gIOKAkyBgez9mdW5jdGlvbihjb250ZXh0LCB2YWx1ZSl9YCDigJMgaWYgdGhlIGV4cHJlc3Npb24gaXMgYXNzaWduYWJsZSwgdGhpcyB3aWxsIGJlXG4gKiAgICAgICAgc2V0IHRvIGEgZnVuY3Rpb24gdG8gY2hhbmdlIGl0cyB2YWx1ZSBvbiB0aGUgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHBhcnNlUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGAkcGFyc2VQcm92aWRlcmAgY2FuIGJlIHVzZWQgZm9yIGNvbmZpZ3VyaW5nIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSB7QGxpbmsgbmcuJHBhcnNlICRwYXJzZX1cbiAqICBzZXJ2aWNlLlxuICovXG5mdW5jdGlvbiAkUGFyc2VQcm92aWRlcigpIHtcbiAgdmFyIGNhY2hlRGVmYXVsdCA9IGNyZWF0ZU1hcCgpO1xuICB2YXIgY2FjaGVFeHBlbnNpdmUgPSBjcmVhdGVNYXAoKTtcblxuICB0aGlzLiRnZXQgPSBbJyRmaWx0ZXInLCBmdW5jdGlvbigkZmlsdGVyKSB7XG4gICAgdmFyIG5vVW5zYWZlRXZhbCA9IGNzcCgpLm5vVW5zYWZlRXZhbDtcbiAgICB2YXIgJHBhcnNlT3B0aW9ucyA9IHtcbiAgICAgICAgICBjc3A6IG5vVW5zYWZlRXZhbCxcbiAgICAgICAgICBleHBlbnNpdmVDaGVja3M6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgICRwYXJzZU9wdGlvbnNFeHBlbnNpdmUgPSB7XG4gICAgICAgICAgY3NwOiBub1Vuc2FmZUV2YWwsXG4gICAgICAgICAgZXhwZW5zaXZlQ2hlY2tzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gJHBhcnNlKGV4cCwgaW50ZXJjZXB0b3JGbiwgZXhwZW5zaXZlQ2hlY2tzKSB7XG4gICAgICB2YXIgcGFyc2VkRXhwcmVzc2lvbiwgb25lVGltZSwgY2FjaGVLZXk7XG5cbiAgICAgIHN3aXRjaCAodHlwZW9mIGV4cCkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgIGV4cCA9IGV4cC50cmltKCk7XG4gICAgICAgICAgY2FjaGVLZXkgPSBleHA7XG5cbiAgICAgICAgICB2YXIgY2FjaGUgPSAoZXhwZW5zaXZlQ2hlY2tzID8gY2FjaGVFeHBlbnNpdmUgOiBjYWNoZURlZmF1bHQpO1xuICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24gPSBjYWNoZVtjYWNoZUtleV07XG5cbiAgICAgICAgICBpZiAoIXBhcnNlZEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGlmIChleHAuY2hhckF0KDApID09PSAnOicgJiYgZXhwLmNoYXJBdCgxKSA9PT0gJzonKSB7XG4gICAgICAgICAgICAgIG9uZVRpbWUgPSB0cnVlO1xuICAgICAgICAgICAgICBleHAgPSBleHAuc3Vic3RyaW5nKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBhcnNlT3B0aW9ucyA9IGV4cGVuc2l2ZUNoZWNrcyA/ICRwYXJzZU9wdGlvbnNFeHBlbnNpdmUgOiAkcGFyc2VPcHRpb25zO1xuICAgICAgICAgICAgdmFyIGxleGVyID0gbmV3IExleGVyKHBhcnNlT3B0aW9ucyk7XG4gICAgICAgICAgICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihsZXhlciwgJGZpbHRlciwgcGFyc2VPcHRpb25zKTtcbiAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24gPSBwYXJzZXIucGFyc2UoZXhwKTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRFeHByZXNzaW9uLmNvbnN0YW50KSB7XG4gICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlID0gY29uc3RhbnRXYXRjaERlbGVnYXRlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvbmVUaW1lKSB7XG4gICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlID0gcGFyc2VkRXhwcmVzc2lvbi5saXRlcmFsID9cbiAgICAgICAgICAgICAgICAgIG9uZVRpbWVMaXRlcmFsV2F0Y2hEZWxlZ2F0ZSA6IG9uZVRpbWVXYXRjaERlbGVnYXRlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZWRFeHByZXNzaW9uLmlucHV0cykge1xuICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IGlucHV0c1dhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWNoZVtjYWNoZUtleV0gPSBwYXJzZWRFeHByZXNzaW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYWRkSW50ZXJjZXB0b3IocGFyc2VkRXhwcmVzc2lvbiwgaW50ZXJjZXB0b3JGbik7XG5cbiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihleHAsIGludGVyY2VwdG9yRm4pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2sobmV3VmFsdWUsIG9sZFZhbHVlT2ZWYWx1ZSkge1xuXG4gICAgICBpZiAobmV3VmFsdWUgPT0gbnVsbCB8fCBvbGRWYWx1ZU9mVmFsdWUgPT0gbnVsbCkgeyAvLyBudWxsL3VuZGVmaW5lZFxuICAgICAgICByZXR1cm4gbmV3VmFsdWUgPT09IG9sZFZhbHVlT2ZWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcpIHtcblxuICAgICAgICAvLyBhdHRlbXB0IHRvIGNvbnZlcnQgdGhlIHZhbHVlIHRvIGEgcHJpbWl0aXZlIHR5cGVcbiAgICAgICAgLy8gVE9ETyhkb2NzKTogYWRkIGEgbm90ZSB0byBkb2NzIHRoYXQgYnkgaW1wbGVtZW50aW5nIHZhbHVlT2YgZXZlbiBvYmplY3RzIGFuZCBhcnJheXMgY2FuXG4gICAgICAgIC8vICAgICAgICAgICAgIGJlIGNoZWFwbHkgZGlydHktY2hlY2tlZFxuICAgICAgICBuZXdWYWx1ZSA9IGdldFZhbHVlT2YobmV3VmFsdWUpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbmV3VmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgLy8gb2JqZWN0cy9hcnJheXMgYXJlIG5vdCBzdXBwb3J0ZWQgLSBkZWVwLXdhdGNoaW5nIHRoZW0gd291bGQgYmUgdG9vIGV4cGVuc2l2ZVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZhbGwtdGhyb3VnaCB0byB0aGUgcHJpbWl0aXZlIGVxdWFsaXR5IGNoZWNrXG4gICAgICB9XG5cbiAgICAgIC8vUHJpbWl0aXZlIG9yIE5hTlxuICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSBvbGRWYWx1ZU9mVmFsdWUgfHwgKG5ld1ZhbHVlICE9PSBuZXdWYWx1ZSAmJiBvbGRWYWx1ZU9mVmFsdWUgIT09IG9sZFZhbHVlT2ZWYWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5wdXRzV2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uLCBwcmV0dHlQcmludEV4cHJlc3Npb24pIHtcbiAgICAgIHZhciBpbnB1dEV4cHJlc3Npb25zID0gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHM7XG4gICAgICB2YXIgbGFzdFJlc3VsdDtcblxuICAgICAgaWYgKGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBvbGRJbnB1dFZhbHVlT2YgPSBleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrOyAvLyBpbml0IHRvIHNvbWV0aGluZyB1bmlxdWUgc28gdGhhdCBlcXVhbHMgY2hlY2sgZmFpbHNcbiAgICAgICAgaW5wdXRFeHByZXNzaW9ucyA9IGlucHV0RXhwcmVzc2lvbnNbMF07XG4gICAgICAgIHJldHVybiBzY29wZS4kd2F0Y2goZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0V2F0Y2goc2NvcGUpIHtcbiAgICAgICAgICB2YXIgbmV3SW5wdXRWYWx1ZSA9IGlucHV0RXhwcmVzc2lvbnMoc2NvcGUpO1xuICAgICAgICAgIGlmICghZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdJbnB1dFZhbHVlLCBvbGRJbnB1dFZhbHVlT2YpKSB7XG4gICAgICAgICAgICBsYXN0UmVzdWx0ID0gcGFyc2VkRXhwcmVzc2lvbihzY29wZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFtuZXdJbnB1dFZhbHVlXSk7XG4gICAgICAgICAgICBvbGRJbnB1dFZhbHVlT2YgPSBuZXdJbnB1dFZhbHVlICYmIGdldFZhbHVlT2YobmV3SW5wdXRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9LCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHByZXR0eVByaW50RXhwcmVzc2lvbik7XG4gICAgICB9XG5cbiAgICAgIHZhciBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXMgPSBbXTtcbiAgICAgIHZhciBvbGRJbnB1dFZhbHVlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gaW5wdXRFeHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSA9IGV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2s7IC8vIGluaXQgdG8gc29tZXRoaW5nIHVuaXF1ZSBzbyB0aGF0IGVxdWFscyBjaGVjayBmYWlsc1xuICAgICAgICBvbGRJbnB1dFZhbHVlc1tpXSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzY29wZS4kd2F0Y2goZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0c1dhdGNoKHNjb3BlKSB7XG4gICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gaW5wdXRFeHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFyIG5ld0lucHV0VmFsdWUgPSBpbnB1dEV4cHJlc3Npb25zW2ldKHNjb3BlKTtcbiAgICAgICAgICBpZiAoY2hhbmdlZCB8fCAoY2hhbmdlZCA9ICFleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrKG5ld0lucHV0VmFsdWUsIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSkpKSB7XG4gICAgICAgICAgICBvbGRJbnB1dFZhbHVlc1tpXSA9IG5ld0lucHV0VmFsdWU7XG4gICAgICAgICAgICBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXNbaV0gPSBuZXdJbnB1dFZhbHVlICYmIGdldFZhbHVlT2YobmV3SW5wdXRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICBsYXN0UmVzdWx0ID0gcGFyc2VkRXhwcmVzc2lvbihzY29wZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG9sZElucHV0VmFsdWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgfSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwcmV0dHlQcmludEV4cHJlc3Npb24pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZVRpbWVXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHBhcnNlZEV4cHJlc3Npb24pIHtcbiAgICAgIHZhciB1bndhdGNoLCBsYXN0VmFsdWU7XG4gICAgICByZXR1cm4gdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBvbmVUaW1lV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgfSwgZnVuY3Rpb24gb25lVGltZUxpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKSB7XG4gICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgIHVud2F0Y2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgb2JqZWN0RXF1YWxpdHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZVRpbWVMaXRlcmFsV2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgdW53YXRjaCwgbGFzdFZhbHVlO1xuICAgICAgcmV0dXJuIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gb25lVGltZVdhdGNoKHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlKTtcbiAgICAgIH0sIGZ1bmN0aW9uIG9uZVRpbWVMaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSkge1xuICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB2YWx1ZSwgb2xkLCBzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQWxsRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNBbGxEZWZpbmVkKGxhc3RWYWx1ZSkpIHVud2F0Y2goKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgb2JqZWN0RXF1YWxpdHkpO1xuXG4gICAgICBmdW5jdGlvbiBpc0FsbERlZmluZWQodmFsdWUpIHtcbiAgICAgICAgdmFyIGFsbERlZmluZWQgPSB0cnVlO1xuICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICBpZiAoIWlzRGVmaW5lZCh2YWwpKSBhbGxEZWZpbmVkID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYWxsRGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgdmFyIHVud2F0Y2g7XG4gICAgICByZXR1cm4gdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBjb25zdGFudFdhdGNoKHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlKTtcbiAgICAgIH0sIGZ1bmN0aW9uIGNvbnN0YW50TGlzdGVuZXIodmFsdWUsIG9sZCwgc2NvcGUpIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICB1bndhdGNoKCk7XG4gICAgICB9LCBvYmplY3RFcXVhbGl0eSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkSW50ZXJjZXB0b3IocGFyc2VkRXhwcmVzc2lvbiwgaW50ZXJjZXB0b3JGbikge1xuICAgICAgaWYgKCFpbnRlcmNlcHRvckZuKSByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbjtcbiAgICAgIHZhciB3YXRjaERlbGVnYXRlID0gcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGU7XG4gICAgICB2YXIgdXNlSW5wdXRzID0gZmFsc2U7XG5cbiAgICAgIHZhciByZWd1bGFyV2F0Y2ggPVxuICAgICAgICAgIHdhdGNoRGVsZWdhdGUgIT09IG9uZVRpbWVMaXRlcmFsV2F0Y2hEZWxlZ2F0ZSAmJlxuICAgICAgICAgIHdhdGNoRGVsZWdhdGUgIT09IG9uZVRpbWVXYXRjaERlbGVnYXRlO1xuXG4gICAgICB2YXIgZm4gPSByZWd1bGFyV2F0Y2ggPyBmdW5jdGlvbiByZWd1bGFySW50ZXJjZXB0ZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHVzZUlucHV0cyAmJiBpbnB1dHMgPyBpbnB1dHNbMF0gOiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgcmV0dXJuIGludGVyY2VwdG9yRm4odmFsdWUsIHNjb3BlLCBsb2NhbHMpO1xuICAgICAgfSA6IGZ1bmN0aW9uIG9uZVRpbWVJbnRlcmNlcHRlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHZhciByZXN1bHQgPSBpbnRlcmNlcHRvckZuKHZhbHVlLCBzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgLy8gd2Ugb25seSByZXR1cm4gdGhlIGludGVyY2VwdG9yJ3MgcmVzdWx0IGlmIHRoZVxuICAgICAgICAvLyBpbml0aWFsIHZhbHVlIGlzIGRlZmluZWQgKGZvciBiaW5kLW9uY2UpXG4gICAgICAgIHJldHVybiBpc0RlZmluZWQodmFsdWUpID8gcmVzdWx0IDogdmFsdWU7XG4gICAgICB9O1xuXG4gICAgICAvLyBQcm9wYWdhdGUgJCR3YXRjaERlbGVnYXRlcyBvdGhlciB0aGVuIGlucHV0c1dhdGNoRGVsZWdhdGVcbiAgICAgIGlmIChwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSAmJlxuICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlICE9PSBpbnB1dHNXYXRjaERlbGVnYXRlKSB7XG4gICAgICAgIGZuLiQkd2F0Y2hEZWxlZ2F0ZSA9IHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlO1xuICAgICAgfSBlbHNlIGlmICghaW50ZXJjZXB0b3JGbi4kc3RhdGVmdWwpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYW4gaW50ZXJjZXB0b3IsIGJ1dCBubyB3YXRjaERlbGVnYXRlIHRoZW4gdHJlYXQgdGhlIGludGVyY2VwdG9yIGxpa2VcbiAgICAgICAgLy8gd2UgdHJlYXQgZmlsdGVycyAtIGl0IGlzIGFzc3VtZWQgdG8gYmUgYSBwdXJlIGZ1bmN0aW9uIHVubGVzcyBmbGFnZ2VkIHdpdGggJHN0YXRlZnVsXG4gICAgICAgIGZuLiQkd2F0Y2hEZWxlZ2F0ZSA9IGlucHV0c1dhdGNoRGVsZWdhdGU7XG4gICAgICAgIHVzZUlucHV0cyA9ICFwYXJzZWRFeHByZXNzaW9uLmlucHV0cztcbiAgICAgICAgZm4uaW5wdXRzID0gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHMgPyBwYXJzZWRFeHByZXNzaW9uLmlucHV0cyA6IFtwYXJzZWRFeHByZXNzaW9uXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRxXG4gKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBzZXJ2aWNlIHRoYXQgaGVscHMgeW91IHJ1biBmdW5jdGlvbnMgYXN5bmNocm9ub3VzbHksIGFuZCB1c2UgdGhlaXIgcmV0dXJuIHZhbHVlcyAob3IgZXhjZXB0aW9ucylcbiAqIHdoZW4gdGhleSBhcmUgZG9uZSBwcm9jZXNzaW5nLlxuICpcbiAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgcHJvbWlzZXMvZGVmZXJyZWQgb2JqZWN0cyBpbnNwaXJlZCBieVxuICogW0tyaXMgS293YWwncyBRXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EpLlxuICpcbiAqICRxIGNhbiBiZSB1c2VkIGluIHR3byBmYXNoaW9ucyAtLS0gb25lIHdoaWNoIGlzIG1vcmUgc2ltaWxhciB0byBLcmlzIEtvd2FsJ3MgUSBvciBqUXVlcnkncyBEZWZlcnJlZFxuICogaW1wbGVtZW50YXRpb25zLCBhbmQgdGhlIG90aGVyIHdoaWNoIHJlc2VtYmxlcyBFUzYgcHJvbWlzZXMgdG8gc29tZSBkZWdyZWUuXG4gKlxuICogIyAkcSBjb25zdHJ1Y3RvclxuICpcbiAqIFRoZSBzdHJlYW1saW5lZCBFUzYgc3R5bGUgcHJvbWlzZSBpcyBlc3NlbnRpYWxseSBqdXN0IHVzaW5nICRxIGFzIGEgY29uc3RydWN0b3Igd2hpY2ggdGFrZXMgYSBgcmVzb2x2ZXJgXG4gKiBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQuIFRoaXMgaXMgc2ltaWxhciB0byB0aGUgbmF0aXZlIFByb21pc2UgaW1wbGVtZW50YXRpb24gZnJvbSBFUzYgSGFybW9ueSxcbiAqIHNlZSBbTUROXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9Qcm9taXNlKS5cbiAqXG4gKiBXaGlsZSB0aGUgY29uc3RydWN0b3Itc3R5bGUgdXNlIGlzIHN1cHBvcnRlZCwgbm90IGFsbCBvZiB0aGUgc3VwcG9ydGluZyBtZXRob2RzIGZyb20gRVM2IEhhcm1vbnkgcHJvbWlzZXMgYXJlXG4gKiBhdmFpbGFibGUgeWV0LlxuICpcbiAqIEl0IGNhbiBiZSB1c2VkIGxpa2Ugc286XG4gKlxuICogYGBganNcbiAqICAgLy8gZm9yIHRoZSBwdXJwb3NlIG9mIHRoaXMgZXhhbXBsZSBsZXQncyBhc3N1bWUgdGhhdCB2YXJpYWJsZXMgYCRxYCBhbmQgYG9rVG9HcmVldGBcbiAqICAgLy8gYXJlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBsZXhpY2FsIHNjb3BlICh0aGV5IGNvdWxkIGhhdmUgYmVlbiBpbmplY3RlZCBvciBwYXNzZWQgaW4pLlxuICpcbiAqICAgZnVuY3Rpb24gYXN5bmNHcmVldChuYW1lKSB7XG4gKiAgICAgLy8gcGVyZm9ybSBzb21lIGFzeW5jaHJvbm91cyBvcGVyYXRpb24sIHJlc29sdmUgb3IgcmVqZWN0IHRoZSBwcm9taXNlIHdoZW4gYXBwcm9wcmlhdGUuXG4gKiAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICogICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgaWYgKG9rVG9HcmVldChuYW1lKSkge1xuICogICAgICAgICAgIHJlc29sdmUoJ0hlbGxvLCAnICsgbmFtZSArICchJyk7XG4gKiAgICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgICAgcmVqZWN0KCdHcmVldGluZyAnICsgbmFtZSArICcgaXMgbm90IGFsbG93ZWQuJyk7XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0sIDEwMDApO1xuICogICAgIH0pO1xuICogICB9XG4gKlxuICogICB2YXIgcHJvbWlzZSA9IGFzeW5jR3JlZXQoJ1JvYmluIEhvb2QnKTtcbiAqICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gKiAgICAgYWxlcnQoJ1N1Y2Nlc3M6ICcgKyBncmVldGluZyk7XG4gKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICogICAgIGFsZXJ0KCdGYWlsZWQ6ICcgKyByZWFzb24pO1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIE5vdGU6IHByb2dyZXNzL25vdGlmeSBjYWxsYmFja3MgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIHZpYSB0aGUgRVM2LXN0eWxlIGludGVyZmFjZS5cbiAqXG4gKiBOb3RlOiB1bmxpa2UgRVM2IGJlaGF2aW91ciwgYW4gZXhjZXB0aW9uIHRocm93biBpbiB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gd2lsbCBOT1QgaW1wbGljaXRseSByZWplY3QgdGhlIHByb21pc2UuXG4gKlxuICogSG93ZXZlciwgdGhlIG1vcmUgdHJhZGl0aW9uYWwgQ29tbW9uSlMtc3R5bGUgdXNhZ2UgaXMgc3RpbGwgYXZhaWxhYmxlLCBhbmQgZG9jdW1lbnRlZCBiZWxvdy5cbiAqXG4gKiBbVGhlIENvbW1vbkpTIFByb21pc2UgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1Byb21pc2VzKSBkZXNjcmliZXMgYSBwcm9taXNlIGFzIGFuXG4gKiBpbnRlcmZhY2UgZm9yIGludGVyYWN0aW5nIHdpdGggYW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcmVzdWx0IG9mIGFuIGFjdGlvbiB0aGF0IGlzXG4gKiBwZXJmb3JtZWQgYXN5bmNocm9ub3VzbHksIGFuZCBtYXkgb3IgbWF5IG5vdCBiZSBmaW5pc2hlZCBhdCBhbnkgZ2l2ZW4gcG9pbnQgaW4gdGltZS5cbiAqXG4gKiBGcm9tIHRoZSBwZXJzcGVjdGl2ZSBvZiBkZWFsaW5nIHdpdGggZXJyb3IgaGFuZGxpbmcsIGRlZmVycmVkIGFuZCBwcm9taXNlIEFQSXMgYXJlIHRvXG4gKiBhc3luY2hyb25vdXMgcHJvZ3JhbW1pbmcgd2hhdCBgdHJ5YCwgYGNhdGNoYCBhbmQgYHRocm93YCBrZXl3b3JkcyBhcmUgdG8gc3luY2hyb25vdXMgcHJvZ3JhbW1pbmcuXG4gKlxuICogYGBganNcbiAqICAgLy8gZm9yIHRoZSBwdXJwb3NlIG9mIHRoaXMgZXhhbXBsZSBsZXQncyBhc3N1bWUgdGhhdCB2YXJpYWJsZXMgYCRxYCBhbmQgYG9rVG9HcmVldGBcbiAqICAgLy8gYXJlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBsZXhpY2FsIHNjb3BlICh0aGV5IGNvdWxkIGhhdmUgYmVlbiBpbmplY3RlZCBvciBwYXNzZWQgaW4pLlxuICpcbiAqICAgZnVuY3Rpb24gYXN5bmNHcmVldChuYW1lKSB7XG4gKiAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAqXG4gKiAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgIGRlZmVycmVkLm5vdGlmeSgnQWJvdXQgdG8gZ3JlZXQgJyArIG5hbWUgKyAnLicpO1xuICpcbiAqICAgICAgIGlmIChva1RvR3JlZXQobmFtZSkpIHtcbiAqICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgnSGVsbG8sICcgKyBuYW1lICsgJyEnKTtcbiAqICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnR3JlZXRpbmcgJyArIG5hbWUgKyAnIGlzIG5vdCBhbGxvd2VkLicpO1xuICogICAgICAgfVxuICogICAgIH0sIDEwMDApO1xuICpcbiAqICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAqICAgfVxuICpcbiAqICAgdmFyIHByb21pc2UgPSBhc3luY0dyZWV0KCdSb2JpbiBIb29kJyk7XG4gKiAgIHByb21pc2UudGhlbihmdW5jdGlvbihncmVldGluZykge1xuICogICAgIGFsZXJ0KCdTdWNjZXNzOiAnICsgZ3JlZXRpbmcpO1xuICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAqICAgICBhbGVydCgnRmFpbGVkOiAnICsgcmVhc29uKTtcbiAqICAgfSwgZnVuY3Rpb24odXBkYXRlKSB7XG4gKiAgICAgYWxlcnQoJ0dvdCBub3RpZmljYXRpb246ICcgKyB1cGRhdGUpO1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIEF0IGZpcnN0IGl0IG1pZ2h0IG5vdCBiZSBvYnZpb3VzIHdoeSB0aGlzIGV4dHJhIGNvbXBsZXhpdHkgaXMgd29ydGggdGhlIHRyb3VibGUuIFRoZSBwYXlvZmZcbiAqIGNvbWVzIGluIHRoZSB3YXkgb2YgZ3VhcmFudGVlcyB0aGF0IHByb21pc2UgYW5kIGRlZmVycmVkIEFQSXMgbWFrZSwgc2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3VuY29tbW9uanMvYmxvYi9tYXN0ZXIvcHJvbWlzZXMvc3BlY2lmaWNhdGlvbi5tZC5cbiAqXG4gKiBBZGRpdGlvbmFsbHkgdGhlIHByb21pc2UgYXBpIGFsbG93cyBmb3IgY29tcG9zaXRpb24gdGhhdCBpcyB2ZXJ5IGhhcmQgdG8gZG8gd2l0aCB0aGVcbiAqIHRyYWRpdGlvbmFsIGNhbGxiYWNrIChbQ1BTXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbnRpbnVhdGlvbi1wYXNzaW5nX3N0eWxlKSkgYXBwcm9hY2guXG4gKiBGb3IgbW9yZSBvbiB0aGlzIHBsZWFzZSBzZWUgdGhlIFtRIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcSkgZXNwZWNpYWxseSB0aGVcbiAqIHNlY3Rpb24gb24gc2VyaWFsIG9yIHBhcmFsbGVsIGpvaW5pbmcgb2YgcHJvbWlzZXMuXG4gKlxuICogIyBUaGUgRGVmZXJyZWQgQVBJXG4gKlxuICogQSBuZXcgaW5zdGFuY2Ugb2YgZGVmZXJyZWQgaXMgY29uc3RydWN0ZWQgYnkgY2FsbGluZyBgJHEuZGVmZXIoKWAuXG4gKlxuICogVGhlIHB1cnBvc2Ugb2YgdGhlIGRlZmVycmVkIG9iamVjdCBpcyB0byBleHBvc2UgdGhlIGFzc29jaWF0ZWQgUHJvbWlzZSBpbnN0YW5jZSBhcyB3ZWxsIGFzIEFQSXNcbiAqIHRoYXQgY2FuIGJlIHVzZWQgZm9yIHNpZ25hbGluZyB0aGUgc3VjY2Vzc2Z1bCBvciB1bnN1Y2Nlc3NmdWwgY29tcGxldGlvbiwgYXMgd2VsbCBhcyB0aGUgc3RhdHVzXG4gKiBvZiB0aGUgdGFzay5cbiAqXG4gKiAqKk1ldGhvZHMqKlxuICpcbiAqIC0gYHJlc29sdmUodmFsdWUpYCDigJMgcmVzb2x2ZXMgdGhlIGRlcml2ZWQgcHJvbWlzZSB3aXRoIHRoZSBgdmFsdWVgLiBJZiB0aGUgdmFsdWUgaXMgYSByZWplY3Rpb25cbiAqICAgY29uc3RydWN0ZWQgdmlhIGAkcS5yZWplY3RgLCB0aGUgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIGluc3RlYWQuXG4gKiAtIGByZWplY3QocmVhc29uKWAg4oCTIHJlamVjdHMgdGhlIGRlcml2ZWQgcHJvbWlzZSB3aXRoIHRoZSBgcmVhc29uYC4gVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gKiAgIHJlc29sdmluZyBpdCB3aXRoIGEgcmVqZWN0aW9uIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YC5cbiAqIC0gYG5vdGlmeSh2YWx1ZSlgIC0gcHJvdmlkZXMgdXBkYXRlcyBvbiB0aGUgc3RhdHVzIG9mIHRoZSBwcm9taXNlJ3MgZXhlY3V0aW9uLiBUaGlzIG1heSBiZSBjYWxsZWRcbiAqICAgbXVsdGlwbGUgdGltZXMgYmVmb3JlIHRoZSBwcm9taXNlIGlzIGVpdGhlciByZXNvbHZlZCBvciByZWplY3RlZC5cbiAqXG4gKiAqKlByb3BlcnRpZXMqKlxuICpcbiAqIC0gcHJvbWlzZSDigJMgYHtQcm9taXNlfWAg4oCTIHByb21pc2Ugb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGRlZmVycmVkLlxuICpcbiAqXG4gKiAjIFRoZSBQcm9taXNlIEFQSVxuICpcbiAqIEEgbmV3IHByb21pc2UgaW5zdGFuY2UgaXMgY3JlYXRlZCB3aGVuIGEgZGVmZXJyZWQgaW5zdGFuY2UgaXMgY3JlYXRlZCBhbmQgY2FuIGJlIHJldHJpZXZlZCBieVxuICogY2FsbGluZyBgZGVmZXJyZWQucHJvbWlzZWAuXG4gKlxuICogVGhlIHB1cnBvc2Ugb2YgdGhlIHByb21pc2Ugb2JqZWN0IGlzIHRvIGFsbG93IGZvciBpbnRlcmVzdGVkIHBhcnRpZXMgdG8gZ2V0IGFjY2VzcyB0byB0aGUgcmVzdWx0XG4gKiBvZiB0aGUgZGVmZXJyZWQgdGFzayB3aGVuIGl0IGNvbXBsZXRlcy5cbiAqXG4gKiAqKk1ldGhvZHMqKlxuICpcbiAqIC0gYHRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrLCBub3RpZnlDYWxsYmFjaylgIOKAkyByZWdhcmRsZXNzIG9mIHdoZW4gdGhlIHByb21pc2Ugd2FzIG9yXG4gKiAgIHdpbGwgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQsIGB0aGVuYCBjYWxscyBvbmUgb2YgdGhlIHN1Y2Nlc3Mgb3IgZXJyb3IgY2FsbGJhY2tzIGFzeW5jaHJvbm91c2x5XG4gKiAgIGFzIHNvb24gYXMgdGhlIHJlc3VsdCBpcyBhdmFpbGFibGUuIFRoZSBjYWxsYmFja3MgYXJlIGNhbGxlZCB3aXRoIGEgc2luZ2xlIGFyZ3VtZW50OiB0aGUgcmVzdWx0XG4gKiAgIG9yIHJlamVjdGlvbiByZWFzb24uIEFkZGl0aW9uYWxseSwgdGhlIG5vdGlmeSBjYWxsYmFjayBtYXkgYmUgY2FsbGVkIHplcm8gb3IgbW9yZSB0aW1lcyB0b1xuICogICBwcm92aWRlIGEgcHJvZ3Jlc3MgaW5kaWNhdGlvbiwgYmVmb3JlIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICpcbiAqICAgVGhpcyBtZXRob2QgKnJldHVybnMgYSBuZXcgcHJvbWlzZSogd2hpY2ggaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlXG4gKiAgIGBzdWNjZXNzQ2FsbGJhY2tgLCBgZXJyb3JDYWxsYmFja2AgKHVubGVzcyB0aGF0IHZhbHVlIGlzIGEgcHJvbWlzZSwgaW4gd2hpY2ggY2FzZSBpdCBpcyByZXNvbHZlZFxuICogICB3aXRoIHRoZSB2YWx1ZSB3aGljaCBpcyByZXNvbHZlZCBpbiB0aGF0IHByb21pc2UgdXNpbmdcbiAqICAgW3Byb21pc2UgY2hhaW5pbmddKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2VzNi9wcm9taXNlcy8jdG9jLXByb21pc2VzLXF1ZXVlcykpLlxuICogICBJdCBhbHNvIG5vdGlmaWVzIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgbm90aWZ5Q2FsbGJhY2tgIG1ldGhvZC4gVGhlIHByb21pc2UgY2Fubm90IGJlXG4gKiAgIHJlc29sdmVkIG9yIHJlamVjdGVkIGZyb20gdGhlIG5vdGlmeUNhbGxiYWNrIG1ldGhvZC5cbiAqXG4gKiAtIGBjYXRjaChlcnJvckNhbGxiYWNrKWAg4oCTIHNob3J0aGFuZCBmb3IgYHByb21pc2UudGhlbihudWxsLCBlcnJvckNhbGxiYWNrKWBcbiAqXG4gKiAtIGBmaW5hbGx5KGNhbGxiYWNrLCBub3RpZnlDYWxsYmFjaylgIOKAkyBhbGxvd3MgeW91IHRvIG9ic2VydmUgZWl0aGVyIHRoZSBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gb2YgYSBwcm9taXNlLFxuICogICBidXQgdG8gZG8gc28gd2l0aG91dCBtb2RpZnlpbmcgdGhlIGZpbmFsIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCB0byByZWxlYXNlIHJlc291cmNlcyBvciBkbyBzb21lXG4gKiAgIGNsZWFuLXVwIHRoYXQgbmVlZHMgdG8gYmUgZG9uZSB3aGV0aGVyIHRoZSBwcm9taXNlIHdhcyByZWplY3RlZCBvciByZXNvbHZlZC4gU2VlIHRoZSBbZnVsbFxuICogICBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3Evd2lraS9BUEktUmVmZXJlbmNlI3Byb21pc2VmaW5hbGx5Y2FsbGJhY2spIGZvclxuICogICBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqICMgQ2hhaW5pbmcgcHJvbWlzZXNcbiAqXG4gKiBCZWNhdXNlIGNhbGxpbmcgdGhlIGB0aGVuYCBtZXRob2Qgb2YgYSBwcm9taXNlIHJldHVybnMgYSBuZXcgZGVyaXZlZCBwcm9taXNlLCBpdCBpcyBlYXNpbHlcbiAqIHBvc3NpYmxlIHRvIGNyZWF0ZSBhIGNoYWluIG9mIHByb21pc2VzOlxuICpcbiAqIGBgYGpzXG4gKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAqICAgICByZXR1cm4gcmVzdWx0ICsgMTtcbiAqICAgfSk7XG4gKlxuICogICAvLyBwcm9taXNlQiB3aWxsIGJlIHJlc29sdmVkIGltbWVkaWF0ZWx5IGFmdGVyIHByb21pc2VBIGlzIHJlc29sdmVkIGFuZCBpdHMgdmFsdWVcbiAqICAgLy8gd2lsbCBiZSB0aGUgcmVzdWx0IG9mIHByb21pc2VBIGluY3JlbWVudGVkIGJ5IDFcbiAqIGBgYFxuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGNyZWF0ZSBjaGFpbnMgb2YgYW55IGxlbmd0aCBhbmQgc2luY2UgYSBwcm9taXNlIGNhbiBiZSByZXNvbHZlZCB3aXRoIGFub3RoZXJcbiAqIHByb21pc2UgKHdoaWNoIHdpbGwgZGVmZXIgaXRzIHJlc29sdXRpb24gZnVydGhlciksIGl0IGlzIHBvc3NpYmxlIHRvIHBhdXNlL2RlZmVyIHJlc29sdXRpb24gb2ZcbiAqIHRoZSBwcm9taXNlcyBhdCBhbnkgcG9pbnQgaW4gdGhlIGNoYWluLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGltcGxlbWVudCBwb3dlcmZ1bCBBUElzIGxpa2VcbiAqICRodHRwJ3MgcmVzcG9uc2UgaW50ZXJjZXB0b3JzLlxuICpcbiAqXG4gKiAjIERpZmZlcmVuY2VzIGJldHdlZW4gS3JpcyBLb3dhbCdzIFEgYW5kICRxXG4gKlxuICogIFRoZXJlIGFyZSB0d28gbWFpbiBkaWZmZXJlbmNlczpcbiAqXG4gKiAtICRxIGlzIGludGVncmF0ZWQgd2l0aCB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGV9IFNjb3BlIG1vZGVsIG9ic2VydmF0aW9uXG4gKiAgIG1lY2hhbmlzbSBpbiBhbmd1bGFyLCB3aGljaCBtZWFucyBmYXN0ZXIgcHJvcGFnYXRpb24gb2YgcmVzb2x1dGlvbiBvciByZWplY3Rpb24gaW50byB5b3VyXG4gKiAgIG1vZGVscyBhbmQgYXZvaWRpbmcgdW5uZWNlc3NhcnkgYnJvd3NlciByZXBhaW50cywgd2hpY2ggd291bGQgcmVzdWx0IGluIGZsaWNrZXJpbmcgVUkuXG4gKiAtIFEgaGFzIG1hbnkgbW9yZSBmZWF0dXJlcyB0aGFuICRxLCBidXQgdGhhdCBjb21lcyBhdCBhIGNvc3Qgb2YgYnl0ZXMuICRxIGlzIHRpbnksIGJ1dCBjb250YWluc1xuICogICBhbGwgdGhlIGltcG9ydGFudCBmdW5jdGlvbmFsaXR5IG5lZWRlZCBmb3IgY29tbW9uIGFzeW5jIHRhc2tzLlxuICpcbiAqICAjIFRlc3RpbmdcbiAqXG4gKiAgYGBganNcbiAqICAgIGl0KCdzaG91bGQgc2ltdWxhdGUgcHJvbWlzZScsIGluamVjdChmdW5jdGlvbigkcSwgJHJvb3RTY29wZSkge1xuICogICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICogICAgICB2YXIgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2U7XG4gKiAgICAgIHZhciByZXNvbHZlZFZhbHVlO1xuICpcbiAqICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7IHJlc29sdmVkVmFsdWUgPSB2YWx1ZTsgfSk7XG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gKlxuICogICAgICAvLyBTaW11bGF0ZSByZXNvbHZpbmcgb2YgcHJvbWlzZVxuICogICAgICBkZWZlcnJlZC5yZXNvbHZlKDEyMyk7XG4gKiAgICAgIC8vIE5vdGUgdGhhdCB0aGUgJ3RoZW4nIGZ1bmN0aW9uIGRvZXMgbm90IGdldCBjYWxsZWQgc3luY2hyb25vdXNseS5cbiAqICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHdlIHdhbnQgdGhlIHByb21pc2UgQVBJIHRvIGFsd2F5cyBiZSBhc3luYywgd2hldGhlciBvciBub3RcbiAqICAgICAgLy8gaXQgZ290IGNhbGxlZCBzeW5jaHJvbm91c2x5IG9yIGFzeW5jaHJvbm91c2x5LlxuICogICAgICBleHBlY3QocmVzb2x2ZWRWYWx1ZSkudG9CZVVuZGVmaW5lZCgpO1xuICpcbiAqICAgICAgLy8gUHJvcGFnYXRlIHByb21pc2UgcmVzb2x1dGlvbiB0byAndGhlbicgZnVuY3Rpb25zIHVzaW5nICRhcHBseSgpLlxuICogICAgICAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICogICAgICBleHBlY3QocmVzb2x2ZWRWYWx1ZSkudG9FcXVhbCgxMjMpO1xuICogICAgfSkpO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oZnVuY3Rpb24sIGZ1bmN0aW9uKX0gcmVzb2x2ZXIgRnVuY3Rpb24gd2hpY2ggaXMgcmVzcG9uc2libGUgZm9yIHJlc29sdmluZyBvclxuICogICByZWplY3RpbmcgdGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS4gVGhlIGZpcnN0IHBhcmFtZXRlciBpcyBhIGZ1bmN0aW9uIHdoaWNoIHJlc29sdmVzIHRoZVxuICogICBwcm9taXNlLCB0aGUgc2Vjb25kIHBhcmFtZXRlciBpcyBhIGZ1bmN0aW9uIHdoaWNoIHJlamVjdHMgdGhlIHByb21pc2UuXG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBuZXdseSBjcmVhdGVkIHByb21pc2UuXG4gKi9cbmZ1bmN0aW9uICRRUHJvdmlkZXIoKSB7XG5cbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRleGNlcHRpb25IYW5kbGVyJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICByZXR1cm4gcUZhY3RvcnkoZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhjYWxsYmFjayk7XG4gICAgfSwgJGV4Y2VwdGlvbkhhbmRsZXIpO1xuICB9XTtcbn1cblxuZnVuY3Rpb24gJCRRUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJGJyb3dzZXInLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigkYnJvd3NlciwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICByZXR1cm4gcUZhY3RvcnkoZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICRicm93c2VyLmRlZmVyKGNhbGxiYWNrKTtcbiAgICB9LCAkZXhjZXB0aW9uSGFuZGxlcik7XG4gIH1dO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBwcm9taXNlIG1hbmFnZXIuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbil9IG5leHRUaWNrIEZ1bmN0aW9uIGZvciBleGVjdXRpbmcgZnVuY3Rpb25zIGluIHRoZSBuZXh0IHR1cm4uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLiopfSBleGNlcHRpb25IYW5kbGVyIEZ1bmN0aW9uIGludG8gd2hpY2ggdW5leHBlY3RlZCBleGNlcHRpb25zIGFyZSBwYXNzZWQgZm9yXG4gKiAgICAgZGVidWdnaW5nIHB1cnBvc2VzLlxuICogQHJldHVybnMge29iamVjdH0gUHJvbWlzZSBtYW5hZ2VyLlxuICovXG5mdW5jdGlvbiBxRmFjdG9yeShuZXh0VGljaywgZXhjZXB0aW9uSGFuZGxlcikge1xuICB2YXIgJHFNaW5FcnIgPSBtaW5FcnIoJyRxJywgVHlwZUVycm9yKTtcbiAgZnVuY3Rpb24gY2FsbE9uY2Uoc2VsZiwgcmVzb2x2ZUZuLCByZWplY3RGbikge1xuICAgIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiB3cmFwKGZuKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKGNhbGxlZCkgcmV0dXJuO1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICBmbi5jYWxsKHNlbGYsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIFt3cmFwKHJlc29sdmVGbiksIHdyYXAocmVqZWN0Rm4pXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nLiRxI2RlZmVyXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgYERlZmVycmVkYCBvYmplY3Qgd2hpY2ggcmVwcmVzZW50cyBhIHRhc2sgd2hpY2ggd2lsbCBmaW5pc2ggaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQHJldHVybnMge0RlZmVycmVkfSBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkLlxuICAgKi9cbiAgdmFyIGRlZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEZWZlcnJlZCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFByb21pc2UoKSB7XG4gICAgdGhpcy4kJHN0YXRlID0geyBzdGF0dXM6IDAgfTtcbiAgfVxuXG4gIGV4dGVuZChQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIHRoZW46IGZ1bmN0aW9uKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9ncmVzc0JhY2spIHtcbiAgICAgIGlmIChpc1VuZGVmaW5lZChvbkZ1bGZpbGxlZCkgJiYgaXNVbmRlZmluZWQob25SZWplY3RlZCkgJiYgaXNVbmRlZmluZWQocHJvZ3Jlc3NCYWNrKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgRGVmZXJyZWQoKTtcblxuICAgICAgdGhpcy4kJHN0YXRlLnBlbmRpbmcgPSB0aGlzLiQkc3RhdGUucGVuZGluZyB8fCBbXTtcbiAgICAgIHRoaXMuJCRzdGF0ZS5wZW5kaW5nLnB1c2goW3Jlc3VsdCwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFja10pO1xuICAgICAgaWYgKHRoaXMuJCRzdGF0ZS5zdGF0dXMgPiAwKSBzY2hlZHVsZVByb2Nlc3NRdWV1ZSh0aGlzLiQkc3RhdGUpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICBcImZpbmFsbHlcIjogZnVuY3Rpb24oY2FsbGJhY2ssIHByb2dyZXNzQmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIHRydWUsIGNhbGxiYWNrKTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhlcnJvciwgZmFsc2UsIGNhbGxiYWNrKTtcbiAgICAgIH0sIHByb2dyZXNzQmFjayk7XG4gICAgfVxuICB9KTtcblxuICAvL0Zhc3RlciwgbW9yZSBiYXNpYyB0aGFuIGFuZ3VsYXIuYmluZCBodHRwOi8vanNwZXJmLmNvbS9hbmd1bGFyLWJpbmQtdnMtY3VzdG9tLXZzLW5hdGl2ZVxuICBmdW5jdGlvbiBzaW1wbGVCaW5kKGNvbnRleHQsIGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBmbi5jYWxsKGNvbnRleHQsIHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1F1ZXVlKHN0YXRlKSB7XG4gICAgdmFyIGZuLCBkZWZlcnJlZCwgcGVuZGluZztcblxuICAgIHBlbmRpbmcgPSBzdGF0ZS5wZW5kaW5nO1xuICAgIHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBzdGF0ZS5wZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHBlbmRpbmcubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgZGVmZXJyZWQgPSBwZW5kaW5nW2ldWzBdO1xuICAgICAgZm4gPSBwZW5kaW5nW2ldW3N0YXRlLnN0YXR1c107XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihmbikpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGZuKHN0YXRlLnZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUuc3RhdHVzID09PSAxKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShzdGF0ZS52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHN0YXRlLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QoZSk7XG4gICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVQcm9jZXNzUXVldWUoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCB8fCAhc3RhdGUucGVuZGluZykgcmV0dXJuO1xuICAgIHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgPSB0cnVlO1xuICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkgeyBwcm9jZXNzUXVldWUoc3RhdGUpOyB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIERlZmVycmVkKCkge1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKCk7XG4gICAgLy9OZWNlc3NhcnkgdG8gc3VwcG9ydCB1bmJvdW5kIGV4ZWN1dGlvbiA6L1xuICAgIHRoaXMucmVzb2x2ZSA9IHNpbXBsZUJpbmQodGhpcywgdGhpcy5yZXNvbHZlKTtcbiAgICB0aGlzLnJlamVjdCA9IHNpbXBsZUJpbmQodGhpcywgdGhpcy5yZWplY3QpO1xuICAgIHRoaXMubm90aWZ5ID0gc2ltcGxlQmluZCh0aGlzLCB0aGlzLm5vdGlmeSk7XG4gIH1cblxuICBleHRlbmQoRGVmZXJyZWQucHJvdG90eXBlLCB7XG4gICAgcmVzb2x2ZTogZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAodGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzKSByZXR1cm47XG4gICAgICBpZiAodmFsID09PSB0aGlzLnByb21pc2UpIHtcbiAgICAgICAgdGhpcy4kJHJlamVjdCgkcU1pbkVycihcbiAgICAgICAgICAncWN5Y2xlJyxcbiAgICAgICAgICBcIkV4cGVjdGVkIHByb21pc2UgdG8gYmUgcmVzb2x2ZWQgd2l0aCB2YWx1ZSBvdGhlciB0aGFuIGl0c2VsZiAnezB9J1wiLFxuICAgICAgICAgIHZhbCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kJHJlc29sdmUodmFsKTtcbiAgICAgIH1cblxuICAgIH0sXG5cbiAgICAkJHJlc29sdmU6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgdmFyIHRoZW4sIGZucztcblxuICAgICAgZm5zID0gY2FsbE9uY2UodGhpcywgdGhpcy4kJHJlc29sdmUsIHRoaXMuJCRyZWplY3QpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKChpc09iamVjdCh2YWwpIHx8IGlzRnVuY3Rpb24odmFsKSkpIHRoZW4gPSB2YWwgJiYgdmFsLnRoZW47XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoZW4pKSB7XG4gICAgICAgICAgdGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzID0gLTE7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbCwgZm5zWzBdLCBmbnNbMV0sIHRoaXMubm90aWZ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS52YWx1ZSA9IHZhbDtcbiAgICAgICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAxO1xuICAgICAgICAgIHNjaGVkdWxlUHJvY2Vzc1F1ZXVlKHRoaXMucHJvbWlzZS4kJHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBmbnNbMV0oZSk7XG4gICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlamVjdDogZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICBpZiAodGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzKSByZXR1cm47XG4gICAgICB0aGlzLiQkcmVqZWN0KHJlYXNvbik7XG4gICAgfSxcblxuICAgICQkcmVqZWN0OiBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnZhbHVlID0gcmVhc29uO1xuICAgICAgdGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzID0gMjtcbiAgICAgIHNjaGVkdWxlUHJvY2Vzc1F1ZXVlKHRoaXMucHJvbWlzZS4kJHN0YXRlKTtcbiAgICB9LFxuXG4gICAgbm90aWZ5OiBmdW5jdGlvbihwcm9ncmVzcykge1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMucHJvbWlzZS4kJHN0YXRlLnBlbmRpbmc7XG5cbiAgICAgIGlmICgodGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzIDw9IDApICYmIGNhbGxiYWNrcyAmJiBjYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBjYWxsYmFjaywgcmVzdWx0O1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBjYWxsYmFja3NbaV1bMF07XG4gICAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXVszXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5ub3RpZnkoaXNGdW5jdGlvbihjYWxsYmFjaykgPyBjYWxsYmFjayhwcm9ncmVzcykgOiBwcm9ncmVzcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3JlamVjdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ3JlYXRlcyBhIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCBhcyByZWplY3RlZCB3aXRoIHRoZSBzcGVjaWZpZWQgYHJlYXNvbmAuIFRoaXMgYXBpIHNob3VsZCBiZVxuICAgKiB1c2VkIHRvIGZvcndhcmQgcmVqZWN0aW9uIGluIGEgY2hhaW4gb2YgcHJvbWlzZXMuIElmIHlvdSBhcmUgZGVhbGluZyB3aXRoIHRoZSBsYXN0IHByb21pc2UgaW5cbiAgICogYSBwcm9taXNlIGNoYWluLCB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCBpdC5cbiAgICpcbiAgICogV2hlbiBjb21wYXJpbmcgZGVmZXJyZWRzL3Byb21pc2VzIHRvIHRoZSBmYW1pbGlhciBiZWhhdmlvciBvZiB0cnkvY2F0Y2gvdGhyb3csIHRoaW5rIG9mXG4gICAqIGByZWplY3RgIGFzIHRoZSBgdGhyb3dgIGtleXdvcmQgaW4gSmF2YVNjcmlwdC4gVGhpcyBhbHNvIG1lYW5zIHRoYXQgaWYgeW91IFwiY2F0Y2hcIiBhbiBlcnJvciB2aWFcbiAgICogYSBwcm9taXNlIGVycm9yIGNhbGxiYWNrIGFuZCB5b3Ugd2FudCB0byBmb3J3YXJkIHRoZSBlcnJvciB0byB0aGUgcHJvbWlzZSBkZXJpdmVkIGZyb20gdGhlXG4gICAqIGN1cnJlbnQgcHJvbWlzZSwgeW91IGhhdmUgdG8gXCJyZXRocm93XCIgdGhlIGVycm9yIGJ5IHJldHVybmluZyBhIHJlamVjdGlvbiBjb25zdHJ1Y3RlZCB2aWFcbiAgICogYHJlamVjdGAuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqICAgcHJvbWlzZUIgPSBwcm9taXNlQS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgKiAgICAgLy8gc3VjY2VzczogZG8gc29tZXRoaW5nIGFuZCByZXNvbHZlIHByb21pc2VCXG4gICAqICAgICAvLyAgICAgICAgICB3aXRoIHRoZSBvbGQgb3IgYSBuZXcgcmVzdWx0XG4gICAqICAgICByZXR1cm4gcmVzdWx0O1xuICAgKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgKiAgICAgLy8gZXJyb3I6IGhhbmRsZSB0aGUgZXJyb3IgaWYgcG9zc2libGUgYW5kXG4gICAqICAgICAvLyAgICAgICAgcmVzb2x2ZSBwcm9taXNlQiB3aXRoIG5ld1Byb21pc2VPclZhbHVlLFxuICAgKiAgICAgLy8gICAgICAgIG90aGVyd2lzZSBmb3J3YXJkIHRoZSByZWplY3Rpb24gdG8gcHJvbWlzZUJcbiAgICogICAgIGlmIChjYW5IYW5kbGUocmVhc29uKSkge1xuICAgKiAgICAgIC8vIGhhbmRsZSB0aGUgZXJyb3IgYW5kIHJlY292ZXJcbiAgICogICAgICByZXR1cm4gbmV3UHJvbWlzZU9yVmFsdWU7XG4gICAqICAgICB9XG4gICAqICAgICByZXR1cm4gJHEucmVqZWN0KHJlYXNvbik7XG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0geyp9IHJlYXNvbiBDb25zdGFudCwgbWVzc2FnZSwgZXhjZXB0aW9uIG9yIGFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHJlamVjdGlvbiByZWFzb24uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdhcyBhbHJlYWR5IHJlc29sdmVkIGFzIHJlamVjdGVkIHdpdGggdGhlIGByZWFzb25gLlxuICAgKi9cbiAgdmFyIHJlamVjdCA9IGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIHZhciByZXN1bHQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICByZXN1bHQucmVqZWN0KHJlYXNvbik7XG4gICAgcmV0dXJuIHJlc3VsdC5wcm9taXNlO1xuICB9O1xuXG4gIHZhciBtYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIG1ha2VQcm9taXNlKHZhbHVlLCByZXNvbHZlZCkge1xuICAgIHZhciByZXN1bHQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgIHJlc3VsdC5yZXNvbHZlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnJlamVjdCh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQucHJvbWlzZTtcbiAgfTtcblxuICB2YXIgaGFuZGxlQ2FsbGJhY2sgPSBmdW5jdGlvbiBoYW5kbGVDYWxsYmFjayh2YWx1ZSwgaXNSZXNvbHZlZCwgY2FsbGJhY2spIHtcbiAgICB2YXIgY2FsbGJhY2tPdXRwdXQgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihjYWxsYmFjaykpIGNhbGxiYWNrT3V0cHV0ID0gY2FsbGJhY2soKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbWFrZVByb21pc2UoZSwgZmFsc2UpO1xuICAgIH1cbiAgICBpZiAoaXNQcm9taXNlTGlrZShjYWxsYmFja091dHB1dCkpIHtcbiAgICAgIHJldHVybiBjYWxsYmFja091dHB1dC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbWFrZVByb21pc2UodmFsdWUsIGlzUmVzb2x2ZWQpO1xuICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VQcm9taXNlKGVycm9yLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1ha2VQcm9taXNlKHZhbHVlLCBpc1Jlc29sdmVkKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHEjd2hlblxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogV3JhcHMgYW4gb2JqZWN0IHRoYXQgbWlnaHQgYmUgYSB2YWx1ZSBvciBhICgzcmQgcGFydHkpIHRoZW4tYWJsZSBwcm9taXNlIGludG8gYSAkcSBwcm9taXNlLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSBhcmUgZGVhbGluZyB3aXRoIGFuIG9iamVjdCB0aGF0IG1pZ2h0IG9yIG1pZ2h0IG5vdCBiZSBhIHByb21pc2UsIG9yIGlmXG4gICAqIHRoZSBwcm9taXNlIGNvbWVzIGZyb20gYSBzb3VyY2UgdGhhdCBjYW4ndCBiZSB0cnVzdGVkLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIG9yIGEgcHJvbWlzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gc3VjY2Vzc0NhbGxiYWNrXG4gICAqIEBwYXJhbSB7RnVuY3Rpb249fSBlcnJvckNhbGxiYWNrXG4gICAqIEBwYXJhbSB7RnVuY3Rpb249fSBwcm9ncmVzc0NhbGxiYWNrXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXR1cm5zIGEgcHJvbWlzZSBvZiB0aGUgcGFzc2VkIHZhbHVlIG9yIHByb21pc2VcbiAgICovXG5cblxuICB2YXIgd2hlbiA9IGZ1bmN0aW9uKHZhbHVlLCBjYWxsYmFjaywgZXJyYmFjaywgcHJvZ3Jlc3NCYWNrKSB7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIHJlc3VsdC5yZXNvbHZlKHZhbHVlKTtcbiAgICByZXR1cm4gcmVzdWx0LnByb21pc2UudGhlbihjYWxsYmFjaywgZXJyYmFjaywgcHJvZ3Jlc3NCYWNrKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcSNyZXNvbHZlXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBbGlhcyBvZiB7QGxpbmsgbmcuJHEjd2hlbiB3aGVufSB0byBtYWludGFpbiBuYW1pbmcgY29uc2lzdGVuY3kgd2l0aCBFUzYuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgb3IgYSBwcm9taXNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb249fSBzdWNjZXNzQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVycm9yQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHByb2dyZXNzQ2FsbGJhY2tcbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIG9mIHRoZSBwYXNzZWQgdmFsdWUgb3IgcHJvbWlzZVxuICAgKi9cbiAgdmFyIHJlc29sdmUgPSB3aGVuO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI2FsbFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ29tYmluZXMgbXVsdGlwbGUgcHJvbWlzZXMgaW50byBhIHNpbmdsZSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiBhbGwgb2YgdGhlIGlucHV0XG4gICAqIHByb21pc2VzIGFyZSByZXNvbHZlZC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheS48UHJvbWlzZT58T2JqZWN0LjxQcm9taXNlPn0gcHJvbWlzZXMgQW4gYXJyYXkgb3IgaGFzaCBvZiBwcm9taXNlcy5cbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBzaW5nbGUgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBhbiBhcnJheS9oYXNoIG9mIHZhbHVlcyxcbiAgICogICBlYWNoIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb21pc2UgYXQgdGhlIHNhbWUgaW5kZXgva2V5IGluIHRoZSBgcHJvbWlzZXNgIGFycmF5L2hhc2guXG4gICAqICAgSWYgYW55IG9mIHRoZSBwcm9taXNlcyBpcyByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLCB0aGlzIHJlc3VsdGluZyBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWRcbiAgICogICB3aXRoIHRoZSBzYW1lIHJlamVjdGlvbiB2YWx1ZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gICAgdmFyIGRlZmVycmVkID0gbmV3IERlZmVycmVkKCksXG4gICAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgICByZXN1bHRzID0gaXNBcnJheShwcm9taXNlcykgPyBbXSA6IHt9O1xuXG4gICAgZm9yRWFjaChwcm9taXNlcywgZnVuY3Rpb24ocHJvbWlzZSwga2V5KSB7XG4gICAgICBjb3VudGVyKys7XG4gICAgICB3aGVuKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHJlc3VsdHMuaGFzT3duUHJvcGVydHkoa2V5KSkgcmV0dXJuO1xuICAgICAgICByZXN1bHRzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKCEoLS1jb3VudGVyKSkgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICBpZiAocmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSByZXR1cm47XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpZiAoY291bnRlciA9PT0gMCkge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIHZhciAkUSA9IGZ1bmN0aW9uIFEocmVzb2x2ZXIpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24ocmVzb2x2ZXIpKSB7XG4gICAgICB0aHJvdyAkcU1pbkVycignbm9yc2x2cicsIFwiRXhwZWN0ZWQgcmVzb2x2ZXJGbiwgZ290ICd7MH0nXCIsIHJlc29sdmVyKTtcbiAgICB9XG5cbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUSkpIHtcbiAgICAgIC8vIE1vcmUgdXNlZnVsIHdoZW4gJFEgaXMgdGhlIFByb21pc2UgaXRzZWxmLlxuICAgICAgcmV0dXJuIG5ldyBRKHJlc29sdmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcblxuICAgIGZ1bmN0aW9uIHJlc29sdmVGbih2YWx1ZSkge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVqZWN0Rm4ocmVhc29uKSB7XG4gICAgICBkZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICB9XG5cbiAgICByZXNvbHZlcihyZXNvbHZlRm4sIHJlamVjdEZuKTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9O1xuXG4gICRRLmRlZmVyID0gZGVmZXI7XG4gICRRLnJlamVjdCA9IHJlamVjdDtcbiAgJFEud2hlbiA9IHdoZW47XG4gICRRLnJlc29sdmUgPSByZXNvbHZlO1xuICAkUS5hbGwgPSBhbGw7XG5cbiAgcmV0dXJuICRRO1xufVxuXG5mdW5jdGlvbiAkJFJBRlByb3ZpZGVyKCkgeyAvL3JBRlxuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkd2luZG93LCAkdGltZW91dCkge1xuICAgIHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZTtcblxuICAgIHZhciBjYW5jZWxBbmltYXRpb25GcmFtZSA9ICR3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbiAgICB2YXIgcmFmU3VwcG9ydGVkID0gISFyZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgdmFyIHJhZiA9IHJhZlN1cHBvcnRlZFxuICAgICAgPyBmdW5jdGlvbihmbikge1xuICAgICAgICAgIHZhciBpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIDogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICB2YXIgdGltZXIgPSAkdGltZW91dChmbiwgMTYuNjYsIGZhbHNlKTsgLy8gMTAwMCAvIDYwID0gMTYuNjY2XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRpbWVyKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgcmFmLnN1cHBvcnRlZCA9IHJhZlN1cHBvcnRlZDtcblxuICAgIHJldHVybiByYWY7XG4gIH1dO1xufVxuXG4vKipcbiAqIERFU0lHTiBOT1RFU1xuICpcbiAqIFRoZSBkZXNpZ24gZGVjaXNpb25zIGJlaGluZCB0aGUgc2NvcGUgYXJlIGhlYXZpbHkgZmF2b3JlZCBmb3Igc3BlZWQgYW5kIG1lbW9yeSBjb25zdW1wdGlvbi5cbiAqXG4gKiBUaGUgdHlwaWNhbCB1c2Ugb2Ygc2NvcGUgaXMgdG8gd2F0Y2ggdGhlIGV4cHJlc3Npb25zLCB3aGljaCBtb3N0IG9mIHRoZSB0aW1lIHJldHVybiB0aGUgc2FtZVxuICogdmFsdWUgYXMgbGFzdCB0aW1lIHNvIHdlIG9wdGltaXplIHRoZSBvcGVyYXRpb24uXG4gKlxuICogQ2xvc3VyZXMgY29uc3RydWN0aW9uIGlzIGV4cGVuc2l2ZSBpbiB0ZXJtcyBvZiBzcGVlZCBhcyB3ZWxsIGFzIG1lbW9yeTpcbiAqICAgLSBObyBjbG9zdXJlcywgaW5zdGVhZCB1c2UgcHJvdG90eXBpY2FsIGluaGVyaXRhbmNlIGZvciBBUElcbiAqICAgLSBJbnRlcm5hbCBzdGF0ZSBuZWVkcyB0byBiZSBzdG9yZWQgb24gc2NvcGUgZGlyZWN0bHksIHdoaWNoIG1lYW5zIHRoYXQgcHJpdmF0ZSBzdGF0ZSBpc1xuICogICAgIGV4cG9zZWQgYXMgJCRfX19fIHByb3BlcnRpZXNcbiAqXG4gKiBMb29wIG9wZXJhdGlvbnMgYXJlIG9wdGltaXplZCBieSB1c2luZyB3aGlsZShjb3VudC0tKSB7IC4uLiB9XG4gKiAgIC0gVGhpcyBtZWFucyB0aGF0IGluIG9yZGVyIHRvIGtlZXAgdGhlIHNhbWUgb3JkZXIgb2YgZXhlY3V0aW9uIGFzIGFkZGl0aW9uIHdlIGhhdmUgdG8gYWRkXG4gKiAgICAgaXRlbXMgdG8gdGhlIGFycmF5IGF0IHRoZSBiZWdpbm5pbmcgKHVuc2hpZnQpIGluc3RlYWQgb2YgYXQgdGhlIGVuZCAocHVzaClcbiAqXG4gKiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgYW5kIHJlbW92ZWQgb2Z0ZW5cbiAqICAgLSBVc2luZyBhbiBhcnJheSB3b3VsZCBiZSBzbG93IHNpbmNlIGluc2VydHMgaW4gdGhlIG1pZGRsZSBhcmUgZXhwZW5zaXZlOyBzbyB3ZSB1c2UgbGlua2VkIGxpc3RzXG4gKlxuICogVGhlcmUgYXJlIGZld2VyIHdhdGNoZXMgdGhhbiBvYnNlcnZlcnMuIFRoaXMgaXMgd2h5IHlvdSBkb24ndCB3YW50IHRoZSBvYnNlcnZlciB0byBiZSBpbXBsZW1lbnRlZFxuICogaW4gdGhlIHNhbWUgd2F5IGFzIHdhdGNoLiBXYXRjaCByZXF1aXJlcyByZXR1cm4gb2YgdGhlIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIHdoaWNoIGlzIGV4cGVuc2l2ZVxuICogdG8gY29uc3RydWN0LlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRyb290U2NvcGVQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUHJvdmlkZXIgZm9yIHRoZSAkcm9vdFNjb3BlIHNlcnZpY2UuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcm9vdFNjb3BlUHJvdmlkZXIjZGlnZXN0VHRsXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXRzIHRoZSBudW1iZXIgb2YgYCRkaWdlc3RgIGl0ZXJhdGlvbnMgdGhlIHNjb3BlIHNob3VsZCBhdHRlbXB0IHRvIGV4ZWN1dGUgYmVmb3JlIGdpdmluZyB1cCBhbmRcbiAqIGFzc3VtaW5nIHRoYXQgdGhlIG1vZGVsIGlzIHVuc3RhYmxlLlxuICpcbiAqIFRoZSBjdXJyZW50IGRlZmF1bHQgaXMgMTAgaXRlcmF0aW9ucy5cbiAqXG4gKiBJbiBjb21wbGV4IGFwcGxpY2F0aW9ucyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIGRlcGVuZGVuY2llcyBiZXR3ZWVuIGAkd2F0Y2hgcyB3aWxsIHJlc3VsdCBpblxuICogc2V2ZXJhbCBkaWdlc3QgaXRlcmF0aW9ucy4gSG93ZXZlciBpZiBhbiBhcHBsaWNhdGlvbiBuZWVkcyBtb3JlIHRoYW4gdGhlIGRlZmF1bHQgMTAgZGlnZXN0XG4gKiBpdGVyYXRpb25zIGZvciBpdHMgbW9kZWwgdG8gc3RhYmlsaXplIHRoZW4geW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB3aGF0IGlzIGNhdXNpbmcgdGhlIG1vZGVsIHRvXG4gKiBjb250aW51b3VzbHkgY2hhbmdlIGR1cmluZyB0aGUgZGlnZXN0LlxuICpcbiAqIEluY3JlYXNpbmcgdGhlIFRUTCBjb3VsZCBoYXZlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucywgc28geW91IHNob3VsZCBub3QgY2hhbmdlIGl0IHdpdGhvdXRcbiAqIHByb3BlciBqdXN0aWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbnVtYmVyIG9mIGRpZ2VzdCBpdGVyYXRpb25zLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHJvb3RTY29wZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXZlcnkgYXBwbGljYXRpb24gaGFzIGEgc2luZ2xlIHJvb3Qge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LlxuICogQWxsIG90aGVyIHNjb3BlcyBhcmUgZGVzY2VuZGFudCBzY29wZXMgb2YgdGhlIHJvb3Qgc2NvcGUuIFNjb3BlcyBwcm92aWRlIHNlcGFyYXRpb25cbiAqIGJldHdlZW4gdGhlIG1vZGVsIGFuZCB0aGUgdmlldywgdmlhIGEgbWVjaGFuaXNtIGZvciB3YXRjaGluZyB0aGUgbW9kZWwgZm9yIGNoYW5nZXMuXG4gKiBUaGV5IGFsc28gcHJvdmlkZSBldmVudCBlbWlzc2lvbi9icm9hZGNhc3QgYW5kIHN1YnNjcmlwdGlvbiBmYWNpbGl0eS4gU2VlIHRoZVxuICoge0BsaW5rIGd1aWRlL3Njb3BlIGRldmVsb3BlciBndWlkZSBvbiBzY29wZXN9LlxuICovXG5mdW5jdGlvbiAkUm9vdFNjb3BlUHJvdmlkZXIoKSB7XG4gIHZhciBUVEwgPSAxMDtcbiAgdmFyICRyb290U2NvcGVNaW5FcnIgPSBtaW5FcnIoJyRyb290U2NvcGUnKTtcbiAgdmFyIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcbiAgdmFyIGFwcGx5QXN5bmNJZCA9IG51bGw7XG5cbiAgdGhpcy5kaWdlc3RUdGwgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBUVEwgPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIFRUTDtcbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZFNjb3BlQ2xhc3MocGFyZW50KSB7XG4gICAgZnVuY3Rpb24gQ2hpbGRTY29wZSgpIHtcbiAgICAgIHRoaXMuJCR3YXRjaGVycyA9IHRoaXMuJCRuZXh0U2libGluZyA9XG4gICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsO1xuICAgICAgdGhpcy4kJGxpc3RlbmVycyA9IHt9O1xuICAgICAgdGhpcy4kJGxpc3RlbmVyQ291bnQgPSB7fTtcbiAgICAgIHRoaXMuJCR3YXRjaGVyc0NvdW50ID0gMDtcbiAgICAgIHRoaXMuJGlkID0gbmV4dFVpZCgpO1xuICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBudWxsO1xuICAgIH1cbiAgICBDaGlsZFNjb3BlLnByb3RvdHlwZSA9IHBhcmVudDtcbiAgICByZXR1cm4gQ2hpbGRTY29wZTtcbiAgfVxuXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyRwYXJzZScsICckYnJvd3NlcicsXG4gICAgICBmdW5jdGlvbigkaW5qZWN0b3IsICRleGNlcHRpb25IYW5kbGVyLCAkcGFyc2UsICRicm93c2VyKSB7XG5cbiAgICBmdW5jdGlvbiBkZXN0cm95Q2hpbGRTY29wZSgkZXZlbnQpIHtcbiAgICAgICAgJGV2ZW50LmN1cnJlbnRTY29wZS4kJGRlc3Ryb3llZCA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW5VcFNjb3BlKCRzY29wZSkge1xuXG4gICAgICBpZiAobXNpZSA9PT0gOSkge1xuICAgICAgICAvLyBUaGVyZSBpcyBhIG1lbW9yeSBsZWFrIGluIElFOSBpZiBhbGwgY2hpbGQgc2NvcGVzIGFyZSBub3QgZGlzY29ubmVjdGVkXG4gICAgICAgIC8vIGNvbXBsZXRlbHkgd2hlbiBhIHNjb3BlIGlzIGRlc3Ryb3llZC4gU28gdGhpcyBjb2RlIHdpbGwgcmVjdXJzZSB1cCB0aHJvdWdoXG4gICAgICAgIC8vIGFsbCB0aGlzIHNjb3BlcyBjaGlsZHJlblxuICAgICAgICAvL1xuICAgICAgICAvLyBTZWUgaXNzdWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTA3MDZcbiAgICAgICAgJHNjb3BlLiQkY2hpbGRIZWFkICYmIGNsZWFuVXBTY29wZSgkc2NvcGUuJCRjaGlsZEhlYWQpO1xuICAgICAgICAkc2NvcGUuJCRuZXh0U2libGluZyAmJiBjbGVhblVwU2NvcGUoJHNjb3BlLiQkbmV4dFNpYmxpbmcpO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29kZSBiZWxvdyB3b3JrcyBhcm91bmQgSUU5IGFuZCBWOCdzIG1lbW9yeSBsZWFrc1xuICAgICAgLy9cbiAgICAgIC8vIFNlZTpcbiAgICAgIC8vIC0gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzMjYzI2XG4gICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzY3OTQjaXNzdWVjb21tZW50LTM4NjQ4OTA5XG4gICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzEzMTMjaXNzdWVjb21tZW50LTEwMzc4NDUxXG5cbiAgICAgICRzY29wZS4kcGFyZW50ID0gJHNjb3BlLiQkbmV4dFNpYmxpbmcgPSAkc2NvcGUuJCRwcmV2U2libGluZyA9ICRzY29wZS4kJGNoaWxkSGVhZCA9XG4gICAgICAgICAgJHNjb3BlLiQkY2hpbGRUYWlsID0gJHNjb3BlLiRyb290ID0gJHNjb3BlLiQkd2F0Y2hlcnMgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSByb290IHNjb3BlIGNhbiBiZSByZXRyaWV2ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlICRyb290U2NvcGV9IGtleSBmcm9tIHRoZVxuICAgICAqIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgdXNpbmcgdGhlXG4gICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG5ldyAkbmV3KCl9IG1ldGhvZC4gKE1vc3Qgc2NvcGVzIGFyZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgd2hlblxuICAgICAqIGNvbXBpbGVkIEhUTUwgdGVtcGxhdGUgaXMgZXhlY3V0ZWQuKSBTZWUgYWxzbyB0aGUge0BsaW5rIGd1aWRlL3Njb3BlIFNjb3BlcyBndWlkZX0gZm9yXG4gICAgICogYW4gaW4tZGVwdGggaW50cm9kdWN0aW9uIGFuZCB1c2FnZSBleGFtcGxlcy5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyBJbmhlcml0YW5jZVxuICAgICAqIEEgc2NvcGUgY2FuIGluaGVyaXQgZnJvbSBhIHBhcmVudCBzY29wZSwgYXMgaW4gdGhpcyBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICAgICB2YXIgcGFyZW50ID0gJHJvb3RTY29wZTtcbiAgICAgICAgIHZhciBjaGlsZCA9IHBhcmVudC4kbmV3KCk7XG5cbiAgICAgICAgIHBhcmVudC5zYWx1dGF0aW9uID0gXCJIZWxsb1wiO1xuICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ0hlbGxvJyk7XG5cbiAgICAgICAgIGNoaWxkLnNhbHV0YXRpb24gPSBcIldlbGNvbWVcIjtcbiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdXZWxjb21lJyk7XG4gICAgICAgICBleHBlY3QocGFyZW50LnNhbHV0YXRpb24pLnRvRXF1YWwoJ0hlbGxvJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBXaGVuIGludGVyYWN0aW5nIHdpdGggYFNjb3BlYCBpbiB0ZXN0cywgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kcyBhcmUgYXZhaWxhYmxlIG9uIHRoZVxuICAgICAqIGluc3RhbmNlcyBvZiBgU2NvcGVgIHR5cGUuIFNlZSB7QGxpbmsgbmdNb2NrLiRyb290U2NvcGUuU2NvcGUgbmdNb2NrIFNjb3BlfSBmb3IgYWRkaXRpb25hbFxuICAgICAqIGRldGFpbHMuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uKCk+PX0gcHJvdmlkZXJzIE1hcCBvZiBzZXJ2aWNlIGZhY3Rvcnkgd2hpY2ggbmVlZCB0byBiZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgZm9yIHRoZSBjdXJyZW50IHNjb3BlLiBEZWZhdWx0cyB0byB7QGxpbmsgbmd9LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsICo+PX0gaW5zdGFuY2VDYWNoZSBQcm92aWRlcyBwcmUtaW5zdGFudGlhdGVkIHNlcnZpY2VzIHdoaWNoIHNob3VsZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kL292ZXJyaWRlIHNlcnZpY2VzIHByb3ZpZGVkIGJ5IGBwcm92aWRlcnNgLiBUaGlzIGlzIGhhbmR5XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHVuaXQtdGVzdGluZyBhbmQgaGF2aW5nIHRoZSBuZWVkIHRvIG92ZXJyaWRlIGEgZGVmYXVsdFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBOZXdseSBjcmVhdGVkIHNjb3BlLlxuICAgICAqXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2NvcGUoKSB7XG4gICAgICB0aGlzLiRpZCA9IG5leHRVaWQoKTtcbiAgICAgIHRoaXMuJCRwaGFzZSA9IHRoaXMuJHBhcmVudCA9IHRoaXMuJCR3YXRjaGVycyA9XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPVxuICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsO1xuICAgICAgdGhpcy4kcm9vdCA9IHRoaXM7XG4gICAgICB0aGlzLiQkZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XG4gICAgICB0aGlzLiQkbGlzdGVuZXJDb3VudCA9IHt9O1xuICAgICAgdGhpcy4kJHdhdGNoZXJzQ291bnQgPSAwO1xuICAgICAgdGhpcy4kJGlzb2xhdGVCaW5kaW5ncyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkaWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFVuaXF1ZSBzY29wZSBJRCAobW9ub3RvbmljYWxseSBpbmNyZWFzaW5nKSB1c2VmdWwgZm9yIGRlYnVnZ2luZy5cbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHBhcmVudFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogUmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgc2NvcGUuXG4gICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkcm9vdFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVmZXJlbmNlIHRvIHRoZSByb290IHNjb3BlLlxuICAgICAgICovXG5cbiAgICBTY29wZS5wcm90b3R5cGUgPSB7XG4gICAgICBjb25zdHJ1Y3RvcjogU2NvcGUsXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJG5ld1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIENyZWF0ZXMgYSBuZXcgY2hpbGQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LlxuICAgICAgICpcbiAgICAgICAqIFRoZSBwYXJlbnQgc2NvcGUgd2lsbCBwcm9wYWdhdGUgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSBldmVudC5cbiAgICAgICAqIFRoZSBzY29wZSBjYW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBzY29wZSBoaWVyYXJjaHkgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0uXG4gICAgICAgKlxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0gbXVzdCBiZSBjYWxsZWQgb24gYSBzY29wZSB3aGVuIGl0IGlzXG4gICAgICAgKiBkZXNpcmVkIGZvciB0aGUgc2NvcGUgYW5kIGl0cyBjaGlsZCBzY29wZXMgdG8gYmUgcGVybWFuZW50bHkgZGV0YWNoZWQgZnJvbSB0aGUgcGFyZW50IGFuZFxuICAgICAgICogdGh1cyBzdG9wIHBhcnRpY2lwYXRpbmcgaW4gbW9kZWwgY2hhbmdlIGRldGVjdGlvbiBhbmQgbGlzdGVuZXIgbm90aWZpY2F0aW9uIGJ5IGludm9raW5nLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNvbGF0ZSBJZiB0cnVlLCB0aGVuIHRoZSBzY29wZSBkb2VzIG5vdCBwcm90b3R5cGljYWxseSBpbmhlcml0IGZyb20gdGhlXG4gICAgICAgKiAgICAgICAgIHBhcmVudCBzY29wZS4gVGhlIHNjb3BlIGlzIGlzb2xhdGVkLCBhcyBpdCBjYW4gbm90IHNlZSBwYXJlbnQgc2NvcGUgcHJvcGVydGllcy5cbiAgICAgICAqICAgICAgICAgV2hlbiBjcmVhdGluZyB3aWRnZXRzLCBpdCBpcyB1c2VmdWwgZm9yIHRoZSB3aWRnZXQgdG8gbm90IGFjY2lkZW50YWxseSByZWFkIHBhcmVudFxuICAgICAgICogICAgICAgICBzdGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1Njb3BlfSBbcGFyZW50PXRoaXNdIFRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBgU2NvcGVgfSB0aGF0IHdpbGwgYmUgdGhlIGAkcGFyZW50YFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbmV3bHkgY3JlYXRlZCBzY29wZS4gRGVmYXVsdHMgdG8gYHRoaXNgIHNjb3BlIGlmIG5vdCBwcm92aWRlZC5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgYSB0cmFuc2NsdWRlIHNjb3BlIHRvIGNvcnJlY3RseSBwbGFjZSBpdFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2NvcGUgaGllcmFyY2h5IHdoaWxlIG1haW50YWluaW5nIHRoZSBjb3JyZWN0IHByb3RvdHlwaWNhbFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0YW5jZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgbmV3bHkgY3JlYXRlZCBjaGlsZCBzY29wZS5cbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgICRuZXc6IGZ1bmN0aW9uKGlzb2xhdGUsIHBhcmVudCkge1xuICAgICAgICB2YXIgY2hpbGQ7XG5cbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IHRoaXM7XG5cbiAgICAgICAgaWYgKGlzb2xhdGUpIHtcbiAgICAgICAgICBjaGlsZCA9IG5ldyBTY29wZSgpO1xuICAgICAgICAgIGNoaWxkLiRyb290ID0gdGhpcy4kcm9vdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPbmx5IGNyZWF0ZSBhIGNoaWxkIHNjb3BlIGNsYXNzIGlmIHNvbWVib2R5IGFza3MgZm9yIG9uZSxcbiAgICAgICAgICAvLyBidXQgY2FjaGUgaXQgdG8gYWxsb3cgdGhlIFZNIHRvIG9wdGltaXplIGxvb2t1cHMuXG4gICAgICAgICAgaWYgKCF0aGlzLiQkQ2hpbGRTY29wZSkge1xuICAgICAgICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBjcmVhdGVDaGlsZFNjb3BlQ2xhc3ModGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkID0gbmV3IHRoaXMuJCRDaGlsZFNjb3BlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQuJHBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgY2hpbGQuJCRwcmV2U2libGluZyA9IHBhcmVudC4kJGNoaWxkVGFpbDtcbiAgICAgICAgaWYgKHBhcmVudC4kJGNoaWxkSGVhZCkge1xuICAgICAgICAgIHBhcmVudC4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nID0gY2hpbGQ7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRIZWFkID0gcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIHRoZSBuZXcgc2NvcGUgaXMgbm90IGlzb2xhdGVkIG9yIHdlIGluaGVyaXQgZnJvbSBgdGhpc2AsIGFuZFxuICAgICAgICAvLyB0aGUgcGFyZW50IHNjb3BlIGlzIGRlc3Ryb3llZCwgdGhlIHByb3BlcnR5IGAkJGRlc3Ryb3llZGAgaXMgaW5oZXJpdGVkXG4gICAgICAgIC8vIHByb3RvdHlwaWNhbGx5LiBJbiBhbGwgb3RoZXIgY2FzZXMsIHRoaXMgcHJvcGVydHkgbmVlZHMgdG8gYmUgc2V0XG4gICAgICAgIC8vIHdoZW4gdGhlIHBhcmVudCBzY29wZSBpcyBkZXN0cm95ZWQuXG4gICAgICAgIC8vIFRoZSBsaXN0ZW5lciBuZWVkcyB0byBiZSBhZGRlZCBhZnRlciB0aGUgcGFyZW50IGlzIHNldFxuICAgICAgICBpZiAoaXNvbGF0ZSB8fCBwYXJlbnQgIT0gdGhpcykgY2hpbGQuJG9uKCckZGVzdHJveScsIGRlc3Ryb3lDaGlsZFNjb3BlKTtcblxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVnaXN0ZXJzIGEgYGxpc3RlbmVyYCBjYWxsYmFjayB0byBiZSBleGVjdXRlZCB3aGVuZXZlciB0aGUgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiAtIFRoZSBgd2F0Y2hFeHByZXNzaW9uYCBpcyBjYWxsZWQgb24gZXZlcnkgY2FsbCB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0XG4gICAgICAgKiAgICRkaWdlc3QoKX0gYW5kIHNob3VsZCByZXR1cm4gdGhlIHZhbHVlIHRoYXQgd2lsbCBiZSB3YXRjaGVkLiAoYHdhdGNoRXhwcmVzc2lvbmAgc2hvdWxkIG5vdCBjaGFuZ2VcbiAgICAgICAqICAgaXRzIHZhbHVlIHdoZW4gZXhlY3V0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCB0aGUgc2FtZSBpbnB1dCBiZWNhdXNlIGl0IG1heSBiZSBleGVjdXRlZCBtdWx0aXBsZVxuICAgICAgICogICB0aW1lcyBieSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0uIFRoYXQgaXMsIGB3YXRjaEV4cHJlc3Npb25gIHNob3VsZCBiZVxuICAgICAgICogICBbaWRlbXBvdGVudF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JZGVtcG90ZW5jZSkuXG4gICAgICAgKiAtIFRoZSBgbGlzdGVuZXJgIGlzIGNhbGxlZCBvbmx5IHdoZW4gdGhlIHZhbHVlIGZyb20gdGhlIGN1cnJlbnQgYHdhdGNoRXhwcmVzc2lvbmAgYW5kIHRoZVxuICAgICAgICogICBwcmV2aW91cyBjYWxsIHRvIGB3YXRjaEV4cHJlc3Npb25gIGFyZSBub3QgZXF1YWwgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUgaW5pdGlhbCBydW4sXG4gICAgICAgKiAgIHNlZSBiZWxvdykuIEluZXF1YWxpdHkgaXMgZGV0ZXJtaW5lZCBhY2NvcmRpbmcgdG8gcmVmZXJlbmNlIGluZXF1YWxpdHksXG4gICAgICAgKiAgIFtzdHJpY3QgY29tcGFyaXNvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL0NvbXBhcmlzb25fT3BlcmF0b3JzKVxuICAgICAgICogICAgdmlhIHRoZSBgIT09YCBKYXZhc2NyaXB0IG9wZXJhdG9yLCB1bmxlc3MgYG9iamVjdEVxdWFsaXR5ID09IHRydWVgXG4gICAgICAgKiAgIChzZWUgbmV4dCBwb2ludClcbiAgICAgICAqIC0gV2hlbiBgb2JqZWN0RXF1YWxpdHkgPT0gdHJ1ZWAsIGluZXF1YWxpdHkgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gIGlzIGRldGVybWluZWRcbiAgICAgICAqICAgYWNjb3JkaW5nIHRvIHRoZSB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGZ1bmN0aW9uLiBUbyBzYXZlIHRoZSB2YWx1ZSBvZiB0aGUgb2JqZWN0IGZvclxuICAgICAgICogICBsYXRlciBjb21wYXJpc29uLCB0aGUge0BsaW5rIGFuZ3VsYXIuY29weX0gZnVuY3Rpb24gaXMgdXNlZC4gVGhpcyB0aGVyZWZvcmUgbWVhbnMgdGhhdFxuICAgICAgICogICB3YXRjaGluZyBjb21wbGV4IG9iamVjdHMgd2lsbCBoYXZlIGFkdmVyc2UgbWVtb3J5IGFuZCBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMuXG4gICAgICAgKiAtIFRoZSB3YXRjaCBgbGlzdGVuZXJgIG1heSBjaGFuZ2UgdGhlIG1vZGVsLCB3aGljaCBtYXkgdHJpZ2dlciBvdGhlciBgbGlzdGVuZXJgcyB0byBmaXJlLlxuICAgICAgICogICBUaGlzIGlzIGFjaGlldmVkIGJ5IHJlcnVubmluZyB0aGUgd2F0Y2hlcnMgdW50aWwgbm8gY2hhbmdlcyBhcmUgZGV0ZWN0ZWQuIFRoZSByZXJ1blxuICAgICAgICogICBpdGVyYXRpb24gbGltaXQgaXMgMTAgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wIGRlYWRsb2NrLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBJZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuZXZlciB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGlzIGNhbGxlZCxcbiAgICAgICAqIHlvdSBjYW4gcmVnaXN0ZXIgYSBgd2F0Y2hFeHByZXNzaW9uYCBmdW5jdGlvbiB3aXRoIG5vIGBsaXN0ZW5lcmAuIChCZSBwcmVwYXJlZCBmb3JcbiAgICAgICAqIG11bHRpcGxlIGNhbGxzIHRvIHlvdXIgYHdhdGNoRXhwcmVzc2lvbmAgYmVjYXVzZSBpdCB3aWxsIGV4ZWN1dGUgbXVsdGlwbGUgdGltZXMgaW4gYVxuICAgICAgICogc2luZ2xlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUgaWYgYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQuKVxuICAgICAgICpcbiAgICAgICAqIEFmdGVyIGEgd2F0Y2hlciBpcyByZWdpc3RlcmVkIHdpdGggdGhlIHNjb3BlLCB0aGUgYGxpc3RlbmVyYCBmbiBpcyBjYWxsZWQgYXN5bmNocm9ub3VzbHlcbiAgICAgICAqICh2aWEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGV2YWxBc3luYyAkZXZhbEFzeW5jfSkgdG8gaW5pdGlhbGl6ZSB0aGVcbiAgICAgICAqIHdhdGNoZXIuIEluIHJhcmUgY2FzZXMsIHRoaXMgaXMgdW5kZXNpcmFibGUgYmVjYXVzZSB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkIHdoZW4gdGhlIHJlc3VsdFxuICAgICAgICogb2YgYHdhdGNoRXhwcmVzc2lvbmAgZGlkbid0IGNoYW5nZS4gVG8gZGV0ZWN0IHRoaXMgc2NlbmFyaW8gd2l0aGluIHRoZSBgbGlzdGVuZXJgIGZuLCB5b3VcbiAgICAgICAqIGNhbiBjb21wYXJlIHRoZSBgbmV3VmFsYCBhbmQgYG9sZFZhbGAuIElmIHRoZXNlIHR3byB2YWx1ZXMgYXJlIGlkZW50aWNhbCAoYD09PWApIHRoZW4gdGhlXG4gICAgICAgKiBsaXN0ZW5lciB3YXMgY2FsbGVkIGR1ZSB0byBpbml0aWFsaXphdGlvbi5cbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICMgRXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAgICAgLy8gbGV0J3MgYXNzdW1lIHRoYXQgc2NvcGUgd2FzIGRlcGVuZGVuY3kgaW5qZWN0ZWQgYXMgdGhlICRyb290U2NvcGVcbiAgICAgICAgICAgdmFyIHNjb3BlID0gJHJvb3RTY29wZTtcbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdtaXNrbyc7XG4gICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xuXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuICAgICAgICAgICBzY29wZS4kd2F0Y2goJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICBzY29wZS5jb3VudGVyID0gc2NvcGUuY291bnRlciArIDE7XG4gICAgICAgICAgIH0pO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcblxuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIC8vIHRoZSBsaXN0ZW5lciBpcyBhbHdheXMgY2FsbGVkIGR1cmluZyB0aGUgZmlyc3QgJGRpZ2VzdCBsb29wIGFmdGVyIGl0IHdhcyByZWdpc3RlcmVkXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gYnV0IG5vdyBpdCB3aWxsIG5vdCBiZSBjYWxsZWQgdW5sZXNzIHRoZSB2YWx1ZSBjaGFuZ2VzXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnYWRhbSc7XG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMik7XG5cblxuXG4gICAgICAgICAgIC8vIFVzaW5nIGEgZnVuY3Rpb24gYXMgYSB3YXRjaEV4cHJlc3Npb25cbiAgICAgICAgICAgdmFyIGZvb2Q7XG4gICAgICAgICAgIHNjb3BlLmZvb2RDb3VudGVyID0gMDtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApO1xuICAgICAgICAgICBzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB2YWx1ZSBiZWluZyB3YXRjaGVkLiBJdCBpcyBjYWxsZWQgZm9yIGVhY2ggdHVybiBvZiB0aGUgJGRpZ2VzdCBsb29wXG4gICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBmb29kOyB9LFxuICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGNoYW5nZSBsaXN0ZW5lciwgY2FsbGVkIHdoZW4gdGhlIHZhbHVlIHJldHVybmVkIGZyb20gdGhlIGFib3ZlIGZ1bmN0aW9uIGNoYW5nZXNcbiAgICAgICAgICAgICBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgIGlmICggbmV3VmFsdWUgIT09IG9sZFZhbHVlICkge1xuICAgICAgICAgICAgICAgICAvLyBPbmx5IGluY3JlbWVudCB0aGUgY291bnRlciBpZiB0aGUgdmFsdWUgY2hhbmdlZFxuICAgICAgICAgICAgICAgICBzY29wZS5mb29kQ291bnRlciA9IHNjb3BlLmZvb2RDb3VudGVyICsgMTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICk7XG4gICAgICAgICAgIC8vIE5vIGRpZ2VzdCBoYXMgYmVlbiBydW4gc28gdGhlIGNvdW50ZXIgd2lsbCBiZSB6ZXJvXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgwKTtcblxuICAgICAgICAgICAvLyBSdW4gdGhlIGRpZ2VzdCBidXQgc2luY2UgZm9vZCBoYXMgbm90IGNoYW5nZWQgY291bnQgd2lsbCBzdGlsbCBiZSB6ZXJvXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIC8vIFVwZGF0ZSBmb29kIGFuZCBydW4gZGlnZXN0LiAgTm93IHRoZSBjb3VudGVyIHdpbGwgaW5jcmVtZW50XG4gICAgICAgICAgIGZvb2QgPSAnY2hlZXNlYnVyZ2VyJztcbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoZnVuY3Rpb24oKXxzdHJpbmcpfSB3YXRjaEV4cHJlc3Npb24gRXhwcmVzc2lvbiB0aGF0IGlzIGV2YWx1YXRlZCBvbiBlYWNoXG4gICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGN5Y2xlLiBBIGNoYW5nZSBpbiB0aGUgcmV0dXJuIHZhbHVlIHRyaWdnZXJzXG4gICAgICAgKiAgICBhIGNhbGwgdG8gdGhlIGBsaXN0ZW5lcmAuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogRXZhbHVhdGVkIGFzIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259XG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBjYWxsZWQgd2l0aCBjdXJyZW50IGBzY29wZWAgYXMgYSBwYXJhbWV0ZXIuXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld1ZhbCwgb2xkVmFsLCBzY29wZSl9IGxpc3RlbmVyIENhbGxiYWNrIGNhbGxlZCB3aGVuZXZlciB0aGUgdmFsdWVcbiAgICAgICAqICAgIG9mIGB3YXRjaEV4cHJlc3Npb25gIGNoYW5nZXMuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgbmV3VmFsYCBjb250YWlucyB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmBcbiAgICAgICAqICAgIC0gYG9sZFZhbGAgY29udGFpbnMgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogICAgLSBgc2NvcGVgIHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZVxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gb2JqZWN0RXF1YWxpdHkgQ29tcGFyZSBmb3Igb2JqZWN0IGVxdWFsaXR5IHVzaW5nIHtAbGluayBhbmd1bGFyLmVxdWFsc30gaW5zdGVhZCBvZlxuICAgICAgICogICAgIGNvbXBhcmluZyBmb3IgcmVmZXJlbmNlIGVxdWFsaXR5LlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci5cbiAgICAgICAqL1xuICAgICAgJHdhdGNoOiBmdW5jdGlvbih3YXRjaEV4cCwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwcmV0dHlQcmludEV4cHJlc3Npb24pIHtcbiAgICAgICAgdmFyIGdldCA9ICRwYXJzZSh3YXRjaEV4cCk7XG5cbiAgICAgICAgaWYgKGdldC4kJHdhdGNoRGVsZWdhdGUpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0LiQkd2F0Y2hEZWxlZ2F0ZSh0aGlzLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIGdldCwgd2F0Y2hFeHApO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMsXG4gICAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMsXG4gICAgICAgICAgICB3YXRjaGVyID0ge1xuICAgICAgICAgICAgICBmbjogbGlzdGVuZXIsXG4gICAgICAgICAgICAgIGxhc3Q6IGluaXRXYXRjaFZhbCxcbiAgICAgICAgICAgICAgZ2V0OiBnZXQsXG4gICAgICAgICAgICAgIGV4cDogcHJldHR5UHJpbnRFeHByZXNzaW9uIHx8IHdhdGNoRXhwLFxuICAgICAgICAgICAgICBlcTogISFvYmplY3RFcXVhbGl0eVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG5cbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgIHdhdGNoZXIuZm4gPSBub29wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhcnJheSkge1xuICAgICAgICAgIGFycmF5ID0gc2NvcGUuJCR3YXRjaGVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIHVzZSB1bnNoaWZ0IHNpbmNlIHdlIHVzZSBhIHdoaWxlIGxvb3AgaW4gJGRpZ2VzdCBmb3Igc3BlZWQuXG4gICAgICAgIC8vIHRoZSB3aGlsZSBsb29wIHJlYWRzIGluIHJldmVyc2Ugb3JkZXIuXG4gICAgICAgIGFycmF5LnVuc2hpZnQod2F0Y2hlcik7XG4gICAgICAgIGluY3JlbWVudFdhdGNoZXJzQ291bnQodGhpcywgMSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaCgpIHtcbiAgICAgICAgICBpZiAoYXJyYXlSZW1vdmUoYXJyYXksIHdhdGNoZXIpID49IDApIHtcbiAgICAgICAgICAgIGluY3JlbWVudFdhdGNoZXJzQ291bnQoc2NvcGUsIC0xKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaEdyb3VwXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQSB2YXJpYW50IG9mIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCAkd2F0Y2goKX0gd2hlcmUgaXQgd2F0Y2hlcyBhbiBhcnJheSBvZiBgd2F0Y2hFeHByZXNzaW9uc2AuXG4gICAgICAgKiBJZiBhbnkgb25lIGV4cHJlc3Npb24gaW4gdGhlIGNvbGxlY3Rpb24gY2hhbmdlcyB0aGUgYGxpc3RlbmVyYCBpcyBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAtIFRoZSBpdGVtcyBpbiB0aGUgYHdhdGNoRXhwcmVzc2lvbnNgIGFycmF5IGFyZSBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgYXJlIGV4YW1pbmVkIG9uIGV2ZXJ5XG4gICAgICAgKiAgIGNhbGwgdG8gJGRpZ2VzdCgpIHRvIHNlZSBpZiBhbnkgaXRlbXMgY2hhbmdlcy5cbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueSBleHByZXNzaW9uIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8RnVuY3Rpb24oc2NvcGUpPn0gd2F0Y2hFeHByZXNzaW9ucyBBcnJheSBvZiBleHByZXNzaW9ucyB0aGF0IHdpbGwgYmUgaW5kaXZpZHVhbGx5XG4gICAgICAgKiB3YXRjaGVkIHVzaW5nIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCAkd2F0Y2goKX1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld1ZhbHVlcywgb2xkVmFsdWVzLCBzY29wZSl9IGxpc3RlbmVyIENhbGxiYWNrIGNhbGxlZCB3aGVuZXZlciB0aGUgcmV0dXJuIHZhbHVlIG9mIGFueVxuICAgICAgICogICAgZXhwcmVzc2lvbiBpbiBgd2F0Y2hFeHByZXNzaW9uc2AgY2hhbmdlc1xuICAgICAgICogICAgVGhlIGBuZXdWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBjdXJyZW50IHZhbHVlcyBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbnNgLCB3aXRoIHRoZSBpbmRleGVzIG1hdGNoaW5nXG4gICAgICAgKiAgICB0aG9zZSBvZiBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogICAgYW5kIHRoZSBgb2xkVmFsdWVzYCBhcnJheSBjb250YWlucyB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AsIHdpdGggdGhlIGluZGV4ZXMgbWF0Y2hpbmdcbiAgICAgICAqICAgIHRob3NlIG9mIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICBUaGUgYHNjb3BlYCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGUuXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgYWxsIGxpc3RlbmVycy5cbiAgICAgICAqL1xuICAgICAgJHdhdGNoR3JvdXA6IGZ1bmN0aW9uKHdhdGNoRXhwcmVzc2lvbnMsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZXMgPSBuZXcgQXJyYXkod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpO1xuICAgICAgICB2YXIgbmV3VmFsdWVzID0gbmV3IEFycmF5KHdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoKTtcbiAgICAgICAgdmFyIGRlcmVnaXN0ZXJGbnMgPSBbXTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGZpcnN0UnVuID0gdHJ1ZTtcblxuICAgICAgICBpZiAoIXdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gTm8gZXhwcmVzc2lvbnMgbWVhbnMgd2UgY2FsbCB0aGUgbGlzdGVuZXIgQVNBUFxuICAgICAgICAgIHZhciBzaG91bGRDYWxsID0gdHJ1ZTtcbiAgICAgICAgICBzZWxmLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQ2FsbCkgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2hHcm91cCgpIHtcbiAgICAgICAgICAgIHNob3VsZENhbGwgPSBmYWxzZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIHNpemUgb2Ygb25lXG4gICAgICAgICAgcmV0dXJuIHRoaXMuJHdhdGNoKHdhdGNoRXhwcmVzc2lvbnNbMF0sIGZ1bmN0aW9uIHdhdGNoR3JvdXBBY3Rpb24odmFsdWUsIG9sZFZhbHVlLCBzY29wZSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzWzBdID0gdmFsdWU7XG4gICAgICAgICAgICBvbGRWYWx1ZXNbMF0gPSBvbGRWYWx1ZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlcywgKHZhbHVlID09PSBvbGRWYWx1ZSkgPyBuZXdWYWx1ZXMgOiBvbGRWYWx1ZXMsIHNjb3BlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvckVhY2god2F0Y2hFeHByZXNzaW9ucywgZnVuY3Rpb24oZXhwciwgaSkge1xuICAgICAgICAgIHZhciB1bndhdGNoRm4gPSBzZWxmLiR3YXRjaChleHByLCBmdW5jdGlvbiB3YXRjaEdyb3VwU3ViQWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICBvbGRWYWx1ZXNbaV0gPSBvbGRWYWx1ZTtcbiAgICAgICAgICAgIGlmICghY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBzZWxmLiRldmFsQXN5bmMod2F0Y2hHcm91cEFjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVyZWdpc3RlckZucy5wdXNoKHVud2F0Y2hGbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIHdhdGNoR3JvdXBBY3Rpb24oKSB7XG4gICAgICAgICAgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChmaXJzdFJ1bikge1xuICAgICAgICAgICAgZmlyc3RSdW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlcywgbmV3VmFsdWVzLCBzZWxmKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2hHcm91cCgpIHtcbiAgICAgICAgICB3aGlsZSAoZGVyZWdpc3RlckZucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJGbnMuc2hpZnQoKSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaENvbGxlY3Rpb25cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaGFsbG93IHdhdGNoZXMgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZCBmaXJlcyB3aGVuZXZlciBhbnkgb2YgdGhlIHByb3BlcnRpZXMgY2hhbmdlXG4gICAgICAgKiAoZm9yIGFycmF5cywgdGhpcyBpbXBsaWVzIHdhdGNoaW5nIHRoZSBhcnJheSBpdGVtczsgZm9yIG9iamVjdCBtYXBzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmdcbiAgICAgICAqIHRoZSBwcm9wZXJ0aWVzKS4gSWYgYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQsIHRoZSBgbGlzdGVuZXJgIGNhbGxiYWNrIGlzIGZpcmVkLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGBvYmpgIGNvbGxlY3Rpb24gaXMgb2JzZXJ2ZWQgdmlhIHN0YW5kYXJkICR3YXRjaCBvcGVyYXRpb24gYW5kIGlzIGV4YW1pbmVkIG9uIGV2ZXJ5XG4gICAgICAgKiAgIGNhbGwgdG8gJGRpZ2VzdCgpIHRvIHNlZSBpZiBhbnkgaXRlbXMgaGF2ZSBiZWVuIGFkZGVkLCByZW1vdmVkLCBvciBtb3ZlZC5cbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueXRoaW5nIHdpdGhpbiB0aGUgYG9iamAgaGFzIGNoYW5nZWQuIEV4YW1wbGVzIGluY2x1ZGVcbiAgICAgICAqICAgYWRkaW5nLCByZW1vdmluZywgYW5kIG1vdmluZyBpdGVtcyBiZWxvbmdpbmcgdG8gYW4gb2JqZWN0IG9yIGFycmF5LlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydpZ29yJywgJ21hdGlhcycsICdtaXNrbycsICdqYW1lcyddO1xuICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSA0O1xuXG4gICAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ25hbWVzJywgZnVuY3Rpb24obmV3TmFtZXMsIG9sZE5hbWVzKSB7XG4gICAgICAgICAgICAkc2NvcGUuZGF0YUNvdW50ID0gbmV3TmFtZXMubGVuZ3RoO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoNCk7XG4gICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcblxuICAgICAgICAgIC8vc3RpbGwgYXQgNCAuLi4gbm8gY2hhbmdlc1xuICAgICAgICAgIGV4cGVjdCgkc2NvcGUuZGF0YUNvdW50KS50b0VxdWFsKDQpO1xuXG4gICAgICAgICAgJHNjb3BlLm5hbWVzLnBvcCgpO1xuICAgICAgICAgICRzY29wZS4kZGlnZXN0KCk7XG5cbiAgICAgICAgICAvL25vdyB0aGVyZSdzIGJlZW4gYSBjaGFuZ2VcbiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCgzKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbihzY29wZSl9IG9iaiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uIFRoZVxuICAgICAgICogICAgZXhwcmVzc2lvbiB2YWx1ZSBzaG91bGQgZXZhbHVhdGUgdG8gYW4gb2JqZWN0IG9yIGFuIGFycmF5IHdoaWNoIGlzIG9ic2VydmVkIG9uIGVhY2hcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEFueSBzaGFsbG93IGNoYW5nZSB3aXRoaW4gdGhlXG4gICAgICAgKiAgICBjb2xsZWN0aW9uIHdpbGwgdHJpZ2dlciBhIGNhbGwgdG8gdGhlIGBsaXN0ZW5lcmAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihuZXdDb2xsZWN0aW9uLCBvbGRDb2xsZWN0aW9uLCBzY29wZSl9IGxpc3RlbmVyIGEgY2FsbGJhY2sgZnVuY3Rpb24gY2FsbGVkXG4gICAgICAgKiAgICB3aGVuIGEgY2hhbmdlIGlzIGRldGVjdGVkLlxuICAgICAgICogICAgLSBUaGUgYG5ld0NvbGxlY3Rpb25gIG9iamVjdCBpcyB0aGUgbmV3bHkgbW9kaWZpZWQgZGF0YSBvYnRhaW5lZCBmcm9tIHRoZSBgb2JqYCBleHByZXNzaW9uXG4gICAgICAgKiAgICAtIFRoZSBgb2xkQ29sbGVjdGlvbmAgb2JqZWN0IGlzIGEgY29weSBvZiB0aGUgZm9ybWVyIGNvbGxlY3Rpb24gZGF0YS5cbiAgICAgICAqICAgICAgRHVlIHRvIHBlcmZvcm1hbmNlIGNvbnNpZGVyYXRpb25zLCB0aGVgb2xkQ29sbGVjdGlvbmAgdmFsdWUgaXMgY29tcHV0ZWQgb25seSBpZiB0aGVcbiAgICAgICAqICAgICAgYGxpc3RlbmVyYCBmdW5jdGlvbiBkZWNsYXJlcyB0d28gb3IgbW9yZSBhcmd1bWVudHMuXG4gICAgICAgKiAgICAtIFRoZSBgc2NvcGVgIGFyZ3VtZW50IHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci4gV2hlbiB0aGVcbiAgICAgICAqICAgIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBpcyBleGVjdXRlZCwgdGhlIGludGVybmFsIHdhdGNoIG9wZXJhdGlvbiBpcyB0ZXJtaW5hdGVkLlxuICAgICAgICovXG4gICAgICAkd2F0Y2hDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmosIGxpc3RlbmVyKSB7XG4gICAgICAgICR3YXRjaENvbGxlY3Rpb25JbnRlcmNlcHRvci4kc3RhdGVmdWwgPSB0cnVlO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgLy8gdGhlIGN1cnJlbnQgdmFsdWUsIHVwZGF0ZWQgb24gZWFjaCBkaXJ0eS1jaGVjayBydW5cbiAgICAgICAgdmFyIG5ld1ZhbHVlO1xuICAgICAgICAvLyBhIHNoYWxsb3cgY29weSBvZiB0aGUgbmV3VmFsdWUgZnJvbSB0aGUgbGFzdCBkaXJ0eS1jaGVjayBydW4sXG4gICAgICAgIC8vIHVwZGF0ZWQgdG8gbWF0Y2ggbmV3VmFsdWUgZHVyaW5nIGRpcnR5LWNoZWNrIHJ1blxuICAgICAgICB2YXIgb2xkVmFsdWU7XG4gICAgICAgIC8vIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBuZXdWYWx1ZSBmcm9tIHdoZW4gdGhlIGxhc3QgY2hhbmdlIGhhcHBlbmVkXG4gICAgICAgIHZhciB2ZXJ5T2xkVmFsdWU7XG4gICAgICAgIC8vIG9ubHkgdHJhY2sgdmVyeU9sZFZhbHVlIGlmIHRoZSBsaXN0ZW5lciBpcyBhc2tpbmcgZm9yIGl0XG4gICAgICAgIHZhciB0cmFja1ZlcnlPbGRWYWx1ZSA9IChsaXN0ZW5lci5sZW5ndGggPiAxKTtcbiAgICAgICAgdmFyIGNoYW5nZURldGVjdGVkID0gMDtcbiAgICAgICAgdmFyIGNoYW5nZURldGVjdG9yID0gJHBhcnNlKG9iaiwgJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yKTtcbiAgICAgICAgdmFyIGludGVybmFsQXJyYXkgPSBbXTtcbiAgICAgICAgdmFyIGludGVybmFsT2JqZWN0ID0ge307XG4gICAgICAgIHZhciBpbml0UnVuID0gdHJ1ZTtcbiAgICAgICAgdmFyIG9sZExlbmd0aCA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yKF92YWx1ZSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gX3ZhbHVlO1xuICAgICAgICAgIHZhciBuZXdMZW5ndGgsIGtleSwgYm90aE5hTiwgbmV3SXRlbSwgb2xkSXRlbTtcblxuICAgICAgICAgIC8vIElmIHRoZSBuZXcgdmFsdWUgaXMgdW5kZWZpbmVkLCB0aGVuIHJldHVybiB1bmRlZmluZWQgYXMgdGhlIHdhdGNoIG1heSBiZSBhIG9uZS10aW1lIHdhdGNoXG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKG5ld1ZhbHVlKSkgcmV0dXJuO1xuXG4gICAgICAgICAgaWYgKCFpc09iamVjdChuZXdWYWx1ZSkpIHsgLy8gaWYgcHJpbWl0aXZlXG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5TGlrZShuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gaW50ZXJuYWxBcnJheSkge1xuICAgICAgICAgICAgICAvLyB3ZSBhcmUgdHJhbnNpdGlvbmluZyBmcm9tIHNvbWV0aGluZyB3aGljaCB3YXMgbm90IGFuIGFycmF5IGludG8gYXJyYXkuXG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gaW50ZXJuYWxBcnJheTtcbiAgICAgICAgICAgICAgb2xkTGVuZ3RoID0gb2xkVmFsdWUubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV3TGVuZ3RoID0gbmV3VmFsdWUubGVuZ3RoO1xuXG4gICAgICAgICAgICBpZiAob2xkTGVuZ3RoICE9PSBuZXdMZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gaWYgbGVuZ3RocyBkbyBub3QgbWF0Y2ggd2UgbmVlZCB0byB0cmlnZ2VyIGNoYW5nZSBub3RpZmljYXRpb25cbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgb2xkVmFsdWUubGVuZ3RoID0gb2xkTGVuZ3RoID0gbmV3TGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29weSB0aGUgaXRlbXMgdG8gb2xkVmFsdWUgYW5kIGxvb2sgZm9yIGNoYW5nZXMuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIG9sZEl0ZW0gPSBvbGRWYWx1ZVtpXTtcbiAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ld1ZhbHVlW2ldO1xuXG4gICAgICAgICAgICAgIGJvdGhOYU4gPSAob2xkSXRlbSAhPT0gb2xkSXRlbSkgJiYgKG5ld0l0ZW0gIT09IG5ld0l0ZW0pO1xuICAgICAgICAgICAgICBpZiAoIWJvdGhOYU4gJiYgKG9sZEl0ZW0gIT09IG5ld0l0ZW0pKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZVtpXSA9IG5ld0l0ZW07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbE9iamVjdCkge1xuICAgICAgICAgICAgICAvLyB3ZSBhcmUgdHJhbnNpdGlvbmluZyBmcm9tIHNvbWV0aGluZyB3aGljaCB3YXMgbm90IGFuIG9iamVjdCBpbnRvIG9iamVjdC5cbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBpbnRlcm5hbE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICBvbGRMZW5ndGggPSAwO1xuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29weSB0aGUgaXRlbXMgdG8gb2xkVmFsdWUgYW5kIGxvb2sgZm9yIGNoYW5nZXMuXG4gICAgICAgICAgICBuZXdMZW5ndGggPSAwO1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwobmV3VmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBuZXdMZW5ndGgrKztcbiAgICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3VmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICBvbGRJdGVtID0gb2xkVmFsdWVba2V5XTtcblxuICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIGJvdGhOYU4gPSAob2xkSXRlbSAhPT0gb2xkSXRlbSkgJiYgKG5ld0l0ZW0gIT09IG5ld0l0ZW0pO1xuICAgICAgICAgICAgICAgICAgaWYgKCFib3RoTmFOICYmIChvbGRJdGVtICE9PSBuZXdJdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZVtrZXldID0gbmV3SXRlbTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgb2xkTGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgICBvbGRWYWx1ZVtrZXldID0gbmV3SXRlbTtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2xkTGVuZ3RoID4gbmV3TGVuZ3RoKSB7XG4gICAgICAgICAgICAgIC8vIHdlIHVzZWQgdG8gaGF2ZSBtb3JlIGtleXMsIG5lZWQgdG8gZmluZCB0aGVtIGFuZCBkZXN0cm95IHRoZW0uXG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgIGZvciAoa2V5IGluIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG5ld1ZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICBvbGRMZW5ndGgtLTtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvbGRWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2hhbmdlRGV0ZWN0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiAkd2F0Y2hDb2xsZWN0aW9uQWN0aW9uKCkge1xuICAgICAgICAgIGlmIChpbml0UnVuKSB7XG4gICAgICAgICAgICBpbml0UnVuID0gZmFsc2U7XG4gICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZSwgbmV3VmFsdWUsIHNlbGYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZSwgdmVyeU9sZFZhbHVlLCBzZWxmKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBtYWtlIGEgY29weSBmb3IgdGhlIG5leHQgdGltZSBhIGNvbGxlY3Rpb24gaXMgY2hhbmdlZFxuICAgICAgICAgIGlmICh0cmFja1ZlcnlPbGRWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFpc09iamVjdChuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgLy9wcmltaXRpdmVcbiAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWUgPSBuZXcgQXJyYXkobmV3VmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZVtpXSA9IG5ld1ZhbHVlW2ldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBpZiBvYmplY3RcbiAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0ge307XG4gICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG5ld1ZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWVba2V5XSA9IG5ld1ZhbHVlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuJHdhdGNoKGNoYW5nZURldGVjdG9yLCAkd2F0Y2hDb2xsZWN0aW9uQWN0aW9uKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUHJvY2Vzc2VzIGFsbCBvZiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJzfSBvZiB0aGUgY3VycmVudCBzY29wZSBhbmRcbiAgICAgICAqIGl0cyBjaGlsZHJlbi4gQmVjYXVzZSBhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyfSdzIGxpc3RlbmVyIGNhbiBjaGFuZ2VcbiAgICAgICAqIHRoZSBtb2RlbCwgdGhlIGAkZGlnZXN0KClgIGtlZXBzIGNhbGxpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyc31cbiAgICAgICAqIHVudGlsIG5vIG1vcmUgbGlzdGVuZXJzIGFyZSBmaXJpbmcuIFRoaXMgbWVhbnMgdGhhdCBpdCBpcyBwb3NzaWJsZSB0byBnZXQgaW50byBhbiBpbmZpbml0ZVxuICAgICAgICogbG9vcC4gVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGAnTWF4aW11bSBpdGVyYXRpb24gbGltaXQgZXhjZWVkZWQuJ2AgaWYgdGhlIG51bWJlciBvZlxuICAgICAgICogaXRlcmF0aW9ucyBleGNlZWRzIDEwLlxuICAgICAgICpcbiAgICAgICAqIFVzdWFsbHksIHlvdSBkb24ndCBjYWxsIGAkZGlnZXN0KClgIGRpcmVjdGx5IGluXG4gICAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ29udHJvbGxlciBjb250cm9sbGVyc30gb3IgaW5cbiAgICAgICAqIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cbiAgICAgICAqIEluc3RlYWQsIHlvdSBzaG91bGQgY2FsbCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkgJGFwcGx5KCl9ICh0eXBpY2FsbHkgZnJvbSB3aXRoaW5cbiAgICAgICAqIGEge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZX0pLCB3aGljaCB3aWxsIGZvcmNlIGEgYCRkaWdlc3QoKWAuXG4gICAgICAgKlxuICAgICAgICogSWYgeW91IHdhbnQgdG8gYmUgbm90aWZpZWQgd2hlbmV2ZXIgYCRkaWdlc3QoKWAgaXMgY2FsbGVkLFxuICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGhcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCAkd2F0Y2goKX0gd2l0aCBubyBgbGlzdGVuZXJgLlxuICAgICAgICpcbiAgICAgICAqIEluIHVuaXQgdGVzdHMsIHlvdSBtYXkgbmVlZCB0byBjYWxsIGAkZGlnZXN0KClgIHRvIHNpbXVsYXRlIHRoZSBzY29wZSBsaWZlIGN5Y2xlLlxuICAgICAgICpcbiAgICAgICAqICMgRXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAgICAgdmFyIHNjb3BlID0gLi4uO1xuICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJztcbiAgICAgICAgICAgc2NvcGUuY291bnRlciA9IDA7XG5cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaCgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSBzY29wZS5jb3VudGVyICsgMTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gdGhlIGxpc3RlbmVyIGlzIGFsd2F5cyBjYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCAkZGlnZXN0IGxvb3AgYWZ0ZXIgaXQgd2FzIHJlZ2lzdGVyZWRcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyBidXQgbm93IGl0IHdpbGwgbm90IGJlIGNhbGxlZCB1bmxlc3MgdGhlIHZhbHVlIGNoYW5nZXNcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdhZGFtJztcbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgyKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgJGRpZ2VzdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB3YXRjaCwgdmFsdWUsIGxhc3QsXG4gICAgICAgICAgICB3YXRjaGVycyxcbiAgICAgICAgICAgIGxlbmd0aCxcbiAgICAgICAgICAgIGRpcnR5LCB0dGwgPSBUVEwsXG4gICAgICAgICAgICBuZXh0LCBjdXJyZW50LCB0YXJnZXQgPSB0aGlzLFxuICAgICAgICAgICAgd2F0Y2hMb2cgPSBbXSxcbiAgICAgICAgICAgIGxvZ0lkeCwgbG9nTXNnLCBhc3luY1Rhc2s7XG5cbiAgICAgICAgYmVnaW5QaGFzZSgnJGRpZ2VzdCcpO1xuICAgICAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyB0byBicm93c2VyIHVybCB0aGF0IGhhcHBlbmVkIGluIHN5bmMgYmVmb3JlIHRoZSBjYWxsIHRvICRkaWdlc3RcbiAgICAgICAgJGJyb3dzZXIuJCRjaGVja1VybENoYW5nZSgpO1xuXG4gICAgICAgIGlmICh0aGlzID09PSAkcm9vdFNjb3BlICYmIGFwcGx5QXN5bmNJZCAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIHJvb3Qgc2NvcGUsIGFuZCAkYXBwbHlBc3luYyBoYXMgc2NoZWR1bGVkIGEgZGVmZXJyZWQgJGFwcGx5KCksIHRoZW5cbiAgICAgICAgICAvLyBjYW5jZWwgdGhlIHNjaGVkdWxlZCAkYXBwbHkgYW5kIGZsdXNoIHRoZSBxdWV1ZSBvZiBleHByZXNzaW9ucyB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgICAgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKGFwcGx5QXN5bmNJZCk7XG4gICAgICAgICAgZmx1c2hBcHBseUFzeW5jKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG5cbiAgICAgICAgZG8geyAvLyBcIndoaWxlIGRpcnR5XCIgbG9vcFxuICAgICAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgY3VycmVudCA9IHRhcmdldDtcblxuICAgICAgICAgIHdoaWxlIChhc3luY1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYXN5bmNUYXNrID0gYXN5bmNRdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICBhc3luY1Rhc2suc2NvcGUuJGV2YWwoYXN5bmNUYXNrLmV4cHJlc3Npb24sIGFzeW5jVGFzay5sb2NhbHMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0cmF2ZXJzZVNjb3Blc0xvb3A6XG4gICAgICAgICAgZG8geyAvLyBcInRyYXZlcnNlIHRoZSBzY29wZXNcIiBsb29wXG4gICAgICAgICAgICBpZiAoKHdhdGNoZXJzID0gY3VycmVudC4kJHdhdGNoZXJzKSkge1xuICAgICAgICAgICAgICAvLyBwcm9jZXNzIG91ciB3YXRjaGVzXG4gICAgICAgICAgICAgIGxlbmd0aCA9IHdhdGNoZXJzLmxlbmd0aDtcbiAgICAgICAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHdhdGNoID0gd2F0Y2hlcnNbbGVuZ3RoXTtcbiAgICAgICAgICAgICAgICAgIC8vIE1vc3QgY29tbW9uIHdhdGNoZXMgYXJlIG9uIHByaW1pdGl2ZXMsIGluIHdoaWNoIGNhc2Ugd2UgY2FuIHNob3J0XG4gICAgICAgICAgICAgICAgICAvLyBjaXJjdWl0IGl0IHdpdGggPT09IG9wZXJhdG9yLCBvbmx5IHdoZW4gPT09IGZhaWxzIGRvIHdlIHVzZSAuZXF1YWxzXG4gICAgICAgICAgICAgICAgICBpZiAod2F0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh2YWx1ZSA9IHdhdGNoLmdldChjdXJyZW50KSkgIT09IChsYXN0ID0gd2F0Y2gubGFzdCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICEod2F0Y2guZXFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGVxdWFscyh2YWx1ZSwgbGFzdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHR5cGVvZiBsYXN0ID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGlzTmFOKHZhbHVlKSAmJiBpc05hTihsYXN0KSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIGxhc3REaXJ0eVdhdGNoID0gd2F0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgd2F0Y2gubGFzdCA9IHdhdGNoLmVxID8gY29weSh2YWx1ZSwgbnVsbCkgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICB3YXRjaC5mbih2YWx1ZSwgKChsYXN0ID09PSBpbml0V2F0Y2hWYWwpID8gdmFsdWUgOiBsYXN0KSwgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHR0bCA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ0lkeCA9IDQgLSB0dGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdhdGNoTG9nW2xvZ0lkeF0pIHdhdGNoTG9nW2xvZ0lkeF0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoTG9nW2xvZ0lkeF0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1zZzogaXNGdW5jdGlvbih3YXRjaC5leHApID8gJ2ZuOiAnICsgKHdhdGNoLmV4cC5uYW1lIHx8IHdhdGNoLmV4cC50b1N0cmluZygpKSA6IHdhdGNoLmV4cCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsOiBsYXN0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2F0Y2ggPT09IGxhc3REaXJ0eVdhdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG1vc3QgcmVjZW50bHkgZGlydHkgd2F0Y2hlciBpcyBub3cgY2xlYW4sIHNob3J0IGNpcmN1aXQgc2luY2UgdGhlIHJlbWFpbmluZyB3YXRjaGVyc1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGhhdmUgYWxyZWFkeSBiZWVuIHRlc3RlZC5cbiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIHRyYXZlcnNlU2NvcGVzTG9vcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbnNhbml0eSBXYXJuaW5nOiBzY29wZSBkZXB0aC1maXJzdCB0cmF2ZXJzYWxcbiAgICAgICAgICAgIC8vIHllcywgdGhpcyBjb2RlIGlzIGEgYml0IGNyYXp5LCBidXQgaXQgd29ya3MgYW5kIHdlIGhhdmUgdGVzdHMgdG8gcHJvdmUgaXQhXG4gICAgICAgICAgICAvLyB0aGlzIHBpZWNlIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgdHJhdmVyc2FsIGluICRicm9hZGNhc3RcbiAgICAgICAgICAgIGlmICghKG5leHQgPSAoKGN1cnJlbnQuJCR3YXRjaGVyc0NvdW50ICYmIGN1cnJlbnQuJCRjaGlsZEhlYWQpIHx8XG4gICAgICAgICAgICAgICAgKGN1cnJlbnQgIT09IHRhcmdldCAmJiBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSkpIHtcbiAgICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQgIT09IHRhcmdldCAmJiAhKG5leHQgPSBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gd2hpbGUgKChjdXJyZW50ID0gbmV4dCkpO1xuXG4gICAgICAgICAgLy8gYGJyZWFrIHRyYXZlcnNlU2NvcGVzTG9vcDtgIHRha2VzIHVzIHRvIGhlcmVcblxuICAgICAgICAgIGlmICgoZGlydHkgfHwgYXN5bmNRdWV1ZS5sZW5ndGgpICYmICEodHRsLS0pKSB7XG4gICAgICAgICAgICBjbGVhclBoYXNlKCk7XG4gICAgICAgICAgICB0aHJvdyAkcm9vdFNjb3BlTWluRXJyKCdpbmZkaWcnLFxuICAgICAgICAgICAgICAgICd7MH0gJGRpZ2VzdCgpIGl0ZXJhdGlvbnMgcmVhY2hlZC4gQWJvcnRpbmchXFxuJyArXG4gICAgICAgICAgICAgICAgJ1dhdGNoZXJzIGZpcmVkIGluIHRoZSBsYXN0IDUgaXRlcmF0aW9uczogezF9JyxcbiAgICAgICAgICAgICAgICBUVEwsIHdhdGNoTG9nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSB3aGlsZSAoZGlydHkgfHwgYXN5bmNRdWV1ZS5sZW5ndGgpO1xuXG4gICAgICAgIGNsZWFyUGhhc2UoKTtcblxuICAgICAgICB3aGlsZSAocG9zdERpZ2VzdFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwb3N0RGlnZXN0UXVldWUuc2hpZnQoKSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveVxuICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gc2NvcGUgYmVpbmcgZGVzdHJveWVkXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBCcm9hZGNhc3RlZCB3aGVuIGEgc2NvcGUgYW5kIGl0cyBjaGlsZHJlbiBhcmUgYmVpbmcgZGVzdHJveWVkLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvXG4gICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVtb3ZlcyB0aGUgY3VycmVudCBzY29wZSAoYW5kIGFsbCBvZiBpdHMgY2hpbGRyZW4pIGZyb20gdGhlIHBhcmVudCBzY29wZS4gUmVtb3ZhbCBpbXBsaWVzXG4gICAgICAgKiB0aGF0IGNhbGxzIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSB3aWxsIG5vIGxvbmdlclxuICAgICAgICogcHJvcGFnYXRlIHRvIHRoZSBjdXJyZW50IHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4uIFJlbW92YWwgYWxzbyBpbXBsaWVzIHRoYXQgdGhlIGN1cnJlbnRcbiAgICAgICAqIHNjb3BlIGlzIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogVGhlIGAkZGVzdHJveSgpYCBpcyB1c3VhbGx5IHVzZWQgYnkgZGlyZWN0aXZlcyBzdWNoIGFzXG4gICAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fSBmb3IgbWFuYWdpbmcgdGhlXG4gICAgICAgKiB1bnJvbGxpbmcgb2YgdGhlIGxvb3AuXG4gICAgICAgKlxuICAgICAgICogSnVzdCBiZWZvcmUgYSBzY29wZSBpcyBkZXN0cm95ZWQsIGEgYCRkZXN0cm95YCBldmVudCBpcyBicm9hZGNhc3RlZCBvbiB0aGlzIHNjb3BlLlxuICAgICAgICogQXBwbGljYXRpb24gY29kZSBjYW4gcmVnaXN0ZXIgYSBgJGRlc3Ryb3lgIGV2ZW50IGhhbmRsZXIgdGhhdCB3aWxsIGdpdmUgaXQgYSBjaGFuY2UgdG9cbiAgICAgICAqIHBlcmZvcm0gYW55IG5lY2Vzc2FyeSBjbGVhbnVwLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvXG4gICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAgICAgKi9cbiAgICAgICRkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gV2UgY2FuJ3QgZGVzdHJveSBhIHNjb3BlIHRoYXQgaGFzIGJlZW4gYWxyZWFkeSBkZXN0cm95ZWQuXG4gICAgICAgIGlmICh0aGlzLiQkZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7XG5cbiAgICAgICAgdGhpcy4kYnJvYWRjYXN0KCckZGVzdHJveScpO1xuICAgICAgICB0aGlzLiQkZGVzdHJveWVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcyA9PT0gJHJvb3RTY29wZSkge1xuICAgICAgICAgIC8vUmVtb3ZlIGhhbmRsZXJzIGF0dGFjaGVkIHRvIHdpbmRvdyB3aGVuICRyb290U2NvcGUgaXMgcmVtb3ZlZFxuICAgICAgICAgICRicm93c2VyLiQkYXBwbGljYXRpb25EZXN0cm95ZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluY3JlbWVudFdhdGNoZXJzQ291bnQodGhpcywgLXRoaXMuJCR3YXRjaGVyc0NvdW50KTtcbiAgICAgICAgZm9yICh2YXIgZXZlbnROYW1lIGluIHRoaXMuJCRsaXN0ZW5lckNvdW50KSB7XG4gICAgICAgICAgZGVjcmVtZW50TGlzdGVuZXJDb3VudCh0aGlzLCB0aGlzLiQkbGlzdGVuZXJDb3VudFtldmVudE5hbWVdLCBldmVudE5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V2ZXIgYWxsIHRoZSByZWZlcmVuY2VzIHRvIHBhcmVudCBzY29wZXMgKGFmdGVyIHRoaXMgY2xlYW51cCwgdGhlIGN1cnJlbnQgc2NvcGUgc2hvdWxkXG4gICAgICAgIC8vIG5vdCBiZSByZXRhaW5lZCBieSBhbnkgb2Ygb3VyIHJlZmVyZW5jZXMgYW5kIHNob3VsZCBiZSBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uKVxuICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudC4kJGNoaWxkSGVhZCA9PSB0aGlzKSBwYXJlbnQuJCRjaGlsZEhlYWQgPSB0aGlzLiQkbmV4dFNpYmxpbmc7XG4gICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LiQkY2hpbGRUYWlsID09IHRoaXMpIHBhcmVudC4kJGNoaWxkVGFpbCA9IHRoaXMuJCRwcmV2U2libGluZztcbiAgICAgICAgaWYgKHRoaXMuJCRwcmV2U2libGluZykgdGhpcy4kJHByZXZTaWJsaW5nLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkbmV4dFNpYmxpbmc7XG4gICAgICAgIGlmICh0aGlzLiQkbmV4dFNpYmxpbmcpIHRoaXMuJCRuZXh0U2libGluZy4kJHByZXZTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nO1xuXG4gICAgICAgIC8vIERpc2FibGUgbGlzdGVuZXJzLCB3YXRjaGVycyBhbmQgYXBwbHkvZGlnZXN0IG1ldGhvZHNcbiAgICAgICAgdGhpcy4kZGVzdHJveSA9IHRoaXMuJGRpZ2VzdCA9IHRoaXMuJGFwcGx5ID0gdGhpcy4kZXZhbEFzeW5jID0gdGhpcy4kYXBwbHlBc3luYyA9IG5vb3A7XG4gICAgICAgIHRoaXMuJG9uID0gdGhpcy4kd2F0Y2ggPSB0aGlzLiR3YXRjaEdyb3VwID0gZnVuY3Rpb24oKSB7IHJldHVybiBub29wOyB9O1xuICAgICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XG5cbiAgICAgICAgLy8gRGlzY29ubmVjdCB0aGUgbmV4dCBzaWJsaW5nIHRvIHByZXZlbnQgYGNsZWFuVXBTY29wZWAgZGVzdHJveWluZyB0aG9zZSB0b29cbiAgICAgICAgdGhpcy4kJG5leHRTaWJsaW5nID0gbnVsbDtcbiAgICAgICAgY2xlYW5VcFNjb3BlKHRoaXMpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRldmFsXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogRXhlY3V0ZXMgdGhlIGBleHByZXNzaW9uYCBvbiB0aGUgY3VycmVudCBzY29wZSBhbmQgcmV0dXJucyB0aGUgcmVzdWx0LiBBbnkgZXhjZXB0aW9ucyBpblxuICAgICAgICogdGhlIGV4cHJlc3Npb24gYXJlIHByb3BhZ2F0ZWQgKHVuY2F1Z2h0KS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBldmFsdWF0aW5nIEFuZ3VsYXJcbiAgICAgICAqIGV4cHJlc3Npb25zLlxuICAgICAgICpcbiAgICAgICAqICMgRXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAgICAgdmFyIHNjb3BlID0gbmcuJHJvb3RTY29wZS5TY29wZSgpO1xuICAgICAgICAgICBzY29wZS5hID0gMTtcbiAgICAgICAgICAgc2NvcGUuYiA9IDI7XG5cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLiRldmFsKCdhK2InKSkudG9FcXVhbCgzKTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLiRldmFsKGZ1bmN0aW9uKHNjb3BlKXsgcmV0dXJuIHNjb3BlLmEgKyBzY29wZS5iOyB9KSkudG9FcXVhbCgzKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbigpKT19IGV4cHJlc3Npb24gQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4gIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhvYmplY3QpPX0gbG9jYWxzIExvY2FsIHZhcmlhYmxlcyBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4gc2NvcGUuXG4gICAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uLlxuICAgICAgICovXG4gICAgICAkZXZhbDogZnVuY3Rpb24oZXhwciwgbG9jYWxzKSB7XG4gICAgICAgIHJldHVybiAkcGFyc2UoZXhwcikodGhpcywgbG9jYWxzKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogRXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gb24gdGhlIGN1cnJlbnQgc2NvcGUgYXQgYSBsYXRlciBwb2ludCBpbiB0aW1lLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBgJGV2YWxBc3luY2AgbWFrZXMgbm8gZ3VhcmFudGVlcyBhcyB0byB3aGVuIHRoZSBgZXhwcmVzc2lvbmAgd2lsbCBiZSBleGVjdXRlZCwgb25seVxuICAgICAgICogdGhhdDpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gaXQgd2lsbCBleGVjdXRlIGFmdGVyIHRoZSBmdW5jdGlvbiB0aGF0IHNjaGVkdWxlZCB0aGUgZXZhbHVhdGlvbiAocHJlZmVyYWJseSBiZWZvcmUgRE9NXG4gICAgICAgKiAgICAgcmVuZGVyaW5nKS5cbiAgICAgICAqICAgLSBhdCBsZWFzdCBvbmUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0IGN5Y2xlfSB3aWxsIGJlIHBlcmZvcm1lZCBhZnRlclxuICAgICAgICogICAgIGBleHByZXNzaW9uYCBleGVjdXRpb24uXG4gICAgICAgKlxuICAgICAgICogQW55IGV4Y2VwdGlvbnMgZnJvbSB0aGUgZXhlY3V0aW9uIG9mIHRoZSBleHByZXNzaW9uIGFyZSBmb3J3YXJkZWQgdG8gdGhlXG4gICAgICAgKiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgKlxuICAgICAgICogX19Ob3RlOl9fIGlmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG91dHNpZGUgb2YgYSBgJGRpZ2VzdGAgY3ljbGUsIGEgbmV3IGAkZGlnZXN0YCBjeWNsZVxuICAgICAgICogd2lsbCBiZSBzY2hlZHVsZWQuIEhvd2V2ZXIsIGl0IGlzIGVuY291cmFnZWQgdG8gYWx3YXlzIGNhbGwgY29kZSB0aGF0IGNoYW5nZXMgdGhlIG1vZGVsXG4gICAgICAgKiBmcm9tIHdpdGhpbiBhbiBgJGFwcGx5YCBjYWxsLiBUaGF0IGluY2x1ZGVzIGNvZGUgZXZhbHVhdGVkIHZpYSBgJGV2YWxBc3luY2AuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsob2JqZWN0KT19IGxvY2FscyBMb2NhbCB2YXJpYWJsZXMgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluIHNjb3BlLlxuICAgICAgICovXG4gICAgICAkZXZhbEFzeW5jOiBmdW5jdGlvbihleHByLCBsb2NhbHMpIHtcbiAgICAgICAgLy8gaWYgd2UgYXJlIG91dHNpZGUgb2YgYW4gJGRpZ2VzdCBsb29wIGFuZCB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHdlIGFyZSBzY2hlZHVsaW5nIGFzeW5jXG4gICAgICAgIC8vIHRhc2sgYWxzbyBzY2hlZHVsZSBhc3luYyBhdXRvLWZsdXNoXG4gICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlICYmICFhc3luY1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYXN5bmNRdWV1ZS5wdXNoKHtzY29wZTogdGhpcywgZXhwcmVzc2lvbjogZXhwciwgbG9jYWxzOiBsb2NhbHN9KTtcbiAgICAgIH0sXG5cbiAgICAgICQkcG9zdERpZ2VzdDogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgcG9zdERpZ2VzdFF1ZXVlLnB1c2goZm4pO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRhcHBseVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIGAkYXBwbHkoKWAgaXMgdXNlZCB0byBleGVjdXRlIGFuIGV4cHJlc3Npb24gaW4gYW5ndWxhciBmcm9tIG91dHNpZGUgb2YgdGhlIGFuZ3VsYXJcbiAgICAgICAqIGZyYW1ld29yay4gKEZvciBleGFtcGxlIGZyb20gYnJvd3NlciBET00gZXZlbnRzLCBzZXRUaW1lb3V0LCBYSFIgb3IgdGhpcmQgcGFydHkgbGlicmFyaWVzKS5cbiAgICAgICAqIEJlY2F1c2Ugd2UgYXJlIGNhbGxpbmcgaW50byB0aGUgYW5ndWxhciBmcmFtZXdvcmsgd2UgbmVlZCB0byBwZXJmb3JtIHByb3BlciBzY29wZSBsaWZlXG4gICAgICAgKiBjeWNsZSBvZiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgZXhjZXB0aW9uIGhhbmRsaW5nfSxcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgZXhlY3V0aW5nIHdhdGNoZXN9LlxuICAgICAgICpcbiAgICAgICAqICMjIExpZmUgY3ljbGVcbiAgICAgICAqXG4gICAgICAgKiAjIFBzZXVkby1Db2RlIG9mIGAkYXBwbHkoKWBcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgIGZ1bmN0aW9uICRhcHBseShleHByKSB7XG4gICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgIHJldHVybiAkZXZhbChleHByKTtcbiAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgJHJvb3QuJGRpZ2VzdCgpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfVxuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIFNjb3BlJ3MgYCRhcHBseSgpYCBtZXRob2QgdHJhbnNpdGlvbnMgdGhyb3VnaCB0aGUgZm9sbG93aW5nIHN0YWdlczpcbiAgICAgICAqXG4gICAgICAgKiAxLiBUaGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgZXhlY3V0ZWQgdXNpbmcgdGhlXG4gICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbCAkZXZhbCgpfSBtZXRob2QuXG4gICAgICAgKiAyLiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGVcbiAgICAgICAqICAgIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqIDMuIFRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2h9IGxpc3RlbmVycyBhcmUgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlXG4gICAgICAgKiAgICBleHByZXNzaW9uIHdhcyBleGVjdXRlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IG1ldGhvZC5cbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uXG4gICAgICAgKi9cbiAgICAgICRhcHBseTogZnVuY3Rpb24oZXhwcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGJlZ2luUGhhc2UoJyRhcHBseScpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kZXZhbChleHByKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgY2xlYXJQaGFzZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGFwcGx5QXN5bmNcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTY2hlZHVsZSB0aGUgaW52b2NhdGlvbiBvZiAkYXBwbHkgdG8gb2NjdXIgYXQgYSBsYXRlciB0aW1lLiBUaGUgYWN0dWFsIHRpbWUgZGlmZmVyZW5jZVxuICAgICAgICogdmFyaWVzIGFjcm9zcyBicm93c2VycywgYnV0IGlzIHR5cGljYWxseSBhcm91bmQgfjEwIG1pbGxpc2Vjb25kcy5cbiAgICAgICAqXG4gICAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIHF1ZXVlIHVwIG11bHRpcGxlIGV4cHJlc3Npb25zIHdoaWNoIG5lZWQgdG8gYmUgZXZhbHVhdGVkIGluIHRoZSBzYW1lXG4gICAgICAgKiBkaWdlc3QuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICovXG4gICAgICAkYXBwbHlBc3luYzogZnVuY3Rpb24oZXhwcikge1xuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzO1xuICAgICAgICBleHByICYmIGFwcGx5QXN5bmNRdWV1ZS5wdXNoKCRhcHBseUFzeW5jRXhwcmVzc2lvbik7XG4gICAgICAgIHNjaGVkdWxlQXBwbHlBc3luYygpO1xuXG4gICAgICAgIGZ1bmN0aW9uICRhcHBseUFzeW5jRXhwcmVzc2lvbigpIHtcbiAgICAgICAgICBzY29wZS4kZXZhbChleHByKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIExpc3RlbnMgb24gZXZlbnRzIG9mIGEgZ2l2ZW4gdHlwZS4gU2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRlbWl0ICRlbWl0fSBmb3JcbiAgICAgICAqIGRpc2N1c3Npb24gb2YgZXZlbnQgbGlmZSBjeWNsZS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZXZlbnQgbGlzdGVuZXIgZnVuY3Rpb24gZm9ybWF0IGlzOiBgZnVuY3Rpb24oZXZlbnQsIGFyZ3MuLi4pYC4gVGhlIGBldmVudGAgb2JqZWN0XG4gICAgICAgKiBwYXNzZWQgaW50byB0aGUgbGlzdGVuZXIgaGFzIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gYHRhcmdldFNjb3BlYCAtIGB7U2NvcGV9YDogdGhlIHNjb3BlIG9uIHdoaWNoIHRoZSBldmVudCB3YXMgYCRlbWl0YC1lZCBvclxuICAgICAgICogICAgIGAkYnJvYWRjYXN0YC1lZC5cbiAgICAgICAqICAgLSBgY3VycmVudFNjb3BlYCAtIGB7U2NvcGV9YDogdGhlIHNjb3BlIHRoYXQgaXMgY3VycmVudGx5IGhhbmRsaW5nIHRoZSBldmVudC4gT25jZSB0aGVcbiAgICAgICAqICAgICBldmVudCBwcm9wYWdhdGVzIHRocm91Z2ggdGhlIHNjb3BlIGhpZXJhcmNoeSwgdGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gbnVsbC5cbiAgICAgICAqICAgLSBgbmFtZWAgLSBge3N0cmluZ31gOiBuYW1lIG9mIHRoZSBldmVudC5cbiAgICAgICAqICAgLSBgc3RvcFByb3BhZ2F0aW9uYCAtIGB7ZnVuY3Rpb249fWA6IGNhbGxpbmcgYHN0b3BQcm9wYWdhdGlvbmAgZnVuY3Rpb24gd2lsbCBjYW5jZWxcbiAgICAgICAqICAgICBmdXJ0aGVyIGV2ZW50IHByb3BhZ2F0aW9uIChhdmFpbGFibGUgb25seSBmb3IgZXZlbnRzIHRoYXQgd2VyZSBgJGVtaXRgLWVkKS5cbiAgICAgICAqICAgLSBgcHJldmVudERlZmF1bHRgIC0gYHtmdW5jdGlvbn1gOiBjYWxsaW5nIGBwcmV2ZW50RGVmYXVsdGAgc2V0cyBgZGVmYXVsdFByZXZlbnRlZGAgZmxhZ1xuICAgICAgICogICAgIHRvIHRydWUuXG4gICAgICAgKiAgIC0gYGRlZmF1bHRQcmV2ZW50ZWRgIC0gYHtib29sZWFufWA6IHRydWUgaWYgYHByZXZlbnREZWZhdWx0YCB3YXMgY2FsbGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gbGlzdGVuIG9uLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudCwgLi4uYXJncyl9IGxpc3RlbmVyIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZXZlbnQgaXMgZW1pdHRlZC5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgKi9cbiAgICAgICRvbjogZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIG5hbWVkTGlzdGVuZXJzID0gdGhpcy4kJGxpc3RlbmVyc1tuYW1lXTtcbiAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVycykge1xuICAgICAgICAgIHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV0gPSBuYW1lZExpc3RlbmVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG5hbWVkTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcztcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICghY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0pIHtcbiAgICAgICAgICAgIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0rKztcbiAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpKTtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaW5kZXhPZkxpc3RlbmVyID0gbmFtZWRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgICAgaWYgKGluZGV4T2ZMaXN0ZW5lciAhPT0gLTEpIHtcbiAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzW2luZGV4T2ZMaXN0ZW5lcl0gPSBudWxsO1xuICAgICAgICAgICAgZGVjcmVtZW50TGlzdGVuZXJDb3VudChzZWxmLCAxLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZW1pdFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYG5hbWVgIHVwd2FyZHMgdGhyb3VnaCB0aGUgc2NvcGUgaGllcmFyY2h5IG5vdGlmeWluZyB0aGVcbiAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBsaXN0ZW5lcnMuXG4gICAgICAgKlxuICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGVtaXRgIHdhcyBjYWxsZWQuIEFsbFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXRcbiAgICAgICAqIG5vdGlmaWVkLiBBZnRlcndhcmRzLCB0aGUgZXZlbnQgdHJhdmVyc2VzIHVwd2FyZHMgdG93YXJkIHRoZSByb290IHNjb3BlIGFuZCBjYWxscyBhbGxcbiAgICAgICAqIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCB3aWxsIHN0b3AgcHJvcGFnYXRpbmcgaWYgb25lIG9mIHRoZSBsaXN0ZW5lcnNcbiAgICAgICAqIGNhbmNlbHMgaXQuXG4gICAgICAgKlxuICAgICAgICogQW55IGV4Y2VwdGlvbiBlbWl0dGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkXG4gICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBlbWl0LlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIG9uZSBvciBtb3JlIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbnRvIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEV2ZW50IG9iamVjdCAoc2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0pLlxuICAgICAgICovXG4gICAgICAkZW1pdDogZnVuY3Rpb24obmFtZSwgYXJncykge1xuICAgICAgICB2YXIgZW1wdHkgPSBbXSxcbiAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLFxuICAgICAgICAgICAgc2NvcGUgPSB0aGlzLFxuICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uID0gZmFsc2UsXG4gICAgICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHNjb3BlLFxuICAgICAgICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge3N0b3BQcm9wYWdhdGlvbiA9IHRydWU7fSxcbiAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpc3RlbmVyQXJncyA9IGNvbmNhdChbZXZlbnRdLCBhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgaSwgbGVuZ3RoO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBuYW1lZExpc3RlbmVycyA9IHNjb3BlLiQkbGlzdGVuZXJzW25hbWVdIHx8IGVtcHR5O1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IHNjb3BlO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG5hbWVkTGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIC8vIGlmIGxpc3RlbmVycyB3ZXJlIGRlcmVnaXN0ZXJlZCwgZGVmcmFnbWVudCB0aGUgYXJyYXlcbiAgICAgICAgICAgIGlmICghbmFtZWRMaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vYWxsb3cgYWxsIGxpc3RlbmVycyBhdHRhY2hlZCB0byB0aGUgY3VycmVudCBzY29wZSB0byBydW5cbiAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnNbaV0uYXBwbHkobnVsbCwgbGlzdGVuZXJBcmdzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vaWYgYW55IGxpc3RlbmVyIG9uIHRoZSBjdXJyZW50IHNjb3BlIHN0b3BzIHByb3BhZ2F0aW9uLCBwcmV2ZW50IGJ1YmJsaW5nXG4gICAgICAgICAgaWYgKHN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy90cmF2ZXJzZSB1cHdhcmRzXG4gICAgICAgICAgc2NvcGUgPSBzY29wZS4kcGFyZW50O1xuICAgICAgICB9IHdoaWxlIChzY29wZSk7XG5cbiAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDtcblxuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkYnJvYWRjYXN0XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogRGlzcGF0Y2hlcyBhbiBldmVudCBgbmFtZWAgZG93bndhcmRzIHRvIGFsbCBjaGlsZCBzY29wZXMgKGFuZCB0aGVpciBjaGlsZHJlbikgbm90aWZ5aW5nIHRoZVxuICAgICAgICogcmVnaXN0ZXJlZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGxpc3RlbmVycy5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZXZlbnQgbGlmZSBjeWNsZSBzdGFydHMgYXQgdGhlIHNjb3BlIG9uIHdoaWNoIGAkYnJvYWRjYXN0YCB3YXMgY2FsbGVkLiBBbGxcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IGxpc3RlbmluZyBmb3IgYG5hbWVgIGV2ZW50IG9uIHRoaXMgc2NvcGUgZ2V0XG4gICAgICAgKiBub3RpZmllZC4gQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHByb3BhZ2F0ZXMgdG8gYWxsIGRpcmVjdCBhbmQgaW5kaXJlY3Qgc2NvcGVzIG9mIHRoZSBjdXJyZW50XG4gICAgICAgKiBzY29wZSBhbmQgY2FsbHMgYWxsIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCBjYW5ub3QgYmUgY2FuY2VsZWQuXG4gICAgICAgKlxuICAgICAgICogQW55IGV4Y2VwdGlvbiBlbWl0dGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkXG4gICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBicm9hZGNhc3QuXG4gICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgb25lIG9yIG1vcmUgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gRXZlbnQgb2JqZWN0LCBzZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufVxuICAgICAgICovXG4gICAgICAkYnJvYWRjYXN0OiBmdW5jdGlvbihuYW1lLCBhcmdzKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLFxuICAgICAgICAgICAgY3VycmVudCA9IHRhcmdldCxcbiAgICAgICAgICAgIG5leHQgPSB0YXJnZXQsXG4gICAgICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHRhcmdldCxcbiAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBpZiAoIXRhcmdldC4kJGxpc3RlbmVyQ291bnRbbmFtZV0pIHJldHVybiBldmVudDtcblxuICAgICAgICB2YXIgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBsaXN0ZW5lcnMsIGksIGxlbmd0aDtcblxuICAgICAgICAvL2Rvd24gd2hpbGUgeW91IGNhbiwgdGhlbiB1cCBhbmQgbmV4dCBzaWJsaW5nIG9yIHVwIGFuZCBuZXh0IHNpYmxpbmcgdW50aWwgYmFjayBhdCByb290XG4gICAgICAgIHdoaWxlICgoY3VycmVudCA9IG5leHQpKSB7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gY3VycmVudDtcbiAgICAgICAgICBsaXN0ZW5lcnMgPSBjdXJyZW50LiQkbGlzdGVuZXJzW25hbWVdIHx8IFtdO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheVxuICAgICAgICAgICAgaWYgKCFsaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJbnNhbml0eSBXYXJuaW5nOiBzY29wZSBkZXB0aC1maXJzdCB0cmF2ZXJzYWxcbiAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IVxuICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGRpZ2VzdFxuICAgICAgICAgIC8vICh0aG91Z2ggaXQgZGlmZmVycyBkdWUgdG8gaGF2aW5nIHRoZSBleHRyYSBjaGVjayBmb3IgJCRsaXN0ZW5lckNvdW50KVxuICAgICAgICAgIGlmICghKG5leHQgPSAoKGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdICYmIGN1cnJlbnQuJCRjaGlsZEhlYWQpIHx8XG4gICAgICAgICAgICAgIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7XG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciAkcm9vdFNjb3BlID0gbmV3IFNjb3BlKCk7XG5cbiAgICAvL1RoZSBpbnRlcm5hbCBxdWV1ZXMuIEV4cG9zZSB0aGVtIG9uIHRoZSAkcm9vdFNjb3BlIGZvciBkZWJ1Z2dpbmcvdGVzdGluZyBwdXJwb3Nlcy5cbiAgICB2YXIgYXN5bmNRdWV1ZSA9ICRyb290U2NvcGUuJCRhc3luY1F1ZXVlID0gW107XG4gICAgdmFyIHBvc3REaWdlc3RRdWV1ZSA9ICRyb290U2NvcGUuJCRwb3N0RGlnZXN0UXVldWUgPSBbXTtcbiAgICB2YXIgYXBwbHlBc3luY1F1ZXVlID0gJHJvb3RTY29wZS4kJGFwcGx5QXN5bmNRdWV1ZSA9IFtdO1xuXG4gICAgcmV0dXJuICRyb290U2NvcGU7XG5cblxuICAgIGZ1bmN0aW9uIGJlZ2luUGhhc2UocGhhc2UpIHtcbiAgICAgIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgdGhyb3cgJHJvb3RTY29wZU1pbkVycignaW5wcm9nJywgJ3swfSBhbHJlYWR5IGluIHByb2dyZXNzJywgJHJvb3RTY29wZS4kJHBoYXNlKTtcbiAgICAgIH1cblxuICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gcGhhc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJQaGFzZSgpIHtcbiAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5jcmVtZW50V2F0Y2hlcnNDb3VudChjdXJyZW50LCBjb3VudCkge1xuICAgICAgZG8ge1xuICAgICAgICBjdXJyZW50LiQkd2F0Y2hlcnNDb3VudCArPSBjb3VudDtcbiAgICAgIH0gd2hpbGUgKChjdXJyZW50ID0gY3VycmVudC4kcGFyZW50KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVjcmVtZW50TGlzdGVuZXJDb3VudChjdXJyZW50LCBjb3VudCwgbmFtZSkge1xuICAgICAgZG8ge1xuICAgICAgICBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSAtPSBjb3VudDtcblxuICAgICAgICBpZiAoY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gPT09IDApIHtcbiAgICAgICAgICBkZWxldGUgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV07XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKChjdXJyZW50ID0gY3VycmVudC4kcGFyZW50KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdXNlZCBhcyBhbiBpbml0aWFsIHZhbHVlIGZvciB3YXRjaGVycy5cbiAgICAgKiBiZWNhdXNlIGl0J3MgdW5pcXVlIHdlIGNhbiBlYXNpbHkgdGVsbCBpdCBhcGFydCBmcm9tIG90aGVyIHZhbHVlc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRXYXRjaFZhbCgpIHt9XG5cbiAgICBmdW5jdGlvbiBmbHVzaEFwcGx5QXN5bmMoKSB7XG4gICAgICB3aGlsZSAoYXBwbHlBc3luY1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGFwcGx5QXN5bmNRdWV1ZS5zaGlmdCgpKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXBwbHlBc3luY0lkID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY2hlZHVsZUFwcGx5QXN5bmMoKSB7XG4gICAgICBpZiAoYXBwbHlBc3luY0lkID09PSBudWxsKSB7XG4gICAgICAgIGFwcGx5QXN5bmNJZCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZsdXNoQXBwbHlBc3luYyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKiBQcml2YXRlIHNlcnZpY2UgdG8gc2FuaXRpemUgdXJpcyBmb3IgbGlua3MgYW5kIGltYWdlcy4gVXNlZCBieSAkY29tcGlsZSBhbmQgJHNhbml0aXplLlxuICovXG5mdW5jdGlvbiAkJFNhbml0aXplVXJpUHJvdmlkZXIoKSB7XG4gIHZhciBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IC9eXFxzKihodHRwcz98ZnRwfG1haWx0b3x0ZWx8ZmlsZSk6LyxcbiAgICBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSAvXlxccyooKGh0dHBzP3xmdHB8ZmlsZXxibG9iKTp8ZGF0YTppbWFnZVxcLykvO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBhW2hyZWZdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gcmVnZXhwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3Q7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNhbml0aXplVXJpKHVyaSwgaXNJbWFnZSkge1xuICAgICAgdmFyIHJlZ2V4ID0gaXNJbWFnZSA/IGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA6IGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICAgICAgdmFyIG5vcm1hbGl6ZWRWYWw7XG4gICAgICBub3JtYWxpemVkVmFsID0gdXJsUmVzb2x2ZSh1cmkpLmhyZWY7XG4gICAgICBpZiAobm9ybWFsaXplZFZhbCAhPT0gJycgJiYgIW5vcm1hbGl6ZWRWYWwubWF0Y2gocmVnZXgpKSB7XG4gICAgICAgIHJldHVybiAndW5zYWZlOicgKyBub3JtYWxpemVkVmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVyaTtcbiAgICB9O1xuICB9O1xufVxuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gKiAgICAgQW55IGNvbW1pdHMgdG8gdGhpcyBmaWxlIHNob3VsZCBiZSByZXZpZXdlZCB3aXRoIHNlY3VyaXR5IGluIG1pbmQuICAqXG4gKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgaXMgcmVxdWlyZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gKiAgICBPciBhbGxvd3MgZm9yIHNvbWVvbmUgdG8gY2hhbmdlIHRoZSBwcm90b3R5cGUgb2YgYnVpbHQtaW4gb2JqZWN0cz8gICAqXG4gKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG52YXIgJHNjZU1pbkVyciA9IG1pbkVycignJHNjZScpO1xuXG52YXIgU0NFX0NPTlRFWFRTID0ge1xuICBIVE1MOiAnaHRtbCcsXG4gIENTUzogJ2NzcycsXG4gIFVSTDogJ3VybCcsXG4gIC8vIFJFU09VUkNFX1VSTCBpcyBhIHN1YnR5cGUgb2YgVVJMIHVzZWQgaW4gY29udGV4dHMgd2hlcmUgYSBwcml2aWxlZ2VkIHJlc291cmNlIGlzIHNvdXJjZWQgZnJvbSBhXG4gIC8vIHVybC4gIChlLmcuIG5nLWluY2x1ZGUsIHNjcmlwdCBzcmMsIHRlbXBsYXRlVXJsKVxuICBSRVNPVVJDRV9VUkw6ICdyZXNvdXJjZVVybCcsXG4gIEpTOiAnanMnXG59O1xuXG4vLyBIZWxwZXIgZnVuY3Rpb25zIGZvbGxvdy5cblxuZnVuY3Rpb24gYWRqdXN0TWF0Y2hlcihtYXRjaGVyKSB7XG4gIGlmIChtYXRjaGVyID09PSAnc2VsZicpIHtcbiAgICByZXR1cm4gbWF0Y2hlcjtcbiAgfSBlbHNlIGlmIChpc1N0cmluZyhtYXRjaGVyKSkge1xuICAgIC8vIFN0cmluZ3MgbWF0Y2ggZXhhY3RseSBleGNlcHQgZm9yIDIgd2lsZGNhcmRzIC0gJyonIGFuZCAnKionLlxuICAgIC8vICcqJyBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgZXhjZXB0IHRob3NlIGZyb20gdGhlIHNldCAnOi8uPyYnLlxuICAgIC8vICcqKicgbWF0Y2hlcyBhbnkgY2hhcmFjdGVyIChsaWtlIC4qIGluIGEgUmVnRXhwKS5cbiAgICAvLyBNb3JlIHRoYW4gMiAqJ3MgcmFpc2VzIGFuIGVycm9yIGFzIGl0J3MgaWxsIGRlZmluZWQuXG4gICAgaWYgKG1hdGNoZXIuaW5kZXhPZignKioqJykgPiAtMSkge1xuICAgICAgdGhyb3cgJHNjZU1pbkVycignaXdjYXJkJyxcbiAgICAgICAgICAnSWxsZWdhbCBzZXF1ZW5jZSAqKiogaW4gc3RyaW5nIG1hdGNoZXIuICBTdHJpbmc6IHswfScsIG1hdGNoZXIpO1xuICAgIH1cbiAgICBtYXRjaGVyID0gZXNjYXBlRm9yUmVnZXhwKG1hdGNoZXIpLlxuICAgICAgICAgICAgICAgICAgcmVwbGFjZSgnXFxcXCpcXFxcKicsICcuKicpLlxuICAgICAgICAgICAgICAgICAgcmVwbGFjZSgnXFxcXConLCAnW146Ly4/JjtdKicpO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIG1hdGNoZXIgKyAnJCcpO1xuICB9IGVsc2UgaWYgKGlzUmVnRXhwKG1hdGNoZXIpKSB7XG4gICAgLy8gVGhlIG9ubHkgb3RoZXIgdHlwZSBvZiBtYXRjaGVyIGFsbG93ZWQgaXMgYSBSZWdleHAuXG4gICAgLy8gTWF0Y2ggZW50aXJlIFVSTCAvIGRpc2FsbG93IHBhcnRpYWwgbWF0Y2hlcy5cbiAgICAvLyBGbGFncyBhcmUgcmVzZXQgKGkuZS4gbm8gZ2xvYmFsLCBpZ25vcmVDYXNlIG9yIG11bHRpbGluZSlcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVyLnNvdXJjZSArICckJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgJHNjZU1pbkVycignaW1hdGNoZXInLFxuICAgICAgICAnTWF0Y2hlcnMgbWF5IG9ubHkgYmUgXCJzZWxmXCIsIHN0cmluZyBwYXR0ZXJucyBvciBSZWdFeHAgb2JqZWN0cycpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gYWRqdXN0TWF0Y2hlcnMobWF0Y2hlcnMpIHtcbiAgdmFyIGFkanVzdGVkTWF0Y2hlcnMgPSBbXTtcbiAgaWYgKGlzRGVmaW5lZChtYXRjaGVycykpIHtcbiAgICBmb3JFYWNoKG1hdGNoZXJzLCBmdW5jdGlvbihtYXRjaGVyKSB7XG4gICAgICBhZGp1c3RlZE1hdGNoZXJzLnB1c2goYWRqdXN0TWF0Y2hlcihtYXRjaGVyKSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGFkanVzdGVkTWF0Y2hlcnM7XG59XG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHNjZURlbGVnYXRlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGAkc2NlRGVsZWdhdGVgIGlzIGEgc2VydmljZSB0aGF0IGlzIHVzZWQgYnkgdGhlIGAkc2NlYCBzZXJ2aWNlIHRvIHByb3ZpZGUge0BsaW5rIG5nLiRzY2UgU3RyaWN0XG4gKiBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfSBzZXJ2aWNlcyB0byBBbmd1bGFySlMuXG4gKlxuICogVHlwaWNhbGx5LCB5b3Ugd291bGQgY29uZmlndXJlIG9yIG92ZXJyaWRlIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlICRzY2VEZWxlZ2F0ZX0gaW5zdGVhZCBvZlxuICogdGhlIGAkc2NlYCBzZXJ2aWNlIHRvIGN1c3RvbWl6ZSB0aGUgd2F5IFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIHdvcmtzIGluIEFuZ3VsYXJKUy4gIFRoaXMgaXNcbiAqIGJlY2F1c2UsIHdoaWxlIHRoZSBgJHNjZWAgcHJvdmlkZXMgbnVtZXJvdXMgc2hvcnRoYW5kIG1ldGhvZHMsIGV0Yy4sIHlvdSByZWFsbHkgb25seSBuZWVkIHRvXG4gKiBvdmVycmlkZSAzIGNvcmUgZnVuY3Rpb25zIChgdHJ1c3RBc2AsIGBnZXRUcnVzdGVkYCBhbmQgYHZhbHVlT2ZgKSB0byByZXBsYWNlIHRoZSB3YXkgdGhpbmdzXG4gKiB3b3JrIGJlY2F1c2UgYCRzY2VgIGRlbGVnYXRlcyB0byBgJHNjZURlbGVnYXRlYCBmb3IgdGhlc2Ugb3BlcmF0aW9ucy5cbiAqXG4gKiBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIgJHNjZURlbGVnYXRlUHJvdmlkZXJ9IHRvIGNvbmZpZ3VyZSB0aGlzIHNlcnZpY2UuXG4gKlxuICogVGhlIGRlZmF1bHQgaW5zdGFuY2Ugb2YgYCRzY2VEZWxlZ2F0ZWAgc2hvdWxkIHdvcmsgb3V0IG9mIHRoZSBib3ggd2l0aCBsaXR0bGUgcGFpbi4gIFdoaWxlIHlvdVxuICogY2FuIG92ZXJyaWRlIGl0IGNvbXBsZXRlbHkgdG8gY2hhbmdlIHRoZSBiZWhhdmlvciBvZiBgJHNjZWAsIHRoZSBjb21tb24gY2FzZSB3b3VsZFxuICogaW52b2x2ZSBjb25maWd1cmluZyB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSBpbnN0ZWFkIGJ5IHNldHRpbmdcbiAqIHlvdXIgb3duIHdoaXRlbGlzdHMgYW5kIGJsYWNrbGlzdHMgZm9yIHRydXN0aW5nIFVSTHMgdXNlZCBmb3IgbG9hZGluZyBBbmd1bGFySlMgcmVzb3VyY2VzIHN1Y2ggYXNcbiAqIHRlbXBsYXRlcy4gIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdFxuICogJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3R9IGFuZCB7QGxpbmtcbiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0fVxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkc2NlRGVsZWdhdGVQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGAkc2NlRGVsZWdhdGVQcm92aWRlcmAgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlXG4gKiAkc2NlRGVsZWdhdGV9IHNlcnZpY2UuICBUaGlzIGFsbG93cyBvbmUgdG8gZ2V0L3NldCB0aGUgd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyB1c2VkIHRvIGVuc3VyZVxuICogdGhhdCB0aGUgVVJMcyB1c2VkIGZvciBzb3VyY2luZyBBbmd1bGFyIHRlbXBsYXRlcyBhcmUgc2FmZS4gIFJlZmVyIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3R9IGFuZFxuICoge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0fVxuICpcbiAqIEZvciB0aGUgZ2VuZXJhbCBkZXRhaWxzIGFib3V0IHRoaXMgc2VydmljZSBpbiBBbmd1bGFyLCByZWFkIHRoZSBtYWluIHBhZ2UgZm9yIHtAbGluayBuZy4kc2NlXG4gKiBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKlxuICogKipFeGFtcGxlKio6ICBDb25zaWRlciB0aGUgZm9sbG93aW5nIGNhc2UuIDxhIG5hbWU9XCJleGFtcGxlXCI+PC9hPlxuICpcbiAqIC0geW91ciBhcHAgaXMgaG9zdGVkIGF0IHVybCBgaHR0cDovL215YXBwLmV4YW1wbGUuY29tL2BcbiAqIC0gYnV0IHNvbWUgb2YgeW91ciB0ZW1wbGF0ZXMgYXJlIGhvc3RlZCBvbiBvdGhlciBkb21haW5zIHlvdSBjb250cm9sIHN1Y2ggYXNcbiAqICAgYGh0dHA6Ly9zcnYwMS5hc3NldHMuZXhhbXBsZS5jb20vYCzCoCBgaHR0cDovL3NydjAyLmFzc2V0cy5leGFtcGxlLmNvbS9gLCBldGMuXG4gKiAtIGFuZCB5b3UgaGF2ZSBhbiBvcGVuIHJlZGlyZWN0IGF0IGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vY2xpY2tUaHJ1Py4uLmAuXG4gKlxuICogSGVyZSBpcyB3aGF0IGEgc2VjdXJlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgc2NlbmFyaW8gbWlnaHQgbG9vayBsaWtlOlxuICpcbiAqIGBgYFxuICogIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKS5jb25maWcoZnVuY3Rpb24oJHNjZURlbGVnYXRlUHJvdmlkZXIpIHtcbiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0KFtcbiAqICAgICAgLy8gQWxsb3cgc2FtZSBvcmlnaW4gcmVzb3VyY2UgbG9hZHMuXG4gKiAgICAgICdzZWxmJyxcbiAqICAgICAgLy8gQWxsb3cgbG9hZGluZyBmcm9tIG91ciBhc3NldHMgZG9tYWluLiAgTm90aWNlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gKiBhbmQgKiouXG4gKiAgICAgICdodHRwOi8vc3J2Ki5hc3NldHMuZXhhbXBsZS5jb20vKionXG4gKiAgICBdKTtcbiAqXG4gKiAgICAvLyBUaGUgYmxhY2tsaXN0IG92ZXJyaWRlcyB0aGUgd2hpdGVsaXN0IHNvIHRoZSBvcGVuIHJlZGlyZWN0IGhlcmUgaXMgYmxvY2tlZC5cbiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0KFtcbiAqICAgICAgJ2h0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9jbGlja1RocnUqKidcbiAqICAgIF0pO1xuICogIH0pO1xuICogYGBgXG4gKi9cblxuZnVuY3Rpb24gJFNjZURlbGVnYXRlUHJvdmlkZXIoKSB7XG4gIHRoaXMuU0NFX0NPTlRFWFRTID0gU0NFX0NPTlRFWFRTO1xuXG4gIC8vIFJlc291cmNlIFVSTHMgY2FuIGFsc28gYmUgdHJ1c3RlZCBieSBwb2xpY3kuXG4gIHZhciByZXNvdXJjZVVybFdoaXRlbGlzdCA9IFsnc2VsZiddLFxuICAgICAgcmVzb3VyY2VVcmxCbGFja2xpc3QgPSBbXTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PX0gd2hpdGVsaXN0IFdoZW4gcHJvdmlkZWQsIHJlcGxhY2VzIHRoZSByZXNvdXJjZVVybFdoaXRlbGlzdCB3aXRoIHRoZSB2YWx1ZVxuICAgKiAgICAgcHJvdmlkZWQuICBUaGlzIG11c3QgYmUgYW4gYXJyYXkgb3IgbnVsbC4gIEEgc25hcHNob3Qgb2YgdGhpcyBhcnJheSBpcyB1c2VkIHNvIGZ1cnRoZXJcbiAgICogICAgIGNoYW5nZXMgdG8gdGhlIGFycmF5IGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgRm9sbG93IHtAbGluayBuZy4kc2NlI3Jlc291cmNlVXJsUGF0dGVybkl0ZW0gdGhpcyBsaW5rfSBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbXNcbiAgICogICAgIGFsbG93ZWQgaW4gdGhpcyBhcnJheS5cbiAgICpcbiAgICogICAgIE5vdGU6ICoqYW4gZW1wdHkgd2hpdGVsaXN0IGFycmF5IHdpbGwgYmxvY2sgYWxsIFVSTHMqKiFcbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9IHRoZSBjdXJyZW50bHkgc2V0IHdoaXRlbGlzdCBhcnJheS5cbiAgICpcbiAgICogVGhlICoqZGVmYXVsdCB2YWx1ZSoqIHdoZW4gbm8gd2hpdGVsaXN0IGhhcyBiZWVuIGV4cGxpY2l0bHkgc2V0IGlzIGBbJ3NlbGYnXWAgYWxsb3dpbmcgb25seVxuICAgKiBzYW1lIG9yaWdpbiByZXNvdXJjZSByZXF1ZXN0cy5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMvR2V0cyB0aGUgd2hpdGVsaXN0IG9mIHRydXN0ZWQgcmVzb3VyY2UgVVJMcy5cbiAgICovXG4gIHRoaXMucmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXNvdXJjZVVybFdoaXRlbGlzdCA9IGFkanVzdE1hdGNoZXJzKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc291cmNlVXJsV2hpdGVsaXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk9fSBibGFja2xpc3QgV2hlbiBwcm92aWRlZCwgcmVwbGFjZXMgdGhlIHJlc291cmNlVXJsQmxhY2tsaXN0IHdpdGggdGhlIHZhbHVlXG4gICAqICAgICBwcm92aWRlZC4gIFRoaXMgbXVzdCBiZSBhbiBhcnJheSBvciBudWxsLiAgQSBzbmFwc2hvdCBvZiB0aGlzIGFycmF5IGlzIHVzZWQgc28gZnVydGhlclxuICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuXG4gICAqXG4gICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtc1xuICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LlxuICAgKlxuICAgKiAgICAgVGhlIHR5cGljYWwgdXNhZ2UgZm9yIHRoZSBibGFja2xpc3QgaXMgdG8gKipibG9ja1xuICAgKiAgICAgW29wZW4gcmVkaXJlY3RzXShodHRwOi8vY3dlLm1pdHJlLm9yZy9kYXRhL2RlZmluaXRpb25zLzYwMS5odG1sKSoqIHNlcnZlZCBieSB5b3VyIGRvbWFpbiBhc1xuICAgKiAgICAgdGhlc2Ugd291bGQgb3RoZXJ3aXNlIGJlIHRydXN0ZWQgYnV0IGFjdHVhbGx5IHJldHVybiBjb250ZW50IGZyb20gdGhlIHJlZGlyZWN0ZWQgZG9tYWluLlxuICAgKlxuICAgKiAgICAgRmluYWxseSwgKip0aGUgYmxhY2tsaXN0IG92ZXJyaWRlcyB0aGUgd2hpdGVsaXN0KiogYW5kIGhhcyB0aGUgZmluYWwgc2F5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheX0gdGhlIGN1cnJlbnRseSBzZXQgYmxhY2tsaXN0IGFycmF5LlxuICAgKlxuICAgKiBUaGUgKipkZWZhdWx0IHZhbHVlKiogd2hlbiBubyB3aGl0ZWxpc3QgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQgaXMgdGhlIGVtcHR5IGFycmF5IChpLmUuIHRoZXJlXG4gICAqIGlzIG5vIGJsYWNrbGlzdC4pXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzL0dldHMgdGhlIGJsYWNrbGlzdCBvZiB0cnVzdGVkIHJlc291cmNlIFVSTHMuXG4gICAqL1xuXG4gIHRoaXMucmVzb3VyY2VVcmxCbGFja2xpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXNvdXJjZVVybEJsYWNrbGlzdCA9IGFkanVzdE1hdGNoZXJzKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc291cmNlVXJsQmxhY2tsaXN0O1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7XG5cbiAgICB2YXIgaHRtbFNhbml0aXplciA9IGZ1bmN0aW9uIGh0bWxTYW5pdGl6ZXIoaHRtbCkge1xuICAgICAgdGhyb3cgJHNjZU1pbkVycigndW5zYWZlJywgJ0F0dGVtcHRpbmcgdG8gdXNlIGFuIHVuc2FmZSB2YWx1ZSBpbiBhIHNhZmUgY29udGV4dC4nKTtcbiAgICB9O1xuXG4gICAgaWYgKCRpbmplY3Rvci5oYXMoJyRzYW5pdGl6ZScpKSB7XG4gICAgICBodG1sU2FuaXRpemVyID0gJGluamVjdG9yLmdldCgnJHNhbml0aXplJyk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBtYXRjaFVybChtYXRjaGVyLCBwYXJzZWRVcmwpIHtcbiAgICAgIGlmIChtYXRjaGVyID09PSAnc2VsZicpIHtcbiAgICAgICAgcmV0dXJuIHVybElzU2FtZU9yaWdpbihwYXJzZWRVcmwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmaW5pdGVseSBhIHJlZ2V4LiAgU2VlIGFkanVzdE1hdGNoZXJzKClcbiAgICAgICAgcmV0dXJuICEhbWF0Y2hlci5leGVjKHBhcnNlZFVybC5ocmVmKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1Jlc291cmNlVXJsQWxsb3dlZEJ5UG9saWN5KHVybCkge1xuICAgICAgdmFyIHBhcnNlZFVybCA9IHVybFJlc29sdmUodXJsLnRvU3RyaW5nKCkpO1xuICAgICAgdmFyIGksIG4sIGFsbG93ZWQgPSBmYWxzZTtcbiAgICAgIC8vIEVuc3VyZSB0aGF0IGF0IGxlYXN0IG9uZSBpdGVtIGZyb20gdGhlIHdoaXRlbGlzdCBhbGxvd3MgdGhpcyB1cmwuXG4gICAgICBmb3IgKGkgPSAwLCBuID0gcmVzb3VyY2VVcmxXaGl0ZWxpc3QubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybFdoaXRlbGlzdFtpXSwgcGFyc2VkVXJsKSkge1xuICAgICAgICAgIGFsbG93ZWQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYWxsb3dlZCkge1xuICAgICAgICAvLyBFbnN1cmUgdGhhdCBubyBpdGVtIGZyb20gdGhlIGJsYWNrbGlzdCBibG9ja2VkIHRoaXMgdXJsLlxuICAgICAgICBmb3IgKGkgPSAwLCBuID0gcmVzb3VyY2VVcmxCbGFja2xpc3QubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgaWYgKG1hdGNoVXJsKHJlc291cmNlVXJsQmxhY2tsaXN0W2ldLCBwYXJzZWRVcmwpKSB7XG4gICAgICAgICAgICBhbGxvd2VkID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhbGxvd2VkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlSG9sZGVyVHlwZShCYXNlKSB7XG4gICAgICB2YXIgaG9sZGVyVHlwZSA9IGZ1bmN0aW9uIFRydXN0ZWRWYWx1ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIGlmIChCYXNlKSB7XG4gICAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlID0gbmV3IEJhc2UoKTtcbiAgICAgIH1cbiAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiBzY2VWYWx1ZU9mKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpO1xuICAgICAgfTtcbiAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gc2NlVG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCkudG9TdHJpbmcoKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gaG9sZGVyVHlwZTtcbiAgICB9XG5cbiAgICB2YXIgdHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSA9IGdlbmVyYXRlSG9sZGVyVHlwZSgpLFxuICAgICAgICBieVR5cGUgPSB7fTtcblxuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuSFRNTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5DU1NdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuVVJMXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkpTXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUoYnlUeXBlW1NDRV9DT05URVhUUy5VUkxdKTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBpcyB0cnVzdGVkIGJ5IGFuZ3VsYXIgZm9yIHVzZSBpbiBzcGVjaWZpZWQgc3RyaWN0XG4gICAgICogY29udGV4dHVhbCBlc2NhcGluZyBjb250ZXh0cyAoc3VjaCBhcyBuZy1iaW5kLWh0bWwsIG5nLWluY2x1ZGUsIGFueSBzcmNcbiAgICAgKiBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiwgYW55IGRvbSBldmVudCBiaW5kaW5nIGF0dHJpYnV0ZSBpbnRlcnBvbGF0aW9uXG4gICAgICogc3VjaCBhcyBmb3Igb25jbGljaywgIGV0Yy4pIHRoYXQgdXNlcyB0aGUgcHJvdmlkZWQgdmFsdWUuXG4gICAgICogU2VlIHtAbGluayBuZy4kc2NlICRzY2V9IGZvciBlbmFibGluZyBzdHJpY3QgY29udGV4dHVhbCBlc2NhcGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyBzYWZlIGZvciB1c2UuICBlLmcuIHVybCxcbiAgICAgKiAgIHJlc291cmNlVXJsLCBodG1sLCBqcyBhbmQgY3NzLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZCB0cnVzdGVkL3NhZmUuXG4gICAgICogQHJldHVybnMgeyp9IEEgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB0byBzdGFuZCBpbiBmb3IgdGhlIHByb3ZpZGVkIGB2YWx1ZWAgaW4gcGxhY2VzXG4gICAgICogd2hlcmUgQW5ndWxhciBleHBlY3RzIGEgJHNjZS50cnVzdEFzKCkgcmV0dXJuIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRydXN0QXModHlwZSwgdHJ1c3RlZFZhbHVlKSB7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSAoYnlUeXBlLmhhc093blByb3BlcnR5KHR5cGUpID8gYnlUeXBlW3R5cGVdIDogbnVsbCk7XG4gICAgICBpZiAoIUNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2ljb250ZXh0JyxcbiAgICAgICAgICAgICdBdHRlbXB0ZWQgdG8gdHJ1c3QgYSB2YWx1ZSBpbiBpbnZhbGlkIGNvbnRleHQuIENvbnRleHQ6IHswfTsgVmFsdWU6IHsxfScsXG4gICAgICAgICAgICB0eXBlLCB0cnVzdGVkVmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHRydXN0ZWRWYWx1ZSA9PT0gbnVsbCB8fCBpc1VuZGVmaW5lZCh0cnVzdGVkVmFsdWUpIHx8IHRydXN0ZWRWYWx1ZSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIHRydXN0ZWRWYWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIEFsbCB0aGUgY3VycmVudCBjb250ZXh0cyBpbiBTQ0VfQ09OVEVYVFMgaGFwcGVuIHRvIGJlIHN0cmluZ3MuICBJbiBvcmRlciB0byBhdm9pZCB0cnVzdGluZ1xuICAgICAgLy8gbXV0YWJsZSBvYmplY3RzLCB3ZSBlbnN1cmUgaGVyZSB0aGF0IHRoZSB2YWx1ZSBwYXNzZWQgaW4gaXMgYWN0dWFsbHkgYSBzdHJpbmcuXG4gICAgICBpZiAodHlwZW9mIHRydXN0ZWRWYWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgJHNjZU1pbkVycignaXR5cGUnLFxuICAgICAgICAgICAgJ0F0dGVtcHRlZCB0byB0cnVzdCBhIG5vbi1zdHJpbmcgdmFsdWUgaW4gYSBjb250ZW50IHJlcXVpcmluZyBhIHN0cmluZzogQ29udGV4dDogezB9JyxcbiAgICAgICAgICAgIHR5cGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0cnVzdGVkVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlRGVsZWdhdGUjdmFsdWVPZlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogSWYgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgaGFkIGJlZW4gcmV0dXJuZWQgYnkgYSBwcmlvciBjYWxsIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LCByZXR1cm5zIHRoZSB2YWx1ZSB0aGF0IGhhZCBiZWVuIHBhc3NlZCB0byB7QGxpbmtcbiAgICAgKiBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfS5cbiAgICAgKlxuICAgICAqIElmIHRoZSBwYXNzZWQgcGFyYW1ldGVyIGlzIG5vdCBhIHZhbHVlIHRoYXQgaGFkIGJlZW4gcmV0dXJuZWQgYnkge0BsaW5rXG4gICAgICogbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0sIHJldHVybnMgaXQgYXMtaXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSByZXN1bHQgb2YgYSBwcmlvciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH1cbiAgICAgKiAgICAgIGNhbGwgb3IgYW55dGhpbmcgZWxzZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIGB2YWx1ZWAgdGhhdCB3YXMgb3JpZ2luYWxseSBwcm92aWRlZCB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gaWYgYHZhbHVlYCBpcyB0aGUgcmVzdWx0IG9mIHN1Y2ggYSBjYWxsLiAgT3RoZXJ3aXNlLCByZXR1cm5zXG4gICAgICogICAgIGB2YWx1ZWAgdW5jaGFuZ2VkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlT2YobWF5YmVUcnVzdGVkKSB7XG4gICAgICBpZiAobWF5YmVUcnVzdGVkIGluc3RhbmNlb2YgdHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSkge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGFrZXMgdGhlIHJlc3VsdCBvZiBhIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBjYWxsIGFuZFxuICAgICAqIHJldHVybnMgdGhlIG9yaWdpbmFsbHkgc3VwcGxpZWQgdmFsdWUgaWYgdGhlIHF1ZXJpZWQgY29udGV4dCB0eXBlIGlzIGEgc3VwZXJ0eXBlIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgdHlwZS4gIElmIHRoaXMgY29uZGl0aW9uIGlzbid0IHNhdGlzZmllZCwgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyB0byBiZSB1c2VkLlxuICAgICAqIEBwYXJhbSB7Kn0gbWF5YmVUcnVzdGVkIFRoZSByZXN1bHQgb2YgYSBwcmlvciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gY2FsbC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoZSB3YXMgb3JpZ2luYWxseSBwcm92aWRlZCB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gaWYgdmFsaWQgaW4gdGhpcyBjb250ZXh0LiAgT3RoZXJ3aXNlLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFRydXN0ZWQodHlwZSwgbWF5YmVUcnVzdGVkKSB7XG4gICAgICBpZiAobWF5YmVUcnVzdGVkID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKG1heWJlVHJ1c3RlZCkgfHwgbWF5YmVUcnVzdGVkID09PSAnJykge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpO1xuICAgICAgaWYgKGNvbnN0cnVjdG9yICYmIG1heWJlVHJ1c3RlZCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHdlIGdldCBoZXJlLCB0aGVuIHdlIG1heSBvbmx5IHRha2Ugb25lIG9mIHR3byBhY3Rpb25zLlxuICAgICAgLy8gMS4gc2FuaXRpemUgdGhlIHZhbHVlIGZvciB0aGUgcmVxdWVzdGVkIHR5cGUsIG9yXG4gICAgICAvLyAyLiB0aHJvdyBhbiBleGNlcHRpb24uXG4gICAgICBpZiAodHlwZSA9PT0gU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTCkge1xuICAgICAgICBpZiAoaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeShtYXliZVRydXN0ZWQpKSB7XG4gICAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpbnNlY3VybCcsXG4gICAgICAgICAgICAgICdCbG9ja2VkIGxvYWRpbmcgcmVzb3VyY2UgZnJvbSB1cmwgbm90IGFsbG93ZWQgYnkgJHNjZURlbGVnYXRlIHBvbGljeS4gIFVSTDogezB9JyxcbiAgICAgICAgICAgICAgbWF5YmVUcnVzdGVkLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFNDRV9DT05URVhUUy5IVE1MKSB7XG4gICAgICAgIHJldHVybiBodG1sU2FuaXRpemVyKG1heWJlVHJ1c3RlZCk7XG4gICAgICB9XG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCd1bnNhZmUnLCAnQXR0ZW1wdGluZyB0byB1c2UgYW4gdW5zYWZlIHZhbHVlIGluIGEgc2FmZSBjb250ZXh0LicpO1xuICAgIH1cblxuICAgIHJldHVybiB7IHRydXN0QXM6IHRydXN0QXMsXG4gICAgICAgICAgICAgZ2V0VHJ1c3RlZDogZ2V0VHJ1c3RlZCxcbiAgICAgICAgICAgICB2YWx1ZU9mOiB2YWx1ZU9mIH07XG4gIH1dO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkc2NlUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSAkc2NlUHJvdmlkZXIgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBzZXJ2aWNlLlxuICogLSAgIGVuYWJsZS9kaXNhYmxlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGluIGEgbW9kdWxlXG4gKiAtICAgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gd2l0aCBhIGN1c3RvbSBkZWxlZ2F0ZVxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB7QGxpbmsgbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKi9cblxuLyoganNoaW50IG1heGxlbjogZmFsc2UqL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkc2NlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGAkc2NlYCBpcyBhIHNlcnZpY2UgdGhhdCBwcm92aWRlcyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBzZXJ2aWNlcyB0byBBbmd1bGFySlMuXG4gKlxuICogIyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZ1xuICpcbiAqIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGlzIGEgbW9kZSBpbiB3aGljaCBBbmd1bGFySlMgcmVxdWlyZXMgYmluZGluZ3MgaW4gY2VydGFpblxuICogY29udGV4dHMgdG8gcmVzdWx0IGluIGEgdmFsdWUgdGhhdCBpcyBtYXJrZWQgYXMgc2FmZSB0byB1c2UgZm9yIHRoYXQgY29udGV4dC4gIE9uZSBleGFtcGxlIG9mXG4gKiBzdWNoIGEgY29udGV4dCBpcyBiaW5kaW5nIGFyYml0cmFyeSBodG1sIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIgdmlhIGBuZy1iaW5kLWh0bWxgLiAgV2UgcmVmZXJcbiAqIHRvIHRoZXNlIGNvbnRleHRzIGFzIHByaXZpbGVnZWQgb3IgU0NFIGNvbnRleHRzLlxuICpcbiAqIEFzIG9mIHZlcnNpb24gMS4yLCBBbmd1bGFyIHNoaXBzIHdpdGggU0NFIGVuYWJsZWQgYnkgZGVmYXVsdC5cbiAqXG4gKiBOb3RlOiAgV2hlbiBlbmFibGVkICh0aGUgZGVmYXVsdCksIElFPDExIGluIHF1aXJrcyBtb2RlIGlzIG5vdCBzdXBwb3J0ZWQuICBJbiB0aGlzIG1vZGUsIElFPDExIGFsbG93XG4gKiBvbmUgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgamF2YXNjcmlwdCBieSB0aGUgdXNlIG9mIHRoZSBleHByZXNzaW9uKCkgc3ludGF4LiAgUmVmZXJcbiAqIDxodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZS9hcmNoaXZlLzIwMDgvMTAvMTYvZW5kaW5nLWV4cHJlc3Npb25zLmFzcHg+IHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlbS5cbiAqIFlvdSBjYW4gZW5zdXJlIHlvdXIgZG9jdW1lbnQgaXMgaW4gc3RhbmRhcmRzIG1vZGUgYW5kIG5vdCBxdWlya3MgbW9kZSBieSBhZGRpbmcgYDwhZG9jdHlwZSBodG1sPmBcbiAqIHRvIHRoZSB0b3Agb2YgeW91ciBIVE1MIGRvY3VtZW50LlxuICpcbiAqIFNDRSBhc3Npc3RzIGluIHdyaXRpbmcgY29kZSBpbiB3YXkgdGhhdCAoYSkgaXMgc2VjdXJlIGJ5IGRlZmF1bHQgYW5kIChiKSBtYWtlcyBhdWRpdGluZyBmb3JcbiAqIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcyBzdWNoIGFzIFhTUywgY2xpY2tqYWNraW5nLCBldGMuIGEgbG90IGVhc2llci5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBhIGJpbmRpbmcgaW4gYSBwcml2aWxlZ2VkIGNvbnRleHQ6XG4gKlxuICogYGBgXG4gKiA8aW5wdXQgbmctbW9kZWw9XCJ1c2VySHRtbFwiIGFyaWEtbGFiZWw9XCJVc2VyIGlucHV0XCI+XG4gKiA8ZGl2IG5nLWJpbmQtaHRtbD1cInVzZXJIdG1sXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhhdCBgbmctYmluZC1odG1sYCBpcyBib3VuZCB0byBgdXNlckh0bWxgIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIuICBXaXRoIFNDRVxuICogZGlzYWJsZWQsIHRoaXMgYXBwbGljYXRpb24gYWxsb3dzIHRoZSB1c2VyIHRvIHJlbmRlciBhcmJpdHJhcnkgSFRNTCBpbnRvIHRoZSBESVYuXG4gKiBJbiBhIG1vcmUgcmVhbGlzdGljIGV4YW1wbGUsIG9uZSBtYXkgYmUgcmVuZGVyaW5nIHVzZXIgY29tbWVudHMsIGJsb2cgYXJ0aWNsZXMsIGV0Yy4gdmlhXG4gKiBiaW5kaW5ncy4gIChIVE1MIGlzIGp1c3Qgb25lIGV4YW1wbGUgb2YgYSBjb250ZXh0IHdoZXJlIHJlbmRlcmluZyB1c2VyIGNvbnRyb2xsZWQgaW5wdXQgY3JlYXRlc1xuICogc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLilcbiAqXG4gKiBGb3IgdGhlIGNhc2Ugb2YgSFRNTCwgeW91IG1pZ2h0IHVzZSBhIGxpYnJhcnksIGVpdGhlciBvbiB0aGUgY2xpZW50IHNpZGUsIG9yIG9uIHRoZSBzZXJ2ZXIgc2lkZSxcbiAqIHRvIHNhbml0aXplIHVuc2FmZSBIVE1MIGJlZm9yZSBiaW5kaW5nIHRvIHRoZSB2YWx1ZSBhbmQgcmVuZGVyaW5nIGl0IGluIHRoZSBkb2N1bWVudC5cbiAqXG4gKiBIb3cgd291bGQgeW91IGVuc3VyZSB0aGF0IGV2ZXJ5IHBsYWNlIHRoYXQgdXNlZCB0aGVzZSB0eXBlcyBvZiBiaW5kaW5ncyB3YXMgYm91bmQgdG8gYSB2YWx1ZSB0aGF0XG4gKiB3YXMgc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSAob3IgcmV0dXJuZWQgYXMgc2FmZSBmb3IgcmVuZGVyaW5nIGJ5IHlvdXIgc2VydmVyPykgIEhvdyBjYW4geW91XG4gKiBlbnN1cmUgdGhhdCB5b3UgZGlkbid0IGFjY2lkZW50YWxseSBkZWxldGUgdGhlIGxpbmUgdGhhdCBzYW5pdGl6ZWQgdGhlIHZhbHVlLCBvciByZW5hbWVkIHNvbWVcbiAqIHByb3BlcnRpZXMvZmllbGRzIGFuZCBmb3Jnb3QgdG8gdXBkYXRlIHRoZSBiaW5kaW5nIHRvIHRoZSBzYW5pdGl6ZWQgdmFsdWU/XG4gKlxuICogVG8gYmUgc2VjdXJlIGJ5IGRlZmF1bHQsIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IGFueSBzdWNoIGJpbmRpbmdzIGFyZSBkaXNhbGxvd2VkIHVubGVzcyB5b3UgY2FuXG4gKiBkZXRlcm1pbmUgdGhhdCBzb21ldGhpbmcgZXhwbGljaXRseSBzYXlzIGl0J3Mgc2FmZSB0byB1c2UgYSB2YWx1ZSBmb3IgYmluZGluZyBpbiB0aGF0XG4gKiBjb250ZXh0LiAgWW91IGNhbiB0aGVuIGF1ZGl0IHlvdXIgY29kZSAoYSBzaW1wbGUgZ3JlcCB3b3VsZCBkbykgdG8gZW5zdXJlIHRoYXQgdGhpcyBpcyBvbmx5IGRvbmVcbiAqIGZvciB0aG9zZSB2YWx1ZXMgdGhhdCB5b3UgY2FuIGVhc2lseSB0ZWxsIGFyZSBzYWZlIC0gYmVjYXVzZSB0aGV5IHdlcmUgcmVjZWl2ZWQgZnJvbSB5b3VyIHNlcnZlcixcbiAqIHNhbml0aXplZCBieSB5b3VyIGxpYnJhcnksIGV0Yy4gIFlvdSBjYW4gb3JnYW5pemUgeW91ciBjb2RlYmFzZSB0byBoZWxwIHdpdGggdGhpcyAtIHBlcmhhcHNcbiAqIGFsbG93aW5nIG9ubHkgdGhlIGZpbGVzIGluIGEgc3BlY2lmaWMgZGlyZWN0b3J5IHRvIGRvIHRoaXMuICBFbnN1cmluZyB0aGF0IHRoZSBpbnRlcm5hbCBBUElcbiAqIGV4cG9zZWQgYnkgdGhhdCBjb2RlIGRvZXNuJ3QgbWFya3VwIGFyYml0cmFyeSB2YWx1ZXMgYXMgc2FmZSB0aGVuIGJlY29tZXMgYSBtb3JlIG1hbmFnZWFibGUgdGFzay5cbiAqXG4gKiBJbiB0aGUgY2FzZSBvZiBBbmd1bGFySlMnIFNDRSBzZXJ2aWNlLCBvbmUgdXNlcyB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc31cbiAqIChhbmQgc2hvcnRoYW5kIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzSHRtbCAkc2NlLnRydXN0QXNIdG1sfSwgZXRjLikgdG9cbiAqIG9idGFpbiB2YWx1ZXMgdGhhdCB3aWxsIGJlIGFjY2VwdGVkIGJ5IFNDRSAvIHByaXZpbGVnZWQgY29udGV4dHMuXG4gKlxuICpcbiAqICMjIEhvdyBkb2VzIGl0IHdvcms/XG4gKlxuICogSW4gcHJpdmlsZWdlZCBjb250ZXh0cywgZGlyZWN0aXZlcyBhbmQgY29kZSB3aWxsIGJpbmQgdG8gdGhlIHJlc3VsdCBvZiB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkXG4gKiAkc2NlLmdldFRydXN0ZWQoY29udGV4dCwgdmFsdWUpfSByYXRoZXIgdGhhbiB0byB0aGUgdmFsdWUgZGlyZWN0bHkuICBEaXJlY3RpdmVzIHVzZSB7QGxpbmtcbiAqIG5nLiRzY2UjcGFyc2VBcyAkc2NlLnBhcnNlQXN9IHJhdGhlciB0aGFuIGAkcGFyc2VgIHRvIHdhdGNoIGF0dHJpYnV0ZSBiaW5kaW5ncywgd2hpY2ggcGVyZm9ybXMgdGhlXG4gKiB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0gYmVoaW5kIHRoZSBzY2VuZXMgb24gbm9uLWNvbnN0YW50IGxpdGVyYWxzLlxuICpcbiAqIEFzIGFuIGV4YW1wbGUsIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSB1c2VzIHtAbGlua1xuICogbmcuJHNjZSNwYXJzZUFzSHRtbCAkc2NlLnBhcnNlQXNIdG1sKGJpbmRpbmcgZXhwcmVzc2lvbil9LiAgSGVyZSdzIHRoZSBhY3R1YWwgY29kZSAoc2xpZ2h0bHlcbiAqIHNpbXBsaWZpZWQpOlxuICpcbiAqIGBgYFxuICogdmFyIG5nQmluZEh0bWxEaXJlY3RpdmUgPSBbJyRzY2UnLCBmdW5jdGlvbigkc2NlKSB7XG4gKiAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICogICAgIHNjb3BlLiR3YXRjaCgkc2NlLnBhcnNlQXNIdG1sKGF0dHIubmdCaW5kSHRtbCksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgICBlbGVtZW50Lmh0bWwodmFsdWUgfHwgJycpO1xuICogICAgIH0pO1xuICogICB9O1xuICogfV07XG4gKiBgYGBcbiAqXG4gKiAjIyBJbXBhY3Qgb24gbG9hZGluZyB0ZW1wbGF0ZXNcbiAqXG4gKiBUaGlzIGFwcGxpZXMgYm90aCB0byB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUgYG5nLWluY2x1ZGVgfSBkaXJlY3RpdmUgYXMgd2VsbCBhc1xuICogYHRlbXBsYXRlVXJsYCdzIHNwZWNpZmllZCBieSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LlxuICpcbiAqIEJ5IGRlZmF1bHQsIEFuZ3VsYXIgb25seSBsb2FkcyB0ZW1wbGF0ZXMgZnJvbSB0aGUgc2FtZSBkb21haW4gYW5kIHByb3RvY29sIGFzIHRoZSBhcHBsaWNhdGlvblxuICogZG9jdW1lbnQuICBUaGlzIGlzIGRvbmUgYnkgY2FsbGluZyB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAqICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfSBvbiB0aGUgdGVtcGxhdGUgVVJMLiAgVG8gbG9hZCB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIGFuZC9vclxuICogcHJvdG9jb2xzLCB5b3UgbWF5IGVpdGhlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0XG4gKiB0aGVtfSBvciB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmwgd3JhcCBpdH0gaW50byBhIHRydXN0ZWQgdmFsdWUuXG4gKlxuICogKlBsZWFzZSBub3RlKjpcbiAqIFRoZSBicm93c2VyJ3NcbiAqIFtTYW1lIE9yaWdpbiBQb2xpY3ldKGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvYnJvd3NlcnNlYy93aWtpL1BhcnQyI1NhbWUtb3JpZ2luX3BvbGljeV9mb3JfWE1MSHR0cFJlcXVlc3QpXG4gKiBhbmQgW0Nyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nIChDT1JTKV0oaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy8pXG4gKiBwb2xpY3kgYXBwbHkgaW4gYWRkaXRpb24gdG8gdGhpcyBhbmQgbWF5IGZ1cnRoZXIgcmVzdHJpY3Qgd2hldGhlciB0aGUgdGVtcGxhdGUgaXMgc3VjY2Vzc2Z1bGx5XG4gKiBsb2FkZWQuICBUaGlzIG1lYW5zIHRoYXQgd2l0aG91dCB0aGUgcmlnaHQgQ09SUyBwb2xpY3ksIGxvYWRpbmcgdGVtcGxhdGVzIGZyb20gYSBkaWZmZXJlbnQgZG9tYWluXG4gKiB3b24ndCB3b3JrIG9uIGFsbCBicm93c2Vycy4gIEFsc28sIGxvYWRpbmcgdGVtcGxhdGVzIGZyb20gYGZpbGU6Ly9gIFVSTCBkb2VzIG5vdCB3b3JrIG9uIHNvbWVcbiAqIGJyb3dzZXJzLlxuICpcbiAqICMjIFRoaXMgZmVlbHMgbGlrZSB0b28gbXVjaCBvdmVyaGVhZFxuICpcbiAqIEl0J3MgaW1wb3J0YW50IHRvIHJlbWVtYmVyIHRoYXQgU0NFIG9ubHkgYXBwbGllcyB0byBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb25zLlxuICpcbiAqIElmIHlvdXIgZXhwcmVzc2lvbnMgYXJlIGNvbnN0YW50IGxpdGVyYWxzLCB0aGV5J3JlIGF1dG9tYXRpY2FsbHkgdHJ1c3RlZCBhbmQgeW91IGRvbid0IG5lZWQgdG9cbiAqIGNhbGwgYCRzY2UudHJ1c3RBc2Agb24gdGhlbSAocmVtZW1iZXIgdG8gaW5jbHVkZSB0aGUgYG5nU2FuaXRpemVgIG1vZHVsZSkgKGUuZy5cbiAqIGA8ZGl2IG5nLWJpbmQtaHRtbD1cIic8Yj5pbXBsaWNpdGx5IHRydXN0ZWQ8L2I+J1wiPjwvZGl2PmApIGp1c3Qgd29ya3MuXG4gKlxuICogQWRkaXRpb25hbGx5LCBgYVtocmVmXWAgYW5kIGBpbWdbc3JjXWAgYXV0b21hdGljYWxseSBzYW5pdGl6ZSB0aGVpciBVUkxzIGFuZCBkbyBub3QgcGFzcyB0aGVtXG4gKiB0aHJvdWdoIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkfS4gIFNDRSBkb2Vzbid0IHBsYXkgYSByb2xlIGhlcmUuXG4gKlxuICogVGhlIGluY2x1ZGVkIHtAbGluayBuZy4kc2NlRGVsZWdhdGUgJHNjZURlbGVnYXRlfSBjb21lcyB3aXRoIHNhbmUgZGVmYXVsdHMgdG8gYWxsb3cgeW91IHRvIGxvYWRcbiAqIHRlbXBsYXRlcyBpbiBgbmctaW5jbHVkZWAgZnJvbSB5b3VyIGFwcGxpY2F0aW9uJ3MgZG9tYWluIHdpdGhvdXQgaGF2aW5nIHRvIGV2ZW4ga25vdyBhYm91dCBTQ0UuXG4gKiBJdCBibG9ja3MgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIG9yIGxvYWRpbmcgdGVtcGxhdGVzIG92ZXIgaHR0cCBmcm9tIGFuIGh0dHBzXG4gKiBzZXJ2ZWQgZG9jdW1lbnQuICBZb3UgY2FuIGNoYW5nZSB0aGVzZSBieSBzZXR0aW5nIHlvdXIgb3duIGN1c3RvbSB7QGxpbmtcbiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdHN9IGFuZCB7QGxpbmtcbiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0IGJsYWNrbGlzdHN9IGZvciBtYXRjaGluZyBzdWNoIFVSTHMuXG4gKlxuICogVGhpcyBzaWduaWZpY2FudGx5IHJlZHVjZXMgdGhlIG92ZXJoZWFkLiAgSXQgaXMgZmFyIGVhc2llciB0byBwYXkgdGhlIHNtYWxsIG92ZXJoZWFkIGFuZCBoYXZlIGFuXG4gKiBhcHBsaWNhdGlvbiB0aGF0J3Mgc2VjdXJlIGFuZCBjYW4gYmUgYXVkaXRlZCB0byB2ZXJpZnkgdGhhdCB3aXRoIG11Y2ggbW9yZSBlYXNlIHRoYW4gYm9sdGluZ1xuICogc2VjdXJpdHkgb250byBhbiBhcHBsaWNhdGlvbiBsYXRlci5cbiAqXG4gKiA8YSBuYW1lPVwiY29udGV4dHNcIj48L2E+XG4gKiAjIyBXaGF0IHRydXN0ZWQgY29udGV4dCB0eXBlcyBhcmUgc3VwcG9ydGVkP1xuICpcbiAqIHwgQ29udGV4dCAgICAgICAgICAgICB8IE5vdGVzICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgYCRzY2UuSFRNTGAgICAgICAgICB8IEZvciBIVE1MIHRoYXQncyBzYWZlIHRvIHNvdXJjZSBpbnRvIHRoZSBhcHBsaWNhdGlvbi4gIFRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gZGlyZWN0aXZlIHVzZXMgdGhpcyBjb250ZXh0IGZvciBiaW5kaW5ncy4gSWYgYW4gdW5zYWZlIHZhbHVlIGlzIGVuY291bnRlcmVkIGFuZCB0aGUge0BsaW5rIG5nU2FuaXRpemUgJHNhbml0aXplfSBtb2R1bGUgaXMgcHJlc2VudCB0aGlzIHdpbGwgc2FuaXRpemUgdGhlIHZhbHVlIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXJyb3IuIHxcbiAqIHwgYCRzY2UuQ1NTYCAgICAgICAgICB8IEZvciBDU1MgdGhhdCdzIHNhZmUgdG8gc291cmNlIGludG8gdGhlIGFwcGxpY2F0aW9uLiAgQ3VycmVudGx5IHVudXNlZC4gIEZlZWwgZnJlZSB0byB1c2UgaXQgaW4geW91ciBvd24gZGlyZWN0aXZlcy4gfFxuICogfCBgJHNjZS5VUkxgICAgICAgICAgIHwgRm9yIFVSTHMgdGhhdCBhcmUgc2FmZSB0byBmb2xsb3cgYXMgbGlua3MuICBDdXJyZW50bHkgdW51c2VkIChgPGEgaHJlZj1gIGFuZCBgPGltZyBzcmM9YCBzYW5pdGl6ZSB0aGVpciB1cmxzIGFuZCBkb24ndCBjb25zdGl0dXRlIGFuIFNDRSBjb250ZXh0LiB8XG4gKiB8IGAkc2NlLlJFU09VUkNFX1VSTGAgfCBGb3IgVVJMcyB0aGF0IGFyZSBub3Qgb25seSBzYWZlIHRvIGZvbGxvdyBhcyBsaW5rcywgYnV0IHdob3NlIGNvbnRlbnRzIGFyZSBhbHNvIHNhZmUgdG8gaW5jbHVkZSBpbiB5b3VyIGFwcGxpY2F0aW9uLiAgRXhhbXBsZXMgaW5jbHVkZSBgbmctaW5jbHVkZWAsIGBzcmNgIC8gYG5nU3JjYCBiaW5kaW5ncyBmb3IgdGFncyBvdGhlciB0aGFuIGBJTUdgIChlLmcuIGBJRlJBTUVgLCBgT0JKRUNUYCwgZXRjLikgIDxicj48YnI+Tm90ZSB0aGF0IGAkc2NlLlJFU09VUkNFX1VSTGAgbWFrZXMgYSBzdHJvbmdlciBzdGF0ZW1lbnQgYWJvdXQgdGhlIFVSTCB0aGFuIGAkc2NlLlVSTGAgZG9lcyBhbmQgdGhlcmVmb3JlIGNvbnRleHRzIHJlcXVpcmluZyB2YWx1ZXMgdHJ1c3RlZCBmb3IgYCRzY2UuUkVTT1VSQ0VfVVJMYCBjYW4gYmUgdXNlZCBhbnl3aGVyZSB0aGF0IHZhbHVlcyB0cnVzdGVkIGZvciBgJHNjZS5VUkxgIGFyZSByZXF1aXJlZC4gfFxuICogfCBgJHNjZS5KU2AgICAgICAgICAgIHwgRm9yIEphdmFTY3JpcHQgdGhhdCBpcyBzYWZlIHRvIGV4ZWN1dGUgaW4geW91ciBhcHBsaWNhdGlvbidzIGNvbnRleHQuICBDdXJyZW50bHkgdW51c2VkLiAgRmVlbCBmcmVlIHRvIHVzZSBpdCBpbiB5b3VyIG93biBkaXJlY3RpdmVzLiB8XG4gKlxuICogIyMgRm9ybWF0IG9mIGl0ZW1zIGluIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCByZXNvdXJjZVVybFdoaXRlbGlzdH0ve0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0IEJsYWNrbGlzdH0gPGEgbmFtZT1cInJlc291cmNlVXJsUGF0dGVybkl0ZW1cIj48L2E+XG4gKlxuICogIEVhY2ggZWxlbWVudCBpbiB0aGVzZSBhcnJheXMgbXVzdCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAgLSAqKidzZWxmJyoqXG4gKiAgICAtIFRoZSBzcGVjaWFsICoqc3RyaW5nKiosIGAnc2VsZidgLCBjYW4gYmUgdXNlZCB0byBtYXRjaCBhZ2FpbnN0IGFsbCBVUkxzIG9mIHRoZSAqKnNhbWVcbiAqICAgICAgZG9tYWluKiogYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50IHVzaW5nIHRoZSAqKnNhbWUgcHJvdG9jb2wqKi5cbiAqICAtICoqU3RyaW5nKiogKGV4Y2VwdCB0aGUgc3BlY2lhbCB2YWx1ZSBgJ3NlbGYnYClcbiAqICAgIC0gVGhlIHN0cmluZyBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGZ1bGwgKm5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwqIG9mIHRoZSByZXNvdXJjZVxuICogICAgICBiZWluZyB0ZXN0ZWQgKHN1YnN0cmluZyBtYXRjaGVzIGFyZSBub3QgZ29vZCBlbm91Z2guKVxuICogICAgLSBUaGVyZSBhcmUgZXhhY3RseSAqKnR3byB3aWxkY2FyZCBzZXF1ZW5jZXMqKiAtIGAqYCBhbmQgYCoqYC4gIEFsbCBvdGhlciBjaGFyYWN0ZXJzXG4gKiAgICAgIG1hdGNoIHRoZW1zZWx2ZXMuXG4gKiAgICAtIGAqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgYW55IGNoYXJhY3RlciBvdGhlciB0aGFuIG9uZSBvZiB0aGUgZm9sbG93aW5nIDZcbiAqICAgICAgY2hhcmFjdGVyczogJ2A6YCcsICdgL2AnLCAnYC5gJywgJ2A/YCcsICdgJmAnIGFuZCAnYDtgJy4gIEl0J3MgYSB1c2VmdWwgd2lsZGNhcmQgZm9yIHVzZVxuICogICAgICBpbiBhIHdoaXRlbGlzdC5cbiAqICAgIC0gYCoqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgKmFueSogY2hhcmFjdGVyLiAgQXMgc3VjaCwgaXQncyBub3RcbiAqICAgICAgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBhIHNjaGVtZSwgZG9tYWluLCBldGMuIGFzIGl0IHdvdWxkIG1hdGNoIHRvbyBtdWNoLiAgKGUuZy5cbiAqICAgICAgaHR0cDovLyoqLmV4YW1wbGUuY29tLyB3b3VsZCBtYXRjaCBodHRwOi8vZXZpbC5jb20vP2lnbm9yZT0uZXhhbXBsZS5jb20vIGFuZCB0aGF0IG1pZ2h0XG4gKiAgICAgIG5vdCBoYXZlIGJlZW4gdGhlIGludGVudGlvbi4pICBJdHMgdXNhZ2UgYXQgdGhlIHZlcnkgZW5kIG9mIHRoZSBwYXRoIGlzIG9rLiAgKGUuZy5cbiAqICAgICAgaHR0cDovL2Zvby5leGFtcGxlLmNvbS90ZW1wbGF0ZXMvKiopLlxuICogIC0gKipSZWdFeHAqKiAoKnNlZSBjYXZlYXQgYmVsb3cqKVxuICogICAgLSAqQ2F2ZWF0KjogIFdoaWxlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIHBvd2VyZnVsIGFuZCBvZmZlciBncmVhdCBmbGV4aWJpbGl0eSwgIHRoZWlyIHN5bnRheFxuICogICAgICAoYW5kIGFsbCB0aGUgaW5ldml0YWJsZSBlc2NhcGluZykgbWFrZXMgdGhlbSAqaGFyZGVyIHRvIG1haW50YWluKi4gIEl0J3MgZWFzeSB0b1xuICogICAgICBhY2NpZGVudGFsbHkgaW50cm9kdWNlIGEgYnVnIHdoZW4gb25lIHVwZGF0ZXMgYSBjb21wbGV4IGV4cHJlc3Npb24gKGltaG8sIGFsbCByZWdleGVzIHNob3VsZFxuICogICAgICBoYXZlIGdvb2QgdGVzdCBjb3ZlcmFnZSkuICBGb3IgaW5zdGFuY2UsIHRoZSB1c2Ugb2YgYC5gIGluIHRoZSByZWdleCBpcyBjb3JyZWN0IG9ubHkgaW4gYVxuICogICAgICBzbWFsbCBudW1iZXIgb2YgY2FzZXMuICBBIGAuYCBjaGFyYWN0ZXIgaW4gdGhlIHJlZ2V4IHVzZWQgd2hlbiBtYXRjaGluZyB0aGUgc2NoZW1lIG9yIGFcbiAqICAgICAgc3ViZG9tYWluIGNvdWxkIGJlIG1hdGNoZWQgYWdhaW5zdCBhIGA6YCBvciBsaXRlcmFsIGAuYCB0aGF0IHdhcyBsaWtlbHkgbm90IGludGVuZGVkLiAgIEl0XG4gKiAgICAgIGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byB1c2UgdGhlIHN0cmluZyBwYXR0ZXJucyBhbmQgb25seSBmYWxsIGJhY2sgdG8gcmVndWxhciBleHByZXNzaW9uc1xuICogICAgICBhcyBhIGxhc3QgcmVzb3J0LlxuICogICAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVnRXhwIChpLmUuIG5vdCBhIHN0cmluZy4pICBJdCBpc1xuICogICAgICBtYXRjaGVkIGFnYWluc3QgdGhlICoqZW50aXJlKiogKm5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwqIG9mIHRoZSByZXNvdXJjZSBiZWluZyB0ZXN0ZWRcbiAqICAgICAgKGV2ZW4gd2hlbiB0aGUgUmVnRXhwIGRpZCBub3QgaGF2ZSB0aGUgYF5gIGFuZCBgJGAgY29kZXMuKSAgSW4gYWRkaXRpb24sIGFueSBmbGFnc1xuICogICAgICBwcmVzZW50IG9uIHRoZSBSZWdFeHAgKHN1Y2ggYXMgbXVsdGlsaW5lLCBnbG9iYWwsIGlnbm9yZUNhc2UpIGFyZSBpZ25vcmVkLlxuICogICAgLSBJZiB5b3UgYXJlIGdlbmVyYXRpbmcgeW91ciBKYXZhU2NyaXB0IGZyb20gc29tZSBvdGhlciB0ZW1wbGF0aW5nIGVuZ2luZSAobm90XG4gKiAgICAgIHJlY29tbWVuZGVkLCBlLmcuIGluIGlzc3VlIFsjNDAwNl0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNDAwNikpLFxuICogICAgICByZW1lbWJlciB0byBlc2NhcGUgeW91ciByZWd1bGFyIGV4cHJlc3Npb24gKGFuZCBiZSBhd2FyZSB0aGF0IHlvdSBtaWdodCBuZWVkIG1vcmUgdGhhblxuICogICAgICBvbmUgbGV2ZWwgb2YgZXNjYXBpbmcgZGVwZW5kaW5nIG9uIHlvdXIgdGVtcGxhdGluZyBlbmdpbmUgYW5kIHRoZSB3YXkgeW91IGludGVycG9sYXRlZFxuICogICAgICB0aGUgdmFsdWUuKSAgRG8gbWFrZSB1c2Ugb2YgeW91ciBwbGF0Zm9ybSdzIGVzY2FwaW5nIG1lY2hhbmlzbSBhcyBpdCBtaWdodCBiZSBnb29kXG4gKiAgICAgIGVub3VnaCBiZWZvcmUgY29kaW5nIHlvdXIgb3duLiAgRS5nLiBSdWJ5IGhhc1xuICogICAgICBbUmVnZXhwLmVzY2FwZShzdHIpXShodHRwOi8vd3d3LnJ1YnktZG9jLm9yZy9jb3JlLTIuMC4wL1JlZ2V4cC5odG1sI21ldGhvZC1jLWVzY2FwZSlcbiAqICAgICAgYW5kIFB5dGhvbiBoYXMgW3JlLmVzY2FwZV0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3JlLmh0bWwjcmUuZXNjYXBlKS5cbiAqICAgICAgSmF2YXNjcmlwdCBsYWNrcyBhIHNpbWlsYXIgYnVpbHQgaW4gZnVuY3Rpb24gZm9yIGVzY2FwaW5nLiAgVGFrZSBhIGxvb2sgYXQgR29vZ2xlXG4gKiAgICAgIENsb3N1cmUgbGlicmFyeSdzIFtnb29nLnN0cmluZy5yZWdFeHBFc2NhcGUocyldKFxuICogICAgICBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19zdHJpbmdfc3RyaW5nLmpzLnNvdXJjZS5odG1sI2xpbmU5NjIpLlxuICpcbiAqIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gZm9yIGFuIGV4YW1wbGUuXG4gKlxuICogIyMgU2hvdyBtZSBhbiBleGFtcGxlIHVzaW5nIFNDRS5cbiAqXG4gKiA8ZXhhbXBsZSBtb2R1bGU9XCJteVNjZUFwcFwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJBcHBDb250cm9sbGVyIGFzIG15Q3RybFwiPlxuICogICAgIDxpIG5nLWJpbmQtaHRtbD1cIm15Q3RybC5leHBsaWNpdGx5VHJ1c3RlZEh0bWxcIiBpZD1cImV4cGxpY2l0bHlUcnVzdGVkSHRtbFwiPjwvaT48YnI+PGJyPlxuICogICAgIDxiPlVzZXIgY29tbWVudHM8L2I+PGJyPlxuICogICAgIEJ5IGRlZmF1bHQsIEhUTUwgdGhhdCBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQgKGUuZy4gQWxpY2UncyBjb21tZW50KSBpcyBzYW5pdGl6ZWQgd2hlblxuICogICAgICRzYW5pdGl6ZSBpcyBhdmFpbGFibGUuICBJZiAkc2FuaXRpemUgaXNuJ3QgYXZhaWxhYmxlLCB0aGlzIHJlc3VsdHMgaW4gYW4gZXJyb3IgaW5zdGVhZCBvZiBhblxuICogICAgIGV4cGxvaXQuXG4gKiAgICAgPGRpdiBjbGFzcz1cIndlbGxcIj5cbiAqICAgICAgIDxkaXYgbmctcmVwZWF0PVwidXNlckNvbW1lbnQgaW4gbXlDdHJsLnVzZXJDb21tZW50c1wiPlxuICogICAgICAgICA8Yj57e3VzZXJDb21tZW50Lm5hbWV9fTwvYj46XG4gKiAgICAgICAgIDxzcGFuIG5nLWJpbmQtaHRtbD1cInVzZXJDb21tZW50Lmh0bWxDb21tZW50XCIgY2xhc3M9XCJodG1sQ29tbWVudFwiPjwvc3Bhbj5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgPC9kaXY+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAqICAgYW5ndWxhci5tb2R1bGUoJ215U2NlQXBwJywgWyduZ1Nhbml0aXplJ10pXG4gKiAgICAgLmNvbnRyb2xsZXIoJ0FwcENvbnRyb2xsZXInLCBbJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRzY2UnLFxuICogICAgICAgZnVuY3Rpb24oJGh0dHAsICR0ZW1wbGF0ZUNhY2hlLCAkc2NlKSB7XG4gKiAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAqICAgICAgICAgJGh0dHAuZ2V0KFwidGVzdF9kYXRhLmpzb25cIiwge2NhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLnN1Y2Nlc3MoZnVuY3Rpb24odXNlckNvbW1lbnRzKSB7XG4gKiAgICAgICAgICAgc2VsZi51c2VyQ29tbWVudHMgPSB1c2VyQ29tbWVudHM7XG4gKiAgICAgICAgIH0pO1xuICogICAgICAgICBzZWxmLmV4cGxpY2l0bHlUcnVzdGVkSHRtbCA9ICRzY2UudHJ1c3RBc0h0bWwoXG4gKiAgICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xuICogICAgICAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDtcIj5Ib3ZlciBvdmVyIHRoaXMgdGV4dC48L3NwYW4+Jyk7XG4gKiAgICAgICB9XSk7XG4gKiA8L2ZpbGU+XG4gKlxuICogPGZpbGUgbmFtZT1cInRlc3RfZGF0YS5qc29uXCI+XG4gKiBbXG4gKiAgIHsgXCJuYW1lXCI6IFwiQWxpY2VcIixcbiAqICAgICBcImh0bWxDb21tZW50XCI6XG4gKiAgICAgICAgIFwiPHNwYW4gb25tb3VzZW92ZXI9J3RoaXMudGV4dENvbnRlbnQ9XFxcIlBXTjNEIVxcXCInPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj5cIlxuICogICB9LFxuICogICB7IFwibmFtZVwiOiBcIkJvYlwiLFxuICogICAgIFwiaHRtbENvbW1lbnRcIjogXCI8aT5ZZXMhPC9pPiAgQW0gSSB0aGUgb25seSBvdGhlciBvbmU/XCJcbiAqICAgfVxuICogXVxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgZGVzY3JpYmUoJ1NDRSBkb2MgZGVtbycsIGZ1bmN0aW9uKCkge1xuICogICAgIGl0KCdzaG91bGQgc2FuaXRpemUgdW50cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnLmh0bWxDb21tZW50JykpLmZpcnN0KCkuZ2V0SW5uZXJIdG1sKCkpXG4gKiAgICAgICAgICAgLnRvQmUoJzxzcGFuPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj4nKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBOT1Qgc2FuaXRpemUgZXhwbGljaXRseSB0cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2V4cGxpY2l0bHlUcnVzdGVkSHRtbCcpKS5nZXRJbm5lckh0bWwoKSkudG9CZShcbiAqICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xuICogICAgICAgICAgICdzYW5pdGl6YXRpb24uJnF1b3Q7XCI+SG92ZXIgb3ZlciB0aGlzIHRleHQuPC9zcGFuPicpO1xuICogICAgIH0pO1xuICogICB9KTtcbiAqIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICpcbiAqICMjIENhbiBJIGRpc2FibGUgU0NFIGNvbXBsZXRlbHk/XG4gKlxuICogWWVzLCB5b3UgY2FuLiAgSG93ZXZlciwgdGhpcyBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZC4gIFNDRSBnaXZlcyB5b3UgYSBsb3Qgb2Ygc2VjdXJpdHkgYmVuZWZpdHNcbiAqIGZvciBsaXR0bGUgY29kaW5nIG92ZXJoZWFkLiAgSXQgd2lsbCBiZSBtdWNoIGhhcmRlciB0byB0YWtlIGFuIFNDRSBkaXNhYmxlZCBhcHBsaWNhdGlvbiBhbmRcbiAqIGVpdGhlciBzZWN1cmUgaXQgb24geW91ciBvd24gb3IgZW5hYmxlIFNDRSBhdCBhIGxhdGVyIHN0YWdlLiAgSXQgbWlnaHQgbWFrZSBzZW5zZSB0byBkaXNhYmxlIFNDRVxuICogZm9yIGNhc2VzIHdoZXJlIHlvdSBoYXZlIGEgbG90IG9mIGV4aXN0aW5nIGNvZGUgdGhhdCB3YXMgd3JpdHRlbiBiZWZvcmUgU0NFIHdhcyBpbnRyb2R1Y2VkIGFuZFxuICogeW91J3JlIG1pZ3JhdGluZyB0aGVtIGEgbW9kdWxlIGF0IGEgdGltZS5cbiAqXG4gKiBUaGF0IHNhaWQsIGhlcmUncyBob3cgeW91IGNhbiBjb21wbGV0ZWx5IGRpc2FibGUgU0NFOlxuICpcbiAqIGBgYFxuICogYW5ndWxhci5tb2R1bGUoJ215QXBwV2l0aFNjZURpc2FibGVkbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VQcm92aWRlcikge1xuICogICAvLyBDb21wbGV0ZWx5IGRpc2FibGUgU0NFLiAgRm9yIGRlbW9uc3RyYXRpb24gcHVycG9zZXMgb25seSFcbiAqICAgLy8gRG8gbm90IHVzZSBpbiBuZXcgcHJvamVjdHMuXG4gKiAgICRzY2VQcm92aWRlci5lbmFibGVkKGZhbHNlKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICovXG4vKiBqc2hpbnQgbWF4bGVuOiAxMDAgKi9cblxuZnVuY3Rpb24gJFNjZVByb3ZpZGVyKCkge1xuICB2YXIgZW5hYmxlZCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHNjZVByb3ZpZGVyI2VuYWJsZWRcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgSWYgcHJvdmlkZWQsIHRoZW4gZW5hYmxlcy9kaXNhYmxlcyBTQ0UuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEVuYWJsZXMvZGlzYWJsZXMgU0NFIGFuZCByZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgKi9cbiAgdGhpcy5lbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgZW5hYmxlZCA9ICEhdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBlbmFibGVkO1xuICB9O1xuXG5cbiAgLyogRGVzaWduIG5vdGVzIG9uIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciBTQ0UuXG4gICAqXG4gICAqIFRoZSBBUEkgY29udHJhY3QgZm9yIHRoZSBTQ0UgZGVsZWdhdGVcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBUaGUgU0NFIGRlbGVnYXRlIG9iamVjdCBtdXN0IHByb3ZpZGUgdGhlIGZvbGxvd2luZyAzIG1ldGhvZHM6XG4gICAqXG4gICAqIC0gdHJ1c3RBcyhjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHRlbGwgdGhlIFNDRSBzZXJ2aWNlIHRoYXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIE9LIHRvIHVzZSBpbiB0aGVcbiAgICogICAgIGNvbnRleHRzIHNwZWNpZmllZCBieSBjb250ZXh0RW51bS4gIEl0IG11c3QgcmV0dXJuIGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgYWNjZXB0ZWQgYnlcbiAgICogICAgIGdldFRydXN0ZWQoKSBmb3IgYSBjb21wYXRpYmxlIGNvbnRleHRFbnVtIGFuZCByZXR1cm4gdGhpcyB2YWx1ZS5cbiAgICpcbiAgICogLSB2YWx1ZU9mKHZhbHVlKVxuICAgKiAgICAgRm9yIHZhbHVlcyB0aGF0IHdlcmUgbm90IHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZW0gYXMgaXMuICBGb3IgdmFsdWVzIHRoYXQgd2VyZVxuICAgKiAgICAgcHJvZHVjZWQgYnkgdHJ1c3RBcygpLCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgaW5wdXQgdmFsdWUgdG8gdHJ1c3RBcy4gIEJhc2ljYWxseSwgaWZcbiAgICogICAgIHRydXN0QXMgaXMgd3JhcHBpbmcgdGhlIGdpdmVuIHZhbHVlcyBpbnRvIHNvbWUgdHlwZSwgdGhpcyBvcGVyYXRpb24gdW53cmFwcyBpdCB3aGVuIGdpdmVuXG4gICAqICAgICBzdWNoIGEgdmFsdWUuXG4gICAqXG4gICAqIC0gZ2V0VHJ1c3RlZChjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gdGhlIGEgdmFsdWUgdGhhdCBpcyBzYWZlIHRvIHVzZSBpbiB0aGUgY29udGV4dCBzcGVjaWZpZWQgYnlcbiAgICogICAgIGNvbnRleHRFbnVtIG9yIHRocm93IGFuZCBleGNlcHRpb24gb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIGNvbnRyYWN0IGRlbGliZXJhdGVseSBkb2VzIE5PVCBzdGF0ZSB0aGF0IHZhbHVlcyByZXR1cm5lZCBieSB0cnVzdEFzKCkgbXVzdCBiZVxuICAgKiBvcGFxdWUgb3Igd3JhcHBlZCBpbiBzb21lIGhvbGRlciBvYmplY3QuICBUaGF0IGhhcHBlbnMgdG8gYmUgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLiAgRm9yXG4gICAqIGluc3RhbmNlLCBhbiBpbXBsZW1lbnRhdGlvbiBjb3VsZCBtYWludGFpbiBhIHJlZ2lzdHJ5IG9mIGFsbCB0cnVzdGVkIG9iamVjdHMgYnkgY29udGV4dC4gIEluXG4gICAqIHN1Y2ggYSBjYXNlLCB0cnVzdEFzKCkgd291bGQgcmV0dXJuIHRoZSBzYW1lIG9iamVjdCB0aGF0IHdhcyBwYXNzZWQgaW4uICBnZXRUcnVzdGVkKCkgd291bGRcbiAgICogcmV0dXJuIHRoZSBzYW1lIG9iamVjdCBwYXNzZWQgaW4gaWYgaXQgd2FzIGZvdW5kIGluIHRoZSByZWdpc3RyeSB1bmRlciBhIGNvbXBhdGlibGUgY29udGV4dCBvclxuICAgKiB0aHJvdyBhbiBleGNlcHRpb24gb3RoZXJ3aXNlLiAgQW4gaW1wbGVtZW50YXRpb24gbWlnaHQgb25seSB3cmFwIHZhbHVlcyBzb21lIG9mIHRoZSB0aW1lIGJhc2VkXG4gICAqIG9uIHNvbWUgY3JpdGVyaWEuICBnZXRUcnVzdGVkKCkgbWlnaHQgcmV0dXJuIGEgdmFsdWUgYW5kIG5vdCB0aHJvdyBhbiBleGNlcHRpb24gZm9yIHNwZWNpYWxcbiAgICogY29uc3RhbnRzIG9yIG9iamVjdHMgZXZlbiBpZiBub3Qgd3JhcHBlZC4gIEFsbCBzdWNoIGltcGxlbWVudGF0aW9ucyBmdWxmaWxsIHRoaXMgY29udHJhY3QuXG4gICAqXG4gICAqXG4gICAqIEEgbm90ZSBvbiB0aGUgaW5oZXJpdGFuY2UgbW9kZWwgZm9yIFNDRSBjb250ZXh0c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogSSd2ZSB1c2VkIGluaGVyaXRhbmNlIGFuZCBtYWRlIFJFU09VUkNFX1VSTCB3cmFwcGVkIHR5cGVzIGEgc3VidHlwZSBvZiBVUkwgd3JhcHBlZCB0eXBlcy4gIFRoaXNcbiAgICogaXMgcHVyZWx5IGFuIGltcGxlbWVudGF0aW9uIGRldGFpbHMuXG4gICAqXG4gICAqIFRoZSBjb250cmFjdCBpcyBzaW1wbHkgdGhpczpcbiAgICpcbiAgICogICAgIGdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKSBzdWNjZWVkaW5nIGltcGxpZXMgdGhhdCBnZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlcbiAgICogICAgIHdpbGwgYWxzbyBzdWNjZWVkLlxuICAgKlxuICAgKiBJbmhlcml0YW5jZSBoYXBwZW5zIHRvIGNhcHR1cmUgdGhpcyBpbiBhIG5hdHVyYWwgd2F5LiAgSW4gc29tZSBmdXR1cmUsIHdlXG4gICAqIG1heSBub3QgdXNlIGluaGVyaXRhbmNlIGFueW1vcmUuICBUaGF0IGlzIE9LIGJlY2F1c2Ugbm8gY29kZSBvdXRzaWRlIG9mXG4gICAqIHNjZS5qcyBhbmQgc2NlU3BlY3MuanMgd291bGQgbmVlZCB0byBiZSBhd2FyZSBvZiB0aGlzIGRldGFpbC5cbiAgICovXG5cbiAgdGhpcy4kZ2V0ID0gWyckcGFyc2UnLCAnJHNjZURlbGVnYXRlJywgZnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgJHBhcnNlLCAgICRzY2VEZWxlZ2F0ZSkge1xuICAgIC8vIFByZXJlcTogRW5zdXJlIHRoYXQgd2UncmUgbm90IHJ1bm5pbmcgaW4gSUU8MTEgcXVpcmtzIG1vZGUuICBJbiB0aGF0IG1vZGUsIElFIDwgMTEgYWxsb3dcbiAgICAvLyB0aGUgXCJleHByZXNzaW9uKGphdmFzY3JpcHQgZXhwcmVzc2lvbilcIiBzeW50YXggd2hpY2ggaXMgaW5zZWN1cmUuXG4gICAgaWYgKGVuYWJsZWQgJiYgbXNpZSA8IDgpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2llcXVpcmtzJyxcbiAgICAgICAgJ1N0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRvZXMgbm90IHN1cHBvcnQgSW50ZXJuZXQgRXhwbG9yZXIgdmVyc2lvbiA8IDExIGluIHF1aXJrcyAnICtcbiAgICAgICAgJ21vZGUuICBZb3UgY2FuIGZpeCB0aGlzIGJ5IGFkZGluZyB0aGUgdGV4dCA8IWRvY3R5cGUgaHRtbD4gdG8gdGhlIHRvcCBvZiB5b3VyIEhUTUwgJyArXG4gICAgICAgICdkb2N1bWVudC4gIFNlZSBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kc2NlIGZvciBtb3JlIGluZm9ybWF0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBzY2UgPSBzaGFsbG93Q29weShTQ0VfQ09OVEVYVFMpO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjaXNFbmFibGVkXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS4gIElmIHlvdSB3YW50IHRvIHNldCB0aGUgdmFsdWUsIHlvdVxuICAgICAqIGhhdmUgdG8gZG8gaXQgYXQgbW9kdWxlIGNvbmZpZyB0aW1lIG9uIHtAbGluayBuZy4kc2NlUHJvdmlkZXIgJHNjZVByb3ZpZGVyfS5cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgU0NFIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgc2NlLmlzRW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZWQ7XG4gICAgfTtcbiAgICBzY2UudHJ1c3RBcyA9ICRzY2VEZWxlZ2F0ZS50cnVzdEFzO1xuICAgIHNjZS5nZXRUcnVzdGVkID0gJHNjZURlbGVnYXRlLmdldFRydXN0ZWQ7XG4gICAgc2NlLnZhbHVlT2YgPSAkc2NlRGVsZWdhdGUudmFsdWVPZjtcblxuICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgc2NlLnRydXN0QXMgPSBzY2UuZ2V0VHJ1c3RlZCA9IGZ1bmN0aW9uKHR5cGUsIHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbiAgICAgIHNjZS52YWx1ZU9mID0gaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uICBUaGlzIGlzIGxpa2Uge0BsaW5rXG4gICAgICogbmcuJHBhcnNlICRwYXJzZX0gYW5kIGlzIGlkZW50aWNhbCB3aGVuIHRoZSBleHByZXNzaW9uIGlzIGEgbGl0ZXJhbCBjb25zdGFudC4gIE90aGVyd2lzZSwgaXRcbiAgICAgKiB3cmFwcyB0aGUgZXhwcmVzc2lvbiBpbiBhIGNhbGwgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWQoKnR5cGUqLFxuICAgICAqICpyZXN1bHQqKX1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIFNDRSBjb250ZXh0IGluIHdoaWNoIHRoaXMgcmVzdWx0IHdpbGwgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuICAgIHNjZS5wYXJzZUFzID0gZnVuY3Rpb24gc2NlUGFyc2VBcyh0eXBlLCBleHByKSB7XG4gICAgICB2YXIgcGFyc2VkID0gJHBhcnNlKGV4cHIpO1xuICAgICAgaWYgKHBhcnNlZC5saXRlcmFsICYmIHBhcnNlZC5jb25zdGFudCkge1xuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICRwYXJzZShleHByLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzY2UuZ2V0VHJ1c3RlZCh0eXBlLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LiAgQXMgc3VjaCxcbiAgICAgKiByZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRydXN0ZWQgYnkgYW5ndWxhciBmb3IgdXNlIGluIHNwZWNpZmllZCBzdHJpY3QgY29udGV4dHVhbFxuICAgICAqIGVzY2FwaW5nIGNvbnRleHRzIChzdWNoIGFzIG5nLWJpbmQtaHRtbCwgbmctaW5jbHVkZSwgYW55IHNyYyBhdHRyaWJ1dGVcbiAgICAgKiBpbnRlcnBvbGF0aW9uLCBhbnkgZG9tIGV2ZW50IGJpbmRpbmcgYXR0cmlidXRlIGludGVycG9sYXRpb24gc3VjaCBhcyBmb3Igb25jbGljaywgIGV0Yy4pXG4gICAgICogdGhhdCB1c2VzIHRoZSBwcm92aWRlZCB2YWx1ZS4gIFNlZSAqIHtAbGluayBuZy4kc2NlICRzY2V9IGZvciBlbmFibGluZyBzdHJpY3QgY29udGV4dHVhbFxuICAgICAqIGVzY2FwaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHNhZmUgZm9yIHVzZS4gIGUuZy4gdXJsLFxuICAgICAqICAgcmVzb3VyY2VVcmwsIGh0bWwsIGpzIGFuZCBjc3MuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCB0aGF0IHNob3VsZCBiZSBjb25zaWRlcmVkIHRydXN0ZWQvc2FmZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQSB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIHRvIHN0YW5kIGluIGZvciB0aGUgcHJvdmlkZWQgYHZhbHVlYCBpbiBwbGFjZXNcbiAgICAgKiB3aGVyZSBBbmd1bGFyIGV4cGVjdHMgYSAkc2NlLnRydXN0QXMoKSByZXR1cm4gdmFsdWUuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzSHRtbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNIdG1sKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5IVE1MLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkSHRtbFxuICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRIdG1sKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcbiAgICAgKiAgICAgb25seSBhY2NlcHQgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZWl0aGVyIGxpdGVyYWwgY29uc3RhbnRzIG9yIGFyZSB0aGVcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc1VybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkVXJsXG4gICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZFVybCh2YWx1ZSl9IHRvIG9idGFpbiB0aGUgb3JpZ2luYWwgdmFsdWUuICAocHJpdmlsZWdlZCBkaXJlY3RpdmVzXG4gICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlXG4gICAgICogICAgIHJldHVybiB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0cnVzdEFzLlxuICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh2YWx1ZSl9IHRvIG9idGFpbiB0aGUgb3JpZ2luYWwgdmFsdWUuICAocHJpdmlsZWdlZCBkaXJlY3RpdmVzXG4gICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlIHJldHVyblxuICAgICAqICAgICB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc0pzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0pzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5KUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuXG4gICAgICogQHJldHVybnMgeyp9IEFuIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZEpzXG4gICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZEpzKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcbiAgICAgKiAgICAgb25seSBhY2NlcHQgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZWl0aGVyIGxpdGVyYWwgY29uc3RhbnRzIG9yIGFyZSB0aGVcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZGB9LiAgQXMgc3VjaCxcbiAgICAgKiB0YWtlcyB0aGUgcmVzdWx0IG9mIGEge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyBgJHNjZS50cnVzdEFzYH0oKSBjYWxsIGFuZCByZXR1cm5zIHRoZVxuICAgICAqIG9yaWdpbmFsbHkgc3VwcGxpZWQgdmFsdWUgaWYgdGhlIHF1ZXJpZWQgY29udGV4dCB0eXBlIGlzIGEgc3VwZXJ0eXBlIG9mIHRoZSBjcmVhdGVkIHR5cGUuXG4gICAgICogSWYgdGhpcyBjb25kaXRpb24gaXNuJ3Qgc2F0aXNmaWVkLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHRvIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlI3RydXN0QXMgYCRzY2UudHJ1c3RBc2B9XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgY2FsbC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoZSB3YXMgb3JpZ2luYWxseSBwcm92aWRlZCB0b1xuICAgICAqICAgICAgICAgICAgICB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzIGAkc2NlLnRydXN0QXNgfSBpZiB2YWxpZCBpbiB0aGlzIGNvbnRleHQuXG4gICAgICogICAgICAgICAgICAgIE90aGVyd2lzZSwgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZEh0bWwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkhUTUwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5IVE1MLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkQ3NzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZENzcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZFVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0h0bWwoZXhwcmVzc2lvbiBzdHJpbmcpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gICAgICogICAgICBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzQ3NzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0Nzcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5DU1MsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc1VybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAgICAgKiAgICAgIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNSZXNvdXJjZVVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc0pzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0pzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAgICAgKiAgICAgIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8vIFNob3J0aGFuZCBkZWxlZ2F0aW9ucy5cbiAgICB2YXIgcGFyc2UgPSBzY2UucGFyc2VBcyxcbiAgICAgICAgZ2V0VHJ1c3RlZCA9IHNjZS5nZXRUcnVzdGVkLFxuICAgICAgICB0cnVzdEFzID0gc2NlLnRydXN0QXM7XG5cbiAgICBmb3JFYWNoKFNDRV9DT05URVhUUywgZnVuY3Rpb24oZW51bVZhbHVlLCBuYW1lKSB7XG4gICAgICB2YXIgbE5hbWUgPSBsb3dlcmNhc2UobmFtZSk7XG4gICAgICBzY2VbY2FtZWxDYXNlKFwicGFyc2VfYXNfXCIgKyBsTmFtZSldID0gZnVuY3Rpb24oZXhwcikge1xuICAgICAgICByZXR1cm4gcGFyc2UoZW51bVZhbHVlLCBleHByKTtcbiAgICAgIH07XG4gICAgICBzY2VbY2FtZWxDYXNlKFwiZ2V0X3RydXN0ZWRfXCIgKyBsTmFtZSldID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGdldFRydXN0ZWQoZW51bVZhbHVlLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgc2NlW2NhbWVsQ2FzZShcInRydXN0X2FzX1wiICsgbE5hbWUpXSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0cnVzdEFzKGVudW1WYWx1ZSwgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzY2U7XG4gIH1dO1xufVxuXG4vKipcbiAqICEhISBUaGlzIGlzIGFuIHVuZG9jdW1lbnRlZCBcInByaXZhdGVcIiBzZXJ2aWNlICEhIVxuICpcbiAqIEBuYW1lICRzbmlmZmVyXG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xuICogQHJlcXVpcmVzICRkb2N1bWVudFxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaGlzdG9yeSBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgaHRtbDUgaGlzdG9yeSBhcGkgP1xuICogQHByb3BlcnR5IHtib29sZWFufSB0cmFuc2l0aW9ucyBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgQ1NTIHRyYW5zaXRpb24gZXZlbnRzID9cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYW5pbWF0aW9ucyBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgQ1NTIGFuaW1hdGlvbiBldmVudHMgP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBpcyB2ZXJ5IHNpbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiB0ZXN0aW5nIGJyb3dzZXIncyBmZWF0dXJlcy5cbiAqL1xuZnVuY3Rpb24gJFNuaWZmZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCkge1xuICAgIHZhciBldmVudFN1cHBvcnQgPSB7fSxcbiAgICAgICAgYW5kcm9pZCA9XG4gICAgICAgICAgdG9JbnQoKC9hbmRyb2lkIChcXGQrKS8uZXhlYyhsb3dlcmNhc2UoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpKSB8fCBbXSlbMV0pLFxuICAgICAgICBib3hlZSA9IC9Cb3hlZS9pLnRlc3QoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpLFxuICAgICAgICBkb2N1bWVudCA9ICRkb2N1bWVudFswXSB8fCB7fSxcbiAgICAgICAgdmVuZG9yUHJlZml4LFxuICAgICAgICB2ZW5kb3JSZWdleCA9IC9eKE1venx3ZWJraXR8bXMpKD89W0EtWl0pLyxcbiAgICAgICAgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5LnN0eWxlLFxuICAgICAgICB0cmFuc2l0aW9ucyA9IGZhbHNlLFxuICAgICAgICBhbmltYXRpb25zID0gZmFsc2UsXG4gICAgICAgIG1hdGNoO1xuXG4gICAgaWYgKGJvZHlTdHlsZSkge1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBib2R5U3R5bGUpIHtcbiAgICAgICAgaWYgKG1hdGNoID0gdmVuZG9yUmVnZXguZXhlYyhwcm9wKSkge1xuICAgICAgICAgIHZlbmRvclByZWZpeCA9IG1hdGNoWzBdO1xuICAgICAgICAgIHZlbmRvclByZWZpeCA9IHZlbmRvclByZWZpeC5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKSArIHZlbmRvclByZWZpeC5zdWJzdHIoMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF2ZW5kb3JQcmVmaXgpIHtcbiAgICAgICAgdmVuZG9yUHJlZml4ID0gKCdXZWJraXRPcGFjaXR5JyBpbiBib2R5U3R5bGUpICYmICd3ZWJraXQnO1xuICAgICAgfVxuXG4gICAgICB0cmFuc2l0aW9ucyA9ICEhKCgndHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKSB8fCAodmVuZG9yUHJlZml4ICsgJ1RyYW5zaXRpb24nIGluIGJvZHlTdHlsZSkpO1xuICAgICAgYW5pbWF0aW9ucyAgPSAhISgoJ2FuaW1hdGlvbicgaW4gYm9keVN0eWxlKSB8fCAodmVuZG9yUHJlZml4ICsgJ0FuaW1hdGlvbicgaW4gYm9keVN0eWxlKSk7XG5cbiAgICAgIGlmIChhbmRyb2lkICYmICghdHJhbnNpdGlvbnMgfHwgICFhbmltYXRpb25zKSkge1xuICAgICAgICB0cmFuc2l0aW9ucyA9IGlzU3RyaW5nKGJvZHlTdHlsZS53ZWJraXRUcmFuc2l0aW9uKTtcbiAgICAgICAgYW5pbWF0aW9ucyA9IGlzU3RyaW5nKGJvZHlTdHlsZS53ZWJraXRBbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIEFuZHJvaWQgaGFzIGhpc3RvcnkucHVzaFN0YXRlLCBidXQgaXQgZG9lcyBub3QgdXBkYXRlIGxvY2F0aW9uIGNvcnJlY3RseVxuICAgICAgLy8gc28gbGV0J3Mgbm90IHVzZSB0aGUgaGlzdG9yeSBBUEkgYXQgYWxsLlxuICAgICAgLy8gaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2FuZHJvaWQvaXNzdWVzL2RldGFpbD9pZD0xNzQ3MVxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTA0XG5cbiAgICAgIC8vIG9sZGVyIHdlYmtpdCBicm93c2VyICg1MzMuOSkgb24gQm94ZWUgYm94IGhhcyBleGFjdGx5IHRoZSBzYW1lIHByb2JsZW0gYXMgQW5kcm9pZCBoYXNcbiAgICAgIC8vIHNvIGxldCdzIG5vdCB1c2UgdGhlIGhpc3RvcnkgQVBJIGFsc29cbiAgICAgIC8vIFdlIGFyZSBwdXJwb3NlZnVsbHkgdXNpbmcgYCEoYW5kcm9pZCA8IDQpYCB0byBjb3ZlciB0aGUgY2FzZSB3aGVuIGBhbmRyb2lkYCBpcyB1bmRlZmluZWRcbiAgICAgIC8vIGpzaGludCAtVzAxOFxuICAgICAgaGlzdG9yeTogISEoJHdpbmRvdy5oaXN0b3J5ICYmICR3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgJiYgIShhbmRyb2lkIDwgNCkgJiYgIWJveGVlKSxcbiAgICAgIC8vIGpzaGludCArVzAxOFxuICAgICAgaGFzRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIC8vIElFOSBpbXBsZW1lbnRzICdpbnB1dCcgZXZlbnQgaXQncyBzbyBmdWJhcmVkIHRoYXQgd2UgcmF0aGVyIHByZXRlbmQgdGhhdCBpdCBkb2Vzbid0IGhhdmVcbiAgICAgICAgLy8gaXQuIEluIHBhcnRpY3VsYXIgdGhlIGV2ZW50IGlzIG5vdCBmaXJlZCB3aGVuIGJhY2tzcGFjZSBvciBkZWxldGUga2V5IGFyZSBwcmVzc2VkIG9yXG4gICAgICAgIC8vIHdoZW4gY3V0IG9wZXJhdGlvbiBpcyBwZXJmb3JtZWQuXG4gICAgICAgIC8vIElFMTArIGltcGxlbWVudHMgJ2lucHV0JyBldmVudCBidXQgaXQgZXJyb25lb3VzbHkgZmlyZXMgdW5kZXIgdmFyaW91cyBzaXR1YXRpb25zLFxuICAgICAgICAvLyBlLmcuIHdoZW4gcGxhY2Vob2xkZXIgY2hhbmdlcywgb3IgYSBmb3JtIGlzIGZvY3VzZWQuXG4gICAgICAgIGlmIChldmVudCA9PT0gJ2lucHV0JyAmJiBtc2llIDw9IDExKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50U3VwcG9ydFtldmVudF0pKSB7XG4gICAgICAgICAgdmFyIGRpdkVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGV2ZW50U3VwcG9ydFtldmVudF0gPSAnb24nICsgZXZlbnQgaW4gZGl2RWxtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50U3VwcG9ydFtldmVudF07XG4gICAgICB9LFxuICAgICAgY3NwOiBjc3AoKSxcbiAgICAgIHZlbmRvclByZWZpeDogdmVuZG9yUHJlZml4LFxuICAgICAgdHJhbnNpdGlvbnM6IHRyYW5zaXRpb25zLFxuICAgICAgYW5pbWF0aW9uczogYW5pbWF0aW9ucyxcbiAgICAgIGFuZHJvaWQ6IGFuZHJvaWRcbiAgICB9O1xuICB9XTtcbn1cblxudmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkdGVtcGxhdGVSZXF1ZXN0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYCR0ZW1wbGF0ZVJlcXVlc3RgIHNlcnZpY2UgcnVucyBzZWN1cml0eSBjaGVja3MgdGhlbiBkb3dubG9hZHMgdGhlIHByb3ZpZGVkIHRlbXBsYXRlIHVzaW5nXG4gKiBgJGh0dHBgIGFuZCwgdXBvbiBzdWNjZXNzLCBzdG9yZXMgdGhlIGNvbnRlbnRzIGluc2lkZSBvZiBgJHRlbXBsYXRlQ2FjaGVgLiBJZiB0aGUgSFRUUCByZXF1ZXN0XG4gKiBmYWlscyBvciB0aGUgcmVzcG9uc2UgZGF0YSBvZiB0aGUgSFRUUCByZXF1ZXN0IGlzIGVtcHR5LCBhIGAkY29tcGlsZWAgZXJyb3Igd2lsbCBiZSB0aHJvd24gKHRoZVxuICogZXhjZXB0aW9uIGNhbiBiZSB0aHdhcnRlZCBieSBzZXR0aW5nIHRoZSAybmQgcGFyYW1ldGVyIG9mIHRoZSBmdW5jdGlvbiB0byB0cnVlKS4gTm90ZSB0aGF0IHRoZVxuICogY29udGVudHMgb2YgYCR0ZW1wbGF0ZUNhY2hlYCBhcmUgdHJ1c3RlZCwgc28gdGhlIGNhbGwgdG8gYCRzY2UuZ2V0VHJ1c3RlZFVybCh0cGwpYCBpcyBvbWl0dGVkXG4gKiB3aGVuIGB0cGxgIGlzIG9mIHR5cGUgc3RyaW5nIGFuZCBgJHRlbXBsYXRlQ2FjaGVgIGhhcyB0aGUgbWF0Y2hpbmcgZW50cnkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8VHJ1c3RlZFJlc291cmNlVXJsfSB0cGwgVGhlIEhUVFAgcmVxdWVzdCB0ZW1wbGF0ZSBVUkxcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGlnbm9yZVJlcXVlc3RFcnJvciBXaGV0aGVyIG9yIG5vdCB0byBpZ25vcmUgdGhlIGV4Y2VwdGlvbiB3aGVuIHRoZSByZXF1ZXN0IGZhaWxzIG9yIHRoZSB0ZW1wbGF0ZSBpcyBlbXB0eVxuICpcbiAqIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSBmb3IgdGhlIEhUVFAgcmVzcG9uc2UgZGF0YSBvZiB0aGUgZ2l2ZW4gVVJMLlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3RhbFBlbmRpbmdSZXF1ZXN0cyB0b3RhbCBhbW91bnQgb2YgcGVuZGluZyB0ZW1wbGF0ZSByZXF1ZXN0cyBiZWluZyBkb3dubG9hZGVkLlxuICovXG5mdW5jdGlvbiAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHRlbXBsYXRlQ2FjaGUnLCAnJGh0dHAnLCAnJHEnLCAnJHNjZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlLCAkaHR0cCwgJHEsICRzY2UpIHtcbiAgICBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0Rm4odHBsLCBpZ25vcmVSZXF1ZXN0RXJyb3IpIHtcbiAgICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cysrO1xuXG4gICAgICAvLyBXZSBjb25zaWRlciB0aGUgdGVtcGxhdGUgY2FjaGUgaG9sZHMgb25seSB0cnVzdGVkIHRlbXBsYXRlcywgc29cbiAgICAgIC8vIHRoZXJlJ3Mgbm8gbmVlZCB0byBnbyB0aHJvdWdoIHdoaXRlbGlzdGluZyBhZ2FpbiBmb3Iga2V5cyB0aGF0IGFscmVhZHlcbiAgICAgIC8vIGFyZSBpbmNsdWRlZCBpbiB0aGVyZS4gVGhpcyBhbHNvIG1ha2VzIEFuZ3VsYXIgYWNjZXB0IGFueSBzY3JpcHRcbiAgICAgIC8vIGRpcmVjdGl2ZSwgbm8gbWF0dGVyIGl0cyBuYW1lLiBIb3dldmVyLCB3ZSBzdGlsbCBuZWVkIHRvIHVud3JhcCB0cnVzdGVkXG4gICAgICAvLyB0eXBlcy5cbiAgICAgIGlmICghaXNTdHJpbmcodHBsKSB8fCAhJHRlbXBsYXRlQ2FjaGUuZ2V0KHRwbCkpIHtcbiAgICAgICAgdHBsID0gJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodHBsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYW5zZm9ybVJlc3BvbnNlID0gJGh0dHAuZGVmYXVsdHMgJiYgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2U7XG5cbiAgICAgIGlmIChpc0FycmF5KHRyYW5zZm9ybVJlc3BvbnNlKSkge1xuICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZSA9IHRyYW5zZm9ybVJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbih0cmFuc2Zvcm1lcikge1xuICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lciAhPT0gZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zZm9ybVJlc3BvbnNlID09PSBkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtKSB7XG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGh0dHBPcHRpb25zID0ge1xuICAgICAgICBjYWNoZTogJHRlbXBsYXRlQ2FjaGUsXG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiB0cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuICRodHRwLmdldCh0cGwsIGh0dHBPcHRpb25zKVxuICAgICAgICBbJ2ZpbmFsbHknXShmdW5jdGlvbigpIHtcbiAgICAgICAgICBoYW5kbGVSZXF1ZXN0Rm4udG90YWxQZW5kaW5nUmVxdWVzdHMtLTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodHBsLCByZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVFcnJvcihyZXNwKSB7XG4gICAgICAgIGlmICghaWdub3JlUmVxdWVzdEVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbG9hZCcsICdGYWlsZWQgdG8gbG9hZCB0ZW1wbGF0ZTogezB9IChIVFRQIHN0YXR1czogezF9IHsyfSknLFxuICAgICAgICAgICAgdHBsLCByZXNwLnN0YXR1cywgcmVzcC5zdGF0dXNUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cyA9IDA7XG5cbiAgICByZXR1cm4gaGFuZGxlUmVxdWVzdEZuO1xuICB9XTtcbn1cblxuZnVuY3Rpb24gJCRUZXN0YWJpbGl0eVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJGxvY2F0aW9uJyxcbiAgICAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAgICRicm93c2VyLCAgICRsb2NhdGlvbikge1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJHRlc3RhYmlsaXR5XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUaGUgcHJpdmF0ZSAkJHRlc3RhYmlsaXR5IHNlcnZpY2UgcHJvdmlkZXMgYSBjb2xsZWN0aW9uIG9mIG1ldGhvZHMgZm9yIHVzZSB3aGVuIGRlYnVnZ2luZ1xuICAgICAqIG9yIGJ5IGF1dG9tYXRlZCB0ZXN0IGFuZCBkZWJ1Z2dpbmcgdG9vbHMuXG4gICAgICovXG4gICAgdmFyIHRlc3RhYmlsaXR5ID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I2ZpbmRCaW5kaW5nc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSBib3VuZCAodmlhIG5nLWJpbmQgb3Ige3t9fSlcbiAgICAgKiB0byBleHByZXNzaW9ucyBtYXRjaGluZyB0aGUgaW5wdXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgcm9vdCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBUaGUgYmluZGluZyBleHByZXNzaW9uIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLiBGaWx0ZXJzIGFuZCB3aGl0ZXNwYWNlIGFyZSBpZ25vcmVkLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmZpbmRCaW5kaW5ncyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV4cHJlc3Npb24sIG9wdF9leGFjdE1hdGNoKSB7XG4gICAgICB2YXIgYmluZGluZ3MgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25nLWJpbmRpbmcnKTtcbiAgICAgIHZhciBtYXRjaGVzID0gW107XG4gICAgICBmb3JFYWNoKGJpbmRpbmdzLCBmdW5jdGlvbihiaW5kaW5nKSB7XG4gICAgICAgIHZhciBkYXRhQmluZGluZyA9IGFuZ3VsYXIuZWxlbWVudChiaW5kaW5nKS5kYXRhKCckYmluZGluZycpO1xuICAgICAgICBpZiAoZGF0YUJpbmRpbmcpIHtcbiAgICAgICAgICBmb3JFYWNoKGRhdGFCaW5kaW5nLCBmdW5jdGlvbihiaW5kaW5nTmFtZSkge1xuICAgICAgICAgICAgaWYgKG9wdF9leGFjdE1hdGNoKSB7XG4gICAgICAgICAgICAgIHZhciBtYXRjaGVyID0gbmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGVzY2FwZUZvclJlZ2V4cChleHByZXNzaW9uKSArICcoXFxcXHN8XFxcXHx8JCknKTtcbiAgICAgICAgICAgICAgaWYgKG1hdGNoZXIudGVzdChiaW5kaW5nTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goYmluZGluZyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChiaW5kaW5nTmFtZS5pbmRleE9mKGV4cHJlc3Npb24pICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGJpbmRpbmcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZE1vZGVsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB0d28td2F5IGZvdW5kIHZpYSBuZy1tb2RlbCB0b1xuICAgICAqIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBtb2RlbCBleHByZXNzaW9uIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmZpbmRNb2RlbHMgPSBmdW5jdGlvbihlbGVtZW50LCBleHByZXNzaW9uLCBvcHRfZXhhY3RNYXRjaCkge1xuICAgICAgdmFyIHByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmdcXFxcOiddO1xuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwcmVmaXhlcy5sZW5ndGg7ICsrcCkge1xuICAgICAgICB2YXIgYXR0cmlidXRlRXF1YWxzID0gb3B0X2V4YWN0TWF0Y2ggPyAnPScgOiAnKj0nO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSAnWycgKyBwcmVmaXhlc1twXSArICdtb2RlbCcgKyBhdHRyaWJ1dGVFcXVhbHMgKyAnXCInICsgZXhwcmVzc2lvbiArICdcIl0nO1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZ2V0TG9jYXRpb25cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IGZvciBnZXR0aW5nIHRoZSBsb2NhdGlvbiBpbiBhIGJyb3dzZXIgYWdub3N0aWMgd2F5LiBSZXR1cm5zXG4gICAgICogICAgIHRoZSBwYXRoLCBzZWFyY2gsIGFuZCBoYXNoLiAoZS5nLiAvcGF0aD9hPWIjaGFzaClcbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5nZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRsb2NhdGlvbi51cmwoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNzZXRMb2NhdGlvblxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgZm9yIG5hdmlnYXRpbmcgdG8gYSBsb2NhdGlvbiB3aXRob3V0IGRvaW5nIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGxvY2F0aW9uIHVybCAocGF0aCwgc2VhcmNoIGFuZCBoYXNoLFxuICAgICAqICAgICBlLmcuIC9wYXRoP2E9YiNoYXNoKSB0byBnbyB0by5cbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKHVybCkge1xuICAgICAgaWYgKHVybCAhPT0gJGxvY2F0aW9uLnVybCgpKSB7XG4gICAgICAgICRsb2NhdGlvbi51cmwodXJsKTtcbiAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjd2hlblN0YWJsZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ2FsbHMgdGhlIGNhbGxiYWNrIHdoZW4gJHRpbWVvdXQgYW5kICRodHRwIHJlcXVlc3RzIGFyZSBjb21wbGV0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LndoZW5TdGFibGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJGJyb3dzZXIubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyhjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIHJldHVybiB0ZXN0YWJpbGl0eTtcbiAgfV07XG59XG5cbmZ1bmN0aW9uICRUaW1lb3V0UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckcScsICckJHEnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLFxuICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJHEsICAgJCRxLCAgICRleGNlcHRpb25IYW5kbGVyKSB7XG5cbiAgICB2YXIgZGVmZXJyZWRzID0ge307XG5cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgICogQG5hbWUgJHRpbWVvdXRcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldFRpbWVvdXRgLiBUaGUgYGZuYCBmdW5jdGlvbiBpcyB3cmFwcGVkIGludG8gYSB0cnkvY2F0Y2hcbiAgICAgICogYmxvY2sgYW5kIGRlbGVnYXRlcyBhbnkgZXhjZXB0aW9ucyB0b1xuICAgICAgKiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAqXG4gICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgY2FsbGluZyBgJHRpbWVvdXRgIGlzIGEgcHJvbWlzZSwgd2hpY2ggd2lsbCBiZSByZXNvbHZlZCB3aGVuXG4gICAgICAqIHRoZSBkZWxheSBoYXMgcGFzc2VkIGFuZCB0aGUgdGltZW91dCBmdW5jdGlvbiwgaWYgcHJvdmlkZWQsIGlzIGV4ZWN1dGVkLlxuICAgICAgKlxuICAgICAgKiBUbyBjYW5jZWwgYSB0aW1lb3V0IHJlcXVlc3QsIGNhbGwgYCR0aW1lb3V0LmNhbmNlbChwcm9taXNlKWAuXG4gICAgICAqXG4gICAgICAqIEluIHRlc3RzIHlvdSBjYW4gdXNlIHtAbGluayBuZ01vY2suJHRpbWVvdXQgYCR0aW1lb3V0LmZsdXNoKClgfSB0b1xuICAgICAgKiBzeW5jaHJvbm91c2x5IGZsdXNoIHRoZSBxdWV1ZSBvZiBkZWZlcnJlZCBmdW5jdGlvbnMuXG4gICAgICAqXG4gICAgICAqIElmIHlvdSBvbmx5IHdhbnQgYSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBhZnRlciBzb21lIHNwZWNpZmllZCBkZWxheVxuICAgICAgKiB0aGVuIHlvdSBjYW4gY2FsbCBgJHRpbWVvdXRgIHdpdGhvdXQgdGhlIGBmbmAgZnVuY3Rpb24uXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IGZuIEEgZnVuY3Rpb24sIHdob3NlIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVsYXllZC5cbiAgICAgICogQHBhcmFtIHtudW1iZXI9fSBbZGVsYXk9MF0gRGVsYXkgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW52b2tlQXBwbHk9dHJ1ZV0gSWYgc2V0IHRvIGBmYWxzZWAgc2tpcHMgbW9kZWwgZGlydHkgY2hlY2tpbmcsIG90aGVyd2lzZVxuICAgICAgKiAgIHdpbGwgaW52b2tlIGBmbmAgd2l0aGluIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkgJGFwcGx5fSBibG9jay5cbiAgICAgICogQHBhcmFtIHsuLi4qPX0gUGFzcyBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gdGhlIGV4ZWN1dGVkIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2hlbiB0aGUgdGltZW91dCBpcyByZWFjaGVkLiBUaGUgdmFsdWUgdGhpc1xuICAgICAgKiAgIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoIGlzIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBmbmAgZnVuY3Rpb24uXG4gICAgICAqXG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVvdXQoZm4sIGRlbGF5LCBpbnZva2VBcHBseSkge1xuICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICBpbnZva2VBcHBseSA9IGRlbGF5O1xuICAgICAgICBkZWxheSA9IGZuO1xuICAgICAgICBmbiA9IG5vb3A7XG4gICAgICB9XG5cbiAgICAgIHZhciBhcmdzID0gc2xpY2VBcmdzKGFyZ3VtZW50cywgMyksXG4gICAgICAgICAgc2tpcEFwcGx5ID0gKGlzRGVmaW5lZChpbnZva2VBcHBseSkgJiYgIWludm9rZUFwcGx5KSxcbiAgICAgICAgICBkZWZlcnJlZCA9IChza2lwQXBwbHkgPyAkJHEgOiAkcSkuZGVmZXIoKSxcbiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICB0aW1lb3V0SWQ7XG5cbiAgICAgIHRpbWVvdXRJZCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZm4uYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpO1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgIH0sIGRlbGF5KTtcblxuICAgICAgcHJvbWlzZS4kJHRpbWVvdXRJZCA9IHRpbWVvdXRJZDtcbiAgICAgIGRlZmVycmVkc1t0aW1lb3V0SWRdID0gZGVmZXJyZWQ7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICR0aW1lb3V0I2NhbmNlbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuIEFzIGEgcmVzdWx0IG9mIHRoaXMsIHRoZSBwcm9taXNlIHdpbGwgYmVcbiAgICAgICogcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtQcm9taXNlPX0gcHJvbWlzZSBQcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJHRpbWVvdXRgIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWxseVxuICAgICAgKiAgIGNhbmNlbGVkLlxuICAgICAgKi9cbiAgICB0aW1lb3V0LmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCR0aW1lb3V0SWQgaW4gZGVmZXJyZWRzKSB7XG4gICAgICAgIGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXS5yZWplY3QoJ2NhbmNlbGVkJyk7XG4gICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XG4gICAgICAgIHJldHVybiAkYnJvd3Nlci5kZWZlci5jYW5jZWwocHJvbWlzZS4kJHRpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aW1lb3V0O1xuICB9XTtcbn1cblxuLy8gTk9URTogIFRoZSB1c2FnZSBvZiB3aW5kb3cgYW5kIGRvY3VtZW50IGluc3RlYWQgb2YgJHdpbmRvdyBhbmQgJGRvY3VtZW50IGhlcmUgaXNcbi8vIGRlbGliZXJhdGUuICBUaGlzIHNlcnZpY2UgZGVwZW5kcyBvbiB0aGUgc3BlY2lmaWMgYmVoYXZpb3Igb2YgYW5jaG9yIG5vZGVzIGNyZWF0ZWQgYnkgdGhlXG4vLyBicm93c2VyIChyZXNvbHZpbmcgYW5kIHBhcnNpbmcgVVJMcykgdGhhdCBpcyB1bmxpa2VseSB0byBiZSBwcm92aWRlZCBieSBtb2NrIG9iamVjdHMgYW5kXG4vLyBjYXVzZSB1cyB0byBicmVhayB0ZXN0cy4gIEluIGFkZGl0aW9uLCB3aGVuIHRoZSBicm93c2VyIHJlc29sdmVzIGEgVVJMIGZvciBYSFIsIGl0XG4vLyBkb2Vzbid0IGtub3cgYWJvdXQgbW9ja2VkIGxvY2F0aW9ucyBhbmQgcmVzb2x2ZXMgVVJMcyB0byB0aGUgcmVhbCBkb2N1bWVudCAtIHdoaWNoIGlzXG4vLyBleGFjdGx5IHRoZSBiZWhhdmlvciBuZWVkZWQgaGVyZS4gIFRoZXJlIGlzIGxpdHRsZSB2YWx1ZSBpcyBtb2NraW5nIHRoZXNlIG91dCBmb3IgdGhpc1xuLy8gc2VydmljZS5cbnZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xudmFyIG9yaWdpblVybCA9IHVybFJlc29sdmUod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG5cbi8qKlxuICpcbiAqIEltcGxlbWVudGF0aW9uIE5vdGVzIGZvciBub24tSUUgYnJvd3NlcnNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFzc2lnbmluZyBhIFVSTCB0byB0aGUgaHJlZiBwcm9wZXJ0eSBvZiBhbiBhbmNob3IgRE9NIG5vZGUsIGV2ZW4gb25lIGF0dGFjaGVkIHRvIHRoZSBET00sXG4gKiByZXN1bHRzIGJvdGggaW4gdGhlIG5vcm1hbGl6aW5nIGFuZCBwYXJzaW5nIG9mIHRoZSBVUkwuICBOb3JtYWxpemluZyBtZWFucyB0aGF0IGEgcmVsYXRpdmVcbiAqIFVSTCB3aWxsIGJlIHJlc29sdmVkIGludG8gYW4gYWJzb2x1dGUgVVJMIGluIHRoZSBjb250ZXh0IG9mIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqIFBhcnNpbmcgbWVhbnMgdGhhdCB0aGUgYW5jaG9yIG5vZGUncyBob3N0LCBob3N0bmFtZSwgcHJvdG9jb2wsIHBvcnQsIHBhdGhuYW1lIGFuZCByZWxhdGVkXG4gKiBwcm9wZXJ0aWVzIGFyZSBhbGwgcG9wdWxhdGVkIHRvIHJlZmxlY3QgdGhlIG5vcm1hbGl6ZWQgVVJMLiAgVGhpcyBhcHByb2FjaCBoYXMgd2lkZVxuICogY29tcGF0aWJpbGl0eSAtIFNhZmFyaSAxKywgTW96aWxsYSAxKywgT3BlcmEgNyssZSBldGMuICBTZWVcbiAqIGh0dHA6Ly93d3cuYXB0YW5hLmNvbS9yZWZlcmVuY2UvaHRtbC9hcGkvSFRNTEFuY2hvckVsZW1lbnQuaHRtbFxuICpcbiAqIEltcGxlbWVudGF0aW9uIE5vdGVzIGZvciBJRVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBJRSA8PSAxMCBub3JtYWxpemVzIHRoZSBVUkwgd2hlbiBhc3NpZ25lZCB0byB0aGUgYW5jaG9yIG5vZGUgc2ltaWxhciB0byB0aGUgb3RoZXJcbiAqIGJyb3dzZXJzLiAgSG93ZXZlciwgdGhlIHBhcnNlZCBjb21wb25lbnRzIHdpbGwgbm90IGJlIHNldCBpZiB0aGUgVVJMIGFzc2lnbmVkIGRpZCBub3Qgc3BlY2lmeVxuICogdGhlbS4gIChlLmcuIGlmIHlvdSBhc3NpZ24gYS5ocmVmID0gXCJmb29cIiwgdGhlbiBhLnByb3RvY29sLCBhLmhvc3QsIGV0Yy4gd2lsbCBiZSBlbXB0eS4pICBXZVxuICogd29yayBhcm91bmQgdGhhdCBieSBwZXJmb3JtaW5nIHRoZSBwYXJzaW5nIGluIGEgMm5kIHN0ZXAgYnkgdGFraW5nIGEgcHJldmlvdXNseSBub3JtYWxpemVkXG4gKiBVUkwgKGUuZy4gYnkgYXNzaWduaW5nIHRvIGEuaHJlZikgYW5kIGFzc2lnbmluZyBpdCBhLmhyZWYgYWdhaW4uICBUaGlzIGNvcnJlY3RseSBwb3B1bGF0ZXMgdGhlXG4gKiBwcm9wZXJ0aWVzIHN1Y2ggYXMgcHJvdG9jb2wsIGhvc3RuYW1lLCBwb3J0LCBldGMuXG4gKlxuICogUmVmZXJlbmNlczpcbiAqICAgaHR0cDovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEFuY2hvckVsZW1lbnRcbiAqICAgaHR0cDovL3d3dy5hcHRhbmEuY29tL3JlZmVyZW5jZS9odG1sL2FwaS9IVE1MQW5jaG9yRWxlbWVudC5odG1sXG4gKiAgIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICogICBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMjkwMlxuICogICBodHRwOi8vamFtZXMucGFkb2xzZXkuY29tL2phdmFzY3JpcHQvcGFyc2luZy11cmxzLXdpdGgtdGhlLWRvbS9cbiAqXG4gKiBAa2luZCBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZC5cbiAqIEBkZXNjcmlwdGlvbiBOb3JtYWxpemVzIGFuZCBwYXJzZXMgYSBVUkwuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBSZXR1cm5zIHRoZSBub3JtYWxpemVkIFVSTCBhcyBhIGRpY3Rpb25hcnkuXG4gKlxuICogICB8IG1lbWJlciBuYW1lICAgfCBEZXNjcmlwdGlvbiAgICB8XG4gKiAgIHwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXxcbiAqICAgfCBocmVmICAgICAgICAgIHwgQSBub3JtYWxpemVkIHZlcnNpb24gb2YgdGhlIHByb3ZpZGVkIFVSTCBpZiBpdCB3YXMgbm90IGFuIGFic29sdXRlIFVSTCB8XG4gKiAgIHwgcHJvdG9jb2wgICAgICB8IFRoZSBwcm90b2NvbCBpbmNsdWRpbmcgdGhlIHRyYWlsaW5nIGNvbG9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICB8IGhvc3QgICAgICAgICAgfCBUaGUgaG9zdCBhbmQgcG9ydCAoaWYgdGhlIHBvcnQgaXMgbm9uLWRlZmF1bHQpIG9mIHRoZSBub3JtYWxpemVkVXJsICAgIHxcbiAqICAgfCBzZWFyY2ggICAgICAgIHwgVGhlIHNlYXJjaCBwYXJhbXMsIG1pbnVzIHRoZSBxdWVzdGlvbiBtYXJrICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgIHwgaGFzaCAgICAgICAgICB8IFRoZSBoYXNoIHN0cmluZywgbWludXMgdGhlIGhhc2ggc3ltYm9sXG4gKiAgIHwgaG9zdG5hbWUgICAgICB8IFRoZSBob3N0bmFtZVxuICogICB8IHBvcnQgICAgICAgICAgfCBUaGUgcG9ydCwgd2l0aG91dCBcIjpcIlxuICogICB8IHBhdGhuYW1lICAgICAgfCBUaGUgcGF0aG5hbWUsIGJlZ2lubmluZyB3aXRoIFwiL1wiXG4gKlxuICovXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHVybCkge1xuICB2YXIgaHJlZiA9IHVybDtcblxuICBpZiAobXNpZSkge1xuICAgIC8vIE5vcm1hbGl6ZSBiZWZvcmUgcGFyc2UuICBSZWZlciBJbXBsZW1lbnRhdGlvbiBOb3RlcyBvbiB3aHkgdGhpcyBpc1xuICAgIC8vIGRvbmUgaW4gdHdvIHN0ZXBzIG9uIElFLlxuICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgaHJlZik7XG4gICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gIH1cblxuICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gIHJldHVybiB7XG4gICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJylcbiAgICAgID8gdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIDogJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgfTtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIHJlcXVlc3QgVVJMIGFuZCBkZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGEgc2FtZS1vcmlnaW4gcmVxdWVzdCBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZXF1ZXN0VXJsIFRoZSB1cmwgb2YgdGhlIHJlcXVlc3QgYXMgYSBzdHJpbmcgdGhhdCB3aWxsIGJlIHJlc29sdmVkXG4gKiBvciBhIHBhcnNlZCBVUkwgb2JqZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgZm9yIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHVybElzU2FtZU9yaWdpbihyZXF1ZXN0VXJsKSB7XG4gIHZhciBwYXJzZWQgPSAoaXNTdHJpbmcocmVxdWVzdFVybCkpID8gdXJsUmVzb2x2ZShyZXF1ZXN0VXJsKSA6IHJlcXVlc3RVcmw7XG4gIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VcmwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVXJsLmhvc3QpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkd2luZG93XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHJlZmVyZW5jZSB0byB0aGUgYnJvd3NlcidzIGB3aW5kb3dgIG9iamVjdC4gV2hpbGUgYHdpbmRvd2BcbiAqIGlzIGdsb2JhbGx5IGF2YWlsYWJsZSBpbiBKYXZhU2NyaXB0LCBpdCBjYXVzZXMgdGVzdGFiaWxpdHkgcHJvYmxlbXMsIGJlY2F1c2VcbiAqIGl0IGlzIGEgZ2xvYmFsIHZhcmlhYmxlLiBJbiBhbmd1bGFyIHdlIGFsd2F5cyByZWZlciB0byBpdCB0aHJvdWdoIHRoZVxuICogYCR3aW5kb3dgIHNlcnZpY2UsIHNvIGl0IG1heSBiZSBvdmVycmlkZGVuLCByZW1vdmVkIG9yIG1vY2tlZCBmb3IgdGVzdGluZy5cbiAqXG4gKiBFeHByZXNzaW9ucywgbGlrZSB0aGUgb25lIGRlZmluZWQgZm9yIHRoZSBgbmdDbGlja2AgZGlyZWN0aXZlIGluIHRoZSBleGFtcGxlXG4gKiBiZWxvdywgYXJlIGV2YWx1YXRlZCB3aXRoIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQgc2NvcGUuICBUaGVyZWZvcmUsIHRoZXJlIGlzXG4gKiBubyByaXNrIG9mIGluYWR2ZXJ0ZW50bHkgY29kaW5nIGluIGEgZGVwZW5kZW5jeSBvbiBhIGdsb2JhbCB2YWx1ZSBpbiBzdWNoIGFuXG4gKiBleHByZXNzaW9uLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJ3aW5kb3dFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd3aW5kb3dFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyR3aW5kb3cnLCBmdW5jdGlvbigkc2NvcGUsICR3aW5kb3cpIHtcbiAgICAgICAgICAgICAkc2NvcGUuZ3JlZXRpbmcgPSAnSGVsbG8sIFdvcmxkISc7XG4gICAgICAgICAgICAgJHNjb3BlLmRvR3JlZXRpbmcgPSBmdW5jdGlvbihncmVldGluZykge1xuICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydChncmVldGluZyk7XG4gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cImdyZWV0aW5nXCIgYXJpYS1sYWJlbD1cImdyZWV0aW5nXCIgLz5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJkb0dyZWV0aW5nKGdyZWV0aW5nKVwiPkFMRVJUPC9idXR0b24+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgaXQoJ3Nob3VsZCBkaXNwbGF5IHRoZSBncmVldGluZyBpbiB0aGUgaW5wdXQgYm94JywgZnVuY3Rpb24oKSB7XG4gICAgICAgZWxlbWVudChieS5tb2RlbCgnZ3JlZXRpbmcnKSkuc2VuZEtleXMoJ0hlbGxvLCBFMkUgVGVzdHMnKTtcbiAgICAgICAvLyBJZiB3ZSBjbGljayB0aGUgYnV0dG9uIGl0IHdpbGwgYmxvY2sgdGhlIHRlc3QgcnVubmVyXG4gICAgICAgLy8gZWxlbWVudCgnOmJ1dHRvbicpLmNsaWNrKCk7XG4gICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkV2luZG93UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IHZhbHVlRm4od2luZG93KTtcbn1cblxuLyoqXG4gKiBAbmFtZSAkJGNvb2tpZVJlYWRlclxuICogQHJlcXVpcmVzICRkb2N1bWVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBpcyBhIHByaXZhdGUgc2VydmljZSBmb3IgcmVhZGluZyBjb29raWVzIHVzZWQgYnkgJGh0dHAgYW5kIG5nQ29va2llc1xuICpcbiAqIEByZXR1cm4ge09iamVjdH0gYSBrZXkvdmFsdWUgbWFwIG9mIHRoZSBjdXJyZW50IGNvb2tpZXNcbiAqL1xuZnVuY3Rpb24gJCRDb29raWVSZWFkZXIoJGRvY3VtZW50KSB7XG4gIHZhciByYXdEb2N1bWVudCA9ICRkb2N1bWVudFswXSB8fCB7fTtcbiAgdmFyIGxhc3RDb29raWVzID0ge307XG4gIHZhciBsYXN0Q29va2llU3RyaW5nID0gJyc7XG5cbiAgZnVuY3Rpb24gc2FmZURlY29kZVVSSUNvbXBvbmVudChzdHIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb29raWVBcnJheSwgY29va2llLCBpLCBpbmRleCwgbmFtZTtcbiAgICB2YXIgY3VycmVudENvb2tpZVN0cmluZyA9IHJhd0RvY3VtZW50LmNvb2tpZSB8fCAnJztcblxuICAgIGlmIChjdXJyZW50Q29va2llU3RyaW5nICE9PSBsYXN0Q29va2llU3RyaW5nKSB7XG4gICAgICBsYXN0Q29va2llU3RyaW5nID0gY3VycmVudENvb2tpZVN0cmluZztcbiAgICAgIGNvb2tpZUFycmF5ID0gbGFzdENvb2tpZVN0cmluZy5zcGxpdCgnOyAnKTtcbiAgICAgIGxhc3RDb29raWVzID0ge307XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb29raWVBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb29raWUgPSBjb29raWVBcnJheVtpXTtcbiAgICAgICAgaW5kZXggPSBjb29raWUuaW5kZXhPZignPScpO1xuICAgICAgICBpZiAoaW5kZXggPiAwKSB7IC8vaWdub3JlIG5hbWVsZXNzIGNvb2tpZXNcbiAgICAgICAgICBuYW1lID0gc2FmZURlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKDAsIGluZGV4KSk7XG4gICAgICAgICAgLy8gdGhlIGZpcnN0IHZhbHVlIHRoYXQgaXMgc2VlbiBmb3IgYSBjb29raWUgaXMgdGhlIG1vc3RcbiAgICAgICAgICAvLyBzcGVjaWZpYyBvbmUuICB2YWx1ZXMgZm9yIHRoZSBzYW1lIGNvb2tpZSBuYW1lIHRoYXRcbiAgICAgICAgICAvLyBmb2xsb3cgYXJlIGZvciBsZXNzIHNwZWNpZmljIHBhdGhzLlxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChsYXN0Q29va2llc1tuYW1lXSkpIHtcbiAgICAgICAgICAgIGxhc3RDb29raWVzW25hbWVdID0gc2FmZURlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKGluZGV4ICsgMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGFzdENvb2tpZXM7XG4gIH07XG59XG5cbiQkQ29va2llUmVhZGVyLiRpbmplY3QgPSBbJyRkb2N1bWVudCddO1xuXG5mdW5jdGlvbiAkJENvb2tpZVJlYWRlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSAkJENvb2tpZVJlYWRlcjtcbn1cblxuLyogZ2xvYmFsIGN1cnJlbmN5RmlsdGVyOiB0cnVlLFxuIGRhdGVGaWx0ZXI6IHRydWUsXG4gZmlsdGVyRmlsdGVyOiB0cnVlLFxuIGpzb25GaWx0ZXI6IHRydWUsXG4gbGltaXRUb0ZpbHRlcjogdHJ1ZSxcbiBsb3dlcmNhc2VGaWx0ZXI6IHRydWUsXG4gbnVtYmVyRmlsdGVyOiB0cnVlLFxuIG9yZGVyQnlGaWx0ZXI6IHRydWUsXG4gdXBwZXJjYXNlRmlsdGVyOiB0cnVlLFxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkZmlsdGVyUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEZpbHRlcnMgYXJlIGp1c3QgZnVuY3Rpb25zIHdoaWNoIHRyYW5zZm9ybSBpbnB1dCB0byBhbiBvdXRwdXQuIEhvd2V2ZXIgZmlsdGVycyBuZWVkIHRvIGJlXG4gKiBEZXBlbmRlbmN5IEluamVjdGVkLiBUbyBhY2hpZXZlIHRoaXMgYSBmaWx0ZXIgZGVmaW5pdGlvbiBjb25zaXN0cyBvZiBhIGZhY3RvcnkgZnVuY3Rpb24gd2hpY2ggaXNcbiAqIGFubm90YXRlZCB3aXRoIGRlcGVuZGVuY2llcyBhbmQgaXMgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIGEgZmlsdGVyIGZ1bmN0aW9uLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogRmlsdGVyIG5hbWVzIG11c3QgYmUgdmFsaWQgYW5ndWxhciB7QGxpbmsgZXhwcmVzc2lvbn0gaWRlbnRpZmllcnMsIHN1Y2ggYXMgYHVwcGVyY2FzZWAgb3IgYG9yZGVyQnlgLlxuICogTmFtZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMsIHN1Y2ggYXMgaHlwaGVucyBhbmQgZG90cywgYXJlIG5vdCBhbGxvd2VkLiBJZiB5b3Ugd2lzaCB0byBuYW1lc3BhY2VcbiAqIHlvdXIgZmlsdGVycywgdGhlbiB5b3UgY2FuIHVzZSBjYXBpdGFsaXphdGlvbiAoYG15YXBwU3Vic2VjdGlvbkZpbHRlcnhgKSBvciB1bmRlcnNjb3Jlc1xuICogKGBteWFwcF9zdWJzZWN0aW9uX2ZpbHRlcnhgKS5cbiAqIDwvZGl2PlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIEZpbHRlciByZWdpc3RyYXRpb25cbiAqICAgZnVuY3Rpb24gTXlNb2R1bGUoJHByb3ZpZGUsICRmaWx0ZXJQcm92aWRlcikge1xuICogICAgIC8vIGNyZWF0ZSBhIHNlcnZpY2UgdG8gZGVtb25zdHJhdGUgaW5qZWN0aW9uIChub3QgYWx3YXlzIG5lZWRlZClcbiAqICAgICAkcHJvdmlkZS52YWx1ZSgnZ3JlZXQnLCBmdW5jdGlvbihuYW1lKXtcbiAqICAgICAgIHJldHVybiAnSGVsbG8gJyArIG5hbWUgKyAnISc7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIC8vIHJlZ2lzdGVyIGEgZmlsdGVyIGZhY3Rvcnkgd2hpY2ggdXNlcyB0aGVcbiAqICAgICAvLyBncmVldCBzZXJ2aWNlIHRvIGRlbW9uc3RyYXRlIERJLlxuICogICAgICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcignZ3JlZXQnLCBmdW5jdGlvbihncmVldCl7XG4gKiAgICAgICAvLyByZXR1cm4gdGhlIGZpbHRlciBmdW5jdGlvbiB3aGljaCB1c2VzIHRoZSBncmVldCBzZXJ2aWNlXG4gKiAgICAgICAvLyB0byBnZW5lcmF0ZSBzYWx1dGF0aW9uXG4gKiAgICAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkge1xuICogICAgICAgICAvLyBmaWx0ZXJzIG5lZWQgdG8gYmUgZm9yZ2l2aW5nIHNvIGNoZWNrIGlucHV0IHZhbGlkaXR5XG4gKiAgICAgICAgIHJldHVybiB0ZXh0ICYmIGdyZWV0KHRleHQpIHx8IHRleHQ7XG4gKiAgICAgICB9O1xuICogICAgIH0pO1xuICogICB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgZmlsdGVyIGZ1bmN0aW9uIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgYCRpbmplY3RvcmAgdW5kZXIgdGhlIGZpbHRlciBuYW1lIHN1ZmZpeCB3aXRoXG4gKiBgRmlsdGVyYC5cbiAqXG4gKiBgYGBqc1xuICogICBpdCgnc2hvdWxkIGJlIHRoZSBzYW1lIGluc3RhbmNlJywgaW5qZWN0KFxuICogICAgIGZ1bmN0aW9uKCRmaWx0ZXJQcm92aWRlcikge1xuICogICAgICAgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCdyZXZlcnNlJywgZnVuY3Rpb24oKXtcbiAqICAgICAgICAgcmV0dXJuIC4uLjtcbiAqICAgICAgIH0pO1xuICogICAgIH0sXG4gKiAgICAgZnVuY3Rpb24oJGZpbHRlciwgcmV2ZXJzZUZpbHRlcikge1xuICogICAgICAgZXhwZWN0KCRmaWx0ZXIoJ3JldmVyc2UnKSkudG9CZShyZXZlcnNlRmlsdGVyKTtcbiAqICAgICB9KTtcbiAqIGBgYFxuICpcbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBob3cgYW5ndWxhciBmaWx0ZXJzIHdvcmssIGFuZCBob3cgdG8gY3JlYXRlIHlvdXIgb3duIGZpbHRlcnMsIHNlZVxuICoge0BsaW5rIGd1aWRlL2ZpbHRlciBGaWx0ZXJzfSBpbiB0aGUgQW5ndWxhciBEZXZlbG9wZXIgR3VpZGUuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGZpbHRlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqIEBkZXNjcmlwdGlvblxuICogRmlsdGVycyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyBkYXRhIGRpc3BsYXllZCB0byB0aGUgdXNlci5cbiAqXG4gKiBUaGUgZ2VuZXJhbCBzeW50YXggaW4gdGVtcGxhdGVzIGlzIGFzIGZvbGxvd3M6XG4gKlxuICogICAgICAgICB7eyBleHByZXNzaW9uIFt8IGZpbHRlcl9uYW1lWzpwYXJhbWV0ZXJfdmFsdWVdIC4uLiBdIH19XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZmlsdGVyIGZ1bmN0aW9uIHRvIHJldHJpZXZlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGZpbHRlciBmdW5jdGlvblxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCIkZmlsdGVyXCIgbW9kdWxlPVwiZmlsdGVyRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIk1haW5DdHJsXCI+XG4gICAgICAgIDxoMz57eyBvcmlnaW5hbFRleHQgfX08L2gzPlxuICAgICAgICA8aDM+e3sgZmlsdGVyZWRUZXh0IH19PC9oMz5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuXG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdmaWx0ZXJFeGFtcGxlJywgW10pXG4gICAgICAuY29udHJvbGxlcignTWFpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRmaWx0ZXIpIHtcbiAgICAgICAgJHNjb3BlLm9yaWdpbmFsVGV4dCA9ICdoZWxsbyc7XG4gICAgICAgICRzY29wZS5maWx0ZXJlZFRleHQgPSAkZmlsdGVyKCd1cHBlcmNhc2UnKSgkc2NvcGUub3JpZ2luYWxUZXh0KTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICovXG4kRmlsdGVyUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnXTtcbmZ1bmN0aW9uICRGaWx0ZXJQcm92aWRlcigkcHJvdmlkZSkge1xuICB2YXIgc3VmZml4ID0gJ0ZpbHRlcic7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBOYW1lIG9mIHRoZSBmaWx0ZXIgZnVuY3Rpb24sIG9yIGFuIG9iamVjdCBtYXAgb2YgZmlsdGVycyB3aGVyZVxuICAgKiAgICB0aGUga2V5cyBhcmUgdGhlIGZpbHRlciBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZpbHRlciBmYWN0b3JpZXMuXG4gICAqXG4gICAqICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqICAgICoqTm90ZToqKiBGaWx0ZXIgbmFtZXMgbXVzdCBiZSB2YWxpZCBhbmd1bGFyIHtAbGluayBleHByZXNzaW9ufSBpZGVudGlmaWVycywgc3VjaCBhcyBgdXBwZXJjYXNlYCBvciBgb3JkZXJCeWAuXG4gICAqICAgIE5hbWVzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJzLCBzdWNoIGFzIGh5cGhlbnMgYW5kIGRvdHMsIGFyZSBub3QgYWxsb3dlZC4gSWYgeW91IHdpc2ggdG8gbmFtZXNwYWNlXG4gICAqICAgIHlvdXIgZmlsdGVycywgdGhlbiB5b3UgY2FuIHVzZSBjYXBpdGFsaXphdGlvbiAoYG15YXBwU3Vic2VjdGlvbkZpbHRlcnhgKSBvciB1bmRlcnNjb3Jlc1xuICAgKiAgICAoYG15YXBwX3N1YnNlY3Rpb25fZmlsdGVyeGApLlxuICAgKiAgICA8L2Rpdj5cbiAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgSWYgdGhlIGZpcnN0IGFyZ3VtZW50IHdhcyBhIHN0cmluZywgYSBmYWN0b3J5IGZ1bmN0aW9uIGZvciB0aGUgZmlsdGVyIHRvIGJlIHJlZ2lzdGVyZWQuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJlZ2lzdGVyZWQgZmlsdGVyIGluc3RhbmNlLCBvciBpZiBhIG1hcCBvZiBmaWx0ZXJzIHdhcyBwcm92aWRlZCB0aGVuIGEgbWFwXG4gICAqICAgIG9mIHRoZSByZWdpc3RlcmVkIGZpbHRlciBpbnN0YW5jZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZWdpc3RlcihuYW1lLCBmYWN0b3J5KSB7XG4gICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICB2YXIgZmlsdGVycyA9IHt9O1xuICAgICAgZm9yRWFjaChuYW1lLCBmdW5jdGlvbihmaWx0ZXIsIGtleSkge1xuICAgICAgICBmaWx0ZXJzW2tleV0gPSByZWdpc3RlcihrZXksIGZpbHRlcik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJHByb3ZpZGUuZmFjdG9yeShuYW1lICsgc3VmZml4LCBmYWN0b3J5KTtcbiAgICB9XG4gIH1cbiAgdGhpcy5yZWdpc3RlciA9IHJlZ2lzdGVyO1xuXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiAkaW5qZWN0b3IuZ2V0KG5hbWUgKyBzdWZmaXgpO1xuICAgIH07XG4gIH1dO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAvKiBnbG9iYWxcbiAgICBjdXJyZW5jeUZpbHRlcjogZmFsc2UsXG4gICAgZGF0ZUZpbHRlcjogZmFsc2UsXG4gICAgZmlsdGVyRmlsdGVyOiBmYWxzZSxcbiAgICBqc29uRmlsdGVyOiBmYWxzZSxcbiAgICBsaW1pdFRvRmlsdGVyOiBmYWxzZSxcbiAgICBsb3dlcmNhc2VGaWx0ZXI6IGZhbHNlLFxuICAgIG51bWJlckZpbHRlcjogZmFsc2UsXG4gICAgb3JkZXJCeUZpbHRlcjogZmFsc2UsXG4gICAgdXBwZXJjYXNlRmlsdGVyOiBmYWxzZSxcbiAgKi9cblxuICByZWdpc3RlcignY3VycmVuY3knLCBjdXJyZW5jeUZpbHRlcik7XG4gIHJlZ2lzdGVyKCdkYXRlJywgZGF0ZUZpbHRlcik7XG4gIHJlZ2lzdGVyKCdmaWx0ZXInLCBmaWx0ZXJGaWx0ZXIpO1xuICByZWdpc3RlcignanNvbicsIGpzb25GaWx0ZXIpO1xuICByZWdpc3RlcignbGltaXRUbycsIGxpbWl0VG9GaWx0ZXIpO1xuICByZWdpc3RlcignbG93ZXJjYXNlJywgbG93ZXJjYXNlRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ251bWJlcicsIG51bWJlckZpbHRlcik7XG4gIHJlZ2lzdGVyKCdvcmRlckJ5Jywgb3JkZXJCeUZpbHRlcik7XG4gIHJlZ2lzdGVyKCd1cHBlcmNhc2UnLCB1cHBlcmNhc2VGaWx0ZXIpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGZpbHRlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNlbGVjdHMgYSBzdWJzZXQgb2YgaXRlbXMgZnJvbSBgYXJyYXlgIGFuZCByZXR1cm5zIGl0IGFzIGEgbmV3IGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3VyY2UgYXJyYXkuXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R8ZnVuY3Rpb24oKX0gZXhwcmVzc2lvbiBUaGUgcHJlZGljYXRlIHRvIGJlIHVzZWQgZm9yIHNlbGVjdGluZyBpdGVtcyBmcm9tXG4gKiAgIGBhcnJheWAuXG4gKlxuICogICBDYW4gYmUgb25lIG9mOlxuICpcbiAqICAgLSBgc3RyaW5nYDogVGhlIHN0cmluZyBpcyB1c2VkIGZvciBtYXRjaGluZyBhZ2FpbnN0IHRoZSBjb250ZW50cyBvZiB0aGUgYGFycmF5YC4gQWxsIHN0cmluZ3Mgb3JcbiAqICAgICBvYmplY3RzIHdpdGggc3RyaW5nIHByb3BlcnRpZXMgaW4gYGFycmF5YCB0aGF0IG1hdGNoIHRoaXMgc3RyaW5nIHdpbGwgYmUgcmV0dXJuZWQuIFRoaXMgYWxzb1xuICogICAgIGFwcGxpZXMgdG8gbmVzdGVkIG9iamVjdCBwcm9wZXJ0aWVzLlxuICogICAgIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nIHRoZSBzdHJpbmcgd2l0aCBgIWAuXG4gKlxuICogICAtIGBPYmplY3RgOiBBIHBhdHRlcm4gb2JqZWN0IGNhbiBiZSB1c2VkIHRvIGZpbHRlciBzcGVjaWZpYyBwcm9wZXJ0aWVzIG9uIG9iamVjdHMgY29udGFpbmVkXG4gKiAgICAgYnkgYGFycmF5YC4gRm9yIGV4YW1wbGUgYHtuYW1lOlwiTVwiLCBwaG9uZTpcIjFcIn1gIHByZWRpY2F0ZSB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBpdGVtc1xuICogICAgIHdoaWNoIGhhdmUgcHJvcGVydHkgYG5hbWVgIGNvbnRhaW5pbmcgXCJNXCIgYW5kIHByb3BlcnR5IGBwaG9uZWAgY29udGFpbmluZyBcIjFcIi4gQSBzcGVjaWFsXG4gKiAgICAgcHJvcGVydHkgbmFtZSBgJGAgY2FuIGJlIHVzZWQgKGFzIGluIGB7JDpcInRleHRcIn1gKSB0byBhY2NlcHQgYSBtYXRjaCBhZ2FpbnN0IGFueVxuICogICAgIHByb3BlcnR5IG9mIHRoZSBvYmplY3Qgb3IgaXRzIG5lc3RlZCBvYmplY3QgcHJvcGVydGllcy4gVGhhdCdzIGVxdWl2YWxlbnQgdG8gdGhlIHNpbXBsZVxuICogICAgIHN1YnN0cmluZyBtYXRjaCB3aXRoIGEgYHN0cmluZ2AgYXMgZGVzY3JpYmVkIGFib3ZlLiBUaGUgcHJlZGljYXRlIGNhbiBiZSBuZWdhdGVkIGJ5IHByZWZpeGluZ1xuICogICAgIHRoZSBzdHJpbmcgd2l0aCBgIWAuXG4gKiAgICAgRm9yIGV4YW1wbGUgYHtuYW1lOiBcIiFNXCJ9YCBwcmVkaWNhdGUgd2lsbCByZXR1cm4gYW4gYXJyYXkgb2YgaXRlbXMgd2hpY2ggaGF2ZSBwcm9wZXJ0eSBgbmFtZWBcbiAqICAgICBub3QgY29udGFpbmluZyBcIk1cIi5cbiAqXG4gKiAgICAgTm90ZSB0aGF0IGEgbmFtZWQgcHJvcGVydHkgd2lsbCBtYXRjaCBwcm9wZXJ0aWVzIG9uIHRoZSBzYW1lIGxldmVsIG9ubHksIHdoaWxlIHRoZSBzcGVjaWFsXG4gKiAgICAgYCRgIHByb3BlcnR5IHdpbGwgbWF0Y2ggcHJvcGVydGllcyBvbiB0aGUgc2FtZSBsZXZlbCBvciBkZWVwZXIuIEUuZy4gYW4gYXJyYXkgaXRlbSBsaWtlXG4gKiAgICAgYHtuYW1lOiB7Zmlyc3Q6ICdKb2huJywgbGFzdDogJ0RvZSd9fWAgd2lsbCAqKm5vdCoqIGJlIG1hdGNoZWQgYnkgYHtuYW1lOiAnSm9obid9YCwgYnV0XG4gKiAgICAgKip3aWxsKiogYmUgbWF0Y2hlZCBieSBgeyQ6ICdKb2huJ31gLlxuICpcbiAqICAgLSBgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBhcnJheSlgOiBBIHByZWRpY2F0ZSBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byB3cml0ZSBhcmJpdHJhcnkgZmlsdGVycy5cbiAqICAgICBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIGZvciBlYWNoIGVsZW1lbnQgb2YgdGhlIGFycmF5LCB3aXRoIHRoZSBlbGVtZW50LCBpdHMgaW5kZXgsIGFuZFxuICogICAgIHRoZSBlbnRpcmUgYXJyYXkgaXRzZWxmIGFzIGFyZ3VtZW50cy5cbiAqXG4gKiAgICAgVGhlIGZpbmFsIHJlc3VsdCBpcyBhbiBhcnJheSBvZiB0aG9zZSBlbGVtZW50cyB0aGF0IHRoZSBwcmVkaWNhdGUgcmV0dXJuZWQgdHJ1ZSBmb3IuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKXx0cnVlfHVuZGVmaW5lZH0gY29tcGFyYXRvciBDb21wYXJhdG9yIHdoaWNoIGlzIHVzZWQgaW5cbiAqICAgICBkZXRlcm1pbmluZyBpZiB0aGUgZXhwZWN0ZWQgdmFsdWUgKGZyb20gdGhlIGZpbHRlciBleHByZXNzaW9uKSBhbmQgYWN0dWFsIHZhbHVlIChmcm9tXG4gKiAgICAgdGhlIG9iamVjdCBpbiB0aGUgYXJyYXkpIHNob3VsZCBiZSBjb25zaWRlcmVkIGEgbWF0Y2guXG4gKlxuICogICBDYW4gYmUgb25lIG9mOlxuICpcbiAqICAgLSBgZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZClgOlxuICogICAgIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGdpdmVuIHRoZSBvYmplY3QgdmFsdWUgYW5kIHRoZSBwcmVkaWNhdGUgdmFsdWUgdG8gY29tcGFyZSBhbmRcbiAqICAgICBzaG91bGQgcmV0dXJuIHRydWUgaWYgYm90aCB2YWx1ZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWQgZXF1YWwuXG4gKlxuICogICAtIGB0cnVlYDogQSBzaG9ydGhhbmQgZm9yIGBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7IHJldHVybiBhbmd1bGFyLmVxdWFscyhhY3R1YWwsIGV4cGVjdGVkKX1gLlxuICogICAgIFRoaXMgaXMgZXNzZW50aWFsbHkgc3RyaWN0IGNvbXBhcmlzb24gb2YgZXhwZWN0ZWQgYW5kIGFjdHVhbC5cbiAqXG4gKiAgIC0gYGZhbHNlfHVuZGVmaW5lZGA6IEEgc2hvcnQgaGFuZCBmb3IgYSBmdW5jdGlvbiB3aGljaCB3aWxsIGxvb2sgZm9yIGEgc3Vic3RyaW5nIG1hdGNoIGluIGNhc2VcbiAqICAgICBpbnNlbnNpdGl2ZSB3YXkuXG4gKlxuICogICAgIFByaW1pdGl2ZSB2YWx1ZXMgYXJlIGNvbnZlcnRlZCB0byBzdHJpbmdzLiBPYmplY3RzIGFyZSBub3QgY29tcGFyZWQgYWdhaW5zdCBwcmltaXRpdmVzLFxuICogICAgIHVubGVzcyB0aGV5IGhhdmUgYSBjdXN0b20gYHRvU3RyaW5nYCBtZXRob2QgKGUuZy4gYERhdGVgIG9iamVjdHMpLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWluaXQ9XCJmcmllbmRzID0gW3tuYW1lOidKb2huJywgcGhvbmU6JzU1NS0xMjc2J30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzgwMC1CSUctTUFSWSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonQWRhbScsIHBob25lOic1NTUtNTY3OCd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0p1bGlldHRlJywgcGhvbmU6JzU1NS01Njc4J31dXCI+PC9kaXY+XG5cbiAgICAgICA8bGFiZWw+U2VhcmNoOiA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2hUZXh0XCI+PC9sYWJlbD5cbiAgICAgICA8dGFibGUgaWQ9XCJzZWFyY2hUZXh0UmVzdWx0c1wiPlxuICAgICAgICAgPHRyPjx0aD5OYW1lPC90aD48dGg+UGhvbmU8L3RoPjwvdHI+XG4gICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBmaWx0ZXI6c2VhcmNoVGV4dFwiPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICA8L3RhYmxlPlxuICAgICAgIDxocj5cbiAgICAgICA8bGFiZWw+QW55OiA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2guJFwiPjwvbGFiZWw+IDxicj5cbiAgICAgICA8bGFiZWw+TmFtZSBvbmx5IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaC5uYW1lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPlBob25lIG9ubHkgPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoLnBob25lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPkVxdWFsaXR5IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInN0cmljdFwiPjwvbGFiZWw+PGJyPlxuICAgICAgIDx0YWJsZSBpZD1cInNlYXJjaE9ialJlc3VsdHNcIj5cbiAgICAgICAgIDx0cj48dGg+TmFtZTwvdGg+PHRoPlBob25lPC90aD48L3RyPlxuICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZE9iaiBpbiBmcmllbmRzIHwgZmlsdGVyOnNlYXJjaDpzdHJpY3RcIj5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kT2JqLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgIDx0ZD57e2ZyaWVuZE9iai5waG9uZX19PC90ZD5cbiAgICAgICAgIDwvdHI+XG4gICAgICAgPC90YWJsZT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIGV4cGVjdEZyaWVuZE5hbWVzID0gZnVuY3Rpb24oZXhwZWN0ZWROYW1lcywga2V5KSB7XG4gICAgICAgICBlbGVtZW50LmFsbChieS5yZXBlYXRlcihrZXkgKyAnIGluIGZyaWVuZHMnKS5jb2x1bW4oa2V5ICsgJy5uYW1lJykpLnRoZW4oZnVuY3Rpb24oYXJyKSB7XG4gICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uKHdkLCBpKSB7XG4gICAgICAgICAgICAgZXhwZWN0KHdkLmdldFRleHQoKSkudG9NYXRjaChleHBlY3RlZE5hbWVzW2ldKTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICB9KTtcbiAgICAgICB9O1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggYWNyb3NzIGFsbCBmaWVsZHMgd2hlbiBmaWx0ZXJpbmcgd2l0aCBhIHN0cmluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNlYXJjaFRleHQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2hUZXh0JykpO1xuICAgICAgICAgc2VhcmNoVGV4dC5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoVGV4dC5zZW5kS2V5cygnbScpO1xuICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydNYXJ5JywgJ01pa2UnLCAnQWRhbSddLCAnZnJpZW5kJyk7XG5cbiAgICAgICAgIHNlYXJjaFRleHQuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaFRleHQuc2VuZEtleXMoJzc2Jyk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ0pvaG4nLCAnSnVsaWUnXSwgJ2ZyaWVuZCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggaW4gc3BlY2lmaWMgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBwcmVkaWNhdGUgb2JqZWN0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2VhcmNoQW55ID0gZWxlbWVudChieS5tb2RlbCgnc2VhcmNoLiQnKSk7XG4gICAgICAgICBzZWFyY2hBbnkuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaEFueS5zZW5kS2V5cygnaScpO1xuICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydNYXJ5JywgJ01pa2UnLCAnSnVsaWUnLCAnSnVsaWV0dGUnXSwgJ2ZyaWVuZE9iaicpO1xuICAgICAgIH0pO1xuICAgICAgIGl0KCdzaG91bGQgdXNlIGEgZXF1YWwgY29tcGFyaXNvbiB3aGVuIGNvbXBhcmF0b3IgaXMgdHJ1ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNlYXJjaE5hbWUgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2gubmFtZScpKTtcbiAgICAgICAgIHZhciBzdHJpY3QgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzdHJpY3QnKSk7XG4gICAgICAgICBzZWFyY2hOYW1lLmNsZWFyKCk7XG4gICAgICAgICBzZWFyY2hOYW1lLnNlbmRLZXlzKCdKdWxpZScpO1xuICAgICAgICAgc3RyaWN0LmNsaWNrKCk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ0p1bGllJ10sICdmcmllbmRPYmonKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiBmaWx0ZXJGaWx0ZXIoKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcnJheSwgZXhwcmVzc2lvbiwgY29tcGFyYXRvcikge1xuICAgIGlmICghaXNBcnJheUxpa2UoYXJyYXkpKSB7XG4gICAgICBpZiAoYXJyYXkgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJ2ZpbHRlcicpKCdub3RhcnJheScsICdFeHBlY3RlZCBhcnJheSBidXQgcmVjZWl2ZWQ6IHswfScsIGFycmF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZXhwcmVzc2lvblR5cGUgPSBnZXRUeXBlRm9yRmlsdGVyKGV4cHJlc3Npb24pO1xuICAgIHZhciBwcmVkaWNhdGVGbjtcbiAgICB2YXIgbWF0Y2hBZ2FpbnN0QW55UHJvcDtcblxuICAgIHN3aXRjaCAoZXhwcmVzc2lvblR5cGUpIHtcbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgcHJlZGljYXRlRm4gPSBleHByZXNzaW9uO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnbnVsbCc6XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgbWF0Y2hBZ2FpbnN0QW55UHJvcCA9IHRydWU7XG4gICAgICAgIC8vanNoaW50IC1XMDg2XG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAvL2pzaGludCArVzA4NlxuICAgICAgICBwcmVkaWNhdGVGbiA9IGNyZWF0ZVByZWRpY2F0ZUZuKGV4cHJlc3Npb24sIGNvbXBhcmF0b3IsIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGFycmF5LCBwcmVkaWNhdGVGbik7XG4gIH07XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIGBmaWx0ZXJGaWx0ZXJgXG5mdW5jdGlvbiBjcmVhdGVQcmVkaWNhdGVGbihleHByZXNzaW9uLCBjb21wYXJhdG9yLCBtYXRjaEFnYWluc3RBbnlQcm9wKSB7XG4gIHZhciBzaG91bGRNYXRjaFByaW1pdGl2ZXMgPSBpc09iamVjdChleHByZXNzaW9uKSAmJiAoJyQnIGluIGV4cHJlc3Npb24pO1xuICB2YXIgcHJlZGljYXRlRm47XG5cbiAgaWYgKGNvbXBhcmF0b3IgPT09IHRydWUpIHtcbiAgICBjb21wYXJhdG9yID0gZXF1YWxzO1xuICB9IGVsc2UgaWYgKCFpc0Z1bmN0aW9uKGNvbXBhcmF0b3IpKSB7XG4gICAgY29tcGFyYXRvciA9IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgICAgIGlmIChpc1VuZGVmaW5lZChhY3R1YWwpKSB7XG4gICAgICAgIC8vIE5vIHN1YnN0cmluZyBtYXRjaGluZyBhZ2FpbnN0IGB1bmRlZmluZWRgXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICgoYWN0dWFsID09PSBudWxsKSB8fCAoZXhwZWN0ZWQgPT09IG51bGwpKSB7XG4gICAgICAgIC8vIE5vIHN1YnN0cmluZyBtYXRjaGluZyBhZ2FpbnN0IGBudWxsYDsgb25seSBtYXRjaCBhZ2FpbnN0IGBudWxsYFxuICAgICAgICByZXR1cm4gYWN0dWFsID09PSBleHBlY3RlZDtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChleHBlY3RlZCkgfHwgKGlzT2JqZWN0KGFjdHVhbCkgJiYgIWhhc0N1c3RvbVRvU3RyaW5nKGFjdHVhbCkpKSB7XG4gICAgICAgIC8vIFNob3VsZCBub3QgY29tcGFyZSBwcmltaXRpdmVzIGFnYWluc3Qgb2JqZWN0cywgdW5sZXNzIHRoZXkgaGF2ZSBjdXN0b20gYHRvU3RyaW5nYCBtZXRob2RcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBhY3R1YWwgPSBsb3dlcmNhc2UoJycgKyBhY3R1YWwpO1xuICAgICAgZXhwZWN0ZWQgPSBsb3dlcmNhc2UoJycgKyBleHBlY3RlZCk7XG4gICAgICByZXR1cm4gYWN0dWFsLmluZGV4T2YoZXhwZWN0ZWQpICE9PSAtMTtcbiAgICB9O1xuICB9XG5cbiAgcHJlZGljYXRlRm4gPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgaWYgKHNob3VsZE1hdGNoUHJpbWl0aXZlcyAmJiAhaXNPYmplY3QoaXRlbSkpIHtcbiAgICAgIHJldHVybiBkZWVwQ29tcGFyZShpdGVtLCBleHByZXNzaW9uLiQsIGNvbXBhcmF0b3IsIGZhbHNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZXBDb21wYXJlKGl0ZW0sIGV4cHJlc3Npb24sIGNvbXBhcmF0b3IsIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICB9O1xuXG4gIHJldHVybiBwcmVkaWNhdGVGbjtcbn1cblxuZnVuY3Rpb24gZGVlcENvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCwgY29tcGFyYXRvciwgbWF0Y2hBZ2FpbnN0QW55UHJvcCwgZG9udE1hdGNoV2hvbGVPYmplY3QpIHtcbiAgdmFyIGFjdHVhbFR5cGUgPSBnZXRUeXBlRm9yRmlsdGVyKGFjdHVhbCk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlRm9yRmlsdGVyKGV4cGVjdGVkKTtcblxuICBpZiAoKGV4cGVjdGVkVHlwZSA9PT0gJ3N0cmluZycpICYmIChleHBlY3RlZC5jaGFyQXQoMCkgPT09ICchJykpIHtcbiAgICByZXR1cm4gIWRlZXBDb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQuc3Vic3RyaW5nKDEpLCBjb21wYXJhdG9yLCBtYXRjaEFnYWluc3RBbnlQcm9wKTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KGFjdHVhbCkpIHtcbiAgICAvLyBJbiBjYXNlIGBhY3R1YWxgIGlzIGFuIGFycmF5LCBjb25zaWRlciBpdCBhIG1hdGNoXG4gICAgLy8gaWYgQU5ZIG9mIGl0J3MgaXRlbXMgbWF0Y2hlcyBgZXhwZWN0ZWRgXG4gICAgcmV0dXJuIGFjdHVhbC5zb21lKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBkZWVwQ29tcGFyZShpdGVtLCBleHBlY3RlZCwgY29tcGFyYXRvciwgbWF0Y2hBZ2FpbnN0QW55UHJvcCk7XG4gICAgfSk7XG4gIH1cblxuICBzd2l0Y2ggKGFjdHVhbFR5cGUpIHtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgdmFyIGtleTtcbiAgICAgIGlmIChtYXRjaEFnYWluc3RBbnlQcm9wKSB7XG4gICAgICAgIGZvciAoa2V5IGluIGFjdHVhbCkge1xuICAgICAgICAgIGlmICgoa2V5LmNoYXJBdCgwKSAhPT0gJyQnKSAmJiBkZWVwQ29tcGFyZShhY3R1YWxba2V5XSwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIHRydWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRvbnRNYXRjaFdob2xlT2JqZWN0ID8gZmFsc2UgOiBkZWVwQ29tcGFyZShhY3R1YWwsIGV4cGVjdGVkLCBjb21wYXJhdG9yLCBmYWxzZSk7XG4gICAgICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yIChrZXkgaW4gZXhwZWN0ZWQpIHtcbiAgICAgICAgICB2YXIgZXhwZWN0ZWRWYWwgPSBleHBlY3RlZFtrZXldO1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGV4cGVjdGVkVmFsKSB8fCBpc1VuZGVmaW5lZChleHBlY3RlZFZhbCkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtYXRjaEFueVByb3BlcnR5ID0ga2V5ID09PSAnJCc7XG4gICAgICAgICAgdmFyIGFjdHVhbFZhbCA9IG1hdGNoQW55UHJvcGVydHkgPyBhY3R1YWwgOiBhY3R1YWxba2V5XTtcbiAgICAgICAgICBpZiAoIWRlZXBDb21wYXJlKGFjdHVhbFZhbCwgZXhwZWN0ZWRWYWwsIGNvbXBhcmF0b3IsIG1hdGNoQW55UHJvcGVydHksIG1hdGNoQW55UHJvcGVydHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3IoYWN0dWFsLCBleHBlY3RlZCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBjb21wYXJhdG9yKGFjdHVhbCwgZXhwZWN0ZWQpO1xuICB9XG59XG5cbi8vIFVzZWQgZm9yIGVhc2lseSBkaWZmZXJlbnRpYXRpbmcgYmV0d2VlbiBgbnVsbGAgYW5kIGFjdHVhbCBgb2JqZWN0YFxuZnVuY3Rpb24gZ2V0VHlwZUZvckZpbHRlcih2YWwpIHtcbiAgcmV0dXJuICh2YWwgPT09IG51bGwpID8gJ251bGwnIDogdHlwZW9mIHZhbDtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBjdXJyZW5jeVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZvcm1hdHMgYSBudW1iZXIgYXMgYSBjdXJyZW5jeSAoaWUgJDEsMjM0LjU2KS4gV2hlbiBubyBjdXJyZW5jeSBzeW1ib2wgaXMgcHJvdmlkZWQsIGRlZmF1bHRcbiAqIHN5bWJvbCBmb3IgY3VycmVudCBsb2NhbGUgaXMgdXNlZC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IElucHV0IHRvIGZpbHRlci5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gc3ltYm9sIEN1cnJlbmN5IHN5bWJvbCBvciBpZGVudGlmaWVyIHRvIGJlIGRpc3BsYXllZC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gZnJhY3Rpb25TaXplIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0byByb3VuZCB0aGUgYW1vdW50IHRvLCBkZWZhdWx0cyB0byBkZWZhdWx0IG1heCBmcmFjdGlvbiBzaXplIGZvciBjdXJyZW50IGxvY2FsZVxuICogQHJldHVybnMge3N0cmluZ30gRm9ybWF0dGVkIG51bWJlci5cbiAqXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImN1cnJlbmN5RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY3VycmVuY3lFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLmFtb3VudCA9IDEyMzQuNTY7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cImFtb3VudFwiIGFyaWEtbGFiZWw9XCJhbW91bnRcIj4gPGJyPlxuICAgICAgICAgZGVmYXVsdCBjdXJyZW5jeSBzeW1ib2wgKCQpOiA8c3BhbiBpZD1cImN1cnJlbmN5LWRlZmF1bHRcIj57e2Ftb3VudCB8IGN1cnJlbmN5fX08L3NwYW4+PGJyPlxuICAgICAgICAgY3VzdG9tIGN1cnJlbmN5IGlkZW50aWZpZXIgKFVTRCQpOiA8c3BhbiBpZD1cImN1cnJlbmN5LWN1c3RvbVwiPnt7YW1vdW50IHwgY3VycmVuY3k6XCJVU0QkXCJ9fTwvc3Bhbj5cbiAgICAgICAgIG5vIGZyYWN0aW9ucyAoMCk6IDxzcGFuIGlkPVwiY3VycmVuY3ktbm8tZnJhY3Rpb25zXCI+e3thbW91bnQgfCBjdXJyZW5jeTpcIlVTRCRcIjowfX08L3NwYW4+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgaW5pdCB3aXRoIDEyMzQuNTYnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnJDEsMjM0LjU2Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktY3VzdG9tJykpLmdldFRleHQoKSkudG9CZSgnVVNEJDEsMjM0LjU2Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktbm8tZnJhY3Rpb25zJykpLmdldFRleHQoKSkudG9CZSgnVVNEJDEsMjM1Jyk7XG4gICAgICAgfSk7XG4gICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGlmIChicm93c2VyLnBhcmFtcy5icm93c2VyID09ICdzYWZhcmknKSB7XG4gICAgICAgICAgIC8vIFNhZmFyaSBkb2VzIG5vdCB1bmRlcnN0YW5kIHRoZSBtaW51cyBrZXkuIFNlZVxuICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy80ODFcbiAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgfVxuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnYW1vdW50JykpLmNsZWFyKCk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdhbW91bnQnKSkuc2VuZEtleXMoJy0xMjM0Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJy0kMSwyMzQuMDAnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1jdXN0b20nKSkuZ2V0VGV4dCgpKS50b0JlKCctVVNEJDEsMjM0LjAwJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktbm8tZnJhY3Rpb25zJykpLmdldFRleHQoKSkudG9CZSgnLVVTRCQxLDIzNCcpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmN1cnJlbmN5RmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcbmZ1bmN0aW9uIGN1cnJlbmN5RmlsdGVyKCRsb2NhbGUpIHtcbiAgdmFyIGZvcm1hdHMgPSAkbG9jYWxlLk5VTUJFUl9GT1JNQVRTO1xuICByZXR1cm4gZnVuY3Rpb24oYW1vdW50LCBjdXJyZW5jeVN5bWJvbCwgZnJhY3Rpb25TaXplKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKGN1cnJlbmN5U3ltYm9sKSkge1xuICAgICAgY3VycmVuY3lTeW1ib2wgPSBmb3JtYXRzLkNVUlJFTkNZX1NZTTtcbiAgICB9XG5cbiAgICBpZiAoaXNVbmRlZmluZWQoZnJhY3Rpb25TaXplKSkge1xuICAgICAgZnJhY3Rpb25TaXplID0gZm9ybWF0cy5QQVRURVJOU1sxXS5tYXhGcmFjO1xuICAgIH1cblxuICAgIC8vIGlmIG51bGwgb3IgdW5kZWZpbmVkIHBhc3MgaXQgdGhyb3VnaFxuICAgIHJldHVybiAoYW1vdW50ID09IG51bGwpXG4gICAgICAgID8gYW1vdW50XG4gICAgICAgIDogZm9ybWF0TnVtYmVyKGFtb3VudCwgZm9ybWF0cy5QQVRURVJOU1sxXSwgZm9ybWF0cy5HUk9VUF9TRVAsIGZvcm1hdHMuREVDSU1BTF9TRVAsIGZyYWN0aW9uU2l6ZSkuXG4gICAgICAgICAgICByZXBsYWNlKC9cXHUwMEE0L2csIGN1cnJlbmN5U3ltYm9sKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBudW1iZXJcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGb3JtYXRzIGEgbnVtYmVyIGFzIHRleHQuXG4gKlxuICogSWYgdGhlIGlucHV0IGlzIG51bGwgb3IgdW5kZWZpbmVkLCBpdCB3aWxsIGp1c3QgYmUgcmV0dXJuZWQuXG4gKiBJZiB0aGUgaW5wdXQgaXMgaW5maW5pdGUgKEluZmluaXR5Ly1JbmZpbml0eSkgdGhlIEluZmluaXR5IHN5bWJvbCAn4oieJyBpcyByZXR1cm5lZC5cbiAqIElmIHRoZSBpbnB1dCBpcyBub3QgYSBudW1iZXIgYW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLlxuICpcbiAqXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IG51bWJlciBOdW1iZXIgdG8gZm9ybWF0LlxuICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyk9fSBmcmFjdGlvblNpemUgTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBudW1iZXIgdG8uXG4gKiBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCB0aGVuIHRoZSBmcmFjdGlvbiBzaXplIGlzIGNvbXB1dGVkIGZyb20gdGhlIGN1cnJlbnQgbG9jYWxlJ3MgbnVtYmVyXG4gKiBmb3JtYXR0aW5nIHBhdHRlcm4uIEluIHRoZSBjYXNlIG9mIHRoZSBkZWZhdWx0IGxvY2FsZSwgaXQgd2lsbCBiZSAzLlxuICogQHJldHVybnMge3N0cmluZ30gTnVtYmVyIHJvdW5kZWQgdG8gZGVjaW1hbFBsYWNlcyBhbmQgcGxhY2VzIGEg4oCcLOKAnSBhZnRlciBlYWNoIHRoaXJkIGRpZ2l0LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJudW1iZXJGaWx0ZXJFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdudW1iZXJGaWx0ZXJFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLnZhbCA9IDEyMzQuNTY3ODk7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGxhYmVsPkVudGVyIG51bWJlcjogPGlucHV0IG5nLW1vZGVsPSd2YWwnPjwvbGFiZWw+PGJyPlxuICAgICAgICAgRGVmYXVsdCBmb3JtYXR0aW5nOiA8c3BhbiBpZD0nbnVtYmVyLWRlZmF1bHQnPnt7dmFsIHwgbnVtYmVyfX08L3NwYW4+PGJyPlxuICAgICAgICAgTm8gZnJhY3Rpb25zOiA8c3Bhbj57e3ZhbCB8IG51bWJlcjowfX08L3NwYW4+PGJyPlxuICAgICAgICAgTmVnYXRpdmUgbnVtYmVyOiA8c3Bhbj57ey12YWwgfCBudW1iZXI6NH19PC9zcGFuPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGZvcm1hdCBudW1iZXJzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbnVtYmVyLWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCcxLDIzNC41NjgnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3ZhbCB8IG51bWJlcjowJykpLmdldFRleHQoKSkudG9CZSgnMSwyMzUnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJy12YWwgfCBudW1iZXI6NCcpKS5nZXRUZXh0KCkpLnRvQmUoJy0xLDIzNC41Njc5Jyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsJykpLmNsZWFyKCk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWwnKSkuc2VuZEtleXMoJzMzNzQuMzMzJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbnVtYmVyLWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCczLDM3NC4zMzMnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3ZhbCB8IG51bWJlcjowJykpLmdldFRleHQoKSkudG9CZSgnMywzNzQnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJy12YWwgfCBudW1iZXI6NCcpKS5nZXRUZXh0KCkpLnRvQmUoJy0zLDM3NC4zMzMwJyk7XG4gICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxubnVtYmVyRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcbmZ1bmN0aW9uIG51bWJlckZpbHRlcigkbG9jYWxlKSB7XG4gIHZhciBmb3JtYXRzID0gJGxvY2FsZS5OVU1CRVJfRk9STUFUUztcbiAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgZnJhY3Rpb25TaXplKSB7XG5cbiAgICAvLyBpZiBudWxsIG9yIHVuZGVmaW5lZCBwYXNzIGl0IHRocm91Z2hcbiAgICByZXR1cm4gKG51bWJlciA9PSBudWxsKVxuICAgICAgICA/IG51bWJlclxuICAgICAgICA6IGZvcm1hdE51bWJlcihudW1iZXIsIGZvcm1hdHMuUEFUVEVSTlNbMF0sIGZvcm1hdHMuR1JPVVBfU0VQLCBmb3JtYXRzLkRFQ0lNQUxfU0VQLFxuICAgICAgICAgICAgICAgICAgICAgICBmcmFjdGlvblNpemUpO1xuICB9O1xufVxuXG52YXIgREVDSU1BTF9TRVAgPSAnLic7XG5mdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtYmVyLCBwYXR0ZXJuLCBncm91cFNlcCwgZGVjaW1hbFNlcCwgZnJhY3Rpb25TaXplKSB7XG4gIGlmIChpc09iamVjdChudW1iZXIpKSByZXR1cm4gJyc7XG5cbiAgdmFyIGlzTmVnYXRpdmUgPSBudW1iZXIgPCAwO1xuICBudW1iZXIgPSBNYXRoLmFicyhudW1iZXIpO1xuXG4gIHZhciBpc0luZmluaXR5ID0gbnVtYmVyID09PSBJbmZpbml0eTtcbiAgaWYgKCFpc0luZmluaXR5ICYmICFpc0Zpbml0ZShudW1iZXIpKSByZXR1cm4gJyc7XG5cbiAgdmFyIG51bVN0ciA9IG51bWJlciArICcnLFxuICAgICAgZm9ybWF0ZWRUZXh0ID0gJycsXG4gICAgICBoYXNFeHBvbmVudCA9IGZhbHNlLFxuICAgICAgcGFydHMgPSBbXTtcblxuICBpZiAoaXNJbmZpbml0eSkgZm9ybWF0ZWRUZXh0ID0gJ1xcdTIyMWUnO1xuXG4gIGlmICghaXNJbmZpbml0eSAmJiBudW1TdHIuaW5kZXhPZignZScpICE9PSAtMSkge1xuICAgIHZhciBtYXRjaCA9IG51bVN0ci5tYXRjaCgvKFtcXGRcXC5dKyllKC0/KShcXGQrKS8pO1xuICAgIGlmIChtYXRjaCAmJiBtYXRjaFsyXSA9PSAnLScgJiYgbWF0Y2hbM10gPiBmcmFjdGlvblNpemUgKyAxKSB7XG4gICAgICBudW1iZXIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtYXRlZFRleHQgPSBudW1TdHI7XG4gICAgICBoYXNFeHBvbmVudCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFpc0luZmluaXR5ICYmICFoYXNFeHBvbmVudCkge1xuICAgIHZhciBmcmFjdGlvbkxlbiA9IChudW1TdHIuc3BsaXQoREVDSU1BTF9TRVApWzFdIHx8ICcnKS5sZW5ndGg7XG5cbiAgICAvLyBkZXRlcm1pbmUgZnJhY3Rpb25TaXplIGlmIGl0IGlzIG5vdCBzcGVjaWZpZWRcbiAgICBpZiAoaXNVbmRlZmluZWQoZnJhY3Rpb25TaXplKSkge1xuICAgICAgZnJhY3Rpb25TaXplID0gTWF0aC5taW4oTWF0aC5tYXgocGF0dGVybi5taW5GcmFjLCBmcmFjdGlvbkxlbiksIHBhdHRlcm4ubWF4RnJhYyk7XG4gICAgfVxuXG4gICAgLy8gc2FmZWx5IHJvdW5kIG51bWJlcnMgaW4gSlMgd2l0aG91dCBoaXR0aW5nIGltcHJlY2lzaW9ucyBvZiBmbG9hdGluZy1wb2ludCBhcml0aG1ldGljc1xuICAgIC8vIGluc3BpcmVkIGJ5OlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvcm91bmRcbiAgICBudW1iZXIgPSArKE1hdGgucm91bmQoKyhudW1iZXIudG9TdHJpbmcoKSArICdlJyArIGZyYWN0aW9uU2l6ZSkpLnRvU3RyaW5nKCkgKyAnZScgKyAtZnJhY3Rpb25TaXplKTtcblxuICAgIHZhciBmcmFjdGlvbiA9ICgnJyArIG51bWJlcikuc3BsaXQoREVDSU1BTF9TRVApO1xuICAgIHZhciB3aG9sZSA9IGZyYWN0aW9uWzBdO1xuICAgIGZyYWN0aW9uID0gZnJhY3Rpb25bMV0gfHwgJyc7XG5cbiAgICB2YXIgaSwgcG9zID0gMCxcbiAgICAgICAgbGdyb3VwID0gcGF0dGVybi5sZ1NpemUsXG4gICAgICAgIGdyb3VwID0gcGF0dGVybi5nU2l6ZTtcblxuICAgIGlmICh3aG9sZS5sZW5ndGggPj0gKGxncm91cCArIGdyb3VwKSkge1xuICAgICAgcG9zID0gd2hvbGUubGVuZ3RoIC0gbGdyb3VwO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHBvczsgaSsrKSB7XG4gICAgICAgIGlmICgocG9zIC0gaSkgJSBncm91cCA9PT0gMCAmJiBpICE9PSAwKSB7XG4gICAgICAgICAgZm9ybWF0ZWRUZXh0ICs9IGdyb3VwU2VwO1xuICAgICAgICB9XG4gICAgICAgIGZvcm1hdGVkVGV4dCArPSB3aG9sZS5jaGFyQXQoaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gcG9zOyBpIDwgd2hvbGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICgod2hvbGUubGVuZ3RoIC0gaSkgJSBsZ3JvdXAgPT09IDAgJiYgaSAhPT0gMCkge1xuICAgICAgICBmb3JtYXRlZFRleHQgKz0gZ3JvdXBTZXA7XG4gICAgICB9XG4gICAgICBmb3JtYXRlZFRleHQgKz0gd2hvbGUuY2hhckF0KGkpO1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBmcmFjdGlvbiBwYXJ0LlxuICAgIHdoaWxlIChmcmFjdGlvbi5sZW5ndGggPCBmcmFjdGlvblNpemUpIHtcbiAgICAgIGZyYWN0aW9uICs9ICcwJztcbiAgICB9XG5cbiAgICBpZiAoZnJhY3Rpb25TaXplICYmIGZyYWN0aW9uU2l6ZSAhPT0gXCIwXCIpIGZvcm1hdGVkVGV4dCArPSBkZWNpbWFsU2VwICsgZnJhY3Rpb24uc3Vic3RyKDAsIGZyYWN0aW9uU2l6ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGZyYWN0aW9uU2l6ZSA+IDAgJiYgbnVtYmVyIDwgMSkge1xuICAgICAgZm9ybWF0ZWRUZXh0ID0gbnVtYmVyLnRvRml4ZWQoZnJhY3Rpb25TaXplKTtcbiAgICAgIG51bWJlciA9IHBhcnNlRmxvYXQoZm9ybWF0ZWRUZXh0KTtcbiAgICAgIGZvcm1hdGVkVGV4dCA9IGZvcm1hdGVkVGV4dC5yZXBsYWNlKERFQ0lNQUxfU0VQLCBkZWNpbWFsU2VwKTtcbiAgICB9XG4gIH1cblxuICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgaXNOZWdhdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgcGFydHMucHVzaChpc05lZ2F0aXZlID8gcGF0dGVybi5uZWdQcmUgOiBwYXR0ZXJuLnBvc1ByZSxcbiAgICAgICAgICAgICBmb3JtYXRlZFRleHQsXG4gICAgICAgICAgICAgaXNOZWdhdGl2ZSA/IHBhdHRlcm4ubmVnU3VmIDogcGF0dGVybi5wb3NTdWYpO1xuICByZXR1cm4gcGFydHMuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIHBhZE51bWJlcihudW0sIGRpZ2l0cywgdHJpbSkge1xuICB2YXIgbmVnID0gJyc7XG4gIGlmIChudW0gPCAwKSB7XG4gICAgbmVnID0gICctJztcbiAgICBudW0gPSAtbnVtO1xuICB9XG4gIG51bSA9ICcnICsgbnVtO1xuICB3aGlsZSAobnVtLmxlbmd0aCA8IGRpZ2l0cykgbnVtID0gJzAnICsgbnVtO1xuICBpZiAodHJpbSkge1xuICAgIG51bSA9IG51bS5zdWJzdHIobnVtLmxlbmd0aCAtIGRpZ2l0cyk7XG4gIH1cbiAgcmV0dXJuIG5lZyArIG51bTtcbn1cblxuXG5mdW5jdGlvbiBkYXRlR2V0dGVyKG5hbWUsIHNpemUsIG9mZnNldCwgdHJpbSkge1xuICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTtcbiAgICBpZiAob2Zmc2V0ID4gMCB8fCB2YWx1ZSA+IC1vZmZzZXQpIHtcbiAgICAgIHZhbHVlICs9IG9mZnNldDtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSAwICYmIG9mZnNldCA9PSAtMTIpIHZhbHVlID0gMTI7XG4gICAgcmV0dXJuIHBhZE51bWJlcih2YWx1ZSwgc2l6ZSwgdHJpbSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRhdGVTdHJHZXR0ZXIobmFtZSwgc2hvcnRGb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihkYXRlLCBmb3JtYXRzKSB7XG4gICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7XG4gICAgdmFyIGdldCA9IHVwcGVyY2FzZShzaG9ydEZvcm0gPyAoJ1NIT1JUJyArIG5hbWUpIDogbmFtZSk7XG5cbiAgICByZXR1cm4gZm9ybWF0c1tnZXRdW3ZhbHVlXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGltZVpvbmVHZXR0ZXIoZGF0ZSwgZm9ybWF0cywgb2Zmc2V0KSB7XG4gIHZhciB6b25lID0gLTEgKiBvZmZzZXQ7XG4gIHZhciBwYWRkZWRab25lID0gKHpvbmUgPj0gMCkgPyBcIitcIiA6IFwiXCI7XG5cbiAgcGFkZGVkWm9uZSArPSBwYWROdW1iZXIoTWF0aFt6b25lID4gMCA/ICdmbG9vcicgOiAnY2VpbCddKHpvbmUgLyA2MCksIDIpICtcbiAgICAgICAgICAgICAgICBwYWROdW1iZXIoTWF0aC5hYnMoem9uZSAlIDYwKSwgMik7XG5cbiAgcmV0dXJuIHBhZGRlZFpvbmU7XG59XG5cbmZ1bmN0aW9uIGdldEZpcnN0VGh1cnNkYXlPZlllYXIoeWVhcikge1xuICAgIC8vIDAgPSBpbmRleCBvZiBKYW51YXJ5XG4gICAgdmFyIGRheU9mV2Vla09uRmlyc3QgPSAobmV3IERhdGUoeWVhciwgMCwgMSkpLmdldERheSgpO1xuICAgIC8vIDQgPSBpbmRleCBvZiBUaHVyc2RheSAoKzEgdG8gYWNjb3VudCBmb3IgMXN0ID0gNSlcbiAgICAvLyAxMSA9IGluZGV4IG9mICpuZXh0KiBUaHVyc2RheSAoKzEgYWNjb3VudCBmb3IgMXN0ID0gMTIpXG4gICAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDAsICgoZGF5T2ZXZWVrT25GaXJzdCA8PSA0KSA/IDUgOiAxMikgLSBkYXlPZldlZWtPbkZpcnN0KTtcbn1cblxuZnVuY3Rpb24gZ2V0VGh1cnNkYXlUaGlzV2VlayhkYXRldGltZSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRldGltZS5nZXRGdWxsWWVhcigpLCBkYXRldGltZS5nZXRNb250aCgpLFxuICAgICAgLy8gNCA9IGluZGV4IG9mIFRodXJzZGF5XG4gICAgICBkYXRldGltZS5nZXREYXRlKCkgKyAoNCAtIGRhdGV0aW1lLmdldERheSgpKSk7XG59XG5cbmZ1bmN0aW9uIHdlZWtHZXR0ZXIoc2l6ZSkge1xuICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBmaXJzdFRodXJzID0gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpLFxuICAgICAgICAgdGhpc1RodXJzID0gZ2V0VGh1cnNkYXlUaGlzV2VlayhkYXRlKTtcblxuICAgICAgdmFyIGRpZmYgPSArdGhpc1RodXJzIC0gK2ZpcnN0VGh1cnMsXG4gICAgICAgICByZXN1bHQgPSAxICsgTWF0aC5yb3VuZChkaWZmIC8gNi4wNDhlOCk7IC8vIDYuMDQ4ZTggbXMgcGVyIHdlZWtcblxuICAgICAgcmV0dXJuIHBhZE51bWJlcihyZXN1bHQsIHNpemUpO1xuICAgfTtcbn1cblxuZnVuY3Rpb24gYW1wbUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCkgPCAxMiA/IGZvcm1hdHMuQU1QTVNbMF0gOiBmb3JtYXRzLkFNUE1TWzFdO1xufVxuXG5mdW5jdGlvbiBlcmFHZXR0ZXIoZGF0ZSwgZm9ybWF0cykge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpIDw9IDAgPyBmb3JtYXRzLkVSQVNbMF0gOiBmb3JtYXRzLkVSQVNbMV07XG59XG5cbmZ1bmN0aW9uIGxvbmdFcmFHZXR0ZXIoZGF0ZSwgZm9ybWF0cykge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpIDw9IDAgPyBmb3JtYXRzLkVSQU5BTUVTWzBdIDogZm9ybWF0cy5FUkFOQU1FU1sxXTtcbn1cblxudmFyIERBVEVfRk9STUFUUyA9IHtcbiAgeXl5eTogZGF0ZUdldHRlcignRnVsbFllYXInLCA0KSxcbiAgICB5eTogZGF0ZUdldHRlcignRnVsbFllYXInLCAyLCAwLCB0cnVlKSxcbiAgICAgeTogZGF0ZUdldHRlcignRnVsbFllYXInLCAxKSxcbiAgTU1NTTogZGF0ZVN0ckdldHRlcignTW9udGgnKSxcbiAgIE1NTTogZGF0ZVN0ckdldHRlcignTW9udGgnLCB0cnVlKSxcbiAgICBNTTogZGF0ZUdldHRlcignTW9udGgnLCAyLCAxKSxcbiAgICAgTTogZGF0ZUdldHRlcignTW9udGgnLCAxLCAxKSxcbiAgICBkZDogZGF0ZUdldHRlcignRGF0ZScsIDIpLFxuICAgICBkOiBkYXRlR2V0dGVyKCdEYXRlJywgMSksXG4gICAgSEg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMiksXG4gICAgIEg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMSksXG4gICAgaGg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMiwgLTEyKSxcbiAgICAgaDogZGF0ZUdldHRlcignSG91cnMnLCAxLCAtMTIpLFxuICAgIG1tOiBkYXRlR2V0dGVyKCdNaW51dGVzJywgMiksXG4gICAgIG06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAxKSxcbiAgICBzczogZGF0ZUdldHRlcignU2Vjb25kcycsIDIpLFxuICAgICBzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMSksXG4gICAgIC8vIHdoaWxlIElTTyA4NjAxIHJlcXVpcmVzIGZyYWN0aW9ucyB0byBiZSBwcmVmaXhlZCB3aXRoIGAuYCBvciBgLGBcbiAgICAgLy8gd2UgY2FuIGJlIGp1c3Qgc2FmZWx5IHJlbHkgb24gdXNpbmcgYHNzc2Agc2luY2Ugd2UgY3VycmVudGx5IGRvbid0IHN1cHBvcnQgc2luZ2xlIG9yIHR3byBkaWdpdCBmcmFjdGlvbnNcbiAgIHNzczogZGF0ZUdldHRlcignTWlsbGlzZWNvbmRzJywgMyksXG4gIEVFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScpLFxuICAgRUVFOiBkYXRlU3RyR2V0dGVyKCdEYXknLCB0cnVlKSxcbiAgICAgYTogYW1wbUdldHRlcixcbiAgICAgWjogdGltZVpvbmVHZXR0ZXIsXG4gICAgd3c6IHdlZWtHZXR0ZXIoMiksXG4gICAgIHc6IHdlZWtHZXR0ZXIoMSksXG4gICAgIEc6IGVyYUdldHRlcixcbiAgICAgR0c6IGVyYUdldHRlcixcbiAgICAgR0dHOiBlcmFHZXR0ZXIsXG4gICAgIEdHR0c6IGxvbmdFcmFHZXR0ZXJcbn07XG5cbnZhciBEQVRFX0ZPUk1BVFNfU1BMSVQgPSAvKCg/OlteeU1kSGhtc2FaRXdHJ10rKXwoPzonKD86W14nXXwnJykqJyl8KD86RSt8eSt8TSt8ZCt8SCt8aCt8bSt8cyt8YXxafEcrfHcrKSkoLiopLyxcbiAgICBOVU1CRVJfU1RSSU5HID0gL15cXC0/XFxkKyQvO1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGRhdGVcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAgIEZvcm1hdHMgYGRhdGVgIHRvIGEgc3RyaW5nIGJhc2VkIG9uIHRoZSByZXF1ZXN0ZWQgYGZvcm1hdGAuXG4gKlxuICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGJlIGNvbXBvc2VkIG9mIHRoZSBmb2xsb3dpbmcgZWxlbWVudHM6XG4gKlxuICogICAqIGAneXl5eSdgOiA0IGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIgKGUuZy4gQUQgMSA9PiAwMDAxLCBBRCAyMDEwID0+IDIwMTApXG4gKiAgICogYCd5eSdgOiAyIGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIsIHBhZGRlZCAoMDAtOTkpLiAoZS5nLiBBRCAyMDAxID0+IDAxLCBBRCAyMDEwID0+IDEwKVxuICogICAqIGAneSdgOiAxIGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIsIGUuZy4gKEFEIDEgPT4gMSwgQUQgMTk5ID0+IDE5OSlcbiAqICAgKiBgJ01NTU0nYDogTW9udGggaW4geWVhciAoSmFudWFyeS1EZWNlbWJlcilcbiAqICAgKiBgJ01NTSdgOiBNb250aCBpbiB5ZWFyIChKYW4tRGVjKVxuICogICAqIGAnTU0nYDogTW9udGggaW4geWVhciwgcGFkZGVkICgwMS0xMilcbiAqICAgKiBgJ00nYDogTW9udGggaW4geWVhciAoMS0xMilcbiAqICAgKiBgJ2RkJ2A6IERheSBpbiBtb250aCwgcGFkZGVkICgwMS0zMSlcbiAqICAgKiBgJ2QnYDogRGF5IGluIG1vbnRoICgxLTMxKVxuICogICAqIGAnRUVFRSdgOiBEYXkgaW4gV2VlaywoU3VuZGF5LVNhdHVyZGF5KVxuICogICAqIGAnRUVFJ2A6IERheSBpbiBXZWVrLCAoU3VuLVNhdClcbiAqICAgKiBgJ0hIJ2A6IEhvdXIgaW4gZGF5LCBwYWRkZWQgKDAwLTIzKVxuICogICAqIGAnSCdgOiBIb3VyIGluIGRheSAoMC0yMylcbiAqICAgKiBgJ2hoJ2A6IEhvdXIgaW4gQU0vUE0sIHBhZGRlZCAoMDEtMTIpXG4gKiAgICogYCdoJ2A6IEhvdXIgaW4gQU0vUE0sICgxLTEyKVxuICogICAqIGAnbW0nYDogTWludXRlIGluIGhvdXIsIHBhZGRlZCAoMDAtNTkpXG4gKiAgICogYCdtJ2A6IE1pbnV0ZSBpbiBob3VyICgwLTU5KVxuICogICAqIGAnc3MnYDogU2Vjb25kIGluIG1pbnV0ZSwgcGFkZGVkICgwMC01OSlcbiAqICAgKiBgJ3MnYDogU2Vjb25kIGluIG1pbnV0ZSAoMC01OSlcbiAqICAgKiBgJ3NzcydgOiBNaWxsaXNlY29uZCBpbiBzZWNvbmQsIHBhZGRlZCAoMDAwLTk5OSlcbiAqICAgKiBgJ2EnYDogQU0vUE0gbWFya2VyXG4gKiAgICogYCdaJ2A6IDQgZGlnaXQgKCtzaWduKSByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGltZXpvbmUgb2Zmc2V0ICgtMTIwMC0rMTIwMClcbiAqICAgKiBgJ3d3J2A6IFdlZWsgb2YgeWVhciwgcGFkZGVkICgwMC01MykuIFdlZWsgMDEgaXMgdGhlIHdlZWsgd2l0aCB0aGUgZmlyc3QgVGh1cnNkYXkgb2YgdGhlIHllYXJcbiAqICAgKiBgJ3cnYDogV2VlayBvZiB5ZWFyICgwLTUzKS4gV2VlayAxIGlzIHRoZSB3ZWVrIHdpdGggdGhlIGZpcnN0IFRodXJzZGF5IG9mIHRoZSB5ZWFyXG4gKiAgICogYCdHJ2AsIGAnR0cnYCwgYCdHR0cnYDogVGhlIGFiYnJldmlhdGVkIGZvcm0gb2YgdGhlIGVyYSBzdHJpbmcgKGUuZy4gJ0FEJylcbiAqICAgKiBgJ0dHR0cnYDogVGhlIGxvbmcgZm9ybSBvZiB0aGUgZXJhIHN0cmluZyAoZS5nLiAnQW5ubyBEb21pbmknKVxuICpcbiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBhbHNvIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHByZWRlZmluZWRcbiAqICAge0BsaW5rIGd1aWRlL2kxOG4gbG9jYWxpemFibGUgZm9ybWF0c306XG4gKlxuICogICAqIGAnbWVkaXVtJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU0gZCwgeSBoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlXG4gKiAgICAgKGUuZy4gU2VwIDMsIDIwMTAgMTI6MDU6MDggUE0pXG4gKiAgICogYCdzaG9ydCdgOiBlcXVpdmFsZW50IHRvIGAnTS9kL3l5IGg6bW0gYSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIDkvMy8xMCAxMjowNSBQTSlcbiAqICAgKiBgJ2Z1bGxEYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdFRUVFLCBNTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZVxuICogICAgIChlLmcuIEZyaWRheSwgU2VwdGVtYmVyIDMsIDIwMTApXG4gKiAgICogYCdsb25nRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gU2VwdGVtYmVyIDMsIDIwMTApXG4gKiAgICogYCdtZWRpdW1EYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcCAzLCAyMDEwKVxuICogICAqIGAnc2hvcnREYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNL2QveXknYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDkvMy8xMClcbiAqICAgKiBgJ21lZGl1bVRpbWUnYDogZXF1aXZhbGVudCB0byBgJ2g6bW06c3MgYSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gMTI6MDU6MDggUE0pXG4gKiAgICogYCdzaG9ydFRpbWUnYDogZXF1aXZhbGVudCB0byBgJ2g6bW0gYSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gMTI6MDUgUE0pXG4gKlxuICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGNvbnRhaW4gbGl0ZXJhbCB2YWx1ZXMuIFRoZXNlIG5lZWQgdG8gYmUgZXNjYXBlZCBieSBzdXJyb3VuZGluZyB3aXRoIHNpbmdsZSBxdW90ZXMgKGUuZy5cbiAqICAgYFwiaCAnaW4gdGhlIG1vcm5pbmcnXCJgKS4gSW4gb3JkZXIgdG8gb3V0cHV0IGEgc2luZ2xlIHF1b3RlLCBlc2NhcGUgaXQgLSBpLmUuLCB0d28gc2luZ2xlIHF1b3RlcyBpbiBhIHNlcXVlbmNlXG4gKiAgIChlLmcuIGBcImggJ28nJ2Nsb2NrJ1wiYCkuXG4gKlxuICogQHBhcmFtIHsoRGF0ZXxudW1iZXJ8c3RyaW5nKX0gZGF0ZSBEYXRlIHRvIGZvcm1hdCBlaXRoZXIgYXMgRGF0ZSBvYmplY3QsIG1pbGxpc2Vjb25kcyAoc3RyaW5nIG9yXG4gKiAgICBudW1iZXIpIG9yIHZhcmlvdXMgSVNPIDg2MDEgZGF0ZXRpbWUgc3RyaW5nIGZvcm1hdHMgKGUuZy4geXl5eS1NTS1kZFRISDptbTpzcy5zc3NaIGFuZCBpdHNcbiAqICAgIHNob3J0ZXIgdmVyc2lvbnMgbGlrZSB5eXl5LU1NLWRkVEhIOm1tWiwgeXl5eS1NTS1kZCBvciB5eXl5TU1kZFRISG1tc3NaKS4gSWYgbm8gdGltZXpvbmUgaXNcbiAqICAgIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGlucHV0LCB0aGUgdGltZSBpcyBjb25zaWRlcmVkIHRvIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gZm9ybWF0IEZvcm1hdHRpbmcgcnVsZXMgKHNlZSBEZXNjcmlwdGlvbikuIElmIG5vdCBzcGVjaWZpZWQsXG4gKiAgICBgbWVkaXVtRGF0ZWAgaXMgdXNlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gdGltZXpvbmUgVGltZXpvbmUgdG8gYmUgdXNlZCBmb3IgZm9ybWF0dGluZy4gSXQgdW5kZXJzdGFuZHMgVVRDL0dNVCBhbmQgdGhlXG4gKiAgICBjb250aW5lbnRhbCBVUyB0aW1lIHpvbmUgYWJicmV2aWF0aW9ucywgYnV0IGZvciBnZW5lcmFsIHVzZSwgdXNlIGEgdGltZSB6b25lIG9mZnNldCwgZm9yXG4gKiAgICBleGFtcGxlLCBgJyswNDMwJ2AgKDQgaG91cnMsIDMwIG1pbnV0ZXMgZWFzdCBvZiB0aGUgR3JlZW53aWNoIG1lcmlkaWFuKVxuICogICAgSWYgbm90IHNwZWNpZmllZCwgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyIHdpbGwgYmUgdXNlZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBzdHJpbmcgb3IgdGhlIGlucHV0IGlmIGlucHV0IGlzIG5vdCByZWNvZ25pemVkIGFzIGRhdGUvbWlsbGlzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjpcbiAgICAgICAgICAgPHNwYW4+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjxicj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ319PC9zcGFuPjpcbiAgICAgICAgICA8c3Bhbj57ezEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonfX08L3NwYW4+PGJyPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjxicj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTpcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVwifX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTpcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVwifX08L3NwYW4+PGJyPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGZvcm1hdCBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSdcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC9PY3QgMlxcZCwgMjAxMCBcXGR7MSwyfTpcXGR7Mn06XFxkezJ9IChBTXxQTSkvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCIxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goLzIwMTBcXC0xMFxcLTJcXGQgXFxkezJ9OlxcZHsyfTpcXGR7Mn0gKFxcLXxcXCspP1xcZHs0fS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSdcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC8xMFxcLzJcXGRcXC8yMDEwIEAgXFxkezEsMn06XFxkezJ9KEFNfFBNKS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6XFxcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVxcXCJcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC8xMFxcLzJcXGRcXC8yMDEwIGF0IFxcZHsxLDJ9OlxcZHsyfShBTXxQTSkvKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5kYXRlRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcbmZ1bmN0aW9uIGRhdGVGaWx0ZXIoJGxvY2FsZSkge1xuXG5cbiAgdmFyIFJfSVNPODYwMV9TVFIgPSAvXihcXGR7NH0pLT8oXFxkXFxkKS0/KFxcZFxcZCkoPzpUKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlxcLihcXGQrKSk/KT8pPyhafChbKy1dKShcXGRcXGQpOj8oXFxkXFxkKSk/KT8kLztcbiAgICAgICAgICAgICAgICAgICAgIC8vIDEgICAgICAgIDIgICAgICAgMyAgICAgICAgIDQgICAgICAgICAgNSAgICAgICAgICA2ICAgICAgICAgIDcgICAgICAgICAgOCAgOSAgICAgMTAgICAgICAxMVxuICBmdW5jdGlvbiBqc29uU3RyaW5nVG9EYXRlKHN0cmluZykge1xuICAgIHZhciBtYXRjaDtcbiAgICBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2goUl9JU084NjAxX1NUUikpIHtcbiAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoMCksXG4gICAgICAgICAgdHpIb3VyID0gMCxcbiAgICAgICAgICB0ek1pbiAgPSAwLFxuICAgICAgICAgIGRhdGVTZXR0ZXIgPSBtYXRjaFs4XSA/IGRhdGUuc2V0VVRDRnVsbFllYXIgOiBkYXRlLnNldEZ1bGxZZWFyLFxuICAgICAgICAgIHRpbWVTZXR0ZXIgPSBtYXRjaFs4XSA/IGRhdGUuc2V0VVRDSG91cnMgOiBkYXRlLnNldEhvdXJzO1xuXG4gICAgICBpZiAobWF0Y2hbOV0pIHtcbiAgICAgICAgdHpIb3VyID0gdG9JbnQobWF0Y2hbOV0gKyBtYXRjaFsxMF0pO1xuICAgICAgICB0ek1pbiA9IHRvSW50KG1hdGNoWzldICsgbWF0Y2hbMTFdKTtcbiAgICAgIH1cbiAgICAgIGRhdGVTZXR0ZXIuY2FsbChkYXRlLCB0b0ludChtYXRjaFsxXSksIHRvSW50KG1hdGNoWzJdKSAtIDEsIHRvSW50KG1hdGNoWzNdKSk7XG4gICAgICB2YXIgaCA9IHRvSW50KG1hdGNoWzRdIHx8IDApIC0gdHpIb3VyO1xuICAgICAgdmFyIG0gPSB0b0ludChtYXRjaFs1XSB8fCAwKSAtIHR6TWluO1xuICAgICAgdmFyIHMgPSB0b0ludChtYXRjaFs2XSB8fCAwKTtcbiAgICAgIHZhciBtcyA9IE1hdGgucm91bmQocGFyc2VGbG9hdCgnMC4nICsgKG1hdGNoWzddIHx8IDApKSAqIDEwMDApO1xuICAgICAgdGltZVNldHRlci5jYWxsKGRhdGUsIGgsIG0sIHMsIG1zKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG5cblxuICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0LCB0aW1lem9uZSkge1xuICAgIHZhciB0ZXh0ID0gJycsXG4gICAgICAgIHBhcnRzID0gW10sXG4gICAgICAgIGZuLCBtYXRjaDtcblxuICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnbWVkaXVtRGF0ZSc7XG4gICAgZm9ybWF0ID0gJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTW2Zvcm1hdF0gfHwgZm9ybWF0O1xuICAgIGlmIChpc1N0cmluZyhkYXRlKSkge1xuICAgICAgZGF0ZSA9IE5VTUJFUl9TVFJJTkcudGVzdChkYXRlKSA/IHRvSW50KGRhdGUpIDoganNvblN0cmluZ1RvRGF0ZShkYXRlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXIoZGF0ZSkpIHtcbiAgICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzRGF0ZShkYXRlKSB8fCAhaXNGaW5pdGUoZGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICB3aGlsZSAoZm9ybWF0KSB7XG4gICAgICBtYXRjaCA9IERBVEVfRk9STUFUU19TUExJVC5leGVjKGZvcm1hdCk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcGFydHMgPSBjb25jYXQocGFydHMsIG1hdGNoLCAxKTtcbiAgICAgICAgZm9ybWF0ID0gcGFydHMucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0cy5wdXNoKGZvcm1hdCk7XG4gICAgICAgIGZvcm1hdCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRhdGVUaW1lem9uZU9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBpZiAodGltZXpvbmUpIHtcbiAgICAgIGRhdGVUaW1lem9uZU9mZnNldCA9IHRpbWV6b25lVG9PZmZzZXQodGltZXpvbmUsIGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICBkYXRlID0gY29udmVydFRpbWV6b25lVG9Mb2NhbChkYXRlLCB0aW1lem9uZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGZvckVhY2gocGFydHMsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBmbiA9IERBVEVfRk9STUFUU1t2YWx1ZV07XG4gICAgICB0ZXh0ICs9IGZuID8gZm4oZGF0ZSwgJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLCBkYXRlVGltZXpvbmVPZmZzZXQpXG4gICAgICAgICAgICAgICAgIDogdmFsdWUucmVwbGFjZSgvKF4nfCckKS9nLCAnJykucmVwbGFjZSgvJycvZywgXCInXCIpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBqc29uXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogICBBbGxvd3MgeW91IHRvIGNvbnZlcnQgYSBKYXZhU2NyaXB0IG9iamVjdCBpbnRvIEpTT04gc3RyaW5nLlxuICpcbiAqICAgVGhpcyBmaWx0ZXIgaXMgbW9zdGx5IHVzZWZ1bCBmb3IgZGVidWdnaW5nLiBXaGVuIHVzaW5nIHRoZSBkb3VibGUgY3VybHkge3t2YWx1ZX19IG5vdGF0aW9uXG4gKiAgIHRoZSBiaW5kaW5nIGlzIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIEpTT04uXG4gKlxuICogQHBhcmFtIHsqfSBvYmplY3QgQW55IEphdmFTY3JpcHQgb2JqZWN0IChpbmNsdWRpbmcgYXJyYXlzIGFuZCBwcmltaXRpdmUgdHlwZXMpIHRvIGZpbHRlci5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gc3BhY2luZyBUaGUgbnVtYmVyIG9mIHNwYWNlcyB0byB1c2UgcGVyIGluZGVudGF0aW9uLCBkZWZhdWx0cyB0byAyLlxuICogQHJldHVybnMge3N0cmluZ30gSlNPTiBzdHJpbmcuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8cHJlIGlkPVwiZGVmYXVsdC1zcGFjaW5nXCI+e3sgeyduYW1lJzondmFsdWUnfSB8IGpzb24gfX08L3ByZT5cbiAgICAgICA8cHJlIGlkPVwiY3VzdG9tLXNwYWNpbmdcIj57eyB7J25hbWUnOid2YWx1ZSd9IHwganNvbjo0IH19PC9wcmU+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQganNvbmlmeSBmaWx0ZXJlZCBvYmplY3RzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGVmYXVsdC1zcGFjaW5nJykpLmdldFRleHQoKSkudG9NYXRjaCgvXFx7XFxuICBcIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXN0b20tc3BhY2luZycpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL1xce1xcbiAgICBcIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqL1xuZnVuY3Rpb24ganNvbkZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgc3BhY2luZykge1xuICAgIGlmIChpc1VuZGVmaW5lZChzcGFjaW5nKSkge1xuICAgICAgICBzcGFjaW5nID0gMjtcbiAgICB9XG4gICAgcmV0dXJuIHRvSnNvbihvYmplY3QsIHNwYWNpbmcpO1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgbG93ZXJjYXNlXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gbG93ZXJjYXNlLlxuICogQHNlZSBhbmd1bGFyLmxvd2VyY2FzZVxuICovXG52YXIgbG93ZXJjYXNlRmlsdGVyID0gdmFsdWVGbihsb3dlcmNhc2UpO1xuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgdXBwZXJjYXNlXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gdXBwZXJjYXNlLlxuICogQHNlZSBhbmd1bGFyLnVwcGVyY2FzZVxuICovXG52YXIgdXBwZXJjYXNlRmlsdGVyID0gdmFsdWVGbih1cHBlcmNhc2UpO1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGxpbWl0VG9cbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgbmV3IGFycmF5IG9yIHN0cmluZyBjb250YWluaW5nIG9ubHkgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIGVsZW1lbnRzLiBUaGUgZWxlbWVudHNcbiAqIGFyZSB0YWtlbiBmcm9tIGVpdGhlciB0aGUgYmVnaW5uaW5nIG9yIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheSwgc3RyaW5nIG9yIG51bWJlciwgYXMgc3BlY2lmaWVkIGJ5XG4gKiB0aGUgdmFsdWUgYW5kIHNpZ24gKHBvc2l0aXZlIG9yIG5lZ2F0aXZlKSBvZiBgbGltaXRgLiBJZiBhIG51bWJlciBpcyB1c2VkIGFzIGlucHV0LCBpdCBpc1xuICogY29udmVydGVkIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfG51bWJlcn0gaW5wdXQgU291cmNlIGFycmF5LCBzdHJpbmcgb3IgbnVtYmVyIHRvIGJlIGxpbWl0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGxpbWl0IFRoZSBsZW5ndGggb2YgdGhlIHJldHVybmVkIGFycmF5IG9yIHN0cmluZy4gSWYgdGhlIGBsaW1pdGAgbnVtYmVyXG4gKiAgICAgaXMgcG9zaXRpdmUsIGBsaW1pdGAgbnVtYmVyIG9mIGl0ZW1zIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgc291cmNlIGFycmF5L3N0cmluZyBhcmUgY29waWVkLlxuICogICAgIElmIHRoZSBudW1iZXIgaXMgbmVnYXRpdmUsIGBsaW1pdGAgbnVtYmVyICBvZiBpdGVtcyBmcm9tIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheS9zdHJpbmdcbiAqICAgICBhcmUgY29waWVkLiBUaGUgYGxpbWl0YCB3aWxsIGJlIHRyaW1tZWQgaWYgaXQgZXhjZWVkcyBgYXJyYXkubGVuZ3RoYC4gSWYgYGxpbWl0YCBpcyB1bmRlZmluZWQsXG4gKiAgICAgdGhlIGlucHV0IHdpbGwgYmUgcmV0dXJuZWQgdW5jaGFuZ2VkLlxuICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBiZWdpbiBJbmRleCBhdCB3aGljaCB0byBiZWdpbiBsaW1pdGF0aW9uLiBBcyBhIG5lZ2F0aXZlIGluZGV4LCBgYmVnaW5gXG4gKiAgICAgaW5kaWNhdGVzIGFuIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGlucHV0YC4gRGVmYXVsdHMgdG8gYDBgLlxuICogQHJldHVybnMge0FycmF5fHN0cmluZ30gQSBuZXcgc3ViLWFycmF5IG9yIHN1YnN0cmluZyBvZiBsZW5ndGggYGxpbWl0YCBvciBsZXNzIGlmIGlucHV0IGFycmF5XG4gKiAgICAgaGFkIGxlc3MgdGhhbiBgbGltaXRgIGVsZW1lbnRzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJsaW1pdFRvRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbGltaXRUb0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUubnVtYmVycyA9IFsxLDIsMyw0LDUsNiw3LDgsOV07XG4gICAgICAgICAgICAgJHNjb3BlLmxldHRlcnMgPSBcImFiY2RlZmdoaVwiO1xuICAgICAgICAgICAgICRzY29wZS5sb25nTnVtYmVyID0gMjM0NTQzMjM0MjtcbiAgICAgICAgICAgICAkc2NvcGUubnVtTGltaXQgPSAzO1xuICAgICAgICAgICAgICRzY29wZS5sZXR0ZXJMaW1pdCA9IDM7XG4gICAgICAgICAgICAgJHNjb3BlLmxvbmdOdW1iZXJMaW1pdCA9IDM7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgTGltaXQge3tudW1iZXJzfX0gdG86XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHN0ZXA9XCIxXCIgbmctbW9kZWw9XCJudW1MaW1pdFwiPlxuICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgIDxwPk91dHB1dCBudW1iZXJzOiB7eyBudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCB9fTwvcD5cbiAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIExpbWl0IHt7bGV0dGVyc319IHRvOlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBzdGVwPVwiMVwiIG5nLW1vZGVsPVwibGV0dGVyTGltaXRcIj5cbiAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICA8cD5PdXRwdXQgbGV0dGVyczoge3sgbGV0dGVycyB8IGxpbWl0VG86bGV0dGVyTGltaXQgfX08L3A+XG4gICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICBMaW1pdCB7e2xvbmdOdW1iZXJ9fSB0bzpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgc3RlcD1cIjFcIiBuZy1tb2RlbD1cImxvbmdOdW1iZXJMaW1pdFwiPlxuICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgIDxwPk91dHB1dCBsb25nIG51bWJlcjoge3sgbG9uZ051bWJlciB8IGxpbWl0VG86bG9uZ051bWJlckxpbWl0IH19PC9wPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgbnVtTGltaXRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ251bUxpbWl0JykpO1xuICAgICAgIHZhciBsZXR0ZXJMaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbGV0dGVyTGltaXQnKSk7XG4gICAgICAgdmFyIGxvbmdOdW1iZXJMaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbG9uZ051bWJlckxpbWl0JykpO1xuICAgICAgIHZhciBsaW1pdGVkTnVtYmVycyA9IGVsZW1lbnQoYnkuYmluZGluZygnbnVtYmVycyB8IGxpbWl0VG86bnVtTGltaXQnKSk7XG4gICAgICAgdmFyIGxpbWl0ZWRMZXR0ZXJzID0gZWxlbWVudChieS5iaW5kaW5nKCdsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCcpKTtcbiAgICAgICB2YXIgbGltaXRlZExvbmdOdW1iZXIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xvbmdOdW1iZXIgfCBsaW1pdFRvOmxvbmdOdW1iZXJMaW1pdCcpKTtcblxuICAgICAgIGl0KCdzaG91bGQgbGltaXQgdGhlIG51bWJlciBhcnJheSB0byBmaXJzdCB0aHJlZSBpdGVtcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KG51bUxpbWl0SW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCczJyk7XG4gICAgICAgICBleHBlY3QobGV0dGVyTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgIGV4cGVjdChsb25nTnVtYmVyTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbMSwyLDNdJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogYWJjJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDIzNCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgLy8gVGhlcmUgaXMgYSBidWcgaW4gc2FmYXJpIGFuZCBwcm90cmFjdG9yIHRoYXQgZG9lc24ndCBsaWtlIHRoZSBtaW51cyBrZXlcbiAgICAgICAvLyBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgb3V0cHV0IHdoZW4gLTMgaXMgZW50ZXJlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgIC8vICAgbnVtTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgIC8vICAgbnVtTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGxldHRlckxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAvLyAgIGxldHRlckxpbWl0SW5wdXQuc2VuZEtleXMoJy0zJyk7XG4gICAgICAgLy8gICBsb25nTnVtYmVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgIC8vICAgbG9uZ051bWJlckxpbWl0SW5wdXQuc2VuZEtleXMoJy0zJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZE51bWJlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbnVtYmVyczogWzcsOCw5XScpO1xuICAgICAgIC8vICAgZXhwZWN0KGxpbWl0ZWRMZXR0ZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxldHRlcnM6IGdoaScpO1xuICAgICAgIC8vICAgZXhwZWN0KGxpbWl0ZWRMb25nTnVtYmVyLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxvbmcgbnVtYmVyOiAzNDInKTtcbiAgICAgICAvLyB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgbm90IGV4Y2VlZCB0aGUgbWF4aW11bSBzaXplIG9mIGlucHV0IGFycmF5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBudW1MaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgICBudW1MaW1pdElucHV0LnNlbmRLZXlzKCcxMDAnKTtcbiAgICAgICAgIGxldHRlckxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIGxldHRlckxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgbG9uZ051bWJlckxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIGxvbmdOdW1iZXJMaW1pdElucHV0LnNlbmRLZXlzKCcxMDAnKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbMSwyLDMsNCw1LDYsNyw4LDldJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogYWJjZGVmZ2hpJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDIzNDU0MzIzNDInKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuKi9cbmZ1bmN0aW9uIGxpbWl0VG9GaWx0ZXIoKSB7XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCwgbGltaXQsIGJlZ2luKSB7XG4gICAgaWYgKE1hdGguYWJzKE51bWJlcihsaW1pdCkpID09PSBJbmZpbml0eSkge1xuICAgICAgbGltaXQgPSBOdW1iZXIobGltaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW1pdCA9IHRvSW50KGxpbWl0KTtcbiAgICB9XG4gICAgaWYgKGlzTmFOKGxpbWl0KSkgcmV0dXJuIGlucHV0O1xuXG4gICAgaWYgKGlzTnVtYmVyKGlucHV0KSkgaW5wdXQgPSBpbnB1dC50b1N0cmluZygpO1xuICAgIGlmICghaXNBcnJheShpbnB1dCkgJiYgIWlzU3RyaW5nKGlucHV0KSkgcmV0dXJuIGlucHV0O1xuXG4gICAgYmVnaW4gPSAoIWJlZ2luIHx8IGlzTmFOKGJlZ2luKSkgPyAwIDogdG9JbnQoYmVnaW4pO1xuICAgIGJlZ2luID0gKGJlZ2luIDwgMCkgPyBNYXRoLm1heCgwLCBpbnB1dC5sZW5ndGggKyBiZWdpbikgOiBiZWdpbjtcblxuICAgIGlmIChsaW1pdCA+PSAwKSB7XG4gICAgICByZXR1cm4gaW5wdXQuc2xpY2UoYmVnaW4sIGJlZ2luICsgbGltaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYmVnaW4gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnNsaWNlKGxpbWl0LCBpbnB1dC5sZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnNsaWNlKE1hdGgubWF4KDAsIGJlZ2luICsgbGltaXQpLCBiZWdpbik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG9yZGVyQnlcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBPcmRlcnMgYSBzcGVjaWZpZWQgYGFycmF5YCBieSB0aGUgYGV4cHJlc3Npb25gIHByZWRpY2F0ZS4gSXQgaXMgb3JkZXJlZCBhbHBoYWJldGljYWxseVxuICogZm9yIHN0cmluZ3MgYW5kIG51bWVyaWNhbGx5IGZvciBudW1iZXJzLiBOb3RlOiBpZiB5b3Ugbm90aWNlIG51bWJlcnMgYXJlIG5vdCBiZWluZyBzb3J0ZWRcbiAqIGFzIGV4cGVjdGVkLCBtYWtlIHN1cmUgdGhleSBhcmUgYWN0dWFsbHkgYmVpbmcgc2F2ZWQgYXMgbnVtYmVycyBhbmQgbm90IHN0cmluZ3MuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCopfHN0cmluZ3xBcnJheS48KGZ1bmN0aW9uKCopfHN0cmluZyk+PX0gZXhwcmVzc2lvbiBBIHByZWRpY2F0ZSB0byBiZVxuICogICAgdXNlZCBieSB0aGUgY29tcGFyYXRvciB0byBkZXRlcm1pbmUgdGhlIG9yZGVyIG9mIGVsZW1lbnRzLlxuICpcbiAqICAgIENhbiBiZSBvbmUgb2Y6XG4gKlxuICogICAgLSBgZnVuY3Rpb25gOiBHZXR0ZXIgZnVuY3Rpb24uIFRoZSByZXN1bHQgb2YgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIHNvcnRlZCB1c2luZyB0aGVcbiAqICAgICAgYDxgLCBgPT09YCwgYD5gIG9wZXJhdG9yLlxuICogICAgLSBgc3RyaW5nYDogQW4gQW5ndWxhciBleHByZXNzaW9uLiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiBpcyB1c2VkIHRvIGNvbXBhcmUgZWxlbWVudHNcbiAqICAgICAgKGZvciBleGFtcGxlIGBuYW1lYCB0byBzb3J0IGJ5IGEgcHJvcGVydHkgY2FsbGVkIGBuYW1lYCBvciBgbmFtZS5zdWJzdHIoMCwgMylgIHRvIHNvcnQgYnlcbiAqICAgICAgMyBmaXJzdCBjaGFyYWN0ZXJzIG9mIGEgcHJvcGVydHkgY2FsbGVkIGBuYW1lYCkuIFRoZSByZXN1bHQgb2YgYSBjb25zdGFudCBleHByZXNzaW9uXG4gKiAgICAgIGlzIGludGVycHJldGVkIGFzIGEgcHJvcGVydHkgbmFtZSB0byBiZSB1c2VkIGluIGNvbXBhcmlzb25zIChmb3IgZXhhbXBsZSBgXCJzcGVjaWFsIG5hbWVcImBcbiAqICAgICAgdG8gc29ydCBvYmplY3QgYnkgdGhlIHZhbHVlIG9mIHRoZWlyIGBzcGVjaWFsIG5hbWVgIHByb3BlcnR5KS4gQW4gZXhwcmVzc2lvbiBjYW4gYmVcbiAqICAgICAgb3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIGArYCBvciBgLWAgdG8gY29udHJvbCBhc2NlbmRpbmcgb3IgZGVzY2VuZGluZyBzb3J0IG9yZGVyXG4gKiAgICAgIChmb3IgZXhhbXBsZSwgYCtuYW1lYCBvciBgLW5hbWVgKS4gSWYgbm8gcHJvcGVydHkgaXMgcHJvdmlkZWQsIChlLmcuIGAnKydgKSB0aGVuIHRoZSBhcnJheVxuICogICAgICBlbGVtZW50IGl0c2VsZiBpcyB1c2VkIHRvIGNvbXBhcmUgd2hlcmUgc29ydGluZy5cbiAqICAgIC0gYEFycmF5YDogQW4gYXJyYXkgb2YgZnVuY3Rpb24gb3Igc3RyaW5nIHByZWRpY2F0ZXMuIFRoZSBmaXJzdCBwcmVkaWNhdGUgaW4gdGhlIGFycmF5XG4gKiAgICAgIGlzIHVzZWQgZm9yIHNvcnRpbmcsIGJ1dCB3aGVuIHR3byBpdGVtcyBhcmUgZXF1aXZhbGVudCwgdGhlIG5leHQgcHJlZGljYXRlIGlzIHVzZWQuXG4gKlxuICogICAgSWYgdGhlIHByZWRpY2F0ZSBpcyBtaXNzaW5nIG9yIGVtcHR5IHRoZW4gaXQgZGVmYXVsdHMgdG8gYCcrJ2AuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gcmV2ZXJzZSBSZXZlcnNlIHRoZSBvcmRlciBvZiB0aGUgYXJyYXkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFNvcnRlZCBjb3B5IG9mIHRoZSBzb3VyY2UgYXJyYXkuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBkZW1vbnN0cmF0ZXMgYSBzaW1wbGUgbmdSZXBlYXQsIHdoZXJlIHRoZSBkYXRhIGlzIHNvcnRlZFxuICogYnkgYWdlIGluIGRlc2NlbmRpbmcgb3JkZXIgKHByZWRpY2F0ZSBpcyBzZXQgdG8gYCctYWdlJ2ApLlxuICogYHJldmVyc2VgIGlzIG5vdCBzZXQsIHdoaWNoIG1lYW5zIGl0IGRlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9XG4gICAgICAgICAgICAgICAgIFt7bmFtZTonSm9obicsIHBob25lOic1NTUtMTIxMicsIGFnZToxMH0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonTWFyeScsIHBob25lOic1NTUtOTg3NicsIGFnZToxOX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMScsIGFnZToyMX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonQWRhbScsIHBob25lOic1NTUtNTY3OCcsIGFnZTozNX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnLCBhZ2U6Mjl9XTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRcIj5cbiAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICAgICA8dGg+UGhvbmUgTnVtYmVyPC90aD5cbiAgICAgICAgICAgICA8dGg+QWdlPC90aD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTonLWFnZSdcIj5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKiBUaGUgcHJlZGljYXRlIGFuZCByZXZlcnNlIHBhcmFtZXRlcnMgY2FuIGJlIGNvbnRyb2xsZWQgZHluYW1pY2FsbHkgdGhyb3VnaCBzY29wZSBwcm9wZXJ0aWVzLFxuICogYXMgc2hvd24gaW4gdGhlIG5leHQgZXhhbXBsZS5cbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9XG4gICAgICAgICAgICAgICAgIFt7bmFtZTonSm9obicsIHBob25lOic1NTUtMTIxMicsIGFnZToxMH0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonTWFyeScsIHBob25lOic1NTUtOTg3NicsIGFnZToxOX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMScsIGFnZToyMX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonQWRhbScsIHBob25lOic1NTUtNTY3OCcsIGFnZTozNX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnLCBhZ2U6Mjl9XTtcbiAgICAgICAgICAgICAkc2NvcGUucHJlZGljYXRlID0gJ2FnZSc7XG4gICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSB0cnVlO1xuICAgICAgICAgICAgICRzY29wZS5vcmRlciA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSAoJHNjb3BlLnByZWRpY2F0ZSA9PT0gcHJlZGljYXRlKSA/ICEkc2NvcGUucmV2ZXJzZSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgJHNjb3BlLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlxuICAgICAgICAgLnNvcnRvcmRlcjphZnRlciB7XG4gICAgICAgICAgIGNvbnRlbnQ6ICdcXDI1YjInO1xuICAgICAgICAgfVxuICAgICAgICAgLnNvcnRvcmRlci5yZXZlcnNlOmFmdGVyIHtcbiAgICAgICAgICAgY29udGVudDogJ1xcMjViYyc7XG4gICAgICAgICB9XG4gICAgICAgPC9zdHlsZT5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPHByZT5Tb3J0aW5nIHByZWRpY2F0ZSA9IHt7cHJlZGljYXRlfX07IHJldmVyc2UgPSB7e3JldmVyc2V9fTwvcHJlPlxuICAgICAgICAgPGhyLz5cbiAgICAgICAgIFsgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicHJlZGljYXRlPScnXCI+dW5zb3J0ZWQ8L2E+IF1cbiAgICAgICAgIDx0YWJsZSBjbGFzcz1cImZyaWVuZFwiPlxuICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwib3JkZXIoJ25hbWUnKVwiPk5hbWU8L2E+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcmVkaWNhdGUgPT09ICduYW1lJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6cmV2ZXJzZX1cIj48L3NwYW4+XG4gICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJvcmRlcigncGhvbmUnKVwiPlBob25lIE51bWJlcjwvYT5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByZWRpY2F0ZSA9PT0gJ3Bob25lJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6cmV2ZXJzZX1cIj48L3NwYW4+XG4gICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJvcmRlcignYWdlJylcIj5BZ2U8L2E+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcmVkaWNhdGUgPT09ICdhZ2UnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTpyZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OnByZWRpY2F0ZTpyZXZlcnNlXCI+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5hZ2V9fTwvdGQ+XG4gICAgICAgICAgIDwvdHI+XG4gICAgICAgICA8L3RhYmxlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKlxuICogSXQncyBhbHNvIHBvc3NpYmxlIHRvIGNhbGwgdGhlIG9yZGVyQnkgZmlsdGVyIG1hbnVhbGx5LCBieSBpbmplY3RpbmcgYCRmaWx0ZXJgLCByZXRyaWV2aW5nIHRoZVxuICogZmlsdGVyIHJvdXRpbmUgd2l0aCBgJGZpbHRlcignb3JkZXJCeScpYCwgYW5kIGNhbGxpbmcgdGhlIHJldHVybmVkIGZpbHRlciByb3V0aW5lIHdpdGggdGhlXG4gKiBkZXNpcmVkIHBhcmFtZXRlcnMuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRcIj5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGg+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicmV2ZXJzZT1mYWxzZTtvcmRlcignbmFtZScsIGZhbHNlKVwiPk5hbWU8L2E+XG4gICAgICAgICAgICAgICg8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJvcmRlcignLW5hbWUnLGZhbHNlKVwiPl48L2E+KTwvdGg+XG4gICAgICAgICAgICA8dGg+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicmV2ZXJzZT0hcmV2ZXJzZTtvcmRlcigncGhvbmUnLCByZXZlcnNlKVwiPlBob25lIE51bWJlcjwvYT48L3RoPlxuICAgICAgICAgICAgPHRoPjxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInJldmVyc2U9IXJldmVyc2U7b3JkZXIoJ2FnZScscmV2ZXJzZSlcIj5BZ2U8L2E+PC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kc1wiPlxuICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICA8dGQ+e3tmcmllbmQuYWdlfX08L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG5cbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGZpbHRlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGZpbHRlcikge1xuICAgICAgICAgIHZhciBvcmRlckJ5ID0gJGZpbHRlcignb3JkZXJCeScpO1xuICAgICAgICAgICRzY29wZS5mcmllbmRzID0gW1xuICAgICAgICAgICAgeyBuYW1lOiAnSm9obicsICAgIHBob25lOiAnNTU1LTEyMTInLCAgICBhZ2U6IDEwIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdNYXJ5JywgICAgcGhvbmU6ICc1NTUtOTg3NicsICAgIGFnZTogMTkgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ01pa2UnLCAgICBwaG9uZTogJzU1NS00MzIxJywgICAgYWdlOiAyMSB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnQWRhbScsICAgIHBob25lOiAnNTU1LTU2NzgnLCAgICBhZ2U6IDM1IH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdKdWxpZScsICAgcGhvbmU6ICc1NTUtODc2NScsICAgIGFnZTogMjkgfVxuICAgICAgICAgIF07XG4gICAgICAgICAgJHNjb3BlLm9yZGVyID0gZnVuY3Rpb24ocHJlZGljYXRlLCByZXZlcnNlKSB7XG4gICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IG9yZGVyQnkoJHNjb3BlLmZyaWVuZHMsIHByZWRpY2F0ZSwgcmV2ZXJzZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICAkc2NvcGUub3JkZXIoJy1hZ2UnLGZhbHNlKTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbjwvZXhhbXBsZT5cbiAqL1xub3JkZXJCeUZpbHRlci4kaW5qZWN0ID0gWyckcGFyc2UnXTtcbmZ1bmN0aW9uIG9yZGVyQnlGaWx0ZXIoJHBhcnNlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcnJheSwgc29ydFByZWRpY2F0ZSwgcmV2ZXJzZU9yZGVyKSB7XG5cbiAgICBpZiAoIShpc0FycmF5TGlrZShhcnJheSkpKSByZXR1cm4gYXJyYXk7XG5cbiAgICBpZiAoIWlzQXJyYXkoc29ydFByZWRpY2F0ZSkpIHsgc29ydFByZWRpY2F0ZSA9IFtzb3J0UHJlZGljYXRlXTsgfVxuICAgIGlmIChzb3J0UHJlZGljYXRlLmxlbmd0aCA9PT0gMCkgeyBzb3J0UHJlZGljYXRlID0gWycrJ107IH1cblxuICAgIHZhciBwcmVkaWNhdGVzID0gcHJvY2Vzc1ByZWRpY2F0ZXMoc29ydFByZWRpY2F0ZSwgcmV2ZXJzZU9yZGVyKTtcbiAgICAvLyBBZGQgYSBwcmVkaWNhdGUgYXQgdGhlIGVuZCB0aGF0IGV2YWx1YXRlcyB0byB0aGUgZWxlbWVudCBpbmRleC4gVGhpcyBtYWtlcyB0aGVcbiAgICAvLyBzb3J0IHN0YWJsZSBhcyBpdCB3b3JrcyBhcyBhIHRpZS1icmVha2VyIHdoZW4gYWxsIHRoZSBpbnB1dCBwcmVkaWNhdGVzIGNhbm5vdFxuICAgIC8vIGRpc3Rpbmd1aXNoIGJldHdlZW4gdHdvIGVsZW1lbnRzLlxuICAgIHByZWRpY2F0ZXMucHVzaCh7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB7fTsgfSwgZGVzY2VuZGluZzogcmV2ZXJzZU9yZGVyID8gLTEgOiAxfSk7XG5cbiAgICAvLyBUaGUgbmV4dCB0aHJlZSBsaW5lcyBhcmUgYSB2ZXJzaW9uIG9mIGEgU3dhcnR6aWFuIFRyYW5zZm9ybSBpZGlvbSBmcm9tIFBlcmxcbiAgICAvLyAoc29tZXRpbWVzIGNhbGxlZCB0aGUgRGVjb3JhdGUtU29ydC1VbmRlY29yYXRlIGlkaW9tKVxuICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TY2h3YXJ0emlhbl90cmFuc2Zvcm1cbiAgICB2YXIgY29tcGFyZVZhbHVlcyA9IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChhcnJheSwgZ2V0Q29tcGFyaXNvbk9iamVjdCk7XG4gICAgY29tcGFyZVZhbHVlcy5zb3J0KGRvQ29tcGFyaXNvbik7XG4gICAgYXJyYXkgPSBjb21wYXJlVmFsdWVzLm1hcChmdW5jdGlvbihpdGVtKSB7IHJldHVybiBpdGVtLnZhbHVlOyB9KTtcblxuICAgIHJldHVybiBhcnJheTtcblxuICAgIGZ1bmN0aW9uIGdldENvbXBhcmlzb25PYmplY3QodmFsdWUsIGluZGV4KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHByZWRpY2F0ZVZhbHVlczogcHJlZGljYXRlcy5tYXAoZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGdldFByZWRpY2F0ZVZhbHVlKHByZWRpY2F0ZS5nZXQodmFsdWUpLCBpbmRleCk7XG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvQ29tcGFyaXNvbih2MSwgdjIpIHtcbiAgICAgIHZhciByZXN1bHQgPSAwO1xuICAgICAgZm9yICh2YXIgaW5kZXg9MCwgbGVuZ3RoID0gcHJlZGljYXRlcy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIHJlc3VsdCA9IGNvbXBhcmUodjEucHJlZGljYXRlVmFsdWVzW2luZGV4XSwgdjIucHJlZGljYXRlVmFsdWVzW2luZGV4XSkgKiBwcmVkaWNhdGVzW2luZGV4XS5kZXNjZW5kaW5nO1xuICAgICAgICBpZiAocmVzdWx0KSBicmVhaztcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHByb2Nlc3NQcmVkaWNhdGVzKHNvcnRQcmVkaWNhdGUsIHJldmVyc2VPcmRlcikge1xuICAgIHJldmVyc2VPcmRlciA9IHJldmVyc2VPcmRlciA/IC0xIDogMTtcbiAgICByZXR1cm4gc29ydFByZWRpY2F0ZS5tYXAoZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICB2YXIgZGVzY2VuZGluZyA9IDEsIGdldCA9IGlkZW50aXR5O1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbihwcmVkaWNhdGUpKSB7XG4gICAgICAgIGdldCA9IHByZWRpY2F0ZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcocHJlZGljYXRlKSkge1xuICAgICAgICBpZiAoKHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJysnIHx8IHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJy0nKSkge1xuICAgICAgICAgIGRlc2NlbmRpbmcgPSBwcmVkaWNhdGUuY2hhckF0KDApID09ICctJyA/IC0xIDogMTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBwcmVkaWNhdGUuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVkaWNhdGUgIT09ICcnKSB7XG4gICAgICAgICAgZ2V0ID0gJHBhcnNlKHByZWRpY2F0ZSk7XG4gICAgICAgICAgaWYgKGdldC5jb25zdGFudCkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGdldCgpO1xuICAgICAgICAgICAgZ2V0ID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlW2tleV07IH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyBnZXQ6IGdldCwgZGVzY2VuZGluZzogZGVzY2VuZGluZyAqIHJldmVyc2VPcmRlciB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSAnbnVtYmVyJzogLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAnYm9vbGVhbic6IC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9iamVjdFZhbHVlKHZhbHVlLCBpbmRleCkge1xuICAgIC8vIElmIGB2YWx1ZU9mYCBpcyBhIHZhbGlkIGZ1bmN0aW9uIHVzZSB0aGF0XG4gICAgaWYgKHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnZhbHVlT2YoKTtcbiAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgLy8gSWYgYHRvU3RyaW5nYCBpcyBhIHZhbGlkIGZ1bmN0aW9uIGFuZCBub3QgdGhlIG9uZSBmcm9tIGBPYmplY3QucHJvdG90eXBlYCB1c2UgdGhhdFxuICAgIGlmIChoYXNDdXN0b21Ub1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgLy8gV2UgaGF2ZSBhIGJhc2ljIG9iamVjdCBzbyB3ZSB1c2UgdGhlIHBvc2l0aW9uIG9mIHRoZSBvYmplY3QgaW4gdGhlIGNvbGxlY3Rpb25cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQcmVkaWNhdGVWYWx1ZSh2YWx1ZSwgaW5kZXgpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHR5cGUgPSAnc3RyaW5nJztcbiAgICAgIHZhbHVlID0gJ251bGwnO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWx1ZSA9IG9iamVjdFZhbHVlKHZhbHVlLCBpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgdHlwZTogdHlwZSB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcGFyZSh2MSwgdjIpIHtcbiAgICB2YXIgcmVzdWx0ID0gMDtcbiAgICBpZiAodjEudHlwZSA9PT0gdjIudHlwZSkge1xuICAgICAgaWYgKHYxLnZhbHVlICE9PSB2Mi52YWx1ZSkge1xuICAgICAgICByZXN1bHQgPSB2MS52YWx1ZSA8IHYyLnZhbHVlID8gLTEgOiAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB2MS50eXBlIDwgdjIudHlwZSA/IC0xIDogMTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBuZ0RpcmVjdGl2ZShkaXJlY3RpdmUpIHtcbiAgaWYgKGlzRnVuY3Rpb24oZGlyZWN0aXZlKSkge1xuICAgIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGxpbms6IGRpcmVjdGl2ZVxuICAgIH07XG4gIH1cbiAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZGlyZWN0aXZlLnJlc3RyaWN0IHx8ICdBQyc7XG4gIHJldHVybiB2YWx1ZUZuKGRpcmVjdGl2ZSk7XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgYVxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE1vZGlmaWVzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSBodG1sIEEgdGFnIHNvIHRoYXQgdGhlIGRlZmF1bHQgYWN0aW9uIGlzIHByZXZlbnRlZCB3aGVuXG4gKiB0aGUgaHJlZiBhdHRyaWJ1dGUgaXMgZW1wdHkuXG4gKlxuICogVGhpcyBjaGFuZ2UgcGVybWl0cyB0aGUgZWFzeSBjcmVhdGlvbiBvZiBhY3Rpb24gbGlua3Mgd2l0aCB0aGUgYG5nQ2xpY2tgIGRpcmVjdGl2ZVxuICogd2l0aG91dCBjaGFuZ2luZyB0aGUgbG9jYXRpb24gb3IgY2F1c2luZyBwYWdlIHJlbG9hZHMsIGUuZy46XG4gKiBgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwibGlzdC5hZGRJdGVtKClcIj5BZGQgSXRlbTwvYT5gXG4gKi9cbnZhciBodG1sQW5jaG9yRGlyZWN0aXZlID0gdmFsdWVGbih7XG4gIHJlc3RyaWN0OiAnRScsXG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICBpZiAoIWF0dHIuaHJlZiAmJiAhYXR0ci54bGlua0hyZWYpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCkge1xuICAgICAgICAvLyBJZiB0aGUgbGlua2VkIGVsZW1lbnQgaXMgbm90IGFuIGFuY2hvciB0YWcgYW55bW9yZSwgZG8gbm90aGluZ1xuICAgICAgICBpZiAoZWxlbWVudFswXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnYScpIHJldHVybjtcblxuICAgICAgICAvLyBTVkdBRWxlbWVudCBkb2VzIG5vdCB1c2UgdGhlIGhyZWYgYXR0cmlidXRlLCBidXQgcmF0aGVyIHRoZSAneGxpbmtIcmVmJyBhdHRyaWJ1dGUuXG4gICAgICAgIHZhciBocmVmID0gdG9TdHJpbmcuY2FsbChlbGVtZW50LnByb3AoJ2hyZWYnKSkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScgP1xuICAgICAgICAgICAgICAgICAgICd4bGluazpocmVmJyA6ICdocmVmJztcbiAgICAgICAgZWxlbWVudC5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgIC8vIGlmIHdlIGhhdmUgbm8gaHJlZiB1cmwsIHRoZW4gZG9uJ3QgbmF2aWdhdGUgYW55d2hlcmUuXG4gICAgICAgICAgaWYgKCFlbGVtZW50LmF0dHIoaHJlZikpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0hyZWZcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgOTlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhbiBocmVmIGF0dHJpYnV0ZSB3aWxsXG4gKiBtYWtlIHRoZSBsaW5rIGdvIHRvIHRoZSB3cm9uZyBVUkwgaWYgdGhlIHVzZXIgY2xpY2tzIGl0IGJlZm9yZVxuICogQW5ndWxhciBoYXMgYSBjaGFuY2UgdG8gcmVwbGFjZSB0aGUgYHt7aGFzaH19YCBtYXJrdXAgd2l0aCBpdHNcbiAqIHZhbHVlLiBVbnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBtYXJrdXAgdGhlIGxpbmsgd2lsbCBiZSBicm9rZW5cbiAqIGFuZCB3aWxsIG1vc3QgbGlrZWx5IHJldHVybiBhIDQwNCBlcnJvci4gVGhlIGBuZ0hyZWZgIGRpcmVjdGl2ZVxuICogc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAqXG4gKiBUaGUgd3Jvbmcgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGEgaHJlZj1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiPmxpbmsxPC9hPlxuICogYGBgXG4gKlxuICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGEgbmctaHJlZj1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiPmxpbmsxPC9hPlxuICogYGBgXG4gKlxuICogQGVsZW1lbnQgQVxuICogQHBhcmFtIHt0ZW1wbGF0ZX0gbmdIcmVmIGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIHZhcmlvdXMgY29tYmluYXRpb25zIG9mIGBocmVmYCwgYG5nLWhyZWZgIGFuZCBgbmctY2xpY2tgIGF0dHJpYnV0ZXNcbiAqIGluIGxpbmtzIGFuZCB0aGVpciBkaWZmZXJlbnQgYmVoYXZpb3JzOlxuICAgIDxleGFtcGxlPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwidmFsdWVcIiAvPjxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstMVwiIGhyZWYgbmctY2xpY2s9XCJ2YWx1ZSA9IDFcIj5saW5rIDE8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0yXCIgaHJlZj1cIlwiIG5nLWNsaWNrPVwidmFsdWUgPSAyXCI+bGluayAyPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstM1wiIG5nLWhyZWY9XCIve3snMTIzJ319XCI+bGluayAzPC9hPiAobGluaywgcmVsb2FkISk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTRcIiBocmVmPVwiXCIgbmFtZT1cInh4XCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDRcIj5hbmNob3I8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay01XCIgbmFtZT1cInh4eFwiIG5nLWNsaWNrPVwidmFsdWUgPSA1XCI+YW5jaG9yPC9hPiAobm8gbGluayk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTZcIiBuZy1ocmVmPVwie3t2YWx1ZX19XCI+bGluazwvYT4gKGxpbmssIGNoYW5nZSBsb2NhdGlvbilcbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiB3aXRob3V0IHZhbHVlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0xJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnMScpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTEnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMicpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzInKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0yJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKCcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGFuZCBjaGFuZ2UgdXJsIHdoZW4gbmctaHJlZiBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0zJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b01hdGNoKC9cXC8xMjMkLyk7XG5cbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTMnKSkuY2xpY2soKTtcblxuICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIG5hdmlnYXRlIGF3YXkgZnJvbSBhbiBBbmd1bGFyIHBhZ2UsIHNvIHdlIG5lZWRcbiAgICAgICAgICAvLyB0byB1c2UgYnJvd3Nlci5kcml2ZXIgdG8gZ2V0IHRoZSBiYXNlIHdlYmRyaXZlci5cblxuICAgICAgICAgIGJyb3dzZXIud2FpdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBicm93c2VyLmRyaXZlci5nZXRDdXJyZW50VXJsKCkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVybC5tYXRjaCgvXFwvMTIzJC8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgNTAwMCwgJ3BhZ2Ugc2hvdWxkIG5hdmlnYXRlIHRvIC8xMjMnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiBlbXB0eSBzdHJpbmcgYW5kIG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay00JykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnNCcpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTQnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBubyBocmVmIGJ1dCBuYW1lIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstNScpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzUnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay01JykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKG51bGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIG9ubHkgY2hhbmdlIHVybCB3aGVuIG9ubHkgbmctaHJlZicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmNsZWFyKCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuc2VuZEtleXMoJzYnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay02JykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b01hdGNoKC9cXC82JC8pO1xuXG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay02JykpLmNsaWNrKCk7XG5cbiAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBuYXZpZ2F0ZSBhd2F5IGZyb20gYW4gQW5ndWxhciBwYWdlLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgLy8gdG8gdXNlIGJyb3dzZXIuZHJpdmVyIHRvIGdldCB0aGUgYmFzZSB3ZWJkcml2ZXIuXG4gICAgICAgICAgYnJvd3Nlci53YWl0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICByZXR1cm4gdXJsLm1hdGNoKC9cXC82JC8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgNTAwMCwgJ3BhZ2Ugc2hvdWxkIG5hdmlnYXRlIHRvIC82Jyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3JjXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDk5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3JjYCBhdHRyaWJ1dGUgZG9lc24ndFxuICogd29yayByaWdodDogVGhlIGJyb3dzZXIgd2lsbCBmZXRjaCBmcm9tIHRoZSBVUkwgd2l0aCB0aGUgbGl0ZXJhbFxuICogdGV4dCBge3toYXNofX1gIHVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIGV4cHJlc3Npb24gaW5zaWRlXG4gKiBge3toYXNofX1gLiBUaGUgYG5nU3JjYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAqXG4gKiBUaGUgYnVnZ3kgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBzcmM9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIiBhbHQ9XCJEZXNjcmlwdGlvblwiLz5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgbmctc3JjPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCIgYWx0PVwiRGVzY3JpcHRpb25cIiAvPlxuICogYGBgXG4gKlxuICogQGVsZW1lbnQgSU1HXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyYyBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1NyY3NldFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSA5OVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGEgYHNyY3NldGAgYXR0cmlidXRlIGRvZXNuJ3RcbiAqIHdvcmsgcmlnaHQ6IFRoZSBicm93c2VyIHdpbGwgZmV0Y2ggZnJvbSB0aGUgVVJMIHdpdGggdGhlIGxpdGVyYWxcbiAqIHRleHQgYHt7aGFzaH19YCB1bnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBleHByZXNzaW9uIGluc2lkZVxuICogYHt7aGFzaH19YC4gVGhlIGBuZ1NyY3NldGAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0uXG4gKlxuICogVGhlIGJ1Z2d5IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgc3Jjc2V0PVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4XCIgYWx0PVwiRGVzY3JpcHRpb25cIi8+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8aW1nIG5nLXNyY3NldD1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSAyeFwiIGFsdD1cIkRlc2NyaXB0aW9uXCIgLz5cbiAqIGBgYFxuICpcbiAqIEBlbGVtZW50IElNR1xuICogQHBhcmFtIHt0ZW1wbGF0ZX0gbmdTcmNzZXQgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdEaXNhYmxlZFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGlzIGRpcmVjdGl2ZSBzZXRzIHRoZSBgZGlzYWJsZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBpZiB0aGVcbiAqIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGluc2lkZSBgbmdEaXNhYmxlZGAgZXZhbHVhdGVzIHRvIHRydXRoeS5cbiAqXG4gKiBBIHNwZWNpYWwgZGlyZWN0aXZlIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHdlIGNhbm5vdCB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhlIGBkaXNhYmxlZGBcbiAqIGF0dHJpYnV0ZS4gIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSB3b3VsZCBtYWtlIHRoZSBidXR0b24gZW5hYmxlZCBvbiBDaHJvbWUvRmlyZWZveFxuICogYnV0IG5vdCBvbiBvbGRlciBJRXM6XG4gKlxuICogYGBgaHRtbFxuICogPCEtLSBTZWUgYmVsb3cgZm9yIGFuIGV4YW1wbGUgb2YgbmctZGlzYWJsZWQgYmVpbmcgdXNlZCBjb3JyZWN0bHkgLS0+XG4gKiA8ZGl2IG5nLWluaXQ9XCJpc0Rpc2FibGVkID0gZmFsc2VcIj5cbiAqICA8YnV0dG9uIGRpc2FibGVkPVwie3tpc0Rpc2FibGVkfX1cIj5EaXNhYmxlZDwvYnV0dG9uPlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBUaGlzIGlzIGJlY2F1c2UgdGhlIEhUTUwgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSB2YWx1ZXMgb2ZcbiAqIGJvb2xlYW4gYXR0cmlidXRlcyBzdWNoIGFzIGBkaXNhYmxlZGAgKFRoZWlyIHByZXNlbmNlIG1lYW5zIHRydWUgYW5kIHRoZWlyIGFic2VuY2UgbWVhbnMgZmFsc2UuKVxuICogSWYgd2UgcHV0IGFuIEFuZ3VsYXIgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uIGludG8gc3VjaCBhbiBhdHRyaWJ1dGUgdGhlbiB0aGVcbiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGxhYmVsPkNsaWNrIG1lIHRvIHRvZ2dsZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgPGJ1dHRvbiBuZy1tb2RlbD1cImJ1dHRvblwiIG5nLWRpc2FibGVkPVwiY2hlY2tlZFwiPkJ1dHRvbjwvYnV0dG9uPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBidXR0b24nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ2J1dHRvbicpKS5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpLnRvQmVGYWxzeSgpO1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ2J1dHRvbicpKS5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IElOUFVUXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRGlzYWJsZWQgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHRoZSBgZGlzYWJsZWRgIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NoZWNrZWRcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZXRzIHRoZSBgY2hlY2tlZGAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LCBpZiB0aGUgZXhwcmVzc2lvbiBpbnNpZGUgYG5nQ2hlY2tlZGAgaXMgdHJ1dGh5LlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIGRpcmVjdGl2ZSBzaG91bGQgbm90IGJlIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LFxuICogYXMgdGhpcyBjYW4gbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yLlxuICpcbiAqICMjIyBXaHkgZG8gd2UgbmVlZCBgbmdDaGVja2VkYD9cbiAqXG4gKiBUaGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZiBib29sZWFuIGF0dHJpYnV0ZXNcbiAqIHN1Y2ggYXMgY2hlY2tlZC4gKFRoZWlyIHByZXNlbmNlIG1lYW5zIHRydWUgYW5kIHRoZWlyIGFic2VuY2UgbWVhbnMgZmFsc2UuKVxuICogSWYgd2UgcHV0IGFuIEFuZ3VsYXIgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uIGludG8gc3VjaCBhbiBhdHRyaWJ1dGUgdGhlbiB0aGVcbiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS5cbiAqIFRoZSBgbmdDaGVja2VkYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGBjaGVja2VkYCBhdHRyaWJ1dGUuXG4gKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlc1xuICogYSBwZXJtYW5lbnQgcmVsaWFibGUgcGxhY2UgdG8gc3RvcmUgdGhlIGJpbmRpbmcgaW5mb3JtYXRpb24uXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGxhYmVsPkNoZWNrIG1lIHRvIGNoZWNrIGJvdGg6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cIm1hc3RlclwiPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgPGlucHV0IGlkPVwiY2hlY2tTbGF2ZVwiIHR5cGU9XCJjaGVja2JveFwiIG5nLWNoZWNrZWQ9XCJtYXN0ZXJcIiBhcmlhLWxhYmVsPVwiU2xhdmUgaW5wdXRcIj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBib3RoIGNoZWNrQm94ZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY2hlY2tTbGF2ZScpKS5nZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnbWFzdGVyJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2NoZWNrU2xhdmUnKSkuZ2V0QXR0cmlidXRlKCdjaGVja2VkJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IElOUFVUXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2hlY2tlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gdGhlIGBjaGVja2VkYCBhdHRyaWJ1dGUgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdSZWFkb25seVxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlc1xuICogc3VjaCBhcyByZWFkb25seS4gKFRoZWlyIHByZXNlbmNlIG1lYW5zIHRydWUgYW5kIHRoZWlyIGFic2VuY2UgbWVhbnMgZmFsc2UuKVxuICogSWYgd2UgcHV0IGFuIEFuZ3VsYXIgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uIGludG8gc3VjaCBhbiBhdHRyaWJ1dGUgdGhlbiB0aGVcbiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS5cbiAqIFRoZSBgbmdSZWFkb25seWAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0gZm9yIHRoZSBgcmVhZG9ubHlgIGF0dHJpYnV0ZS5cbiAqIFRoaXMgY29tcGxlbWVudGFyeSBkaXJlY3RpdmUgaXMgbm90IHJlbW92ZWQgYnkgdGhlIGJyb3dzZXIgYW5kIHNvIHByb3ZpZGVzXG4gKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi5cbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8bGFiZWw+Q2hlY2sgbWUgdG8gbWFrZSB0ZXh0IHJlYWRvbmx5OiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1yZWFkb25seT1cImNoZWNrZWRcIiB2YWx1ZT1cIkknbSBBbmd1bGFyXCIgYXJpYS1sYWJlbD1cIlJlYWRvbmx5IGZpZWxkXCIgLz5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgcmVhZG9ubHkgYXR0cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnW3R5cGU9XCJ0ZXh0XCJdJykpLmdldEF0dHJpYnV0ZSgncmVhZG9ubHknKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnW3R5cGU9XCJ0ZXh0XCJdJykpLmdldEF0dHJpYnV0ZSgncmVhZG9ubHknKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgSU5QVVRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdSZWFkb25seSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgXCJyZWFkb25seVwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU2VsZWN0ZWRcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZiBib29sZWFuIGF0dHJpYnV0ZXNcbiAqIHN1Y2ggYXMgc2VsZWN0ZWQuIChUaGVpciBwcmVzZW5jZSBtZWFucyB0cnVlIGFuZCB0aGVpciBhYnNlbmNlIG1lYW5zIGZhbHNlLilcbiAqIElmIHdlIHB1dCBhbiBBbmd1bGFyIGludGVycG9sYXRpb24gZXhwcmVzc2lvbiBpbnRvIHN1Y2ggYW4gYXR0cmlidXRlIHRoZW4gdGhlXG4gKiBiaW5kaW5nIGluZm9ybWF0aW9uIHdvdWxkIGJlIGxvc3Qgd2hlbiB0aGUgYnJvd3NlciByZW1vdmVzIHRoZSBhdHRyaWJ1dGUuXG4gKiBUaGUgYG5nU2VsZWN0ZWRgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYHNlbGVjdGVkYCBhdHRyaWJ1dGUuXG4gKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlc1xuICogYSBwZXJtYW5lbnQgcmVsaWFibGUgcGxhY2UgdG8gc3RvcmUgdGhlIGJpbmRpbmcgaW5mb3JtYXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxsYWJlbD5DaGVjayBtZSB0byBzZWxlY3Q6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInNlbGVjdGVkXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICA8c2VsZWN0IGFyaWEtbGFiZWw9XCJuZ1NlbGVjdGVkIGRlbW9cIj5cbiAgICAgICAgICA8b3B0aW9uPkhlbGxvITwvb3B0aW9uPlxuICAgICAgICAgIDxvcHRpb24gaWQ9XCJncmVldFwiIG5nLXNlbGVjdGVkPVwic2VsZWN0ZWRcIj5HcmVldGluZ3MhPC9vcHRpb24+XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHNlbGVjdCBHcmVldGluZ3MhJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2dyZWV0JykpLmdldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc2VsZWN0ZWQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZ3JlZXQnKSkuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBPUFRJT05cbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTZWxlY3RlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgXCJzZWxlY3RlZFwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ09wZW5cbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZiBib29sZWFuIGF0dHJpYnV0ZXNcbiAqIHN1Y2ggYXMgb3Blbi4gKFRoZWlyIHByZXNlbmNlIG1lYW5zIHRydWUgYW5kIHRoZWlyIGFic2VuY2UgbWVhbnMgZmFsc2UuKVxuICogSWYgd2UgcHV0IGFuIEFuZ3VsYXIgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uIGludG8gc3VjaCBhbiBhdHRyaWJ1dGUgdGhlbiB0aGVcbiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS5cbiAqIFRoZSBgbmdPcGVuYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGBvcGVuYCBhdHRyaWJ1dGUuXG4gKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlc1xuICogYSBwZXJtYW5lbnQgcmVsaWFibGUgcGxhY2UgdG8gc3RvcmUgdGhlIGJpbmRpbmcgaW5mb3JtYXRpb24uXG4gKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGxhYmVsPkNoZWNrIG1lIGNoZWNrIG11bHRpcGxlOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJvcGVuXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICAgPGRldGFpbHMgaWQ9XCJkZXRhaWxzXCIgbmctb3Blbj1cIm9wZW5cIj5cbiAgICAgICAgICAgIDxzdW1tYXJ5PlNob3cvSGlkZSBtZTwvc3VtbWFyeT5cbiAgICAgICAgIDwvZGV0YWlscz5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgb3BlbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGV0YWlscycpKS5nZXRBdHRyaWJ1dGUoJ29wZW4nKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ29wZW4nKSkuY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2RldGFpbHMnKSkuZ2V0QXR0cmlidXRlKCdvcGVuJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgIH0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IERFVEFJTFNcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdPcGVuIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcIm9wZW5cIiB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cbnZhciBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyA9IHt9O1xuXG4vLyBib29sZWFuIGF0dHJzIGFyZSBldmFsdWF0ZWRcbmZvckVhY2goQk9PTEVBTl9BVFRSLCBmdW5jdGlvbihwcm9wTmFtZSwgYXR0ck5hbWUpIHtcbiAgLy8gYmluZGluZyB0byBtdWx0aXBsZSBpcyBub3Qgc3VwcG9ydGVkXG4gIGlmIChwcm9wTmFtZSA9PSBcIm11bHRpcGxlXCIpIHJldHVybjtcblxuICBmdW5jdGlvbiBkZWZhdWx0TGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgc2NvcGUuJHdhdGNoKGF0dHJbbm9ybWFsaXplZF0sIGZ1bmN0aW9uIG5nQm9vbGVhbkF0dHJXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgYXR0ci4kc2V0KGF0dHJOYW1lLCAhIXZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBub3JtYWxpemVkID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgYXR0ck5hbWUpO1xuICB2YXIgbGlua0ZuID0gZGVmYXVsdExpbmtGbjtcblxuICBpZiAocHJvcE5hbWUgPT09ICdjaGVja2VkJykge1xuICAgIGxpbmtGbiA9IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAvLyBlbnN1cmluZyBuZ0NoZWNrZWQgZG9lc24ndCBpbnRlcmZlcmUgd2l0aCBuZ01vZGVsIHdoZW4gYm90aCBhcmUgc2V0IG9uIHRoZSBzYW1lIGlucHV0XG4gICAgICBpZiAoYXR0ci5uZ01vZGVsICE9PSBhdHRyW25vcm1hbGl6ZWRdKSB7XG4gICAgICAgIGRlZmF1bHRMaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHIpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tub3JtYWxpemVkXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgIGxpbms6IGxpbmtGblxuICAgIH07XG4gIH07XG59KTtcblxuLy8gYWxpYXNlZCBpbnB1dCBhdHRycyBhcmUgZXZhbHVhdGVkXG5mb3JFYWNoKEFMSUFTRURfQVRUUiwgZnVuY3Rpb24oaHRtbEF0dHIsIG5nQXR0cikge1xuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tuZ0F0dHJdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByaW9yaXR5OiAxMDAsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAvL3NwZWNpYWwgY2FzZSBuZ1BhdHRlcm4gd2hlbiBhIGxpdGVyYWwgcmVndWxhciBleHByZXNzaW9uIHZhbHVlXG4gICAgICAgIC8vaXMgdXNlZCBhcyB0aGUgZXhwcmVzc2lvbiAodGhpcyB3YXkgd2UgZG9uJ3QgaGF2ZSB0byB3YXRjaCBhbnl0aGluZykuXG4gICAgICAgIGlmIChuZ0F0dHIgPT09IFwibmdQYXR0ZXJuXCIgJiYgYXR0ci5uZ1BhdHRlcm4uY2hhckF0KDApID09IFwiL1wiKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gYXR0ci5uZ1BhdHRlcm4ubWF0Y2goUkVHRVhfU1RSSU5HX1JFR0VYUCk7XG4gICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBhdHRyLiRzZXQoXCJuZ1BhdHRlcm5cIiwgbmV3IFJlZ0V4cChtYXRjaFsxXSwgbWF0Y2hbMl0pKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kd2F0Y2goYXR0cltuZ0F0dHJdLCBmdW5jdGlvbiBuZ0F0dHJBbGlhc1dhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgYXR0ci4kc2V0KG5nQXR0ciwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufSk7XG5cbi8vIG5nLXNyYywgbmctc3Jjc2V0LCBuZy1ocmVmIGFyZSBpbnRlcnBvbGF0ZWRcbmZvckVhY2goWydzcmMnLCAnc3Jjc2V0JywgJ2hyZWYnXSwgZnVuY3Rpb24oYXR0ck5hbWUpIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7XG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25vcm1hbGl6ZWRdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByaW9yaXR5OiA5OSwgLy8gaXQgbmVlZHMgdG8gcnVuIGFmdGVyIHRoZSBhdHRyaWJ1dGVzIGFyZSBpbnRlcnBvbGF0ZWRcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IGF0dHJOYW1lLFxuICAgICAgICAgICAgbmFtZSA9IGF0dHJOYW1lO1xuXG4gICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ2hyZWYnICYmXG4gICAgICAgICAgICB0b1N0cmluZy5jYWxsKGVsZW1lbnQucHJvcCgnaHJlZicpKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJykge1xuICAgICAgICAgIG5hbWUgPSAneGxpbmtIcmVmJztcbiAgICAgICAgICBhdHRyLiRhdHRyW25hbWVdID0gJ3hsaW5rOmhyZWYnO1xuICAgICAgICAgIHByb3BOYW1lID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGF0dHIuJG9ic2VydmUobm9ybWFsaXplZCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoYXR0ck5hbWUgPT09ICdocmVmJykge1xuICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIHZhbHVlKTtcblxuICAgICAgICAgIC8vIG9uIElFLCBpZiBcIm5nOnNyY1wiIGRpcmVjdGl2ZSBkZWNsYXJhdGlvbiBpcyB1c2VkIGFuZCBcInNyY1wiIGF0dHJpYnV0ZSBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAgLy8gdGhlbiBjYWxsaW5nIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzcmMnLCAnZm9vJykgZG9lc24ndCBkbyBhbnl0aGluZywgc28gd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHNldCB0aGUgcHJvcGVydHkgYXMgd2VsbCB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICAgICAgICAvLyB3ZSB1c2UgYXR0clthdHRyTmFtZV0gdmFsdWUgc2luY2UgJHNldCBjYW4gc2FuaXRpemUgdGhlIHVybC5cbiAgICAgICAgICBpZiAobXNpZSAmJiBwcm9wTmFtZSkgZWxlbWVudC5wcm9wKHByb3BOYW1lLCBhdHRyW25hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn0pO1xuXG4vKiBnbG9iYWwgLW51bGxGb3JtQ3RybCwgLVNVQk1JVFRFRF9DTEFTUywgYWRkU2V0VmFsaWRpdHlNZXRob2Q6IHRydWVcbiAqL1xudmFyIG51bGxGb3JtQ3RybCA9IHtcbiAgJGFkZENvbnRyb2w6IG5vb3AsXG4gICQkcmVuYW1lQ29udHJvbDogbnVsbEZvcm1SZW5hbWVDb250cm9sLFxuICAkcmVtb3ZlQ29udHJvbDogbm9vcCxcbiAgJHNldFZhbGlkaXR5OiBub29wLFxuICAkc2V0RGlydHk6IG5vb3AsXG4gICRzZXRQcmlzdGluZTogbm9vcCxcbiAgJHNldFN1Ym1pdHRlZDogbm9vcFxufSxcblNVQk1JVFRFRF9DTEFTUyA9ICduZy1zdWJtaXR0ZWQnO1xuXG5mdW5jdGlvbiBudWxsRm9ybVJlbmFtZUNvbnRyb2woY29udHJvbCwgbmFtZSkge1xuICBjb250cm9sLiRuYW1lID0gbmFtZTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlclxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgZm9ybSB5ZXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRkaXJ0eSBUcnVlIGlmIHVzZXIgaGFzIGFscmVhZHkgaW50ZXJhY3RlZCB3aXRoIHRoZSBmb3JtLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiBhbGwgb2YgdGhlIGNvbnRhaW5pbmcgZm9ybXMgYW5kIGNvbnRyb2xzIGFyZSB2YWxpZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgY29udGFpbmluZyBjb250cm9sIG9yIGZvcm0gaXMgaW52YWxpZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHBlbmRpbmcgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgY29udGFpbmluZyBjb250cm9sIG9yIGZvcm0gaXMgcGVuZGluZy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHN1Ym1pdHRlZCBUcnVlIGlmIHVzZXIgaGFzIHN1Ym1pdHRlZCB0aGUgZm9ybSBldmVuIGlmIGl0cyBpbnZhbGlkLlxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgSXMgYW4gb2JqZWN0IGhhc2gsIGNvbnRhaW5pbmcgcmVmZXJlbmNlcyB0byBjb250cm9scyBvclxuICogIGZvcm1zIHdpdGggZmFpbGluZyB2YWxpZGF0b3JzLCB3aGVyZTpcbiAqXG4gKiAgLSBrZXlzIGFyZSB2YWxpZGF0aW9uIHRva2VucyAoZXJyb3IgbmFtZXMpLFxuICogIC0gdmFsdWVzIGFyZSBhcnJheXMgb2YgY29udHJvbHMgb3IgZm9ybXMgdGhhdCBoYXZlIGEgZmFpbGluZyB2YWxpZGF0b3IgZm9yIGdpdmVuIGVycm9yIG5hbWUuXG4gKlxuICogIEJ1aWx0LWluIHZhbGlkYXRpb24gdG9rZW5zOlxuICpcbiAqICAtIGBlbWFpbGBcbiAqICAtIGBtYXhgXG4gKiAgLSBgbWF4bGVuZ3RoYFxuICogIC0gYG1pbmBcbiAqICAtIGBtaW5sZW5ndGhgXG4gKiAgLSBgbnVtYmVyYFxuICogIC0gYHBhdHRlcm5gXG4gKiAgLSBgcmVxdWlyZWRgXG4gKiAgLSBgdXJsYFxuICogIC0gYGRhdGVgXG4gKiAgLSBgZGF0ZXRpbWVsb2NhbGBcbiAqICAtIGB0aW1lYFxuICogIC0gYHdlZWtgXG4gKiAgLSBgbW9udGhgXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgRm9ybUNvbnRyb2xsZXJgIGtlZXBzIHRyYWNrIG9mIGFsbCBpdHMgY29udHJvbHMgYW5kIG5lc3RlZCBmb3JtcyBhcyB3ZWxsIGFzIHRoZSBzdGF0ZSBvZiB0aGVtLFxuICogc3VjaCBhcyBiZWluZyB2YWxpZC9pbnZhbGlkIG9yIGRpcnR5L3ByaXN0aW5lLlxuICpcbiAqIEVhY2gge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGZvcm19IGRpcmVjdGl2ZSBjcmVhdGVzIGFuIGluc3RhbmNlXG4gKiBvZiBgRm9ybUNvbnRyb2xsZXJgLlxuICpcbiAqL1xuLy9hc2tzIGZvciAkc2NvcGUgdG8gZm9vbCB0aGUgQkMgY29udHJvbGxlciBtb2R1bGVcbkZvcm1Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50JywgJyRhdHRycycsICckc2NvcGUnLCAnJGFuaW1hdGUnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiBGb3JtQ29udHJvbGxlcihlbGVtZW50LCBhdHRycywgJHNjb3BlLCAkYW5pbWF0ZSwgJGludGVycG9sYXRlKSB7XG4gIHZhciBmb3JtID0gdGhpcyxcbiAgICAgIGNvbnRyb2xzID0gW107XG5cbiAgLy8gaW5pdCBzdGF0ZVxuICBmb3JtLiRlcnJvciA9IHt9O1xuICBmb3JtLiQkc3VjY2VzcyA9IHt9O1xuICBmb3JtLiRwZW5kaW5nID0gdW5kZWZpbmVkO1xuICBmb3JtLiRuYW1lID0gJGludGVycG9sYXRlKGF0dHJzLm5hbWUgfHwgYXR0cnMubmdGb3JtIHx8ICcnKSgkc2NvcGUpO1xuICBmb3JtLiRkaXJ0eSA9IGZhbHNlO1xuICBmb3JtLiRwcmlzdGluZSA9IHRydWU7XG4gIGZvcm0uJHZhbGlkID0gdHJ1ZTtcbiAgZm9ybS4kaW52YWxpZCA9IGZhbHNlO1xuICBmb3JtLiRzdWJtaXR0ZWQgPSBmYWxzZTtcbiAgZm9ybS4kJHBhcmVudEZvcm0gPSBudWxsRm9ybUN0cmw7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJvbGxiYWNrIGFsbCBmb3JtIGNvbnRyb2xzIHBlbmRpbmcgdXBkYXRlcyB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiBUaGlzIG1ldGhvZCBpcyB0eXBpY2FsbHkgbmVlZGVkIGJ5IHRoZSByZXNldCBidXR0b24gb2ZcbiAgICogYSBmb3JtIHRoYXQgdXNlcyBgbmctbW9kZWwtb3B0aW9uc2AgdG8gcGVuZCB1cGRhdGVzLlxuICAgKi9cbiAgZm9ybS4kcm9sbGJhY2tWaWV3VmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJGNvbW1pdFZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ29tbWl0IGFsbCBmb3JtIGNvbnRyb2xzIHBlbmRpbmcgdXBkYXRlcyB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiBUaGlzIG1ldGhvZCBpcyByYXJlbHkgbmVlZGVkIGFzIGBOZ01vZGVsQ29udHJvbGxlcmBcbiAgICogdXN1YWxseSBoYW5kbGVzIGNhbGxpbmcgdGhpcyBpbiByZXNwb25zZSB0byBpbnB1dCBldmVudHMuXG4gICAqL1xuICBmb3JtLiRjb21taXRWaWV3VmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRhZGRDb250cm9sXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250cm9sIGNvbnRyb2wgb2JqZWN0LCBlaXRoZXIgYSB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlcn0gb3IgYW5cbiAgICoge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJ9XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlciBhIGNvbnRyb2wgd2l0aCB0aGUgZm9ybS4gSW5wdXQgZWxlbWVudHMgdXNpbmcgbmdNb2RlbENvbnRyb2xsZXIgZG8gdGhpcyBhdXRvbWF0aWNhbGx5XG4gICAqIHdoZW4gdGhleSBhcmUgbGlua2VkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNvbnRyb2wgd2lsbCBub3QgYmUgcmVmbGVjdGVkIG9uIHRoZSBuZXcgcGFyZW50IGZvcm0uIFRoaXNcbiAgICogaXMgbm90IGFuIGlzc3VlIHdpdGggbm9ybWFsIHVzZSwgYXMgZnJlc2hseSBjb21waWxlZCBhbmQgbGlua2VkIGNvbnRyb2xzIGFyZSBpbiBhIGAkcHJpc3RpbmVgXG4gICAqIHN0YXRlLlxuICAgKlxuICAgKiBIb3dldmVyLCBpZiB0aGUgbWV0aG9kIGlzIHVzZWQgcHJvZ3JhbW1hdGljYWxseSwgZm9yIGV4YW1wbGUgYnkgYWRkaW5nIGR5bmFtaWNhbGx5IGNyZWF0ZWQgY29udHJvbHMsXG4gICAqIG9yIGNvbnRyb2xzIHRoYXQgaGF2ZSBiZWVuIHByZXZpb3VzbHkgcmVtb3ZlZCB3aXRob3V0IGRlc3Ryb3lpbmcgdGhlaXIgY29ycmVzcG9uZGluZyBET00gZWxlbWVudCxcbiAgICogaXQncyB0aGUgZGV2ZWxvcGVycyByZXNwb25zaWJsaXR5IHRvIG1ha2Ugc3VyZSB0aGUgY3VycmVudCBzdGF0ZSBwcm9wYWdhdGVzIHRvIHRoZSBwYXJlbnQgZm9ybS5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGlmIGFuIGlucHV0IGNvbnRyb2wgaXMgYWRkZWQgdGhhdCBpcyBhbHJlYWR5IGAkZGlydHlgIGFuZCBoYXMgYCRlcnJvcmAgcHJvcGVydGllcyxcbiAgICogY2FsbGluZyBgJHNldERpcnR5KClgIGFuZCBgJHZhbGlkYXRlKClgIGFmdGVyd2FyZHMgd2lsbCBwcm9wYWdhdGUgdGhlIHN0YXRlIHRvIHRoZSBwYXJlbnQgZm9ybS5cbiAgICovXG4gIGZvcm0uJGFkZENvbnRyb2wgPSBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgLy8gQnJlYWtpbmcgY2hhbmdlIC0gYmVmb3JlLCBpbnB1dHMgd2hvc2UgbmFtZSB3YXMgXCJoYXNPd25Qcm9wZXJ0eVwiIHdlcmUgcXVpZXRseSBpZ25vcmVkXG4gICAgLy8gYW5kIG5vdCBhZGRlZCB0byB0aGUgc2NvcGUuICBOb3cgd2UgdGhyb3cgYW4gZXJyb3IuXG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkoY29udHJvbC4kbmFtZSwgJ2lucHV0Jyk7XG4gICAgY29udHJvbHMucHVzaChjb250cm9sKTtcblxuICAgIGlmIChjb250cm9sLiRuYW1lKSB7XG4gICAgICBmb3JtW2NvbnRyb2wuJG5hbWVdID0gY29udHJvbDtcbiAgICB9XG5cbiAgICBjb250cm9sLiQkcGFyZW50Rm9ybSA9IGZvcm07XG4gIH07XG5cbiAgLy8gUHJpdmF0ZSBBUEk6IHJlbmFtZSBhIGZvcm0gY29udHJvbFxuICBmb3JtLiQkcmVuYW1lQ29udHJvbCA9IGZ1bmN0aW9uKGNvbnRyb2wsIG5ld05hbWUpIHtcbiAgICB2YXIgb2xkTmFtZSA9IGNvbnRyb2wuJG5hbWU7XG5cbiAgICBpZiAoZm9ybVtvbGROYW1lXSA9PT0gY29udHJvbCkge1xuICAgICAgZGVsZXRlIGZvcm1bb2xkTmFtZV07XG4gICAgfVxuICAgIGZvcm1bbmV3TmFtZV0gPSBjb250cm9sO1xuICAgIGNvbnRyb2wuJG5hbWUgPSBuZXdOYW1lO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHJlbW92ZUNvbnRyb2xcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2wgY29udHJvbCBvYmplY3QsIGVpdGhlciBhIHtAbGluayBmb3JtLkZvcm1Db250cm9sbGVyfSBvciBhblxuICAgKiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlcn1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERlcmVnaXN0ZXIgYSBjb250cm9sIGZyb20gdGhlIGZvcm0uXG4gICAqXG4gICAqIElucHV0IGVsZW1lbnRzIHVzaW5nIG5nTW9kZWxDb250cm9sbGVyIGRvIHRoaXMgYXV0b21hdGljYWxseSB3aGVuIHRoZXkgYXJlIGRlc3Ryb3llZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IG9ubHkgdGhlIHJlbW92ZWQgY29udHJvbCdzIHZhbGlkYXRpb24gc3RhdGUgKGAkZXJyb3JzYGV0Yy4pIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZVxuICAgKiBmb3JtLiBgJGRpcnR5YCwgYCRzdWJtaXR0ZWRgIHN0YXRlcyB3aWxsIG5vdCBiZSBjaGFuZ2VkLCBiZWNhdXNlIHRoZSBleHBlY3RlZCBiZWhhdmlvciBjYW4gYmVcbiAgICogZGlmZmVyZW50IGZyb20gY2FzZSB0byBjYXNlLiBGb3IgZXhhbXBsZSwgcmVtb3ZpbmcgdGhlIG9ubHkgYCRkaXJ0eWAgY29udHJvbCBmcm9tIGEgZm9ybSBtYXkgb3JcbiAgICogbWF5IG5vdCBtZWFuIHRoYXQgdGhlIGZvcm0gaXMgc3RpbGwgYCRkaXJ0eWAuXG4gICAqL1xuICBmb3JtLiRyZW1vdmVDb250cm9sID0gZnVuY3Rpb24oY29udHJvbCkge1xuICAgIGlmIChjb250cm9sLiRuYW1lICYmIGZvcm1bY29udHJvbC4kbmFtZV0gPT09IGNvbnRyb2wpIHtcbiAgICAgIGRlbGV0ZSBmb3JtW2NvbnRyb2wuJG5hbWVdO1xuICAgIH1cbiAgICBmb3JFYWNoKGZvcm0uJHBlbmRpbmcsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICBmb3JtLiRzZXRWYWxpZGl0eShuYW1lLCBudWxsLCBjb250cm9sKTtcbiAgICB9KTtcbiAgICBmb3JFYWNoKGZvcm0uJGVycm9yLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgZm9ybS4kc2V0VmFsaWRpdHkobmFtZSwgbnVsbCwgY29udHJvbCk7XG4gICAgfSk7XG4gICAgZm9yRWFjaChmb3JtLiQkc3VjY2VzcywgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIGZvcm0uJHNldFZhbGlkaXR5KG5hbWUsIG51bGwsIGNvbnRyb2wpO1xuICAgIH0pO1xuXG4gICAgYXJyYXlSZW1vdmUoY29udHJvbHMsIGNvbnRyb2wpO1xuICAgIGNvbnRyb2wuJCRwYXJlbnRGb3JtID0gbnVsbEZvcm1DdHJsO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0VmFsaWRpdHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIHZhbGlkaXR5IG9mIGEgZm9ybSBjb250cm9sLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIHBhcmVudCBmb3Jtcy5cbiAgICovXG4gIGFkZFNldFZhbGlkaXR5TWV0aG9kKHtcbiAgICBjdHJsOiB0aGlzLFxuICAgICRlbGVtZW50OiBlbGVtZW50LFxuICAgIHNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSwgY29udHJvbGxlcikge1xuICAgICAgdmFyIGxpc3QgPSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgaWYgKCFsaXN0KSB7XG4gICAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBbY29udHJvbGxlcl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaW5kZXggPSBsaXN0LmluZGV4T2YoY29udHJvbGxlcik7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICBsaXN0LnB1c2goY29udHJvbGxlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHVuc2V0OiBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5LCBjb250cm9sbGVyKSB7XG4gICAgICB2YXIgbGlzdCA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICBpZiAoIWxpc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXJyYXlSZW1vdmUobGlzdCwgY29udHJvbGxlcik7XG4gICAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfSxcbiAgICAkYW5pbWF0ZTogJGFuaW1hdGVcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0RGlydHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gYSBkaXJ0eSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byBhZGQgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSB0byBhIGRpcnR5XG4gICAqIHN0YXRlIChuZy1kaXJ0eSBjbGFzcykuIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gcGFyZW50IGZvcm1zLlxuICAgKi9cbiAgZm9ybS4kc2V0RGlydHkgPSBmdW5jdGlvbigpIHtcbiAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgIGZvcm0uJGRpcnR5ID0gdHJ1ZTtcbiAgICBmb3JtLiRwcmlzdGluZSA9IGZhbHNlO1xuICAgIGZvcm0uJCRwYXJlbnRGb3JtLiRzZXREaXJ0eSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFByaXN0aW5lXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBmb3JtIHRvIGl0cyBwcmlzdGluZSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSB0byBpdHMgcHJpc3RpbmVcbiAgICogc3RhdGUgKG5nLXByaXN0aW5lIGNsYXNzKS4gVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBhbGwgdGhlIGNvbnRyb2xzIGNvbnRhaW5lZFxuICAgKiBpbiB0aGlzIGZvcm0uXG4gICAqXG4gICAqIFNldHRpbmcgYSBmb3JtIGJhY2sgdG8gYSBwcmlzdGluZSBzdGF0ZSBpcyBvZnRlbiB1c2VmdWwgd2hlbiB3ZSB3YW50IHRvICdyZXVzZScgYSBmb3JtIGFmdGVyXG4gICAqIHNhdmluZyBvciByZXNldHRpbmcgaXQuXG4gICAqL1xuICBmb3JtLiRzZXRQcmlzdGluZSA9IGZ1bmN0aW9uKCkge1xuICAgICRhbmltYXRlLnNldENsYXNzKGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTLCBESVJUWV9DTEFTUyArICcgJyArIFNVQk1JVFRFRF9DTEFTUyk7XG4gICAgZm9ybS4kZGlydHkgPSBmYWxzZTtcbiAgICBmb3JtLiRwcmlzdGluZSA9IHRydWU7XG4gICAgZm9ybS4kc3VibWl0dGVkID0gZmFsc2U7XG4gICAgZm9yRWFjaChjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgY29udHJvbC4kc2V0UHJpc3RpbmUoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRVbnRvdWNoZWRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHVudG91Y2hlZCBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlICduZy10b3VjaGVkJyBjbGFzcyBhbmQgc2V0IHRoZSBmb3JtIGNvbnRyb2xzIHRvIHRoZWlyXG4gICAqIHVudG91Y2hlZCBzdGF0ZSAobmctdW50b3VjaGVkIGNsYXNzKS5cbiAgICpcbiAgICogU2V0dGluZyBhIGZvcm0gY29udHJvbHMgYmFjayB0byB0aGVpciB1bnRvdWNoZWQgc3RhdGUgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gc2V0dGluZyB0aGUgZm9ybVxuICAgKiBiYWNrIHRvIGl0cyBwcmlzdGluZSBzdGF0ZS5cbiAgICovXG4gIGZvcm0uJHNldFVudG91Y2hlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGZvckVhY2goY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJHNldFVudG91Y2hlZCgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFN1Ym1pdHRlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgc3VibWl0dGVkIHN0YXRlLlxuICAgKi9cbiAgZm9ybS4kc2V0U3VibWl0dGVkID0gZnVuY3Rpb24oKSB7XG4gICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgU1VCTUlUVEVEX0NMQVNTKTtcbiAgICBmb3JtLiRzdWJtaXR0ZWQgPSB0cnVlO1xuICAgIGZvcm0uJCRwYXJlbnRGb3JtLiRzZXRTdWJtaXR0ZWQoKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Zvcm1cbiAqIEByZXN0cmljdCBFQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE5lc3RhYmxlIGFsaWFzIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBgZm9ybWB9IGRpcmVjdGl2ZS4gSFRNTFxuICogZG9lcyBub3QgYWxsb3cgbmVzdGluZyBvZiBmb3JtIGVsZW1lbnRzLiBJdCBpcyB1c2VmdWwgdG8gbmVzdCBmb3JtcywgZm9yIGV4YW1wbGUgaWYgdGhlIHZhbGlkaXR5IG9mIGFcbiAqIHN1Yi1ncm91cCBvZiBjb250cm9scyBuZWVkcyB0byBiZSBkZXRlcm1pbmVkLlxuICpcbiAqIE5vdGU6IHRoZSBwdXJwb3NlIG9mIGBuZ0Zvcm1gIGlzIHRvIGdyb3VwIGNvbnRyb2xzLFxuICogYnV0IG5vdCB0byBiZSBhIHJlcGxhY2VtZW50IGZvciB0aGUgYDxmb3JtPmAgdGFnIHdpdGggYWxsIG9mIGl0cyBjYXBhYmlsaXRpZXNcbiAqIChlLmcuIHBvc3RpbmcgdG8gdGhlIHNlcnZlciwgLi4uKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nRm9ybXxuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLlxuICpcbiAqL1xuXG4gLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBmb3JtXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGlyZWN0aXZlIHRoYXQgaW5zdGFudGlhdGVzXG4gKiB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlciBGb3JtQ29udHJvbGxlcn0uXG4gKlxuICogSWYgdGhlIGBuYW1lYCBhdHRyaWJ1dGUgaXMgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIGlzIHB1Ymxpc2hlZCBvbnRvIHRoZSBjdXJyZW50IHNjb3BlIHVuZGVyXG4gKiB0aGlzIG5hbWUuXG4gKlxuICogIyBBbGlhczoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9XG4gKlxuICogSW4gQW5ndWxhciwgZm9ybXMgY2FuIGJlIG5lc3RlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBvdXRlciBmb3JtIGlzIHZhbGlkIHdoZW4gYWxsIG9mIHRoZSBjaGlsZFxuICogZm9ybXMgYXJlIHZhbGlkIGFzIHdlbGwuIEhvd2V2ZXIsIGJyb3dzZXJzIGRvIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGA8Zm9ybT5gIGVsZW1lbnRzLCBzb1xuICogQW5ndWxhciBwcm92aWRlcyB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9IGRpcmVjdGl2ZSB3aGljaCBiZWhhdmVzIGlkZW50aWNhbGx5IHRvXG4gKiBgPGZvcm0+YCBidXQgY2FuIGJlIG5lc3RlZC4gIFRoaXMgYWxsb3dzIHlvdSB0byBoYXZlIG5lc3RlZCBmb3Jtcywgd2hpY2ggaXMgdmVyeSB1c2VmdWwgd2hlblxuICogdXNpbmcgQW5ndWxhciB2YWxpZGF0aW9uIGRpcmVjdGl2ZXMgaW4gZm9ybXMgdGhhdCBhcmUgZHluYW1pY2FsbHkgZ2VuZXJhdGVkIHVzaW5nIHRoZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSBkaXJlY3RpdmUuIFNpbmNlIHlvdSBjYW5ub3QgZHluYW1pY2FsbHkgZ2VuZXJhdGUgdGhlIGBuYW1lYFxuICogYXR0cmlidXRlIG9mIGlucHV0IGVsZW1lbnRzIHVzaW5nIGludGVycG9sYXRpb24sIHlvdSBoYXZlIHRvIHdyYXAgZWFjaCBzZXQgb2YgcmVwZWF0ZWQgaW5wdXRzIGluIGFuXG4gKiBgbmdGb3JtYCBkaXJlY3RpdmUgYW5kIG5lc3QgdGhlc2UgaW4gYW4gb3V0ZXIgYGZvcm1gIGVsZW1lbnQuXG4gKlxuICpcbiAqICMgQ1NTIGNsYXNzZXNcbiAqICAtIGBuZy12YWxpZGAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHZhbGlkLlxuICogIC0gYG5nLWludmFsaWRgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBpbnZhbGlkLlxuICogIC0gYG5nLXBlbmRpbmdgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBwZW5kaW5nLlxuICogIC0gYG5nLXByaXN0aW5lYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgcHJpc3RpbmUuXG4gKiAgLSBgbmctZGlydHlgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBkaXJ0eS5cbiAqICAtIGBuZy1zdWJtaXR0ZWRgIGlzIHNldCBpZiB0aGUgZm9ybSB3YXMgc3VibWl0dGVkLlxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0IG5nQW5pbWF0ZSBjYW4gZGV0ZWN0IGVhY2ggb2YgdGhlc2UgY2xhc3NlcyB3aGVuIGFkZGVkIGFuZCByZW1vdmVkLlxuICpcbiAqXG4gKiAjIFN1Ym1pdHRpbmcgYSBmb3JtIGFuZCBwcmV2ZW50aW5nIHRoZSBkZWZhdWx0IGFjdGlvblxuICpcbiAqIFNpbmNlIHRoZSByb2xlIG9mIGZvcm1zIGluIGNsaWVudC1zaWRlIEFuZ3VsYXIgYXBwbGljYXRpb25zIGlzIGRpZmZlcmVudCB0aGFuIGluIGNsYXNzaWNhbFxuICogcm91bmR0cmlwIGFwcHMsIGl0IGlzIGRlc2lyYWJsZSBmb3IgdGhlIGJyb3dzZXIgbm90IHRvIHRyYW5zbGF0ZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGludG8gYSBmdWxsXG4gKiBwYWdlIHJlbG9hZCB0aGF0IHNlbmRzIHRoZSBkYXRhIHRvIHRoZSBzZXJ2ZXIuIEluc3RlYWQgc29tZSBqYXZhc2NyaXB0IGxvZ2ljIHNob3VsZCBiZSB0cmlnZ2VyZWRcbiAqIHRvIGhhbmRsZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGluIGFuIGFwcGxpY2F0aW9uLXNwZWNpZmljIHdheS5cbiAqXG4gKiBGb3IgdGhpcyByZWFzb24sIEFuZ3VsYXIgcHJldmVudHMgdGhlIGRlZmF1bHQgYWN0aW9uIChmb3JtIHN1Ym1pc3Npb24gdG8gdGhlIHNlcnZlcikgdW5sZXNzIHRoZVxuICogYDxmb3JtPmAgZWxlbWVudCBoYXMgYW4gYGFjdGlvbmAgYXR0cmlidXRlIHNwZWNpZmllZC5cbiAqXG4gKiBZb3UgY2FuIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB0d28gd2F5cyB0byBzcGVjaWZ5IHdoYXQgamF2YXNjcmlwdCBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB3aGVuXG4gKiBhIGZvcm0gaXMgc3VibWl0dGVkOlxuICpcbiAqIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1N1Ym1pdCBuZ1N1Ym1pdH0gZGlyZWN0aXZlIG9uIHRoZSBmb3JtIGVsZW1lbnRcbiAqIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9IGRpcmVjdGl2ZSBvbiB0aGUgZmlyc3RcbiAgKiAgYnV0dG9uIG9yIGlucHV0IGZpZWxkIG9mIHR5cGUgc3VibWl0IChpbnB1dFt0eXBlPXN1Ym1pdF0pXG4gKlxuICogVG8gcHJldmVudCBkb3VibGUgZXhlY3V0aW9uIG9mIHRoZSBoYW5kbGVyLCB1c2Ugb25seSBvbmUgb2YgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdTdWJtaXQgbmdTdWJtaXR9XG4gKiBvciB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30gZGlyZWN0aXZlcy5cbiAqIFRoaXMgaXMgYmVjYXVzZSBvZiB0aGUgZm9sbG93aW5nIGZvcm0gc3VibWlzc2lvbiBydWxlcyBpbiB0aGUgSFRNTCBzcGVjaWZpY2F0aW9uOlxuICpcbiAqIC0gSWYgYSBmb3JtIGhhcyBvbmx5IG9uZSBpbnB1dCBmaWVsZCB0aGVuIGhpdHRpbmcgZW50ZXIgaW4gdGhpcyBmaWVsZCB0cmlnZ2VycyBmb3JtIHN1Ym1pdFxuICogKGBuZ1N1Ym1pdGApXG4gKiAtIGlmIGEgZm9ybSBoYXMgMisgaW5wdXQgZmllbGRzIGFuZCBubyBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuIGhpdHRpbmcgZW50ZXJcbiAqIGRvZXNuJ3QgdHJpZ2dlciBzdWJtaXRcbiAqIC0gaWYgYSBmb3JtIGhhcyBvbmUgb3IgbW9yZSBpbnB1dCBmaWVsZHMgYW5kIG9uZSBvciBtb3JlIGJ1dHRvbnMgb3IgaW5wdXRbdHlwZT1zdWJtaXRdIHRoZW5cbiAqIGhpdHRpbmcgZW50ZXIgaW4gYW55IG9mIHRoZSBpbnB1dCBmaWVsZHMgd2lsbCB0cmlnZ2VyIHRoZSBjbGljayBoYW5kbGVyIG9uIHRoZSAqZmlyc3QqIGJ1dHRvbiBvclxuICogaW5wdXRbdHlwZT1zdWJtaXRdIChgbmdDbGlja2ApICphbmQqIGEgc3VibWl0IGhhbmRsZXIgb24gdGhlIGVuY2xvc2luZyBmb3JtIChgbmdTdWJtaXRgKVxuICpcbiAqIEFueSBwZW5kaW5nIGBuZ01vZGVsT3B0aW9uc2AgY2hhbmdlcyB3aWxsIHRha2UgcGxhY2UgaW1tZWRpYXRlbHkgd2hlbiBhbiBlbmNsb3NpbmcgZm9ybSBpc1xuICogc3VibWl0dGVkLiBOb3RlIHRoYXQgYG5nQ2xpY2tgIGV2ZW50cyB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbW9kZWwgaXMgdXBkYXRlZC4gVXNlIGBuZ1N1Ym1pdGBcbiAqIHRvIGhhdmUgYWNjZXNzIHRvIHRoZSB1cGRhdGVkIG1vZGVsLlxuICpcbiAqICMjIEFuaW1hdGlvbiBIb29rc1xuICpcbiAqIEFuaW1hdGlvbnMgaW4gbmdGb3JtIGFyZSB0cmlnZ2VyZWQgd2hlbiBhbnkgb2YgdGhlIGFzc29jaWF0ZWQgQ1NTIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkLlxuICogVGhlc2UgY2xhc3NlcyBhcmU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCwgYC5uZy1pbnZhbGlkYCBhbmQgYC5uZy12YWxpZGAgYXMgd2VsbCBhcyBhbnlcbiAqIG90aGVyIHZhbGlkYXRpb25zIHRoYXQgYXJlIHBlcmZvcm1lZCB3aXRoaW4gdGhlIGZvcm0uIEFuaW1hdGlvbnMgaW4gbmdGb3JtIGFyZSBzaW1pbGFyIHRvIGhvd1xuICogdGhleSB3b3JrIGluIG5nQ2xhc3MgYW5kIGFuaW1hdGlvbnMgY2FuIGJlIGhvb2tlZCBpbnRvIHVzaW5nIENTUyB0cmFuc2l0aW9ucywga2V5ZnJhbWVzIGFzIHdlbGxcbiAqIGFzIEpTIGFuaW1hdGlvbnMuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGEgc2ltcGxlIHdheSB0byB1dGlsaXplIENTUyB0cmFuc2l0aW9ucyB0byBzdHlsZSBhIGZvcm0gZWxlbWVudFxuICogdGhhdCBoYXMgYmVlbiByZW5kZXJlZCBhcyBpbnZhbGlkIGFmdGVyIGl0IGhhcyBiZWVuIHZhbGlkYXRlZDpcbiAqXG4gKiA8cHJlPlxuICogLy9iZSBzdXJlIHRvIGluY2x1ZGUgbmdBbmltYXRlIGFzIGEgbW9kdWxlIHRvIGhvb2sgaW50byBtb3JlXG4gKiAvL2FkdmFuY2VkIGFuaW1hdGlvbnNcbiAqIC5teS1mb3JtIHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICogfVxuICogLm15LWZvcm0ubmctaW52YWxpZCB7XG4gKiAgIGJhY2tncm91bmQ6IHJlZDtcbiAqICAgY29sb3I6d2hpdGU7XG4gKiB9XG4gKiA8L3ByZT5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCIgbW9kdWxlPVwiZm9ybUV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdmb3JtRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRm9ybUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS51c2VyVHlwZSA9ICdndWVzdCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8c3R5bGU+XG4gICAgICAgIC5teS1mb3JtIHtcbiAgICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgfVxuICAgICAgICAubXktZm9ybS5uZy1pbnZhbGlkIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiByZWQ7XG4gICAgICAgIH1cbiAgICAgICA8L3N0eWxlPlxuICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRm9ybUNvbnRyb2xsZXJcIiBjbGFzcz1cIm15LWZvcm1cIj5cbiAgICAgICAgIHVzZXJUeXBlOiA8aW5wdXQgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ1c2VyVHlwZVwiIHJlcXVpcmVkPlxuICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+UmVxdWlyZWQhPC9zcGFuPjxicj5cbiAgICAgICAgIDxjb2RlPnVzZXJUeXBlID0ge3t1c2VyVHlwZX19PC9jb2RlPjxicj5cbiAgICAgICAgIDxjb2RlPm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnI+XG4gICAgICAgICA8Y29kZT5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L2NvZGU+PGJyPlxuICAgICAgICAgPGNvZGU+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC9jb2RlPjxicj5cbiAgICAgICAgIDxjb2RlPm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC9jb2RlPjxicj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdXNlclR5cGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXJUeXBlJykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3Vlc3QnKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHVzZXJUeXBlID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyVHlwZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIHVzZXJJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXJUeXBlJykpO1xuXG4gICAgICAgICAgdXNlcklucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlcklucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3VzZXJUeXBlID0nKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgTmFtZSBvZiB0aGUgZm9ybS4gSWYgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIHdpbGwgYmUgcHVibGlzaGVkIGludG9cbiAqICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkIHNjb3BlLCB1bmRlciB0aGlzIG5hbWUuXG4gKi9cbnZhciBmb3JtRGlyZWN0aXZlRmFjdG9yeSA9IGZ1bmN0aW9uKGlzTmdGb3JtKSB7XG4gIHJldHVybiBbJyR0aW1lb3V0JywgJyRwYXJzZScsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkcGFyc2UpIHtcbiAgICB2YXIgZm9ybURpcmVjdGl2ZSA9IHtcbiAgICAgIG5hbWU6ICdmb3JtJyxcbiAgICAgIHJlc3RyaWN0OiBpc05nRm9ybSA/ICdFQUMnIDogJ0UnLFxuICAgICAgcmVxdWlyZTogWydmb3JtJywgJ15eP2Zvcm0nXSwgLy9maXJzdCBpcyB0aGUgZm9ybSdzIG93biBjdHJsLCBzZWNvbmQgaXMgYW4gb3B0aW9uYWwgcGFyZW50IGZvcm1cbiAgICAgIGNvbnRyb2xsZXI6IEZvcm1Db250cm9sbGVyLFxuICAgICAgY29tcGlsZTogZnVuY3Rpb24gbmdGb3JtQ29tcGlsZShmb3JtRWxlbWVudCwgYXR0cikge1xuICAgICAgICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sXG4gICAgICAgIGZvcm1FbGVtZW50LmFkZENsYXNzKFBSSVNUSU5FX0NMQVNTKS5hZGRDbGFzcyhWQUxJRF9DTEFTUyk7XG5cbiAgICAgICAgdmFyIG5hbWVBdHRyID0gYXR0ci5uYW1lID8gJ25hbWUnIDogKGlzTmdGb3JtICYmIGF0dHIubmdGb3JtID8gJ25nRm9ybScgOiBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwcmU6IGZ1bmN0aW9uIG5nRm9ybVByZUxpbmsoc2NvcGUsIGZvcm1FbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBjdHJsc1swXTtcblxuICAgICAgICAgICAgLy8gaWYgYGFjdGlvbmAgYXR0ciBpcyBub3QgcHJlc2VudCBvbiB0aGUgZm9ybSwgcHJldmVudCB0aGUgZGVmYXVsdCBhY3Rpb24gKHN1Ym1pc3Npb24pXG4gICAgICAgICAgICBpZiAoISgnYWN0aW9uJyBpbiBhdHRyKSkge1xuICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCB1c2UganEgZXZlbnRzIGJlY2F1c2UgaWYgYSBmb3JtIGlzIGRlc3Ryb3llZCBkdXJpbmcgc3VibWlzc2lvbiB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgICAvLyBhY3Rpb24gaXMgbm90IHByZXZlbnRlZC4gc2VlICMxMjM4XG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIC8vIElFIDkgaXMgbm90IGFmZmVjdGVkIGJlY2F1c2UgaXQgZG9lc24ndCBmaXJlIGEgc3VibWl0IGV2ZW50IGFuZCB0cnkgdG8gZG8gYSBmdWxsXG4gICAgICAgICAgICAgIC8vIHBhZ2UgcmVsb2FkIGlmIHRoZSBmb3JtIHdhcyBkZXN0cm95ZWQgYnkgc3VibWlzc2lvbiBvZiB0aGUgZm9ybSB2aWEgYSBjbGljayBoYW5kbGVyXG4gICAgICAgICAgICAgIC8vIG9uIGEgYnV0dG9uIGluIHRoZSBmb3JtLiBMb29rcyBsaWtlIGFuIElFOSBzcGVjaWZpYyBidWcuXG4gICAgICAgICAgICAgIHZhciBoYW5kbGVGb3JtU3VibWlzc2lvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICBjb250cm9sbGVyLiRzZXRTdWJtaXR0ZWQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lckZuKGZvcm1FbGVtZW50WzBdLCAnc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pO1xuXG4gICAgICAgICAgICAgIC8vIHVucmVnaXN0ZXIgdGhlIHByZXZlbnREZWZhdWx0IGxpc3RlbmVyIHNvIHRoYXQgd2UgZG9uJ3Qgbm90IGxlYWsgbWVtb3J5IGJ1dCBpbiBhXG4gICAgICAgICAgICAgIC8vIHdheSB0aGF0IHdpbGwgYWNoaWV2ZSB0aGUgcHJldmVudGlvbiBvZiB0aGUgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgICAgICAgIGZvcm1FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGZvcm1FbGVtZW50WzBdLCAnc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pO1xuICAgICAgICAgICAgICAgIH0sIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJlbnRGb3JtQ3RybCA9IGN0cmxzWzFdIHx8IGNvbnRyb2xsZXIuJCRwYXJlbnRGb3JtO1xuICAgICAgICAgICAgcGFyZW50Rm9ybUN0cmwuJGFkZENvbnRyb2woY29udHJvbGxlcik7XG5cbiAgICAgICAgICAgIHZhciBzZXR0ZXIgPSBuYW1lQXR0ciA/IGdldFNldHRlcihjb250cm9sbGVyLiRuYW1lKSA6IG5vb3A7XG5cbiAgICAgICAgICAgIGlmIChuYW1lQXR0cikge1xuICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICBhdHRyLiRvYnNlcnZlKG5hbWVBdHRyLCBmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChjb250cm9sbGVyLiRuYW1lID09PSBuZXdWYWx1ZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNldHRlcihzY29wZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLiQkcGFyZW50Rm9ybS4kJHJlbmFtZUNvbnRyb2woY29udHJvbGxlciwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIHNldHRlciA9IGdldFNldHRlcihjb250cm9sbGVyLiRuYW1lKTtcbiAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcm1FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLiQkcGFyZW50Rm9ybS4kcmVtb3ZlQ29udHJvbChjb250cm9sbGVyKTtcbiAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICBleHRlbmQoY29udHJvbGxlciwgbnVsbEZvcm1DdHJsKTsgLy9zdG9wIHByb3BhZ2F0aW5nIGNoaWxkIGRlc3RydWN0aW9uIGhhbmRsZXJzIHVwd2FyZHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1EaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBnZXRTZXR0ZXIoZXhwcmVzc2lvbikge1xuICAgICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7XG4gICAgICAgIC8vY3JlYXRlIGFuIGFzc2lnbmFibGUgZXhwcmVzc2lvbiwgc28gZm9ybXMgd2l0aCBhbiBlbXB0eSBuYW1lIGNhbiBiZSByZW5hbWVkIGxhdGVyXG4gICAgICAgIHJldHVybiAkcGFyc2UoJ3RoaXNbXCJcIl0nKS5hc3NpZ247XG4gICAgICB9XG4gICAgICByZXR1cm4gJHBhcnNlKGV4cHJlc3Npb24pLmFzc2lnbiB8fCBub29wO1xuICAgIH1cbiAgfV07XG59O1xuXG52YXIgZm9ybURpcmVjdGl2ZSA9IGZvcm1EaXJlY3RpdmVGYWN0b3J5KCk7XG52YXIgbmdGb3JtRGlyZWN0aXZlID0gZm9ybURpcmVjdGl2ZUZhY3RvcnkodHJ1ZSk7XG5cbi8qIGdsb2JhbCBWQUxJRF9DTEFTUzogZmFsc2UsXG4gIElOVkFMSURfQ0xBU1M6IGZhbHNlLFxuICBQUklTVElORV9DTEFTUzogZmFsc2UsXG4gIERJUlRZX0NMQVNTOiBmYWxzZSxcbiAgVU5UT1VDSEVEX0NMQVNTOiBmYWxzZSxcbiAgVE9VQ0hFRF9DTEFTUzogZmFsc2UsXG4gIG5nTW9kZWxNaW5FcnI6IGZhbHNlLFxuKi9cblxuLy8gUmVnZXggY29kZSBpcyBvYnRhaW5lZCBmcm9tIFNPOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMTQzMDcwL2phdmFzY3JpcHQtcmVnZXgtaXNvLWRhdGV0aW1lI2Fuc3dlci0zMTQzMjMxXG52YXIgSVNPX0RBVEVfUkVHRVhQID0gL1xcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkOlswLTVdXFxkXFwuXFxkKyhbKy1dWzAtMl1cXGQ6WzAtNV1cXGR8WikvO1xuLy8gU2VlIHZhbGlkIFVSTHMgaW4gUkZDMzk4NyAoaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NylcbnZhciBVUkxfUkVHRVhQID0gL15bQS1aYS16XVtBLVphLXpcXGQuKy1dKjpcXC8qKD86XFx3Kyg/OjpcXHcrKT9AKT9bXlxccy9dKyg/OjpcXGQrKT8oPzpcXC9bXFx3IyE6Lj8rPSYlQFxcLS9dKik/JC87XG52YXIgRU1BSUxfUkVHRVhQID0gL15bYS16MC05ISMkJSYnKitcXC89P15fYHt8fX4uLV0rQFthLXowLTldKFthLXowLTktXSpbYS16MC05XSk/KFxcLlthLXowLTldKFthLXowLTktXSpbYS16MC05XSk/KSokL2k7XG52YXIgTlVNQkVSX1JFR0VYUCA9IC9eXFxzKihcXC18XFwrKT8oXFxkK3woXFxkKihcXC5cXGQqKSkpKFtlRV1bKy1dP1xcZCspP1xccyokLztcbnZhciBEQVRFX1JFR0VYUCA9IC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSkkLztcbnZhciBEQVRFVElNRUxPQ0FMX1JFR0VYUCA9IC9eKFxcZHs0fSktKFxcZFxcZCktKFxcZFxcZClUKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoXFwuXFxkezEsM30pPyk/JC87XG52YXIgV0VFS19SRUdFWFAgPSAvXihcXGR7NH0pLVcoXFxkXFxkKSQvO1xudmFyIE1PTlRIX1JFR0VYUCA9IC9eKFxcZHs0fSktKFxcZFxcZCkkLztcbnZhciBUSU1FX1JFR0VYUCA9IC9eKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoXFwuXFxkezEsM30pPyk/JC87XG5cbnZhciBpbnB1dFR5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0ZXh0XVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3RhbmRhcmQgSFRNTCB0ZXh0IGlucHV0IHdpdGggYW5ndWxhciBkYXRhIGJpbmRpbmcsIGluaGVyaXRlZCBieSBtb3N0IG9mIHRoZSBgaW5wdXRgIGVsZW1lbnRzLlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB2YWx1ZSBkb2VzIG5vdCBtYXRjaFxuICAgKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAqICAgIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbbmdUcmltPXRydWVdIElmIHNldCB0byBmYWxzZSBBbmd1bGFyIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgdHJpbSB0aGUgaW5wdXQuXG4gICAqICAgIFRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQgZm9yIGlucHV0W3R5cGU9cGFzc3dvcmRdIGNvbnRyb2xzLCB3aGljaCB3aWxsIG5ldmVyIHRyaW0gdGhlXG4gICAqICAgIGlucHV0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cInRleHQtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidGV4dElucHV0RXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3RleHRJbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgICAgIHRleHQ6ICdndWVzdCcsXG4gICAgICAgICAgICAgICAgIHdvcmQ6IC9eXFxzKlxcdypcXHMqJC9cbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5TaW5nbGUgd29yZDpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIG5nLXBhdHRlcm49XCJleGFtcGxlLndvcmRcIiByZXF1aXJlZCBuZy10cmltPVwiZmFsc2VcIj5cbiAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucGF0dGVyblwiPlxuICAgICAgICAgICAgICAgU2luZ2xlIHdvcmQgb25seSE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8dHQ+dGV4dCA9IHt7ZXhhbXBsZS50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB0ZXh0ID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudGV4dCcpKTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2d1ZXN0Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0VxdWFsKCd0ZXh0ID0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBtdWx0aSB3b3JkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2hlbGxvIHdvcmxkJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3RleHQnOiB0ZXh0SW5wdXRUeXBlLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGlucHV0XG4gICAgICogQG5hbWUgaW5wdXRbZGF0ZV1cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIElucHV0IHdpdGggZGF0ZSB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICAgKiB0aGUgSFRNTDUgZGF0ZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAgKiBkYXRlIGZvcm1hdCAoeXl5eS1NTS1kZCksIGZvciBleGFtcGxlOiBgMjAwOS0wMS0wNmAuIFNpbmNlIG1hbnlcbiAgICAgKiBtb2Rlcm4gYnJvd3NlcnMgZG8gbm90IHlldCBzdXBwb3J0IHRoaXMgaW5wdXQgdHlwZSwgaXQgaXMgaW1wb3J0YW50IHRvIHByb3ZpZGUgY3VlcyB0byB1c2VycyBvbiB0aGVcbiAgICAgKiBleHBlY3RlZCBpbnB1dCBmb3JtYXQgdmlhIGEgcGxhY2Vob2xkZXIgb3IgbGFiZWwuXG4gICAgICpcbiAgICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuIFRoaXMgbXVzdCBiZSBhXG4gICAgICogICB2YWxpZCBJU08gZGF0ZSBzdHJpbmcgKHl5eXktTU0tZGQpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXMgYXR0cmlidXRlXG4gICAgICogICAoZS5nLiBgbWluPVwie3ttaW5EYXRlIHwgZGF0ZToneXl5eS1NTS1kZCd9fVwiYCkuIE5vdGUgdGhhdCBgbWluYCB3aWxsIGFsc28gYWRkIG5hdGl2ZSBIVE1MNVxuICAgICAqICAgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4gVGhpcyBtdXN0IGJlXG4gICAgICogICBhIHZhbGlkIElTTyBkYXRlIHN0cmluZyAoeXl5eS1NTS1kZCkuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpcyBhdHRyaWJ1dGVcbiAgICAgKiAgIChlLmcuIGBtYXg9XCJ7e21heERhdGUgfCBkYXRlOid5eXl5LU1NLWRkJ319XCJgKS4gTm90ZSB0aGF0IGBtYXhgIHdpbGwgYWxzbyBhZGQgbmF0aXZlIEhUTUw1XG4gICAgICogICBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIGRhdGUgc3RyaW5nXG4gICAgICogICB0aGUgYG5nTWluYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1pbmAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyBkYXRlIHN0cmluZ1xuICAgICAqICAgdGhlIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cImRhdGUtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiZGF0ZUlucHV0RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2RhdGVJbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEzLCA5LCAyMilcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgICAgPGxhYmVsIGZvcj1cImV4YW1wbGVJbnB1dFwiPlBpY2sgYSBkYXRlIGluIDIwMTM6PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImRhdGVcIiBpZD1cImV4YW1wbGVJbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTS1kZFwiIG1pbj1cIjIwMTMtMDEtMDFcIiBtYXg9XCIyMDEzLTEyLTMxXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLmRhdGVcIj5cbiAgICAgICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFwifX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRcIicpKTtcbiAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLlxuICAgICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICAgIHZhciBzY3IgPSBcInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7IFwiICtcbiAgICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcyMDEzLTEwLTIyJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldElucHV0KCcyMDE1LTAxLTAxJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAgICovXG4gICdkYXRlJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnZGF0ZScsIERBVEVfUkVHRVhQLFxuICAgICAgICAgY3JlYXRlRGF0ZVBhcnNlcihEQVRFX1JFR0VYUCwgWyd5eXl5JywgJ01NJywgJ2RkJ10pLFxuICAgICAgICAgJ3l5eXktTU0tZGQnKSxcblxuICAgLyoqXG4gICAgKiBAbmdkb2MgaW5wdXRcbiAgICAqIEBuYW1lIGlucHV0W2RhdGV0aW1lLWxvY2FsXVxuICAgICpcbiAgICAqIEBkZXNjcmlwdGlvblxuICAgICogSW5wdXQgd2l0aCBkYXRldGltZSB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICAqIHRoZSBIVE1MNSBkYXRlIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAqIGxvY2FsIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbTpzcyksIGZvciBleGFtcGxlOiBgMjAxMC0xMi0yOFQxNDo1NzowMGAuXG4gICAgKlxuICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgKlxuICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgICpcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvblxuICAgICogICBpbnNpZGUgdGhpcyBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluRGF0ZXRpbWVMb2NhbCB8IGRhdGU6J3l5eXktTU0tZGRUSEg6bW06c3MnfX1cImApLlxuICAgICogICBOb3RlIHRoYXQgYG1pbmAgd2lsbCBhbHNvIGFkZCBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gZGF0ZXRpbWUgZm9ybWF0ICh5eXl5LU1NLWRkVEhIOm1tOnNzKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uXG4gICAgKiAgIGluc2lkZSB0aGlzIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhEYXRldGltZUxvY2FsIHwgZGF0ZToneXl5eS1NTS1kZFRISDptbTpzcyd9fVwiYCkuXG4gICAgKiAgIE5vdGUgdGhhdCBgbWF4YCB3aWxsIGFsc28gYWRkIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSB0byB0aGUgRGF0ZSAvIElTTyBkYXRldGltZSBzdHJpbmdcbiAgICAqICAgdGhlIGBuZ01pbmAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtaW5gIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IHRvIHRoZSBEYXRlIC8gSVNPIGRhdGV0aW1lIHN0cmluZ1xuICAgICogICB0aGUgYG5nTWF4YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1heGAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAgKlxuICAgICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwiZGF0ZXRpbWVsb2NhbC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJkYXRlRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZGF0ZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEwLCAxMSwgMjgsIDE0LCA1NylcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlSW5wdXRcIj5QaWNrIGEgZGF0ZSBiZXR3ZWVuIGluIDIwMTM6PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIGlkPVwiZXhhbXBsZUlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTS1kZFRISDptbTpzc1wiIG1pbj1cIjIwMDEtMDEtMDFUMDA6MDA6MDBcIiBtYXg9XCIyMDEzLTEyLTMxVDAwOjAwOjAwXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5kYXRldGltZWxvY2FsXCI+XG4gICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkVEhIOm1tOnNzXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgPC9mb3JtPlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRUSEg6bW06c3NcIicpKTtcbiAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudmFsdWUnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMC0xMi0yOFQxNDo1NzowMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMVQyMzo1OTowMCcpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICAqL1xuICAnZGF0ZXRpbWUtbG9jYWwnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdkYXRldGltZWxvY2FsJywgREFURVRJTUVMT0NBTF9SRUdFWFAsXG4gICAgICBjcmVhdGVEYXRlUGFyc2VyKERBVEVUSU1FTE9DQUxfUkVHRVhQLCBbJ3l5eXknLCAnTU0nLCAnZGQnLCAnSEgnLCAnbW0nLCAnc3MnLCAnc3NzJ10pLFxuICAgICAgJ3l5eXktTU0tZGRUSEg6bW06c3Muc3NzJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0aW1lXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSW5wdXQgd2l0aCB0aW1lIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgKiB0aGUgSFRNTDUgZGF0ZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAqIGxvY2FsIHRpbWUgZm9ybWF0IChISDptbTpzcyksIGZvciBleGFtcGxlOiBgMTQ6NTc6MDBgLiBNb2RlbCBtdXN0IGJlIGEgRGF0ZSBvYmplY3QuIFRoaXMgYmluZGluZyB3aWxsIGFsd2F5cyBvdXRwdXQgYVxuICAgKiBEYXRlIG9iamVjdCB0byB0aGUgbW9kZWwgb2YgSmFudWFyeSAxLCAxOTcwLCBvciBsb2NhbCBkYXRlIGBuZXcgRGF0ZSgxOTcwLCAwLCAxLCBISCwgbW0sIHNzKWAuXG4gICAqXG4gICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAqXG4gICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB0aW1lIGZvcm1hdCAoSEg6bW06c3MpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluVGltZSB8IGRhdGU6J0hIOm1tOnNzJ319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGRcbiAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIHRpbWUgZm9ybWF0IChISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhUaW1lIHwgZGF0ZTonSEg6bW06c3MnfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB0aW1lIHN0cmluZyB0aGVcbiAgICogICBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB0aW1lIHN0cmluZyB0aGVcbiAgICogICBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJ0aW1lLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInRpbWVFeGFtcGxlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3RpbWVFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMTk3MCwgMCwgMSwgMTQsIDU3LCAwKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgPC9zY3JpcHQ+XG4gICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgPGxhYmVsIGZvcj1cImV4YW1wbGVJbnB1dFwiPlBpY2sgYSBiZXR3ZWVuIDhhbSBhbmQgNXBtOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGltZVwiIGlkPVwiZXhhbXBsZUlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiSEg6bW06c3NcIiBtaW49XCIwODowMDowMFwiIG1heD1cIjE3OjAwOjAwXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci50aW1lXCI+XG4gICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJISDptbTpzc1wifX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgPC9mb3JtPlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJISDptbTpzc1wiJykpO1xuICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS52YWx1ZScpKTtcblxuICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLlxuICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgIHZhciBzY3IgPSBcInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7IFwiICtcbiAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpO1xuICAgICAgfVxuXG4gICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcxNDo1NzowMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjM6NTk6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3RpbWUnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCd0aW1lJywgVElNRV9SRUdFWFAsXG4gICAgICBjcmVhdGVEYXRlUGFyc2VyKFRJTUVfUkVHRVhQLCBbJ0hIJywgJ21tJywgJ3NzJywgJ3NzcyddKSxcbiAgICAgJ0hIOm1tOnNzLnNzcycpLFxuXG4gICAvKipcbiAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICogQG5hbWUgaW5wdXRbd2Vla11cbiAgICAqXG4gICAgKiBAZGVzY3JpcHRpb25cbiAgICAqIElucHV0IHdpdGggd2Vlay1vZi10aGUteWVhciB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbiB0byBEYXRlLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgICogdGhlIEhUTUw1IHdlZWsgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgICogd2VlayBmb3JtYXQgKHl5eXktVyMjKSwgZm9yIGV4YW1wbGU6IGAyMDEzLVcwMmAuXG4gICAgKlxuICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgKlxuICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgICpcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIHdlZWsgZm9ybWF0ICh5eXl5LVcjIykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluV2VlayB8IGRhdGU6J3l5eXktV3d3J319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGRcbiAgICAqICAgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cbiAgICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIHdlZWsgZm9ybWF0ICh5eXl5LVcjIykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1heD1cInt7bWF4V2VlayB8IGRhdGU6J3l5eXktV3d3J319XCJgKS4gTm90ZSB0aGF0IGBtYXhgIHdpbGwgYWxzbyBhZGRcbiAgICAqICAgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgICogICB0aGUgYG5nTWluYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1pbmAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIHdlZWsgc3RyaW5nXG4gICAgKiAgIHRoZSBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAqXG4gICAgKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJ3ZWVrLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIndlZWtFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQ+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnd2Vla0V4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEzLCAwLCAzKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgIDwvc2NyaXB0PlxuICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICA8bGFiZWw+UGljayBhIGRhdGUgYmV0d2VlbiBpbiAyMDEzOlxuICAgICAgICAgIDxpbnB1dCBpZD1cImV4YW1wbGVJbnB1dFwiIHR5cGU9XCJ3ZWVrXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJZWVlZLVcjI1wiIG1pbj1cIjIwMTItVzMyXCJcbiAgICAgICAgICAgICAgICAgbWF4PVwiMjAxMy1XNTJcIiByZXF1aXJlZCAvPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLndlZWtcIj5cbiAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktV3d3XCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgPC9mb3JtPlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktV3d3XCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtVzAxJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcyMDE1LVcwMScpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICAqL1xuICAnd2Vlayc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ3dlZWsnLCBXRUVLX1JFR0VYUCwgd2Vla1BhcnNlciwgJ3l5eXktV3d3JyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFttb250aF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIElucHV0IHdpdGggbW9udGggdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAqIHRoZSBIVE1MNSBtb250aCBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAqIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSksIGZvciBleGFtcGxlOiBgMjAwOS0wMWAuXG4gICAqXG4gICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAqIElmIHRoZSBtb2RlbCBpcyBub3Qgc2V0IHRvIHRoZSBmaXJzdCBvZiB0aGUgbW9udGgsIHRoZSBuZXh0IHZpZXcgdG8gbW9kZWwgdXBkYXRlIHdpbGwgc2V0IGl0XG4gICAqIHRvIHRoZSBmaXJzdCBvZiB0aGUgbW9udGguXG4gICAqXG4gICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyBtb250aCBmb3JtYXQgKHl5eXktTU0pLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluTW9udGggfCBkYXRlOid5eXl5LU1NJ319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGRcbiAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSkuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhNb250aCB8IGRhdGU6J3l5eXktTU0nfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgKiAgIHRoZSBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgKiAgIHRoZSBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm1vbnRoLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIm1vbnRoRXhhbXBsZVwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdtb250aEV4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEzLCA5LCAxKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgPC9zY3JpcHQ+XG4gICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIG1vbnRoIGluIDIwMTM6PC9sYWJlbD5cbiAgICAgICA8aW5wdXQgaWQ9XCJleGFtcGxlSW5wdXRcIiB0eXBlPVwibW9udGhcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTVwiIG1pbj1cIjIwMTMtMDFcIiBtYXg9XCIyMDEzLTEyXCIgcmVxdWlyZWQgLz5cbiAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IubW9udGhcIj5cbiAgICAgICAgICAgIE5vdCBhIHZhbGlkIG1vbnRoITwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU1cIn19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgPC9mb3JtPlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtMTAnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ21vbnRoJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnbW9udGgnLCBNT05USF9SRUdFWFAsXG4gICAgIGNyZWF0ZURhdGVQYXJzZXIoTU9OVEhfUkVHRVhQLCBbJ3l5eXknLCAnTU0nXSksXG4gICAgICd5eXl5LU1NJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFtudW1iZXJdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggbnVtYmVyIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBTZXRzIHRoZSBgbnVtYmVyYCB2YWxpZGF0aW9uXG4gICAqIGVycm9yIGlmIG5vdCBhIHZhbGlkIG51bWJlci5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIG9mIHR5cGUgYG51bWJlcmAgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICogQmUgYXdhcmUgdGhhdCBhIHN0cmluZyBjb250YWluaW5nIGEgbnVtYmVyIGlzIG5vdCBlbm91Z2guIFNlZSB0aGUge0BsaW5rIG5nTW9kZWw6bnVtZm10fVxuICAgKiBlcnJvciBkb2NzIGZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBhbiBleGFtcGxlIG9mIGhvdyB0byBjb252ZXJ0IHlvdXIgbW9kZWwgaWYgbmVjZXNzYXJ5LlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogIyMgSXNzdWVzIHdpdGggSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uXG4gICAqXG4gICAqIEluIGJyb3dzZXJzIHRoYXQgZm9sbG93IHRoZVxuICAgKiBbSFRNTDUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNudW1iZXItc3RhdGUtJTI4dHlwZT1udW1iZXIlMjkpLFxuICAgKiBgaW5wdXRbbnVtYmVyXWAgZG9lcyBub3Qgd29yayBhcyBleHBlY3RlZCB3aXRoIHtAbGluayBuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnMuYWxsb3dJbnZhbGlkYH0uXG4gICAqIElmIGEgbm9uLW51bWJlciBpcyBlbnRlcmVkIGluIHRoZSBpbnB1dCwgdGhlIGJyb3dzZXIgd2lsbCByZXBvcnQgdGhlIHZhbHVlIGFzIGFuIGVtcHR5IHN0cmluZyxcbiAgICogd2hpY2ggbWVhbnMgdGhlIHZpZXcgLyBtb2RlbCB2YWx1ZXMgaW4gYG5nTW9kZWxgIGFuZCBzdWJzZXF1ZW50bHkgdGhlIHNjb3BlIHZhbHVlXG4gICAqIHdpbGwgYWxzbyBiZSBhbiBlbXB0eSBzdHJpbmcuXG4gICAqXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB2YWx1ZSBkb2VzIG5vdCBtYXRjaFxuICAgKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAqICAgIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cIm51bWJlci1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJudW1iZXJFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbnVtYmVyRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgICAgdmFsdWU6IDEyXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8bGFiZWw+TnVtYmVyOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgbWluPVwiMFwiIG1heD1cIjk5XCIgcmVxdWlyZWQ+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IubnVtYmVyXCI+XG4gICAgICAgICAgICAgICBOb3QgdmFsaWQgbnVtYmVyITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZX19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudmFsdWUnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMTInKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJzEyMycpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnbnVtYmVyJzogbnVtYmVySW5wdXRUeXBlLFxuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt1cmxdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggVVJMIHZhbGlkYXRpb24uIFNldHMgdGhlIGB1cmxgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBjb250ZW50IGlzIG5vdCBhXG4gICAqIHZhbGlkIFVSTC5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIGBpbnB1dFt1cmxdYCB1c2VzIGEgcmVnZXggdG8gdmFsaWRhdGUgdXJscyB0aGF0IGlzIGRlcml2ZWQgZnJvbSB0aGUgcmVnZXhcbiAgICogdXNlZCBpbiBDaHJvbWl1bS4gSWYgeW91IG5lZWQgc3RyaWN0ZXIgdmFsaWRhdGlvbiwgeW91IGNhbiB1c2UgYG5nLXBhdHRlcm5gIG9yIG1vZGlmeVxuICAgKiB0aGUgYnVpbHQtaW4gdmFsaWRhdG9ycyAoc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZm9ybXMgRm9ybXMgZ3VpZGV9KVxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAqICAgIGFueSBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0dGVybiBTaW1pbGFyIHRvIGBuZ1BhdHRlcm5gIGV4Y2VwdCB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgdGhlIGFjdHVhbCBzdHJpbmdcbiAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICBhcyBpbiB0aGUgbmdQYXR0ZXJuIGRpcmVjdGl2ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwgdmFsdWUgZG9lcyBub3QgbWF0Y2hcbiAgICogICAgYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJ1cmwtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidXJsRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3VybEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLnVybCA9IHtcbiAgICAgICAgICAgICAgICAgdGV4dDogJ2h0dHA6Ly9nb29nbGUuY29tJ1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlVSTDpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInVybFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwidXJsLnRleHRcIiByZXF1aXJlZD5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci51cmxcIj5cbiAgICAgICAgICAgICAgIE5vdCB2YWxpZCB1cmwhPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPHR0PnRleHQgPSB7e3VybC50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IudXJsID0ge3shIW15Rm9ybS4kZXJyb3IudXJsfX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygndXJsLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VybC50ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignaHR0cDovL2dvb2dsZS5jb20nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCB1cmwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYm94Jyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3VybCc6IHVybElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbZW1haWxdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggZW1haWwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYGVtYWlsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiBub3QgYSB2YWxpZCBlbWFpbFxuICAgKiBhZGRyZXNzLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogYGlucHV0W2VtYWlsXWAgdXNlcyBhIHJlZ2V4IHRvIHZhbGlkYXRlIGVtYWlsIGFkZHJlc3NlcyB0aGF0IGlzIGRlcml2ZWQgZnJvbSB0aGUgcmVnZXhcbiAgICogdXNlZCBpbiBDaHJvbWl1bS4gSWYgeW91IG5lZWQgc3RyaWN0ZXIgdmFsaWRhdGlvbiAoZS5nLiByZXF1aXJpbmcgYSB0b3AtbGV2ZWwgZG9tYWluKSwgeW91IGNhblxuICAgKiB1c2UgYG5nLXBhdHRlcm5gIG9yIG1vZGlmeSB0aGUgYnVpbHQtaW4gdmFsaWRhdG9ycyAoc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZm9ybXMgRm9ybXMgZ3VpZGV9KVxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAqICAgIGFueSBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0dGVybiBTaW1pbGFyIHRvIGBuZ1BhdHRlcm5gIGV4Y2VwdCB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgdGhlIGFjdHVhbCBzdHJpbmdcbiAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICBhcyBpbiB0aGUgbmdQYXR0ZXJuIGRpcmVjdGl2ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwgdmFsdWUgZG9lcyBub3QgbWF0Y2hcbiAgICogICAgYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJlbWFpbC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJlbWFpbEV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdlbWFpbEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsID0ge1xuICAgICAgICAgICAgICAgICB0ZXh0OiAnbWVAZXhhbXBsZS5jb20nXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgICAgPGxhYmVsPkVtYWlsOlxuICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJlbWFpbFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZW1haWwudGV4dFwiIHJlcXVpcmVkPlxuICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZW1haWxcIj5cbiAgICAgICAgICAgICAgICAgTm90IHZhbGlkIGVtYWlsITwvc3Bhbj5cbiAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICA8dHQ+dGV4dCA9IHt7ZW1haWwudGV4dH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5lbWFpbCA9IHt7ISFteUZvcm0uJGVycm9yLmVtYWlsfX08L3R0Pjxici8+XG4gICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB0ZXh0ID0gZWxlbWVudChieS5iaW5kaW5nKCdlbWFpbC50ZXh0JykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdlbWFpbC50ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignbWVAZXhhbXBsZS5jb20nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0VxdWFsKCd0ZXh0ID0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBub3QgZW1haWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygneHh4Jyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ2VtYWlsJzogZW1haWxJbnB1dFR5cGUsXG5cblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W3JhZGlvXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSFRNTCByYWRpbyBidXR0b24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgYG5nTW9kZWxgIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxuICAgKiAgICBOb3RlIHRoYXQgYHZhbHVlYCBvbmx5IHN1cHBvcnRzIGBzdHJpbmdgIHZhbHVlcywgaS5lLiB0aGUgc2NvcGUgbW9kZWwgbmVlZHMgdG8gYmUgYSBzdHJpbmcsXG4gICAqICAgIHRvby4gVXNlIGBuZ1ZhbHVlYCBpZiB5b3UgbmVlZCBjb21wbGV4IG1vZGVscyAoYG51bWJlcmAsIGBvYmplY3RgLCAuLi4pLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdWYWx1ZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gd2hpY2ggYG5nTW9kZWxgIHdpbGwgYmUgYmUgc2V0IHdoZW4gdGhlIHJhZGlvXG4gICAqICAgIGlzIHNlbGVjdGVkLiBTaG91bGQgYmUgdXNlZCBpbnN0ZWFkIG9mIHRoZSBgdmFsdWVgIGF0dHJpYnV0ZSBpZiB5b3UgbmVlZFxuICAgKiAgICBhIG5vbi1zdHJpbmcgYG5nTW9kZWxgIChgYm9vbGVhbmAsIGBhcnJheWAsIC4uLikuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwicmFkaW8taW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwicmFkaW9FeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgncmFkaW9FeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5jb2xvciA9IHtcbiAgICAgICAgICAgICAgICAgbmFtZTogJ2JsdWUnXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgJHNjb3BlLnNwZWNpYWxWYWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgXCJpZFwiOiBcIjEyMzQ1XCIsXG4gICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJncmVlblwiXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIHZhbHVlPVwicmVkXCI+XG4gICAgICAgICAgICAgUmVkXG4gICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cImNvbG9yLm5hbWVcIiBuZy12YWx1ZT1cInNwZWNpYWxWYWx1ZVwiPlxuICAgICAgICAgICAgIEdyZWVuXG4gICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cImNvbG9yLm5hbWVcIiB2YWx1ZT1cImJsdWVcIj5cbiAgICAgICAgICAgICBCbHVlXG4gICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPHR0PmNvbG9yID0ge3tjb2xvci5uYW1lIHwganNvbn19PC90dD48YnIvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICBOb3RlIHRoYXQgYG5nLXZhbHVlPVwic3BlY2lhbFZhbHVlXCJgIHNldHMgcmFkaW8gaXRlbSdzIHZhbHVlIHRvIGJlIHRoZSB2YWx1ZSBvZiBgJHNjb3BlLnNwZWNpYWxWYWx1ZWAuXG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY29sb3IgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvbG9yLm5hbWUnKSk7XG5cbiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbignYmx1ZScpO1xuXG4gICAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnY29sb3IubmFtZScpKS5nZXQoMCkuY2xpY2soKTtcblxuICAgICAgICAgICAgZXhwZWN0KGNvbG9yLmdldFRleHQoKSkudG9Db250YWluKCdyZWQnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3JhZGlvJzogcmFkaW9JbnB1dFR5cGUsXG5cblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W2NoZWNrYm94XVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSFRNTCBjaGVja2JveC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nVHJ1ZVZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nRmFsc2VWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIG5vdCBzZWxlY3RlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwiY2hlY2tib3gtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiY2hlY2tib3hFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY2hlY2tib3hFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5jaGVja2JveE1vZGVsID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlMSA6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWUyIDogJ1lFUydcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlZhbHVlMTpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2JveE1vZGVsLnZhbHVlMVwiPlxuICAgICAgICAgICA8L2xhYmVsPjxici8+XG4gICAgICAgICAgIDxsYWJlbD5WYWx1ZTI6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tib3hNb2RlbC52YWx1ZTJcIlxuICAgICAgICAgICAgICAgICAgICBuZy10cnVlLXZhbHVlPVwiJ1lFUydcIiBuZy1mYWxzZS12YWx1ZT1cIidOTydcIj5cbiAgICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMSA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTF9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMiA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUxID0gZWxlbWVudChieS5iaW5kaW5nKCdjaGVja2JveE1vZGVsLnZhbHVlMScpKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZTIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NoZWNrYm94TW9kZWwudmFsdWUyJykpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsdWUxLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdZRVMnKTtcblxuICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tib3hNb2RlbC52YWx1ZTEnKSkuY2xpY2soKTtcbiAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrYm94TW9kZWwudmFsdWUyJykpLmNsaWNrKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTEuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdOTycpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnY2hlY2tib3gnOiBjaGVja2JveElucHV0VHlwZSxcblxuICAnaGlkZGVuJzogbm9vcCxcbiAgJ2J1dHRvbic6IG5vb3AsXG4gICdzdWJtaXQnOiBub29wLFxuICAncmVzZXQnOiBub29wLFxuICAnZmlsZSc6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpIHtcbiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpID8gdmFsdWUgOiB2YWx1ZS50b1N0cmluZygpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpO1xufVxuXG5mdW5jdGlvbiBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgdmFyIHR5cGUgPSBsb3dlcmNhc2UoZWxlbWVudFswXS50eXBlKTtcblxuICAvLyBJbiBjb21wb3NpdGlvbiBtb2RlLCB1c2VycyBhcmUgc3RpbGwgaW5wdXRpbmcgaW50ZXJtZWRpYXRlIHRleHQgYnVmZmVyLFxuICAvLyBob2xkIHRoZSBsaXN0ZW5lciB1bnRpbCBjb21wb3NpdGlvbiBpcyBkb25lLlxuICAvLyBNb3JlIGFib3V0IGNvbXBvc2l0aW9uIGV2ZW50czogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NvbXBvc2l0aW9uRXZlbnRcbiAgaWYgKCEkc25pZmZlci5hbmRyb2lkKSB7XG4gICAgdmFyIGNvbXBvc2luZyA9IGZhbHNlO1xuXG4gICAgZWxlbWVudC5vbignY29tcG9zaXRpb25zdGFydCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGNvbXBvc2luZyA9IHRydWU7XG4gICAgfSk7XG5cbiAgICBlbGVtZW50Lm9uKCdjb21wb3NpdGlvbmVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgY29tcG9zaW5nID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBpZiAodGltZW91dCkge1xuICAgICAgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIGlmIChjb21wb3NpbmcpIHJldHVybjtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbCgpLFxuICAgICAgICBldmVudCA9IGV2ICYmIGV2LnR5cGU7XG5cbiAgICAvLyBCeSBkZWZhdWx0IHdlIHdpbGwgdHJpbSB0aGUgdmFsdWVcbiAgICAvLyBJZiB0aGUgYXR0cmlidXRlIG5nLXRyaW0gZXhpc3RzIHdlIHdpbGwgYXZvaWQgdHJpbW1pbmdcbiAgICAvLyBJZiBpbnB1dCB0eXBlIGlzICdwYXNzd29yZCcsIHRoZSB2YWx1ZSBpcyBuZXZlciB0cmltbWVkXG4gICAgaWYgKHR5cGUgIT09ICdwYXNzd29yZCcgJiYgKCFhdHRyLm5nVHJpbSB8fCBhdHRyLm5nVHJpbSAhPT0gJ2ZhbHNlJykpIHtcbiAgICAgIHZhbHVlID0gdHJpbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgYSBjb250cm9sIGlzIHN1ZmZlcmluZyBmcm9tIGJhZCBpbnB1dCAoZHVlIHRvIG5hdGl2ZSB2YWxpZGF0b3JzKSwgYnJvd3NlcnMgZGlzY2FyZCBpdHNcbiAgICAvLyB2YWx1ZSwgc28gaXQgbWF5IGJlIG5lY2Vzc2FyeSB0byByZXZhbGlkYXRlIChieSBjYWxsaW5nICRzZXRWaWV3VmFsdWUgYWdhaW4pIGV2ZW4gaWYgdGhlXG4gICAgLy8gY29udHJvbCdzIHZhbHVlIGlzIHRoZSBzYW1lIGVtcHR5IHZhbHVlIHR3aWNlIGluIGEgcm93LlxuICAgIGlmIChjdHJsLiR2aWV3VmFsdWUgIT09IHZhbHVlIHx8ICh2YWx1ZSA9PT0gJycgJiYgY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMpKSB7XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUodmFsdWUsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gaWYgdGhlIGJyb3dzZXIgZG9lcyBzdXBwb3J0IFwiaW5wdXRcIiBldmVudCwgd2UgYXJlIGZpbmUgLSBleGNlcHQgb24gSUU5IHdoaWNoIGRvZXNuJ3QgZmlyZSB0aGVcbiAgLy8gaW5wdXQgZXZlbnQgb24gYmFja3NwYWNlLCBkZWxldGUgb3IgY3V0XG4gIGlmICgkc25pZmZlci5oYXNFdmVudCgnaW5wdXQnKSkge1xuICAgIGVsZW1lbnQub24oJ2lucHV0JywgbGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0aW1lb3V0O1xuXG4gICAgdmFyIGRlZmVyTGlzdGVuZXIgPSBmdW5jdGlvbihldiwgaW5wdXQsIG9yaWdWYWx1ZSkge1xuICAgICAgaWYgKCF0aW1lb3V0KSB7XG4gICAgICAgIHRpbWVvdXQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICBpZiAoIWlucHV0IHx8IGlucHV0LnZhbHVlICE9PSBvcmlnVmFsdWUpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKGV2KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBrZXkgPSBldmVudC5rZXlDb2RlO1xuXG4gICAgICAvLyBpZ25vcmVcbiAgICAgIC8vICAgIGNvbW1hbmQgICAgICAgICAgICBtb2RpZmllcnMgICAgICAgICAgICAgICAgICAgYXJyb3dzXG4gICAgICBpZiAoa2V5ID09PSA5MSB8fCAoMTUgPCBrZXkgJiYga2V5IDwgMTkpIHx8ICgzNyA8PSBrZXkgJiYga2V5IDw9IDQwKSkgcmV0dXJuO1xuXG4gICAgICBkZWZlckxpc3RlbmVyKGV2ZW50LCB0aGlzLCB0aGlzLnZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8vIGlmIHVzZXIgbW9kaWZpZXMgaW5wdXQgdmFsdWUgdXNpbmcgY29udGV4dCBtZW51IGluIElFLCB3ZSBuZWVkIFwicGFzdGVcIiBhbmQgXCJjdXRcIiBldmVudHMgdG8gY2F0Y2ggaXRcbiAgICBpZiAoJHNuaWZmZXIuaGFzRXZlbnQoJ3Bhc3RlJykpIHtcbiAgICAgIGVsZW1lbnQub24oJ3Bhc3RlIGN1dCcsIGRlZmVyTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHVzZXIgcGFzdGUgaW50byBpbnB1dCB1c2luZyBtb3VzZSBvbiBvbGRlciBicm93c2VyXG4gIC8vIG9yIGZvcm0gYXV0b2NvbXBsZXRlIG9uIG5ld2VyIGJyb3dzZXIsIHdlIG5lZWQgXCJjaGFuZ2VcIiBldmVudCB0byBjYXRjaCBpdFxuICBlbGVtZW50Lm9uKCdjaGFuZ2UnLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gV29ya2Fyb3VuZCBmb3IgRmlyZWZveCB2YWxpZGF0aW9uICMxMjEwMi5cbiAgICB2YXIgdmFsdWUgPSBjdHJsLiRpc0VtcHR5KGN0cmwuJHZpZXdWYWx1ZSkgPyAnJyA6IGN0cmwuJHZpZXdWYWx1ZTtcbiAgICBpZiAoZWxlbWVudC52YWwoKSAhPT0gdmFsdWUpIHtcbiAgICAgIGVsZW1lbnQudmFsKHZhbHVlKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHdlZWtQYXJzZXIoaXNvV2VlaywgZXhpc3RpbmdEYXRlKSB7XG4gIGlmIChpc0RhdGUoaXNvV2VlaykpIHtcbiAgICByZXR1cm4gaXNvV2VlaztcbiAgfVxuXG4gIGlmIChpc1N0cmluZyhpc29XZWVrKSkge1xuICAgIFdFRUtfUkVHRVhQLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIHBhcnRzID0gV0VFS19SRUdFWFAuZXhlYyhpc29XZWVrKTtcbiAgICBpZiAocGFydHMpIHtcbiAgICAgIHZhciB5ZWFyID0gK3BhcnRzWzFdLFxuICAgICAgICAgIHdlZWsgPSArcGFydHNbMl0sXG4gICAgICAgICAgaG91cnMgPSAwLFxuICAgICAgICAgIG1pbnV0ZXMgPSAwLFxuICAgICAgICAgIHNlY29uZHMgPSAwLFxuICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IDAsXG4gICAgICAgICAgZmlyc3RUaHVycyA9IGdldEZpcnN0VGh1cnNkYXlPZlllYXIoeWVhciksXG4gICAgICAgICAgYWRkRGF5cyA9ICh3ZWVrIC0gMSkgKiA3O1xuXG4gICAgICBpZiAoZXhpc3RpbmdEYXRlKSB7XG4gICAgICAgIGhvdXJzID0gZXhpc3RpbmdEYXRlLmdldEhvdXJzKCk7XG4gICAgICAgIG1pbnV0ZXMgPSBleGlzdGluZ0RhdGUuZ2V0TWludXRlcygpO1xuICAgICAgICBzZWNvbmRzID0gZXhpc3RpbmdEYXRlLmdldFNlY29uZHMoKTtcbiAgICAgICAgbWlsbGlzZWNvbmRzID0gZXhpc3RpbmdEYXRlLmdldE1pbGxpc2Vjb25kcygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgZmlyc3RUaHVycy5nZXREYXRlKCkgKyBhZGREYXlzLCBob3VycywgbWludXRlcywgc2Vjb25kcywgbWlsbGlzZWNvbmRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTmFOO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEYXRlUGFyc2VyKHJlZ2V4cCwgbWFwcGluZykge1xuICByZXR1cm4gZnVuY3Rpb24oaXNvLCBkYXRlKSB7XG4gICAgdmFyIHBhcnRzLCBtYXA7XG5cbiAgICBpZiAoaXNEYXRlKGlzbykpIHtcbiAgICAgIHJldHVybiBpc287XG4gICAgfVxuXG4gICAgaWYgKGlzU3RyaW5nKGlzbykpIHtcbiAgICAgIC8vIFdoZW4gYSBkYXRlIGlzIEpTT04naWZpZWQgdG8gd3JhcHMgaXRzZWxmIGluc2lkZSBvZiBhbiBleHRyYVxuICAgICAgLy8gc2V0IG9mIGRvdWJsZSBxdW90ZXMuIFRoaXMgbWFrZXMgdGhlIGRhdGUgcGFyc2luZyBjb2RlIHVuYWJsZVxuICAgICAgLy8gdG8gbWF0Y2ggdGhlIGRhdGUgc3RyaW5nIGFuZCBwYXJzZSBpdCBhcyBhIGRhdGUuXG4gICAgICBpZiAoaXNvLmNoYXJBdCgwKSA9PSAnXCInICYmIGlzby5jaGFyQXQoaXNvLmxlbmd0aCAtIDEpID09ICdcIicpIHtcbiAgICAgICAgaXNvID0gaXNvLnN1YnN0cmluZygxLCBpc28ubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoSVNPX0RBVEVfUkVHRVhQLnRlc3QoaXNvKSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoaXNvKTtcbiAgICAgIH1cbiAgICAgIHJlZ2V4cC5sYXN0SW5kZXggPSAwO1xuICAgICAgcGFydHMgPSByZWdleHAuZXhlYyhpc28pO1xuXG4gICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgcGFydHMuc2hpZnQoKTtcbiAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICBtYXAgPSB7XG4gICAgICAgICAgICB5eXl5OiBkYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICBNTTogZGF0ZS5nZXRNb250aCgpICsgMSxcbiAgICAgICAgICAgIGRkOiBkYXRlLmdldERhdGUoKSxcbiAgICAgICAgICAgIEhIOiBkYXRlLmdldEhvdXJzKCksXG4gICAgICAgICAgICBtbTogZGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICAgICAgICBzczogZGF0ZS5nZXRTZWNvbmRzKCksXG4gICAgICAgICAgICBzc3M6IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLyAxMDAwXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXAgPSB7IHl5eXk6IDE5NzAsIE1NOiAxLCBkZDogMSwgSEg6IDAsIG1tOiAwLCBzczogMCwgc3NzOiAwIH07XG4gICAgICAgIH1cblxuICAgICAgICBmb3JFYWNoKHBhcnRzLCBmdW5jdGlvbihwYXJ0LCBpbmRleCkge1xuICAgICAgICAgIGlmIChpbmRleCA8IG1hcHBpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICBtYXBbbWFwcGluZ1tpbmRleF1dID0gK3BhcnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKG1hcC55eXl5LCBtYXAuTU0gLSAxLCBtYXAuZGQsIG1hcC5ISCwgbWFwLm1tLCBtYXAuc3MgfHwgMCwgbWFwLnNzcyAqIDEwMDAgfHwgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIE5hTjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGF0ZUlucHV0VHlwZSh0eXBlLCByZWdleHAsIHBhcnNlRGF0ZSwgZm9ybWF0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBkeW5hbWljRGF0ZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyLCAkZmlsdGVyKSB7XG4gICAgYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKTtcbiAgICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpO1xuICAgIHZhciB0aW1lem9uZSA9IGN0cmwgJiYgY3RybC4kb3B0aW9ucyAmJiBjdHJsLiRvcHRpb25zLnRpbWV6b25lO1xuICAgIHZhciBwcmV2aW91c0RhdGU7XG5cbiAgICBjdHJsLiQkcGFyc2VyTmFtZSA9IHR5cGU7XG4gICAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoY3RybC4kaXNFbXB0eSh2YWx1ZSkpIHJldHVybiBudWxsO1xuICAgICAgaWYgKHJlZ2V4cC50ZXN0KHZhbHVlKSkge1xuICAgICAgICAvLyBOb3RlOiBXZSBjYW5ub3QgcmVhZCBjdHJsLiRtb2RlbFZhbHVlLCBhcyB0aGVyZSBtaWdodCBiZSBhIGRpZmZlcmVudFxuICAgICAgICAvLyBwYXJzZXIvZm9ybWF0dGVyIGluIHRoZSBwcm9jZXNzaW5nIGNoYWluIHNvIHRoYXQgdGhlIG1vZGVsXG4gICAgICAgIC8vIGNvbnRhaW5zIHNvbWUgZGlmZmVyZW50IGRhdGEgZm9ybWF0IVxuICAgICAgICB2YXIgcGFyc2VkRGF0ZSA9IHBhcnNlRGF0ZSh2YWx1ZSwgcHJldmlvdXNEYXRlKTtcbiAgICAgICAgaWYgKHRpbWV6b25lKSB7XG4gICAgICAgICAgcGFyc2VkRGF0ZSA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwocGFyc2VkRGF0ZSwgdGltZXpvbmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWREYXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlICYmICFpc0RhdGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoJ2RhdGVmbXQnLCAnRXhwZWN0ZWQgYHswfWAgdG8gYmUgYSBkYXRlJywgdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVmFsaWREYXRlKHZhbHVlKSkge1xuICAgICAgICBwcmV2aW91c0RhdGUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHByZXZpb3VzRGF0ZSAmJiB0aW1lem9uZSkge1xuICAgICAgICAgIHByZXZpb3VzRGF0ZSA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwocHJldmlvdXNEYXRlLCB0aW1lem9uZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRmaWx0ZXIoJ2RhdGUnKSh2YWx1ZSwgZm9ybWF0LCB0aW1lem9uZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2aW91c0RhdGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWluKSB8fCBhdHRyLm5nTWluKSB7XG4gICAgICB2YXIgbWluVmFsO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzVmFsaWREYXRlKHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtaW5WYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPj0gbWluVmFsO1xuICAgICAgfTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbicsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBtaW5WYWwgPSBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCk7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgICB2YXIgbWF4VmFsO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5tYXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzVmFsaWREYXRlKHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPD0gbWF4VmFsO1xuICAgICAgfTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21heCcsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBtYXhWYWwgPSBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCk7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xuICAgICAgLy8gSW52YWxpZCBEYXRlOiBnZXRUaW1lKCkgcmV0dXJucyBOYU5cbiAgICAgIHJldHVybiB2YWx1ZSAmJiAhKHZhbHVlLmdldFRpbWUgJiYgdmFsdWUuZ2V0VGltZSgpICE9PSB2YWx1ZS5nZXRUaW1lKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUodmFsKSB7XG4gICAgICByZXR1cm4gaXNEZWZpbmVkKHZhbCkgJiYgIWlzRGF0ZSh2YWwpID8gcGFyc2VEYXRlKHZhbCkgfHwgdW5kZWZpbmVkIDogdmFsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gIHZhciBub2RlID0gZWxlbWVudFswXTtcbiAgdmFyIG5hdGl2ZVZhbGlkYXRpb24gPSBjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycyA9IGlzT2JqZWN0KG5vZGUudmFsaWRpdHkpO1xuICBpZiAobmF0aXZlVmFsaWRhdGlvbikge1xuICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIHZhbGlkaXR5ID0gZWxlbWVudC5wcm9wKFZBTElESVRZX1NUQVRFX1BST1BFUlRZKSB8fCB7fTtcbiAgICAgIC8vIERldGVjdCBidWcgaW4gRkYzNSBmb3IgaW5wdXRbZW1haWxdIChodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDY0NDMwKTpcbiAgICAgIC8vIC0gYWxzbyBzZXRzIHZhbGlkaXR5LmJhZElucHV0IChzaG91bGQgb25seSBiZSB2YWxpZGl0eS50eXBlTWlzbWF0Y2gpLlxuICAgICAgLy8gLSBzZWUgaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNlLW1haWwtc3RhdGUtKHR5cGU9ZW1haWwpXG4gICAgICAvLyAtIGNhbiBpZ25vcmUgdGhpcyBjYXNlIGFzIHdlIGNhbiBzdGlsbCByZWFkIG91dCB0aGUgZXJyb25lb3VzIGVtYWlsLi4uXG4gICAgICByZXR1cm4gdmFsaWRpdHkuYmFkSW5wdXQgJiYgIXZhbGlkaXR5LnR5cGVNaXNtYXRjaCA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG51bWJlcklucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG5cbiAgY3RybC4kJHBhcnNlck5hbWUgPSAnbnVtYmVyJztcbiAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGN0cmwuJGlzRW1wdHkodmFsdWUpKSAgICAgIHJldHVybiBudWxsO1xuICAgIGlmIChOVU1CRVJfUkVHRVhQLnRlc3QodmFsdWUpKSByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSk7XG5cbiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFjdHJsLiRpc0VtcHR5KHZhbHVlKSkge1xuICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmdNb2RlbE1pbkVycignbnVtZm10JywgJ0V4cGVjdGVkIGB7MH1gIHRvIGJlIGEgbnVtYmVyJywgdmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0pO1xuXG4gIGlmIChpc0RlZmluZWQoYXR0ci5taW4pIHx8IGF0dHIubmdNaW4pIHtcbiAgICB2YXIgbWluVmFsO1xuICAgIGN0cmwuJHZhbGlkYXRvcnMubWluID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtaW5WYWwpIHx8IHZhbHVlID49IG1pblZhbDtcbiAgICB9O1xuXG4gICAgYXR0ci4kb2JzZXJ2ZSgnbWluJywgZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHZhbCkgJiYgIWlzTnVtYmVyKHZhbCkpIHtcbiAgICAgICAgdmFsID0gcGFyc2VGbG9hdCh2YWwsIDEwKTtcbiAgICAgIH1cbiAgICAgIG1pblZhbCA9IGlzTnVtYmVyKHZhbCkgJiYgIWlzTmFOKHZhbCkgPyB2YWwgOiB1bmRlZmluZWQ7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgdmFyIG1heFZhbDtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLm1heCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWF4VmFsKSB8fCB2YWx1ZSA8PSBtYXhWYWw7XG4gICAgfTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ21heCcsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKGlzRGVmaW5lZCh2YWwpICYmICFpc051bWJlcih2YWwpKSB7XG4gICAgICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsLCAxMCk7XG4gICAgICB9XG4gICAgICBtYXhWYWwgPSBpc051bWJlcih2YWwpICYmICFpc05hTih2YWwpID8gdmFsIDogdW5kZWZpbmVkO1xuICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zXG4gICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVybElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIC8vIE5vdGU6IG5vIGJhZElucHV0Q2hlY2tlciBoZXJlIGJ5IHB1cnBvc2UgYXMgYHVybGAgaXMgb25seSBhIHZhbGlkYXRpb25cbiAgLy8gaW4gYnJvd3NlcnMsIGkuZS4gd2UgY2FuIGFsd2F5cyByZWFkIG91dCBpbnB1dC52YWx1ZSBldmVuIGlmIGl0IGlzIG5vdCB2YWxpZCFcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG5cbiAgY3RybC4kJHBhcnNlck5hbWUgPSAndXJsJztcbiAgY3RybC4kdmFsaWRhdG9ycy51cmwgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgVVJMX1JFR0VYUC50ZXN0KHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW1haWxJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICAvLyBOb3RlOiBubyBiYWRJbnB1dENoZWNrZXIgaGVyZSBieSBwdXJwb3NlIGFzIGB1cmxgIGlzIG9ubHkgYSB2YWxpZGF0aW9uXG4gIC8vIGluIGJyb3dzZXJzLCBpLmUuIHdlIGNhbiBhbHdheXMgcmVhZCBvdXQgaW5wdXQudmFsdWUgZXZlbiBpZiBpdCBpcyBub3QgdmFsaWQhXG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpO1xuXG4gIGN0cmwuJCRwYXJzZXJOYW1lID0gJ2VtYWlsJztcbiAgY3RybC4kdmFsaWRhdG9ycy5lbWFpbCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBFTUFJTF9SRUdFWFAudGVzdCh2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJhZGlvSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gIC8vIG1ha2UgdGhlIG5hbWUgdW5pcXVlLCBpZiBub3QgZGVmaW5lZFxuICBpZiAoaXNVbmRlZmluZWQoYXR0ci5uYW1lKSkge1xuICAgIGVsZW1lbnQuYXR0cignbmFtZScsIG5leHRVaWQoKSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldikge1xuICAgIGlmIChlbGVtZW50WzBdLmNoZWNrZWQpIHtcbiAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShhdHRyLnZhbHVlLCBldiAmJiBldi50eXBlKTtcbiAgICB9XG4gIH07XG5cbiAgZWxlbWVudC5vbignY2xpY2snLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0ci52YWx1ZTtcbiAgICBlbGVtZW50WzBdLmNoZWNrZWQgPSAodmFsdWUgPT0gY3RybC4kdmlld1ZhbHVlKTtcbiAgfTtcblxuICBhdHRyLiRvYnNlcnZlKCd2YWx1ZScsIGN0cmwuJHJlbmRlcik7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgY29udGV4dCwgbmFtZSwgZXhwcmVzc2lvbiwgZmFsbGJhY2spIHtcbiAgdmFyIHBhcnNlRm47XG4gIGlmIChpc0RlZmluZWQoZXhwcmVzc2lvbikpIHtcbiAgICBwYXJzZUZuID0gJHBhcnNlKGV4cHJlc3Npb24pO1xuICAgIGlmICghcGFyc2VGbi5jb25zdGFudCkge1xuICAgICAgdGhyb3cgbmdNb2RlbE1pbkVycignY29uc3RleHByJywgJ0V4cGVjdGVkIGNvbnN0YW50IGV4cHJlc3Npb24gZm9yIGB7MH1gLCBidXQgc2F3ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYHsxfWAuJywgbmFtZSwgZXhwcmVzc2lvbik7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUZuKGNvbnRleHQpO1xuICB9XG4gIHJldHVybiBmYWxsYmFjaztcbn1cblxuZnVuY3Rpb24gY2hlY2tib3hJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlciwgJGZpbHRlciwgJHBhcnNlKSB7XG4gIHZhciB0cnVlVmFsdWUgPSBwYXJzZUNvbnN0YW50RXhwcigkcGFyc2UsIHNjb3BlLCAnbmdUcnVlVmFsdWUnLCBhdHRyLm5nVHJ1ZVZhbHVlLCB0cnVlKTtcbiAgdmFyIGZhbHNlVmFsdWUgPSBwYXJzZUNvbnN0YW50RXhwcigkcGFyc2UsIHNjb3BlLCAnbmdGYWxzZVZhbHVlJywgYXR0ci5uZ0ZhbHNlVmFsdWUsIGZhbHNlKTtcblxuICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldikge1xuICAgIGN0cmwuJHNldFZpZXdWYWx1ZShlbGVtZW50WzBdLmNoZWNrZWQsIGV2ICYmIGV2LnR5cGUpO1xuICB9O1xuXG4gIGVsZW1lbnQub24oJ2NsaWNrJywgbGlzdGVuZXIpO1xuXG4gIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnRbMF0uY2hlY2tlZCA9IGN0cmwuJHZpZXdWYWx1ZTtcbiAgfTtcblxuICAvLyBPdmVycmlkZSB0aGUgc3RhbmRhcmQgYCRpc0VtcHR5YCBiZWNhdXNlIHRoZSAkdmlld1ZhbHVlIG9mIGFuIGVtcHR5IGNoZWNrYm94IGlzIGFsd2F5cyBzZXQgdG8gYGZhbHNlYFxuICAvLyBUaGlzIGlzIGJlY2F1c2Ugb2YgdGhlIHBhcnNlciBiZWxvdywgd2hpY2ggY29tcGFyZXMgdGhlIGAkbW9kZWxWYWx1ZWAgd2l0aCBgdHJ1ZVZhbHVlYCB0byBjb252ZXJ0XG4gIC8vIGl0IHRvIGEgYm9vbGVhbi5cbiAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBmYWxzZTtcbiAgfTtcblxuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZXF1YWxzKHZhbHVlLCB0cnVlVmFsdWUpO1xuICB9KTtcblxuICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPyB0cnVlVmFsdWUgOiBmYWxzZVZhbHVlO1xuICB9KTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHRleHRhcmVhXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSFRNTCB0ZXh0YXJlYSBlbGVtZW50IGNvbnRyb2wgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy4gVGhlIGRhdGEtYmluZGluZyBhbmQgdmFsaWRhdGlvblxuICogcHJvcGVydGllcyBvZiB0aGlzIGVsZW1lbnQgYXJlIGV4YWN0bHkgdGhlIHNhbWUgYXMgdGhvc2Ugb2YgdGhlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0IGVsZW1lbnR9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAqICAgIG1pbmxlbmd0aC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZiBhbnlcbiAqICAgIGxlbmd0aC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHZhbHVlIGRvZXMgbm90IG1hdGNoXG4gKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gKiAgICBhY2NvdW50LlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBpbnB1dFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUTUwgaW5wdXQgZWxlbWVudCBjb250cm9sLiBXaGVuIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LCBpdCBwcm92aWRlcyBkYXRhLWJpbmRpbmcsXG4gKiBpbnB1dCBzdGF0ZSBjb250cm9sLCBhbmQgdmFsaWRhdGlvbi5cbiAqIElucHV0IGNvbnRyb2wgZm9sbG93cyBIVE1MNSBpbnB1dCB0eXBlcyBhbmQgcG9seWZpbGxzIHRoZSBIVE1MNSB2YWxpZGF0aW9uIGJlaGF2aW9yIGZvciBvbGRlciBicm93c2Vycy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIE5vdCBldmVyeSBmZWF0dXJlIG9mZmVyZWQgaXMgYXZhaWxhYmxlIGZvciBhbGwgaW5wdXQgdHlwZXMuXG4gKiBTcGVjaWZpY2FsbHksIGRhdGEgYmluZGluZyBhbmQgZXZlbnQgaGFuZGxpbmcgdmlhIGBuZy1tb2RlbGAgaXMgdW5zdXBwb3J0ZWQgZm9yIGBpbnB1dFtmaWxlXWAuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBuZ1JlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgaWYgc2V0IHRvIHRydWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gKiAgICBtaW5sZW5ndGguXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2YgYW55XG4gKiAgICBsZW5ndGguXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB2YWx1ZSBkb2VzIG5vdCBtYXRjaFxuICogICAgYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICogICAgYWNjb3VudC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAqICAgIFRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQgZm9yIGlucHV0W3R5cGU9cGFzc3dvcmRdIGNvbnRyb2xzLCB3aGljaCB3aWxsIG5ldmVyIHRyaW0gdGhlXG4gKiAgICBpbnB1dC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJpbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJpbnB1dEV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnaW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUudXNlciA9IHtuYW1lOiAnZ3Vlc3QnLCBsYXN0OiAndmlzaXRvcid9O1xuICAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgVXNlciBuYW1lOlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIiBuZy1tb2RlbD1cInVzZXIubmFtZVwiIHJlcXVpcmVkPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLnVzZXJOYW1lLiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgIExhc3QgbmFtZTpcbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImxhc3ROYW1lXCIgbmctbW9kZWw9XCJ1c2VyLmxhc3RcIlxuICAgICAgICAgICAgICBuZy1taW5sZW5ndGg9XCIzXCIgbmctbWF4bGVuZ3RoPVwiMTBcIj5cbiAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IubWlubGVuZ3RoXCI+XG4gICAgICAgICAgICAgICBUb28gc2hvcnQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmxhc3ROYW1lLiRlcnJvci5tYXhsZW5ndGhcIj5cbiAgICAgICAgICAgICAgIFRvbyBsb25nITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICA8L2Zvcm0+XG4gICAgICAgICA8aHI+XG4gICAgICAgICA8dHQ+dXNlciA9IHt7dXNlcn19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kdmFsaWQgPSB7e215Rm9ybS51c2VyTmFtZS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0udXNlck5hbWUuJGVycm9yID0ge3tteUZvcm0udXNlck5hbWUuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLmxhc3ROYW1lLiR2YWxpZCA9IHt7bXlGb3JtLmxhc3ROYW1lLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IgPSB7e215Rm9ybS5sYXN0TmFtZS4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5taW5sZW5ndGggPSB7eyEhbXlGb3JtLiRlcnJvci5taW5sZW5ndGh9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1heGxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1heGxlbmd0aH19PC90dD48YnIvPlxuICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgdXNlciA9IGVsZW1lbnQoYnkuZXhhY3RCaW5kaW5nKCd1c2VyJykpO1xuICAgICAgICB2YXIgdXNlck5hbWVWYWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLnVzZXJOYW1lLiR2YWxpZCcpKTtcbiAgICAgICAgdmFyIGxhc3ROYW1lVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kdmFsaWQnKSk7XG4gICAgICAgIHZhciBsYXN0TmFtZUVycm9yID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJGVycm9yJykpO1xuICAgICAgICB2YXIgZm9ybVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uJHZhbGlkJykpO1xuICAgICAgICB2YXIgdXNlck5hbWVJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubmFtZScpKTtcbiAgICAgICAgdmFyIHVzZXJMYXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLmxhc3QnKSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCIsXCJsYXN0XCI6XCJ2aXNpdG9yXCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KHVzZXJOYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eSB3aGVuIHJlcXVpcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdXNlck5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIHVzZXJOYW1lSW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcImxhc3RcIjpcInZpc2l0b3JcIn0nKTtcbiAgICAgICAgICBleHBlY3QodXNlck5hbWVWYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIHZhbGlkIGlmIGVtcHR5IHdoZW4gbWluIGxlbmd0aCBpcyBzZXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibmFtZVwiOlwiZ3Vlc3RcIixcImxhc3RcIjpcIlwifScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgZXhwZWN0KGZvcm1WYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbGVzcyB0aGFuIHJlcXVpcmVkIG1pbiBsZW5ndGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5zZW5kS2V5cygneHgnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwifScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZUVycm9yLmdldFRleHQoKSkudG9Db250YWluKCdtaW5sZW5ndGgnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbG9uZ2VyIHRoYW4gbWF4IGxlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCdzb21lIHJpZGljdWxvdXNseSBsb25nIG5hbWUnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwifScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZUVycm9yLmdldFRleHQoKSkudG9Db250YWluKCdtYXhsZW5ndGgnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBpbnB1dERpcmVjdGl2ZSA9IFsnJGJyb3dzZXInLCAnJHNuaWZmZXInLCAnJGZpbHRlcicsICckcGFyc2UnLFxuICAgIGZ1bmN0aW9uKCRicm93c2VyLCAkc25pZmZlciwgJGZpbHRlciwgJHBhcnNlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXF1aXJlOiBbJz9uZ01vZGVsJ10sXG4gICAgbGluazoge1xuICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgaWYgKGN0cmxzWzBdKSB7XG4gICAgICAgICAgKGlucHV0VHlwZVtsb3dlcmNhc2UoYXR0ci50eXBlKV0gfHwgaW5wdXRUeXBlLnRleHQpKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsc1swXSwgJHNuaWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRicm93c2VyLCAkZmlsdGVyLCAkcGFyc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufV07XG5cblxuXG52YXIgQ09OU1RBTlRfVkFMVUVfUkVHRVhQID0gL14odHJ1ZXxmYWxzZXxcXGQrKSQvO1xuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1ZhbHVlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBCaW5kcyB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiB0byB0aGUgdmFsdWUgb2YgYDxvcHRpb24+YCBvciB7QGxpbmsgaW5wdXRbcmFkaW9dIGBpbnB1dFtyYWRpb11gfSxcbiAqIHNvIHRoYXQgd2hlbiB0aGUgZWxlbWVudCBpcyBzZWxlY3RlZCwgdGhlIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0gb2YgdGhhdCBlbGVtZW50IGlzIHNldCB0b1xuICogdGhlIGJvdW5kIHZhbHVlLlxuICpcbiAqIGBuZ1ZhbHVlYCBpcyB1c2VmdWwgd2hlbiBkeW5hbWljYWxseSBnZW5lcmF0aW5nIGxpc3RzIG9mIHJhZGlvIGJ1dHRvbnMgdXNpbmdcbiAqIHtAbGluayBuZ1JlcGVhdCBgbmdSZXBlYXRgfSwgYXMgc2hvd24gYmVsb3cuXG4gKlxuICogTGlrZXdpc2UsIGBuZ1ZhbHVlYCBjYW4gYmUgdXNlZCB0byBnZW5lcmF0ZSBgPG9wdGlvbj5gIGVsZW1lbnRzIGZvclxuICogdGhlIHtAbGluayBzZWxlY3QgYHNlbGVjdGB9IGVsZW1lbnQuIEluIHRoYXQgY2FzZSBob3dldmVyLCBvbmx5IHN0cmluZ3MgYXJlIHN1cHBvcnRlZFxuICogZm9yIHRoZSBgdmFsdWUgYGF0dHJpYnV0ZSwgc28gdGhlIHJlc3VsdGluZyBgbmdNb2RlbGAgd2lsbCBhbHdheXMgYmUgYSBzdHJpbmcuXG4gKiBTdXBwb3J0IGZvciBgc2VsZWN0YCBtb2RlbHMgd2l0aCBub24tc3RyaW5nIHZhbHVlcyBpcyBhdmFpbGFibGUgdmlhIGBuZ09wdGlvbnNgLlxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcGFyYW0ge3N0cmluZz19IG5nVmFsdWUgYW5ndWxhciBleHByZXNzaW9uLCB3aG9zZSB2YWx1ZSB3aWxsIGJlIGJvdW5kIHRvIHRoZSBgdmFsdWVgIGF0dHJpYnV0ZVxuICogICBvZiB0aGUgYGlucHV0YCBlbGVtZW50XG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmdWYWx1ZS1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ2YWx1ZUV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndmFsdWVFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ3BpenphJywgJ3VuaWNvcm5zJywgJ3JvYm90cyddO1xuICAgICAgICAgICAgICAkc2NvcGUubXkgPSB7IGZhdm9yaXRlOiAndW5pY29ybnMnIH07XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxmb3JtIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIDxoMj5XaGljaCBpcyB5b3VyIGZhdm9yaXRlPzwvaDI+XG4gICAgICAgICAgICA8bGFiZWwgbmctcmVwZWF0PVwibmFtZSBpbiBuYW1lc1wiIGZvcj1cInt7bmFtZX19XCI+XG4gICAgICAgICAgICAgIHt7bmFtZX19XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJteS5mYXZvcml0ZVwiXG4gICAgICAgICAgICAgICAgICAgICBuZy12YWx1ZT1cIm5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgaWQ9XCJ7e25hbWV9fVwiXG4gICAgICAgICAgICAgICAgICAgICBuYW1lPVwiZmF2b3JpdGVcIj5cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdj5Zb3UgY2hvc2Uge3tteS5mYXZvcml0ZX19PC9kaXY+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgdmFyIGZhdm9yaXRlID0gZWxlbWVudChieS5iaW5kaW5nKCdteS5mYXZvcml0ZScpKTtcblxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZmF2b3JpdGUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3VuaWNvcm5zJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGJpbmQgdGhlIHZhbHVlcyB0byB0aGUgaW5wdXRzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudC5hbGwoYnkubW9kZWwoJ215LmZhdm9yaXRlJykpLmdldCgwKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChmYXZvcml0ZS5nZXRUZXh0KCkpLnRvQ29udGFpbigncGl6emEnKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdWYWx1ZURpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICBjb21waWxlOiBmdW5jdGlvbih0cGwsIHRwbEF0dHIpIHtcbiAgICAgIGlmIChDT05TVEFOVF9WQUxVRV9SRUdFWFAudGVzdCh0cGxBdHRyLm5nVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1ZhbHVlQ29uc3RhbnRMaW5rKHNjb3BlLCBlbG0sIGF0dHIpIHtcbiAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgc2NvcGUuJGV2YWwoYXR0ci5uZ1ZhbHVlKSk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdWYWx1ZUxpbmsoc2NvcGUsIGVsbSwgYXR0cikge1xuICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nVmFsdWUsIGZ1bmN0aW9uIHZhbHVlV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCB2YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0JpbmRcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0JpbmRgIGF0dHJpYnV0ZSB0ZWxscyBBbmd1bGFyIHRvIHJlcGxhY2UgdGhlIHRleHQgY29udGVudCBvZiB0aGUgc3BlY2lmaWVkIEhUTUwgZWxlbWVudFxuICogd2l0aCB0aGUgdmFsdWUgb2YgYSBnaXZlbiBleHByZXNzaW9uLCBhbmQgdG8gdXBkYXRlIHRoZSB0ZXh0IGNvbnRlbnQgd2hlbiB0aGUgdmFsdWUgb2YgdGhhdFxuICogZXhwcmVzc2lvbiBjaGFuZ2VzLlxuICpcbiAqIFR5cGljYWxseSwgeW91IGRvbid0IHVzZSBgbmdCaW5kYCBkaXJlY3RseSwgYnV0IGluc3RlYWQgeW91IHVzZSB0aGUgZG91YmxlIGN1cmx5IG1hcmt1cCBsaWtlXG4gKiBge3sgZXhwcmVzc2lvbiB9fWAgd2hpY2ggaXMgc2ltaWxhciBidXQgbGVzcyB2ZXJib3NlLlxuICpcbiAqIEl0IGlzIHByZWZlcmFibGUgdG8gdXNlIGBuZ0JpbmRgIGluc3RlYWQgb2YgYHt7IGV4cHJlc3Npb24gfX1gIGlmIGEgdGVtcGxhdGUgaXMgbW9tZW50YXJpbHlcbiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3IHN0YXRlIGJlZm9yZSBBbmd1bGFyIGNvbXBpbGVzIGl0LiBTaW5jZSBgbmdCaW5kYCBpcyBhblxuICogZWxlbWVudCBhdHRyaWJ1dGUsIGl0IG1ha2VzIHRoZSBiaW5kaW5ncyBpbnZpc2libGUgdG8gdGhlIHVzZXIgd2hpbGUgdGhlIHBhZ2UgaXMgbG9hZGluZy5cbiAqXG4gKiBBbiBhbHRlcm5hdGl2ZSBzb2x1dGlvbiB0byB0aGlzIHByb2JsZW0gd291bGQgYmUgdXNpbmcgdGhlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xvYWsgbmdDbG9ha30gZGlyZWN0aXZlLlxuICpcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCaW5kIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBFbnRlciBhIG5hbWUgaW4gdGhlIExpdmUgUHJldmlldyB0ZXh0IGJveDsgdGhlIGdyZWV0aW5nIGJlbG93IHRoZSB0ZXh0IGJveCBjaGFuZ2VzIGluc3RhbnRseS5cbiAgIDxleGFtcGxlIG1vZHVsZT1cImJpbmRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5uYW1lID0gJ1doaXJsZWQnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxsYWJlbD5FbnRlciBuYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIj48L2xhYmVsPjxicj5cbiAgICAgICAgIEhlbGxvIDxzcGFuIG5nLWJpbmQ9XCJuYW1lXCI+PC9zcGFuPiFcbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgbmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZScpKTtcblxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ1doaXJsZWQnKTtcbiAgICAgICAgIG5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbmFtZUlucHV0LnNlbmRLZXlzKCd3b3JsZCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ3dvcmxkJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQmluZERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQUMnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZENvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBhdHRyLm5nQmluZCk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ0JpbmQsIGZ1bmN0aW9uIG5nQmluZFdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGlzVW5kZWZpbmVkKHZhbHVlKSA/ICcnIDogdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZFRlbXBsYXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQmluZFRlbXBsYXRlYCBkaXJlY3RpdmUgc3BlY2lmaWVzIHRoYXQgdGhlIGVsZW1lbnRcbiAqIHRleHQgY29udGVudCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCB0aGUgaW50ZXJwb2xhdGlvbiBvZiB0aGUgdGVtcGxhdGVcbiAqIGluIHRoZSBgbmdCaW5kVGVtcGxhdGVgIGF0dHJpYnV0ZS5cbiAqIFVubGlrZSBgbmdCaW5kYCwgdGhlIGBuZ0JpbmRUZW1wbGF0ZWAgY2FuIGNvbnRhaW4gbXVsdGlwbGUgYHt7YCBgfX1gXG4gKiBleHByZXNzaW9ucy4gVGhpcyBkaXJlY3RpdmUgaXMgbmVlZGVkIHNpbmNlIHNvbWUgSFRNTCBlbGVtZW50c1xuICogKHN1Y2ggYXMgVElUTEUgYW5kIE9QVElPTikgY2Fubm90IGNvbnRhaW4gU1BBTiBlbGVtZW50cy5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0JpbmRUZW1wbGF0ZSB0ZW1wbGF0ZSBvZiBmb3JtXG4gKiAgIDx0dD57ezwvdHQ+IDx0dD5leHByZXNzaW9uPC90dD4gPHR0Pn19PC90dD4gdG8gZXZhbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVHJ5IGl0IGhlcmU6IGVudGVyIHRleHQgaW4gdGV4dCBib3ggYW5kIHdhdGNoIHRoZSBncmVldGluZyBjaGFuZ2UuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnYmluZEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuc2FsdXRhdGlvbiA9ICdIZWxsbyc7XG4gICAgICAgICAgICAgJHNjb3BlLm5hbWUgPSAnV29ybGQnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPGxhYmVsPlNhbHV0YXRpb246IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic2FsdXRhdGlvblwiPjwvbGFiZWw+PGJyPlxuICAgICAgICA8bGFiZWw+TmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJuYW1lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgIDxwcmUgbmctYmluZC10ZW1wbGF0ZT1cInt7c2FsdXRhdGlvbn19IHt7bmFtZX19IVwiPjwvcHJlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzYWx1dGF0aW9uRWxlbSA9IGVsZW1lbnQoYnkuYmluZGluZygnc2FsdXRhdGlvbicpKTtcbiAgICAgICAgIHZhciBzYWx1dGF0aW9uSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzYWx1dGF0aW9uJykpO1xuICAgICAgICAgdmFyIG5hbWVJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSk7XG5cbiAgICAgICAgIGV4cGVjdChzYWx1dGF0aW9uRWxlbS5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIFdvcmxkIScpO1xuXG4gICAgICAgICBzYWx1dGF0aW9uSW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIHNhbHV0YXRpb25JbnB1dC5zZW5kS2V5cygnR3JlZXRpbmdzJyk7XG4gICAgICAgICBuYW1lSW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIG5hbWVJbnB1dC5zZW5kS2V5cygndXNlcicpO1xuXG4gICAgICAgICBleHBlY3Qoc2FsdXRhdGlvbkVsZW0uZ2V0VGV4dCgpKS50b0JlKCdHcmVldGluZ3MgdXNlciEnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0JpbmRUZW1wbGF0ZUNvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZFRlbXBsYXRlTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZShlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci5uZ0JpbmRUZW1wbGF0ZSkpO1xuICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKGVsZW1lbnQsIGludGVycG9sYXRlRm4uZXhwcmVzc2lvbnMpO1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudFswXTtcbiAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbmdCaW5kVGVtcGxhdGUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBpc1VuZGVmaW5lZCh2YWx1ZSkgPyAnJyA6IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0JpbmRIdG1sXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBFdmFsdWF0ZXMgdGhlIGV4cHJlc3Npb24gYW5kIGluc2VydHMgdGhlIHJlc3VsdGluZyBIVE1MIGludG8gdGhlIGVsZW1lbnQgaW4gYSBzZWN1cmUgd2F5LiBCeSBkZWZhdWx0LFxuICogdGhlIHJlc3VsdGluZyBIVE1MIGNvbnRlbnQgd2lsbCBiZSBzYW5pdGl6ZWQgdXNpbmcgdGhlIHtAbGluayBuZ1Nhbml0aXplLiRzYW5pdGl6ZSAkc2FuaXRpemV9IHNlcnZpY2UuXG4gKiBUbyB1dGlsaXplIHRoaXMgZnVuY3Rpb25hbGl0eSwgZW5zdXJlIHRoYXQgYCRzYW5pdGl6ZWAgaXMgYXZhaWxhYmxlLCBmb3IgZXhhbXBsZSwgYnkgaW5jbHVkaW5nIHtAbGlua1xuICogbmdTYW5pdGl6ZX0gaW4geW91ciBtb2R1bGUncyBkZXBlbmRlbmNpZXMgKG5vdCBpbiBjb3JlIEFuZ3VsYXIpLiBJbiBvcmRlciB0byB1c2Uge0BsaW5rIG5nU2FuaXRpemV9XG4gKiBpbiB5b3VyIG1vZHVsZSdzIGRlcGVuZGVuY2llcywgeW91IG5lZWQgdG8gaW5jbHVkZSBcImFuZ3VsYXItc2FuaXRpemUuanNcIiBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqIFlvdSBtYXkgYWxzbyBieXBhc3Mgc2FuaXRpemF0aW9uIGZvciB2YWx1ZXMgeW91IGtub3cgYXJlIHNhZmUuIFRvIGRvIHNvLCBiaW5kIHRvXG4gKiBhbiBleHBsaWNpdGx5IHRydXN0ZWQgdmFsdWUgdmlhIHtAbGluayBuZy4kc2NlI3RydXN0QXNIdG1sICRzY2UudHJ1c3RBc0h0bWx9LiAgU2VlIHRoZSBleGFtcGxlXG4gKiB1bmRlciB7QGxpbmsgbmcuJHNjZSNzaG93LW1lLWFuLWV4YW1wbGUtdXNpbmctc2NlLSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKlxuICogTm90ZTogSWYgYSBgJHNhbml0aXplYCBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlIGFuZCB0aGUgYm91bmQgdmFsdWUgaXNuJ3QgZXhwbGljaXRseSB0cnVzdGVkLCB5b3VcbiAqIHdpbGwgaGF2ZSBhbiBleGNlcHRpb24gKGluc3RlYWQgb2YgYW4gZXhwbG9pdC4pXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZEh0bWwge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuXG4gKlxuICogQGV4YW1wbGVcblxuICAgPGV4YW1wbGUgbW9kdWxlPVwiYmluZEh0bWxFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItc2FuaXRpemUuanNcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8cCBuZy1iaW5kLWh0bWw9XCJteUhUTUxcIj48L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cblxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRIdG1sRXhhbXBsZScsIFsnbmdTYW5pdGl6ZSddKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgJHNjb3BlLm15SFRNTCA9XG4gICAgICAgICAgICAgICdJIGFtIGFuIDxjb2RlPkhUTUw8L2NvZGU+c3RyaW5nIHdpdGggJyArXG4gICAgICAgICAgICAgICc8YSBocmVmPVwiI1wiPmxpbmtzITwvYT4gYW5kIG90aGVyIDxlbT5zdHVmZjwvZW0+JztcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuXG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQtaHRtbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbXlIVE1MJykpLmdldFRleHQoKSkudG9CZShcbiAgICAgICAgICAgICAnSSBhbSBhbiBIVE1Mc3RyaW5nIHdpdGggbGlua3MhIGFuZCBvdGhlciBzdHVmZicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgJyRwYXJzZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRzY2UsICRwYXJzZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZEh0bWxDb21waWxlKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgIHZhciBuZ0JpbmRIdG1sR2V0dGVyID0gJHBhcnNlKHRBdHRycy5uZ0JpbmRIdG1sKTtcbiAgICAgIHZhciBuZ0JpbmRIdG1sV2F0Y2ggPSAkcGFyc2UodEF0dHJzLm5nQmluZEh0bWwsIGZ1bmN0aW9uIGdldFN0cmluZ1ZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgfHwgJycpLnRvU3RyaW5nKCk7XG4gICAgICB9KTtcbiAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRFbGVtZW50KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZEh0bWxMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0luZm8oZWxlbWVudCwgYXR0ci5uZ0JpbmRIdG1sKTtcblxuICAgICAgICBzY29wZS4kd2F0Y2gobmdCaW5kSHRtbFdhdGNoLCBmdW5jdGlvbiBuZ0JpbmRIdG1sV2F0Y2hBY3Rpb24oKSB7XG4gICAgICAgICAgLy8gd2UgcmUtZXZhbHVhdGUgdGhlIGV4cHIgYmVjYXVzZSB3ZSB3YW50IGEgVHJ1c3RlZFZhbHVlSG9sZGVyVHlwZVxuICAgICAgICAgIC8vIGZvciAkc2NlLCBub3QgYSBzdHJpbmdcbiAgICAgICAgICBlbGVtZW50Lmh0bWwoJHNjZS5nZXRUcnVzdGVkSHRtbChuZ0JpbmRIdG1sR2V0dGVyKHNjb3BlKSkgfHwgJycpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDaGFuZ2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEV2YWx1YXRlIHRoZSBnaXZlbiBleHByZXNzaW9uIHdoZW4gdGhlIHVzZXIgY2hhbmdlcyB0aGUgaW5wdXQuXG4gKiBUaGUgZXhwcmVzc2lvbiBpcyBldmFsdWF0ZWQgaW1tZWRpYXRlbHksIHVubGlrZSB0aGUgSmF2YVNjcmlwdCBvbmNoYW5nZSBldmVudFxuICogd2hpY2ggb25seSB0cmlnZ2VycyBhdCB0aGUgZW5kIG9mIGEgY2hhbmdlICh1c3VhbGx5LCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGVcbiAqIGZvcm0gZWxlbWVudCBvciBwcmVzc2VzIHRoZSByZXR1cm4ga2V5KS5cbiAqXG4gKiBUaGUgYG5nQ2hhbmdlYCBleHByZXNzaW9uIGlzIG9ubHkgZXZhbHVhdGVkIHdoZW4gYSBjaGFuZ2UgaW4gdGhlIGlucHV0IHZhbHVlIGNhdXNlc1xuICogYSBuZXcgdmFsdWUgdG8gYmUgY29tbWl0dGVkIHRvIHRoZSBtb2RlbC5cbiAqXG4gKiBJdCB3aWxsIG5vdCBiZSBldmFsdWF0ZWQ6XG4gKiAqIGlmIHRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIHRoZSBgJHBhcnNlcnNgIHRyYW5zZm9ybWF0aW9uIHBpcGVsaW5lIGhhcyBub3QgY2hhbmdlZFxuICogKiBpZiB0aGUgaW5wdXQgaGFzIGNvbnRpbnVlZCB0byBiZSBpbnZhbGlkIHNpbmNlIHRoZSBtb2RlbCB3aWxsIHN0YXkgYG51bGxgXG4gKiAqIGlmIHRoZSBtb2RlbCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIG5vdCBieSBhIGNoYW5nZSB0byB0aGUgaW5wdXQgdmFsdWVcbiAqXG4gKlxuICogTm90ZSwgdGhpcyBkaXJlY3RpdmUgcmVxdWlyZXMgYG5nTW9kZWxgIHRvIGJlIHByZXNlbnQuXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGFuZ2Uge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbiBjaGFuZ2VcbiAqIGluIGlucHV0IHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdDaGFuZ2UtZGlyZWN0aXZlXCIgbW9kdWxlPVwiY2hhbmdlRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxzY3JpcHQ+XG4gKiAgICAgICBhbmd1bGFyLm1vZHVsZSgnY2hhbmdlRXhhbXBsZScsIFtdKVxuICogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgICRzY29wZS5jb3VudGVyID0gMDtcbiAqICAgICAgICAgICAkc2NvcGUuY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICAkc2NvcGUuY291bnRlcisrO1xuICogICAgICAgICAgIH07XG4gKiAgICAgICAgIH1dKTtcbiAqICAgICA8L3NjcmlwdD5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY29uZmlybWVkXCIgbmctY2hhbmdlPVwiY2hhbmdlKClcIiBpZD1cIm5nLWNoYW5nZS1leGFtcGxlMVwiIC8+XG4gKiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjb25maXJtZWRcIiBpZD1cIm5nLWNoYW5nZS1leGFtcGxlMlwiIC8+XG4gKiAgICAgICA8bGFiZWwgZm9yPVwibmctY2hhbmdlLWV4YW1wbGUyXCI+Q29uZmlybWVkPC9sYWJlbD48YnIgLz5cbiAqICAgICAgIDx0dD5kZWJ1ZyA9IHt7Y29uZmlybWVkfX08L3R0Pjxici8+XG4gKiAgICAgICA8dHQ+Y291bnRlciA9IHt7Y291bnRlcn19PC90dD48YnIvPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICB2YXIgY291bnRlciA9IGVsZW1lbnQoYnkuYmluZGluZygnY291bnRlcicpKTtcbiAqICAgICB2YXIgZGVidWcgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvbmZpcm1lZCcpKTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIHZpZXcnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9Db250YWluKCcwJyk7XG4gKlxuICogICAgICAgZWxlbWVudChieS5pZCgnbmctY2hhbmdlLWV4YW1wbGUxJykpLmNsaWNrKCk7XG4gKlxuICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEnKTtcbiAqICAgICAgIGV4cGVjdChkZWJ1Zy5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIG5vdCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBlbGVtZW50KGJ5LmlkKCduZy1jaGFuZ2UtZXhhbXBsZTInKSkuY2xpY2soKTtcblxuICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzAnKTtcbiAqICAgICAgIGV4cGVjdChkZWJ1Zy5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0NoYW5nZURpcmVjdGl2ZSA9IHZhbHVlRm4oe1xuICByZXN0cmljdDogJ0EnLFxuICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gICAgY3RybC4kdmlld0NoYW5nZUxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgc2NvcGUuJGV2YWwoYXR0ci5uZ0NoYW5nZSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjbGFzc0RpcmVjdGl2ZShuYW1lLCBzZWxlY3Rvcikge1xuICBuYW1lID0gJ25nQ2xhc3MnICsgbmFtZTtcbiAgcmV0dXJuIFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0FDJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBvbGRWYWw7XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbbmFtZV0sIG5nQ2xhc3NXYXRjaEFjdGlvbiwgdHJ1ZSk7XG5cbiAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnY2xhc3MnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIG5nQ2xhc3NXYXRjaEFjdGlvbihzY29wZS4kZXZhbChhdHRyW25hbWVdKSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgaWYgKG5hbWUgIT09ICduZ0NsYXNzJykge1xuICAgICAgICAgIHNjb3BlLiR3YXRjaCgnJGluZGV4JywgZnVuY3Rpb24oJGluZGV4LCBvbGQkaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIGpzaGludCBiaXR3aXNlOiBmYWxzZVxuICAgICAgICAgICAgdmFyIG1vZCA9ICRpbmRleCAmIDE7XG4gICAgICAgICAgICBpZiAobW9kICE9PSAob2xkJGluZGV4ICYgMSkpIHtcbiAgICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSBhcnJheUNsYXNzZXMoc2NvcGUuJGV2YWwoYXR0cltuYW1lXSkpO1xuICAgICAgICAgICAgICBtb2QgPT09IHNlbGVjdG9yID9cbiAgICAgICAgICAgICAgICBhZGRDbGFzc2VzKGNsYXNzZXMpIDpcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzc2VzKGNsYXNzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkQ2xhc3NlcyhjbGFzc2VzKSB7XG4gICAgICAgICAgdmFyIG5ld0NsYXNzZXMgPSBkaWdlc3RDbGFzc0NvdW50cyhjbGFzc2VzLCAxKTtcbiAgICAgICAgICBhdHRyLiRhZGRDbGFzcyhuZXdDbGFzc2VzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoY2xhc3Nlcykge1xuICAgICAgICAgIHZhciBuZXdDbGFzc2VzID0gZGlnZXN0Q2xhc3NDb3VudHMoY2xhc3NlcywgLTEpO1xuICAgICAgICAgIGF0dHIuJHJlbW92ZUNsYXNzKG5ld0NsYXNzZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZGlnZXN0Q2xhc3NDb3VudHMoY2xhc3NlcywgY291bnQpIHtcbiAgICAgICAgICAvLyBVc2UgY3JlYXRlTWFwKCkgdG8gcHJldmVudCBjbGFzcyBhc3N1bXB0aW9ucyBpbnZvbHZpbmcgcHJvcGVydHlcbiAgICAgICAgICAvLyBuYW1lcyBpbiBPYmplY3QucHJvdG90eXBlXG4gICAgICAgICAgdmFyIGNsYXNzQ291bnRzID0gZWxlbWVudC5kYXRhKCckY2xhc3NDb3VudHMnKSB8fCBjcmVhdGVNYXAoKTtcbiAgICAgICAgICB2YXIgY2xhc3Nlc1RvVXBkYXRlID0gW107XG4gICAgICAgICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGlmIChjb3VudCA+IDAgfHwgY2xhc3NDb3VudHNbY2xhc3NOYW1lXSkge1xuICAgICAgICAgICAgICBjbGFzc0NvdW50c1tjbGFzc05hbWVdID0gKGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gfHwgMCkgKyBjb3VudDtcbiAgICAgICAgICAgICAgaWYgKGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gPT09ICsoY291bnQgPiAwKSkge1xuICAgICAgICAgICAgICAgIGNsYXNzZXNUb1VwZGF0ZS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbGVtZW50LmRhdGEoJyRjbGFzc0NvdW50cycsIGNsYXNzQ291bnRzKTtcbiAgICAgICAgICByZXR1cm4gY2xhc3Nlc1RvVXBkYXRlLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcykge1xuICAgICAgICAgIHZhciB0b0FkZCA9IGFycmF5RGlmZmVyZW5jZShuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKTtcbiAgICAgICAgICB2YXIgdG9SZW1vdmUgPSBhcnJheURpZmZlcmVuY2Uob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7XG4gICAgICAgICAgdG9BZGQgPSBkaWdlc3RDbGFzc0NvdW50cyh0b0FkZCwgMSk7XG4gICAgICAgICAgdG9SZW1vdmUgPSBkaWdlc3RDbGFzc0NvdW50cyh0b1JlbW92ZSwgLTEpO1xuICAgICAgICAgIGlmICh0b0FkZCAmJiB0b0FkZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsIHRvQWRkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRvUmVtb3ZlICYmIHRvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgdG9SZW1vdmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG5nQ2xhc3NXYXRjaEFjdGlvbihuZXdWYWwpIHtcbiAgICAgICAgICBpZiAoc2VsZWN0b3IgPT09IHRydWUgfHwgc2NvcGUuJGluZGV4ICUgMiA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHZhciBuZXdDbGFzc2VzID0gYXJyYXlDbGFzc2VzKG5ld1ZhbCB8fCBbXSk7XG4gICAgICAgICAgICBpZiAoIW9sZFZhbCkge1xuICAgICAgICAgICAgICBhZGRDbGFzc2VzKG5ld0NsYXNzZXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghZXF1YWxzKG5ld1ZhbCxvbGRWYWwpKSB7XG4gICAgICAgICAgICAgIHZhciBvbGRDbGFzc2VzID0gYXJyYXlDbGFzc2VzKG9sZFZhbCk7XG4gICAgICAgICAgICAgIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG9sZFZhbCA9IHNoYWxsb3dDb3B5KG5ld1ZhbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYXJyYXlEaWZmZXJlbmNlKHRva2VuczEsIHRva2VuczIpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zMVtpXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b2tlbnMyLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgaWYgKHRva2VuID09IHRva2VuczJbal0pIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlcy5wdXNoKHRva2VuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXJyYXlDbGFzc2VzKGNsYXNzVmFsKSB7XG4gICAgICB2YXIgY2xhc3NlcyA9IFtdO1xuICAgICAgaWYgKGlzQXJyYXkoY2xhc3NWYWwpKSB7XG4gICAgICAgIGZvckVhY2goY2xhc3NWYWwsIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICBjbGFzc2VzID0gY2xhc3Nlcy5jb25jYXQoYXJyYXlDbGFzc2VzKHYpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhjbGFzc1ZhbCkpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzVmFsLnNwbGl0KCcgJyk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGNsYXNzVmFsKSkge1xuICAgICAgICBmb3JFYWNoKGNsYXNzVmFsLCBmdW5jdGlvbih2LCBrKSB7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLmNvbmNhdChrLnNwbGl0KCcgJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNsYXNzVmFsO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc1xuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xhc3NgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIGR5bmFtaWNhbGx5IHNldCBDU1MgY2xhc3NlcyBvbiBhbiBIVE1MIGVsZW1lbnQgYnkgZGF0YWJpbmRpbmdcbiAqIGFuIGV4cHJlc3Npb24gdGhhdCByZXByZXNlbnRzIGFsbCBjbGFzc2VzIHRvIGJlIGFkZGVkLlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgb3BlcmF0ZXMgaW4gdGhyZWUgZGlmZmVyZW50IHdheXMsIGRlcGVuZGluZyBvbiB3aGljaCBvZiB0aHJlZSB0eXBlcyB0aGUgZXhwcmVzc2lvblxuICogZXZhbHVhdGVzIHRvOlxuICpcbiAqIDEuIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlIHN0cmluZyBzaG91bGQgYmUgb25lIG9yIG1vcmUgc3BhY2UtZGVsaW1pdGVkIGNsYXNzXG4gKiBuYW1lcy5cbiAqXG4gKiAyLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gb2JqZWN0LCB0aGVuIGZvciBlYWNoIGtleS12YWx1ZSBwYWlyIG9mIHRoZVxuICogb2JqZWN0IHdpdGggYSB0cnV0aHkgdmFsdWUgdGhlIGNvcnJlc3BvbmRpbmcga2V5IGlzIHVzZWQgYXMgYSBjbGFzcyBuYW1lLlxuICpcbiAqIDMuIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhbiBhcnJheSwgZWFjaCBlbGVtZW50IG9mIHRoZSBhcnJheSBzaG91bGQgZWl0aGVyIGJlIGEgc3RyaW5nIGFzIGluXG4gKiB0eXBlIDEgb3IgYW4gb2JqZWN0IGFzIGluIHR5cGUgMi4gVGhpcyBtZWFucyB0aGF0IHlvdSBjYW4gbWl4IHN0cmluZ3MgYW5kIG9iamVjdHMgdG9nZXRoZXIgaW4gYW4gYXJyYXlcbiAqIHRvIGdpdmUgeW91IG1vcmUgY29udHJvbCBvdmVyIHdoYXQgQ1NTIGNsYXNzZXMgYXBwZWFyLiBTZWUgdGhlIGNvZGUgYmVsb3cgZm9yIGFuIGV4YW1wbGUgb2YgdGhpcy5cbiAqXG4gKlxuICogVGhlIGRpcmVjdGl2ZSB3b24ndCBhZGQgZHVwbGljYXRlIGNsYXNzZXMgaWYgYSBwYXJ0aWN1bGFyIGNsYXNzIHdhcyBhbHJlYWR5IHNldC5cbiAqXG4gKiBXaGVuIHRoZSBleHByZXNzaW9uIGNoYW5nZXMsIHRoZSBwcmV2aW91c2x5IGFkZGVkIGNsYXNzZXMgYXJlIHJlbW92ZWQgYW5kIG9ubHkgdGhlbiBhcmUgdGhlXG4gKiBuZXcgY2xhc3NlcyBhZGRlZC5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogKiphZGQqKiAtIGhhcHBlbnMganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRzXG4gKlxuICogKipyZW1vdmUqKiAtIGhhcHBlbnMganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHRcbiAqICAgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3NcbiAqICAgbmFtZXMsIGFuIGFycmF5LCBvciBhIG1hcCBvZiBjbGFzcyBuYW1lcyB0byBib29sZWFuIHZhbHVlcy4gSW4gdGhlIGNhc2Ugb2YgYSBtYXAsIHRoZVxuICogICBuYW1lcyBvZiB0aGUgcHJvcGVydGllcyB3aG9zZSB2YWx1ZXMgYXJlIHRydXRoeSB3aWxsIGJlIGFkZGVkIGFzIGNzcyBjbGFzc2VzIHRvIHRoZVxuICogICBlbGVtZW50LlxuICpcbiAqIEBleGFtcGxlIEV4YW1wbGUgdGhhdCBkZW1vbnN0cmF0ZXMgYmFzaWMgYmluZGluZ3MgdmlhIG5nQ2xhc3MgZGlyZWN0aXZlLlxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJ7c3RyaWtlOiBkZWxldGVkLCBib2xkOiBpbXBvcnRhbnQsICdoYXMtZXJyb3InOiBlcnJvcn1cIj5NYXAgU3ludGF4IEV4YW1wbGU8L3A+XG4gICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImRlbGV0ZWRcIj5cbiAgICAgICAgICBkZWxldGVkIChhcHBseSBcInN0cmlrZVwiIGNsYXNzKVxuICAgICAgIDwvbGFiZWw+PGJyPlxuICAgICAgIDxsYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJpbXBvcnRhbnRcIj5cbiAgICAgICAgICBpbXBvcnRhbnQgKGFwcGx5IFwiYm9sZFwiIGNsYXNzKVxuICAgICAgIDwvbGFiZWw+PGJyPlxuICAgICAgIDxsYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJlcnJvclwiPlxuICAgICAgICAgIGVycm9yIChhcHBseSBcImhhcy1lcnJvclwiIGNsYXNzKVxuICAgICAgIDwvbGFiZWw+XG4gICAgICAgPGhyPlxuICAgICAgIDxwIG5nLWNsYXNzPVwic3R5bGVcIj5Vc2luZyBTdHJpbmcgU3ludGF4PC9wPlxuICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic3R5bGVcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQgc3RyaWtlIHJlZFwiIGFyaWEtbGFiZWw9XCJUeXBlOiBib2xkIHN0cmlrZSByZWRcIj5cbiAgICAgICA8aHI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJbc3R5bGUxLCBzdHlsZTIsIHN0eWxlM11cIj5Vc2luZyBBcnJheSBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUxXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIj48YnI+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUyXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWQgMlwiPjxicj5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTNcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZCAzXCI+PGJyPlxuICAgICAgIDxocj5cbiAgICAgICA8cCBuZy1jbGFzcz1cIltzdHlsZTQsIHtvcmFuZ2U6IHdhcm5pbmd9XVwiPlVzaW5nIEFycmF5IGFuZCBNYXAgU3ludGF4PC9wPlxuICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInN0eWxlNFwiIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQsIHN0cmlrZVwiPjxicj5cbiAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwid2FybmluZ1wiPiB3YXJuaW5nIChhcHBseSBcIm9yYW5nZVwiIGNsYXNzKTwvbGFiZWw+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5zdHJpa2Uge1xuICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcbiAgICAgICB9XG4gICAgICAgLmJvbGQge1xuICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICB9XG4gICAgICAgLnJlZCB7XG4gICAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5oYXMtZXJyb3Ige1xuICAgICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XG4gICAgICAgfVxuICAgICAgIC5vcmFuZ2Uge1xuICAgICAgICAgICBjb2xvcjogb3JhbmdlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIHBzID0gZWxlbWVudC5hbGwoYnkuY3NzKCdwJykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSB0aGUgY2xhc3MnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QudG9NYXRjaCgvYm9sZC8pO1xuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QudG9NYXRjaCgvaGFzLWVycm9yLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2ltcG9ydGFudCcpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b01hdGNoKC9ib2xkLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Vycm9yJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL2hhcy1lcnJvci8pO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSBzdHJpbmcgZXhhbXBsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgxKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJycpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlJykpLnNlbmRLZXlzKCdyZWQnKTtcbiAgICAgICAgIGV4cGVjdChwcy5nZXQoMSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdyZWQnKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdhcnJheSBleGFtcGxlIHNob3VsZCBoYXZlIDMgY2xhc3NlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgyKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJycpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUxJykpLnNlbmRLZXlzKCdib2xkJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTInKSkuc2VuZEtleXMoJ3N0cmlrZScpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUzJykpLnNlbmRLZXlzKCdyZWQnKTtcbiAgICAgICAgIGV4cGVjdChwcy5nZXQoMikuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdib2xkIHN0cmlrZSByZWQnKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdhcnJheSB3aXRoIG1hcCBleGFtcGxlIHNob3VsZCBoYXZlIDIgY2xhc3NlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KHBzLmxhc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJycpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGU0JykpLnNlbmRLZXlzKCdib2xkJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd3YXJuaW5nJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QocHMubGFzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnYm9sZCBvcmFuZ2UnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuXG4gICAjIyBBbmltYXRpb25zXG5cbiAgIFRoZSBleGFtcGxlIGJlbG93IGRlbW9uc3RyYXRlcyBob3cgdG8gcGVyZm9ybSBhbmltYXRpb25zIHVzaW5nIG5nQ2xhc3MuXG5cbiAgIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IGlkPVwic2V0YnRuXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwic2V0XCIgbmctY2xpY2s9XCJteVZhcj0nbXktY2xhc3MnXCI+XG4gICAgICA8aW5wdXQgaWQ9XCJjbGVhcmJ0blwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cImNsZWFyXCIgbmctY2xpY2s9XCJteVZhcj0nJ1wiPlxuICAgICAgPGJyPlxuICAgICAgPHNwYW4gY2xhc3M9XCJiYXNlLWNsYXNzXCIgbmctY2xhc3M9XCJteVZhclwiPlNhbXBsZSBUZXh0PC9zcGFuPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuYmFzZS1jbGFzcyB7XG4gICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gICAgICAgfVxuXG4gICAgICAgLmJhc2UtY2xhc3MubXktY2xhc3Mge1xuICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgIGZvbnQtc2l6ZTozZW07XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsYXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5LmlkKCdzZXRidG4nKSkuY2xpY2soKTtcblxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcuYmFzZS1jbGFzcycpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5LmlkKCdjbGVhcmJ0bicpKS5jbGljaygpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG5cblxuICAgIyMgbmdDbGFzcyBhbmQgcHJlLWV4aXN0aW5nIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9uc1xuICAgVGhlIG5nQ2xhc3MgZGlyZWN0aXZlIHN0aWxsIHN1cHBvcnRzIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9ucyBldmVuIGlmIHRoZXkgZG8gbm90IGZvbGxvdyB0aGUgbmdBbmltYXRlIENTUyBuYW1pbmcgc3RydWN0dXJlLlxuICAgVXBvbiBhbmltYXRpb24gbmdBbmltYXRlIHdpbGwgYXBwbHkgc3VwcGxlbWVudGFyeSBDU1MgY2xhc3NlcyB0byB0cmFjayB0aGUgc3RhcnQgYW5kIGVuZCBvZiBhbiBhbmltYXRpb24sIGJ1dCB0aGlzIHdpbGwgbm90IGhpbmRlclxuICAgYW55IHByZS1leGlzdGluZyBDU1MgdHJhbnNpdGlvbnMgYWxyZWFkeSBvbiB0aGUgZWxlbWVudC4gVG8gZ2V0IGFuIGlkZWEgb2Ygd2hhdCBoYXBwZW5zIGR1cmluZyBhIGNsYXNzLWJhc2VkIGFuaW1hdGlvbiwgYmUgc3VyZVxuICAgdG8gdmlldyB0aGUgc3RlcCBieSBzdGVwIGRldGFpbHMgb2Yge0BsaW5rICRhbmltYXRlI2FkZENsYXNzICRhbmltYXRlLmFkZENsYXNzfSBhbmRcbiAgIHtAbGluayAkYW5pbWF0ZSNyZW1vdmVDbGFzcyAkYW5pbWF0ZS5yZW1vdmVDbGFzc30uXG4gKi9cbnZhciBuZ0NsYXNzRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJycsIHRydWUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xhc3NPZGRcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluXG4gKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhblxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NPZGQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlIHJlc3VsdFxuICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgIHt7bmFtZX19XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L29sPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAub2RkIHtcbiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5ldmVuIHtcbiAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9vZGQvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2xhc3NPZGREaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnT2RkJywgMCk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc0V2ZW5cbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluXG4gKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhblxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NFdmVuIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZVxuICogICByZXN1bHQgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3MgbmFtZXMgb3IgYW4gYXJyYXkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8b2wgbmctaW5pdD1cIm5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J11cIj5cbiAgICAgICAgICA8bGkgbmctcmVwZWF0PVwibmFtZSBpbiBuYW1lc1wiPlxuICAgICAgICAgICA8c3BhbiBuZy1jbGFzcy1vZGQ9XCInb2RkJ1wiIG5nLWNsYXNzLWV2ZW49XCInZXZlbidcIj5cbiAgICAgICAgICAgICB7e25hbWV9fSAmbmJzcDsgJm5ic3A7ICZuYnNwO1xuICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC9vbD5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLm9kZCB7XG4gICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgIH1cbiAgICAgICAuZXZlbiB7XG4gICAgICAgICBjb2xvcjogYmx1ZTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygwKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgdG9NYXRjaCgvb2RkLyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygxKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgdG9NYXRjaCgvZXZlbi8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCdFdmVuJywgMSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbG9ha1xuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIHByZXZlbnQgdGhlIEFuZ3VsYXIgaHRtbCB0ZW1wbGF0ZSBmcm9tIGJlaW5nIGJyaWVmbHlcbiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3ICh1bmNvbXBpbGVkKSBmb3JtIHdoaWxlIHlvdXIgYXBwbGljYXRpb24gaXMgbG9hZGluZy4gVXNlIHRoaXNcbiAqIGRpcmVjdGl2ZSB0byBhdm9pZCB0aGUgdW5kZXNpcmFibGUgZmxpY2tlciBlZmZlY3QgY2F1c2VkIGJ5IHRoZSBodG1sIHRlbXBsYXRlIGRpc3BsYXkuXG4gKlxuICogVGhlIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCB0byB0aGUgYDxib2R5PmAgZWxlbWVudCwgYnV0IHRoZSBwcmVmZXJyZWQgdXNhZ2UgaXMgdG8gYXBwbHlcbiAqIG11bHRpcGxlIGBuZ0Nsb2FrYCBkaXJlY3RpdmVzIHRvIHNtYWxsIHBvcnRpb25zIG9mIHRoZSBwYWdlIHRvIHBlcm1pdCBwcm9ncmVzc2l2ZSByZW5kZXJpbmdcbiAqIG9mIHRoZSBicm93c2VyIHZpZXcuXG4gKlxuICogYG5nQ2xvYWtgIHdvcmtzIGluIGNvb3BlcmF0aW9uIHdpdGggdGhlIGZvbGxvd2luZyBjc3MgcnVsZSBlbWJlZGRlZCB3aXRoaW4gYGFuZ3VsYXIuanNgIGFuZFxuICogYGFuZ3VsYXIubWluLmpzYC5cbiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICpcbiAqIGBgYGNzc1xuICogW25nXFw6Y2xvYWtdLCBbbmctY2xvYWtdLCBbZGF0YS1uZy1jbG9ha10sIFt4LW5nLWNsb2FrXSwgLm5nLWNsb2FrLCAueC1uZy1jbG9hayB7XG4gKiAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhpcyBjc3MgcnVsZSBpcyBsb2FkZWQgYnkgdGhlIGJyb3dzZXIsIGFsbCBodG1sIGVsZW1lbnRzIChpbmNsdWRpbmcgdGhlaXIgY2hpbGRyZW4pIHRoYXRcbiAqIGFyZSB0YWdnZWQgd2l0aCB0aGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBhcmUgaGlkZGVuLiBXaGVuIEFuZ3VsYXIgZW5jb3VudGVycyB0aGlzIGRpcmVjdGl2ZVxuICogZHVyaW5nIHRoZSBjb21waWxhdGlvbiBvZiB0aGUgdGVtcGxhdGUgaXQgZGVsZXRlcyB0aGUgYG5nQ2xvYWtgIGVsZW1lbnQgYXR0cmlidXRlLCBtYWtpbmdcbiAqIHRoZSBjb21waWxlZCBlbGVtZW50IHZpc2libGUuXG4gKlxuICogRm9yIHRoZSBiZXN0IHJlc3VsdCwgdGhlIGBhbmd1bGFyLmpzYCBzY3JpcHQgbXVzdCBiZSBsb2FkZWQgaW4gdGhlIGhlYWQgc2VjdGlvbiBvZiB0aGUgaHRtbFxuICogZG9jdW1lbnQ7IGFsdGVybmF0aXZlbHksIHRoZSBjc3MgcnVsZSBhYm92ZSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSBleHRlcm5hbCBzdHlsZXNoZWV0IG9mIHRoZVxuICogYXBwbGljYXRpb24uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8ZGl2IGlkPVwidGVtcGxhdGUxXCIgbmctY2xvYWs+e3sgJ2hlbGxvJyB9fTwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwidGVtcGxhdGUyXCIgY2xhc3M9XCJuZy1jbG9ha1wiPnt7ICd3b3JsZCcgfX08L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCByZW1vdmUgdGhlIHRlbXBsYXRlIGRpcmVjdGl2ZSBhbmQgY3NzIGNsYXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoJCgnI3RlbXBsYXRlMScpLmdldEF0dHJpYnV0ZSgnbmctY2xvYWsnKSkuXG4gICAgICAgICAgIHRvQmVOdWxsKCk7XG4gICAgICAgICBleHBlY3QoJCgnI3RlbXBsYXRlMicpLmdldEF0dHJpYnV0ZSgnbmctY2xvYWsnKSkuXG4gICAgICAgICAgIHRvQmVOdWxsKCk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKi9cbnZhciBuZ0Nsb2FrRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgYXR0ci4kc2V0KCduZ0Nsb2FrJywgdW5kZWZpbmVkKTtcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCduZy1jbG9haycpO1xuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NvbnRyb2xsZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgYXR0YWNoZXMgYSBjb250cm9sbGVyIGNsYXNzIHRvIHRoZSB2aWV3LiBUaGlzIGlzIGEga2V5IGFzcGVjdCBvZiBob3cgYW5ndWxhclxuICogc3VwcG9ydHMgdGhlIHByaW5jaXBsZXMgYmVoaW5kIHRoZSBNb2RlbC1WaWV3LUNvbnRyb2xsZXIgZGVzaWduIHBhdHRlcm4uXG4gKlxuICogTVZDIGNvbXBvbmVudHMgaW4gYW5ndWxhcjpcbiAqXG4gKiAqIE1vZGVsIOKAlCBNb2RlbHMgYXJlIHRoZSBwcm9wZXJ0aWVzIG9mIGEgc2NvcGU7IHNjb3BlcyBhcmUgYXR0YWNoZWQgdG8gdGhlIERPTSB3aGVyZSBzY29wZSBwcm9wZXJ0aWVzXG4gKiAgIGFyZSBhY2Nlc3NlZCB0aHJvdWdoIGJpbmRpbmdzLlxuICogKiBWaWV3IOKAlCBUaGUgdGVtcGxhdGUgKEhUTUwgd2l0aCBkYXRhIGJpbmRpbmdzKSB0aGF0IGlzIHJlbmRlcmVkIGludG8gdGhlIFZpZXcuXG4gKiAqIENvbnRyb2xsZXIg4oCUIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgc3BlY2lmaWVzIGEgQ29udHJvbGxlciBjbGFzczsgdGhlIGNsYXNzIGNvbnRhaW5zIGJ1c2luZXNzXG4gKiAgIGxvZ2ljIGJlaGluZCB0aGUgYXBwbGljYXRpb24gdG8gZGVjb3JhdGUgdGhlIHNjb3BlIHdpdGggZnVuY3Rpb25zIGFuZCB2YWx1ZXNcbiAqXG4gKiBOb3RlIHRoYXQgeW91IGNhbiBhbHNvIGF0dGFjaCBjb250cm9sbGVycyB0byB0aGUgRE9NIGJ5IGRlY2xhcmluZyBpdCBpbiBhIHJvdXRlIGRlZmluaXRpb25cbiAqIHZpYSB0aGUge0BsaW5rIG5nUm91dGUuJHJvdXRlICRyb3V0ZX0gc2VydmljZS4gQSBjb21tb24gbWlzdGFrZSBpcyB0byBkZWNsYXJlIHRoZSBjb250cm9sbGVyXG4gKiBhZ2FpbiB1c2luZyBgbmctY29udHJvbGxlcmAgaW4gdGhlIHRlbXBsYXRlIGl0c2VsZi4gIFRoaXMgd2lsbCBjYXVzZSB0aGUgY29udHJvbGxlciB0byBiZSBhdHRhY2hlZFxuICogYW5kIGV4ZWN1dGVkIHR3aWNlLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgNTAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29udHJvbGxlciBOYW1lIG9mIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZSBjdXJyZW50XG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciAkY29udHJvbGxlclByb3ZpZGVyfSBvciBhbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufVxuICogdGhhdCBvbiB0aGUgY3VycmVudCBzY29wZSBldmFsdWF0ZXMgdG8gYSBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBUaGUgY29udHJvbGxlciBpbnN0YW5jZSBjYW4gYmUgcHVibGlzaGVkIGludG8gYSBzY29wZSBwcm9wZXJ0eSBieSBzcGVjaWZ5aW5nXG4gKiBgbmctY29udHJvbGxlcj1cImFzIHByb3BlcnR5TmFtZVwiYC5cbiAqXG4gKiBJZiB0aGUgY3VycmVudCBgJGNvbnRyb2xsZXJQcm92aWRlcmAgaXMgY29uZmlndXJlZCB0byB1c2UgZ2xvYmFscyAodmlhXG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNhbGxvd0dsb2JhbHMgYCRjb250cm9sbGVyUHJvdmlkZXIuYWxsb3dHbG9iYWxzKClgIH0pLCB0aGlzIG1heVxuICogYWxzbyBiZSB0aGUgbmFtZSBvZiBhIGdsb2JhbGx5IGFjY2Vzc2libGUgY29uc3RydWN0b3IgZnVuY3Rpb24gKG5vdCByZWNvbW1lbmRlZCkuXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgaXMgYSBzaW1wbGUgZm9ybSBmb3IgZWRpdGluZyB1c2VyIGNvbnRhY3QgaW5mb3JtYXRpb24uIEFkZGluZywgcmVtb3ZpbmcsIGNsZWFyaW5nLCBhbmRcbiAqIGdyZWV0aW5nIGFyZSBtZXRob2RzIGRlY2xhcmVkIG9uIHRoZSBjb250cm9sbGVyIChzZWUgc291cmNlIHRhYikuIFRoZXNlIG1ldGhvZHMgY2FuXG4gKiBlYXNpbHkgYmUgY2FsbGVkIGZyb20gdGhlIGFuZ3VsYXIgbWFya3VwLiBBbnkgY2hhbmdlcyB0byB0aGUgZGF0YSBhcmUgYXV0b21hdGljYWxseSByZWZsZWN0ZWRcbiAqIGluIHRoZSBWaWV3IHdpdGhvdXQgdGhlIG5lZWQgZm9yIGEgbWFudWFsIHVwZGF0ZS5cbiAqXG4gKiBUd28gZGlmZmVyZW50IGRlY2xhcmF0aW9uIHN0eWxlcyBhcmUgaW5jbHVkZWQgYmVsb3c6XG4gKlxuICogKiBvbmUgYmluZHMgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBkaXJlY3RseSBvbnRvIHRoZSBjb250cm9sbGVyIHVzaW5nIGB0aGlzYDpcbiAqIGBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMSBhcyBzZXR0aW5nc1wiYFxuICogKiBvbmUgaW5qZWN0cyBgJHNjb3BlYCBpbnRvIHRoZSBjb250cm9sbGVyOlxuICogYG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIyXCJgXG4gKlxuICogVGhlIHNlY29uZCBvcHRpb24gaXMgbW9yZSBjb21tb24gaW4gdGhlIEFuZ3VsYXIgY29tbXVuaXR5LCBhbmQgaXMgZ2VuZXJhbGx5IHVzZWQgaW4gYm9pbGVycGxhdGVzXG4gKiBhbmQgaW4gdGhpcyBndWlkZS4gSG93ZXZlciwgdGhlcmUgYXJlIGFkdmFudGFnZXMgdG8gYmluZGluZyBwcm9wZXJ0aWVzIGRpcmVjdGx5IHRvIHRoZSBjb250cm9sbGVyXG4gKiBhbmQgYXZvaWRpbmcgc2NvcGUuXG4gKlxuICogKiBVc2luZyBgY29udHJvbGxlciBhc2AgbWFrZXMgaXQgb2J2aW91cyB3aGljaCBjb250cm9sbGVyIHlvdSBhcmUgYWNjZXNzaW5nIGluIHRoZSB0ZW1wbGF0ZSB3aGVuXG4gKiBtdWx0aXBsZSBjb250cm9sbGVycyBhcHBseSB0byBhbiBlbGVtZW50LlxuICogKiBJZiB5b3UgYXJlIHdyaXRpbmcgeW91ciBjb250cm9sbGVycyBhcyBjbGFzc2VzIHlvdSBoYXZlIGVhc2llciBhY2Nlc3MgdG8gdGhlIHByb3BlcnRpZXMgYW5kXG4gKiBtZXRob2RzLCB3aGljaCB3aWxsIGFwcGVhciBvbiB0aGUgc2NvcGUsIGZyb20gaW5zaWRlIHRoZSBjb250cm9sbGVyIGNvZGUuXG4gKiAqIFNpbmNlIHRoZXJlIGlzIGFsd2F5cyBhIGAuYCBpbiB0aGUgYmluZGluZ3MsIHlvdSBkb24ndCBoYXZlIHRvIHdvcnJ5IGFib3V0IHByb3RvdHlwYWxcbiAqIGluaGVyaXRhbmNlIG1hc2tpbmcgcHJpbWl0aXZlcy5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBgY29udHJvbGxlciBhc2Agc3ludGF4LlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0NvbnRyb2xsZXJBc1wiIG1vZHVsZT1cImNvbnRyb2xsZXJBc0V4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDxkaXYgaWQ9XCJjdHJsLWFzLWV4bXBsXCIgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjEgYXMgc2V0dGluZ3NcIj5cbiAqICAgICAgPGxhYmVsPk5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic2V0dGluZ3MubmFtZVwiLz48L2xhYmVsPlxuICogICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic2V0dGluZ3MuZ3JlZXQoKVwiPmdyZWV0PC9idXR0b24+PGJyLz5cbiAqICAgICAgQ29udGFjdDpcbiAqICAgICAgPHVsPlxuICogICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzXCI+XG4gKiAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwiY29udGFjdC50eXBlXCIgYXJpYS1sYWJlbD1cIkNvbnRhY3QgbWV0aG9kXCIgaWQ9XCJzZWxlY3Rfe3skaW5kZXh9fVwiPlxuICogICAgICAgICAgICAgPG9wdGlvbj5waG9uZTwvb3B0aW9uPlxuICogICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPlxuICogICAgICAgICAgPC9zZWxlY3Q+XG4gKiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cImNvbnRhY3QudmFsdWVcIiBhcmlhLWxhYmVsbGVkYnk9XCJzZWxlY3Rfe3skaW5kZXh9fVwiIC8+XG4gKiAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic2V0dGluZ3MuY2xlYXJDb250YWN0KGNvbnRhY3QpXCI+Y2xlYXI8L2J1dHRvbj5cbiAqICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5yZW1vdmVDb250YWN0KGNvbnRhY3QpXCIgYXJpYS1sYWJlbD1cIlJlbW92ZVwiPlg8L2J1dHRvbj5cbiAqICAgICAgICA8L2xpPlxuICogICAgICAgIDxsaT48YnV0dG9uIG5nLWNsaWNrPVwic2V0dGluZ3MuYWRkQ29udGFjdCgpXCI+YWRkPC9idXR0b24+PC9saT5cbiAqICAgICA8L3VsPlxuICogICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgYW5ndWxhci5tb2R1bGUoJ2NvbnRyb2xsZXJBc0V4YW1wbGUnLCBbXSlcbiAqICAgICAgLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ29udHJvbGxlcjEnLCBTZXR0aW5nc0NvbnRyb2xsZXIxKTtcbiAqXG4gKiAgICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIxKCkge1xuICogICAgICB0aGlzLm5hbWUgPSBcIkpvaG4gU21pdGhcIjtcbiAqICAgICAgdGhpcy5jb250YWN0cyA9IFtcbiAqICAgICAgICB7dHlwZTogJ3Bob25lJywgdmFsdWU6ICc0MDggNTU1IDEyMTInfSxcbiAqICAgICAgICB7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICdqb2huLnNtaXRoQGV4YW1wbGUub3JnJ30gXTtcbiAqICAgIH1cbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xuICogICAgICBhbGVydCh0aGlzLm5hbWUpO1xuICogICAgfTtcbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgIHRoaXMuY29udGFjdHMucHVzaCh7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICd5b3VybmFtZUBleGFtcGxlLm9yZyd9KTtcbiAqICAgIH07XG4gKlxuICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkge1xuICogICAgIHZhciBpbmRleCA9IHRoaXMuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICB0aGlzLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICB9O1xuICpcbiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgY29udGFjdC50eXBlID0gJ3Bob25lJztcbiAqICAgICAgY29udGFjdC52YWx1ZSA9ICcnO1xuICogICAgfTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyIGFzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5pZCgnY3RybC1hcy1leG1wbCcpKTtcbiAqICAgICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5Lm1vZGVsKCdzZXR0aW5ncy5uYW1lJykpXG4gKiAgICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpO1xuICpcbiAqICAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMCkpO1xuICogICAgICAgdmFyIHNlY29uZFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnNDA4IDU1NSAxMjEyJyk7XG4gKlxuICogICAgICAgZXhwZWN0KHNlY29uZFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnam9obi5zbWl0aEBleGFtcGxlLm9yZycpO1xuICpcbiAqICAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJycpO1xuICpcbiAqICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0cycpLnJvdygyKSlcbiAqICAgICAgICAgICAuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKVxuICogICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJ3lvdXJuYW1lQGV4YW1wbGUub3JnJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBcImF0dGFjaCB0byBgJHNjb3BlYFwiIHN0eWxlIG9mIGNvbnRyb2xsZXIuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlclwiIG1vZHVsZT1cImNvbnRyb2xsZXJFeGFtcGxlXCI+XG4gKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgPGRpdiBpZD1cImN0cmwtZXhtcGxcIiBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMlwiPlxuICogICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIi8+PC9sYWJlbD5cbiAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZ3JlZXQoKVwiPmdyZWV0PC9idXR0b24+PGJyLz5cbiAqICAgICBDb250YWN0OlxuICogICAgIDx1bD5cbiAqICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIiBpZD1cInNlbGVjdF97eyRpbmRleH19XCI+XG4gKiAgICAgICAgICAgIDxvcHRpb24+cGhvbmU8L29wdGlvbj5cbiAqICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPlxuICogICAgICAgICA8L3NlbGVjdD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJjb250YWN0LnZhbHVlXCIgYXJpYS1sYWJlbGxlZGJ5PVwic2VsZWN0X3t7JGluZGV4fX1cIiAvPlxuICogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY2xlYXJDb250YWN0KGNvbnRhY3QpXCI+Y2xlYXI8L2J1dHRvbj5cbiAqICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInJlbW92ZUNvbnRhY3QoY29udGFjdClcIj5YPC9idXR0b24+XG4gKiAgICAgICA8L2xpPlxuICogICAgICAgPGxpPlsgPGJ1dHRvbiBuZy1jbGljaz1cImFkZENvbnRhY3QoKVwiPmFkZDwvYnV0dG9uPiBdPC9saT5cbiAqICAgIDwvdWw+XG4gKiAgIDwvZGl2PlxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgIGFuZ3VsYXIubW9kdWxlKCdjb250cm9sbGVyRXhhbXBsZScsIFtdKVxuICogICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXIyJywgWyckc2NvcGUnLCBTZXR0aW5nc0NvbnRyb2xsZXIyXSk7XG4gKlxuICogICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIyKCRzY29wZSkge1xuICogICAgICRzY29wZS5uYW1lID0gXCJKb2huIFNtaXRoXCI7XG4gKiAgICAgJHNjb3BlLmNvbnRhY3RzID0gW1xuICogICAgICAge3R5cGU6J3Bob25lJywgdmFsdWU6JzQwOCA1NTUgMTIxMid9LFxuICogICAgICAge3R5cGU6J2VtYWlsJywgdmFsdWU6J2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnfSBdO1xuICpcbiAqICAgICAkc2NvcGUuZ3JlZXQgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgIGFsZXJ0KCRzY29wZS5uYW1lKTtcbiAqICAgICB9O1xuICpcbiAqICAgICAkc2NvcGUuYWRkQ29udGFjdCA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnB1c2goe3R5cGU6J2VtYWlsJywgdmFsdWU6J3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pO1xuICogICAgIH07XG4gKlxuICogICAgICRzY29wZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7XG4gKiAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICAgfTtcbiAqXG4gKiAgICAgJHNjb3BlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgIGNvbnRhY3QudHlwZSA9ICdwaG9uZSc7XG4gKiAgICAgICBjb250YWN0LnZhbHVlID0gJyc7XG4gKiAgICAgfTtcbiAqICAgfVxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAqICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQoYnkuaWQoJ2N0cmwtZXhtcGwnKSk7XG4gKlxuICogICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJ0pvaG4gU21pdGgnKTtcbiAqXG4gKiAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygwKSk7XG4gKiAgICAgIHZhciBzZWNvbmRSZXBlYXQgPVxuICogICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpO1xuICogICAgICBleHBlY3Qoc2Vjb25kUmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTtcbiAqXG4gKiAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgIC50b0JlKCcnKTtcbiAqXG4gKiAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIGNvbnRhY3RzJykucm93KDIpKVxuICogICAgICAgICAgLmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAudG9CZSgneW91cm5hbWVAZXhhbXBsZS5vcmcnKTtcbiAqICAgIH0pO1xuICogIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuXG4gKi9cbnZhciBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUgPSBbZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogdHJ1ZSxcbiAgICBjb250cm9sbGVyOiAnQCcsXG4gICAgcHJpb3JpdHk6IDUwMFxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDc3BcbiAqXG4gKiBAZWxlbWVudCBodG1sXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBBbmd1bGFyIGhhcyBzb21lIGZlYXR1cmVzIHRoYXQgY2FuIGJyZWFrIGNlcnRhaW5cbiAqIFtDU1AgKENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQKSBydWxlcy5cbiAqXG4gKiBJZiB5b3UgaW50ZW5kIHRvIGltcGxlbWVudCB0aGVzZSBydWxlcyB0aGVuIHlvdSBtdXN0IHRlbGwgQW5ndWxhciBub3QgdG8gdXNlIHRoZXNlIGZlYXR1cmVzLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IHdoZW4gZGV2ZWxvcGluZyB0aGluZ3MgbGlrZSBHb29nbGUgQ2hyb21lIEV4dGVuc2lvbnMgb3IgVW5pdmVyc2FsIFdpbmRvd3MgQXBwcy5cbiAqXG4gKlxuICogVGhlIGZvbGxvd2luZyBydWxlcyBhZmZlY3QgQW5ndWxhcjpcbiAqXG4gKiAqIGB1bnNhZmUtZXZhbGA6IHRoaXMgcnVsZSBmb3JiaWRzIGFwcHMgdG8gdXNlIGBldmFsYCBvciBgRnVuY3Rpb24oc3RyaW5nKWAgZ2VuZXJhdGVkIGZ1bmN0aW9uc1xuICogKGFtb25nIG90aGVyIHRoaW5ncykuIEFuZ3VsYXIgbWFrZXMgdXNlIG9mIHRoaXMgaW4gdGhlIHtAbGluayAkcGFyc2V9IHNlcnZpY2UgdG8gcHJvdmlkZSBhIDMwJVxuICogaW5jcmVhc2UgaW4gdGhlIHNwZWVkIG9mIGV2YWx1YXRpbmcgQW5ndWxhciBleHByZXNzaW9ucy5cbiAqXG4gKiAqIGB1bnNhZmUtaW5saW5lYDogdGhpcyBydWxlIGZvcmJpZHMgYXBwcyBmcm9tIGluamVjdCBjdXN0b20gc3R5bGVzIGludG8gdGhlIGRvY3VtZW50LiBBbmd1bGFyXG4gKiBtYWtlcyB1c2Ugb2YgdGhpcyB0byBpbmNsdWRlIHNvbWUgQ1NTIHJ1bGVzIChlLmcuIHtAbGluayBuZ0Nsb2FrfSBhbmQge0BsaW5rIG5nSGlkZX0pLlxuICogVG8gbWFrZSB0aGVzZSBkaXJlY3RpdmVzIHdvcmsgd2hlbiBhIENTUCBydWxlIGlzIGJsb2NraW5nIGlubGluZSBzdHlsZXMsIHlvdSBtdXN0IGxpbmsgdG8gdGhlXG4gKiBgYW5ndWxhci1jc3AuY3NzYCBpbiB5b3VyIEhUTUwgbWFudWFsbHkuXG4gKlxuICogSWYgeW91IGRvIG5vdCBwcm92aWRlIGBuZ0NzcGAgdGhlbiBBbmd1bGFyIHRyaWVzIHRvIGF1dG9kZXRlY3QgaWYgQ1NQIGlzIGJsb2NraW5nIHVuc2FmZS1ldmFsXG4gKiBhbmQgYXV0b21hdGljYWxseSBkZWFjdGl2YXRlcyB0aGlzIGZlYXR1cmUgaW4gdGhlIHtAbGluayAkcGFyc2V9IHNlcnZpY2UuIFRoaXMgYXV0b2RldGVjdGlvbixcbiAqIGhvd2V2ZXIsIHRyaWdnZXJzIGEgQ1NQIGVycm9yIHRvIGJlIGxvZ2dlZCBpbiB0aGUgY29uc29sZTpcbiAqXG4gKiBgYGBcbiAqIFJlZnVzZWQgdG8gZXZhbHVhdGUgYSBzdHJpbmcgYXMgSmF2YVNjcmlwdCBiZWNhdXNlICd1bnNhZmUtZXZhbCcgaXMgbm90IGFuIGFsbG93ZWQgc291cmNlIG9mXG4gKiBzY3JpcHQgaW4gdGhlIGZvbGxvd2luZyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBkaXJlY3RpdmU6IFwiZGVmYXVsdC1zcmMgJ3NlbGYnXCIuIE5vdGUgdGhhdFxuICogJ3NjcmlwdC1zcmMnIHdhcyBub3QgZXhwbGljaXRseSBzZXQsIHNvICdkZWZhdWx0LXNyYycgaXMgdXNlZCBhcyBhIGZhbGxiYWNrLlxuICogYGBgXG4gKlxuICogVGhpcyBlcnJvciBpcyBoYXJtbGVzcyBidXQgYW5ub3lpbmcuIFRvIHByZXZlbnQgdGhlIGVycm9yIGZyb20gc2hvd2luZyB1cCwgcHV0IHRoZSBgbmdDc3BgXG4gKiBkaXJlY3RpdmUgb24gYW4gZWxlbWVudCBvZiB0aGUgSFRNTCBkb2N1bWVudCB0aGF0IGFwcGVhcnMgYmVmb3JlIHRoZSBgPHNjcmlwdD5gIHRhZyB0aGF0IGxvYWRzXG4gKiB0aGUgYGFuZ3VsYXIuanNgIGZpbGUuXG4gKlxuICogKk5vdGU6IFRoaXMgZGlyZWN0aXZlIGlzIG9ubHkgYXZhaWxhYmxlIGluIHRoZSBgbmctY3NwYCBhbmQgYGRhdGEtbmctY3NwYCBhdHRyaWJ1dGUgZm9ybS4qXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IHdoaWNoIG9mIHRoZSBDU1AgcmVsYXRlZCBBbmd1bGFyIGZlYXR1cmVzIHNob3VsZCBiZSBkZWFjdGl2YXRlZCBieSBwcm92aWRpbmdcbiAqIGEgdmFsdWUgZm9yIHRoZSBgbmctY3NwYCBhdHRyaWJ1dGUuIFRoZSBvcHRpb25zIGFyZSBhcyBmb2xsb3dzOlxuICpcbiAqICogbm8taW5saW5lLXN0eWxlOiB0aGlzIHN0b3BzIEFuZ3VsYXIgZnJvbSBpbmplY3RpbmcgQ1NTIHN0eWxlcyBpbnRvIHRoZSBET01cbiAqXG4gKiAqIG5vLXVuc2FmZS1ldmFsOiB0aGlzIHN0b3BzIEFuZ3VsYXIgZnJvbSBvcHRpbWlzaW5nICRwYXJzZSB3aXRoIHVuc2FmZSBldmFsIG9mIHN0cmluZ3NcbiAqXG4gKiBZb3UgY2FuIHVzZSB0aGVzZSB2YWx1ZXMgaW4gdGhlIGZvbGxvd2luZyBjb21iaW5hdGlvbnM6XG4gKlxuICpcbiAqICogTm8gZGVjbGFyYXRpb24gbWVhbnMgdGhhdCBBbmd1bGFyIHdpbGwgYXNzdW1lIHRoYXQgeW91IGNhbiBkbyBpbmxpbmUgc3R5bGVzLCBidXQgaXQgd2lsbCBkb1xuICogYSBydW50aW1lIGNoZWNrIGZvciB1bnNhZmUtZXZhbC4gRS5nLiBgPGJvZHk+YC4gVGhpcyBpcyBiYWNrd2FyZGx5IGNvbXBhdGlibGUgd2l0aCBwcmV2aW91cyB2ZXJzaW9uc1xuICogb2YgQW5ndWxhci5cbiAqXG4gKiAqIEEgc2ltcGxlIGBuZy1jc3BgIChvciBgZGF0YS1uZy1jc3BgKSBhdHRyaWJ1dGUgd2lsbCB0ZWxsIEFuZ3VsYXIgdG8gZGVhY3RpdmF0ZSBib3RoIGlubGluZVxuICogc3R5bGVzIGFuZCB1bnNhZmUgZXZhbC4gRS5nLiBgPGJvZHkgbmctY3NwPmAuIFRoaXMgaXMgYmFja3dhcmRseSBjb21wYXRpYmxlIHdpdGggcHJldmlvdXMgdmVyc2lvbnNcbiAqIG9mIEFuZ3VsYXIuXG4gKlxuICogKiBTcGVjaWZ5aW5nIG9ubHkgYG5vLXVuc2FmZS1ldmFsYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgdXNlIGV2YWwsIGJ1dCB0aGF0IHdlIGNhbiBpbmplY3RcbiAqIGlubGluZSBzdHlsZXMuIEUuZy4gYDxib2R5IG5nLWNzcD1cIm5vLXVuc2FmZS1ldmFsXCI+YC5cbiAqXG4gKiAqIFNwZWNpZnlpbmcgb25seSBgbm8taW5saW5lLXN0eWxlYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgaW5qZWN0IHN0eWxlcywgYnV0IHRoYXQgd2UgY2FuXG4gKiBydW4gZXZhbCAtIG5vIGF1dG9tY2F0aWMgY2hlY2sgZm9yIHVuc2FmZSBldmFsIHdpbGwgb2NjdXIuIEUuZy4gYDxib2R5IG5nLWNzcD1cIm5vLWlubGluZS1zdHlsZVwiPmBcbiAqXG4gKiAqIFNwZWNpZnlpbmcgYm90aCBgbm8tdW5zYWZlLWV2YWxgIGFuZCBgbm8taW5saW5lLXN0eWxlYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgaW5qZWN0XG4gKiBzdHlsZXMgbm9yIHVzZSBldmFsLCB3aGljaCBpcyB0aGUgc2FtZSBhcyBhbiBlbXB0eTogbmctY3NwLlxuICogRS5nLmA8Ym9keSBuZy1jc3A9XCJuby1pbmxpbmUtc3R5bGU7bm8tdW5zYWZlLWV2YWxcIj5gXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gYXBwbHkgdGhlIGBuZ0NzcGAgZGlyZWN0aXZlIHRvIHRoZSBgaHRtbGAgdGFnLlxuICAgYGBgaHRtbFxuICAgICA8IWRvY3R5cGUgaHRtbD5cbiAgICAgPGh0bWwgbmctYXBwIG5nLWNzcD5cbiAgICAgLi4uXG4gICAgIC4uLlxuICAgICA8L2h0bWw+XG4gICBgYGBcbiAgKiBAZXhhbXBsZVxuICAgICAgLy8gTm90ZTogdGhlIHN1ZmZpeCBgLmNzcGAgaW4gdGhlIGV4YW1wbGUgbmFtZSB0cmlnZ2Vyc1xuICAgICAgLy8gY3NwIG1vZGUgaW4gb3VyIGh0dHAgc2VydmVyIVxuICAgICAgPGV4YW1wbGUgbmFtZT1cImV4YW1wbGUuY3NwXCIgbW9kdWxlPVwiY3NwRXhhbXBsZVwiIG5nLWNzcD1cInRydWVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNYWluQ29udHJvbGxlciBhcyBjdHJsXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY3RybC5pbmMoKVwiIGlkPVwiaW5jXCI+SW5jcmVtZW50PC9idXR0b24+XG4gICAgICAgICAgICAgIDxzcGFuIGlkPVwiY291bnRlclwiPlxuICAgICAgICAgICAgICAgIHt7Y3RybC5jb3VudGVyfX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjdHJsLmV2aWwoKVwiIGlkPVwiZXZpbFwiPkV2aWw8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJldmlsRXJyb3JcIj5cbiAgICAgICAgICAgICAgICB7e2N0cmwuZXZpbEVycm9yfX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY3NwRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdNYWluQ29udHJvbGxlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnRlciA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY291bnRlcisrO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5ldmlsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAvLyBqc2hpbnQgZXZpbDp0cnVlXG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBldmFsKCcxKzInKTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmlsRXJyb3IgPSBlLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB1dGlsLCB3ZWJkcml2ZXI7XG5cbiAgICAgICAgICB2YXIgaW5jQnRuID0gZWxlbWVudChieS5pZCgnaW5jJykpO1xuICAgICAgICAgIHZhciBjb3VudGVyID0gZWxlbWVudChieS5pZCgnY291bnRlcicpKTtcbiAgICAgICAgICB2YXIgZXZpbEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2V2aWwnKSk7XG4gICAgICAgICAgdmFyIGV2aWxFcnJvciA9IGVsZW1lbnQoYnkuaWQoJ2V2aWxFcnJvcicpKTtcblxuICAgICAgICAgIGZ1bmN0aW9uIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIubWFuYWdlKCkubG9ncygpLmdldCgnYnJvd3NlcicpLnRoZW4oZnVuY3Rpb24oYnJvd3NlckxvZykge1xuICAgICAgICAgICAgICByZXR1cm4gYnJvd3NlckxvZy5maWx0ZXIoZnVuY3Rpb24obG9nRW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nRW50cnkubGV2ZWwudmFsdWUgPiB3ZWJkcml2ZXIubG9nZ2luZy5MZXZlbC5XQVJOSU5HLnZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyRXJyb3JzKCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBleHBlY3ROb0Vycm9ycygpIHtcbiAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkudGhlbihmdW5jdGlvbihmaWx0ZXJlZExvZykge1xuICAgICAgICAgICAgICBleHBlY3QoZmlsdGVyZWRMb2cubGVuZ3RoKS50b0VxdWFsKDApO1xuICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRMb2cubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Jyb3dzZXIgY29uc29sZSBlcnJvcnM6ICcgKyB1dGlsLmluc3BlY3QoZmlsdGVyZWRMb2cpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gZXhwZWN0RXJyb3IocmVnZXgpIHtcbiAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkudGhlbihmdW5jdGlvbihmaWx0ZXJlZExvZykge1xuICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgZmlsdGVyZWRMb2cuZm9yRWFjaChmdW5jdGlvbihsb2cpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9nLm1lc3NhZ2UubWF0Y2gocmVnZXgpKSB7XG4gICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXhwZWN0ZWQgYW4gZXJyb3IgdGhhdCBtYXRjaGVzICcgKyByZWdleCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuICAgICAgICAgICAgd2ViZHJpdmVyID0gcmVxdWlyZSgncHJvdHJhY3Rvci9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBGb3Igbm93LCB3ZSBvbmx5IHRlc3Qgb24gQ2hyb21lLFxuICAgICAgICAgIC8vIGFzIFNhZmFyaSBkb2VzIG5vdCBsb2FkIHRoZSBwYWdlIHdpdGggUHJvdHJhY3RvcidzIGluamVjdGVkIHNjcmlwdHMsXG4gICAgICAgICAgLy8gYW5kIEZpcmVmb3ggd2ViZHJpdmVyIGFsd2F5cyBkaXNhYmxlcyBjb250ZW50IHNlY3VyaXR5IHBvbGljeSAoIzYzNTgpXG4gICAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgIT09ICdjaHJvbWUnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBub3QgcmVwb3J0IGVycm9ycyB3aGVuIHRoZSBwYWdlIGlzIGxvYWRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gY2xlYXIgZXJyb3JzIHNvIHdlIGFyZSBub3QgZGVwZW5kZW50IG9uIHByZXZpb3VzIHRlc3RzXG4gICAgICAgICAgICBjbGVhckVycm9ycygpO1xuICAgICAgICAgICAgLy8gTmVlZCB0byByZWxvYWQgdGhlIHBhZ2UgYXMgdGhlIHBhZ2UgaXMgYWxyZWFkeSBsb2FkZWQgd2hlblxuICAgICAgICAgICAgLy8gd2UgY29tZSBoZXJlXG4gICAgICAgICAgICBicm93c2VyLmRyaXZlci5nZXRDdXJyZW50VXJsKCkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgICAgYnJvd3Nlci5nZXQodXJsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgZXZhbHVhdGUgZXhwcmVzc2lvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9FcXVhbCgnMCcpO1xuICAgICAgICAgICAgaW5jQnRuLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvRXF1YWwoJzEnKTtcbiAgICAgICAgICAgIGV4cGVjdE5vRXJyb3JzKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIHRocm93IGFuZCByZXBvcnQgYW4gZXJyb3Igd2hlbiB1c2luZyBcImV2YWxcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXZpbEJ0bi5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGV2aWxFcnJvci5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgU2VjdXJpdHkgUG9saWN5Lyk7XG4gICAgICAgICAgICBleHBlY3RFcnJvcigvQ29udGVudCBTZWN1cml0eSBQb2xpY3kvKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAqL1xuXG4vLyBuZ0NzcCBpcyBub3QgaW1wbGVtZW50ZWQgYXMgYSBwcm9wZXIgZGlyZWN0aXZlIGFueSBtb3JlLCBiZWNhdXNlIHdlIG5lZWQgaXQgYmUgcHJvY2Vzc2VkIHdoaWxlIHdlXG4vLyBib290c3RyYXAgdGhlIHN5c3RlbSAoYmVmb3JlICRwYXJzZSBpcyBpbnN0YW50aWF0ZWQpLCBmb3IgdGhpcyByZWFzb24gd2UganVzdCBoYXZlXG4vLyB0aGUgY3NwKCkgZm4gdGhhdCBsb29rcyBmb3IgdGhlIGBuZy1jc3BgIGF0dHJpYnV0ZSBhbnl3aGVyZSBpbiB0aGUgY3VycmVudCBkb2NcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NsaWNrXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgbmdDbGljayBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciB3aGVuXG4gKiBhbiBlbGVtZW50IGlzIGNsaWNrZWQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsaWNrIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGNsaWNrLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnRcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPHNwYW4+XG4gICAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgIDwvc3Bhbj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnY291bnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKCcwJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdjb3VudCcpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJzEnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG4vKlxuICogQSBjb2xsZWN0aW9uIG9mIGRpcmVjdGl2ZXMgdGhhdCBhbGxvd3MgY3JlYXRpb24gb2YgY3VzdG9tIGV2ZW50IGhhbmRsZXJzIHRoYXQgYXJlIGRlZmluZWQgYXNcbiAqIGFuZ3VsYXIgZXhwcmVzc2lvbnMgYW5kIGFyZSBjb21waWxlZCBhbmQgZXhlY3V0ZWQgd2l0aGluIHRoZSBjdXJyZW50IHNjb3BlLlxuICovXG52YXIgbmdFdmVudERpcmVjdGl2ZXMgPSB7fTtcblxuLy8gRm9yIGV2ZW50cyB0aGF0IG1pZ2h0IGZpcmUgc3luY2hyb25vdXNseSBkdXJpbmcgRE9NIG1hbmlwdWxhdGlvblxuLy8gd2UgbmVlZCB0byBleGVjdXRlIHRoZWlyIGV2ZW50IGhhbmRsZXJzIGFzeW5jaHJvbm91c2x5IHVzaW5nICRldmFsQXN5bmMsXG4vLyBzbyB0aGF0IHRoZXkgYXJlIG5vdCBleGVjdXRlZCBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuXG52YXIgZm9yY2VBc3luY0V2ZW50cyA9IHtcbiAgJ2JsdXInOiB0cnVlLFxuICAnZm9jdXMnOiB0cnVlXG59O1xuZm9yRWFjaChcbiAgJ2NsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZW1vdmUgbW91c2VlbnRlciBtb3VzZWxlYXZlIGtleWRvd24ga2V5dXAga2V5cHJlc3Mgc3VibWl0IGZvY3VzIGJsdXIgY29weSBjdXQgcGFzdGUnLnNwbGl0KCcgJyksXG4gIGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgIHZhciBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgZXZlbnROYW1lKTtcbiAgICBuZ0V2ZW50RGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSA9IFsnJHBhcnNlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkcGFyc2UsICRyb290U2NvcGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uKCRlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgLy8gV2UgZXhwb3NlIHRoZSBwb3dlcmZ1bCAkZXZlbnQgb2JqZWN0IG9uIHRoZSBzY29wZSB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgV2luZG93LFxuICAgICAgICAgIC8vIGV0Yy4gdGhhdCBpc24ndCBwcm90ZWN0ZWQgYnkgdGhlIGZhc3QgcGF0aHMgaW4gJHBhcnNlLiAgV2UgZXhwbGljaXRseSByZXF1ZXN0IGJldHRlclxuICAgICAgICAgIC8vIGNoZWNrcyBhdCB0aGUgY29zdCBvZiBzcGVlZCBzaW5jZSBldmVudCBoYW5kbGVyIGV4cHJlc3Npb25zIGFyZSBub3QgZXhlY3V0ZWQgYXNcbiAgICAgICAgICAvLyBmcmVxdWVudGx5IGFzIHJlZ3VsYXIgY2hhbmdlIGRldGVjdGlvbi5cbiAgICAgICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0cltkaXJlY3RpdmVOYW1lXSwgLyogaW50ZXJjZXB0b3JGbiAqLyBudWxsLCAvKiBleHBlbnNpdmVDaGVja3MgKi8gdHJ1ZSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nRXZlbnRIYW5kbGVyKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50Lm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZm4oc2NvcGUsIHskZXZlbnQ6ZXZlbnR9KTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaWYgKGZvcmNlQXN5bmNFdmVudHNbZXZlbnROYW1lXSAmJiAkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoY2FsbGJhY2spO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1dO1xuICB9XG4pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nRGJsY2xpY2tcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdEYmxjbGlja2AgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gYSBkYmxjbGljayBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRGJsY2xpY2sge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogYSBkYmxjbGljay4gKFRoZSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctZGJsY2xpY2s9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAob24gZG91YmxlIGNsaWNrKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZWRvd25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBuZ01vdXNlZG93biBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWRvd24gZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlZG93biB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZWRvd24uICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2Vkb3duPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIG1vdXNlIGRvd24pXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNldXBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNldXAgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNldXAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2V1cC4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZXVwPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIG1vdXNlIHVwKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2VvdmVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZW92ZXIgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlb3ZlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZW92ZXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2VvdmVyPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgaXMgb3ZlcilcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2VlbnRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VlbnRlciBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VlbnRlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZWVudGVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLW1vdXNlZW50ZXI9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBlbnRlcnMpXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNlbGVhdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbGVhdmUgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlbGVhdmUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2VsZWF2ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWxlYXZlPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbGVhdmVzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZW1vdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbW92ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vtb3ZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlbW92ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZW1vdmU9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBtb3ZlcylcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nS2V5ZG93blxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5ZG93biBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5ZG93biB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXlkb3duLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCBhbmQgY2FuIGJlIGludGVycm9nYXRlZCBmb3Iga2V5Q29kZSwgYWx0S2V5LCBldGMuKVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1rZXlkb3duPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IGRvd24gY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nS2V5dXBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleXVwIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXl1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXl1cC4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHA+VHlwaW5nIGluIHRoZSBpbnB1dCBib3ggYmVsb3cgdXBkYXRlcyB0aGUga2V5IGNvdW50PC9wPlxuICAgICAgIDxpbnB1dCBuZy1rZXl1cD1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj4ga2V5IHVwIGNvdW50OiB7e2NvdW50fX1cblxuICAgICAgIDxwPlR5cGluZyBpbiB0aGUgaW5wdXQgYm94IGJlbG93IHVwZGF0ZXMgdGhlIGtleWNvZGU8L3A+XG4gICAgICAgPGlucHV0IG5nLWtleXVwPVwiZXZlbnQ9JGV2ZW50XCI+XG4gICAgICAgPHA+ZXZlbnQga2V5Q29kZToge3sgZXZlbnQua2V5Q29kZSB9fTwvcD5cbiAgICAgICA8cD5ldmVudCBhbHRLZXk6IHt7IGV2ZW50LmFsdEtleSB9fTwvcD5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleXByZXNzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXlwcmVzcyBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlwcmVzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXlwcmVzcy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH1cbiAqIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLWtleXByZXNzPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IHByZXNzIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N1Ym1pdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRW5hYmxlcyBiaW5kaW5nIGFuZ3VsYXIgZXhwcmVzc2lvbnMgdG8gb25zdWJtaXQgZXZlbnRzLlxuICpcbiAqIEFkZGl0aW9uYWxseSBpdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKHdoaWNoIGZvciBmb3JtIG1lYW5zIHNlbmRpbmcgdGhlIHJlcXVlc3QgdG8gdGhlXG4gKiBzZXJ2ZXIgYW5kIHJlbG9hZGluZyB0aGUgY3VycmVudCBwYWdlKSwgYnV0IG9ubHkgaWYgdGhlIGZvcm0gZG9lcyBub3QgY29udGFpbiBgYWN0aW9uYCxcbiAqIGBkYXRhLWFjdGlvbmAsIG9yIGB4LWFjdGlvbmAgYXR0cmlidXRlcy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipXYXJuaW5nOioqIEJlIGNhcmVmdWwgbm90IHRvIGNhdXNlIFwiZG91YmxlLXN1Ym1pc3Npb25cIiBieSB1c2luZyBib3RoIHRoZSBgbmdDbGlja2AgYW5kXG4gKiBgbmdTdWJtaXRgIGhhbmRsZXJzIHRvZ2V0aGVyLiBTZWUgdGhlXG4gKiB7QGxpbmsgZm9ybSNzdWJtaXR0aW5nLWEtZm9ybS1hbmQtcHJldmVudGluZy10aGUtZGVmYXVsdC1hY3Rpb24gYGZvcm1gIGRpcmVjdGl2ZSBkb2N1bWVudGF0aW9ufVxuICogZm9yIGEgZGV0YWlsZWQgZGlzY3Vzc2lvbiBvZiB3aGVuIGBuZ1N1Ym1pdGAgbWF5IGJlIHRyaWdnZXJlZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBlbGVtZW50IGZvcm1cbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3VibWl0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwic3VibWl0RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3N1Ym1pdEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLmxpc3QgPSBbXTtcbiAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ2hlbGxvJztcbiAgICAgICAgICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKCRzY29wZS50ZXh0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucHVzaCh0aGlzLnRleHQpO1xuICAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8Zm9ybSBuZy1zdWJtaXQ9XCJzdWJtaXQoKVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICBFbnRlciB0ZXh0IGFuZCBoaXQgZW50ZXI6XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidGV4dFwiIG5hbWU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiBpZD1cInN1Ym1pdFwiIHZhbHVlPVwiU3VibWl0XCIgLz5cbiAgICAgICAgPHByZT5saXN0PXt7bGlzdH19PC9wcmU+XG4gICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc3VibWl0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9CZSgnbGlzdD1bXScpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2hlbGxvJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndGV4dCcpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJycpO1xuICAgICAgIH0pO1xuICAgICAgIGl0KCdzaG91bGQgaWdub3JlIGVtcHR5IHN0cmluZ3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0PVtdJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3N1Ym1pdCcpKS5jbGljaygpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2hlbGxvJyk7XG4gICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0ZvY3VzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBmb2N1cyBldmVudC5cbiAqXG4gKiBOb3RlOiBBcyB0aGUgYGZvY3VzYCBldmVudCBpcyBleGVjdXRlZCBzeW5jaHJvbm91c2x5IHdoZW4gY2FsbGluZyBgaW5wdXQuZm9jdXMoKWBcbiAqIEFuZ3VsYXJKUyBleGVjdXRlcyB0aGUgZXhwcmVzc2lvbiB1c2luZyBgc2NvcGUuJGV2YWxBc3luY2AgaWYgdGhlIGV2ZW50IGlzIGZpcmVkXG4gKiBkdXJpbmcgYW4gYCRhcHBseWAgdG8gZW5zdXJlIGEgY29uc2lzdGVudCBzdGF0ZS5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0ZvY3VzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGZvY3VzLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdCbHVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBibHVyIGV2ZW50LlxuICpcbiAqIEEgW2JsdXIgZXZlbnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy9ibHVyKSBmaXJlcyB3aGVuXG4gKiBhbiBlbGVtZW50IGhhcyBsb3N0IGZvY3VzLlxuICpcbiAqIE5vdGU6IEFzIHRoZSBgYmx1cmAgZXZlbnQgaXMgZXhlY3V0ZWQgc3luY2hyb25vdXNseSBhbHNvIGR1cmluZyBET00gbWFuaXB1bGF0aW9uc1xuICogKGUuZy4gcmVtb3ZpbmcgYSBmb2N1c3NlZCBpbnB1dCksXG4gKiBBbmd1bGFySlMgZXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gdXNpbmcgYHNjb3BlLiRldmFsQXN5bmNgIGlmIHRoZSBldmVudCBpcyBmaXJlZFxuICogZHVyaW5nIGFuIGAkYXBwbHlgIHRvIGVuc3VyZSBhIGNvbnNpc3RlbnQgc3RhdGUuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCbHVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGJsdXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NvcHlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGNvcHkgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDb3B5IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGNvcHkuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1jb3B5PVwiY29waWVkPXRydWVcIiBuZy1pbml0PVwiY29waWVkPWZhbHNlOyB2YWx1ZT0nY29weSBtZSdcIiBuZy1tb2RlbD1cInZhbHVlXCI+XG4gICAgICBjb3BpZWQ6IHt7Y29waWVkfX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDdXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGN1dCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0N1dCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjdXQuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1jdXQ9XCJjdXQ9dHJ1ZVwiIG5nLWluaXQ9XCJjdXQ9ZmFsc2U7IHZhbHVlPSdjdXQgbWUnXCIgbmctbW9kZWw9XCJ2YWx1ZVwiPlxuICAgICAgY3V0OiB7e2N1dH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUGFzdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIHBhc3RlIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nUGFzdGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogcGFzdGUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1wYXN0ZT1cInBhc3RlPXRydWVcIiBuZy1pbml0PVwicGFzdGU9ZmFsc2VcIiBwbGFjZWhvbGRlcj0ncGFzdGUgaGVyZSc+XG4gICAgICBwYXN0ZWQ6IHt7cGFzdGV9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0lmXG4gKiBAcmVzdHJpY3QgQVxuICogQG11bHRpRWxlbWVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0lmYCBkaXJlY3RpdmUgcmVtb3ZlcyBvciByZWNyZWF0ZXMgYSBwb3J0aW9uIG9mIHRoZSBET00gdHJlZSBiYXNlZCBvbiBhblxuICoge2V4cHJlc3Npb259LiBJZiB0aGUgZXhwcmVzc2lvbiBhc3NpZ25lZCB0byBgbmdJZmAgZXZhbHVhdGVzIHRvIGEgZmFsc2VcbiAqIHZhbHVlIHRoZW4gdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00sIG90aGVyd2lzZSBhIGNsb25lIG9mIHRoZVxuICogZWxlbWVudCBpcyByZWluc2VydGVkIGludG8gdGhlIERPTS5cbiAqXG4gKiBgbmdJZmAgZGlmZmVycyBmcm9tIGBuZ1Nob3dgIGFuZCBgbmdIaWRlYCBpbiB0aGF0IGBuZ0lmYCBjb21wbGV0ZWx5IHJlbW92ZXMgYW5kIHJlY3JlYXRlcyB0aGVcbiAqIGVsZW1lbnQgaW4gdGhlIERPTSByYXRoZXIgdGhhbiBjaGFuZ2luZyBpdHMgdmlzaWJpbGl0eSB2aWEgdGhlIGBkaXNwbGF5YCBjc3MgcHJvcGVydHkuICBBIGNvbW1vblxuICogY2FzZSB3aGVuIHRoaXMgZGlmZmVyZW5jZSBpcyBzaWduaWZpY2FudCBpcyB3aGVuIHVzaW5nIGNzcyBzZWxlY3RvcnMgdGhhdCByZWx5IG9uIGFuIGVsZW1lbnQnc1xuICogcG9zaXRpb24gd2l0aGluIHRoZSBET00sIHN1Y2ggYXMgdGhlIGA6Zmlyc3QtY2hpbGRgIG9yIGA6bGFzdC1jaGlsZGAgcHNldWRvLWNsYXNzZXMuXG4gKlxuICogTm90ZSB0aGF0IHdoZW4gYW4gZWxlbWVudCBpcyByZW1vdmVkIHVzaW5nIGBuZ0lmYCBpdHMgc2NvcGUgaXMgZGVzdHJveWVkIGFuZCBhIG5ldyBzY29wZVxuICogaXMgY3JlYXRlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlc3RvcmVkLiAgVGhlIHNjb3BlIGNyZWF0ZWQgd2l0aGluIGBuZ0lmYCBpbmhlcml0cyBmcm9tXG4gKiBpdHMgcGFyZW50IHNjb3BlIHVzaW5nXG4gKiBbcHJvdG90eXBhbCBpbmhlcml0YW5jZV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy93aWtpL1VuZGVyc3RhbmRpbmctU2NvcGVzI2phdmFzY3JpcHQtcHJvdG90eXBhbC1pbmhlcml0YW5jZSkuXG4gKiBBbiBpbXBvcnRhbnQgaW1wbGljYXRpb24gb2YgdGhpcyBpcyBpZiBgbmdNb2RlbGAgaXMgdXNlZCB3aXRoaW4gYG5nSWZgIHRvIGJpbmQgdG9cbiAqIGEgamF2YXNjcmlwdCBwcmltaXRpdmUgZGVmaW5lZCBpbiB0aGUgcGFyZW50IHNjb3BlLiBJbiB0aGlzIGNhc2UgYW55IG1vZGlmaWNhdGlvbnMgbWFkZSB0byB0aGVcbiAqIHZhcmlhYmxlIHdpdGhpbiB0aGUgY2hpbGQgc2NvcGUgd2lsbCBvdmVycmlkZSAoaGlkZSkgdGhlIHZhbHVlIGluIHRoZSBwYXJlbnQgc2NvcGUuXG4gKlxuICogQWxzbywgYG5nSWZgIHJlY3JlYXRlcyBlbGVtZW50cyB1c2luZyB0aGVpciBjb21waWxlZCBzdGF0ZS4gQW4gZXhhbXBsZSBvZiB0aGlzIGJlaGF2aW9yXG4gKiBpcyBpZiBhbiBlbGVtZW50J3MgY2xhc3MgYXR0cmlidXRlIGlzIGRpcmVjdGx5IG1vZGlmaWVkIGFmdGVyIGl0J3MgY29tcGlsZWQsIHVzaW5nIHNvbWV0aGluZyBsaWtlXG4gKiBqUXVlcnkncyBgLmFkZENsYXNzKClgIG1ldGhvZCwgYW5kIHRoZSBlbGVtZW50IGlzIGxhdGVyIHJlbW92ZWQuIFdoZW4gYG5nSWZgIHJlY3JlYXRlcyB0aGUgZWxlbWVudFxuICogdGhlIGFkZGVkIGNsYXNzIHdpbGwgYmUgbG9zdCBiZWNhdXNlIHRoZSBvcmlnaW5hbCBjb21waWxlZCBzdGF0ZSBpcyB1c2VkIHRvIHJlZ2VuZXJhdGUgdGhlIGVsZW1lbnQuXG4gKlxuICogQWRkaXRpb25hbGx5LCB5b3UgY2FuIHByb3ZpZGUgYW5pbWF0aW9ucyB2aWEgdGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSB0byBhbmltYXRlIHRoZSBgZW50ZXJgXG4gKiBhbmQgYGxlYXZlYCBlZmZlY3RzLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiBlbnRlciAtIGhhcHBlbnMganVzdCBhZnRlciB0aGUgYG5nSWZgIGNvbnRlbnRzIGNoYW5nZSBhbmQgYSBuZXcgRE9NIGVsZW1lbnQgaXMgY3JlYXRlZCBhbmQgaW5qZWN0ZWQgaW50byB0aGUgYG5nSWZgIGNvbnRhaW5lclxuICogbGVhdmUgLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBgbmdJZmAgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA2MDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJZiBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgZmFsc3kgdGhlblxuICogICAgIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHRyZWUuIElmIGl0IGlzIHRydXRoeSBhIGNvcHkgb2YgdGhlIGNvbXBpbGVkXG4gKiAgICAgZWxlbWVudCBpcyBhZGRlZCB0byB0aGUgRE9NIHRyZWUuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxsYWJlbD5DbGljayBtZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiIG5nLWluaXQ9XCJjaGVja2VkPXRydWVcIiAvPjwvbGFiZWw+PGJyLz5cbiAgICAgIFNob3cgd2hlbiBjaGVja2VkOlxuICAgICAgPHNwYW4gbmctaWY9XCJjaGVja2VkXCIgY2xhc3M9XCJhbmltYXRlLWlmXCI+XG4gICAgICAgIFRoaXMgaXMgcmVtb3ZlZCB3aGVuIHRoZSBjaGVja2JveCBpcyB1bmNoZWNrZWQuXG4gICAgICA8L3NwYW4+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtaWYge1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLCAuYW5pbWF0ZS1pZi5uZy1sZWF2ZSB7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIsXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICAgICAgICBvcGFjaXR5OjA7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLWlmLm5nLWxlYXZlLFxuICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgb3BhY2l0eToxO1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdJZkRpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICByZXR1cm4ge1xuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgcHJpb3JpdHk6IDYwMCxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgICQkdGxiOiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICB2YXIgYmxvY2ssIGNoaWxkU2NvcGUsIHByZXZpb3VzRWxlbWVudHM7XG4gICAgICAgICRzY29wZS4kd2F0Y2goJGF0dHIubmdJZiwgZnVuY3Rpb24gbmdJZldhdGNoQWN0aW9uKHZhbHVlKSB7XG5cbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghY2hpbGRTY29wZSkge1xuICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbihjbG9uZSwgbmV3U2NvcGUpIHtcbiAgICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gbmV3U2NvcGU7XG4gICAgICAgICAgICAgICAgY2xvbmVbY2xvbmUubGVuZ3RoKytdID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIGVuZCBuZ0lmOiAnICsgJGF0dHIubmdJZiArICcgJyk7XG4gICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy5cbiAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHJlZmVyZW5jZSB0byB0aGUganFsaXRlIHdyYXBwZXIgYXMgaXQgbWlnaHQgYmUgY2hhbmdlZCBsYXRlclxuICAgICAgICAgICAgICAgIC8vIGJ5IGEgZGlyZWN0aXZlIHdpdGggdGVtcGxhdGVVcmwgd2hlbiBpdHMgdGVtcGxhdGUgYXJyaXZlcy5cbiAgICAgICAgICAgICAgICBibG9jayA9IHtcbiAgICAgICAgICAgICAgICAgIGNsb25lOiBjbG9uZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsICRlbGVtZW50LnBhcmVudCgpLCAkZWxlbWVudCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNFbGVtZW50cykge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzLnJlbW92ZSgpO1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGlsZFNjb3BlKSB7XG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cyA9IGdldEJsb2NrTm9kZXMoYmxvY2suY2xvbmUpO1xuICAgICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShwcmV2aW91c0VsZW1lbnRzKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMgPSBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYmxvY2sgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJbmNsdWRlXG4gKiBAcmVzdHJpY3QgRUNBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGZXRjaGVzLCBjb21waWxlcyBhbmQgaW5jbHVkZXMgYW4gZXh0ZXJuYWwgSFRNTCBmcmFnbWVudC5cbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgVVJMIGlzIHJlc3RyaWN0ZWQgdG8gdGhlIHNhbWUgZG9tYWluIGFuZCBwcm90b2NvbCBhcyB0aGVcbiAqIGFwcGxpY2F0aW9uIGRvY3VtZW50LiBUaGlzIGlzIGRvbmUgYnkgY2FsbGluZyB7QGxpbmsgJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAqICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfSBvbiBpdC4gVG8gbG9hZCB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIG9yIHByb3RvY29sc1xuICogeW91IG1heSBlaXRoZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdCB0aGVtfSBvclxuICoge0BsaW5rICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIHdyYXAgdGhlbX0gYXMgdHJ1c3RlZCB2YWx1ZXMuIFJlZmVyIHRvIEFuZ3VsYXIncyB7QGxpbmtcbiAqIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmd9LlxuICpcbiAqIEluIGFkZGl0aW9uLCB0aGUgYnJvd3NlcidzXG4gKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KVxuICogYW5kIFtDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyAoQ09SUyldKGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvKVxuICogcG9saWN5IG1heSBmdXJ0aGVyIHJlc3RyaWN0IHdoZXRoZXIgdGhlIHRlbXBsYXRlIGlzIHN1Y2Nlc3NmdWxseSBsb2FkZWQuXG4gKiBGb3IgZXhhbXBsZSwgYG5nSW5jbHVkZWAgd29uJ3Qgd29yayBmb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzIG9uIGFsbCBicm93c2VycyBhbmQgZm9yIGBmaWxlOi8vYFxuICogYWNjZXNzIG9uIHNvbWUgYnJvd3NlcnMuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIGVudGVyIC0gYW5pbWF0aW9uIGlzIHVzZWQgdG8gYnJpbmcgbmV3IGNvbnRlbnQgaW50byB0aGUgYnJvd3Nlci5cbiAqIGxlYXZlIC0gYW5pbWF0aW9uIGlzIHVzZWQgdG8gYW5pbWF0ZSBleGlzdGluZyBjb250ZW50IGF3YXkuXG4gKlxuICogVGhlIGVudGVyIGFuZCBsZWF2ZSBhbmltYXRpb24gb2NjdXIgY29uY3VycmVudGx5LlxuICpcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDQwMFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0luY2x1ZGV8c3JjIGFuZ3VsYXIgZXhwcmVzc2lvbiBldmFsdWF0aW5nIHRvIFVSTC4gSWYgdGhlIHNvdXJjZSBpcyBhIHN0cmluZyBjb25zdGFudCxcbiAqICAgICAgICAgICAgICAgICBtYWtlIHN1cmUgeW91IHdyYXAgaXQgaW4gKipzaW5nbGUqKiBxdW90ZXMsIGUuZy4gYHNyYz1cIidteVBhcnRpYWxUZW1wbGF0ZS5odG1sJ1wiYC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gb25sb2FkIEV4cHJlc3Npb24gdG8gZXZhbHVhdGUgd2hlbiBhIG5ldyBwYXJ0aWFsIGlzIGxvYWRlZC5cbiAqICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICAgICAgICAgICAgICAgICAgKipOb3RlOioqIFdoZW4gdXNpbmcgb25sb2FkIG9uIFNWRyBlbGVtZW50cyBpbiBJRTExLCB0aGUgYnJvd3NlciB3aWxsIHRyeSB0byBjYWxsXG4gKiAgICAgICAgICAgICAgICAgIGEgZnVuY3Rpb24gd2l0aCB0aGUgbmFtZSBvbiB0aGUgd2luZG93IGVsZW1lbnQsIHdoaWNoIHdpbGwgdXN1YWxseSB0aHJvdyBhXG4gKiAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb24gaXMgdW5kZWZpbmVkXCIgZXJyb3IuIFRvIGZpeCB0aGlzLCB5b3UgY2FuIGluc3RlYWQgdXNlIGBkYXRhLW9ubG9hZGAgb3IgYVxuICogICAgICAgICAgICAgICAgICBkaWZmZXJlbnQgZm9ybSB0aGF0IHtAbGluayBndWlkZS9kaXJlY3RpdmUjbm9ybWFsaXphdGlvbiBtYXRjaGVzfSBgb25sb2FkYC5cbiAqICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGF1dG9zY3JvbGwgV2hldGhlciBgbmdJbmNsdWRlYCBzaG91bGQgY2FsbCB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbFxuICogICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsfSB0byBzY3JvbGwgdGhlIHZpZXdwb3J0IGFmdGVyIHRoZSBjb250ZW50IGlzIGxvYWRlZC5cbiAqXG4gKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCBkaXNhYmxlIHNjcm9sbGluZy5cbiAqICAgICAgICAgICAgICAgICAgLSBJZiB0aGUgYXR0cmlidXRlIGlzIHNldCB3aXRob3V0IHZhbHVlLCBlbmFibGUgc2Nyb2xsaW5nLlxuICogICAgICAgICAgICAgICAgICAtIE90aGVyd2lzZSBlbmFibGUgc2Nyb2xsaW5nIG9ubHkgaWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydXRoeSB2YWx1ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJpbmNsdWRlRXhhbXBsZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cInRlbXBsYXRlXCIgbmctb3B0aW9ucz1cInQubmFtZSBmb3IgdCBpbiB0ZW1wbGF0ZXNcIj5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPihibGFuayk8L29wdGlvbj5cbiAgICAgICA8L3NlbGVjdD5cbiAgICAgICB1cmwgb2YgdGhlIHRlbXBsYXRlOiA8Y29kZT57e3RlbXBsYXRlLnVybH19PC9jb2RlPlxuICAgICAgIDxoci8+XG4gICAgICAgPGRpdiBjbGFzcz1cInNsaWRlLWFuaW1hdGUtY29udGFpbmVyXCI+XG4gICAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGUtYW5pbWF0ZVwiIG5nLWluY2x1ZGU9XCJ0ZW1wbGF0ZS51cmxcIj48L2Rpdj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbmNsdWRlRXhhbXBsZScsIFsnbmdBbmltYXRlJ10pXG4gICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLnRlbXBsYXRlcyA9XG4gICAgICAgICAgICBbIHsgbmFtZTogJ3RlbXBsYXRlMS5odG1sJywgdXJsOiAndGVtcGxhdGUxLmh0bWwnfSxcbiAgICAgICAgICAgICAgeyBuYW1lOiAndGVtcGxhdGUyLmh0bWwnLCB1cmw6ICd0ZW1wbGF0ZTIuaHRtbCd9IF07XG4gICAgICAgICAgJHNjb3BlLnRlbXBsYXRlID0gJHNjb3BlLnRlbXBsYXRlc1swXTtcbiAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInRlbXBsYXRlMS5odG1sXCI+XG4gICAgICBDb250ZW50IG9mIHRlbXBsYXRlMS5odG1sXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJ0ZW1wbGF0ZTIuaHRtbFwiPlxuICAgICAgQ29udGVudCBvZiB0ZW1wbGF0ZTIuaHRtbFxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5zbGlkZS1hbmltYXRlLWNvbnRhaW5lciB7XG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBoZWlnaHQ6NDBweDtcbiAgICAgICAgb3ZlcmZsb3c6aGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZSB7XG4gICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgIH1cblxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIsIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuXG4gICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICB0b3A6MDtcbiAgICAgICAgbGVmdDowO1xuICAgICAgICByaWdodDowO1xuICAgICAgICBib3R0b206MDtcbiAgICAgICAgZGlzcGxheTpibG9jaztcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlciB7XG4gICAgICAgIHRvcDotNTBweDtcbiAgICAgIH1cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gICAgICAgIHRvcDowO1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZSB7XG4gICAgICAgIHRvcDowO1xuICAgICAgfVxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcbiAgICAgICAgdG9wOjUwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB0ZW1wbGF0ZVNlbGVjdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RlbXBsYXRlJykpO1xuICAgICAgdmFyIGluY2x1ZGVFbGVtID0gZWxlbWVudChieS5jc3MoJ1tuZy1pbmNsdWRlXScpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMS5odG1sJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChpbmNsdWRlRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgb2YgdGVtcGxhdGUxLmh0bWwvKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUyLmh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgICAgLy8gRmlyZWZveCBjYW4ndCBoYW5kbGUgdXNpbmcgc2VsZWN0c1xuICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy80ODBcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuY2xpY2soKTtcbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgyKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRlbXBsYXRlMi5odG1sLyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gYmxhbmsnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgICAgLy8gRmlyZWZveCBjYW4ndCBoYW5kbGUgdXNpbmcgc2VsZWN0c1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5jbGljaygpO1xuICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDApLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChpbmNsdWRlRWxlbS5pc1ByZXNlbnQoKSkudG9CZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGV2ZW50XG4gKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50UmVxdWVzdGVkXG4gKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIHNjb3BlIG5nSW5jbHVkZSB3YXMgZGVjbGFyZWQgaW5cbiAqIEBkZXNjcmlwdGlvblxuICogRW1pdHRlZCBldmVyeSB0aW1lIHRoZSBuZ0luY2x1ZGUgY29udGVudCBpcyByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZXZlbnRcbiAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRMb2FkZWRcbiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgY3VycmVudCBuZ0luY2x1ZGUgc2NvcGVcbiAqIEBkZXNjcmlwdGlvblxuICogRW1pdHRlZCBldmVyeSB0aW1lIHRoZSBuZ0luY2x1ZGUgY29udGVudCBpcyByZWxvYWRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIFVSTCBvZiBjb250ZW50IHRvIGxvYWQuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBldmVudFxuICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudEVycm9yXG4gKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIHNjb3BlIG5nSW5jbHVkZSB3YXMgZGVjbGFyZWQgaW5cbiAqIEBkZXNjcmlwdGlvblxuICogRW1pdHRlZCB3aGVuIGEgdGVtcGxhdGUgSFRUUCByZXF1ZXN0IHlpZWxkcyBhbiBlcnJvbmVvdXMgcmVzcG9uc2UgKHN0YXR1cyA8IDIwMCB8fCBzdGF0dXMgPiAyOTkpXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICovXG52YXIgbmdJbmNsdWRlRGlyZWN0aXZlID0gWyckdGVtcGxhdGVSZXF1ZXN0JywgJyRhbmNob3JTY3JvbGwnLCAnJGFuaW1hdGUnLFxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJHRlbXBsYXRlUmVxdWVzdCwgICAkYW5jaG9yU2Nyb2xsLCAgICRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQ0EnLFxuICAgIHByaW9yaXR5OiA0MDAsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIGNvbnRyb2xsZXI6IGFuZ3VsYXIubm9vcCxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgICB2YXIgc3JjRXhwID0gYXR0ci5uZ0luY2x1ZGUgfHwgYXR0ci5zcmMsXG4gICAgICAgICAgb25sb2FkRXhwID0gYXR0ci5vbmxvYWQgfHwgJycsXG4gICAgICAgICAgYXV0b1Njcm9sbEV4cCA9IGF0dHIuYXV0b3Njcm9sbDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG4gICAgICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMCxcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZSxcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCxcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50O1xuXG4gICAgICAgIHZhciBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHByZXZpb3VzRWxlbWVudCkge1xuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnRTY29wZSkge1xuICAgICAgICAgICAgY3VycmVudFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICBjdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGN1cnJlbnRFbGVtZW50KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBjdXJyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKHNyY0V4cCwgZnVuY3Rpb24gbmdJbmNsdWRlV2F0Y2hBY3Rpb24oc3JjKSB7XG4gICAgICAgICAgdmFyIGFmdGVyQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKGF1dG9TY3JvbGxFeHApICYmICghYXV0b1Njcm9sbEV4cCB8fCBzY29wZS4kZXZhbChhdXRvU2Nyb2xsRXhwKSkpIHtcbiAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIHRoaXNDaGFuZ2VJZCA9ICsrY2hhbmdlQ291bnRlcjtcblxuICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgIC8vc2V0IHRoZSAybmQgcGFyYW0gdG8gdHJ1ZSB0byBpZ25vcmUgdGhlIHRlbXBsYXRlIHJlcXVlc3QgZXJyb3Igc28gdGhhdCB0aGUgaW5uZXJcbiAgICAgICAgICAgIC8vY29udGVudHMgYW5kIHNjb3BlIGNhbiBiZSBjbGVhbmVkIHVwLlxuICAgICAgICAgICAgJHRlbXBsYXRlUmVxdWVzdChzcmMsIHRydWUpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCAhPT0gY2hhbmdlQ291bnRlcikgcmV0dXJuO1xuICAgICAgICAgICAgICB2YXIgbmV3U2NvcGUgPSBzY29wZS4kbmV3KCk7XG4gICAgICAgICAgICAgIGN0cmwudGVtcGxhdGUgPSByZXNwb25zZTtcblxuICAgICAgICAgICAgICAvLyBOb3RlOiBUaGlzIHdpbGwgYWxzbyBsaW5rIGFsbCBjaGlsZHJlbiBvZiBuZy1pbmNsdWRlIHRoYXQgd2VyZSBjb250YWluZWQgaW4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgIC8vIGh0bWwuIElmIHRoYXQgY29udGVudCBjb250YWlucyBjb250cm9sbGVycywgLi4uIHRoZXkgY291bGQgcG9sbHV0ZS9jaGFuZ2UgdGhlIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBIb3dldmVyLCB1c2luZyBuZy1pbmNsdWRlIG9uIGFuIGVsZW1lbnQgd2l0aCBhZGRpdGlvbmFsIGNvbnRlbnQgZG9lcyBub3QgbWFrZSBzZW5zZS4uLlxuICAgICAgICAgICAgICAvLyBOb3RlOiBXZSBjYW4ndCByZW1vdmUgdGhlbSBpbiB0aGUgY2xvbmVBdHRjaEZuIG9mICR0cmFuc2NsdWRlIGFzIHRoYXRcbiAgICAgICAgICAgICAgLy8gZnVuY3Rpb24gaXMgY2FsbGVkIGJlZm9yZSBsaW5raW5nIHRoZSBjb250ZW50LCB3aGljaCB3b3VsZCBhcHBseSBjaGlsZFxuICAgICAgICAgICAgICAvLyBkaXJlY3RpdmVzIHRvIG5vbiBleGlzdGluZyBlbGVtZW50cy5cbiAgICAgICAgICAgICAgdmFyIGNsb25lID0gJHRyYW5zY2x1ZGUobmV3U2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBudWxsLCAkZWxlbWVudCkudGhlbihhZnRlckFuaW1hdGlvbik7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGNsb25lO1xuXG4gICAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50TG9hZGVkJywgc3JjKTtcbiAgICAgICAgICAgICAgc2NvcGUuJGV2YWwob25sb2FkRXhwKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkID09PSBjaGFuZ2VDb3VudGVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRFcnJvcicsIHNyYyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZCcsIHNyYyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcbiAgICAgICAgICAgIGN0cmwudGVtcGxhdGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vLyBUaGlzIGRpcmVjdGl2ZSBpcyBjYWxsZWQgZHVyaW5nIHRoZSAkdHJhbnNjbHVkZSBjYWxsIG9mIHRoZSBmaXJzdCBgbmdJbmNsdWRlYCBkaXJlY3RpdmUuXG4vLyBJdCB3aWxsIHJlcGxhY2UgYW5kIGNvbXBpbGUgdGhlIGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQgd2l0aCB0aGUgbG9hZGVkIHRlbXBsYXRlLlxuLy8gV2UgbmVlZCB0aGlzIGRpcmVjdGl2ZSBzbyB0aGF0IHRoZSBlbGVtZW50IGNvbnRlbnQgaXMgYWxyZWFkeSBmaWxsZWQgd2hlblxuLy8gdGhlIGxpbmsgZnVuY3Rpb24gb2YgYW5vdGhlciBkaXJlY3RpdmUgb24gdGhlIHNhbWUgZWxlbWVudCBhcyBuZ0luY2x1ZGVcbi8vIGlzIGNhbGxlZC5cbnZhciBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLFxuICBmdW5jdGlvbigkY29tcGlsZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0VDQScsXG4gICAgICBwcmlvcml0eTogLTQwMCxcbiAgICAgIHJlcXVpcmU6ICduZ0luY2x1ZGUnLFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCkge1xuICAgICAgICBpZiAoL1NWRy8udGVzdCgkZWxlbWVudFswXS50b1N0cmluZygpKSkge1xuICAgICAgICAgIC8vIFdlYktpdDogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNTY5OCAtLS0gU1ZHIGVsZW1lbnRzIGRvIG5vdFxuICAgICAgICAgIC8vIHN1cHBvcnQgaW5uZXJIVE1MLCBzbyBkZXRlY3QgdGhpcyBoZXJlIGFuZCB0cnkgdG8gZ2VuZXJhdGUgdGhlIGNvbnRlbnRzXG4gICAgICAgICAgLy8gc3BlY2lhbGx5LlxuICAgICAgICAgICRlbGVtZW50LmVtcHR5KCk7XG4gICAgICAgICAgJGNvbXBpbGUoanFMaXRlQnVpbGRGcmFnbWVudChjdHJsLnRlbXBsYXRlLCBkb2N1bWVudCkuY2hpbGROb2Rlcykoc2NvcGUsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIG5hbWVzcGFjZUFkYXB0ZWRDbG9uZShjbG9uZSkge1xuICAgICAgICAgICAgJGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAgICAgICAgICB9LCB7ZnV0dXJlUGFyZW50RWxlbWVudDogJGVsZW1lbnR9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkZWxlbWVudC5odG1sKGN0cmwudGVtcGxhdGUpO1xuICAgICAgICAkY29tcGlsZSgkZWxlbWVudC5jb250ZW50cygpKShzY29wZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJbml0XG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdJbml0YCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBldmFsdWF0ZSBhbiBleHByZXNzaW9uIGluIHRoZVxuICogY3VycmVudCBzY29wZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gKiBUaGlzIGRpcmVjdGl2ZSBjYW4gYmUgYWJ1c2VkIHRvIGFkZCB1bm5lY2Vzc2FyeSBhbW91bnRzIG9mIGxvZ2ljIGludG8geW91ciB0ZW1wbGF0ZXMuXG4gKiBUaGVyZSBhcmUgb25seSBhIGZldyBhcHByb3ByaWF0ZSB1c2VzIG9mIGBuZ0luaXRgLCBzdWNoIGFzIGZvciBhbGlhc2luZyBzcGVjaWFsIHByb3BlcnRpZXMgb2ZcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgYG5nUmVwZWF0YH0sIGFzIHNlZW4gaW4gdGhlIGRlbW8gYmVsb3c7IGFuZCBmb3IgaW5qZWN0aW5nIGRhdGEgdmlhXG4gKiBzZXJ2ZXIgc2lkZSBzY3JpcHRpbmcuIEJlc2lkZXMgdGhlc2UgZmV3IGNhc2VzLCB5b3Ugc2hvdWxkIHVzZSB7QGxpbmsgZ3VpZGUvY29udHJvbGxlciBjb250cm9sbGVyc31cbiAqIHJhdGhlciB0aGFuIGBuZ0luaXRgIHRvIGluaXRpYWxpemUgdmFsdWVzIG9uIGEgc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlKio6IElmIHlvdSBoYXZlIGFzc2lnbm1lbnQgaW4gYG5nSW5pdGAgYWxvbmcgd2l0aCBhIHtAbGluayBuZy4kZmlsdGVyIGBmaWx0ZXJgfSwgbWFrZVxuICogc3VyZSB5b3UgaGF2ZSBwYXJlbnRoZXNlcyB0byBlbnN1cmUgY29ycmVjdCBvcGVyYXRvciBwcmVjZWRlbmNlOlxuICogPHByZSBjbGFzcz1cInByZXR0eXByaW50XCI+XG4gKiBgPGRpdiBuZy1pbml0PVwidGVzdDEgPSAoJGluZGV4IHwgdG9TdHJpbmcpXCI+PC9kaXY+YFxuICogPC9wcmU+XG4gKiA8L2Rpdj5cbiAqXG4gKiBAcHJpb3JpdHkgNDUwXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSW5pdCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJpbml0RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgPHNjcmlwdD5cbiAgICAgYW5ndWxhci5tb2R1bGUoJ2luaXRFeGFtcGxlJywgW10pXG4gICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICRzY29wZS5saXN0ID0gW1snYScsICdiJ10sIFsnYycsICdkJ11dO1xuICAgICAgIH1dKTtcbiAgIDwvc2NyaXB0PlxuICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgPGRpdiBuZy1yZXBlYXQ9XCJpbm5lckxpc3QgaW4gbGlzdFwiIG5nLWluaXQ9XCJvdXRlckluZGV4ID0gJGluZGV4XCI+XG4gICAgICAgPGRpdiBuZy1yZXBlYXQ9XCJ2YWx1ZSBpbiBpbm5lckxpc3RcIiBuZy1pbml0PVwiaW5uZXJJbmRleCA9ICRpbmRleFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXhhbXBsZS1pbml0XCI+bGlzdFsge3tvdXRlckluZGV4fX0gXVsge3tpbm5lckluZGV4fX0gXSA9IHt7dmFsdWV9fTs8L3NwYW4+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZGl2PlxuICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgYWxpYXMgaW5kZXggcG9zaXRpb25zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgZWxlbWVudHMgPSBlbGVtZW50LmFsbChieS5jc3MoJy5leGFtcGxlLWluaXQnKSk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAwIF0gPSBhOycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgxKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDAgXVsgMSBdID0gYjsnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMikuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAxIF1bIDAgXSA9IGM7Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDMpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMSBdWyAxIF0gPSBkOycpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0luaXREaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIHByaW9yaXR5OiA0NTAsXG4gIGNvbXBpbGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBzY29wZS4kZXZhbChhdHRycy5uZ0luaXQpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTGlzdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGV4dCBpbnB1dCB0aGF0IGNvbnZlcnRzIGJldHdlZW4gYSBkZWxpbWl0ZWQgc3RyaW5nIGFuZCBhbiBhcnJheSBvZiBzdHJpbmdzLiBUaGUgZGVmYXVsdFxuICogZGVsaW1pdGVyIGlzIGEgY29tbWEgZm9sbG93ZWQgYnkgYSBzcGFjZSAtIGVxdWl2YWxlbnQgdG8gYG5nLWxpc3Q9XCIsIFwiYC4gWW91IGNhbiBzcGVjaWZ5IGEgY3VzdG9tXG4gKiBkZWxpbWl0ZXIgYXMgdGhlIHZhbHVlIG9mIHRoZSBgbmdMaXN0YCBhdHRyaWJ1dGUgLSBmb3IgZXhhbXBsZSwgYG5nLWxpc3Q9XCIgfCBcImAuXG4gKlxuICogVGhlIGJlaGF2aW91ciBvZiB0aGUgZGlyZWN0aXZlIGlzIGFmZmVjdGVkIGJ5IHRoZSB1c2Ugb2YgdGhlIGBuZ1RyaW1gIGF0dHJpYnV0ZS5cbiAqICogSWYgYG5nVHJpbWAgaXMgc2V0IHRvIGBcImZhbHNlXCJgIHRoZW4gd2hpdGVzcGFjZSBhcm91bmQgYm90aCB0aGUgc2VwYXJhdG9yIGFuZCBlYWNoXG4gKiAgIGxpc3QgaXRlbSBpcyByZXNwZWN0ZWQuIFRoaXMgaW1wbGllcyB0aGF0IHRoZSB1c2VyIG9mIHRoZSBkaXJlY3RpdmUgaXMgcmVzcG9uc2libGUgZm9yXG4gKiAgIGRlYWxpbmcgd2l0aCB3aGl0ZXNwYWNlIGJ1dCBhbHNvIGFsbG93cyB5b3UgdG8gdXNlIHdoaXRlc3BhY2UgYXMgYSBkZWxpbWl0ZXIsIHN1Y2ggYXMgYVxuICogICB0YWIgb3IgbmV3bGluZSBjaGFyYWN0ZXIuXG4gKiAqIE90aGVyd2lzZSB3aGl0ZXNwYWNlIGFyb3VuZCB0aGUgZGVsaW1pdGVyIGlzIGlnbm9yZWQgd2hlbiBzcGxpdHRpbmcgKGFsdGhvdWdoIGl0IGlzIHJlc3BlY3RlZFxuICogICB3aGVuIGpvaW5pbmcgdGhlIGxpc3QgaXRlbXMgYmFjayB0b2dldGhlcikgYW5kIHdoaXRlc3BhY2UgYXJvdW5kIGVhY2ggbGlzdCBpdGVtIGlzIHN0cmlwcGVkXG4gKiAgIGJlZm9yZSBpdCBpcyBhZGRlZCB0byB0aGUgbW9kZWwuXG4gKlxuICogIyMjIEV4YW1wbGUgd2l0aCBWYWxpZGF0aW9uXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nTGlzdC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJsaXN0RXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICAgIGFuZ3VsYXIubW9kdWxlKCdsaXN0RXhhbXBsZScsIFtdKVxuICogICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ21vcnBoZXVzJywgJ25lbycsICd0cmluaXR5J107XG4gKiAgICAgICAgfV0pO1xuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgIDxsYWJlbD5MaXN0OiA8aW5wdXQgbmFtZT1cIm5hbWVzSW5wdXRcIiBuZy1tb2RlbD1cIm5hbWVzXCIgbmctbGlzdCByZXF1aXJlZD48L2xhYmVsPlxuICogICAgICA8c3BhbiByb2xlPVwiYWxlcnRcIj5cbiAqICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5uYW1lc0lucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICogICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAqICAgICAgPC9zcGFuPlxuICogICAgICA8YnI+XG4gKiAgICAgIDx0dD5uYW1lcyA9IHt7bmFtZXN9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCA9IHt7bXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0ubmFtZXNJbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5uYW1lc0lucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gKiAgICAgPC9mb3JtPlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICB2YXIgbGlzdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZXMnKSk7XG4gKiAgICAgdmFyIG5hbWVzID0gZWxlbWVudChieS5leGFjdEJpbmRpbmcoJ25hbWVzJykpO1xuICogICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkJykpO1xuICogICAgIHZhciBlcnJvciA9IGVsZW1lbnQoYnkuY3NzKCdzcGFuLmVycm9yJykpO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGV4cGVjdChuYW1lcy5nZXRUZXh0KCkpLnRvQ29udGFpbignW1wibW9ycGhldXNcIixcIm5lb1wiLFwidHJpbml0eVwiXScpO1xuICogICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gKiAgICAgICBleHBlY3QoZXJyb3IuZ2V0Q3NzVmFsdWUoJ2Rpc3BsYXknKSkudG9CZSgnbm9uZScpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGxpc3RJbnB1dC5jbGVhcigpO1xuICogICAgICAgbGlzdElucHV0LnNlbmRLZXlzKCcnKTtcbiAqXG4gKiAgICAgICBleHBlY3QobmFtZXMuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICogICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICogICAgICAgZXhwZWN0KGVycm9yLmdldENzc1ZhbHVlKCdkaXNwbGF5JykpLm5vdC50b0JlKCdub25lJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiAjIyMgRXhhbXBsZSAtIHNwbGl0dGluZyBvbiBuZXdsaW5lXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdMaXN0LWRpcmVjdGl2ZS1uZXdsaW5lc1wiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgPHRleHRhcmVhIG5nLW1vZGVsPVwibGlzdFwiIG5nLWxpc3Q9XCImIzEwO1wiIG5nLXRyaW09XCJmYWxzZVwiPjwvdGV4dGFyZWE+XG4gKiAgICA8cHJlPnt7IGxpc3QgfCBqc29uIH19PC9wcmU+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIGl0KFwic2hvdWxkIHNwbGl0IHRoZSB0ZXh0IGJ5IG5ld2xpbmVzXCIsIGZ1bmN0aW9uKCkge1xuICogICAgICAgdmFyIGxpc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2xpc3QnKSk7XG4gKiAgICAgICB2YXIgb3V0cHV0ID0gZWxlbWVudChieS5iaW5kaW5nKCdsaXN0IHwganNvbicpKTtcbiAqICAgICAgIGxpc3RJbnB1dC5zZW5kS2V5cygnYWJjXFxuZGVmXFxuZ2hpJyk7XG4gKiAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9Db250YWluKCdbXFxuICBcImFiY1wiLFxcbiAgXCJkZWZcIixcXG4gIFwiZ2hpXCJcXG5dJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBpbnB1dFxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0xpc3Qgb3B0aW9uYWwgZGVsaW1pdGVyIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gc3BsaXQgdGhlIHZhbHVlLlxuICovXG52YXIgbmdMaXN0RGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICAgICAgLy8gV2Ugd2FudCB0byBjb250cm9sIHdoaXRlc3BhY2UgdHJpbW1pbmcgc28gd2UgdXNlIHRoaXMgY29udm9sdXRlZCBhcHByb2FjaFxuICAgICAgLy8gdG8gYWNjZXNzIHRoZSBuZ0xpc3QgYXR0cmlidXRlLCB3aGljaCBkb2Vzbid0IHByZS10cmltIHRoZSBhdHRyaWJ1dGVcbiAgICAgIHZhciBuZ0xpc3QgPSBlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci5uZ0xpc3QpIHx8ICcsICc7XG4gICAgICB2YXIgdHJpbVZhbHVlcyA9IGF0dHIubmdUcmltICE9PSAnZmFsc2UnO1xuICAgICAgdmFyIHNlcGFyYXRvciA9IHRyaW1WYWx1ZXMgPyB0cmltKG5nTGlzdCkgOiBuZ0xpc3Q7XG5cbiAgICAgIHZhciBwYXJzZSA9IGZ1bmN0aW9uKHZpZXdWYWx1ZSkge1xuICAgICAgICAvLyBJZiB0aGUgdmlld1ZhbHVlIGlzIGludmFsaWQgKHNheSByZXF1aXJlZCBidXQgZW1wdHkpIGl0IHdpbGwgYmUgYHVuZGVmaW5lZGBcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZpZXdWYWx1ZSkpIHJldHVybjtcblxuICAgICAgICB2YXIgbGlzdCA9IFtdO1xuXG4gICAgICAgIGlmICh2aWV3VmFsdWUpIHtcbiAgICAgICAgICBmb3JFYWNoKHZpZXdWYWx1ZS5zcGxpdChzZXBhcmF0b3IpLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSBsaXN0LnB1c2godHJpbVZhbHVlcyA/IHRyaW0odmFsdWUpIDogdmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICB9O1xuXG4gICAgICBjdHJsLiRwYXJzZXJzLnB1c2gocGFyc2UpO1xuICAgICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS5qb2luKG5nTGlzdCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIE92ZXJyaWRlIHRoZSBzdGFuZGFyZCAkaXNFbXB0eSBiZWNhdXNlIGFuIGVtcHR5IGFycmF5IG1lYW5zIHRoZSBpbnB1dCBpcyBlbXB0eS5cbiAgICAgIGN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlIHx8ICF2YWx1ZS5sZW5ndGg7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbi8qIGdsb2JhbCBWQUxJRF9DTEFTUzogdHJ1ZSxcbiAgSU5WQUxJRF9DTEFTUzogdHJ1ZSxcbiAgUFJJU1RJTkVfQ0xBU1M6IHRydWUsXG4gIERJUlRZX0NMQVNTOiB0cnVlLFxuICBVTlRPVUNIRURfQ0xBU1M6IHRydWUsXG4gIFRPVUNIRURfQ0xBU1M6IHRydWUsXG4qL1xuXG52YXIgVkFMSURfQ0xBU1MgPSAnbmctdmFsaWQnLFxuICAgIElOVkFMSURfQ0xBU1MgPSAnbmctaW52YWxpZCcsXG4gICAgUFJJU1RJTkVfQ0xBU1MgPSAnbmctcHJpc3RpbmUnLFxuICAgIERJUlRZX0NMQVNTID0gJ25nLWRpcnR5JyxcbiAgICBVTlRPVUNIRURfQ0xBU1MgPSAnbmctdW50b3VjaGVkJyxcbiAgICBUT1VDSEVEX0NMQVNTID0gJ25nLXRvdWNoZWQnLFxuICAgIFBFTkRJTkdfQ0xBU1MgPSAnbmctcGVuZGluZyc7XG5cbnZhciBuZ01vZGVsTWluRXJyID0gbWluRXJyKCduZ01vZGVsJyk7XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJcbiAqXG4gKiBAcHJvcGVydHkgeyp9ICR2aWV3VmFsdWUgVGhlIGFjdHVhbCB2YWx1ZSBmcm9tIHRoZSBjb250cm9sJ3Mgdmlldy4gRm9yIGBpbnB1dGAgZWxlbWVudHMsIHRoaXMgaXMgYVxuICogU3RyaW5nLiBTZWUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZX0gZm9yIGluZm9ybWF0aW9uIGFib3V0IHdoZW4gdGhlICR2aWV3VmFsdWVcbiAqIGlzIHNldC5cbiAqIEBwcm9wZXJ0eSB7Kn0gJG1vZGVsVmFsdWUgVGhlIHZhbHVlIGluIHRoZSBtb2RlbCB0aGF0IHRoZSBjb250cm9sIGlzIGJvdW5kIHRvLlxuICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkcGFyc2VycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSwgYXMgYSBwaXBlbGluZSwgd2hlbmV2ZXJcbiAgICAgICB0aGUgY29udHJvbCByZWFkcyB2YWx1ZSBmcm9tIHRoZSBET00uIFRoZSBmdW5jdGlvbnMgYXJlIGNhbGxlZCBpbiBhcnJheSBvcmRlciwgZWFjaCBwYXNzaW5nXG4gICAgICAgaXRzIHJldHVybiB2YWx1ZSB0aHJvdWdoIHRvIHRoZSBuZXh0LiBUaGUgbGFzdCByZXR1cm4gdmFsdWUgaXMgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAgIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGAkdmFsaWRhdG9yc2B9IGNvbGxlY3Rpb24uXG5cblBhcnNlcnMgYXJlIHVzZWQgdG8gc2FuaXRpemUgLyBjb252ZXJ0IHRoZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlXG5gJHZpZXdWYWx1ZWB9LlxuXG5SZXR1cm5pbmcgYHVuZGVmaW5lZGAgZnJvbSBhIHBhcnNlciBtZWFucyBhIHBhcnNlIGVycm9yIG9jY3VycmVkLiBJbiB0aGF0IGNhc2UsXG5ubyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgJHZhbGlkYXRvcnNgfSB3aWxsIHJ1biBhbmQgdGhlIGBuZ01vZGVsYFxud2lsbCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAgdW5sZXNzIHtAbGluayBuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnMuYWxsb3dJbnZhbGlkYH1cbmlzIHNldCB0byBgdHJ1ZWAuIFRoZSBwYXJzZSBlcnJvciBpcyBzdG9yZWQgaW4gYG5nTW9kZWwuJGVycm9yLnBhcnNlYC5cblxuICpcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJGZvcm1hdHRlcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUsIGFzIGEgcGlwZWxpbmUsIHdoZW5ldmVyXG4gICAgICAgdGhlIG1vZGVsIHZhbHVlIGNoYW5nZXMuIFRoZSBmdW5jdGlvbnMgYXJlIGNhbGxlZCBpbiByZXZlcnNlIGFycmF5IG9yZGVyLCBlYWNoIHBhc3NpbmcgdGhlIHZhbHVlIHRocm91Z2ggdG8gdGhlXG4gICAgICAgbmV4dC4gVGhlIGxhc3QgcmV0dXJuIHZhbHVlIGlzIHVzZWQgYXMgdGhlIGFjdHVhbCBET00gdmFsdWUuXG4gICAgICAgVXNlZCB0byBmb3JtYXQgLyBjb252ZXJ0IHZhbHVlcyBmb3IgZGlzcGxheSBpbiB0aGUgY29udHJvbC5cbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsdWUpIHtcbiAqICAgaWYgKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gKiAgIH1cbiAqIH1cbiAqIG5nTW9kZWwuJGZvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xuICogYGBgXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24+fSAkdmFsaWRhdG9ycyBBIGNvbGxlY3Rpb24gb2YgdmFsaWRhdG9ycyB0aGF0IGFyZSBhcHBsaWVkXG4gKiAgICAgIHdoZW5ldmVyIHRoZSBtb2RlbCB2YWx1ZSBjaGFuZ2VzLiBUaGUga2V5IHZhbHVlIHdpdGhpbiB0aGUgb2JqZWN0IHJlZmVycyB0byB0aGUgbmFtZSBvZiB0aGVcbiAqICAgICAgdmFsaWRhdG9yIHdoaWxlIHRoZSBmdW5jdGlvbiByZWZlcnMgdG8gdGhlIHZhbGlkYXRpb24gb3BlcmF0aW9uLiBUaGUgdmFsaWRhdGlvbiBvcGVyYXRpb24gaXNcbiAqICAgICAgcHJvdmlkZWQgd2l0aCB0aGUgbW9kZWwgdmFsdWUgYXMgYW4gYXJndW1lbnQgYW5kIG11c3QgcmV0dXJuIGEgdHJ1ZSBvciBmYWxzZSB2YWx1ZSBkZXBlbmRpbmdcbiAqICAgICAgb24gdGhlIHJlc3BvbnNlIG9mIHRoYXQgdmFsaWRhdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogbmdNb2RlbC4kdmFsaWRhdG9ycy52YWxpZENoYXJhY3RlcnMgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAqICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gKiAgIHJldHVybiAvWzAtOV0rLy50ZXN0KHZhbHVlKSAmJlxuICogICAgICAgICAgL1thLXpdKy8udGVzdCh2YWx1ZSkgJiZcbiAqICAgICAgICAgIC9bQS1aXSsvLnRlc3QodmFsdWUpICYmXG4gKiAgICAgICAgICAvXFxXKy8udGVzdCh2YWx1ZSk7XG4gKiB9O1xuICogYGBgXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24+fSAkYXN5bmNWYWxpZGF0b3JzIEEgY29sbGVjdGlvbiBvZiB2YWxpZGF0aW9ucyB0aGF0IGFyZSBleHBlY3RlZCB0b1xuICogICAgICBwZXJmb3JtIGFuIGFzeW5jaHJvbm91cyB2YWxpZGF0aW9uIChlLmcuIGEgSFRUUCByZXF1ZXN0KS4gVGhlIHZhbGlkYXRpb24gZnVuY3Rpb24gdGhhdCBpcyBwcm92aWRlZFxuICogICAgICBpcyBleHBlY3RlZCB0byByZXR1cm4gYSBwcm9taXNlIHdoZW4gaXQgaXMgcnVuIGR1cmluZyB0aGUgbW9kZWwgdmFsaWRhdGlvbiBwcm9jZXNzLiBPbmNlIHRoZSBwcm9taXNlXG4gKiAgICAgIGlzIGRlbGl2ZXJlZCB0aGVuIHRoZSB2YWxpZGF0aW9uIHN0YXR1cyB3aWxsIGJlIHNldCB0byB0cnVlIHdoZW4gZnVsZmlsbGVkIGFuZCBmYWxzZSB3aGVuIHJlamVjdGVkLlxuICogICAgICBXaGVuIHRoZSBhc3luY2hyb25vdXMgdmFsaWRhdG9ycyBhcmUgdHJpZ2dlcmVkLCBlYWNoIG9mIHRoZSB2YWxpZGF0b3JzIHdpbGwgcnVuIGluIHBhcmFsbGVsIGFuZCB0aGUgbW9kZWxcbiAqICAgICAgdmFsdWUgd2lsbCBvbmx5IGJlIHVwZGF0ZWQgb25jZSBhbGwgdmFsaWRhdG9ycyBoYXZlIGJlZW4gZnVsZmlsbGVkLiBBcyBsb25nIGFzIGFuIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JcbiAqICAgICAgaXMgdW5mdWxmaWxsZWQsIGl0cyBrZXkgd2lsbCBiZSBhZGRlZCB0byB0aGUgY29udHJvbGxlcnMgYCRwZW5kaW5nYCBwcm9wZXJ0eS4gQWxzbywgYWxsIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzXG4gKiAgICAgIHdpbGwgb25seSBydW4gb25jZSBhbGwgc3luY2hyb25vdXMgdmFsaWRhdG9ycyBoYXZlIHBhc3NlZC5cbiAqXG4gKiBQbGVhc2Ugbm90ZSB0aGF0IGlmICRodHRwIGlzIHVzZWQgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdGhhdCB0aGUgc2VydmVyIHJldHVybnMgYSBzdWNjZXNzIEhUVFAgcmVzcG9uc2UgY29kZVxuICogaW4gb3JkZXIgdG8gZnVsZmlsbCB0aGUgdmFsaWRhdGlvbiBhbmQgYSBzdGF0dXMgbGV2ZWwgb2YgYDR4eGAgaW4gb3JkZXIgdG8gcmVqZWN0IHRoZSB2YWxpZGF0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiBuZ01vZGVsLiRhc3luY1ZhbGlkYXRvcnMudW5pcXVlVXNlcm5hbWUgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAqICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gKlxuICogICAvLyBMb29rdXAgdXNlciBieSB1c2VybmFtZVxuICogICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzLycgKyB2YWx1ZSkuXG4gKiAgICAgIHRoZW4oZnVuY3Rpb24gcmVzb2x2ZWQoKSB7XG4gKiAgICAgICAgLy91c2VybmFtZSBleGlzdHMsIHRoaXMgbWVhbnMgdmFsaWRhdGlvbiBmYWlsc1xuICogICAgICAgIHJldHVybiAkcS5yZWplY3QoJ2V4aXN0cycpO1xuICogICAgICB9LCBmdW5jdGlvbiByZWplY3RlZCgpIHtcbiAqICAgICAgICAvL3VzZXJuYW1lIGRvZXMgbm90IGV4aXN0LCB0aGVyZWZvcmUgdGhpcyB2YWxpZGF0aW9uIHBhc3Nlc1xuICogICAgICAgIHJldHVybiB0cnVlO1xuICogICAgICB9KTtcbiAqIH07XG4gKiBgYGBcbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICR2aWV3Q2hhbmdlTGlzdGVuZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlIHdoZW5ldmVyIHRoZVxuICogICAgIHZpZXcgdmFsdWUgaGFzIGNoYW5nZWQuIEl0IGlzIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cywgYW5kIGl0cyByZXR1cm4gdmFsdWUgaXMgaWdub3JlZC5cbiAqICAgICBUaGlzIGNhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGFkZGl0aW9uYWwgJHdhdGNoZXMgYWdhaW5zdCB0aGUgbW9kZWwgdmFsdWUuXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3R9ICRlcnJvciBBbiBvYmplY3QgaGFzaCB3aXRoIGFsbCBmYWlsaW5nIHZhbGlkYXRvciBpZHMgYXMga2V5cy5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkcGVuZGluZyBBbiBvYmplY3QgaGFzaCB3aXRoIGFsbCBwZW5kaW5nIHZhbGlkYXRvciBpZHMgYXMga2V5cy5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR1bnRvdWNoZWQgVHJ1ZSBpZiBjb250cm9sIGhhcyBub3QgbG9zdCBmb2N1cyB5ZXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR0b3VjaGVkIFRydWUgaWYgY29udHJvbCBoYXMgbG9zdCBmb2N1cy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgY29udHJvbCB5ZXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRkaXJ0eSBUcnVlIGlmIHVzZXIgaGFzIGFscmVhZHkgaW50ZXJhY3RlZCB3aXRoIHRoZSBjb250cm9sLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiB0aGVyZSBpcyBubyBlcnJvci5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgZXJyb3Igb24gdGhlIGNvbnRyb2wuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gJG5hbWUgVGhlIG5hbWUgYXR0cmlidXRlIG9mIHRoZSBjb250cm9sLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGBOZ01vZGVsQ29udHJvbGxlcmAgcHJvdmlkZXMgQVBJIGZvciB0aGUge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSBkaXJlY3RpdmUuXG4gKiBUaGUgY29udHJvbGxlciBjb250YWlucyBzZXJ2aWNlcyBmb3IgZGF0YS1iaW5kaW5nLCB2YWxpZGF0aW9uLCBDU1MgdXBkYXRlcywgYW5kIHZhbHVlIGZvcm1hdHRpbmdcbiAqIGFuZCBwYXJzaW5nLiBJdCBwdXJwb3NlZnVsbHkgZG9lcyBub3QgY29udGFpbiBhbnkgbG9naWMgd2hpY2ggZGVhbHMgd2l0aCBET00gcmVuZGVyaW5nIG9yXG4gKiBsaXN0ZW5pbmcgdG8gRE9NIGV2ZW50cy5cbiAqIFN1Y2ggRE9NIHJlbGF0ZWQgbG9naWMgc2hvdWxkIGJlIHByb3ZpZGVkIGJ5IG90aGVyIGRpcmVjdGl2ZXMgd2hpY2ggbWFrZSB1c2Ugb2ZcbiAqIGBOZ01vZGVsQ29udHJvbGxlcmAgZm9yIGRhdGEtYmluZGluZyB0byBjb250cm9sIGVsZW1lbnRzLlxuICogQW5ndWxhciBwcm92aWRlcyB0aGlzIERPTSBsb2dpYyBmb3IgbW9zdCB7QGxpbmsgaW5wdXQgYGlucHV0YH0gZWxlbWVudHMuXG4gKiBBdCB0aGUgZW5kIG9mIHRoaXMgcGFnZSB5b3UgY2FuIGZpbmQgYSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciNjdXN0b20tY29udHJvbC1leGFtcGxlXG4gKiBjdXN0b20gY29udHJvbCBleGFtcGxlfSB0aGF0IHVzZXMgYG5nTW9kZWxDb250cm9sbGVyYCB0byBiaW5kIHRvIGBjb250ZW50ZWRpdGFibGVgIGVsZW1lbnRzLlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgQ3VzdG9tIENvbnRyb2wgRXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYE5nTW9kZWxDb250cm9sbGVyYCB3aXRoIGEgY3VzdG9tIGNvbnRyb2wgdG8gYWNoaWV2ZVxuICogZGF0YS1iaW5kaW5nLiBOb3RpY2UgaG93IGRpZmZlcmVudCBkaXJlY3RpdmVzIChgY29udGVudGVkaXRhYmxlYCwgYG5nLW1vZGVsYCwgYW5kIGByZXF1aXJlZGApXG4gKiBjb2xsYWJvcmF0ZSB0b2dldGhlciB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIHJlc3VsdC5cbiAqXG4gKiBgY29udGVudGVkaXRhYmxlYCBpcyBhbiBIVE1MNSBhdHRyaWJ1dGUsIHdoaWNoIHRlbGxzIHRoZSBicm93c2VyIHRvIGxldCB0aGUgZWxlbWVudFxuICogY29udGVudHMgYmUgZWRpdGVkIGluIHBsYWNlIGJ5IHRoZSB1c2VyLlxuICpcbiAqIFdlIGFyZSB1c2luZyB0aGUge0BsaW5rIG5nLnNlcnZpY2U6JHNjZSAkc2NlfSBzZXJ2aWNlIGhlcmUgYW5kIGluY2x1ZGUgdGhlIHtAbGluayBuZ1Nhbml0aXplICRzYW5pdGl6ZX1cbiAqIG1vZHVsZSB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSBcImJhZFwiIGNvbnRlbnQgbGlrZSBpbmxpbmUgZXZlbnQgbGlzdGVuZXIgKGUuZy4gYDxzcGFuIG9uY2xpY2s9XCIuLi5cIj5gKS5cbiAqIEhvd2V2ZXIsIGFzIHdlIGFyZSB1c2luZyBgJHNjZWAgdGhlIG1vZGVsIGNhbiBzdGlsbCBkZWNpZGUgdG8gcHJvdmlkZSB1bnNhZmUgY29udGVudCBpZiBpdCBtYXJrc1xuICogdGhhdCBjb250ZW50IHVzaW5nIHRoZSBgJHNjZWAgc2VydmljZS5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwiTmdNb2RlbENvbnRyb2xsZXJcIiBtb2R1bGU9XCJjdXN0b21Db250cm9sXCIgZGVwcz1cImFuZ3VsYXItc2FuaXRpemUuanNcIj5cbiAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICBbY29udGVudGVkaXRhYmxlXSB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICAgICAgbWluLWhlaWdodDogMjBweDtcbiAgICAgIH1cblxuICAgICAgLm5nLWludmFsaWQge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZWQ7XG4gICAgICB9XG5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2N1c3RvbUNvbnRyb2wnLCBbJ25nU2FuaXRpemUnXSkuXG4gICAgICAgIGRpcmVjdGl2ZSgnY29udGVudGVkaXRhYmxlJywgWyckc2NlJywgZnVuY3Rpb24oJHNjZSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLCAvLyBvbmx5IGFjdGl2YXRlIG9uIGVsZW1lbnQgYXR0cmlidXRlXG4gICAgICAgICAgICByZXF1aXJlOiAnP25nTW9kZWwnLCAvLyBnZXQgYSBob2xkIG9mIE5nTW9kZWxDb250cm9sbGVyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcbiAgICAgICAgICAgICAgaWYgKCFuZ01vZGVsKSByZXR1cm47IC8vIGRvIG5vdGhpbmcgaWYgbm8gbmctbW9kZWxcblxuICAgICAgICAgICAgICAvLyBTcGVjaWZ5IGhvdyBVSSBzaG91bGQgYmUgdXBkYXRlZFxuICAgICAgICAgICAgICBuZ01vZGVsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwoJHNjZS5nZXRUcnVzdGVkSHRtbChuZ01vZGVsLiR2aWV3VmFsdWUgfHwgJycpKTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIGNoYW5nZSBldmVudHMgdG8gZW5hYmxlIGJpbmRpbmdcbiAgICAgICAgICAgICAgZWxlbWVudC5vbignYmx1ciBrZXl1cCBjaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKHJlYWQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmVhZCgpOyAvLyBpbml0aWFsaXplXG5cbiAgICAgICAgICAgICAgLy8gV3JpdGUgZGF0YSB0byB0aGUgbW9kZWxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gcmVhZCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IGVsZW1lbnQuaHRtbCgpO1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gd2UgY2xlYXIgdGhlIGNvbnRlbnQgZWRpdGFibGUgdGhlIGJyb3dzZXIgbGVhdmVzIGEgPGJyPiBiZWhpbmRcbiAgICAgICAgICAgICAgICAvLyBJZiBzdHJpcC1iciBhdHRyaWJ1dGUgaXMgcHJvdmlkZWQgdGhlbiB3ZSBzdHJpcCB0aGlzIG91dFxuICAgICAgICAgICAgICAgIGlmICggYXR0cnMuc3RyaXBCciAmJiBodG1sID09ICc8YnI+JyApIHtcbiAgICAgICAgICAgICAgICAgIGh0bWwgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGh0bWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICAgICAgIDxkaXYgY29udGVudGVkaXRhYmxlXG4gICAgICAgICAgICBuYW1lPVwibXlXaWRnZXRcIiBuZy1tb2RlbD1cInVzZXJDb250ZW50XCJcbiAgICAgICAgICAgIHN0cmlwLWJyPVwidHJ1ZVwiXG4gICAgICAgICAgICByZXF1aXJlZD5DaGFuZ2UgbWUhPC9kaXY+XG4gICAgICAgIDxzcGFuIG5nLXNob3c9XCJteUZvcm0ubXlXaWRnZXQuJGVycm9yLnJlcXVpcmVkXCI+UmVxdWlyZWQhPC9zcGFuPlxuICAgICAgIDxocj5cbiAgICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJ1c2VyQ29udGVudFwiIGFyaWEtbGFiZWw9XCJEeW5hbWljIHRleHRhcmVhXCI+PC90ZXh0YXJlYT5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgIGl0KCdzaG91bGQgZGF0YS1iaW5kIGFuZCBiZWNvbWUgaW52YWxpZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ3NhZmFyaScgfHwgYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnZmlyZWZveCcpIHtcbiAgICAgICAgLy8gU2FmYXJpRHJpdmVyIGNhbid0IGhhbmRsZSBjb250ZW50ZWRpdGFibGVcbiAgICAgICAgLy8gYW5kIEZpcmVmb3ggZHJpdmVyIGNhbid0IGNsZWFyIGNvbnRlbnRlZGl0YWJsZXMgdmVyeSB3ZWxsXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBjb250ZW50RWRpdGFibGUgPSBlbGVtZW50KGJ5LmNzcygnW2NvbnRlbnRlZGl0YWJsZV0nKSk7XG4gICAgICB2YXIgY29udGVudCA9ICdDaGFuZ2UgbWUhJztcblxuICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRUZXh0KCkpLnRvRXF1YWwoY29udGVudCk7XG5cbiAgICAgIGNvbnRlbnRFZGl0YWJsZS5jbGVhcigpO1xuICAgICAgY29udGVudEVkaXRhYmxlLnNlbmRLZXlzKHByb3RyYWN0b3IuS2V5LkJBQ0tfU1BBQ0UpO1xuICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRUZXh0KCkpLnRvRXF1YWwoJycpO1xuICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL25nLWludmFsaWQtcmVxdWlyZWQvKTtcbiAgICB9KTtcbiAgICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICpcbiAqL1xudmFyIE5nTW9kZWxDb250cm9sbGVyID0gWyckc2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJGF0dHJzJywgJyRlbGVtZW50JywgJyRwYXJzZScsICckYW5pbWF0ZScsICckdGltZW91dCcsICckcm9vdFNjb3BlJywgJyRxJywgJyRpbnRlcnBvbGF0ZScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlciwgJGF0dHIsICRlbGVtZW50LCAkcGFyc2UsICRhbmltYXRlLCAkdGltZW91dCwgJHJvb3RTY29wZSwgJHEsICRpbnRlcnBvbGF0ZSkge1xuICB0aGlzLiR2aWV3VmFsdWUgPSBOdW1iZXIuTmFOO1xuICB0aGlzLiRtb2RlbFZhbHVlID0gTnVtYmVyLk5hTjtcbiAgdGhpcy4kJHJhd01vZGVsVmFsdWUgPSB1bmRlZmluZWQ7IC8vIHN0b3JlcyB0aGUgcGFyc2VkIG1vZGVsVmFsdWUgLyBtb2RlbCBzZXQgZnJvbSBzY29wZSByZWdhcmRsZXNzIG9mIHZhbGlkaXR5LlxuICB0aGlzLiR2YWxpZGF0b3JzID0ge307XG4gIHRoaXMuJGFzeW5jVmFsaWRhdG9ycyA9IHt9O1xuICB0aGlzLiRwYXJzZXJzID0gW107XG4gIHRoaXMuJGZvcm1hdHRlcnMgPSBbXTtcbiAgdGhpcy4kdmlld0NoYW5nZUxpc3RlbmVycyA9IFtdO1xuICB0aGlzLiR1bnRvdWNoZWQgPSB0cnVlO1xuICB0aGlzLiR0b3VjaGVkID0gZmFsc2U7XG4gIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTtcbiAgdGhpcy4kZGlydHkgPSBmYWxzZTtcbiAgdGhpcy4kdmFsaWQgPSB0cnVlO1xuICB0aGlzLiRpbnZhbGlkID0gZmFsc2U7XG4gIHRoaXMuJGVycm9yID0ge307IC8vIGtlZXAgaW52YWxpZCBrZXlzIGhlcmVcbiAgdGhpcy4kJHN1Y2Nlc3MgPSB7fTsgLy8ga2VlcCB2YWxpZCBrZXlzIGhlcmVcbiAgdGhpcy4kcGVuZGluZyA9IHVuZGVmaW5lZDsgLy8ga2VlcCBwZW5kaW5nIGtleXMgaGVyZVxuICB0aGlzLiRuYW1lID0gJGludGVycG9sYXRlKCRhdHRyLm5hbWUgfHwgJycsIGZhbHNlKSgkc2NvcGUpO1xuICB0aGlzLiQkcGFyZW50Rm9ybSA9IG51bGxGb3JtQ3RybDtcblxuICB2YXIgcGFyc2VkTmdNb2RlbCA9ICRwYXJzZSgkYXR0ci5uZ01vZGVsKSxcbiAgICAgIHBhcnNlZE5nTW9kZWxBc3NpZ24gPSBwYXJzZWROZ01vZGVsLmFzc2lnbixcbiAgICAgIG5nTW9kZWxHZXQgPSBwYXJzZWROZ01vZGVsLFxuICAgICAgbmdNb2RlbFNldCA9IHBhcnNlZE5nTW9kZWxBc3NpZ24sXG4gICAgICBwZW5kaW5nRGVib3VuY2UgPSBudWxsLFxuICAgICAgcGFyc2VyVmFsaWQsXG4gICAgICBjdHJsID0gdGhpcztcblxuICB0aGlzLiQkc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBjdHJsLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdldHRlclNldHRlcikge1xuICAgICAgdmFyIGludm9rZU1vZGVsR2V0dGVyID0gJHBhcnNlKCRhdHRyLm5nTW9kZWwgKyAnKCknKSxcbiAgICAgICAgICBpbnZva2VNb2RlbFNldHRlciA9ICRwYXJzZSgkYXR0ci5uZ01vZGVsICsgJygkJCRwKScpO1xuXG4gICAgICBuZ01vZGVsR2V0ID0gZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgIHZhciBtb2RlbFZhbHVlID0gcGFyc2VkTmdNb2RlbCgkc2NvcGUpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihtb2RlbFZhbHVlKSkge1xuICAgICAgICAgIG1vZGVsVmFsdWUgPSBpbnZva2VNb2RlbEdldHRlcigkc2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtb2RlbFZhbHVlO1xuICAgICAgfTtcbiAgICAgIG5nTW9kZWxTZXQgPSBmdW5jdGlvbigkc2NvcGUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHBhcnNlZE5nTW9kZWwoJHNjb3BlKSkpIHtcbiAgICAgICAgICBpbnZva2VNb2RlbFNldHRlcigkc2NvcGUsIHskJCRwOiBjdHJsLiRtb2RlbFZhbHVlfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyc2VkTmdNb2RlbEFzc2lnbigkc2NvcGUsIGN0cmwuJG1vZGVsVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIXBhcnNlZE5nTW9kZWwuYXNzaWduKSB7XG4gICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdub25hc3NpZ24nLCBcIkV4cHJlc3Npb24gJ3swfScgaXMgbm9uLWFzc2lnbmFibGUuIEVsZW1lbnQ6IHsxfVwiLFxuICAgICAgICAgICRhdHRyLm5nTW9kZWwsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJlbmRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FsbGVkIHdoZW4gdGhlIHZpZXcgbmVlZHMgdG8gYmUgdXBkYXRlZC4gSXQgaXMgZXhwZWN0ZWQgdGhhdCB0aGUgdXNlciBvZiB0aGUgbmctbW9kZWxcbiAgICogZGlyZWN0aXZlIHdpbGwgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBUaGUgYCRyZW5kZXIoKWAgbWV0aG9kIGlzIGludm9rZWQgaW4gdGhlIGZvbGxvd2luZyBzaXR1YXRpb25zOlxuICAgKlxuICAgKiAqIGAkcm9sbGJhY2tWaWV3VmFsdWUoKWAgaXMgY2FsbGVkLiAgSWYgd2UgYXJlIHJvbGxpbmcgYmFjayB0aGUgdmlldyB2YWx1ZSB0byB0aGUgbGFzdFxuICAgKiAgIGNvbW1pdHRlZCB2YWx1ZSB0aGVuIGAkcmVuZGVyKClgIGlzIGNhbGxlZCB0byB1cGRhdGUgdGhlIGlucHV0IGNvbnRyb2wuXG4gICAqICogVGhlIHZhbHVlIHJlZmVyZW5jZWQgYnkgYG5nLW1vZGVsYCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIGJvdGggdGhlIGAkbW9kZWxWYWx1ZWAgYW5kXG4gICAqICAgdGhlIGAkdmlld1ZhbHVlYCBhcmUgZGlmZmVyZW50IGZyb20gbGFzdCB0aW1lLlxuICAgKlxuICAgKiBTaW5jZSBgbmctbW9kZWxgIGRvZXMgbm90IGRvIGEgZGVlcCB3YXRjaCwgYCRyZW5kZXIoKWAgaXMgb25seSBpbnZva2VkIGlmIHRoZSB2YWx1ZXMgb2ZcbiAgICogYCRtb2RlbFZhbHVlYCBhbmQgYCR2aWV3VmFsdWVgIGFyZSBhY3R1YWxseSBkaWZmZXJlbnQgZnJvbSB0aGVpciBwcmV2aW91cyB2YWx1ZS4gSWYgYCRtb2RlbFZhbHVlYFxuICAgKiBvciBgJHZpZXdWYWx1ZWAgYXJlIG9iamVjdHMgKHJhdGhlciB0aGFuIGEgc3RyaW5nIG9yIG51bWJlcikgdGhlbiBgJHJlbmRlcigpYCB3aWxsIG5vdCBiZVxuICAgKiBpbnZva2VkIGlmIHlvdSBvbmx5IGNoYW5nZSBhIHByb3BlcnR5IG9uIHRoZSBvYmplY3RzLlxuICAgKi9cbiAgdGhpcy4kcmVuZGVyID0gbm9vcDtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRpc0VtcHR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuIHdlIG5lZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSB2YWx1ZSBvZiBhbiBpbnB1dCBpcyBlbXB0eS5cbiAgICpcbiAgICogRm9yIGluc3RhbmNlLCB0aGUgcmVxdWlyZWQgZGlyZWN0aXZlIGRvZXMgdGhpcyB0byB3b3JrIG91dCBpZiB0aGUgaW5wdXQgaGFzIGRhdGEgb3Igbm90LlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCBgJGlzRW1wdHlgIGZ1bmN0aW9uIGNoZWNrcyB3aGV0aGVyIHRoZSB2YWx1ZSBpcyBgdW5kZWZpbmVkYCwgYCcnYCwgYG51bGxgIG9yIGBOYU5gLlxuICAgKlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgZm9yIGlucHV0IGRpcmVjdGl2ZXMgd2hvc2UgY29uY2VwdCBvZiBiZWluZyBlbXB0eSBpcyBkaWZmZXJlbnQgZnJvbSB0aGVcbiAgICogZGVmYXVsdC4gVGhlIGBjaGVja2JveElucHV0VHlwZWAgZGlyZWN0aXZlIGRvZXMgdGhpcyBiZWNhdXNlIGluIGl0cyBjYXNlIGEgdmFsdWUgb2YgYGZhbHNlYFxuICAgKiBpbXBsaWVzIGVtcHR5LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgdG8gY2hlY2sgZm9yIGVtcHRpbmVzcy5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBcImVtcHR5XCIuXG4gICAqL1xuICB0aGlzLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gaXNVbmRlZmluZWQodmFsdWUpIHx8IHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQgPSAwO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZhbGlkaXR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDaGFuZ2UgdGhlIHZhbGlkaXR5IHN0YXRlLCBhbmQgbm90aWZ5IHRoZSBmb3JtLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHdpdGhpbiAkcGFyc2Vycy8kZm9ybWF0dGVycyBvciBhIGN1c3RvbSB2YWxpZGF0aW9uIGltcGxlbWVudGF0aW9uLlxuICAgKiBIb3dldmVyLCBpbiBtb3N0IGNhc2VzIGl0IHNob3VsZCBiZSBzdWZmaWNpZW50IHRvIHVzZSB0aGUgYG5nTW9kZWwuJHZhbGlkYXRvcnNgIGFuZFxuICAgKiBgbmdNb2RlbC4kYXN5bmNWYWxpZGF0b3JzYCBjb2xsZWN0aW9ucyB3aGljaCB3aWxsIGNhbGwgYCRzZXRWYWxpZGl0eWAgYXV0b21hdGljYWxseS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRpb25FcnJvcktleSBOYW1lIG9mIHRoZSB2YWxpZGF0b3IuIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCB3aWxsIGJlIGFzc2lnbmVkXG4gICAqICAgICAgICB0byBlaXRoZXIgYCRlcnJvclt2YWxpZGF0aW9uRXJyb3JLZXldYCBvciBgJHBlbmRpbmdbdmFsaWRhdGlvbkVycm9yS2V5XWBcbiAgICogICAgICAgIChmb3IgdW5mdWxmaWxsZWQgYCRhc3luY1ZhbGlkYXRvcnNgKSwgc28gdGhhdCBpdCBpcyBhdmFpbGFibGUgZm9yIGRhdGEtYmluZGluZy5cbiAgICogICAgICAgIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCBzaG91bGQgYmUgaW4gY2FtZWxDYXNlIGFuZCB3aWxsIGdldCBjb252ZXJ0ZWQgaW50byBkYXNoLWNhc2VcbiAgICogICAgICAgIGZvciBjbGFzcyBuYW1lLiBFeGFtcGxlOiBgbXlFcnJvcmAgd2lsbCByZXN1bHQgaW4gYG5nLXZhbGlkLW15LWVycm9yYCBhbmQgYG5nLWludmFsaWQtbXktZXJyb3JgXG4gICAqICAgICAgICBjbGFzcyBhbmQgY2FuIGJlIGJvdW5kIHRvIGFzICBge3tzb21lRm9ybS5zb21lQ29udHJvbC4kZXJyb3IubXlFcnJvcn19YCAuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNWYWxpZCBXaGV0aGVyIHRoZSBjdXJyZW50IHN0YXRlIGlzIHZhbGlkICh0cnVlKSwgaW52YWxpZCAoZmFsc2UpLCBwZW5kaW5nICh1bmRlZmluZWQpLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgb3Igc2tpcHBlZCAobnVsbCkuIFBlbmRpbmcgaXMgdXNlZCBmb3IgdW5mdWxmaWxsZWQgYCRhc3luY1ZhbGlkYXRvcnNgLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgU2tpcHBlZCBpcyB1c2VkIGJ5IEFuZ3VsYXIgd2hlbiB2YWxpZGF0b3JzIGRvIG5vdCBydW4gYmVjYXVzZSBvZiBwYXJzZSBlcnJvcnMgYW5kXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIGAkYXN5bmNWYWxpZGF0b3JzYCBkbyBub3QgcnVuIGJlY2F1c2UgYW55IG9mIHRoZSBgJHZhbGlkYXRvcnNgIGZhaWxlZC5cbiAgICovXG4gIGFkZFNldFZhbGlkaXR5TWV0aG9kKHtcbiAgICBjdHJsOiB0aGlzLFxuICAgICRlbGVtZW50OiAkZWxlbWVudCxcbiAgICBzZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSB0cnVlO1xuICAgIH0sXG4gICAgdW5zZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldO1xuICAgIH0sXG4gICAgJGFuaW1hdGU6ICRhbmltYXRlXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFByaXN0aW5lXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyBwcmlzdGluZSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlIGBuZy1kaXJ0eWAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHMgcHJpc3RpbmVcbiAgICogc3RhdGUgKGBuZy1wcmlzdGluZWAgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJpc3RpbmUgd2hlbiB0aGUgY29udHJvbFxuICAgKiBoYXMgbm90IGJlZW4gY2hhbmdlZCBmcm9tIHdoZW4gZmlyc3QgY29tcGlsZWQuXG4gICAqL1xuICB0aGlzLiRzZXRQcmlzdGluZSA9IGZ1bmN0aW9uKCkge1xuICAgIGN0cmwuJGRpcnR5ID0gZmFsc2U7XG4gICAgY3RybC4kcHJpc3RpbmUgPSB0cnVlO1xuICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKCRlbGVtZW50LCBESVJUWV9DTEFTUyk7XG4gICAgJGFuaW1hdGUuYWRkQ2xhc3MoJGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXREaXJ0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgZGlydHkgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctcHJpc3RpbmVgIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzIGRpcnR5XG4gICAqIHN0YXRlIChgbmctZGlydHlgIGNsYXNzKS4gQSBtb2RlbCBpcyBjb25zaWRlcmVkIHRvIGJlIGRpcnR5IHdoZW4gdGhlIGNvbnRyb2wgaGFzIGJlZW4gY2hhbmdlZFxuICAgKiBmcm9tIHdoZW4gZmlyc3QgY29tcGlsZWQuXG4gICAqL1xuICB0aGlzLiRzZXREaXJ0eSA9IGZ1bmN0aW9uKCkge1xuICAgIGN0cmwuJGRpcnR5ID0gdHJ1ZTtcbiAgICBjdHJsLiRwcmlzdGluZSA9IGZhbHNlO1xuICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKCRlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gICAgJGFuaW1hdGUuYWRkQ2xhc3MoJGVsZW1lbnQsIERJUlRZX0NMQVNTKTtcbiAgICBjdHJsLiQkcGFyZW50Rm9ybS4kc2V0RGlydHkoKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRVbnRvdWNoZWRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHVudG91Y2hlZCBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlIGBuZy10b3VjaGVkYCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0c1xuICAgKiB1bnRvdWNoZWQgc3RhdGUgKGBuZy11bnRvdWNoZWRgIGNsYXNzKS4gVXBvbiBjb21waWxhdGlvbiwgYSBtb2RlbCBpcyBzZXQgYXMgdW50b3VjaGVkXG4gICAqIGJ5IGRlZmF1bHQsIGhvd2V2ZXIgdGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byByZXN0b3JlIHRoYXQgc3RhdGUgaWYgdGhlIG1vZGVsIGhhc1xuICAgKiBhbHJlYWR5IGJlZW4gdG91Y2hlZCBieSB0aGUgdXNlci5cbiAgICovXG4gIHRoaXMuJHNldFVudG91Y2hlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGN0cmwuJHRvdWNoZWQgPSBmYWxzZTtcbiAgICBjdHJsLiR1bnRvdWNoZWQgPSB0cnVlO1xuICAgICRhbmltYXRlLnNldENsYXNzKCRlbGVtZW50LCBVTlRPVUNIRURfQ0xBU1MsIFRPVUNIRURfQ0xBU1MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFRvdWNoZWRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHRvdWNoZWQgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctdW50b3VjaGVkYCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0c1xuICAgKiB0b3VjaGVkIHN0YXRlIChgbmctdG91Y2hlZGAgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgdG91Y2hlZCB3aGVuIHRoZSB1c2VyIGhhc1xuICAgKiBmaXJzdCBmb2N1c2VkIHRoZSBjb250cm9sIGVsZW1lbnQgYW5kIHRoZW4gc2hpZnRlZCBmb2N1cyBhd2F5IGZyb20gdGhlIGNvbnRyb2wgKGJsdXIgZXZlbnQpLlxuICAgKi9cbiAgdGhpcy4kc2V0VG91Y2hlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGN0cmwuJHRvdWNoZWQgPSB0cnVlO1xuICAgIGN0cmwuJHVudG91Y2hlZCA9IGZhbHNlO1xuICAgICRhbmltYXRlLnNldENsYXNzKCRlbGVtZW50LCBUT1VDSEVEX0NMQVNTLCBVTlRPVUNIRURfQ0xBU1MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJvbGxiYWNrVmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYW5jZWwgYW4gdXBkYXRlIGFuZCByZXNldCB0aGUgaW5wdXQgZWxlbWVudCdzIHZhbHVlIHRvIHByZXZlbnQgYW4gdXBkYXRlIHRvIHRoZSBgJG1vZGVsVmFsdWVgLFxuICAgKiB3aGljaCBtYXkgYmUgY2F1c2VkIGJ5IGEgcGVuZGluZyBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lXG4gICAqIGZ1dHVyZSBldmVudC5cbiAgICpcbiAgICogSWYgeW91IGhhdmUgYW4gaW5wdXQgdGhhdCB1c2VzIGBuZy1tb2RlbC1vcHRpb25zYCB0byBzZXQgdXAgZGVib3VuY2VkIGV2ZW50cyBvciBldmVudHMgc3VjaFxuICAgKiBhcyBibHVyIHlvdSBjYW4gaGF2ZSBhIHNpdHVhdGlvbiB3aGVyZSB0aGVyZSBpcyBhIHBlcmlvZCB3aGVuIHRoZSBgJHZpZXdWYWx1ZWBcbiAgICogaXMgb3V0IG9mIHN5bmNoIHdpdGggdGhlIG5nTW9kZWwncyBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBJbiB0aGlzIGNhc2UsIHlvdSBjYW4gcnVuIGludG8gZGlmZmljdWx0aWVzIGlmIHlvdSB0cnkgdG8gdXBkYXRlIHRoZSBuZ01vZGVsJ3MgYCRtb2RlbFZhbHVlYFxuICAgKiBwcm9ncmFtbWF0aWNhbGx5IGJlZm9yZSB0aGVzZSBkZWJvdW5jZWQvZnV0dXJlIGV2ZW50cyBoYXZlIHJlc29sdmVkL29jY3VycmVkLCBiZWNhdXNlIEFuZ3VsYXInc1xuICAgKiBkaXJ0eSBjaGVja2luZyBtZWNoYW5pc20gaXMgbm90IGFibGUgdG8gdGVsbCB3aGV0aGVyIHRoZSBtb2RlbCBoYXMgYWN0dWFsbHkgY2hhbmdlZCBvciBub3QuXG4gICAqXG4gICAqIFRoZSBgJHJvbGxiYWNrVmlld1ZhbHVlKClgIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBwcm9ncmFtbWF0aWNhbGx5IGNoYW5naW5nIHRoZSBtb2RlbCBvZiBhblxuICAgKiBpbnB1dCB3aGljaCBtYXkgaGF2ZSBzdWNoIGV2ZW50cyBwZW5kaW5nLiBUaGlzIGlzIGltcG9ydGFudCBpbiBvcmRlciB0byBtYWtlIHN1cmUgdGhhdCB0aGVcbiAgICogaW5wdXQgZmllbGQgd2lsbCBiZSB1cGRhdGVkIHdpdGggdGhlIG5ldyBtb2RlbCB2YWx1ZSBhbmQgYW55IHBlbmRpbmcgb3BlcmF0aW9ucyBhcmUgY2FuY2VsbGVkLlxuICAgKlxuICAgKiA8ZXhhbXBsZSBuYW1lPVwibmctbW9kZWwtY2FuY2VsLXVwZGF0ZVwiIG1vZHVsZT1cImNhbmNlbC11cGRhdGUtZXhhbXBsZVwiPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdjYW5jZWwtdXBkYXRlLWV4YW1wbGUnLCBbXSlcbiAgICpcbiAgICogICAgIC5jb250cm9sbGVyKCdDYW5jZWxVcGRhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICogICAgICAgJHNjb3BlLnJlc2V0V2l0aENhbmNlbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICogICAgICAgICBpZiAoZS5rZXlDb2RlID09IDI3KSB7XG4gICAqICAgICAgICAgICAkc2NvcGUubXlGb3JtLm15SW5wdXQxLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICAgKiAgICAgICAgICAgJHNjb3BlLm15VmFsdWUgPSAnJztcbiAgICogICAgICAgICB9XG4gICAqICAgICAgIH07XG4gICAqICAgICAgICRzY29wZS5yZXNldFdpdGhvdXRDYW5jZWwgPSBmdW5jdGlvbihlKSB7XG4gICAqICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAyNykge1xuICAgKiAgICAgICAgICAgJHNjb3BlLm15VmFsdWUgPSAnJztcbiAgICogICAgICAgICB9XG4gICAqICAgICAgIH07XG4gICAqICAgICB9XSk7XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDYW5jZWxVcGRhdGVDb250cm9sbGVyXCI+XG4gICAqICAgICAgIDxwPlRyeSB0eXBpbmcgc29tZXRoaW5nIGluIGVhY2ggaW5wdXQuICBTZWUgdGhhdCB0aGUgbW9kZWwgb25seSB1cGRhdGVzIHdoZW4geW91XG4gICAqICAgICAgICAgIGJsdXIgb2ZmIHRoZSBpbnB1dC5cbiAgICogICAgICAgIDwvcD5cbiAgICogICAgICAgIDxwPk5vdyBzZWUgd2hhdCBoYXBwZW5zIGlmIHlvdSBzdGFydCB0eXBpbmcgdGhlbiBwcmVzcyB0aGUgRXNjYXBlIGtleTwvcD5cbiAgICpcbiAgICogICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnYmx1cicgfVwiPlxuICAgKiAgICAgICAgIDxwIGlkPVwiaW5wdXREZXNjcmlwdGlvbjFcIj5XaXRoICRyb2xsYmFja1ZpZXdWYWx1ZSgpPC9wPlxuICAgKiAgICAgICAgIDxpbnB1dCBuYW1lPVwibXlJbnB1dDFcIiBhcmlhLWRlc2NyaWJlZGJ5PVwiaW5wdXREZXNjcmlwdGlvbjFcIiBuZy1tb2RlbD1cIm15VmFsdWVcIlxuICAgKiAgICAgICAgICAgICAgICBuZy1rZXlkb3duPVwicmVzZXRXaXRoQ2FuY2VsKCRldmVudClcIj48YnIvPlxuICAgKiAgICAgICAgIG15VmFsdWU6IFwie3sgbXlWYWx1ZSB9fVwiXG4gICAqXG4gICAqICAgICAgICAgPHAgaWQ9XCJpbnB1dERlc2NyaXB0aW9uMlwiPldpdGhvdXQgJHJvbGxiYWNrVmlld1ZhbHVlKCk8L3A+XG4gICAqICAgICAgICAgPGlucHV0IG5hbWU9XCJteUlucHV0MlwiIGFyaWEtZGVzY3JpYmVkYnk9XCJpbnB1dERlc2NyaXB0aW9uMlwiIG5nLW1vZGVsPVwibXlWYWx1ZVwiXG4gICAqICAgICAgICAgICAgICAgIG5nLWtleWRvd249XCJyZXNldFdpdGhvdXRDYW5jZWwoJGV2ZW50KVwiPjxici8+XG4gICAqICAgICAgICAgbXlWYWx1ZTogXCJ7eyBteVZhbHVlIH19XCJcbiAgICogICAgICAgPC9mb3JtPlxuICAgKiAgICAgPC9kaXY+XG4gICAqICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqL1xuICB0aGlzLiRyb2xsYmFja1ZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgICR0aW1lb3V0LmNhbmNlbChwZW5kaW5nRGVib3VuY2UpO1xuICAgIGN0cmwuJHZpZXdWYWx1ZSA9IGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlO1xuICAgIGN0cmwuJHJlbmRlcigpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSdW5zIGVhY2ggb2YgdGhlIHJlZ2lzdGVyZWQgdmFsaWRhdG9ycyAoZmlyc3Qgc3luY2hyb25vdXMgdmFsaWRhdG9ycyBhbmQgdGhlblxuICAgKiBhc3luY2hyb25vdXMgdmFsaWRhdG9ycykuXG4gICAqIElmIHRoZSB2YWxpZGl0eSBjaGFuZ2VzIHRvIGludmFsaWQsIHRoZSBtb2RlbCB3aWxsIGJlIHNldCB0byBgdW5kZWZpbmVkYCxcbiAgICogdW5sZXNzIHtAbGluayBuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnMuYWxsb3dJbnZhbGlkYH0gaXMgYHRydWVgLlxuICAgKiBJZiB0aGUgdmFsaWRpdHkgY2hhbmdlcyB0byB2YWxpZCwgaXQgd2lsbCBzZXQgdGhlIG1vZGVsIHRvIHRoZSBsYXN0IGF2YWlsYWJsZSB2YWxpZFxuICAgKiBgJG1vZGVsVmFsdWVgLCBpLmUuIGVpdGhlciB0aGUgbGFzdCBwYXJzZWQgdmFsdWUgb3IgdGhlIGxhc3QgdmFsdWUgc2V0IGZyb20gdGhlIHNjb3BlLlxuICAgKi9cbiAgdGhpcy4kdmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBpZ25vcmUgJHZhbGlkYXRlIGJlZm9yZSBtb2RlbCBpcyBpbml0aWFsaXplZFxuICAgIGlmIChpc051bWJlcihjdHJsLiRtb2RlbFZhbHVlKSAmJiBpc05hTihjdHJsLiRtb2RlbFZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtcbiAgICAvLyBOb3RlOiB3ZSB1c2UgdGhlICQkcmF3TW9kZWxWYWx1ZSBhcyAkbW9kZWxWYWx1ZSBtaWdodCBoYXZlIGJlZW5cbiAgICAvLyBzZXQgdG8gdW5kZWZpbmVkIGR1cmluZyBhIHZpZXcgLT4gbW9kZWwgdXBkYXRlIHRoYXQgZm91bmQgdmFsaWRhdGlvblxuICAgIC8vIGVycm9ycy4gV2UgY2FuJ3QgcGFyc2UgdGhlIHZpZXcgaGVyZSwgc2luY2UgdGhhdCBjb3VsZCBjaGFuZ2VcbiAgICAvLyB0aGUgbW9kZWwgYWx0aG91Z2ggbmVpdGhlciB2aWV3VmFsdWUgbm9yIHRoZSBtb2RlbCBvbiB0aGUgc2NvcGUgY2hhbmdlZFxuICAgIHZhciBtb2RlbFZhbHVlID0gY3RybC4kJHJhd01vZGVsVmFsdWU7XG5cbiAgICB2YXIgcHJldlZhbGlkID0gY3RybC4kdmFsaWQ7XG4gICAgdmFyIHByZXZNb2RlbFZhbHVlID0gY3RybC4kbW9kZWxWYWx1ZTtcblxuICAgIHZhciBhbGxvd0ludmFsaWQgPSBjdHJsLiRvcHRpb25zICYmIGN0cmwuJG9wdGlvbnMuYWxsb3dJbnZhbGlkO1xuXG4gICAgY3RybC4kJHJ1blZhbGlkYXRvcnMobW9kZWxWYWx1ZSwgdmlld1ZhbHVlLCBmdW5jdGlvbihhbGxWYWxpZCkge1xuICAgICAgLy8gSWYgdGhlcmUgd2FzIG5vIGNoYW5nZSBpbiB2YWxpZGl0eSwgZG9uJ3QgdXBkYXRlIHRoZSBtb2RlbFxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBjaGFuZ2luZyBhbiBpbnZhbGlkIG1vZGVsVmFsdWUgdG8gdW5kZWZpbmVkXG4gICAgICBpZiAoIWFsbG93SW52YWxpZCAmJiBwcmV2VmFsaWQgIT09IGFsbFZhbGlkKSB7XG4gICAgICAgIC8vIE5vdGU6IERvbid0IGNoZWNrIGN0cmwuJHZhbGlkIGhlcmUsIGFzIHdlIGNvdWxkIGhhdmVcbiAgICAgICAgLy8gZXh0ZXJuYWwgdmFsaWRhdG9ycyAoZS5nLiBjYWxjdWxhdGVkIG9uIHRoZSBzZXJ2ZXIpLFxuICAgICAgICAvLyB0aGF0IGp1c3QgY2FsbCAkc2V0VmFsaWRpdHkgYW5kIG5lZWQgdGhlIG1vZGVsIHZhbHVlXG4gICAgICAgIC8vIHRvIGNhbGN1bGF0ZSB0aGVpciB2YWxpZGl0eS5cbiAgICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IGFsbFZhbGlkID8gbW9kZWxWYWx1ZSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoY3RybC4kbW9kZWxWYWx1ZSAhPT0gcHJldk1vZGVsVmFsdWUpIHtcbiAgICAgICAgICBjdHJsLiQkd3JpdGVNb2RlbFRvU2NvcGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gIH07XG5cbiAgdGhpcy4kJHJ1blZhbGlkYXRvcnMgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUsIGRvbmVDYWxsYmFjaykge1xuICAgIGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQrKztcbiAgICB2YXIgbG9jYWxWYWxpZGF0aW9uUnVuSWQgPSBjdXJyZW50VmFsaWRhdGlvblJ1bklkO1xuXG4gICAgLy8gY2hlY2sgcGFyc2VyIGVycm9yXG4gICAgaWYgKCFwcm9jZXNzUGFyc2VFcnJvcnMoKSkge1xuICAgICAgdmFsaWRhdGlvbkRvbmUoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXByb2Nlc3NTeW5jVmFsaWRhdG9ycygpKSB7XG4gICAgICB2YWxpZGF0aW9uRG9uZShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHByb2Nlc3NBc3luY1ZhbGlkYXRvcnMoKTtcblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NQYXJzZUVycm9ycygpIHtcbiAgICAgIHZhciBlcnJvcktleSA9IGN0cmwuJCRwYXJzZXJOYW1lIHx8ICdwYXJzZSc7XG4gICAgICBpZiAoaXNVbmRlZmluZWQocGFyc2VyVmFsaWQpKSB7XG4gICAgICAgIHNldFZhbGlkaXR5KGVycm9yS2V5LCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghcGFyc2VyVmFsaWQpIHtcbiAgICAgICAgICBmb3JFYWNoKGN0cmwuJHZhbGlkYXRvcnMsIGZ1bmN0aW9uKHYsIG5hbWUpIHtcbiAgICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIG51bGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZvckVhY2goY3RybC4kYXN5bmNWYWxpZGF0b3JzLCBmdW5jdGlvbih2LCBuYW1lKSB7XG4gICAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBudWxsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgdGhlIHBhcnNlIGVycm9yIGxhc3QsIHRvIHByZXZlbnQgdW5zZXR0aW5nIGl0LCBzaG91bGQgYSAkdmFsaWRhdG9ycyBrZXkgPT0gcGFyc2VyTmFtZVxuICAgICAgICBzZXRWYWxpZGl0eShlcnJvcktleSwgcGFyc2VyVmFsaWQpO1xuICAgICAgICByZXR1cm4gcGFyc2VyVmFsaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzU3luY1ZhbGlkYXRvcnMoKSB7XG4gICAgICB2YXIgc3luY1ZhbGlkYXRvcnNWYWxpZCA9IHRydWU7XG4gICAgICBmb3JFYWNoKGN0cmwuJHZhbGlkYXRvcnMsIGZ1bmN0aW9uKHZhbGlkYXRvciwgbmFtZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSk7XG4gICAgICAgIHN5bmNWYWxpZGF0b3JzVmFsaWQgPSBzeW5jVmFsaWRhdG9yc1ZhbGlkICYmIHJlc3VsdDtcbiAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFzeW5jVmFsaWRhdG9yc1ZhbGlkKSB7XG4gICAgICAgIGZvckVhY2goY3RybC4kYXN5bmNWYWxpZGF0b3JzLCBmdW5jdGlvbih2LCBuYW1lKSB7XG4gICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzQXN5bmNWYWxpZGF0b3JzKCkge1xuICAgICAgdmFyIHZhbGlkYXRvclByb21pc2VzID0gW107XG4gICAgICB2YXIgYWxsVmFsaWQgPSB0cnVlO1xuICAgICAgZm9yRWFjaChjdHJsLiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHZhbGlkYXRvciwgbmFtZSkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpO1xuICAgICAgICBpZiAoIWlzUHJvbWlzZUxpa2UocHJvbWlzZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKFwiJGFzeW5jVmFsaWRhdG9yc1wiLFxuICAgICAgICAgICAgXCJFeHBlY3RlZCBhc3luY2hyb25vdXMgdmFsaWRhdG9yIHRvIHJldHVybiBhIHByb21pc2UgYnV0IGdvdCAnezB9JyBpbnN0ZWFkLlwiLCBwcm9taXNlKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCB1bmRlZmluZWQpO1xuICAgICAgICB2YWxpZGF0b3JQcm9taXNlcy5wdXNoKHByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCB0cnVlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBhbGxWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIGZhbHNlKTtcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXZhbGlkYXRvclByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICB2YWxpZGF0aW9uRG9uZSh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRxLmFsbCh2YWxpZGF0b3JQcm9taXNlcykudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YWxpZGF0aW9uRG9uZShhbGxWYWxpZCk7XG4gICAgICAgIH0sIG5vb3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFZhbGlkaXR5KG5hbWUsIGlzVmFsaWQpIHtcbiAgICAgIGlmIChsb2NhbFZhbGlkYXRpb25SdW5JZCA9PT0gY3VycmVudFZhbGlkYXRpb25SdW5JZCkge1xuICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eShuYW1lLCBpc1ZhbGlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0aW9uRG9uZShhbGxWYWxpZCkge1xuICAgICAgaWYgKGxvY2FsVmFsaWRhdGlvblJ1bklkID09PSBjdXJyZW50VmFsaWRhdGlvblJ1bklkKSB7XG5cbiAgICAgICAgZG9uZUNhbGxiYWNrKGFsbFZhbGlkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkY29tbWl0Vmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21taXQgYSBwZW5kaW5nIHVwZGF0ZSB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiB0aGlzIG1ldGhvZCBpcyByYXJlbHkgbmVlZGVkIGFzIGBOZ01vZGVsQ29udHJvbGxlcmBcbiAgICogdXN1YWxseSBoYW5kbGVzIGNhbGxpbmcgdGhpcyBpbiByZXNwb25zZSB0byBpbnB1dCBldmVudHMuXG4gICAqL1xuICB0aGlzLiRjb21taXRWaWV3VmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlld1ZhbHVlID0gY3RybC4kdmlld1ZhbHVlO1xuXG4gICAgJHRpbWVvdXQuY2FuY2VsKHBlbmRpbmdEZWJvdW5jZSk7XG5cbiAgICAvLyBJZiB0aGUgdmlldyB2YWx1ZSBoYXMgbm90IGNoYW5nZWQgdGhlbiB3ZSBzaG91bGQganVzdCBleGl0LCBleGNlcHQgaW4gdGhlIGNhc2Ugd2hlcmUgdGhlcmUgaXNcbiAgICAvLyBhIG5hdGl2ZSB2YWxpZGF0b3Igb24gdGhlIGVsZW1lbnQuIEluIHRoaXMgY2FzZSB0aGUgdmFsaWRhdGlvbiBzdGF0ZSBtYXkgaGF2ZSBjaGFuZ2VkIGV2ZW4gdGhvdWdoXG4gICAgLy8gdGhlIHZpZXdWYWx1ZSBoYXMgc3RheWVkIGVtcHR5LlxuICAgIGlmIChjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9PT0gdmlld1ZhbHVlICYmICh2aWV3VmFsdWUgIT09ICcnIHx8ICFjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUgPSB2aWV3VmFsdWU7XG5cbiAgICAvLyBjaGFuZ2UgdG8gZGlydHlcbiAgICBpZiAoY3RybC4kcHJpc3RpbmUpIHtcbiAgICAgIHRoaXMuJHNldERpcnR5KCk7XG4gICAgfVxuICAgIHRoaXMuJCRwYXJzZUFuZFZhbGlkYXRlKCk7XG4gIH07XG5cbiAgdGhpcy4kJHBhcnNlQW5kVmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlld1ZhbHVlID0gY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU7XG4gICAgdmFyIG1vZGVsVmFsdWUgPSB2aWV3VmFsdWU7XG4gICAgcGFyc2VyVmFsaWQgPSBpc1VuZGVmaW5lZChtb2RlbFZhbHVlKSA/IHVuZGVmaW5lZCA6IHRydWU7XG5cbiAgICBpZiAocGFyc2VyVmFsaWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3RybC4kcGFyc2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtb2RlbFZhbHVlID0gY3RybC4kcGFyc2Vyc1tpXShtb2RlbFZhbHVlKTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgcGFyc2VyVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNOdW1iZXIoY3RybC4kbW9kZWxWYWx1ZSkgJiYgaXNOYU4oY3RybC4kbW9kZWxWYWx1ZSkpIHtcbiAgICAgIC8vIGN0cmwuJG1vZGVsVmFsdWUgaGFzIG5vdCBiZWVuIHRvdWNoZWQgeWV0Li4uXG4gICAgICBjdHJsLiRtb2RlbFZhbHVlID0gbmdNb2RlbEdldCgkc2NvcGUpO1xuICAgIH1cbiAgICB2YXIgcHJldk1vZGVsVmFsdWUgPSBjdHJsLiRtb2RlbFZhbHVlO1xuICAgIHZhciBhbGxvd0ludmFsaWQgPSBjdHJsLiRvcHRpb25zICYmIGN0cmwuJG9wdGlvbnMuYWxsb3dJbnZhbGlkO1xuICAgIGN0cmwuJCRyYXdNb2RlbFZhbHVlID0gbW9kZWxWYWx1ZTtcblxuICAgIGlmIChhbGxvd0ludmFsaWQpIHtcbiAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBtb2RlbFZhbHVlO1xuICAgICAgd3JpdGVUb01vZGVsSWZOZWVkZWQoKTtcbiAgICB9XG5cbiAgICAvLyBQYXNzIHRoZSAkJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUgaGVyZSwgYmVjYXVzZSB0aGUgY2FjaGVkIHZpZXdWYWx1ZSBtaWdodCBiZSBvdXQgb2YgZGF0ZS5cbiAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaWYgZS5nLiAkc2V0Vmlld1ZhbHVlIGlzIGNhbGxlZCBmcm9tIGluc2lkZSBhIHBhcnNlclxuICAgIGN0cmwuJCRydW5WYWxpZGF0b3JzKG1vZGVsVmFsdWUsIGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlLCBmdW5jdGlvbihhbGxWYWxpZCkge1xuICAgICAgaWYgKCFhbGxvd0ludmFsaWQpIHtcbiAgICAgICAgLy8gTm90ZTogRG9uJ3QgY2hlY2sgY3RybC4kdmFsaWQgaGVyZSwgYXMgd2UgY291bGQgaGF2ZVxuICAgICAgICAvLyBleHRlcm5hbCB2YWxpZGF0b3JzIChlLmcuIGNhbGN1bGF0ZWQgb24gdGhlIHNlcnZlciksXG4gICAgICAgIC8vIHRoYXQganVzdCBjYWxsICRzZXRWYWxpZGl0eSBhbmQgbmVlZCB0aGUgbW9kZWwgdmFsdWVcbiAgICAgICAgLy8gdG8gY2FsY3VsYXRlIHRoZWlyIHZhbGlkaXR5LlxuICAgICAgICBjdHJsLiRtb2RlbFZhbHVlID0gYWxsVmFsaWQgPyBtb2RlbFZhbHVlIDogdW5kZWZpbmVkO1xuICAgICAgICB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gd3JpdGVUb01vZGVsSWZOZWVkZWQoKSB7XG4gICAgICBpZiAoY3RybC4kbW9kZWxWYWx1ZSAhPT0gcHJldk1vZGVsVmFsdWUpIHtcbiAgICAgICAgY3RybC4kJHdyaXRlTW9kZWxUb1Njb3BlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuJCR3cml0ZU1vZGVsVG9TY29wZSA9IGZ1bmN0aW9uKCkge1xuICAgIG5nTW9kZWxTZXQoJHNjb3BlLCBjdHJsLiRtb2RlbFZhbHVlKTtcbiAgICBmb3JFYWNoKGN0cmwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFVwZGF0ZSB0aGUgdmlldyB2YWx1ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGEgY29udHJvbCB3YW50cyB0byBjaGFuZ2UgdGhlIHZpZXcgdmFsdWU7IHR5cGljYWxseSxcbiAgICogdGhpcyBpcyBkb25lIGZyb20gd2l0aGluIGEgRE9NIGV2ZW50IGhhbmRsZXIuIEZvciBleGFtcGxlLCB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dCBpbnB1dH1cbiAgICogZGlyZWN0aXZlIGNhbGxzIGl0IHdoZW4gdGhlIHZhbHVlIG9mIHRoZSBpbnB1dCBjaGFuZ2VzIGFuZCB7QGxpbmsgbmcuZGlyZWN0aXZlOnNlbGVjdCBzZWxlY3R9XG4gICAqIGNhbGxzIGl0IHdoZW4gYW4gb3B0aW9uIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBXaGVuIGAkc2V0Vmlld1ZhbHVlYCBpcyBjYWxsZWQsIHRoZSBuZXcgYHZhbHVlYCB3aWxsIGJlIHN0YWdlZCBmb3IgY29tbWl0dGluZyB0aHJvdWdoIHRoZSBgJHBhcnNlcnNgXG4gICAqIGFuZCBgJHZhbGlkYXRvcnNgIHBpcGVsaW5lcy4gSWYgdGhlcmUgYXJlIG5vIHNwZWNpYWwge0BsaW5rIG5nTW9kZWxPcHRpb25zfSBzcGVjaWZpZWQgdGhlbiB0aGUgc3RhZ2VkXG4gICAqIHZhbHVlIHNlbnQgZGlyZWN0bHkgZm9yIHByb2Nlc3NpbmcsIGZpbmFsbHkgdG8gYmUgYXBwbGllZCB0byBgJG1vZGVsVmFsdWVgIGFuZCB0aGVuIHRoZVxuICAgKiAqKmV4cHJlc3Npb24qKiBzcGVjaWZpZWQgaW4gdGhlIGBuZy1tb2RlbGAgYXR0cmlidXRlLiBMYXN0bHksIGFsbCB0aGUgcmVnaXN0ZXJlZCBjaGFuZ2UgbGlzdGVuZXJzLFxuICAgKiBpbiB0aGUgYCR2aWV3Q2hhbmdlTGlzdGVuZXJzYCBsaXN0LCBhcmUgY2FsbGVkLlxuICAgKlxuICAgKiBJbiBjYXNlIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfSBkaXJlY3RpdmUgaXMgdXNlZCB3aXRoIGB1cGRhdGVPbmBcbiAgICogYW5kIHRoZSBgZGVmYXVsdGAgdHJpZ2dlciBpcyBub3QgbGlzdGVkLCBhbGwgdGhvc2UgYWN0aW9ucyB3aWxsIHJlbWFpbiBwZW5kaW5nIHVudGlsIG9uZSBvZiB0aGVcbiAgICogYHVwZGF0ZU9uYCBldmVudHMgaXMgdHJpZ2dlcmVkIG9uIHRoZSBET00gZWxlbWVudC5cbiAgICogQWxsIHRoZXNlIGFjdGlvbnMgd2lsbCBiZSBkZWJvdW5jZWQgaWYgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9XG4gICAqIGRpcmVjdGl2ZSBpcyB1c2VkIHdpdGggYSBjdXN0b20gZGVib3VuY2UgZm9yIHRoaXMgcGFydGljdWxhciBldmVudC5cbiAgICogTm90ZSB0aGF0IGEgYCRkaWdlc3RgIGlzIG9ubHkgdHJpZ2dlcmVkIG9uY2UgdGhlIGB1cGRhdGVPbmAgZXZlbnRzIGFyZSBmaXJlZCwgb3IgaWYgYGRlYm91bmNlYFxuICAgKiBpcyBzcGVjaWZpZWQsIG9uY2UgdGhlIHRpbWVyIHJ1bnMgb3V0LlxuICAgKlxuICAgKiBXaGVuIHVzZWQgd2l0aCBzdGFuZGFyZCBpbnB1dHMsIHRoZSB2aWV3IHZhbHVlIHdpbGwgYWx3YXlzIGJlIGEgc3RyaW5nICh3aGljaCBpcyBpbiBzb21lIGNhc2VzXG4gICAqIHBhcnNlZCBpbnRvIGFub3RoZXIgdHlwZSwgc3VjaCBhcyBhIGBEYXRlYCBvYmplY3QgZm9yIGBpbnB1dFtkYXRlXWAuKVxuICAgKiBIb3dldmVyLCBjdXN0b20gY29udHJvbHMgbWlnaHQgYWxzbyBwYXNzIG9iamVjdHMgdG8gdGhpcyBtZXRob2QuIEluIHRoaXMgY2FzZSwgd2Ugc2hvdWxkIG1ha2VcbiAgICogYSBjb3B5IG9mIHRoZSBvYmplY3QgYmVmb3JlIHBhc3NpbmcgaXQgdG8gYCRzZXRWaWV3VmFsdWVgLiBUaGlzIGlzIGJlY2F1c2UgYG5nTW9kZWxgIGRvZXMgbm90XG4gICAqIHBlcmZvcm0gYSBkZWVwIHdhdGNoIG9mIG9iamVjdHMsIGl0IG9ubHkgbG9va3MgZm9yIGEgY2hhbmdlIG9mIGlkZW50aXR5LiBJZiB5b3Ugb25seSBjaGFuZ2VcbiAgICogdGhlIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgdGhlbiBuZ01vZGVsIHdpbGwgbm90IHJlYWxpc2UgdGhhdCB0aGUgb2JqZWN0IGhhcyBjaGFuZ2VkIGFuZFxuICAgKiB3aWxsIG5vdCBpbnZva2UgdGhlIGAkcGFyc2Vyc2AgYW5kIGAkdmFsaWRhdG9yc2AgcGlwZWxpbmVzLiBGb3IgdGhpcyByZWFzb24sIHlvdSBzaG91bGRcbiAgICogbm90IGNoYW5nZSBwcm9wZXJ0aWVzIG9mIHRoZSBjb3B5IG9uY2UgaXQgaGFzIGJlZW4gcGFzc2VkIHRvIGAkc2V0Vmlld1ZhbHVlYC5cbiAgICogT3RoZXJ3aXNlIHlvdSBtYXkgY2F1c2UgdGhlIG1vZGVsIHZhbHVlIG9uIHRoZSBzY29wZSB0byBjaGFuZ2UgaW5jb3JyZWN0bHkuXG4gICAqXG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gICAqIEluIGFueSBjYXNlLCB0aGUgdmFsdWUgcGFzc2VkIHRvIHRoZSBtZXRob2Qgc2hvdWxkIGFsd2F5cyByZWZsZWN0IHRoZSBjdXJyZW50IHZhbHVlXG4gICAqIG9mIHRoZSBjb250cm9sLiBGb3IgZXhhbXBsZSwgaWYgeW91IGFyZSBjYWxsaW5nIGAkc2V0Vmlld1ZhbHVlYCBmb3IgYW4gaW5wdXQgZWxlbWVudCxcbiAgICogeW91IHNob3VsZCBwYXNzIHRoZSBpbnB1dCBET00gdmFsdWUuIE90aGVyd2lzZSwgdGhlIGNvbnRyb2wgYW5kIHRoZSBzY29wZSBtb2RlbCBiZWNvbWVcbiAgICogb3V0IG9mIHN5bmMuIEl0J3MgYWxzbyBpbXBvcnRhbnQgdG8gbm90ZSB0aGF0IGAkc2V0Vmlld1ZhbHVlYCBkb2VzIG5vdCBjYWxsIGAkcmVuZGVyYCBvciBjaGFuZ2VcbiAgICogdGhlIGNvbnRyb2wncyBET00gdmFsdWUgaW4gYW55IHdheS4gSWYgd2Ugd2FudCB0byBjaGFuZ2UgdGhlIGNvbnRyb2wncyBET00gdmFsdWVcbiAgICogcHJvZ3JhbW1hdGljYWxseSwgd2Ugc2hvdWxkIHVwZGF0ZSB0aGUgYG5nTW9kZWxgIHNjb3BlIGV4cHJlc3Npb24uIEl0cyBuZXcgdmFsdWUgd2lsbCBiZVxuICAgKiBwaWNrZWQgdXAgYnkgdGhlIG1vZGVsIGNvbnRyb2xsZXIsIHdoaWNoIHdpbGwgcnVuIGl0IHRocm91Z2ggdGhlIGAkZm9ybWF0dGVyc2AsIGAkcmVuZGVyYCBpdFxuICAgKiB0byB1cGRhdGUgdGhlIERPTSwgYW5kIGZpbmFsbHkgY2FsbCBgJHZhbGlkYXRlYCBvbiBpdC5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgdmFsdWUgZnJvbSB0aGUgdmlldy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRyaWdnZXIgRXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhlIHVwZGF0ZS5cbiAgICovXG4gIHRoaXMuJHNldFZpZXdWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlLCB0cmlnZ2VyKSB7XG4gICAgY3RybC4kdmlld1ZhbHVlID0gdmFsdWU7XG4gICAgaWYgKCFjdHJsLiRvcHRpb25zIHx8IGN0cmwuJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0KSB7XG4gICAgICBjdHJsLiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQodHJpZ2dlcik7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdCA9IGZ1bmN0aW9uKHRyaWdnZXIpIHtcbiAgICB2YXIgZGVib3VuY2VEZWxheSA9IDAsXG4gICAgICAgIG9wdGlvbnMgPSBjdHJsLiRvcHRpb25zLFxuICAgICAgICBkZWJvdW5jZTtcblxuICAgIGlmIChvcHRpb25zICYmIGlzRGVmaW5lZChvcHRpb25zLmRlYm91bmNlKSkge1xuICAgICAgZGVib3VuY2UgPSBvcHRpb25zLmRlYm91bmNlO1xuICAgICAgaWYgKGlzTnVtYmVyKGRlYm91bmNlKSkge1xuICAgICAgICBkZWJvdW5jZURlbGF5ID0gZGVib3VuY2U7XG4gICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGRlYm91bmNlW3RyaWdnZXJdKSkge1xuICAgICAgICBkZWJvdW5jZURlbGF5ID0gZGVib3VuY2VbdHJpZ2dlcl07XG4gICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGRlYm91bmNlWydkZWZhdWx0J10pKSB7XG4gICAgICAgIGRlYm91bmNlRGVsYXkgPSBkZWJvdW5jZVsnZGVmYXVsdCddO1xuICAgICAgfVxuICAgIH1cblxuICAgICR0aW1lb3V0LmNhbmNlbChwZW5kaW5nRGVib3VuY2UpO1xuICAgIGlmIChkZWJvdW5jZURlbGF5KSB7XG4gICAgICBwZW5kaW5nRGVib3VuY2UgPSAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgY3RybC4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgICB9LCBkZWJvdW5jZURlbGF5KTtcbiAgICB9IGVsc2UgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgY3RybC4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgIGN0cmwuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIG1vZGVsIC0+IHZhbHVlXG4gIC8vIE5vdGU6IHdlIGNhbm5vdCB1c2UgYSBub3JtYWwgc2NvcGUuJHdhdGNoIGFzIHdlIHdhbnQgdG8gZGV0ZWN0IHRoZSBmb2xsb3dpbmc6XG4gIC8vIDEuIHNjb3BlIHZhbHVlIGlzICdhJ1xuICAvLyAyLiB1c2VyIGVudGVycyAnYidcbiAgLy8gMy4gbmctY2hhbmdlIGtpY2tzIGluIGFuZCByZXZlcnRzIHNjb3BlIHZhbHVlIHRvICdhJ1xuICAvLyAgICAtPiBzY29wZSB2YWx1ZSBkaWQgbm90IGNoYW5nZSBzaW5jZSB0aGUgbGFzdCBkaWdlc3QgYXNcbiAgLy8gICAgICAgbmctY2hhbmdlIGV4ZWN1dGVzIGluIGFwcGx5IHBoYXNlXG4gIC8vIDQuIHZpZXcgc2hvdWxkIGJlIGNoYW5nZWQgYmFjayB0byAnYSdcbiAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiBuZ01vZGVsV2F0Y2goKSB7XG4gICAgdmFyIG1vZGVsVmFsdWUgPSBuZ01vZGVsR2V0KCRzY29wZSk7XG5cbiAgICAvLyBpZiBzY29wZSBtb2RlbCB2YWx1ZSBhbmQgbmdNb2RlbCB2YWx1ZSBhcmUgb3V0IG9mIHN5bmNcbiAgICAvLyBUT0RPKHBlcmYpOiB3aHkgbm90IG1vdmUgdGhpcyB0byB0aGUgYWN0aW9uIGZuP1xuICAgIGlmIChtb2RlbFZhbHVlICE9PSBjdHJsLiRtb2RlbFZhbHVlICYmXG4gICAgICAgLy8gY2hlY2tzIGZvciBOYU4gaXMgbmVlZGVkIHRvIGFsbG93IHNldHRpbmcgdGhlIG1vZGVsIHRvIE5hTiB3aGVuIHRoZXJlJ3MgYW4gYXN5bmNWYWxpZGF0b3JcbiAgICAgICAoY3RybC4kbW9kZWxWYWx1ZSA9PT0gY3RybC4kbW9kZWxWYWx1ZSB8fCBtb2RlbFZhbHVlID09PSBtb2RlbFZhbHVlKVxuICAgICkge1xuICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IGN0cmwuJCRyYXdNb2RlbFZhbHVlID0gbW9kZWxWYWx1ZTtcbiAgICAgIHBhcnNlclZhbGlkID0gdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgZm9ybWF0dGVycyA9IGN0cmwuJGZvcm1hdHRlcnMsXG4gICAgICAgICAgaWR4ID0gZm9ybWF0dGVycy5sZW5ndGg7XG5cbiAgICAgIHZhciB2aWV3VmFsdWUgPSBtb2RlbFZhbHVlO1xuICAgICAgd2hpbGUgKGlkeC0tKSB7XG4gICAgICAgIHZpZXdWYWx1ZSA9IGZvcm1hdHRlcnNbaWR4XSh2aWV3VmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGN0cmwuJHZpZXdWYWx1ZSAhPT0gdmlld1ZhbHVlKSB7XG4gICAgICAgIGN0cmwuJHZpZXdWYWx1ZSA9IGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlID0gdmlld1ZhbHVlO1xuICAgICAgICBjdHJsLiRyZW5kZXIoKTtcblxuICAgICAgICBjdHJsLiQkcnVuVmFsaWRhdG9ycyhtb2RlbFZhbHVlLCB2aWV3VmFsdWUsIG5vb3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtb2RlbFZhbHVlO1xuICB9KTtcbn1dO1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb2RlbFxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcHJpb3JpdHkgMVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ01vZGVsYCBkaXJlY3RpdmUgYmluZHMgYW4gYGlucHV0YCxgc2VsZWN0YCwgYHRleHRhcmVhYCAob3IgY3VzdG9tIGZvcm0gY29udHJvbCkgdG8gYVxuICogcHJvcGVydHkgb24gdGhlIHNjb3BlIHVzaW5nIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIE5nTW9kZWxDb250cm9sbGVyfSxcbiAqIHdoaWNoIGlzIGNyZWF0ZWQgYW5kIGV4cG9zZWQgYnkgdGhpcyBkaXJlY3RpdmUuXG4gKlxuICogYG5nTW9kZWxgIGlzIHJlc3BvbnNpYmxlIGZvcjpcbiAqXG4gKiAtIEJpbmRpbmcgdGhlIHZpZXcgaW50byB0aGUgbW9kZWwsIHdoaWNoIG90aGVyIGRpcmVjdGl2ZXMgc3VjaCBhcyBgaW5wdXRgLCBgdGV4dGFyZWFgIG9yIGBzZWxlY3RgXG4gKiAgIHJlcXVpcmUuXG4gKiAtIFByb3ZpZGluZyB2YWxpZGF0aW9uIGJlaGF2aW9yIChpLmUuIHJlcXVpcmVkLCBudW1iZXIsIGVtYWlsLCB1cmwpLlxuICogLSBLZWVwaW5nIHRoZSBzdGF0ZSBvZiB0aGUgY29udHJvbCAodmFsaWQvaW52YWxpZCwgZGlydHkvcHJpc3RpbmUsIHRvdWNoZWQvdW50b3VjaGVkLCB2YWxpZGF0aW9uIGVycm9ycykuXG4gKiAtIFNldHRpbmcgcmVsYXRlZCBjc3MgY2xhc3NlcyBvbiB0aGUgZWxlbWVudCAoYG5nLXZhbGlkYCwgYG5nLWludmFsaWRgLCBgbmctZGlydHlgLCBgbmctcHJpc3RpbmVgLCBgbmctdG91Y2hlZGAsIGBuZy11bnRvdWNoZWRgKSBpbmNsdWRpbmcgYW5pbWF0aW9ucy5cbiAqIC0gUmVnaXN0ZXJpbmcgdGhlIGNvbnRyb2wgd2l0aCBpdHMgcGFyZW50IHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBmb3JtfS5cbiAqXG4gKiBOb3RlOiBgbmdNb2RlbGAgd2lsbCB0cnkgdG8gYmluZCB0byB0aGUgcHJvcGVydHkgZ2l2ZW4gYnkgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbiBvbiB0aGVcbiAqIGN1cnJlbnQgc2NvcGUuIElmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gdGhpcyBzY29wZSwgaXQgd2lsbCBiZSBjcmVhdGVkXG4gKiBpbXBsaWNpdGx5IGFuZCBhZGRlZCB0byB0aGUgc2NvcGUuXG4gKlxuICogRm9yIGJlc3QgcHJhY3RpY2VzIG9uIHVzaW5nIGBuZ01vZGVsYCwgc2VlOlxuICpcbiAqICAtIFtVbmRlcnN0YW5kaW5nIFNjb3Blc10oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy93aWtpL1VuZGVyc3RhbmRpbmctU2NvcGVzKVxuICpcbiAqIEZvciBiYXNpYyBleGFtcGxlcywgaG93IHRvIHVzZSBgbmdNb2RlbGAsIHNlZTpcbiAqXG4gKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fVxuICogICAgLSB7QGxpbmsgaW5wdXRbdGV4dF0gdGV4dH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2NoZWNrYm94XSBjaGVja2JveH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3JhZGlvXSByYWRpb31cbiAqICAgIC0ge0BsaW5rIGlucHV0W251bWJlcl0gbnVtYmVyfVxuICogICAgLSB7QGxpbmsgaW5wdXRbZW1haWxdIGVtYWlsfVxuICogICAgLSB7QGxpbmsgaW5wdXRbdXJsXSB1cmx9XG4gKiAgICAtIHtAbGluayBpbnB1dFtkYXRlXSBkYXRlfVxuICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZXRpbWUtbG9jYWxdIGRhdGV0aW1lLWxvY2FsfVxuICogICAgLSB7QGxpbmsgaW5wdXRbdGltZV0gdGltZX1cbiAqICAgIC0ge0BsaW5rIGlucHV0W21vbnRoXSBtb250aH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3dlZWtdIHdlZWt9XG4gKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOnNlbGVjdCBzZWxlY3R9XG4gKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOnRleHRhcmVhIHRleHRhcmVhfVxuICpcbiAqICMgQ1NTIGNsYXNzZXNcbiAqIFRoZSBmb2xsb3dpbmcgQ1NTIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkIG9uIHRoZSBhc3NvY2lhdGVkIGlucHV0L3NlbGVjdC90ZXh0YXJlYSBlbGVtZW50XG4gKiBkZXBlbmRpbmcgb24gdGhlIHZhbGlkaXR5IG9mIHRoZSBtb2RlbC5cbiAqXG4gKiAgLSBgbmctdmFsaWRgOiB0aGUgbW9kZWwgaXMgdmFsaWRcbiAqICAtIGBuZy1pbnZhbGlkYDogdGhlIG1vZGVsIGlzIGludmFsaWRcbiAqICAtIGBuZy12YWxpZC1ba2V5XWA6IGZvciBlYWNoIHZhbGlkIGtleSBhZGRlZCBieSBgJHNldFZhbGlkaXR5YFxuICogIC0gYG5nLWludmFsaWQtW2tleV1gOiBmb3IgZWFjaCBpbnZhbGlkIGtleSBhZGRlZCBieSBgJHNldFZhbGlkaXR5YFxuICogIC0gYG5nLXByaXN0aW5lYDogdGhlIGNvbnRyb2wgaGFzbid0IGJlZW4gaW50ZXJhY3RlZCB3aXRoIHlldFxuICogIC0gYG5nLWRpcnR5YDogdGhlIGNvbnRyb2wgaGFzIGJlZW4gaW50ZXJhY3RlZCB3aXRoXG4gKiAgLSBgbmctdG91Y2hlZGA6IHRoZSBjb250cm9sIGhhcyBiZWVuIGJsdXJyZWRcbiAqICAtIGBuZy11bnRvdWNoZWRgOiB0aGUgY29udHJvbCBoYXNuJ3QgYmVlbiBibHVycmVkXG4gKiAgLSBgbmctcGVuZGluZ2A6IGFueSBgJGFzeW5jVmFsaWRhdG9yc2AgYXJlIHVuZnVsZmlsbGVkXG4gKlxuICogS2VlcCBpbiBtaW5kIHRoYXQgbmdBbmltYXRlIGNhbiBkZXRlY3QgZWFjaCBvZiB0aGVzZSBjbGFzc2VzIHdoZW4gYWRkZWQgYW5kIHJlbW92ZWQuXG4gKlxuICogIyMgQW5pbWF0aW9uIEhvb2tzXG4gKlxuICogQW5pbWF0aW9ucyB3aXRoaW4gbW9kZWxzIGFyZSB0cmlnZ2VyZWQgd2hlbiBhbnkgb2YgdGhlIGFzc29jaWF0ZWQgQ1NTIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkXG4gKiBvbiB0aGUgaW5wdXQgZWxlbWVudCB3aGljaCBpcyBhdHRhY2hlZCB0byB0aGUgbW9kZWwuIFRoZXNlIGNsYXNzZXMgYXJlOiBgLm5nLXByaXN0aW5lYCwgYC5uZy1kaXJ0eWAsXG4gKiBgLm5nLWludmFsaWRgIGFuZCBgLm5nLXZhbGlkYCBhcyB3ZWxsIGFzIGFueSBvdGhlciB2YWxpZGF0aW9ucyB0aGF0IGFyZSBwZXJmb3JtZWQgb24gdGhlIG1vZGVsIGl0c2VsZi5cbiAqIFRoZSBhbmltYXRpb25zIHRoYXQgYXJlIHRyaWdnZXJlZCB3aXRoaW4gbmdNb2RlbCBhcmUgc2ltaWxhciB0byBob3cgdGhleSB3b3JrIGluIG5nQ2xhc3MgYW5kXG4gKiBhbmltYXRpb25zIGNhbiBiZSBob29rZWQgaW50byB1c2luZyBDU1MgdHJhbnNpdGlvbnMsIGtleWZyYW1lcyBhcyB3ZWxsIGFzIEpTIGFuaW1hdGlvbnMuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGEgc2ltcGxlIHdheSB0byB1dGlsaXplIENTUyB0cmFuc2l0aW9ucyB0byBzdHlsZSBhbiBpbnB1dCBlbGVtZW50XG4gKiB0aGF0IGhhcyBiZWVuIHJlbmRlcmVkIGFzIGludmFsaWQgYWZ0ZXIgaXQgaGFzIGJlZW4gdmFsaWRhdGVkOlxuICpcbiAqIDxwcmU+XG4gKiAvL2JlIHN1cmUgdG8gaW5jbHVkZSBuZ0FuaW1hdGUgYXMgYSBtb2R1bGUgdG8gaG9vayBpbnRvIG1vcmVcbiAqIC8vYWR2YW5jZWQgYW5pbWF0aW9uc1xuICogLm15LWlucHV0IHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICogfVxuICogLm15LWlucHV0Lm5nLWludmFsaWQge1xuICogICBiYWNrZ3JvdW5kOiByZWQ7XG4gKiAgIGNvbG9yOndoaXRlO1xuICogfVxuICogPC9wcmU+XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCIgbW9kdWxlPVwiaW5wdXRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2lucHV0RXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUudmFsID0gJzEnO1xuICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8c3R5bGU+XG4gICAgICAgICAubXktaW5wdXQge1xuICAgICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICB9XG4gICAgICAgICAubXktaW5wdXQubmctaW52YWxpZCB7XG4gICAgICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICAgICBiYWNrZ3JvdW5kOiByZWQ7XG4gICAgICAgICB9XG4gICAgICAgPC9zdHlsZT5cbiAgICAgICA8cCBpZD1cImlucHV0RGVzY3JpcHRpb25cIj5cbiAgICAgICAgVXBkYXRlIGlucHV0IHRvIHNlZSB0cmFuc2l0aW9ucyB3aGVuIHZhbGlkL2ludmFsaWQuXG4gICAgICAgIEludGVnZXIgaXMgYSB2YWxpZCB2YWx1ZS5cbiAgICAgICA8L3A+XG4gICAgICAgPGZvcm0gbmFtZT1cInRlc3RGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJ2YWxcIiBuZy1wYXR0ZXJuPVwiL15cXGQrJC9cIiBuYW1lPVwiYW5pbVwiIGNsYXNzPVwibXktaW5wdXRcIlxuICAgICAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJpbnB1dERlc2NyaXB0aW9uXCIgLz5cbiAgICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiAjIyBCaW5kaW5nIHRvIGEgZ2V0dGVyL3NldHRlclxuICpcbiAqIFNvbWV0aW1lcyBpdCdzIGhlbHBmdWwgdG8gYmluZCBgbmdNb2RlbGAgdG8gYSBnZXR0ZXIvc2V0dGVyIGZ1bmN0aW9uLiAgQSBnZXR0ZXIvc2V0dGVyIGlzIGFcbiAqIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCB3aGVuIGNhbGxlZCB3aXRoIHplcm8gYXJndW1lbnRzLCBhbmQgc2V0c1xuICogdGhlIGludGVybmFsIHN0YXRlIG9mIGEgbW9kZWwgd2hlbiBjYWxsZWQgd2l0aCBhbiBhcmd1bWVudC4gSXQncyBzb21ldGltZXMgdXNlZnVsIHRvIHVzZSB0aGlzXG4gKiBmb3IgbW9kZWxzIHRoYXQgaGF2ZSBhbiBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiB0aGF0J3MgZGlmZmVyZW50IGZyb20gd2hhdCB0aGUgbW9kZWwgZXhwb3Nlc1xuICogdG8gdGhlIHZpZXcuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAqICoqQmVzdCBQcmFjdGljZToqKiBJdCdzIGJlc3QgdG8ga2VlcCBnZXR0ZXJzIGZhc3QgYmVjYXVzZSBBbmd1bGFyIGlzIGxpa2VseSB0byBjYWxsIHRoZW0gbW9yZVxuICogZnJlcXVlbnRseSB0aGFuIG90aGVyIHBhcnRzIG9mIHlvdXIgY29kZS5cbiAqIDwvZGl2PlxuICpcbiAqIFlvdSB1c2UgdGhpcyBiZWhhdmlvciBieSBhZGRpbmcgYG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCJgIHRvIGFuIGVsZW1lbnQgdGhhdFxuICogaGFzIGBuZy1tb2RlbGAgYXR0YWNoZWQgdG8gaXQuIFlvdSBjYW4gYWxzbyBhZGQgYG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCJgIHRvXG4gKiBhIGA8Zm9ybT5gLCB3aGljaCB3aWxsIGVuYWJsZSB0aGlzIGJlaGF2aW9yIGZvciBhbGwgYDxpbnB1dD5gcyB3aXRoaW4gaXQuIFNlZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnNgfSBmb3IgbW9yZS5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBgbmdNb2RlbGAgd2l0aCBhIGdldHRlci9zZXR0ZXI6XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsLWdldHRlci1zZXR0ZXJcIiBtb2R1bGU9XCJnZXR0ZXJTZXR0ZXJFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICAgICAgICAgICA8bGFiZWw+TmFtZTpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCIgLz5cbiAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZSgpXCI+PC9zcGFuPjwvcHJlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnZ2V0dGVyU2V0dGVyRXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgdmFyIF9uYW1lID0gJ0JyaWFuJztcbiAgICAgICAgICAgJHNjb3BlLnVzZXIgPSB7XG4gICAgICAgICAgICAgbmFtZTogZnVuY3Rpb24obmV3TmFtZSkge1xuICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgbmV3TmFtZSBjYW4gYmUgdW5kZWZpbmVkIGZvciB0d28gcmVhc29uczpcbiAgICAgICAgICAgICAgLy8gMS4gQmVjYXVzZSBpdCBpcyBjYWxsZWQgYXMgYSBnZXR0ZXIgYW5kIHRodXMgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzXG4gICAgICAgICAgICAgIC8vIDIuIEJlY2F1c2UgdGhlIHByb3BlcnR5IHNob3VsZCBhY3R1YWxseSBiZSBzZXQgdG8gdW5kZWZpbmVkLiBUaGlzIGhhcHBlbnMgZS5nLiBpZiB0aGVcbiAgICAgICAgICAgICAgLy8gICAgaW5wdXQgaXMgaW52YWxpZFxuICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfbmFtZSA9IG5ld05hbWUpIDogX25hbWU7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9O1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ01vZGVsRGlyZWN0aXZlID0gWyckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogWyduZ01vZGVsJywgJ14/Zm9ybScsICdeP25nTW9kZWxPcHRpb25zJ10sXG4gICAgY29udHJvbGxlcjogTmdNb2RlbENvbnRyb2xsZXIsXG4gICAgLy8gUHJlbGluayBuZWVkcyB0byBydW4gYmVmb3JlIGFueSBpbnB1dCBkaXJlY3RpdmVcbiAgICAvLyBzbyB0aGF0IHdlIGNhbiBzZXQgdGhlIE5nTW9kZWxPcHRpb25zIGluIE5nTW9kZWxDb250cm9sbGVyXG4gICAgLy8gYmVmb3JlIGFueW9uZSBlbHNlIHVzZXMgaXQuXG4gICAgcHJpb3JpdHk6IDEsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdNb2RlbENvbXBpbGUoZWxlbWVudCkge1xuICAgICAgLy8gU2V0dXAgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgY29udHJvbFxuICAgICAgZWxlbWVudC5hZGRDbGFzcyhQUklTVElORV9DTEFTUykuYWRkQ2xhc3MoVU5UT1VDSEVEX0NMQVNTKS5hZGRDbGFzcyhWQUxJRF9DTEFTUyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZTogZnVuY3Rpb24gbmdNb2RlbFByZUxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgICAgdmFyIG1vZGVsQ3RybCA9IGN0cmxzWzBdLFxuICAgICAgICAgICAgICBmb3JtQ3RybCA9IGN0cmxzWzFdIHx8IG1vZGVsQ3RybC4kJHBhcmVudEZvcm07XG5cbiAgICAgICAgICBtb2RlbEN0cmwuJCRzZXRPcHRpb25zKGN0cmxzWzJdICYmIGN0cmxzWzJdLiRvcHRpb25zKTtcblxuICAgICAgICAgIC8vIG5vdGlmeSBvdGhlcnMsIGVzcGVjaWFsbHkgcGFyZW50IGZvcm1zXG4gICAgICAgICAgZm9ybUN0cmwuJGFkZENvbnRyb2wobW9kZWxDdHJsKTtcblxuICAgICAgICAgIGF0dHIuJG9ic2VydmUoJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKG1vZGVsQ3RybC4kbmFtZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgbW9kZWxDdHJsLiQkcGFyZW50Rm9ybS4kJHJlbmFtZUNvbnRyb2wobW9kZWxDdHJsLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBtb2RlbEN0cmwuJCRwYXJlbnRGb3JtLiRyZW1vdmVDb250cm9sKG1vZGVsQ3RybCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Q6IGZ1bmN0aW9uIG5nTW9kZWxQb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgICB2YXIgbW9kZWxDdHJsID0gY3RybHNbMF07XG4gICAgICAgICAgaWYgKG1vZGVsQ3RybC4kb3B0aW9ucyAmJiBtb2RlbEN0cmwuJG9wdGlvbnMudXBkYXRlT24pIHtcbiAgICAgICAgICAgIGVsZW1lbnQub24obW9kZWxDdHJsLiRvcHRpb25zLnVwZGF0ZU9uLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgICBtb2RlbEN0cmwuJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdChldiAmJiBldi50eXBlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVsZW1lbnQub24oJ2JsdXInLCBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgaWYgKG1vZGVsQ3RybC4kdG91Y2hlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMobW9kZWxDdHJsLiRzZXRUb3VjaGVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNjb3BlLiRhcHBseShtb2RlbEN0cmwuJHNldFRvdWNoZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgREVGQVVMVF9SRUdFWFAgPSAvKFxccyt8XilkZWZhdWx0KFxccyt8JCkvO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW9kZWxPcHRpb25zXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBbGxvd3MgdHVuaW5nIGhvdyBtb2RlbCB1cGRhdGVzIGFyZSBkb25lLiBVc2luZyBgbmdNb2RlbE9wdGlvbnNgIHlvdSBjYW4gc3BlY2lmeSBhIGN1c3RvbSBsaXN0IG9mXG4gKiBldmVudHMgdGhhdCB3aWxsIHRyaWdnZXIgYSBtb2RlbCB1cGRhdGUgYW5kL29yIGEgZGVib3VuY2luZyBkZWxheSBzbyB0aGF0IHRoZSBhY3R1YWwgdXBkYXRlIG9ubHlcbiAqIHRha2VzIHBsYWNlIHdoZW4gYSB0aW1lciBleHBpcmVzOyB0aGlzIHRpbWVyIHdpbGwgYmUgcmVzZXQgYWZ0ZXIgYW5vdGhlciBjaGFuZ2UgdGFrZXMgcGxhY2UuXG4gKlxuICogR2l2ZW4gdGhlIG5hdHVyZSBvZiBgbmdNb2RlbE9wdGlvbnNgLCB0aGUgdmFsdWUgZGlzcGxheWVkIGluc2lkZSBpbnB1dCBmaWVsZHMgaW4gdGhlIHZpZXcgbWlnaHRcbiAqIGJlIGRpZmZlcmVudCBmcm9tIHRoZSB2YWx1ZSBpbiB0aGUgYWN0dWFsIG1vZGVsLiBUaGlzIG1lYW5zIHRoYXQgaWYgeW91IHVwZGF0ZSB0aGUgbW9kZWwgeW91XG4gKiBzaG91bGQgYWxzbyBpbnZva2Uge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIgYCRyb2xsYmFja1ZpZXdWYWx1ZWB9IG9uIHRoZSByZWxldmFudCBpbnB1dCBmaWVsZCBpblxuICogb3JkZXIgdG8gbWFrZSBzdXJlIGl0IGlzIHN5bmNocm9uaXplZCB3aXRoIHRoZSBtb2RlbCBhbmQgdGhhdCBhbnkgZGVib3VuY2VkIGFjdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBUaGUgZWFzaWVzdCB3YXkgdG8gcmVmZXJlbmNlIHRoZSBjb250cm9sJ3Mge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIgYCRyb2xsYmFja1ZpZXdWYWx1ZWB9XG4gKiBtZXRob2QgaXMgYnkgbWFraW5nIHN1cmUgdGhlIGlucHV0IGlzIHBsYWNlZCBpbnNpZGUgYSBmb3JtIHRoYXQgaGFzIGEgYG5hbWVgIGF0dHJpYnV0ZS4gVGhpcyBpc1xuICogaW1wb3J0YW50IGJlY2F1c2UgYGZvcm1gIGNvbnRyb2xsZXJzIGFyZSBwdWJsaXNoZWQgdG8gdGhlIHJlbGF0ZWQgc2NvcGUgdW5kZXIgdGhlIG5hbWUgaW4gdGhlaXJcbiAqIGBuYW1lYCBhdHRyaWJ1dGUuXG4gKlxuICogQW55IHBlbmRpbmcgY2hhbmdlcyB3aWxsIHRha2UgcGxhY2UgaW1tZWRpYXRlbHkgd2hlbiBhbiBlbmNsb3NpbmcgZm9ybSBpcyBzdWJtaXR0ZWQgdmlhIHRoZVxuICogYHN1Ym1pdGAgZXZlbnQuIE5vdGUgdGhhdCBgbmdDbGlja2AgZXZlbnRzIHdpbGwgb2NjdXIgYmVmb3JlIHRoZSBtb2RlbCBpcyB1cGRhdGVkLiBVc2UgYG5nU3VibWl0YFxuICogdG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIHVwZGF0ZWQgbW9kZWwuXG4gKlxuICogYG5nTW9kZWxPcHRpb25zYCBoYXMgYW4gZWZmZWN0IG9uIHRoZSBlbGVtZW50IGl0J3MgZGVjbGFyZWQgb24gYW5kIGl0cyBkZXNjZW5kYW50cy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbmdNb2RlbE9wdGlvbnMgb3B0aW9ucyB0byBhcHBseSB0byB0aGUgY3VycmVudCBtb2RlbC4gVmFsaWQga2V5cyBhcmU6XG4gKiAgIC0gYHVwZGF0ZU9uYDogc3RyaW5nIHNwZWNpZnlpbmcgd2hpY2ggZXZlbnQgc2hvdWxkIHRoZSBpbnB1dCBiZSBib3VuZCB0by4gWW91IGNhbiBzZXQgc2V2ZXJhbFxuICogICAgIGV2ZW50cyB1c2luZyBhbiBzcGFjZSBkZWxpbWl0ZWQgbGlzdC4gVGhlcmUgaXMgYSBzcGVjaWFsIGV2ZW50IGNhbGxlZCBgZGVmYXVsdGAgdGhhdFxuICogICAgIG1hdGNoZXMgdGhlIGRlZmF1bHQgZXZlbnRzIGJlbG9uZ2luZyBvZiB0aGUgY29udHJvbC5cbiAqICAgLSBgZGVib3VuY2VgOiBpbnRlZ2VyIHZhbHVlIHdoaWNoIGNvbnRhaW5zIHRoZSBkZWJvdW5jZSBtb2RlbCB1cGRhdGUgdmFsdWUgaW4gbWlsbGlzZWNvbmRzLiBBXG4gKiAgICAgdmFsdWUgb2YgMCB0cmlnZ2VycyBhbiBpbW1lZGlhdGUgdXBkYXRlLiBJZiBhbiBvYmplY3QgaXMgc3VwcGxpZWQgaW5zdGVhZCwgeW91IGNhbiBzcGVjaWZ5IGFcbiAqICAgICBjdXN0b20gdmFsdWUgZm9yIGVhY2ggZXZlbnQuIEZvciBleGFtcGxlOlxuICogICAgIGBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2RlZmF1bHQgYmx1cicsIGRlYm91bmNlOiB7ICdkZWZhdWx0JzogNTAwLCAnYmx1cic6IDAgfSB9XCJgXG4gKiAgIC0gYGFsbG93SW52YWxpZGA6IGJvb2xlYW4gdmFsdWUgd2hpY2ggaW5kaWNhdGVzIHRoYXQgdGhlIG1vZGVsIGNhbiBiZSBzZXQgd2l0aCB2YWx1ZXMgdGhhdCBkaWRcbiAqICAgICBub3QgdmFsaWRhdGUgY29ycmVjdGx5IGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2Ygc2V0dGluZyB0aGUgbW9kZWwgdG8gdW5kZWZpbmVkLlxuICogICAtIGBnZXR0ZXJTZXR0ZXJgOiBib29sZWFuIHZhbHVlIHdoaWNoIGRldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gdHJlYXQgZnVuY3Rpb25zIGJvdW5kIHRvXG4gICAgICAgYG5nTW9kZWxgIGFzIGdldHRlcnMvc2V0dGVycy5cbiAqICAgLSBgdGltZXpvbmVgOiBEZWZpbmVzIHRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgZm9yXG4gKiAgICAgYDxpbnB1dCB0eXBlPVwiZGF0ZVwiPmAsIGA8aW5wdXQgdHlwZT1cInRpbWVcIj5gLCAuLi4gLiBJdCB1bmRlcnN0YW5kcyBVVEMvR01UIGFuZCB0aGVcbiAqICAgICBjb250aW5lbnRhbCBVUyB0aW1lIHpvbmUgYWJicmV2aWF0aW9ucywgYnV0IGZvciBnZW5lcmFsIHVzZSwgdXNlIGEgdGltZSB6b25lIG9mZnNldCwgZm9yXG4gKiAgICAgZXhhbXBsZSwgYCcrMDQzMCdgICg0IGhvdXJzLCAzMCBtaW51dGVzIGVhc3Qgb2YgdGhlIEdyZWVud2ljaCBtZXJpZGlhbilcbiAqICAgICBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIgd2lsbCBiZSB1c2VkLlxuICpcbiAqIEBleGFtcGxlXG5cbiAgVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBvdmVycmlkZSBpbW1lZGlhdGUgdXBkYXRlcy4gQ2hhbmdlcyBvbiB0aGUgaW5wdXRzIHdpdGhpbiB0aGVcbiAgZm9ybSB3aWxsIHVwZGF0ZSB0aGUgbW9kZWwgb25seSB3aGVuIHRoZSBjb250cm9sIGxvc2VzIGZvY3VzIChibHVyIGV2ZW50KS4gSWYgYGVzY2FwZWAga2V5IGlzXG4gIHByZXNzZWQgd2hpbGUgdGhlIGlucHV0IGZpZWxkIGlzIGZvY3VzZWQsIHRoZSB2YWx1ZSBpcyByZXNldCB0byB0aGUgdmFsdWUgaW4gdGhlIGN1cnJlbnQgbW9kZWwuXG5cbiAgPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1ibHVyXCIgbW9kdWxlPVwib3B0aW9uc0V4YW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPGZvcm0gbmFtZT1cInVzZXJGb3JtXCI+XG4gICAgICAgICAgPGxhYmVsPk5hbWU6XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAgICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2JsdXInIH1cIlxuICAgICAgICAgICAgICAgICAgIG5nLWtleXVwPVwiY2FuY2VsKCRldmVudClcIiAvPlxuICAgICAgICAgIDwvbGFiZWw+PGJyIC8+XG4gICAgICAgICAgPGxhYmVsPk90aGVyIGRhdGE6XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVzZXIuZGF0YVwiIC8+XG4gICAgICAgICAgPC9sYWJlbD48YnIgLz5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWVcIj48L3NwYW4+PC9wcmU+XG4gICAgICAgIDxwcmU+dXNlci5kYXRhID0gPHNwYW4gbmctYmluZD1cInVzZXIuZGF0YVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnb3B0aW9uc0V4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUudXNlciA9IHsgbmFtZTogJ0pvaG4nLCBkYXRhOiAnJyB9O1xuXG4gICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMjcpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnVzZXJGb3JtLnVzZXJOYW1lLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIG1vZGVsID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyLm5hbWUnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLm5hbWUnKSk7XG4gICAgICB2YXIgb3RoZXIgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLmRhdGEnKSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYWxsb3cgY3VzdG9tIGV2ZW50cycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpbnB1dC5zZW5kS2V5cygnIERvZScpO1xuICAgICAgICBpbnB1dC5jbGljaygpO1xuICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0VxdWFsKCdKb2huJyk7XG4gICAgICAgIG90aGVyLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0pvaG4gRG9lJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCAkcm9sbGJhY2tWaWV3VmFsdWUgd2hlbiBtb2RlbCBjaGFuZ2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlucHV0LnNlbmRLZXlzKCcgRG9lJyk7XG4gICAgICAgIGV4cGVjdChpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJ0pvaG4gRG9lJyk7XG4gICAgICAgIGlucHV0LnNlbmRLZXlzKHByb3RyYWN0b3IuS2V5LkVTQ0FQRSk7XG4gICAgICAgIGV4cGVjdChpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJ0pvaG4nKTtcbiAgICAgICAgb3RoZXIuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9FcXVhbCgnSm9obicpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG5cbiAgVGhpcyBvbmUgc2hvd3MgaG93IHRvIGRlYm91bmNlIG1vZGVsIGNoYW5nZXMuIE1vZGVsIHdpbGwgYmUgdXBkYXRlZCBvbmx5IDEgc2VjIGFmdGVyIGxhc3QgY2hhbmdlLlxuICBJZiB0aGUgYENsZWFyYCBidXR0b24gaXMgcHJlc3NlZCwgYW55IGRlYm91bmNlZCBhY3Rpb24gaXMgY2FuY2VsZWQgYW5kIHRoZSB2YWx1ZSBiZWNvbWVzIGVtcHR5LlxuXG4gIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsT3B0aW9ucy1kaXJlY3RpdmUtZGVib3VuY2VcIiBtb2R1bGU9XCJvcHRpb25zRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAgICAgICAgICA8bGFiZWw+TmFtZTpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGRlYm91bmNlOiAxMDAwIH1cIiAvPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInVzZXJGb3JtLnVzZXJOYW1lLiRyb2xsYmFja1ZpZXdWYWx1ZSgpOyB1c2VyLm5hbWU9JydcIj5DbGVhcjwvYnV0dG9uPlxuICAgICAgICAgIDxiciAvPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnb3B0aW9uc0V4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUudXNlciA9IHsgbmFtZTogJ0lnb3InIH07XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cblxuICBUaGlzIG9uZSBzaG93cyBob3cgdG8gYmluZCB0byBnZXR0ZXIvc2V0dGVyczpcblxuICA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWdldHRlci1zZXR0ZXJcIiBtb2R1bGU9XCJnZXR0ZXJTZXR0ZXJFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICAgICAgICAgIDxsYWJlbD5OYW1lOlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gICAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cIiAvPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lKClcIj48L3NwYW4+PC9wcmU+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2dldHRlclNldHRlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICB2YXIgX25hbWUgPSAnQnJpYW4nO1xuICAgICAgICAgICRzY29wZS51c2VyID0ge1xuICAgICAgICAgICAgbmFtZTogZnVuY3Rpb24obmV3TmFtZSkge1xuICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgbmV3TmFtZSBjYW4gYmUgdW5kZWZpbmVkIGZvciB0d28gcmVhc29uczpcbiAgICAgICAgICAgICAgLy8gMS4gQmVjYXVzZSBpdCBpcyBjYWxsZWQgYXMgYSBnZXR0ZXIgYW5kIHRodXMgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzXG4gICAgICAgICAgICAgIC8vIDIuIEJlY2F1c2UgdGhlIHByb3BlcnR5IHNob3VsZCBhY3R1YWxseSBiZSBzZXQgdG8gdW5kZWZpbmVkLiBUaGlzIGhhcHBlbnMgZS5nLiBpZiB0aGVcbiAgICAgICAgICAgICAgLy8gICAgaW5wdXQgaXMgaW52YWxpZFxuICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfbmFtZSA9IG5ld05hbWUpIDogX25hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRhdHRycycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB0aGlzLiRvcHRpb25zID0gY29weSgkc2NvcGUuJGV2YWwoJGF0dHJzLm5nTW9kZWxPcHRpb25zKSk7XG4gICAgICAvLyBBbGxvdyBhZGRpbmcvb3ZlcnJpZGluZyBib3VuZCBldmVudHNcbiAgICAgIGlmIChpc0RlZmluZWQodGhpcy4kb3B0aW9ucy51cGRhdGVPbikpIHtcbiAgICAgICAgdGhpcy4kb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQgPSBmYWxzZTtcbiAgICAgICAgLy8gZXh0cmFjdCBcImRlZmF1bHRcIiBwc2V1ZG8tZXZlbnQgZnJvbSBsaXN0IG9mIGV2ZW50cyB0aGF0IGNhbiB0cmlnZ2VyIGEgbW9kZWwgdXBkYXRlXG4gICAgICAgIHRoaXMuJG9wdGlvbnMudXBkYXRlT24gPSB0cmltKHRoaXMuJG9wdGlvbnMudXBkYXRlT24ucmVwbGFjZShERUZBVUxUX1JFR0VYUCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhhdC4kb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiAnICc7XG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XVxuICB9O1xufTtcblxuXG5cbi8vIGhlbHBlciBtZXRob2RzXG5mdW5jdGlvbiBhZGRTZXRWYWxpZGl0eU1ldGhvZChjb250ZXh0KSB7XG4gIHZhciBjdHJsID0gY29udGV4dC5jdHJsLFxuICAgICAgJGVsZW1lbnQgPSBjb250ZXh0LiRlbGVtZW50LFxuICAgICAgY2xhc3NDYWNoZSA9IHt9LFxuICAgICAgc2V0ID0gY29udGV4dC5zZXQsXG4gICAgICB1bnNldCA9IGNvbnRleHQudW5zZXQsXG4gICAgICAkYW5pbWF0ZSA9IGNvbnRleHQuJGFuaW1hdGU7XG5cbiAgY2xhc3NDYWNoZVtJTlZBTElEX0NMQVNTXSA9ICEoY2xhc3NDYWNoZVtWQUxJRF9DTEFTU10gPSAkZWxlbWVudC5oYXNDbGFzcyhWQUxJRF9DTEFTUykpO1xuXG4gIGN0cmwuJHNldFZhbGlkaXR5ID0gc2V0VmFsaWRpdHk7XG5cbiAgZnVuY3Rpb24gc2V0VmFsaWRpdHkodmFsaWRhdGlvbkVycm9yS2V5LCBzdGF0ZSwgY29udHJvbGxlcikge1xuICAgIGlmIChpc1VuZGVmaW5lZChzdGF0ZSkpIHtcbiAgICAgIGNyZWF0ZUFuZFNldCgnJHBlbmRpbmcnLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bnNldEFuZENsZWFudXAoJyRwZW5kaW5nJywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICB9XG4gICAgaWYgKCFpc0Jvb2xlYW4oc3RhdGUpKSB7XG4gICAgICB1bnNldChjdHJsLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgIHVuc2V0KGN0cmwuJCRzdWNjZXNzLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgdW5zZXQoY3RybC4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICAgIHNldChjdHJsLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldChjdHJsLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgICAgdW5zZXQoY3RybC4kJHN1Y2Nlc3MsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdHJsLiRwZW5kaW5nKSB7XG4gICAgICBjYWNoZWRUb2dnbGVDbGFzcyhQRU5ESU5HX0NMQVNTLCB0cnVlKTtcbiAgICAgIGN0cmwuJHZhbGlkID0gY3RybC4kaW52YWxpZCA9IHVuZGVmaW5lZDtcbiAgICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3MoJycsIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZWRUb2dnbGVDbGFzcyhQRU5ESU5HX0NMQVNTLCBmYWxzZSk7XG4gICAgICBjdHJsLiR2YWxpZCA9IGlzT2JqZWN0RW1wdHkoY3RybC4kZXJyb3IpO1xuICAgICAgY3RybC4kaW52YWxpZCA9ICFjdHJsLiR2YWxpZDtcbiAgICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3MoJycsIGN0cmwuJHZhbGlkKTtcbiAgICB9XG5cbiAgICAvLyByZS1yZWFkIHRoZSBzdGF0ZSBhcyB0aGUgc2V0L3Vuc2V0IG1ldGhvZHMgY291bGQgaGF2ZVxuICAgIC8vIGNvbWJpbmVkIHN0YXRlIGluIGN0cmwuJGVycm9yW3ZhbGlkYXRpb25FcnJvcl0gKHVzZWQgZm9yIGZvcm1zKSxcbiAgICAvLyB3aGVyZSBzZXR0aW5nL3Vuc2V0dGluZyBvbmx5IGluY3JlbWVudHMvZGVjcmVtZW50cyB0aGUgdmFsdWUsXG4gICAgLy8gYW5kIGRvZXMgbm90IHJlcGxhY2UgaXQuXG4gICAgdmFyIGNvbWJpbmVkU3RhdGU7XG4gICAgaWYgKGN0cmwuJHBlbmRpbmcgJiYgY3RybC4kcGVuZGluZ1t2YWxpZGF0aW9uRXJyb3JLZXldKSB7XG4gICAgICBjb21iaW5lZFN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAoY3RybC4kZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoY3RybC4kJHN1Y2Nlc3NbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModmFsaWRhdGlvbkVycm9yS2V5LCBjb21iaW5lZFN0YXRlKTtcbiAgICBjdHJsLiQkcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvbkVycm9yS2V5LCBjb21iaW5lZFN0YXRlLCBjdHJsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFuZFNldChuYW1lLCB2YWx1ZSwgY29udHJvbGxlcikge1xuICAgIGlmICghY3RybFtuYW1lXSkge1xuICAgICAgY3RybFtuYW1lXSA9IHt9O1xuICAgIH1cbiAgICBzZXQoY3RybFtuYW1lXSwgdmFsdWUsIGNvbnRyb2xsZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5zZXRBbmRDbGVhbnVwKG5hbWUsIHZhbHVlLCBjb250cm9sbGVyKSB7XG4gICAgaWYgKGN0cmxbbmFtZV0pIHtcbiAgICAgIHVuc2V0KGN0cmxbbmFtZV0sIHZhbHVlLCBjb250cm9sbGVyKTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0RW1wdHkoY3RybFtuYW1lXSkpIHtcbiAgICAgIGN0cmxbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FjaGVkVG9nZ2xlQ2xhc3MoY2xhc3NOYW1lLCBzd2l0Y2hWYWx1ZSkge1xuICAgIGlmIChzd2l0Y2hWYWx1ZSAmJiAhY2xhc3NDYWNoZVtjbGFzc05hbWVdKSB7XG4gICAgICAkYW5pbWF0ZS5hZGRDbGFzcygkZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgIGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICghc3dpdGNoVmFsdWUgJiYgY2xhc3NDYWNoZVtjbGFzc05hbWVdKSB7XG4gICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcygkZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgIGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZVZhbGlkYXRpb25Dc3ModmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkKSB7XG4gICAgdmFsaWRhdGlvbkVycm9yS2V5ID0gdmFsaWRhdGlvbkVycm9yS2V5ID8gJy0nICsgc25ha2VfY2FzZSh2YWxpZGF0aW9uRXJyb3JLZXksICctJykgOiAnJztcblxuICAgIGNhY2hlZFRvZ2dsZUNsYXNzKFZBTElEX0NMQVNTICsgdmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkID09PSB0cnVlKTtcbiAgICBjYWNoZWRUb2dnbGVDbGFzcyhJTlZBTElEX0NMQVNTICsgdmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkID09PSBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgaWYgKG9iaikge1xuICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdOb25CaW5kYWJsZVxuICogQHJlc3RyaWN0IEFDXG4gKiBAcHJpb3JpdHkgMTAwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ05vbkJpbmRhYmxlYCBkaXJlY3RpdmUgdGVsbHMgQW5ndWxhciBub3QgdG8gY29tcGlsZSBvciBiaW5kIHRoZSBjb250ZW50cyBvZiB0aGUgY3VycmVudFxuICogRE9NIGVsZW1lbnQuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSBlbGVtZW50IGNvbnRhaW5zIHdoYXQgYXBwZWFycyB0byBiZSBBbmd1bGFyIGRpcmVjdGl2ZXMgYW5kXG4gKiBiaW5kaW5ncyBidXQgd2hpY2ggc2hvdWxkIGJlIGlnbm9yZWQgYnkgQW5ndWxhci4gVGhpcyBjb3VsZCBiZSB0aGUgY2FzZSBpZiB5b3UgaGF2ZSBhIHNpdGUgdGhhdFxuICogZGlzcGxheXMgc25pcHBldHMgb2YgY29kZSwgZm9yIGluc3RhbmNlLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICpcbiAqIEBleGFtcGxlXG4gKiBJbiB0aGlzIGV4YW1wbGUgdGhlcmUgYXJlIHR3byBsb2NhdGlvbnMgd2hlcmUgYSBzaW1wbGUgaW50ZXJwb2xhdGlvbiBiaW5kaW5nIChge3t9fWApIGlzIHByZXNlbnQsXG4gKiBidXQgdGhlIG9uZSB3cmFwcGVkIGluIGBuZ05vbkJpbmRhYmxlYCBpcyBsZWZ0IGFsb25lLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8ZGl2Pk5vcm1hbDoge3sxICsgMn19PC9kaXY+XG4gICAgICAgIDxkaXYgbmctbm9uLWJpbmRhYmxlPklnbm9yZWQ6IHt7MSArIDJ9fTwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctbm9uLWJpbmRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCcxICsgMicpKS5nZXRUZXh0KCkpLnRvQ29udGFpbignMycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnZGl2JykpLmxhc3QoKS5nZXRUZXh0KCkpLnRvTWF0Y2goLzEgXFwrIDIvKTtcbiAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoeyB0ZXJtaW5hbDogdHJ1ZSwgcHJpb3JpdHk6IDEwMDAgfSk7XG5cbi8qIGdsb2JhbCBqcUxpdGVSZW1vdmUgKi9cblxudmFyIG5nT3B0aW9uc01pbkVyciA9IG1pbkVycignbmdPcHRpb25zJyk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdPcHRpb25zXG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSBgbmdPcHRpb25zYCBhdHRyaWJ1dGUgY2FuIGJlIHVzZWQgdG8gZHluYW1pY2FsbHkgZ2VuZXJhdGUgYSBsaXN0IG9mIGA8b3B0aW9uPmBcbiAqIGVsZW1lbnRzIGZvciB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50IHVzaW5nIHRoZSBhcnJheSBvciBvYmplY3Qgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGVcbiAqIGBuZ09wdGlvbnNgIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvbi5cbiAqXG4gKiBJbiBtYW55IGNhc2VzLCBgbmdSZXBlYXRgIGNhbiBiZSB1c2VkIG9uIGA8b3B0aW9uPmAgZWxlbWVudHMgaW5zdGVhZCBvZiBgbmdPcHRpb25zYCB0byBhY2hpZXZlIGFcbiAqIHNpbWlsYXIgcmVzdWx0LiBIb3dldmVyLCBgbmdPcHRpb25zYCBwcm92aWRlcyBzb21lIGJlbmVmaXRzIHN1Y2ggYXMgcmVkdWNpbmcgbWVtb3J5IGFuZFxuICogaW5jcmVhc2luZyBzcGVlZCBieSBub3QgY3JlYXRpbmcgYSBuZXcgc2NvcGUgZm9yIGVhY2ggcmVwZWF0ZWQgaW5zdGFuY2UsIGFzIHdlbGwgYXMgcHJvdmlkaW5nXG4gKiBtb3JlIGZsZXhpYmlsaXR5IGluIGhvdyB0aGUgYDxzZWxlY3Q+YCdzIG1vZGVsIGlzIGFzc2lnbmVkIHZpYSB0aGUgYHNlbGVjdGAgKipgYXNgKiogcGFydCBvZiB0aGVcbiAqIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvbi4gYG5nT3B0aW9uc2Agc2hvdWxkIGJlIHVzZWQgd2hlbiB0aGUgYDxzZWxlY3Q+YCBtb2RlbCBuZWVkcyB0byBiZSBib3VuZFxuICogIHRvIGEgbm9uLXN0cmluZyB2YWx1ZS4gVGhpcyBpcyBiZWNhdXNlIGFuIG9wdGlvbiBlbGVtZW50IGNhbiBvbmx5IGJlIGJvdW5kIHRvIHN0cmluZyB2YWx1ZXMgYXRcbiAqIHByZXNlbnQuXG4gKlxuICogV2hlbiBhbiBpdGVtIGluIHRoZSBgPHNlbGVjdD5gIG1lbnUgaXMgc2VsZWN0ZWQsIHRoZSBhcnJheSBlbGVtZW50IG9yIG9iamVjdCBwcm9wZXJ0eVxuICogcmVwcmVzZW50ZWQgYnkgdGhlIHNlbGVjdGVkIG9wdGlvbiB3aWxsIGJlIGJvdW5kIHRvIHRoZSBtb2RlbCBpZGVudGlmaWVkIGJ5IHRoZSBgbmdNb2RlbGBcbiAqIGRpcmVjdGl2ZS5cbiAqXG4gKiBPcHRpb25hbGx5LCBhIHNpbmdsZSBoYXJkLWNvZGVkIGA8b3B0aW9uPmAgZWxlbWVudCwgd2l0aCB0aGUgdmFsdWUgc2V0IHRvIGFuIGVtcHR5IHN0cmluZywgY2FuXG4gKiBiZSBuZXN0ZWQgaW50byB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50LiBUaGlzIGVsZW1lbnQgd2lsbCB0aGVuIHJlcHJlc2VudCB0aGUgYG51bGxgIG9yIFwibm90IHNlbGVjdGVkXCJcbiAqIG9wdGlvbi4gU2VlIGV4YW1wbGUgYmVsb3cgZm9yIGRlbW9uc3RyYXRpb24uXG4gKlxuICogIyMgQ29tcGxleCBNb2RlbHMgKG9iamVjdHMgb3IgY29sbGVjdGlvbnMpXG4gKlxuICogQnkgZGVmYXVsdCwgYG5nTW9kZWxgIHdhdGNoZXMgdGhlIG1vZGVsIGJ5IHJlZmVyZW5jZSwgbm90IHZhbHVlLiBUaGlzIGlzIGltcG9ydGFudCB0byBrbm93IHdoZW5cbiAqIGJpbmRpbmcgdGhlIHNlbGVjdCB0byBhIG1vZGVsIHRoYXQgaXMgYW4gb2JqZWN0IG9yIGEgY29sbGVjdGlvbi5cbiAqXG4gKiBPbmUgaXNzdWUgb2NjdXJzIGlmIHlvdSB3YW50IHRvIHByZXNlbGVjdCBhbiBvcHRpb24uIEZvciBleGFtcGxlLCBpZiB5b3Ugc2V0XG4gKiB0aGUgbW9kZWwgdG8gYW4gb2JqZWN0IHRoYXQgaXMgZXF1YWwgdG8gYW4gb2JqZWN0IGluIHlvdXIgY29sbGVjdGlvbiwgYG5nT3B0aW9uc2Agd29uJ3QgYmUgYWJsZSB0byBzZXQgdGhlIHNlbGVjdGlvbixcbiAqIGJlY2F1c2UgdGhlIG9iamVjdHMgYXJlIG5vdCBpZGVudGljYWwuIFNvIGJ5IGRlZmF1bHQsIHlvdSBzaG91bGQgYWx3YXlzIHJlZmVyZW5jZSB0aGUgaXRlbSBpbiB5b3VyIGNvbGxlY3Rpb25cbiAqIGZvciBwcmVzZWxlY3Rpb25zLCBlLmcuOiBgJHNjb3BlLnNlbGVjdGVkID0gJHNjb3BlLmNvbGxlY3Rpb25bM11gLlxuICpcbiAqIEFub3RoZXIgc29sdXRpb24gaXMgdG8gdXNlIGEgYHRyYWNrIGJ5YCBjbGF1c2UsIGJlY2F1c2UgdGhlbiBgbmdPcHRpb25zYCB3aWxsIHRyYWNrIHRoZSBpZGVudGl0eVxuICogb2YgdGhlIGl0ZW0gbm90IGJ5IHJlZmVyZW5jZSwgYnV0IGJ5IHRoZSByZXN1bHQgb2YgdGhlIGB0cmFjayBieWAgZXhwcmVzc2lvbi4gRm9yIGV4YW1wbGUsIGlmIHlvdXJcbiAqIGNvbGxlY3Rpb24gaXRlbXMgaGF2ZSBhbiBpZCBwcm9wZXJ0eSwgeW91IHdvdWxkIGB0cmFjayBieSBpdGVtLmlkYC5cbiAqXG4gKiBBIGRpZmZlcmVudCBpc3N1ZSB3aXRoIG9iamVjdHMgb3IgY29sbGVjdGlvbnMgaXMgdGhhdCBuZ01vZGVsIHdvbid0IGRldGVjdCBpZiBhbiBvYmplY3QgcHJvcGVydHkgb3JcbiAqIGEgY29sbGVjdGlvbiBpdGVtIGNoYW5nZXMuIEZvciB0aGF0IHJlYXNvbiwgYG5nT3B0aW9uc2AgYWRkaXRpb25hbGx5IHdhdGNoZXMgdGhlIG1vZGVsIHVzaW5nXG4gKiBgJHdhdGNoQ29sbGVjdGlvbmAsIHdoZW4gdGhlIGV4cHJlc3Npb24gY29udGFpbnMgYSBgdHJhY2sgYnlgIGNsYXVzZSBvciB0aGUgdGhlIHNlbGVjdCBoYXMgdGhlIGBtdWx0aXBsZWAgYXR0cmlidXRlLlxuICogVGhpcyBhbGxvd3MgbmdPcHRpb25zIHRvIHRyaWdnZXIgYSByZS1yZW5kZXJpbmcgb2YgdGhlIG9wdGlvbnMgZXZlbiBpZiB0aGUgYWN0dWFsIG9iamVjdC9jb2xsZWN0aW9uXG4gKiBoYXMgbm90IGNoYW5nZWQgaWRlbnRpdHksIGJ1dCBvbmx5IGEgcHJvcGVydHkgb24gdGhlIG9iamVjdCBvciBhbiBpdGVtIGluIHRoZSBjb2xsZWN0aW9uIGNoYW5nZXMuXG4gKlxuICogTm90ZSB0aGF0IGAkd2F0Y2hDb2xsZWN0aW9uYCBkb2VzIGEgc2hhbGxvdyBjb21wYXJpc29uIG9mIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBvYmplY3QgKG9yIHRoZSBpdGVtcyBpbiB0aGUgY29sbGVjdGlvblxuICogaWYgdGhlIG1vZGVsIGlzIGFuIGFycmF5KS4gVGhpcyBtZWFucyB0aGF0IGNoYW5naW5nIGEgcHJvcGVydHkgZGVlcGVyIHRoYW4gdGhlIGZpcnN0IGxldmVsIGluc2lkZSB0aGVcbiAqIG9iamVjdC9jb2xsZWN0aW9uIHdpbGwgbm90IHRyaWdnZXIgYSByZS1yZW5kZXJpbmcuXG4gKlxuICogIyMgYHNlbGVjdGAgKipgYXNgKipcbiAqXG4gKiBVc2luZyBgc2VsZWN0YCAqKmBhc2AqKiB3aWxsIGJpbmQgdGhlIHJlc3VsdCBvZiB0aGUgYHNlbGVjdGAgZXhwcmVzc2lvbiB0byB0aGUgbW9kZWwsIGJ1dFxuICogdGhlIHZhbHVlIG9mIHRoZSBgPHNlbGVjdD5gIGFuZCBgPG9wdGlvbj5gIGh0bWwgZWxlbWVudHMgd2lsbCBiZSBlaXRoZXIgdGhlIGluZGV4IChmb3IgYXJyYXkgZGF0YSBzb3VyY2VzKVxuICogb3IgcHJvcGVydHkgbmFtZSAoZm9yIG9iamVjdCBkYXRhIHNvdXJjZXMpIG9mIHRoZSB2YWx1ZSB3aXRoaW4gdGhlIGNvbGxlY3Rpb24uIElmIGEgKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvblxuICogaXMgdXNlZCwgdGhlIHJlc3VsdCBvZiB0aGF0IGV4cHJlc3Npb24gd2lsbCBiZSBzZXQgYXMgdGhlIHZhbHVlIG9mIHRoZSBgb3B0aW9uYCBhbmQgYHNlbGVjdGAgZWxlbWVudHMuXG4gKlxuICpcbiAqICMjIyBgc2VsZWN0YCAqKmBhc2AqKiBhbmQgKipgdHJhY2sgYnlgKipcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogQmUgY2FyZWZ1bCB3aGVuIHVzaW5nIGBzZWxlY3RgICoqYGFzYCoqIGFuZCAqKmB0cmFjayBieWAqKiBpbiB0aGUgc2FtZSBleHByZXNzaW9uLlxuICogPC9kaXY+XG4gKlxuICogR2l2ZW4gdGhpcyBhcnJheSBvZiBpdGVtcyBvbiB0aGUgJHNjb3BlOlxuICpcbiAqIGBgYGpzXG4gKiAkc2NvcGUuaXRlbXMgPSBbe1xuICogICBpZDogMSxcbiAqICAgbGFiZWw6ICdhTGFiZWwnLFxuICogICBzdWJJdGVtOiB7IG5hbWU6ICdhU3ViSXRlbScgfVxuICogfSwge1xuICogICBpZDogMixcbiAqICAgbGFiZWw6ICdiTGFiZWwnLFxuICogICBzdWJJdGVtOiB7IG5hbWU6ICdiU3ViSXRlbScgfVxuICogfV07XG4gKiBgYGBcbiAqXG4gKiBUaGlzIHdpbGwgd29yazpcbiAqXG4gKiBgYGBodG1sXG4gKiA8c2VsZWN0IG5nLW9wdGlvbnM9XCJpdGVtIGFzIGl0ZW0ubGFiZWwgZm9yIGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgaXRlbS5pZFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48L3NlbGVjdD5cbiAqIGBgYFxuICogYGBganNcbiAqICRzY29wZS5zZWxlY3RlZCA9ICRzY29wZS5pdGVtc1swXTtcbiAqIGBgYFxuICpcbiAqIGJ1dCB0aGlzIHdpbGwgbm90IHdvcms6XG4gKlxuICogYGBgaHRtbFxuICogPHNlbGVjdCBuZy1vcHRpb25zPVwiaXRlbS5zdWJJdGVtIGFzIGl0ZW0ubGFiZWwgZm9yIGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgaXRlbS5pZFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48L3NlbGVjdD5cbiAqIGBgYFxuICogYGBganNcbiAqICRzY29wZS5zZWxlY3RlZCA9ICRzY29wZS5pdGVtc1swXS5zdWJJdGVtO1xuICogYGBgXG4gKlxuICogSW4gYm90aCBleGFtcGxlcywgdGhlICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb24gaXMgYXBwbGllZCBzdWNjZXNzZnVsbHkgdG8gZWFjaCBgaXRlbWAgaW4gdGhlXG4gKiBgaXRlbXNgIGFycmF5LiBCZWNhdXNlIHRoZSBzZWxlY3RlZCBvcHRpb24gaGFzIGJlZW4gc2V0IHByb2dyYW1tYXRpY2FsbHkgaW4gdGhlIGNvbnRyb2xsZXIsIHRoZVxuICogKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvbiBpcyBhbHNvIGFwcGxpZWQgdG8gdGhlIGBuZ01vZGVsYCB2YWx1ZS4gSW4gdGhlIGZpcnN0IGV4YW1wbGUsIHRoZVxuICogYG5nTW9kZWxgIHZhbHVlIGlzIGBpdGVtc1swXWAgYW5kIHRoZSAqKmB0cmFjayBieWAqKiBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBgaXRlbXNbMF0uaWRgIHdpdGhcbiAqIG5vIGlzc3VlLiBJbiB0aGUgc2Vjb25kIGV4YW1wbGUsIHRoZSBgbmdNb2RlbGAgdmFsdWUgaXMgYGl0ZW1zWzBdLnN1Ykl0ZW1gIGFuZCB0aGUgKipgdHJhY2sgYnlgKipcbiAqIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGBpdGVtc1swXS5zdWJJdGVtLmlkYCAod2hpY2ggaXMgdW5kZWZpbmVkKS4gQXMgYSByZXN1bHQsIHRoZSBtb2RlbCB2YWx1ZVxuICogaXMgbm90IG1hdGNoZWQgYWdhaW5zdCBhbnkgYDxvcHRpb24+YCBhbmQgdGhlIGA8c2VsZWN0PmAgYXBwZWFycyBhcyBoYXZpbmcgbm8gc2VsZWN0ZWQgdmFsdWUuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgVGhlIGNvbnRyb2wgaXMgY29uc2lkZXJlZCB2YWxpZCBvbmx5IGlmIHZhbHVlIGlzIGVudGVyZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB7Y29tcHJlaGVuc2lvbl9leHByZXNzaW9uPX0gbmdPcHRpb25zIGluIG9uZSBvZiB0aGUgZm9sbG93aW5nIGZvcm1zOlxuICpcbiAqICAgKiBmb3IgYXJyYXkgZGF0YSBzb3VyY2VzOlxuICogICAgICogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgbGFiZWxgICoqYGRpc2FibGUgd2hlbmAqKiBgZGlzYWJsZWAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICogICAgICogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcbiAqICAgICAqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgICoqYHRyYWNrIGJ5YCoqIGB0cmFja2V4cHJgXG4gKiAgICAgKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAgfCBvcmRlckJ5OmBvcmRlcmV4cHJgICoqYHRyYWNrIGJ5YCoqIGB0cmFja2V4cHJgXG4gKiAgICAgICAgKGZvciBpbmNsdWRpbmcgYSBmaWx0ZXIgd2l0aCBgdHJhY2sgYnlgKVxuICogICAqIGZvciBvYmplY3QgZGF0YSBzb3VyY2VzOlxuICogICAgICogYGxhYmVsYCAqKmBmb3IgKGAqKmBrZXlgICoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yIChgKipga2V5YCAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yIChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYCAqKmBmb3IgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgXG4gKiAgICAgICAgICoqYGZvcmAgYChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYFxuICogICAgICAgICAqKmBmb3JgIGAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKlxuICogV2hlcmU6XG4gKlxuICogICAqIGBhcnJheWAgLyBgb2JqZWN0YDogYW4gZXhwcmVzc2lvbiB3aGljaCBldmFsdWF0ZXMgdG8gYW4gYXJyYXkgLyBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogICAqIGB2YWx1ZWA6IGxvY2FsIHZhcmlhYmxlIHdoaWNoIHdpbGwgcmVmZXIgdG8gZWFjaCBpdGVtIGluIHRoZSBgYXJyYXlgIG9yIGVhY2ggcHJvcGVydHkgdmFsdWVcbiAqICAgICAgb2YgYG9iamVjdGAgZHVyaW5nIGl0ZXJhdGlvbi5cbiAqICAgKiBga2V5YDogbG9jYWwgdmFyaWFibGUgd2hpY2ggd2lsbCByZWZlciB0byBhIHByb3BlcnR5IG5hbWUgaW4gYG9iamVjdGAgZHVyaW5nIGl0ZXJhdGlvbi5cbiAqICAgKiBgbGFiZWxgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIHRoZSBsYWJlbCBmb3IgYDxvcHRpb24+YCBlbGVtZW50LiBUaGVcbiAqICAgICBgZXhwcmVzc2lvbmAgd2lsbCBtb3N0IGxpa2VseSByZWZlciB0byB0aGUgYHZhbHVlYCB2YXJpYWJsZSAoZS5nLiBgdmFsdWUucHJvcGVydHlOYW1lYCkuXG4gKiAgICogYHNlbGVjdGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIG9mIHRoZSBwYXJlbnQgYDxzZWxlY3Q+YFxuICogICAgICBlbGVtZW50LiBJZiBub3Qgc3BlY2lmaWVkLCBgc2VsZWN0YCBleHByZXNzaW9uIHdpbGwgZGVmYXVsdCB0byBgdmFsdWVgLlxuICogICAqIGBncm91cGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdXNlZCB0byBncm91cCBvcHRpb25zIHVzaW5nIHRoZSBgPG9wdGdyb3VwPmBcbiAqICAgICAgRE9NIGVsZW1lbnQuXG4gKiAgICogYGRpc2FibGVgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIHVzZWQgdG8gZGlzYWJsZSB0aGUgcmVuZGVyZWQgYDxvcHRpb24+YFxuICogICAgICBlbGVtZW50LiBSZXR1cm4gYHRydWVgIHRvIGRpc2FibGUuXG4gKiAgICogYHRyYWNrZXhwcmA6IFVzZWQgd2hlbiB3b3JraW5nIHdpdGggYW4gYXJyYXkgb2Ygb2JqZWN0cy4gVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZVxuICogICAgICB1c2VkIHRvIGlkZW50aWZ5IHRoZSBvYmplY3RzIGluIHRoZSBhcnJheS4gVGhlIGB0cmFja2V4cHJgIHdpbGwgbW9zdCBsaWtlbHkgcmVmZXIgdG8gdGhlXG4gKiAgICAgYHZhbHVlYCB2YXJpYWJsZSAoZS5nLiBgdmFsdWUucHJvcGVydHlOYW1lYCkuIFdpdGggdGhpcyB0aGUgc2VsZWN0aW9uIGlzIHByZXNlcnZlZFxuICogICAgICBldmVuIHdoZW4gdGhlIG9wdGlvbnMgYXJlIHJlY3JlYXRlZCAoZS5nLiByZWxvYWRlZCBmcm9tIHRoZSBzZXJ2ZXIpLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbW9kdWxlPVwic2VsZWN0RXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3NlbGVjdEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLmNvbG9ycyA9IFtcbiAgICAgICAgICAgICAge25hbWU6J2JsYWNrJywgc2hhZGU6J2RhcmsnfSxcbiAgICAgICAgICAgICAge25hbWU6J3doaXRlJywgc2hhZGU6J2xpZ2h0Jywgbm90QW5PcHRpb246IHRydWV9LFxuICAgICAgICAgICAgICB7bmFtZToncmVkJywgc2hhZGU6J2RhcmsnfSxcbiAgICAgICAgICAgICAge25hbWU6J2JsdWUnLCBzaGFkZTonZGFyaycsIG5vdEFuT3B0aW9uOiB0cnVlfSxcbiAgICAgICAgICAgICAge25hbWU6J3llbGxvdycsIHNoYWRlOidsaWdodCcsIG5vdEFuT3B0aW9uOiBmYWxzZX1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICAkc2NvcGUubXlDb2xvciA9ICRzY29wZS5jb2xvcnNbMl07IC8vIHJlZFxuICAgICAgICAgIH1dKTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPHVsPlxuICAgICAgICAgICAgPGxpIG5nLXJlcGVhdD1cImNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgICA8bGFiZWw+TmFtZTogPGlucHV0IG5nLW1vZGVsPVwiY29sb3IubmFtZVwiPjwvbGFiZWw+XG4gICAgICAgICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjb2xvci5ub3RBbk9wdGlvblwiPiBEaXNhYmxlZD88L2xhYmVsPlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY29sb3JzLnNwbGljZSgkaW5kZXgsIDEpXCIgYXJpYS1sYWJlbD1cIlJlbW92ZVwiPlg8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjb2xvcnMucHVzaCh7fSlcIj5hZGQ8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgICA8aHIvPlxuICAgICAgICAgIDxsYWJlbD5Db2xvciAobnVsbCBub3QgYWxsb3dlZCk6XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiIG5nLW9wdGlvbnM9XCJjb2xvci5uYW1lIGZvciBjb2xvciBpbiBjb2xvcnNcIj48L3NlbGVjdD5cbiAgICAgICAgICA8L2xhYmVsPjxici8+XG4gICAgICAgICAgPGxhYmVsPkNvbG9yIChudWxsIGFsbG93ZWQpOlxuICAgICAgICAgIDxzcGFuICBjbGFzcz1cIm51bGxhYmxlXCI+XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiIG5nLW9wdGlvbnM9XCJjb2xvci5uYW1lIGZvciBjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPi0tIGNob29zZSBjb2xvciAtLTwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9zcGFuPjwvbGFiZWw+PGJyLz5cblxuICAgICAgICAgIDxsYWJlbD5Db2xvciBncm91cGVkIGJ5IHNoYWRlOlxuICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm15Q29sb3JcIiBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBncm91cCBieSBjb2xvci5zaGFkZSBmb3IgY29sb3IgaW4gY29sb3JzXCI+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2xhYmVsPjxici8+XG5cbiAgICAgICAgICA8bGFiZWw+Q29sb3IgZ3JvdXBlZCBieSBzaGFkZSwgd2l0aCBzb21lIGRpc2FibGVkOlxuICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm15Q29sb3JcIlxuICAgICAgICAgICAgICAgICAgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZ3JvdXAgYnkgY29sb3Iuc2hhZGUgZGlzYWJsZSB3aGVuIGNvbG9yLm5vdEFuT3B0aW9uIGZvciBjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+PGJyLz5cblxuXG5cbiAgICAgICAgICBTZWxlY3QgPGJ1dHRvbiBuZy1jbGljaz1cIm15Q29sb3IgPSB7IG5hbWU6J25vdCBpbiBsaXN0Jywgc2hhZGU6ICdvdGhlcicgfVwiPmJvZ3VzPC9idXR0b24+LlxuICAgICAgICAgIDxici8+XG4gICAgICAgICAgPGhyLz5cbiAgICAgICAgICBDdXJyZW50bHkgc2VsZWN0ZWQ6IHt7IHtzZWxlY3RlZF9jb2xvcjpteUNvbG9yfSB9fVxuICAgICAgICAgIDxkaXYgc3R5bGU9XCJib3JkZXI6c29saWQgMXB4IGJsYWNrOyBoZWlnaHQ6MjBweFwiXG4gICAgICAgICAgICAgICBuZy1zdHlsZT1cInsnYmFja2dyb3VuZC1jb2xvcic6bXlDb2xvci5uYW1lfVwiPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctb3B0aW9ucycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdyZWQnKTtcbiAgICAgICAgICAgZWxlbWVudC5hbGwoYnkubW9kZWwoJ215Q29sb3InKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICBlbGVtZW50LmFsbChieS5jc3MoJ3NlbGVjdFtuZy1tb2RlbD1cIm15Q29sb3JcIl0gb3B0aW9uJykpLmZpcnN0KCkuY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygne3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9JykpLmdldFRleHQoKSkudG9NYXRjaCgnYmxhY2snKTtcbiAgICAgICAgICAgZWxlbWVudChieS5jc3MoJy5udWxsYWJsZSBzZWxlY3RbbmctbW9kZWw9XCJteUNvbG9yXCJdJykpLmNsaWNrKCk7XG4gICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LmNzcygnLm51bGxhYmxlIHNlbGVjdFtuZy1tb2RlbD1cIm15Q29sb3JcIl0gb3B0aW9uJykpLmZpcnN0KCkuY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygne3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9JykpLmdldFRleHQoKSkudG9NYXRjaCgnbnVsbCcpO1xuICAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG5cbi8vIGpzaGludCBtYXhsZW46IGZhbHNlXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vMDAwMDExMTExMTExMTEwMDAwMDAwMDAwMDIyMjIyMjIyMjIwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMzMzMzMzMzMzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQ0NDQ0NDQ0NDQ0MDAwMDAwMDAwMDAwMDU1NTU1NTU1NTU1NTU1NTAwMDAwMDAwMDY2NjY2NjY2NjY2NjY2NjAwMDAwMDA3Nzc3Nzc3Nzc3Nzc3NzcwMDAwMDAwMDAwMDAwMDA4ODg4ODg4ODg4MDAwMDAwMDAwMDAwMDAwMDAwMDk5OTk5OTk5OTlcbnZhciBOR19PUFRJT05TX1JFR0VYUCA9IC9eXFxzKihbXFxzXFxTXSs/KSg/Olxccythc1xccysoW1xcc1xcU10rPykpPyg/Olxccytncm91cFxccytieVxccysoW1xcc1xcU10rPykpPyg/OlxccytkaXNhYmxlXFxzK3doZW5cXHMrKFtcXHNcXFNdKz8pKT9cXHMrZm9yXFxzKyg/OihbXFwkXFx3XVtcXCRcXHddKil8KD86XFwoXFxzKihbXFwkXFx3XVtcXCRcXHddKilcXHMqLFxccyooW1xcJFxcd11bXFwkXFx3XSopXFxzKlxcKSkpXFxzK2luXFxzKyhbXFxzXFxTXSs/KSg/Olxccyt0cmFja1xccytieVxccysoW1xcc1xcU10rPykpPyQvO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMTogdmFsdWUgZXhwcmVzc2lvbiAodmFsdWVGbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDI6IGxhYmVsIGV4cHJlc3Npb24gKGRpc3BsYXlGbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDM6IGdyb3VwIGJ5IGV4cHJlc3Npb24gKGdyb3VwQnlGbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDQ6IGRpc2FibGUgd2hlbiBleHByZXNzaW9uIChkaXNhYmxlV2hlbkZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNTogYXJyYXkgaXRlbSB2YXJpYWJsZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA2OiBvYmplY3QgaXRlbSBrZXkgdmFyaWFibGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNzogb2JqZWN0IGl0ZW0gdmFsdWUgdmFyaWFibGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gODogY29sbGVjdGlvbiBleHByZXNzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA5OiB0cmFjayBieSBleHByZXNzaW9uXG4vLyBqc2hpbnQgbWF4bGVuOiAxMDBcblxuXG52YXIgbmdPcHRpb25zRGlyZWN0aXZlID0gWyckY29tcGlsZScsICckcGFyc2UnLCBmdW5jdGlvbigkY29tcGlsZSwgJHBhcnNlKSB7XG5cbiAgZnVuY3Rpb24gcGFyc2VPcHRpb25zRXhwcmVzc2lvbihvcHRpb25zRXhwLCBzZWxlY3RFbGVtZW50LCBzY29wZSkge1xuXG4gICAgdmFyIG1hdGNoID0gb3B0aW9uc0V4cC5tYXRjaChOR19PUFRJT05TX1JFR0VYUCk7XG4gICAgaWYgKCEobWF0Y2gpKSB7XG4gICAgICB0aHJvdyBuZ09wdGlvbnNNaW5FcnIoJ2lleHAnLFxuICAgICAgICBcIkV4cGVjdGVkIGV4cHJlc3Npb24gaW4gZm9ybSBvZiBcIiArXG4gICAgICAgIFwiJ19zZWxlY3RfIChhcyBfbGFiZWxfKT8gZm9yIChfa2V5XywpP192YWx1ZV8gaW4gX2NvbGxlY3Rpb25fJ1wiICtcbiAgICAgICAgXCIgYnV0IGdvdCAnezB9Jy4gRWxlbWVudDogezF9XCIsXG4gICAgICAgIG9wdGlvbnNFeHAsIHN0YXJ0aW5nVGFnKHNlbGVjdEVsZW1lbnQpKTtcbiAgICB9XG5cbiAgICAvLyBFeHRyYWN0IHRoZSBwYXJ0cyBmcm9tIHRoZSBuZ09wdGlvbnMgZXhwcmVzc2lvblxuXG4gICAgLy8gVGhlIHZhcmlhYmxlIG5hbWUgZm9yIHRoZSB2YWx1ZSBvZiB0aGUgaXRlbSBpbiB0aGUgY29sbGVjdGlvblxuICAgIHZhciB2YWx1ZU5hbWUgPSBtYXRjaFs1XSB8fCBtYXRjaFs3XTtcbiAgICAvLyBUaGUgdmFyaWFibGUgbmFtZSBmb3IgdGhlIGtleSBvZiB0aGUgaXRlbSBpbiB0aGUgY29sbGVjdGlvblxuICAgIHZhciBrZXlOYW1lID0gbWF0Y2hbNl07XG5cbiAgICAvLyBBbiBleHByZXNzaW9uIHRoYXQgZ2VuZXJhdGVzIHRoZSB2aWV3VmFsdWUgZm9yIGFuIG9wdGlvbiBpZiB0aGVyZSBpcyBhIGxhYmVsIGV4cHJlc3Npb25cbiAgICB2YXIgc2VsZWN0QXMgPSAvIGFzIC8udGVzdChtYXRjaFswXSkgJiYgbWF0Y2hbMV07XG4gICAgLy8gQW4gZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgdG8gdHJhY2sgdGhlIGlkIG9mIGVhY2ggb2JqZWN0IGluIHRoZSBvcHRpb25zIGNvbGxlY3Rpb25cbiAgICB2YXIgdHJhY2tCeSA9IG1hdGNoWzldO1xuICAgIC8vIEFuIGV4cHJlc3Npb24gdGhhdCBnZW5lcmF0ZXMgdGhlIHZpZXdWYWx1ZSBmb3IgYW4gb3B0aW9uIGlmIHRoZXJlIGlzIG5vIGxhYmVsIGV4cHJlc3Npb25cbiAgICB2YXIgdmFsdWVGbiA9ICRwYXJzZShtYXRjaFsyXSA/IG1hdGNoWzFdIDogdmFsdWVOYW1lKTtcbiAgICB2YXIgc2VsZWN0QXNGbiA9IHNlbGVjdEFzICYmICRwYXJzZShzZWxlY3RBcyk7XG4gICAgdmFyIHZpZXdWYWx1ZUZuID0gc2VsZWN0QXNGbiB8fCB2YWx1ZUZuO1xuICAgIHZhciB0cmFja0J5Rm4gPSB0cmFja0J5ICYmICRwYXJzZSh0cmFja0J5KTtcblxuICAgIC8vIEdldCB0aGUgdmFsdWUgYnkgd2hpY2ggd2UgYXJlIGdvaW5nIHRvIHRyYWNrIHRoZSBvcHRpb25cbiAgICAvLyBpZiB3ZSBoYXZlIGEgdHJhY2tGbiB0aGVuIHVzZSB0aGF0IChwYXNzaW5nIHNjb3BlIGFuZCBsb2NhbHMpXG4gICAgLy8gb3RoZXJ3aXNlIGp1c3QgaGFzaCB0aGUgZ2l2ZW4gdmlld1ZhbHVlXG4gICAgdmFyIGdldFRyYWNrQnlWYWx1ZUZuID0gdHJhY2tCeSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSwgbG9jYWxzKSB7IHJldHVybiB0cmFja0J5Rm4oc2NvcGUsIGxvY2Fscyk7IH0gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0SGFzaE9mVmFsdWUodmFsdWUpIHsgcmV0dXJuIGhhc2hLZXkodmFsdWUpOyB9O1xuICAgIHZhciBnZXRUcmFja0J5VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXR1cm4gZ2V0VHJhY2tCeVZhbHVlRm4odmFsdWUsIGdldExvY2Fscyh2YWx1ZSwga2V5KSk7XG4gICAgfTtcblxuICAgIHZhciBkaXNwbGF5Rm4gPSAkcGFyc2UobWF0Y2hbMl0gfHwgbWF0Y2hbMV0pO1xuICAgIHZhciBncm91cEJ5Rm4gPSAkcGFyc2UobWF0Y2hbM10gfHwgJycpO1xuICAgIHZhciBkaXNhYmxlV2hlbkZuID0gJHBhcnNlKG1hdGNoWzRdIHx8ICcnKTtcbiAgICB2YXIgdmFsdWVzRm4gPSAkcGFyc2UobWF0Y2hbOF0pO1xuXG4gICAgdmFyIGxvY2FscyA9IHt9O1xuICAgIHZhciBnZXRMb2NhbHMgPSBrZXlOYW1lID8gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgbG9jYWxzW2tleU5hbWVdID0ga2V5O1xuICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBsb2NhbHM7XG4gICAgfSA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGxvY2FscztcbiAgICB9O1xuXG5cbiAgICBmdW5jdGlvbiBPcHRpb24oc2VsZWN0VmFsdWUsIHZpZXdWYWx1ZSwgbGFiZWwsIGdyb3VwLCBkaXNhYmxlZCkge1xuICAgICAgdGhpcy5zZWxlY3RWYWx1ZSA9IHNlbGVjdFZhbHVlO1xuICAgICAgdGhpcy52aWV3VmFsdWUgPSB2aWV3VmFsdWU7XG4gICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgICB0aGlzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0T3B0aW9uVmFsdWVzS2V5cyhvcHRpb25WYWx1ZXMpIHtcbiAgICAgIHZhciBvcHRpb25WYWx1ZXNLZXlzO1xuXG4gICAgICBpZiAoIWtleU5hbWUgJiYgaXNBcnJheUxpa2Uob3B0aW9uVmFsdWVzKSkge1xuICAgICAgICBvcHRpb25WYWx1ZXNLZXlzID0gb3B0aW9uVmFsdWVzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgb2JqZWN0LCBleHRyYWN0IGtleXMsIGluIGVudW1lcmF0aW9uIG9yZGVyLCB1bnNvcnRlZFxuICAgICAgICBvcHRpb25WYWx1ZXNLZXlzID0gW107XG4gICAgICAgIGZvciAodmFyIGl0ZW1LZXkgaW4gb3B0aW9uVmFsdWVzKSB7XG4gICAgICAgICAgaWYgKG9wdGlvblZhbHVlcy5oYXNPd25Qcm9wZXJ0eShpdGVtS2V5KSAmJiBpdGVtS2V5LmNoYXJBdCgwKSAhPT0gJyQnKSB7XG4gICAgICAgICAgICBvcHRpb25WYWx1ZXNLZXlzLnB1c2goaXRlbUtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb3B0aW9uVmFsdWVzS2V5cztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHJhY2tCeTogdHJhY2tCeSxcbiAgICAgIGdldFRyYWNrQnlWYWx1ZTogZ2V0VHJhY2tCeVZhbHVlLFxuICAgICAgZ2V0V2F0Y2hhYmxlczogJHBhcnNlKHZhbHVlc0ZuLCBmdW5jdGlvbihvcHRpb25WYWx1ZXMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgY29sbGVjdGlvbiBvZiB0aGluZ3MgdGhhdCB3ZSB3b3VsZCBsaWtlIHRvIHdhdGNoICh3YXRjaGVkQXJyYXkpXG4gICAgICAgIC8vIHNvIHRoYXQgdGhleSBjYW4gYWxsIGJlIHdhdGNoZWQgdXNpbmcgYSBzaW5nbGUgJHdhdGNoQ29sbGVjdGlvblxuICAgICAgICAvLyB0aGF0IG9ubHkgcnVucyB0aGUgaGFuZGxlciBvbmNlIGlmIGFueXRoaW5nIGNoYW5nZXNcbiAgICAgICAgdmFyIHdhdGNoZWRBcnJheSA9IFtdO1xuICAgICAgICBvcHRpb25WYWx1ZXMgPSBvcHRpb25WYWx1ZXMgfHwgW107XG5cbiAgICAgICAgdmFyIG9wdGlvblZhbHVlc0tleXMgPSBnZXRPcHRpb25WYWx1ZXNLZXlzKG9wdGlvblZhbHVlcyk7XG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXNMZW5ndGggPSBvcHRpb25WYWx1ZXNLZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG9wdGlvblZhbHVlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHZhciBrZXkgPSAob3B0aW9uVmFsdWVzID09PSBvcHRpb25WYWx1ZXNLZXlzKSA/IGluZGV4IDogb3B0aW9uVmFsdWVzS2V5c1tpbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb3B0aW9uVmFsdWVzW2tleV07XG5cbiAgICAgICAgICB2YXIgbG9jYWxzID0gZ2V0TG9jYWxzKG9wdGlvblZhbHVlc1trZXldLCBrZXkpO1xuICAgICAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IGdldFRyYWNrQnlWYWx1ZUZuKG9wdGlvblZhbHVlc1trZXldLCBsb2NhbHMpO1xuICAgICAgICAgIHdhdGNoZWRBcnJheS5wdXNoKHNlbGVjdFZhbHVlKTtcblxuICAgICAgICAgIC8vIE9ubHkgbmVlZCB0byB3YXRjaCB0aGUgZGlzcGxheUZuIGlmIHRoZXJlIGlzIGEgc3BlY2lmaWMgbGFiZWwgZXhwcmVzc2lvblxuICAgICAgICAgIGlmIChtYXRjaFsyXSB8fCBtYXRjaFsxXSkge1xuICAgICAgICAgICAgdmFyIGxhYmVsID0gZGlzcGxheUZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgd2F0Y2hlZEFycmF5LnB1c2gobGFiZWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE9ubHkgbmVlZCB0byB3YXRjaCB0aGUgZGlzYWJsZVdoZW5GbiBpZiB0aGVyZSBpcyBhIHNwZWNpZmljIGRpc2FibGUgZXhwcmVzc2lvblxuICAgICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgdmFyIGRpc2FibGVXaGVuID0gZGlzYWJsZVdoZW5GbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgIHdhdGNoZWRBcnJheS5wdXNoKGRpc2FibGVXaGVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdhdGNoZWRBcnJheTtcbiAgICAgIH0pLFxuXG4gICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgb3B0aW9uSXRlbXMgPSBbXTtcbiAgICAgICAgdmFyIHNlbGVjdFZhbHVlTWFwID0ge307XG5cbiAgICAgICAgLy8gVGhlIG9wdGlvbiB2YWx1ZXMgd2VyZSBhbHJlYWR5IGNvbXB1dGVkIGluIHRoZSBgZ2V0V2F0Y2hhYmxlc2AgZm4sXG4gICAgICAgIC8vIHdoaWNoIG11c3QgaGF2ZSBiZWVuIGNhbGxlZCB0byB0cmlnZ2VyIGBnZXRPcHRpb25zYFxuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzID0gdmFsdWVzRm4oc2NvcGUpIHx8IFtdO1xuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzS2V5cyA9IGdldE9wdGlvblZhbHVlc0tleXMob3B0aW9uVmFsdWVzKTtcbiAgICAgICAgdmFyIG9wdGlvblZhbHVlc0xlbmd0aCA9IG9wdGlvblZhbHVlc0tleXMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBvcHRpb25WYWx1ZXNMZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICB2YXIga2V5ID0gKG9wdGlvblZhbHVlcyA9PT0gb3B0aW9uVmFsdWVzS2V5cykgPyBpbmRleCA6IG9wdGlvblZhbHVlc0tleXNbaW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9wdGlvblZhbHVlc1trZXldO1xuICAgICAgICAgIHZhciBsb2NhbHMgPSBnZXRMb2NhbHModmFsdWUsIGtleSk7XG4gICAgICAgICAgdmFyIHZpZXdWYWx1ZSA9IHZpZXdWYWx1ZUZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IGdldFRyYWNrQnlWYWx1ZUZuKHZpZXdWYWx1ZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgbGFiZWwgPSBkaXNwbGF5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIGdyb3VwID0gZ3JvdXBCeUZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgIHZhciBkaXNhYmxlZCA9IGRpc2FibGVXaGVuRm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIG9wdGlvbkl0ZW0gPSBuZXcgT3B0aW9uKHNlbGVjdFZhbHVlLCB2aWV3VmFsdWUsIGxhYmVsLCBncm91cCwgZGlzYWJsZWQpO1xuXG4gICAgICAgICAgb3B0aW9uSXRlbXMucHVzaChvcHRpb25JdGVtKTtcbiAgICAgICAgICBzZWxlY3RWYWx1ZU1hcFtzZWxlY3RWYWx1ZV0gPSBvcHRpb25JdGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpdGVtczogb3B0aW9uSXRlbXMsXG4gICAgICAgICAgc2VsZWN0VmFsdWVNYXA6IHNlbGVjdFZhbHVlTWFwLFxuICAgICAgICAgIGdldE9wdGlvbkZyb21WaWV3VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0VmFsdWVNYXBbZ2V0VHJhY2tCeVZhbHVlKHZhbHVlKV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXRWaWV3VmFsdWVGcm9tT3B0aW9uOiBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSB2aWV3VmFsdWUgY291bGQgYmUgYW4gb2JqZWN0IHRoYXQgbWF5IGJlIG11dGF0ZWQgYnkgdGhlIGFwcGxpY2F0aW9uLFxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBtYWtlIGEgY29weSBhbmQgbm90IHJldHVybiB0aGUgcmVmZXJlbmNlIHRvIHRoZSB2YWx1ZSBvbiB0aGUgb3B0aW9uLlxuICAgICAgICAgICAgcmV0dXJuIHRyYWNrQnkgPyBhbmd1bGFyLmNvcHkob3B0aW9uLnZpZXdWYWx1ZSkgOiBvcHRpb24udmlld1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cblxuICAvLyB3ZSBjYW4ndCBqdXN0IGpxTGl0ZSgnPG9wdGlvbj4nKSBzaW5jZSBqcUxpdGUgaXMgbm90IHNtYXJ0IGVub3VnaFxuICAvLyB0byBjcmVhdGUgaXQgaW4gPHNlbGVjdD4gYW5kIElFIGJhcmZzIG90aGVyd2lzZS5cbiAgdmFyIG9wdGlvblRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyksXG4gICAgICBvcHRHcm91cFRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0Z3JvdXAnKTtcblxuXG4gICAgZnVuY3Rpb24gbmdPcHRpb25zUG9zdExpbmsoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG5cbiAgICAgIC8vIGlmIG5nTW9kZWwgaXMgbm90IGRlZmluZWQsIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmdcbiAgICAgIHZhciBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuICAgICAgaWYgKCFuZ01vZGVsQ3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgc2VsZWN0Q3RybCA9IGN0cmxzWzBdO1xuICAgICAgdmFyIG11bHRpcGxlID0gYXR0ci5tdWx0aXBsZTtcblxuICAgICAgLy8gVGhlIGVtcHR5T3B0aW9uIGFsbG93cyB0aGUgYXBwbGljYXRpb24gZGV2ZWxvcGVyIHRvIHByb3ZpZGUgdGhlaXIgb3duIGN1c3RvbSBcImVtcHR5XCJcbiAgICAgIC8vIG9wdGlvbiB3aGVuIHRoZSB2aWV3VmFsdWUgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb24gdmFsdWVzLlxuICAgICAgdmFyIGVtcHR5T3B0aW9uO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGNoaWxkcmVuID0gc2VsZWN0RWxlbWVudC5jaGlsZHJlbigpLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuW2ldLnZhbHVlID09PSAnJykge1xuICAgICAgICAgIGVtcHR5T3B0aW9uID0gY2hpbGRyZW4uZXEoaSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHByb3ZpZGVkRW1wdHlPcHRpb24gPSAhIWVtcHR5T3B0aW9uO1xuXG4gICAgICB2YXIgdW5rbm93bk9wdGlvbiA9IGpxTGl0ZShvcHRpb25UZW1wbGF0ZS5jbG9uZU5vZGUoZmFsc2UpKTtcbiAgICAgIHVua25vd25PcHRpb24udmFsKCc/Jyk7XG5cbiAgICAgIHZhciBvcHRpb25zO1xuICAgICAgdmFyIG5nT3B0aW9ucyA9IHBhcnNlT3B0aW9uc0V4cHJlc3Npb24oYXR0ci5uZ09wdGlvbnMsIHNlbGVjdEVsZW1lbnQsIHNjb3BlKTtcblxuXG4gICAgICB2YXIgcmVuZGVyRW1wdHlPcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFwcm92aWRlZEVtcHR5T3B0aW9uKSB7XG4gICAgICAgICAgc2VsZWN0RWxlbWVudC5wcmVwZW5kKGVtcHR5T3B0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxlY3RFbGVtZW50LnZhbCgnJyk7XG4gICAgICAgIGVtcHR5T3B0aW9uLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7IC8vIG5lZWRlZCBmb3IgSUVcbiAgICAgICAgZW1wdHlPcHRpb24uYXR0cignc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZW1vdmVFbXB0eU9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXByb3ZpZGVkRW1wdHlPcHRpb24pIHtcbiAgICAgICAgICBlbXB0eU9wdGlvbi5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuXG4gICAgICB2YXIgcmVuZGVyVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxlY3RFbGVtZW50LnByZXBlbmQodW5rbm93bk9wdGlvbik7XG4gICAgICAgIHNlbGVjdEVsZW1lbnQudmFsKCc/Jyk7XG4gICAgICAgIHVua25vd25PcHRpb24ucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTsgLy8gbmVlZGVkIGZvciBJRVxuICAgICAgICB1bmtub3duT3B0aW9uLmF0dHIoJ3NlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVtb3ZlVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB1bmtub3duT3B0aW9uLnJlbW92ZSgpO1xuICAgICAgfTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBjb250cm9sbGVyIG1ldGhvZHMgZm9yIG11bHRpcGxlIHNlbGVjdGFibGUgb3B0aW9uc1xuICAgICAgaWYgKCFtdWx0aXBsZSkge1xuXG4gICAgICAgIHNlbGVjdEN0cmwud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uIHdyaXRlTmdPcHRpb25zVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICB2YXIgb3B0aW9uID0gb3B0aW9ucy5nZXRPcHRpb25Gcm9tVmlld1ZhbHVlKHZhbHVlKTtcblxuICAgICAgICAgIGlmIChvcHRpb24gJiYgIW9wdGlvbi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdEVsZW1lbnRbMF0udmFsdWUgIT09IG9wdGlvbi5zZWxlY3RWYWx1ZSkge1xuICAgICAgICAgICAgICByZW1vdmVVbmtub3duT3B0aW9uKCk7XG4gICAgICAgICAgICAgIHJlbW92ZUVtcHR5T3B0aW9uKCk7XG5cbiAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudFswXS52YWx1ZSA9IG9wdGlvbi5zZWxlY3RWYWx1ZTtcbiAgICAgICAgICAgICAgb3B0aW9uLmVsZW1lbnQuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBvcHRpb24uZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBwcm92aWRlZEVtcHR5T3B0aW9uKSB7XG4gICAgICAgICAgICAgIHJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgICAgICAgICAgcmVuZGVyRW1wdHlPcHRpb24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlbW92ZUVtcHR5T3B0aW9uKCk7XG4gICAgICAgICAgICAgIHJlbmRlclVua25vd25PcHRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZWN0Q3RybC5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkTmdPcHRpb25zVmFsdWUoKSB7XG5cbiAgICAgICAgICB2YXIgc2VsZWN0ZWRPcHRpb24gPSBvcHRpb25zLnNlbGVjdFZhbHVlTWFwW3NlbGVjdEVsZW1lbnQudmFsKCldO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdGVkT3B0aW9uICYmICFzZWxlY3RlZE9wdGlvbi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmVtb3ZlRW1wdHlPcHRpb24oKTtcbiAgICAgICAgICAgIHJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmdldFZpZXdWYWx1ZUZyb21PcHRpb24oc2VsZWN0ZWRPcHRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJZiB3ZSBhcmUgdXNpbmcgYHRyYWNrIGJ5YCB0aGVuIHdlIG11c3Qgd2F0Y2ggdGhlIHRyYWNrZWQgdmFsdWUgb24gdGhlIG1vZGVsXG4gICAgICAgIC8vIHNpbmNlIG5nTW9kZWwgb25seSB3YXRjaGVzIGZvciBvYmplY3QgaWRlbnRpdHkgY2hhbmdlXG4gICAgICAgIGlmIChuZ09wdGlvbnMudHJhY2tCeSkge1xuICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gbmdPcHRpb25zLmdldFRyYWNrQnlWYWx1ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTsgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7IH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgbmdNb2RlbEN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiAhdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlID0gZnVuY3Rpb24gd3JpdGVOZ09wdGlvbnNNdWx0aXBsZSh2YWx1ZSkge1xuICAgICAgICAgIG9wdGlvbnMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICB2YXIgb3B0aW9uID0gb3B0aW9ucy5nZXRPcHRpb25Gcm9tVmlld1ZhbHVlKGl0ZW0pO1xuICAgICAgICAgICAgICBpZiAob3B0aW9uICYmICFvcHRpb24uZGlzYWJsZWQpIG9wdGlvbi5lbGVtZW50LnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuXG4gICAgICAgIHNlbGVjdEN0cmwucmVhZFZhbHVlID0gZnVuY3Rpb24gcmVhZE5nT3B0aW9uc011bHRpcGxlKCkge1xuICAgICAgICAgIHZhciBzZWxlY3RlZFZhbHVlcyA9IHNlbGVjdEVsZW1lbnQudmFsKCkgfHwgW10sXG4gICAgICAgICAgICAgIHNlbGVjdGlvbnMgPSBbXTtcblxuICAgICAgICAgIGZvckVhY2goc2VsZWN0ZWRWYWx1ZXMsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9uID0gb3B0aW9ucy5zZWxlY3RWYWx1ZU1hcFt2YWx1ZV07XG4gICAgICAgICAgICBpZiAob3B0aW9uICYmICFvcHRpb24uZGlzYWJsZWQpIHNlbGVjdGlvbnMucHVzaChvcHRpb25zLmdldFZpZXdWYWx1ZUZyb21PcHRpb24ob3B0aW9uKSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gc2VsZWN0aW9ucztcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJZiB3ZSBhcmUgdXNpbmcgYHRyYWNrIGJ5YCB0aGVuIHdlIG11c3Qgd2F0Y2ggdGhlc2UgdHJhY2tlZCB2YWx1ZXMgb24gdGhlIG1vZGVsXG4gICAgICAgIC8vIHNpbmNlIG5nTW9kZWwgb25seSB3YXRjaGVzIGZvciBvYmplY3QgaWRlbnRpdHkgY2hhbmdlXG4gICAgICAgIGlmIChuZ09wdGlvbnMudHJhY2tCeSkge1xuXG4gICAgICAgICAgc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZ09wdGlvbnMuZ2V0VHJhY2tCeVZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIGlmIChwcm92aWRlZEVtcHR5T3B0aW9uKSB7XG5cbiAgICAgICAgLy8gd2UgbmVlZCB0byByZW1vdmUgaXQgYmVmb3JlIGNhbGxpbmcgc2VsZWN0RWxlbWVudC5lbXB0eSgpIGJlY2F1c2Ugb3RoZXJ3aXNlIElFIHdpbGxcbiAgICAgICAgLy8gcmVtb3ZlIHRoZSBsYWJlbCBmcm9tIHRoZSBlbGVtZW50LiB3dGY/XG4gICAgICAgIGVtcHR5T3B0aW9uLnJlbW92ZSgpO1xuXG4gICAgICAgIC8vIGNvbXBpbGUgdGhlIGVsZW1lbnQgc2luY2UgdGhlcmUgbWlnaHQgYmUgYmluZGluZ3MgaW4gaXRcbiAgICAgICAgJGNvbXBpbGUoZW1wdHlPcHRpb24pKHNjb3BlKTtcblxuICAgICAgICAvLyByZW1vdmUgdGhlIGNsYXNzLCB3aGljaCBpcyBhZGRlZCBhdXRvbWF0aWNhbGx5IGJlY2F1c2Ugd2UgcmVjb21waWxlIHRoZSBlbGVtZW50IGFuZCBpdFxuICAgICAgICAvLyBiZWNvbWVzIHRoZSBjb21waWxhdGlvbiByb290XG4gICAgICAgIGVtcHR5T3B0aW9uLnJlbW92ZUNsYXNzKCduZy1zY29wZScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1wdHlPcHRpb24gPSBqcUxpdGUob3B0aW9uVGVtcGxhdGUuY2xvbmVOb2RlKGZhbHNlKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIG5lZWQgdG8gZG8gdGhpcyBoZXJlIHRvIGVuc3VyZSB0aGF0IHRoZSBvcHRpb25zIG9iamVjdCBpcyBkZWZpbmVkXG4gICAgICAvLyB3aGVuIHdlIGZpcnN0IGhpdCBpdCBpbiB3cml0ZU5nT3B0aW9uc1ZhbHVlXG4gICAgICB1cGRhdGVPcHRpb25zKCk7XG5cbiAgICAgIC8vIFdlIHdpbGwgcmUtcmVuZGVyIHRoZSBvcHRpb24gZWxlbWVudHMgaWYgdGhlIG9wdGlvbiB2YWx1ZXMgb3IgbGFiZWxzIGNoYW5nZVxuICAgICAgc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihuZ09wdGlvbnMuZ2V0V2F0Y2hhYmxlcywgdXBkYXRlT3B0aW9ucyk7XG5cbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbkVsZW1lbnQob3B0aW9uLCBlbGVtZW50KSB7XG4gICAgICAgIG9wdGlvbi5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgZWxlbWVudC5kaXNhYmxlZCA9IG9wdGlvbi5kaXNhYmxlZDtcbiAgICAgICAgLy8gTk9URTogVGhlIGxhYmVsIG11c3QgYmUgc2V0IGJlZm9yZSB0aGUgdmFsdWUsIG90aGVyd2lzZSBJRTEwLzExL0VER0UgY3JlYXRlIHVucmVzcG9uc2l2ZVxuICAgICAgICAvLyBzZWxlY3RzIGluIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcyB3aGVuIG11bHRpcGxlIHNlbGVjdHMgYXJlIG5leHQgdG8gZWFjaCBvdGhlciBhbmQgZGlzcGxheVxuICAgICAgICAvLyB0aGUgb3B0aW9uIGxpc3QgaW4gbGlzdGJveCBzdHlsZSwgaS5lLiB0aGUgc2VsZWN0IGlzIFttdWx0aXBsZV0sIG9yIHNwZWNpZmllcyBhIFtzaXplXS5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzExMzE0IGZvciBtb3JlIGluZm8uXG4gICAgICAgIC8vIFRoaXMgaXMgdW5mb3J0dW5hdGVseSB1bnRlc3RhYmxlIHdpdGggdW5pdCAvIGUyZSB0ZXN0c1xuICAgICAgICBpZiAob3B0aW9uLmxhYmVsICE9PSBlbGVtZW50LmxhYmVsKSB7XG4gICAgICAgICAgZWxlbWVudC5sYWJlbCA9IG9wdGlvbi5sYWJlbDtcbiAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gb3B0aW9uLmxhYmVsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb24udmFsdWUgIT09IGVsZW1lbnQudmFsdWUpIGVsZW1lbnQudmFsdWUgPSBvcHRpb24uc2VsZWN0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFkZE9yUmV1c2VFbGVtZW50KHBhcmVudCwgY3VycmVudCwgdHlwZSwgdGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAgIHZhciBlbGVtZW50O1xuICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHdlIGNhbiByZXVzZSB0aGUgbmV4dCBlbGVtZW50XG4gICAgICAgIGlmIChjdXJyZW50ICYmIGxvd2VyY2FzZShjdXJyZW50Lm5vZGVOYW1lKSA9PT0gdHlwZSkge1xuICAgICAgICAgIC8vIFRoZSBuZXh0IGVsZW1lbnQgaXMgdGhlIHJpZ2h0IHR5cGUgc28gcmV1c2UgaXRcbiAgICAgICAgICBlbGVtZW50ID0gY3VycmVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGUgbmV4dCBlbGVtZW50IGlzIG5vdCB0aGUgcmlnaHQgdHlwZSBzbyBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgICAgZWxlbWVudCA9IHRlbXBsYXRlRWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICAgIGlmICghY3VycmVudCkge1xuICAgICAgICAgICAgLy8gVGhlcmUgYXJlIG5vIG1vcmUgZWxlbWVudHMgc28ganVzdCBhcHBlbmQgaXQgdG8gdGhlIHNlbGVjdFxuICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGUgbmV4dCBlbGVtZW50IGlzIG5vdCBhIGdyb3VwIHNvIGluc2VydCB0aGUgbmV3IG9uZVxuICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShlbGVtZW50LCBjdXJyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9XG5cblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlRXhjZXNzRWxlbWVudHMoY3VycmVudCkge1xuICAgICAgICB2YXIgbmV4dDtcbiAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgICBuZXh0ID0gY3VycmVudC5uZXh0U2libGluZztcbiAgICAgICAgICBqcUxpdGVSZW1vdmUoY3VycmVudCk7XG4gICAgICAgICAgY3VycmVudCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICBmdW5jdGlvbiBza2lwRW1wdHlBbmRVbmtub3duT3B0aW9ucyhjdXJyZW50KSB7XG4gICAgICAgIHZhciBlbXB0eU9wdGlvbl8gPSBlbXB0eU9wdGlvbiAmJiBlbXB0eU9wdGlvblswXTtcbiAgICAgICAgdmFyIHVua25vd25PcHRpb25fID0gdW5rbm93bk9wdGlvbiAmJiB1bmtub3duT3B0aW9uWzBdO1xuXG4gICAgICAgIC8vIFdlIGNhbm5vdCByZWx5IG9uIHRoZSBleHRyYWN0ZWQgZW1wdHkgb3B0aW9uIGJlaW5nIHRoZSBzYW1lIGFzIHRoZSBjb21waWxlZCBlbXB0eSBvcHRpb24sXG4gICAgICAgIC8vIGJlY2F1c2UgdGhlIGNvbXBpbGVkIGVtcHR5IG9wdGlvbiBtaWdodCBoYXZlIGJlZW4gcmVwbGFjZWQgYnkgYSBjb21tZW50IGJlY2F1c2VcbiAgICAgICAgLy8gaXQgaGFkIGFuIFwiZWxlbWVudFwiIHRyYW5zY2x1c2lvbiBkaXJlY3RpdmUgb24gaXQgKHN1Y2ggYXMgbmdJZilcbiAgICAgICAgaWYgKGVtcHR5T3B0aW9uXyB8fCB1bmtub3duT3B0aW9uXykge1xuICAgICAgICAgIHdoaWxlIChjdXJyZW50ICYmXG4gICAgICAgICAgICAgICAgKGN1cnJlbnQgPT09IGVtcHR5T3B0aW9uXyB8fFxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPT09IHVua25vd25PcHRpb25fIHx8XG4gICAgICAgICAgICAgICAgY3VycmVudC5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0NPTU1FTlQgfHxcbiAgICAgICAgICAgICAgICBjdXJyZW50LnZhbHVlID09PSAnJykpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICAgIH1cblxuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKCkge1xuXG4gICAgICAgIHZhciBwcmV2aW91c1ZhbHVlID0gb3B0aW9ucyAmJiBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuXG4gICAgICAgIG9wdGlvbnMgPSBuZ09wdGlvbnMuZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgIHZhciBncm91cE1hcCA9IHt9O1xuICAgICAgICB2YXIgY3VycmVudEVsZW1lbnQgPSBzZWxlY3RFbGVtZW50WzBdLmZpcnN0Q2hpbGQ7XG5cbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIGVtcHR5IG9wdGlvbiBpcyBhbHdheXMgdGhlcmUgaWYgaXQgd2FzIGV4cGxpY2l0bHkgcHJvdmlkZWRcbiAgICAgICAgaWYgKHByb3ZpZGVkRW1wdHlPcHRpb24pIHtcbiAgICAgICAgICBzZWxlY3RFbGVtZW50LnByZXBlbmQoZW1wdHlPcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEVsZW1lbnQgPSBza2lwRW1wdHlBbmRVbmtub3duT3B0aW9ucyhjdXJyZW50RWxlbWVudCk7XG5cbiAgICAgICAgb3B0aW9ucy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbihvcHRpb24pIHtcbiAgICAgICAgICB2YXIgZ3JvdXA7XG4gICAgICAgICAgdmFyIGdyb3VwRWxlbWVudDtcbiAgICAgICAgICB2YXIgb3B0aW9uRWxlbWVudDtcblxuICAgICAgICAgIGlmIChvcHRpb24uZ3JvdXApIHtcblxuICAgICAgICAgICAgLy8gVGhpcyBvcHRpb24gaXMgdG8gbGl2ZSBpbiBhIGdyb3VwXG4gICAgICAgICAgICAvLyBTZWUgaWYgd2UgaGF2ZSBhbHJlYWR5IGNyZWF0ZWQgdGhpcyBncm91cFxuICAgICAgICAgICAgZ3JvdXAgPSBncm91cE1hcFtvcHRpb24uZ3JvdXBdO1xuXG4gICAgICAgICAgICBpZiAoIWdyb3VwKSB7XG5cbiAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBub3QgYWxyZWFkeSBjcmVhdGVkIHRoaXMgZ3JvdXBcbiAgICAgICAgICAgICAgZ3JvdXBFbGVtZW50ID0gYWRkT3JSZXVzZUVsZW1lbnQoc2VsZWN0RWxlbWVudFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcHRncm91cCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdEdyb3VwVGVtcGxhdGUpO1xuICAgICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGVsZW1lbnRcbiAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBncm91cEVsZW1lbnQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBsYWJlbCBvbiB0aGUgZ3JvdXAgZWxlbWVudFxuICAgICAgICAgICAgICBncm91cEVsZW1lbnQubGFiZWwgPSBvcHRpb24uZ3JvdXA7XG5cbiAgICAgICAgICAgICAgLy8gU3RvcmUgaXQgZm9yIHVzZSBsYXRlclxuICAgICAgICAgICAgICBncm91cCA9IGdyb3VwTWFwW29wdGlvbi5ncm91cF0gPSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBFbGVtZW50OiBncm91cEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgY3VycmVudE9wdGlvbkVsZW1lbnQ6IGdyb3VwRWxlbWVudC5maXJzdENoaWxkXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU28gbm93IHdlIGhhdmUgYSBncm91cCBmb3IgdGhpcyBvcHRpb24gd2UgYWRkIHRoZSBvcHRpb24gdG8gdGhlIGdyb3VwXG4gICAgICAgICAgICBvcHRpb25FbGVtZW50ID0gYWRkT3JSZXVzZUVsZW1lbnQoZ3JvdXAuZ3JvdXBFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmN1cnJlbnRPcHRpb25FbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvblRlbXBsYXRlKTtcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbkVsZW1lbnQob3B0aW9uLCBvcHRpb25FbGVtZW50KTtcbiAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgZWxlbWVudFxuICAgICAgICAgICAgZ3JvdXAuY3VycmVudE9wdGlvbkVsZW1lbnQgPSBvcHRpb25FbGVtZW50Lm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgLy8gVGhpcyBvcHRpb24gaXMgbm90IGluIGEgZ3JvdXBcbiAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQgPSBhZGRPclJldXNlRWxlbWVudChzZWxlY3RFbGVtZW50WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvblRlbXBsYXRlKTtcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbkVsZW1lbnQob3B0aW9uLCBvcHRpb25FbGVtZW50KTtcbiAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgZWxlbWVudFxuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBvcHRpb25FbGVtZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICAvLyBOb3cgcmVtb3ZlIGFsbCBleGNlc3Mgb3B0aW9ucyBhbmQgZ3JvdXBcbiAgICAgICAgT2JqZWN0LmtleXMoZ3JvdXBNYXApLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmVtb3ZlRXhjZXNzRWxlbWVudHMoZ3JvdXBNYXBba2V5XS5jdXJyZW50T3B0aW9uRWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZW1vdmVFeGNlc3NFbGVtZW50cyhjdXJyZW50RWxlbWVudCk7XG5cbiAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuXG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQgZHVlIHRvIHRoZSB1cGRhdGUgdG8gdGhlIG9wdGlvbnNcbiAgICAgICAgaWYgKCFuZ01vZGVsQ3RybC4kaXNFbXB0eShwcmV2aW91c1ZhbHVlKSkge1xuICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuICAgICAgICAgIGlmIChuZ09wdGlvbnMudHJhY2tCeSA/ICFlcXVhbHMocHJldmlvdXNWYWx1ZSwgbmV4dFZhbHVlKSA6IHByZXZpb3VzVmFsdWUgIT09IG5leHRWYWx1ZSkge1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShuZXh0VmFsdWUpO1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgcmVxdWlyZTogWydzZWxlY3QnLCAnP25nTW9kZWwnXSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uIG5nT3B0aW9uc1ByZUxpbmsoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgIC8vIERlYWN0aXZhdGUgdGhlIFNlbGVjdENvbnRyb2xsZXIucmVnaXN0ZXIgbWV0aG9kIHRvIHByZXZlbnRcbiAgICAgICAgLy8gb3B0aW9uIGRpcmVjdGl2ZXMgZnJvbSBhY2NpZGVudGFsbHkgcmVnaXN0ZXJpbmcgdGhlbXNlbHZlc1xuICAgICAgICAvLyAoYW5kIHVud2FudGVkICRkZXN0cm95IGhhbmRsZXJzIGV0Yy4pXG4gICAgICAgIGN0cmxzWzBdLnJlZ2lzdGVyT3B0aW9uID0gbm9vcDtcbiAgICAgIH0sXG4gICAgICBwb3N0OiBuZ09wdGlvbnNQb3N0TGlua1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUGx1cmFsaXplXG4gKiBAcmVzdHJpY3QgRUFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGBuZ1BsdXJhbGl6ZWAgaXMgYSBkaXJlY3RpdmUgdGhhdCBkaXNwbGF5cyBtZXNzYWdlcyBhY2NvcmRpbmcgdG8gZW4tVVMgbG9jYWxpemF0aW9uIHJ1bGVzLlxuICogVGhlc2UgcnVsZXMgYXJlIGJ1bmRsZWQgd2l0aCBhbmd1bGFyLmpzLCBidXQgY2FuIGJlIG92ZXJyaWRkZW5cbiAqIChzZWUge0BsaW5rIGd1aWRlL2kxOG4gQW5ndWxhciBpMThufSBkZXYgZ3VpZGUpLiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGRpcmVjdGl2ZVxuICogYnkgc3BlY2lmeWluZyB0aGUgbWFwcGluZ3MgYmV0d2VlblxuICogW3BsdXJhbCBjYXRlZ29yaWVzXShodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwpXG4gKiBhbmQgdGhlIHN0cmluZ3MgdG8gYmUgZGlzcGxheWVkLlxuICpcbiAqICMgUGx1cmFsIGNhdGVnb3JpZXMgYW5kIGV4cGxpY2l0IG51bWJlciBydWxlc1xuICogVGhlcmUgYXJlIHR3b1xuICogW3BsdXJhbCBjYXRlZ29yaWVzXShodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwpXG4gKiBpbiBBbmd1bGFyJ3MgZGVmYXVsdCBlbi1VUyBsb2NhbGU6IFwib25lXCIgYW5kIFwib3RoZXJcIi5cbiAqXG4gKiBXaGlsZSBhIHBsdXJhbCBjYXRlZ29yeSBtYXkgbWF0Y2ggbWFueSBudW1iZXJzIChmb3IgZXhhbXBsZSwgaW4gZW4tVVMgbG9jYWxlLCBcIm90aGVyXCIgY2FuIG1hdGNoXG4gKiBhbnkgbnVtYmVyIHRoYXQgaXMgbm90IDEpLCBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBjYW4gb25seSBtYXRjaCBvbmUgbnVtYmVyLiBGb3IgZXhhbXBsZSwgdGhlXG4gKiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3IgXCIzXCIgbWF0Y2hlcyB0aGUgbnVtYmVyIDMuIFRoZXJlIGFyZSBleGFtcGxlcyBvZiBwbHVyYWwgY2F0ZWdvcmllc1xuICogYW5kIGV4cGxpY2l0IG51bWJlciBydWxlcyB0aHJvdWdob3V0IHRoZSByZXN0IG9mIHRoaXMgZG9jdW1lbnRhdGlvbi5cbiAqXG4gKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplXG4gKiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGJ5IHByb3ZpZGluZyAyIGF0dHJpYnV0ZXM6IGBjb3VudGAgYW5kIGB3aGVuYC5cbiAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGF0dHJpYnV0ZSwgYG9mZnNldGAuXG4gKlxuICogVGhlIHZhbHVlIG9mIHRoZSBgY291bnRgIGF0dHJpYnV0ZSBjYW4gYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uXG4gKiBBbmd1bGFyIGV4cHJlc3Npb259OyB0aGVzZSBhcmUgZXZhbHVhdGVkIG9uIHRoZSBjdXJyZW50IHNjb3BlIGZvciBpdHMgYm91bmQgdmFsdWUuXG4gKlxuICogVGhlIGB3aGVuYCBhdHRyaWJ1dGUgc3BlY2lmaWVzIHRoZSBtYXBwaW5ncyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yaWVzIGFuZCB0aGUgYWN0dWFsXG4gKiBzdHJpbmcgdG8gYmUgZGlzcGxheWVkLiBUaGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBzaG91bGQgYmUgYSBKU09OIG9iamVjdC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIlxuICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7fSBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAqIDwvbmctcGx1cmFsaXplPlxuICpgYGBcbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSwgYFwiMDogTm9ib2R5IGlzIHZpZXdpbmcuXCJgIGlzIGFuIGV4cGxpY2l0IG51bWJlciBydWxlLiBJZiB5b3UgZGlkIG5vdFxuICogc3BlY2lmeSB0aGlzIHJ1bGUsIDAgd291bGQgYmUgbWF0Y2hlZCB0byB0aGUgXCJvdGhlclwiIGNhdGVnb3J5IGFuZCBcIjAgcGVvcGxlIGFyZSB2aWV3aW5nXCJcbiAqIHdvdWxkIGJlIHNob3duIGluc3RlYWQgb2YgXCJOb2JvZHkgaXMgdmlld2luZ1wiLiBZb3UgY2FuIHNwZWNpZnkgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUgZm9yXG4gKiBvdGhlciBudW1iZXJzLCBmb3IgZXhhbXBsZSAxMiwgc28gdGhhdCBpbnN0ZWFkIG9mIHNob3dpbmcgXCIxMiBwZW9wbGUgYXJlIHZpZXdpbmdcIiwgeW91IGNhblxuICogc2hvdyBcImEgZG96ZW4gcGVvcGxlIGFyZSB2aWV3aW5nXCIuXG4gKlxuICogWW91IGNhbiB1c2UgYSBzZXQgb2YgY2xvc2VkIGJyYWNlcyAoYHt9YCkgYXMgYSBwbGFjZWhvbGRlciBmb3IgdGhlIG51bWJlciB0aGF0IHlvdSB3YW50IHN1YnN0aXR1dGVkXG4gKiBpbnRvIHBsdXJhbGl6ZWQgc3RyaW5ncy4gSW4gdGhlIHByZXZpb3VzIGV4YW1wbGUsIEFuZ3VsYXIgd2lsbCByZXBsYWNlIGB7fWAgd2l0aFxuICogPHNwYW4gbmctbm9uLWJpbmRhYmxlPmB7e3BlcnNvbkNvdW50fX1gPC9zcGFuPi4gVGhlIGNsb3NlZCBicmFjZXMgYHt9YCBpcyBhIHBsYWNlaG9sZGVyXG4gKiBmb3IgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7bnVtYmVyRXhwcmVzc2lvbn19PC9zcGFuPi5cbiAqXG4gKiBJZiBubyBydWxlIGlzIGRlZmluZWQgZm9yIGEgY2F0ZWdvcnksIHRoZW4gYW4gZW1wdHkgc3RyaW5nIGlzIGRpc3BsYXllZCBhbmQgYSB3YXJuaW5nIGlzIGdlbmVyYXRlZC5cbiAqIE5vdGUgdGhhdCBzb21lIGxvY2FsZXMgZGVmaW5lIG1vcmUgY2F0ZWdvcmllcyB0aGFuIGBvbmVgIGFuZCBgb3RoZXJgLiBGb3IgZXhhbXBsZSwgZnItZnIgZGVmaW5lcyBgZmV3YCBhbmQgYG1hbnlgLlxuICpcbiAqICMgQ29uZmlndXJpbmcgbmdQbHVyYWxpemUgd2l0aCBvZmZzZXRcbiAqIFRoZSBgb2Zmc2V0YCBhdHRyaWJ1dGUgYWxsb3dzIGZ1cnRoZXIgY3VzdG9taXphdGlvbiBvZiBwbHVyYWxpemVkIHRleHQsIHdoaWNoIGNhbiByZXN1bHQgaW5cbiAqIGEgYmV0dGVyIHVzZXIgZXhwZXJpZW5jZS4gRm9yIGV4YW1wbGUsIGluc3RlYWQgb2YgdGhlIG1lc3NhZ2UgXCI0IHBlb3BsZSBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50XCIsXG4gKiB5b3UgbWlnaHQgZGlzcGxheSBcIkpvaG4sIEthdGUgYW5kIDIgb3RoZXJzIGFyZSB2aWV3aW5nIHRoaXMgZG9jdW1lbnRcIi5cbiAqIFRoZSBvZmZzZXQgYXR0cmlidXRlIGFsbG93cyB5b3UgdG8gb2Zmc2V0IGEgbnVtYmVyIGJ5IGFueSBkZXNpcmVkIHZhbHVlLlxuICogTGV0J3MgdGFrZSBhIGxvb2sgYXQgYW4gZXhhbXBsZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIiBvZmZzZXQ9MlxuICogICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnMSc6ICd7e3BlcnNvbjF9fSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnMic6ICd7e3BlcnNvbjF9fSBhbmQge3twZXJzb24yfX0gYXJlIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCB7fSBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAqIDwvbmctcGx1cmFsaXplPlxuICogYGBgXG4gKlxuICogTm90aWNlIHRoYXQgd2UgYXJlIHN0aWxsIHVzaW5nIHR3byBwbHVyYWwgY2F0ZWdvcmllcyhvbmUsIG90aGVyKSwgYnV0IHdlIGFkZGVkXG4gKiB0aHJlZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgMCwgMSBhbmQgMi5cbiAqIFdoZW4gb25lIHBlcnNvbiwgcGVyaGFwcyBKb2huLCB2aWV3cyB0aGUgZG9jdW1lbnQsIFwiSm9obiBpcyB2aWV3aW5nXCIgd2lsbCBiZSBzaG93bi5cbiAqIFdoZW4gdGhyZWUgcGVvcGxlIHZpZXcgdGhlIGRvY3VtZW50LCBubyBleHBsaWNpdCBudW1iZXIgcnVsZSBpcyBmb3VuZCwgc29cbiAqIGFuIG9mZnNldCBvZiAyIGlzIHRha2VuIG9mZiAzLCBhbmQgQW5ndWxhciB1c2VzIDEgdG8gZGVjaWRlIHRoZSBwbHVyYWwgY2F0ZWdvcnkuXG4gKiBJbiB0aGlzIGNhc2UsIHBsdXJhbCBjYXRlZ29yeSAnb25lJyBpcyBtYXRjaGVkIGFuZCBcIkpvaG4sIE1hcnkgYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmdcIlxuICogaXMgc2hvd24uXG4gKlxuICogTm90ZSB0aGF0IHdoZW4geW91IHNwZWNpZnkgb2Zmc2V0cywgeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yXG4gKiBudW1iZXJzIGZyb20gMCB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBvZmZzZXQuIElmIHlvdSB1c2UgYW4gb2Zmc2V0IG9mIDMsIGZvciBleGFtcGxlLFxuICogeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yIDAsIDEsIDIgYW5kIDMuIFlvdSBtdXN0IGFsc28gcHJvdmlkZSBwbHVyYWwgc3RyaW5ncyBmb3JcbiAqIHBsdXJhbCBjYXRlZ29yaWVzIFwib25lXCIgYW5kIFwib3RoZXJcIi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xleHByZXNzaW9ufSBjb3VudCBUaGUgdmFyaWFibGUgdG8gYmUgYm91bmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ30gd2hlbiBUaGUgbWFwcGluZyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yeSB0byBpdHMgY29ycmVzcG9uZGluZyBzdHJpbmdzLlxuICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIGRlZHVjdCBmcm9tIHRoZSB0b3RhbCBudW1iZXIuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJwbHVyYWxpemVFeGFtcGxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdwbHVyYWxpemVFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUucGVyc29uMSA9ICdJZ29yJztcbiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjIgPSAnTWlza28nO1xuICAgICAgICAgICAgICAkc2NvcGUucGVyc29uQ291bnQgPSAxO1xuICAgICAgICAgICAgfV0pO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICA8bGFiZWw+UGVyc29uIDE6PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJwZXJzb24xXCIgdmFsdWU9XCJJZ29yXCIgLz48L2xhYmVsPjxici8+XG4gICAgICAgICAgPGxhYmVsPlBlcnNvbiAyOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uMlwiIHZhbHVlPVwiTWlza29cIiAvPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgICA8bGFiZWw+TnVtYmVyIG9mIFBlb3BsZTo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbkNvdW50XCIgdmFsdWU9XCIxXCIgLz48L2xhYmVsPjxici8+XG5cbiAgICAgICAgICA8IS0tLSBFeGFtcGxlIHdpdGggc2ltcGxlIHBsdXJhbGl6YXRpb24gcnVsZXMgZm9yIGVuIGxvY2FsZSAtLS0+XG4gICAgICAgICAgV2l0aG91dCBPZmZzZXQ6XG4gICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne30gcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gICAgICAgICAgPC9uZy1wbHVyYWxpemU+PGJyPlxuXG4gICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIG9mZnNldCAtLS0+XG4gICAgICAgICAgV2l0aCBPZmZzZXQoMik6XG4gICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCIgb2Zmc2V0PTJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMSc6ICd7e3BlcnNvbjF9fSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCB7fSBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAgICAgICAgICA8L25nLXBsdXJhbGl6ZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgc2hvdyBjb3JyZWN0IHBsdXJhbGl6ZWQgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHdpdGhvdXRPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMCk7XG4gICAgICAgICAgdmFyIHdpdGhPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMSk7XG4gICAgICAgICAgdmFyIGNvdW50SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb25Db3VudCcpKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMSBwZXJzb24gaXMgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IgaXMgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCcwJyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ05vYm9keSBpcyB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnTm9ib2R5IGlzIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMicpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCcyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IgYW5kIE1pc2tvIGFyZSB2aWV3aW5nLicpO1xuXG4gICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzMnKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMyBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yLCBNaXNrbyBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCc0Jyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzQgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciwgTWlza28gYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGRhdGEtYm91bmQgbmFtZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgd2l0aE9mZnNldCA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnbmctcGx1cmFsaXplJykpLmdldCgxKTtcbiAgICAgICAgICB2YXIgcGVyc29uQ291bnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb25Db3VudCcpKTtcbiAgICAgICAgICB2YXIgcGVyc29uMSA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbjEnKSk7XG4gICAgICAgICAgdmFyIHBlcnNvbjIgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb24yJykpO1xuICAgICAgICAgIHBlcnNvbkNvdW50LmNsZWFyKCk7XG4gICAgICAgICAgcGVyc29uQ291bnQuc2VuZEtleXMoJzQnKTtcbiAgICAgICAgICBwZXJzb24xLmNsZWFyKCk7XG4gICAgICAgICAgcGVyc29uMS5zZW5kS2V5cygnRGknKTtcbiAgICAgICAgICBwZXJzb24yLmNsZWFyKCk7XG4gICAgICAgICAgcGVyc29uMi5zZW5kS2V5cygnVm9qdGEnKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0RpLCBWb2p0YSBhbmQgMiBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nUGx1cmFsaXplRGlyZWN0aXZlID0gWyckbG9jYWxlJywgJyRpbnRlcnBvbGF0ZScsICckbG9nJywgZnVuY3Rpb24oJGxvY2FsZSwgJGludGVycG9sYXRlLCAkbG9nKSB7XG4gIHZhciBCUkFDRSA9IC97fS9nLFxuICAgICAgSVNfV0hFTiA9IC9ed2hlbihNaW51cyk/KC4rKSQvO1xuXG4gIHJldHVybiB7XG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHZhciBudW1iZXJFeHAgPSBhdHRyLmNvdW50LFxuICAgICAgICAgIHdoZW5FeHAgPSBhdHRyLiRhdHRyLndoZW4gJiYgZWxlbWVudC5hdHRyKGF0dHIuJGF0dHIud2hlbiksIC8vIHdlIGhhdmUge3t9fSBpbiBhdHRyc1xuICAgICAgICAgIG9mZnNldCA9IGF0dHIub2Zmc2V0IHx8IDAsXG4gICAgICAgICAgd2hlbnMgPSBzY29wZS4kZXZhbCh3aGVuRXhwKSB8fCB7fSxcbiAgICAgICAgICB3aGVuc0V4cEZucyA9IHt9LFxuICAgICAgICAgIHN0YXJ0U3ltYm9sID0gJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCksXG4gICAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLFxuICAgICAgICAgIGJyYWNlUmVwbGFjZW1lbnQgPSBzdGFydFN5bWJvbCArIG51bWJlckV4cCArICctJyArIG9mZnNldCArIGVuZFN5bWJvbCxcbiAgICAgICAgICB3YXRjaFJlbW92ZXIgPSBhbmd1bGFyLm5vb3AsXG4gICAgICAgICAgbGFzdENvdW50O1xuXG4gICAgICBmb3JFYWNoKGF0dHIsIGZ1bmN0aW9uKGV4cHJlc3Npb24sIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgdmFyIHRtcE1hdGNoID0gSVNfV0hFTi5leGVjKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICBpZiAodG1wTWF0Y2gpIHtcbiAgICAgICAgICB2YXIgd2hlbktleSA9ICh0bXBNYXRjaFsxXSA/ICctJyA6ICcnKSArIGxvd2VyY2FzZSh0bXBNYXRjaFsyXSk7XG4gICAgICAgICAgd2hlbnNbd2hlbktleV0gPSBlbGVtZW50LmF0dHIoYXR0ci4kYXR0clthdHRyaWJ1dGVOYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZm9yRWFjaCh3aGVucywgZnVuY3Rpb24oZXhwcmVzc2lvbiwga2V5KSB7XG4gICAgICAgIHdoZW5zRXhwRm5zW2tleV0gPSAkaW50ZXJwb2xhdGUoZXhwcmVzc2lvbi5yZXBsYWNlKEJSQUNFLCBicmFjZVJlcGxhY2VtZW50KSk7XG5cbiAgICAgIH0pO1xuXG4gICAgICBzY29wZS4kd2F0Y2gobnVtYmVyRXhwLCBmdW5jdGlvbiBuZ1BsdXJhbGl6ZVdhdGNoQWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICB2YXIgY291bnQgPSBwYXJzZUZsb2F0KG5ld1ZhbCk7XG4gICAgICAgIHZhciBjb3VudElzTmFOID0gaXNOYU4oY291bnQpO1xuXG4gICAgICAgIGlmICghY291bnRJc05hTiAmJiAhKGNvdW50IGluIHdoZW5zKSkge1xuICAgICAgICAgIC8vIElmIGFuIGV4cGxpY2l0IG51bWJlciBydWxlIHN1Y2ggYXMgMSwgMiwgMy4uLiBpcyBkZWZpbmVkLCBqdXN0IHVzZSBpdC5cbiAgICAgICAgICAvLyBPdGhlcndpc2UsIGNoZWNrIGl0IGFnYWluc3QgcGx1cmFsaXphdGlvbiBydWxlcyBpbiAkbG9jYWxlIHNlcnZpY2UuXG4gICAgICAgICAgY291bnQgPSAkbG9jYWxlLnBsdXJhbENhdChjb3VudCAtIG9mZnNldCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBib3RoIGBjb3VudGAgYW5kIGBsYXN0Q291bnRgIGFyZSBOYU4sIHdlIGRvbid0IG5lZWQgdG8gcmUtcmVnaXN0ZXIgYSB3YXRjaC5cbiAgICAgICAgLy8gSW4gSlMgYE5hTiAhPT0gTmFOYCwgc28gd2UgaGF2ZSB0byBleGxpY2l0bHkgY2hlY2suXG4gICAgICAgIGlmICgoY291bnQgIT09IGxhc3RDb3VudCkgJiYgIShjb3VudElzTmFOICYmIGlzTnVtYmVyKGxhc3RDb3VudCkgJiYgaXNOYU4obGFzdENvdW50KSkpIHtcbiAgICAgICAgICB3YXRjaFJlbW92ZXIoKTtcbiAgICAgICAgICB2YXIgd2hlbkV4cEZuID0gd2hlbnNFeHBGbnNbY291bnRdO1xuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh3aGVuRXhwRm4pKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgJGxvZy5kZWJ1ZyhcIm5nUGx1cmFsaXplOiBubyBydWxlIGRlZmluZWQgZm9yICdcIiArIGNvdW50ICsgXCInIGluIFwiICsgd2hlbkV4cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXRjaFJlbW92ZXIgPSBub29wO1xuICAgICAgICAgICAgdXBkYXRlRWxlbWVudFRleHQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2F0Y2hSZW1vdmVyID0gc2NvcGUuJHdhdGNoKHdoZW5FeHBGbiwgdXBkYXRlRWxlbWVudFRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0Q291bnQgPSBjb3VudDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnRUZXh0KG5ld1RleHQpIHtcbiAgICAgICAgZWxlbWVudC50ZXh0KG5ld1RleHQgfHwgJycpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUmVwZWF0XG4gKiBAbXVsdGlFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nUmVwZWF0YCBkaXJlY3RpdmUgaW5zdGFudGlhdGVzIGEgdGVtcGxhdGUgb25jZSBwZXIgaXRlbSBmcm9tIGEgY29sbGVjdGlvbi4gRWFjaCB0ZW1wbGF0ZVxuICogaW5zdGFuY2UgZ2V0cyBpdHMgb3duIHNjb3BlLCB3aGVyZSB0aGUgZ2l2ZW4gbG9vcCB2YXJpYWJsZSBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgY29sbGVjdGlvbiBpdGVtLFxuICogYW5kIGAkaW5kZXhgIGlzIHNldCB0byB0aGUgaXRlbSBpbmRleCBvciBrZXkuXG4gKlxuICogU3BlY2lhbCBwcm9wZXJ0aWVzIGFyZSBleHBvc2VkIG9uIHRoZSBsb2NhbCBzY29wZSBvZiBlYWNoIHRlbXBsYXRlIGluc3RhbmNlLCBpbmNsdWRpbmc6XG4gKlxuICogfCBWYXJpYWJsZSAgfCBUeXBlICAgICAgICAgICAgfCBEZXRhaWxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCBgJGluZGV4YCAgfCB7QHR5cGUgbnVtYmVyfSAgfCBpdGVyYXRvciBvZmZzZXQgb2YgdGhlIHJlcGVhdGVkIGVsZW1lbnQgKDAuLmxlbmd0aC0xKSAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBgJGZpcnN0YCAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGZpcnN0IGluIHRoZSBpdGVyYXRvci4gICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBgJG1pZGRsZWAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBsYXN0IGluIHRoZSBpdGVyYXRvci4gfFxuICogfCBgJGxhc3RgICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGxhc3QgaW4gdGhlIGl0ZXJhdG9yLiAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBgJGV2ZW5gICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSBpdGVyYXRvciBwb3NpdGlvbiBgJGluZGV4YCBpcyBldmVuIChvdGhlcndpc2UgZmFsc2UpLiAgICAgICAgICAgfFxuICogfCBgJG9kZGAgICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSBpdGVyYXRvciBwb3NpdGlvbiBgJGluZGV4YCBpcyBvZGQgKG90aGVyd2lzZSBmYWxzZSkuICAgICAgICAgICAgfFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAgIENyZWF0aW5nIGFsaWFzZXMgZm9yIHRoZXNlIHByb3BlcnRpZXMgaXMgcG9zc2libGUgd2l0aCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5pdCBgbmdJbml0YH0uXG4gKiAgIFRoaXMgbWF5IGJlIHVzZWZ1bCB3aGVuLCBmb3IgaW5zdGFuY2UsIG5lc3RpbmcgbmdSZXBlYXRzLlxuICogPC9kaXY+XG4gKlxuICpcbiAqICMgSXRlcmF0aW5nIG92ZXIgb2JqZWN0IHByb3BlcnRpZXNcbiAqXG4gKiBJdCBpcyBwb3NzaWJsZSB0byBnZXQgYG5nUmVwZWF0YCB0byBpdGVyYXRlIG92ZXIgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IHVzaW5nIHRoZSBmb2xsb3dpbmdcbiAqIHN5bnRheDpcbiAqXG4gKiBgYGBqc1xuICogPGRpdiBuZy1yZXBlYXQ9XCIoa2V5LCB2YWx1ZSkgaW4gbXlPYmpcIj4gLi4uIDwvZGl2PlxuICogYGBgXG4gKlxuICogWW91IG5lZWQgdG8gYmUgYXdhcmUgdGhhdCB0aGUgSmF2YVNjcmlwdCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IGRlZmluZSB0aGUgb3JkZXIgb2Yga2V5c1xuICogcmV0dXJuZWQgZm9yIGFuIG9iamVjdC4gKFRvIG1pdGlnYXRlIHRoaXMgaW4gQW5ndWxhciAxLjMgdGhlIGBuZ1JlcGVhdGAgZGlyZWN0aXZlXG4gKiB1c2VkIHRvIHNvcnQgdGhlIGtleXMgYWxwaGFiZXRpY2FsbHkuKVxuICpcbiAqIFZlcnNpb24gMS40IHJlbW92ZWQgdGhlIGFscGhhYmV0aWMgc29ydGluZy4gV2Ugbm93IHJlbHkgb24gdGhlIG9yZGVyIHJldHVybmVkIGJ5IHRoZSBicm93c2VyXG4gKiB3aGVuIHJ1bm5pbmcgYGZvciBrZXkgaW4gbXlPYmpgLiBJdCBzZWVtcyB0aGF0IGJyb3dzZXJzIGdlbmVyYWxseSBmb2xsb3cgdGhlIHN0cmF0ZWd5IG9mIHByb3ZpZGluZ1xuICoga2V5cyBpbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSB3ZXJlIGRlZmluZWQsIGFsdGhvdWdoIHRoZXJlIGFyZSBleGNlcHRpb25zIHdoZW4ga2V5cyBhcmUgZGVsZXRlZFxuICogYW5kIHJlaW5zdGF0ZWQuIFNlZSB0aGUgW01ETiBwYWdlIG9uIGBkZWxldGVgIGZvciBtb3JlIGluZm9dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9kZWxldGUjQ3Jvc3MtYnJvd3Nlcl9ub3RlcykuXG4gKlxuICogSWYgdGhpcyBpcyBub3QgZGVzaXJlZCwgdGhlIHJlY29tbWVuZGVkIHdvcmthcm91bmQgaXMgdG8gY29udmVydCB5b3VyIG9iamVjdCBpbnRvIGFuIGFycmF5XG4gKiB0aGF0IGlzIHNvcnRlZCBpbnRvIHRoZSBvcmRlciB0aGF0IHlvdSBwcmVmZXIgYmVmb3JlIHByb3ZpZGluZyBpdCB0byBgbmdSZXBlYXRgLiAgWW91IGNvdWxkXG4gKiBkbyB0aGlzIHdpdGggYSBmaWx0ZXIgc3VjaCBhcyBbdG9BcnJheUZpbHRlcl0oaHR0cDovL25nbW9kdWxlcy5vcmcvbW9kdWxlcy9hbmd1bGFyLXRvQXJyYXlGaWx0ZXIpXG4gKiBvciBpbXBsZW1lbnQgYSBgJHdhdGNoYCBvbiB0aGUgb2JqZWN0IHlvdXJzZWxmLlxuICpcbiAqXG4gKiAjIFRyYWNraW5nIGFuZCBEdXBsaWNhdGVzXG4gKlxuICogYG5nUmVwZWF0YCB1c2VzIHtAbGluayAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaENvbGxlY3Rpb24gJHdhdGNoQ29sbGVjdGlvbn0gdG8gZGV0ZWN0IGNoYW5nZXMgaW5cbiAqIHRoZSBjb2xsZWN0aW9uLiBXaGVuIGEgY2hhbmdlIGhhcHBlbnMsIG5nUmVwZWF0IHRoZW4gbWFrZXMgdGhlIGNvcnJlc3BvbmRpbmcgY2hhbmdlcyB0byB0aGUgRE9NOlxuICpcbiAqICogV2hlbiBhbiBpdGVtIGlzIGFkZGVkLCBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgdGVtcGxhdGUgaXMgYWRkZWQgdG8gdGhlIERPTS5cbiAqICogV2hlbiBhbiBpdGVtIGlzIHJlbW92ZWQsIGl0cyB0ZW1wbGF0ZSBpbnN0YW5jZSBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAqICogV2hlbiBpdGVtcyBhcmUgcmVvcmRlcmVkLCB0aGVpciByZXNwZWN0aXZlIHRlbXBsYXRlcyBhcmUgcmVvcmRlcmVkIGluIHRoZSBET00uXG4gKlxuICogVG8gbWluaW1pemUgY3JlYXRpb24gb2YgRE9NIGVsZW1lbnRzLCBgbmdSZXBlYXRgIHVzZXMgYSBmdW5jdGlvblxuICogdG8gXCJrZWVwIHRyYWNrXCIgb2YgYWxsIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIERPTSBlbGVtZW50cy5cbiAqIEZvciBleGFtcGxlLCBpZiBhbiBpdGVtIGlzIGFkZGVkIHRvIHRoZSBjb2xsZWN0aW9uLCBuZ1JlcGVhdCB3aWxsIGtub3cgdGhhdCBhbGwgb3RoZXIgaXRlbXNcbiAqIGFscmVhZHkgaGF2ZSBET00gZWxlbWVudHMsIGFuZCB3aWxsIG5vdCByZS1yZW5kZXIgdGhlbS5cbiAqXG4gKiBUaGUgZGVmYXVsdCB0cmFja2luZyBmdW5jdGlvbiAod2hpY2ggdHJhY2tzIGl0ZW1zIGJ5IHRoZWlyIGlkZW50aXR5KSBkb2VzIG5vdCBhbGxvd1xuICogZHVwbGljYXRlIGl0ZW1zIGluIGFycmF5cy4gVGhpcyBpcyBiZWNhdXNlIHdoZW4gdGhlcmUgYXJlIGR1cGxpY2F0ZXMsIGl0IGlzIG5vdCBwb3NzaWJsZVxuICogdG8gbWFpbnRhaW4gYSBvbmUtdG8tb25lIG1hcHBpbmcgYmV0d2VlbiBjb2xsZWN0aW9uIGl0ZW1zIGFuZCBET00gZWxlbWVudHMuXG4gKlxuICogSWYgeW91IGRvIG5lZWQgdG8gcmVwZWF0IGR1cGxpY2F0ZSBpdGVtcywgeW91IGNhbiBzdWJzdGl0dXRlIHRoZSBkZWZhdWx0IHRyYWNraW5nIGJlaGF2aW9yXG4gKiB3aXRoIHlvdXIgb3duIHVzaW5nIHRoZSBgdHJhY2sgYnlgIGV4cHJlc3Npb24uXG4gKlxuICogRm9yIGV4YW1wbGUsIHlvdSBtYXkgdHJhY2sgaXRlbXMgYnkgdGhlIGluZGV4IG9mIGVhY2ggaXRlbSBpbiB0aGUgY29sbGVjdGlvbiwgdXNpbmcgdGhlXG4gKiBzcGVjaWFsIHNjb3BlIHByb3BlcnR5IGAkaW5kZXhgOlxuICogYGBgaHRtbFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJuIGluIFs0MiwgNDIsIDQzLCA0M10gdHJhY2sgYnkgJGluZGV4XCI+XG4gKiAgICAgIHt7bn19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFlvdSBtYXkgYWxzbyB1c2UgYXJiaXRyYXJ5IGV4cHJlc3Npb25zIGluIGB0cmFjayBieWAsIGluY2x1ZGluZyByZWZlcmVuY2VzIHRvIGN1c3RvbSBmdW5jdGlvbnNcbiAqIG9uIHRoZSBzY29wZTpcbiAqIGBgYGh0bWxcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwibiBpbiBbNDIsIDQyLCA0MywgNDNdIHRyYWNrIGJ5IG15VHJhY2tpbmdGdW5jdGlvbihuKVwiPlxuICogICAgICB7e259fVxuICogICAgPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPlxuICogSWYgeW91IGFyZSB3b3JraW5nIHdpdGggb2JqZWN0cyB0aGF0IGhhdmUgYW4gaWRlbnRpZmllciBwcm9wZXJ0eSwgeW91IHNob3VsZCB0cmFja1xuICogYnkgdGhlIGlkZW50aWZpZXIgaW5zdGVhZCBvZiB0aGUgd2hvbGUgb2JqZWN0LiBTaG91bGQgeW91IHJlbG9hZCB5b3VyIGRhdGEgbGF0ZXIsIGBuZ1JlcGVhdGBcbiAqIHdpbGwgbm90IGhhdmUgdG8gcmVidWlsZCB0aGUgRE9NIGVsZW1lbnRzIGZvciBpdGVtcyBpdCBoYXMgYWxyZWFkeSByZW5kZXJlZCwgZXZlbiBpZiB0aGVcbiAqIEphdmFTY3JpcHQgb2JqZWN0cyBpbiB0aGUgY29sbGVjdGlvbiBoYXZlIGJlZW4gc3Vic3RpdHV0ZWQgZm9yIG5ldyBvbmVzLiBGb3IgbGFyZ2UgY29sbGVjdGlvbnMsXG4gKiB0aGlzIHNpZ25pZmluY2FudGx5IGltcHJvdmVzIHJlbmRlcmluZyBwZXJmb3JtYW5jZS4gSWYgeW91IGRvbid0IGhhdmUgYSB1bmlxdWUgaWRlbnRpZmllcixcbiAqIGB0cmFjayBieSAkaW5kZXhgIGNhbiBhbHNvIHByb3ZpZGUgYSBwZXJmb3JtYW5jZSBib29zdC5cbiAqIDwvZGl2PlxuICogYGBgaHRtbFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJtb2RlbCBpbiBjb2xsZWN0aW9uIHRyYWNrIGJ5IG1vZGVsLmlkXCI+XG4gKiAgICAgIHt7bW9kZWwubmFtZX19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFdoZW4gbm8gYHRyYWNrIGJ5YCBleHByZXNzaW9uIGlzIHByb3ZpZGVkLCBpdCBpcyBlcXVpdmFsZW50IHRvIHRyYWNraW5nIGJ5IHRoZSBidWlsdC1pblxuICogYCRpZGAgZnVuY3Rpb24sIHdoaWNoIHRyYWNrcyBpdGVtcyBieSB0aGVpciBpZGVudGl0eTpcbiAqIGBgYGh0bWxcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwib2JqIGluIGNvbGxlY3Rpb24gdHJhY2sgYnkgJGlkKG9iailcIj5cbiAqICAgICAge3tvYmoucHJvcH19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogYHRyYWNrIGJ5YCBtdXN0IGFsd2F5cyBiZSB0aGUgbGFzdCBleHByZXNzaW9uOlxuICogPC9kaXY+XG4gKiBgYGBcbiAqIDxkaXYgbmctcmVwZWF0PVwibW9kZWwgaW4gY29sbGVjdGlvbiB8IG9yZGVyQnk6ICdpZCcgYXMgZmlsdGVyZWRfcmVzdWx0IHRyYWNrIGJ5IG1vZGVsLmlkXCI+XG4gKiAgICAge3ttb2RlbC5uYW1lfX1cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogIyBTcGVjaWFsIHJlcGVhdCBzdGFydCBhbmQgZW5kIHBvaW50c1xuICogVG8gcmVwZWF0IGEgc2VyaWVzIG9mIGVsZW1lbnRzIGluc3RlYWQgb2YganVzdCBvbmUgcGFyZW50IGVsZW1lbnQsIG5nUmVwZWF0IChhcyB3ZWxsIGFzIG90aGVyIG5nIGRpcmVjdGl2ZXMpIHN1cHBvcnRzIGV4dGVuZGluZ1xuICogdGhlIHJhbmdlIG9mIHRoZSByZXBlYXRlciBieSBkZWZpbmluZyBleHBsaWNpdCBzdGFydCBhbmQgZW5kIHBvaW50cyBieSB1c2luZyAqKm5nLXJlcGVhdC1zdGFydCoqIGFuZCAqKm5nLXJlcGVhdC1lbmQqKiByZXNwZWN0aXZlbHkuXG4gKiBUaGUgKipuZy1yZXBlYXQtc3RhcnQqKiBkaXJlY3RpdmUgd29ya3MgdGhlIHNhbWUgYXMgKipuZy1yZXBlYXQqKiwgYnV0IHdpbGwgcmVwZWF0IGFsbCB0aGUgSFRNTCBjb2RlIChpbmNsdWRpbmcgdGhlIHRhZyBpdCdzIGRlZmluZWQgb24pXG4gKiB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBlbmRpbmcgSFRNTCB0YWcgd2hlcmUgKipuZy1yZXBlYXQtZW5kKiogaXMgcGxhY2VkLlxuICpcbiAqIFRoZSBleGFtcGxlIGJlbG93IG1ha2VzIHVzZSBvZiB0aGlzIGZlYXR1cmU6XG4gKiBgYGBodG1sXG4gKiAgIDxoZWFkZXIgbmctcmVwZWF0LXN0YXJ0PVwiaXRlbSBpbiBpdGVtc1wiPlxuICogICAgIEhlYWRlciB7eyBpdGVtIH19XG4gKiAgIDwvaGVhZGVyPlxuICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICogICAgIEJvZHkge3sgaXRlbSB9fVxuICogICA8L2Rpdj5cbiAqICAgPGZvb3RlciBuZy1yZXBlYXQtZW5kPlxuICogICAgIEZvb3RlciB7eyBpdGVtIH19XG4gKiAgIDwvZm9vdGVyPlxuICogYGBgXG4gKlxuICogQW5kIHdpdGggYW4gaW5wdXQgb2Yge0B0eXBlIFsnQScsJ0InXX0gZm9yIHRoZSBpdGVtcyB2YXJpYWJsZSBpbiB0aGUgZXhhbXBsZSBhYm92ZSwgdGhlIG91dHB1dCB3aWxsIGV2YWx1YXRlIHRvOlxuICogYGBgaHRtbFxuICogICA8aGVhZGVyPlxuICogICAgIEhlYWRlciBBXG4gKiAgIDwvaGVhZGVyPlxuICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICogICAgIEJvZHkgQVxuICogICA8L2Rpdj5cbiAqICAgPGZvb3Rlcj5cbiAqICAgICBGb290ZXIgQVxuICogICA8L2Zvb3Rlcj5cbiAqICAgPGhlYWRlcj5cbiAqICAgICBIZWFkZXIgQlxuICogICA8L2hlYWRlcj5cbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAqICAgICBCb2R5IEJcbiAqICAgPC9kaXY+XG4gKiAgIDxmb290ZXI+XG4gKiAgICAgRm9vdGVyIEJcbiAqICAgPC9mb290ZXI+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY3VzdG9tIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGZvciBuZ1JlcGVhdCBhbHNvIHN1cHBvcnQgYWxsIG90aGVyIEhUTUwgZGlyZWN0aXZlIHN5bnRheCBmbGF2b3JzIHByb3ZpZGVkIGluIEFuZ3VsYXJKUyAoc3VjaFxuICogYXMgKipkYXRhLW5nLXJlcGVhdC1zdGFydCoqLCAqKngtbmctcmVwZWF0LXN0YXJ0KiogYW5kICoqbmc6cmVwZWF0LXN0YXJ0KiopLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiAqKi5lbnRlcioqIC0gd2hlbiBhIG5ldyBpdGVtIGlzIGFkZGVkIHRvIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyByZXZlYWxlZCBhZnRlciBhIGZpbHRlclxuICpcbiAqICoqLmxlYXZlKiogLSB3aGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyBmaWx0ZXJlZCBvdXRcbiAqXG4gKiAqKi5tb3ZlKiogLSB3aGVuIGFuIGFkamFjZW50IGl0ZW0gaXMgZmlsdGVyZWQgb3V0IGNhdXNpbmcgYSByZW9yZGVyIG9yIHdoZW4gdGhlIGl0ZW0gY29udGVudHMgYXJlIHJlb3JkZXJlZFxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgMTAwMFxuICogQHBhcmFtIHtyZXBlYXRfZXhwcmVzc2lvbn0gbmdSZXBlYXQgVGhlIGV4cHJlc3Npb24gaW5kaWNhdGluZyBob3cgdG8gZW51bWVyYXRlIGEgY29sbGVjdGlvbi4gVGhlc2VcbiAqICAgZm9ybWF0cyBhcmUgY3VycmVudGx5IHN1cHBvcnRlZDpcbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSB2YXJpYWJsZSBpcyB0aGUgdXNlciBkZWZpbmVkIGxvb3AgdmFyaWFibGUgYW5kIGBleHByZXNzaW9uYFxuICogICAgIGlzIGEgc2NvcGUgZXhwcmVzc2lvbiBnaXZpbmcgdGhlIGNvbGxlY3Rpb24gdG8gZW51bWVyYXRlLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGFsYnVtIGluIGFydGlzdC5hbGJ1bXNgLlxuICpcbiAqICAgKiBgKGtleSwgdmFsdWUpIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSBga2V5YCBhbmQgYHZhbHVlYCBjYW4gYmUgYW55IHVzZXIgZGVmaW5lZCBpZGVudGlmaWVycyxcbiAqICAgICBhbmQgYGV4cHJlc3Npb25gIGlzIHRoZSBzY29wZSBleHByZXNzaW9uIGdpdmluZyB0aGUgY29sbGVjdGlvbiB0byBlbnVtZXJhdGUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgKG5hbWUsIGFnZSkgaW4geydhZGFtJzoxMCwgJ2FtYWxpZSc6MTJ9YC5cbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb24gdHJhY2sgYnkgdHJhY2tpbmdfZXhwcmVzc2lvbmAg4oCTIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIHRyYWNraW5nIGV4cHJlc3Npb25cbiAqICAgICB3aGljaCBjYW4gYmUgdXNlZCB0byBhc3NvY2lhdGUgdGhlIG9iamVjdHMgaW4gdGhlIGNvbGxlY3Rpb24gd2l0aCB0aGUgRE9NIGVsZW1lbnRzLiBJZiBubyB0cmFja2luZyBleHByZXNzaW9uXG4gKiAgICAgaXMgc3BlY2lmaWVkLCBuZy1yZXBlYXQgYXNzb2NpYXRlcyBlbGVtZW50cyBieSBpZGVudGl0eS4gSXQgaXMgYW4gZXJyb3IgdG8gaGF2ZVxuICogICAgIG1vcmUgdGhhbiBvbmUgdHJhY2tpbmcgZXhwcmVzc2lvbiB2YWx1ZSByZXNvbHZlIHRvIHRoZSBzYW1lIGtleS4gKFRoaXMgd291bGQgbWVhbiB0aGF0IHR3byBkaXN0aW5jdCBvYmplY3RzIGFyZVxuICogICAgIG1hcHBlZCB0byB0aGUgc2FtZSBET00gZWxlbWVudCwgd2hpY2ggaXMgbm90IHBvc3NpYmxlLilcbiAqXG4gKiAgICAgTm90ZSB0aGF0IHRoZSB0cmFja2luZyBleHByZXNzaW9uIG11c3QgY29tZSBsYXN0LCBhZnRlciBhbnkgZmlsdGVycywgYW5kIHRoZSBhbGlhcyBleHByZXNzaW9uLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXNgIGlzIGVxdWl2YWxlbnQgdG8gYGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgJGlkKGl0ZW0pYC4gVGhpcyBpbXBsaWVzIHRoYXQgdGhlIERPTSBlbGVtZW50c1xuICogICAgIHdpbGwgYmUgYXNzb2NpYXRlZCBieSBpdGVtIGlkZW50aXR5IGluIHRoZSBhcnJheS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5ICRpZChpdGVtKWAuIEEgYnVpbHQgaW4gYCRpZCgpYCBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBhc3NpZ24gYSB1bmlxdWVcbiAqICAgICBgJCRoYXNoS2V5YCBwcm9wZXJ0eSB0byBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5LiBUaGlzIHByb3BlcnR5IGlzIHRoZW4gdXNlZCBhcyBhIGtleSB0byBhc3NvY2lhdGVkIERPTSBlbGVtZW50c1xuICogICAgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgaXRlbSBpbiB0aGUgYXJyYXkgYnkgaWRlbnRpdHkuIE1vdmluZyB0aGUgc2FtZSBvYmplY3QgaW4gYXJyYXkgd291bGQgbW92ZSB0aGUgRE9NXG4gKiAgICAgZWxlbWVudCBpbiB0aGUgc2FtZSB3YXkgaW4gdGhlIERPTS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgdHlwaWNhbCBwYXR0ZXJuIHdoZW4gdGhlIGl0ZW1zIGNvbWUgZnJvbSB0aGUgZGF0YWJhc2UuIEluIHRoaXNcbiAqICAgICBjYXNlIHRoZSBvYmplY3QgaWRlbnRpdHkgZG9lcyBub3QgbWF0dGVyLiBUd28gb2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlcXVpdmFsZW50IGFzIGxvbmcgYXMgdGhlaXIgYGlkYFxuICogICAgIHByb3BlcnR5IGlzIHNhbWUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjpzZWFyY2hUZXh0IHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgcGF0dGVybiB0aGF0IG1pZ2h0IGJlIHVzZWQgdG8gYXBwbHkgYSBmaWx0ZXJcbiAqICAgICB0byBpdGVtcyBpbiBjb25qdW5jdGlvbiB3aXRoIGEgdHJhY2tpbmcgZXhwcmVzc2lvbi5cbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb24gYXMgYWxpYXNfZXhwcmVzc2lvbmAg4oCTIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGFsaWFzIGV4cHJlc3Npb24gd2hpY2ggd2lsbCB0aGVuIHN0b3JlIHRoZVxuICogICAgIGludGVybWVkaWF0ZSByZXN1bHRzIG9mIHRoZSByZXBlYXRlciBhZnRlciB0aGUgZmlsdGVycyBoYXZlIGJlZW4gYXBwbGllZC4gVHlwaWNhbGx5IHRoaXMgaXMgdXNlZCB0byByZW5kZXIgYSBzcGVjaWFsIG1lc3NhZ2VcbiAqICAgICB3aGVuIGEgZmlsdGVyIGlzIGFjdGl2ZSBvbiB0aGUgcmVwZWF0ZXIsIGJ1dCB0aGUgZmlsdGVyZWQgcmVzdWx0IHNldCBpcyBlbXB0eS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHwgZmlsdGVyOnggYXMgcmVzdWx0c2Agd2lsbCBzdG9yZSB0aGUgZnJhZ21lbnQgb2YgdGhlIHJlcGVhdGVkIGl0ZW1zIGFzIGByZXN1bHRzYCwgYnV0IG9ubHkgYWZ0ZXJcbiAqICAgICB0aGUgaXRlbXMgaGF2ZSBiZWVuIHByb2Nlc3NlZCB0aHJvdWdoIHRoZSBmaWx0ZXIuXG4gKlxuICogICAgIFBsZWFzZSBub3RlIHRoYXQgYGFzIFt2YXJpYWJsZSBuYW1lXSBpcyBub3QgYW4gb3BlcmF0b3IgYnV0IHJhdGhlciBhIHBhcnQgb2YgbmdSZXBlYXQgbWljcm8tc3ludGF4IHNvIGl0IGNhbiBiZSB1c2VkIG9ubHkgYXQgdGhlIGVuZFxuICogICAgIChhbmQgbm90IGFzIG9wZXJhdG9yLCBpbnNpZGUgYW4gZXhwcmVzc2lvbikuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlciA6IHggfCBvcmRlckJ5IDogb3JkZXIgfCBsaW1pdFRvIDogbGltaXQgYXMgcmVzdWx0c2AgLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgaW5pdGlhbGl6ZXMgdGhlIHNjb3BlIHRvIGEgbGlzdCBvZiBuYW1lcyBhbmRcbiAqIHRoZW4gdXNlcyBgbmdSZXBlYXRgIHRvIGRpc3BsYXkgZXZlcnkgcGVyc29uOlxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1pbml0PVwiZnJpZW5kcyA9IFtcbiAgICAgICAge25hbWU6J0pvaG4nLCBhZ2U6MjUsIGdlbmRlcjonYm95J30sXG4gICAgICAgIHtuYW1lOidKZXNzaWUnLCBhZ2U6MzAsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICB7bmFtZTonSm9oYW5uYScsIGFnZToyOCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgIHtuYW1lOidKb3knLCBhZ2U6MTUsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICB7bmFtZTonTWFyeScsIGFnZToyOCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgIHtuYW1lOidQZXRlcicsIGFnZTo5NSwgZ2VuZGVyOidib3knfSxcbiAgICAgICAge25hbWU6J1NlYmFzdGlhbicsIGFnZTo1MCwgZ2VuZGVyOidib3knfSxcbiAgICAgICAge25hbWU6J0VyaWthJywgYWdlOjI3LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAge25hbWU6J1BhdHJpY2snLCBhZ2U6NDAsIGdlbmRlcjonYm95J30sXG4gICAgICAgIHtuYW1lOidTYW1hbnRoYScsIGFnZTo2MCwgZ2VuZGVyOidnaXJsJ31cbiAgICAgIF1cIj5cbiAgICAgICAgSSBoYXZlIHt7ZnJpZW5kcy5sZW5ndGh9fSBmcmllbmRzLiBUaGV5IGFyZTpcbiAgICAgICAgPGlucHV0IHR5cGU9XCJzZWFyY2hcIiBuZy1tb2RlbD1cInFcIiBwbGFjZWhvbGRlcj1cImZpbHRlciBmcmllbmRzLi4uXCIgYXJpYS1sYWJlbD1cImZpbHRlciBmcmllbmRzXCIgLz5cbiAgICAgICAgPHVsIGNsYXNzPVwiZXhhbXBsZS1hbmltYXRlLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxsaSBjbGFzcz1cImFuaW1hdGUtcmVwZWF0XCIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBmaWx0ZXI6cSBhcyByZXN1bHRzXCI+XG4gICAgICAgICAgICBbe3skaW5kZXggKyAxfX1dIHt7ZnJpZW5kLm5hbWV9fSB3aG8gaXMge3tmcmllbmQuYWdlfX0geWVhcnMgb2xkLlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPGxpIGNsYXNzPVwiYW5pbWF0ZS1yZXBlYXRcIiBuZy1pZj1cInJlc3VsdHMubGVuZ3RoID09IDBcIj5cbiAgICAgICAgICAgIDxzdHJvbmc+Tm8gcmVzdWx0cyBmb3VuZC4uLjwvc3Ryb25nPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuZXhhbXBsZS1hbmltYXRlLWNvbnRhaW5lciB7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGxpc3Qtc3R5bGU6bm9uZTtcbiAgICAgICAgbWFyZ2luOjA7XG4gICAgICAgIHBhZGRpbmc6MCAxMHB4O1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQge1xuICAgICAgICBsaW5lLWhlaWdodDo0MHB4O1xuICAgICAgICBsaXN0LXN0eWxlOm5vbmU7XG4gICAgICAgIGJveC1zaXppbmc6Ym9yZGVyLWJveDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUge1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1tb3ZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyIHtcbiAgICAgICAgb3BhY2l0eTowO1xuICAgICAgICBtYXgtaGVpZ2h0OjA7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1tb3ZlLm5nLW1vdmUtYWN0aXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gICAgICAgIG9wYWNpdHk6MTtcbiAgICAgICAgbWF4LWhlaWdodDo0MHB4O1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgZnJpZW5kcyA9IGVsZW1lbnQuYWxsKGJ5LnJlcGVhdGVyKCdmcmllbmQgaW4gZnJpZW5kcycpKTtcblxuICAgICAgaXQoJ3Nob3VsZCByZW5kZXIgaW5pdGlhbCBkYXRhIHNldCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5jb3VudCgpKS50b0JlKDEwKTtcbiAgICAgICAgZXhwZWN0KGZyaWVuZHMuZ2V0KDApLmdldFRleHQoKSkudG9FcXVhbCgnWzFdIEpvaG4gd2hvIGlzIDI1IHllYXJzIG9sZC4nKTtcbiAgICAgICAgZXhwZWN0KGZyaWVuZHMuZ2V0KDEpLmdldFRleHQoKSkudG9FcXVhbCgnWzJdIEplc3NpZSB3aG8gaXMgMzAgeWVhcnMgb2xkLicpO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5sYXN0KCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMTBdIFNhbWFudGhhIHdobyBpcyA2MCB5ZWFycyBvbGQuJyk7XG4gICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2ZyaWVuZHMubGVuZ3RoJykpLmdldFRleHQoKSlcbiAgICAgICAgICAgIC50b01hdGNoKFwiSSBoYXZlIDEwIGZyaWVuZHMuIFRoZXkgYXJlOlwiKTtcbiAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgcmVwZWF0ZXIgd2hlbiBmaWx0ZXIgcHJlZGljYXRlIGNoYW5nZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApO1xuXG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdxJykpLnNlbmRLZXlzKCdtYScpO1xuXG4gICAgICAgICBleHBlY3QoZnJpZW5kcy5jb3VudCgpKS50b0JlKDIpO1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMuZ2V0KDApLmdldFRleHQoKSkudG9FcXVhbCgnWzFdIE1hcnkgd2hvIGlzIDI4IHllYXJzIG9sZC4nKTtcbiAgICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1syXSBTYW1hbnRoYSB3aG8gaXMgNjAgeWVhcnMgb2xkLicpO1xuICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nUmVwZWF0RGlyZWN0aXZlID0gWyckcGFyc2UnLCAnJGFuaW1hdGUnLCBmdW5jdGlvbigkcGFyc2UsICRhbmltYXRlKSB7XG4gIHZhciBOR19SRU1PVkVEID0gJyQkTkdfUkVNT1ZFRCc7XG4gIHZhciBuZ1JlcGVhdE1pbkVyciA9IG1pbkVycignbmdSZXBlYXQnKTtcblxuICB2YXIgdXBkYXRlU2NvcGUgPSBmdW5jdGlvbihzY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgYXJyYXlMZW5ndGgpIHtcbiAgICAvLyBUT0RPKHBlcmYpOiBnZW5lcmF0ZSBzZXR0ZXJzIHRvIHNoYXZlIG9mZiB+NDBtcyBvciAxLTEuNSVcbiAgICBzY29wZVt2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7XG4gICAgaWYgKGtleUlkZW50aWZpZXIpIHNjb3BlW2tleUlkZW50aWZpZXJdID0ga2V5O1xuICAgIHNjb3BlLiRpbmRleCA9IGluZGV4O1xuICAgIHNjb3BlLiRmaXJzdCA9IChpbmRleCA9PT0gMCk7XG4gICAgc2NvcGUuJGxhc3QgPSAoaW5kZXggPT09IChhcnJheUxlbmd0aCAtIDEpKTtcbiAgICBzY29wZS4kbWlkZGxlID0gIShzY29wZS4kZmlyc3QgfHwgc2NvcGUuJGxhc3QpO1xuICAgIC8vIGpzaGludCBiaXR3aXNlOiBmYWxzZVxuICAgIHNjb3BlLiRvZGQgPSAhKHNjb3BlLiRldmVuID0gKGluZGV4JjEpID09PSAwKTtcbiAgICAvLyBqc2hpbnQgYml0d2lzZTogdHJ1ZVxuICB9O1xuXG4gIHZhciBnZXRCbG9ja1N0YXJ0ID0gZnVuY3Rpb24oYmxvY2spIHtcbiAgICByZXR1cm4gYmxvY2suY2xvbmVbMF07XG4gIH07XG5cbiAgdmFyIGdldEJsb2NrRW5kID0gZnVuY3Rpb24oYmxvY2spIHtcbiAgICByZXR1cm4gYmxvY2suY2xvbmVbYmxvY2suY2xvbmUubGVuZ3RoIC0gMV07XG4gIH07XG5cblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgICBwcmlvcml0eTogMTAwMCxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICAkJHRsYjogdHJ1ZSxcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ1JlcGVhdENvbXBpbGUoJGVsZW1lbnQsICRhdHRyKSB7XG4gICAgICB2YXIgZXhwcmVzc2lvbiA9ICRhdHRyLm5nUmVwZWF0O1xuICAgICAgdmFyIG5nUmVwZWF0RW5kQ29tbWVudCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJyBlbmQgbmdSZXBlYXQ6ICcgKyBleHByZXNzaW9uICsgJyAnKTtcblxuICAgICAgdmFyIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaCgvXlxccyooW1xcc1xcU10rPylcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/XFxzKiQvKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWV4cCcsIFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mICdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fWyB0cmFjayBieSBfaWRfXScgYnV0IGdvdCAnezB9Jy5cIixcbiAgICAgICAgICAgIGV4cHJlc3Npb24pO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGhzID0gbWF0Y2hbMV07XG4gICAgICB2YXIgcmhzID0gbWF0Y2hbMl07XG4gICAgICB2YXIgYWxpYXNBcyA9IG1hdGNoWzNdO1xuICAgICAgdmFyIHRyYWNrQnlFeHAgPSBtYXRjaFs0XTtcblxuICAgICAgbWF0Y2ggPSBsaHMubWF0Y2goL14oPzooXFxzKltcXCRcXHddKyl8XFwoXFxzKihbXFwkXFx3XSspXFxzKixcXHMqKFtcXCRcXHddKylcXHMqXFwpKSQvKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWlkZXhwJywgXCInX2l0ZW1fJyBpbiAnX2l0ZW1fIGluIF9jb2xsZWN0aW9uXycgc2hvdWxkIGJlIGFuIGlkZW50aWZpZXIgb3IgJyhfa2V5XywgX3ZhbHVlXyknIGV4cHJlc3Npb24sIGJ1dCBnb3QgJ3swfScuXCIsXG4gICAgICAgICAgICBsaHMpO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlSWRlbnRpZmllciA9IG1hdGNoWzNdIHx8IG1hdGNoWzFdO1xuICAgICAgdmFyIGtleUlkZW50aWZpZXIgPSBtYXRjaFsyXTtcblxuICAgICAgaWYgKGFsaWFzQXMgJiYgKCEvXlskYS16QS1aX11bJGEtekEtWjAtOV9dKiQvLnRlc3QoYWxpYXNBcykgfHxcbiAgICAgICAgICAvXihudWxsfHVuZGVmaW5lZHx0aGlzfFxcJGluZGV4fFxcJGZpcnN0fFxcJG1pZGRsZXxcXCRsYXN0fFxcJGV2ZW58XFwkb2RkfFxcJHBhcmVudHxcXCRyb290fFxcJGlkKSQvLnRlc3QoYWxpYXNBcykpKSB7XG4gICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdiYWRpZGVudCcsIFwiYWxpYXMgJ3swfScgaXMgaW52YWxpZCAtLS0gbXVzdCBiZSBhIHZhbGlkIEpTIGlkZW50aWZpZXIgd2hpY2ggaXMgbm90IGEgcmVzZXJ2ZWQgbmFtZS5cIixcbiAgICAgICAgICBhbGlhc0FzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYWNrQnlFeHBHZXR0ZXIsIHRyYWNrQnlJZEV4cEZuLCB0cmFja0J5SWRBcnJheUZuLCB0cmFja0J5SWRPYmpGbjtcbiAgICAgIHZhciBoYXNoRm5Mb2NhbHMgPSB7JGlkOiBoYXNoS2V5fTtcblxuICAgICAgaWYgKHRyYWNrQnlFeHApIHtcbiAgICAgICAgdHJhY2tCeUV4cEdldHRlciA9ICRwYXJzZSh0cmFja0J5RXhwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYWNrQnlJZEFycmF5Rm4gPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGhhc2hLZXkodmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICB0cmFja0J5SWRPYmpGbiA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1JlcGVhdExpbmsoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG5cbiAgICAgICAgaWYgKHRyYWNrQnlFeHBHZXR0ZXIpIHtcbiAgICAgICAgICB0cmFja0J5SWRFeHBGbiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICAvLyBhc3NpZ24ga2V5LCB2YWx1ZSwgYW5kICRpbmRleCB0byB0aGUgbG9jYWxzIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCBpbiBoYXNoIGZ1bmN0aW9uc1xuICAgICAgICAgICAgaWYgKGtleUlkZW50aWZpZXIpIGhhc2hGbkxvY2Fsc1trZXlJZGVudGlmaWVyXSA9IGtleTtcbiAgICAgICAgICAgIGhhc2hGbkxvY2Fsc1t2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7XG4gICAgICAgICAgICBoYXNoRm5Mb2NhbHMuJGluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICByZXR1cm4gdHJhY2tCeUV4cEdldHRlcigkc2NvcGUsIGhhc2hGbkxvY2Fscyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIGEgbGlzdCBvZiBlbGVtZW50cyBmcm9tIHByZXZpb3VzIHJ1bi4gVGhpcyBpcyBhIGhhc2ggd2hlcmUga2V5IGlzIHRoZSBpdGVtIGZyb20gdGhlXG4gICAgICAgIC8vIGl0ZXJhdG9yLCBhbmQgdGhlIHZhbHVlIGlzIG9iamVjdHMgd2l0aCBmb2xsb3dpbmcgcHJvcGVydGllcy5cbiAgICAgICAgLy8gICAtIHNjb3BlOiBib3VuZCBzY29wZVxuICAgICAgICAvLyAgIC0gZWxlbWVudDogcHJldmlvdXMgZWxlbWVudC5cbiAgICAgICAgLy8gICAtIGluZGV4OiBwb3NpdGlvblxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSBhcmUgdXNpbmcgbm8tcHJvdG8gb2JqZWN0IHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBndWFyZCBhZ2FpbnN0IGluaGVyaXRlZCBwcm9wcyB2aWFcbiAgICAgICAgLy8gaGFzT3duUHJvcGVydHkuXG4gICAgICAgIHZhciBsYXN0QmxvY2tNYXAgPSBjcmVhdGVNYXAoKTtcblxuICAgICAgICAvL3dhdGNoIHByb3BzXG4gICAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKHJocywgZnVuY3Rpb24gbmdSZXBlYXRBY3Rpb24oY29sbGVjdGlvbikge1xuICAgICAgICAgIHZhciBpbmRleCwgbGVuZ3RoLFxuICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSAkZWxlbWVudFswXSwgICAgIC8vIG5vZGUgdGhhdCBjbG9uZWQgbm9kZXMgc2hvdWxkIGJlIGluc2VydGVkIGFmdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZWQgdG8gdGhlIGNvbW1lbnQgbm9kZSBhbmNob3JcbiAgICAgICAgICAgICAgbmV4dE5vZGUsXG4gICAgICAgICAgICAgIC8vIFNhbWUgYXMgbGFzdEJsb2NrTWFwIGJ1dCBpdCBoYXMgdGhlIGN1cnJlbnQgc3RhdGUuIEl0IHdpbGwgYmVjb21lIHRoZVxuICAgICAgICAgICAgICAvLyBsYXN0QmxvY2tNYXAgb24gdGhlIG5leHQgaXRlcmF0aW9uLlxuICAgICAgICAgICAgICBuZXh0QmxvY2tNYXAgPSBjcmVhdGVNYXAoKSxcbiAgICAgICAgICAgICAgY29sbGVjdGlvbkxlbmd0aCxcbiAgICAgICAgICAgICAga2V5LCB2YWx1ZSwgLy8ga2V5L3ZhbHVlIG9mIGl0ZXJhdGlvblxuICAgICAgICAgICAgICB0cmFja0J5SWQsXG4gICAgICAgICAgICAgIHRyYWNrQnlJZEZuLFxuICAgICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyxcbiAgICAgICAgICAgICAgYmxvY2ssICAgICAgIC8vIGxhc3Qgb2JqZWN0IGluZm9ybWF0aW9uIHtzY29wZSwgZWxlbWVudCwgaWR9XG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyLFxuICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlO1xuXG4gICAgICAgICAgaWYgKGFsaWFzQXMpIHtcbiAgICAgICAgICAgICRzY29wZVthbGlhc0FzXSA9IGNvbGxlY3Rpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyA9IGNvbGxlY3Rpb247XG4gICAgICAgICAgICB0cmFja0J5SWRGbiA9IHRyYWNrQnlJZEV4cEZuIHx8IHRyYWNrQnlJZEFycmF5Rm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRXhwRm4gfHwgdHJhY2tCeUlkT2JqRm47XG4gICAgICAgICAgICAvLyBpZiBvYmplY3QsIGV4dHJhY3Qga2V5cywgaW4gZW51bWVyYXRpb24gb3JkZXIsIHVuc29ydGVkXG4gICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlbUtleSBpbiBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbGxlY3Rpb24sIGl0ZW1LZXkpICYmIGl0ZW1LZXkuY2hhckF0KDApICE9PSAnJCcpIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uS2V5cy5wdXNoKGl0ZW1LZXkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29sbGVjdGlvbkxlbmd0aCA9IGNvbGxlY3Rpb25LZXlzLmxlbmd0aDtcbiAgICAgICAgICBuZXh0QmxvY2tPcmRlciA9IG5ldyBBcnJheShjb2xsZWN0aW9uTGVuZ3RoKTtcblxuICAgICAgICAgIC8vIGxvY2F0ZSBleGlzdGluZyBpdGVtc1xuICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvbGxlY3Rpb25MZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGtleSA9IChjb2xsZWN0aW9uID09PSBjb2xsZWN0aW9uS2V5cykgPyBpbmRleCA6IGNvbGxlY3Rpb25LZXlzW2luZGV4XTtcbiAgICAgICAgICAgIHZhbHVlID0gY29sbGVjdGlvbltrZXldO1xuICAgICAgICAgICAgdHJhY2tCeUlkID0gdHJhY2tCeUlkRm4oa2V5LCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGxhc3RCbG9ja01hcFt0cmFja0J5SWRdKSB7XG4gICAgICAgICAgICAgIC8vIGZvdW5kIHByZXZpb3VzbHkgc2VlbiBibG9ja1xuICAgICAgICAgICAgICBibG9jayA9IGxhc3RCbG9ja01hcFt0cmFja0J5SWRdO1xuICAgICAgICAgICAgICBkZWxldGUgbGFzdEJsb2NrTWFwW3RyYWNrQnlJZF07XG4gICAgICAgICAgICAgIG5leHRCbG9ja01hcFt0cmFja0J5SWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IGJsb2NrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSkge1xuICAgICAgICAgICAgICAvLyBpZiBjb2xsaXNpb24gZGV0ZWN0ZWQuIHJlc3RvcmUgbGFzdEJsb2NrTWFwIGFuZCB0aHJvdyBhbiBlcnJvclxuICAgICAgICAgICAgICBmb3JFYWNoKG5leHRCbG9ja09yZGVyLCBmdW5jdGlvbihibG9jaykge1xuICAgICAgICAgICAgICAgIGlmIChibG9jayAmJiBibG9jay5zY29wZSkgbGFzdEJsb2NrTWFwW2Jsb2NrLmlkXSA9IGJsb2NrO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2R1cGVzJyxcbiAgICAgICAgICAgICAgICAgIFwiRHVwbGljYXRlcyBpbiBhIHJlcGVhdGVyIGFyZSBub3QgYWxsb3dlZC4gVXNlICd0cmFjayBieScgZXhwcmVzc2lvbiB0byBzcGVjaWZ5IHVuaXF1ZSBrZXlzLiBSZXBlYXRlcjogezB9LCBEdXBsaWNhdGUga2V5OiB7MX0sIER1cGxpY2F0ZSB2YWx1ZTogezJ9XCIsXG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uLCB0cmFja0J5SWQsIHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIG5ldyBuZXZlciBiZWZvcmUgc2VlbiBibG9ja1xuICAgICAgICAgICAgICBuZXh0QmxvY2tPcmRlcltpbmRleF0gPSB7aWQ6IHRyYWNrQnlJZCwgc2NvcGU6IHVuZGVmaW5lZCwgY2xvbmU6IHVuZGVmaW5lZH07XG4gICAgICAgICAgICAgIG5leHRCbG9ja01hcFt0cmFja0J5SWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyByZW1vdmUgbGVmdG92ZXIgaXRlbXNcbiAgICAgICAgICBmb3IgKHZhciBibG9ja0tleSBpbiBsYXN0QmxvY2tNYXApIHtcbiAgICAgICAgICAgIGJsb2NrID0gbGFzdEJsb2NrTWFwW2Jsb2NrS2V5XTtcbiAgICAgICAgICAgIGVsZW1lbnRzVG9SZW1vdmUgPSBnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKTtcbiAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGVsZW1lbnRzVG9SZW1vdmUpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRzVG9SZW1vdmVbMF0ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAvLyBpZiB0aGUgZWxlbWVudCB3YXMgbm90IHJlbW92ZWQgeWV0IGJlY2F1c2Ugb2YgcGVuZGluZyBhbmltYXRpb24sIG1hcmsgaXQgYXMgZGVsZXRlZFxuICAgICAgICAgICAgICAvLyBzbyB0aGF0IHdlIGNhbiBpZ25vcmUgaXQgbGF0ZXJcbiAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzVG9SZW1vdmVbaW5kZXhdW05HX1JFTU9WRURdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvY2suc2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB3ZSBhcmUgbm90IHVzaW5nIGZvckVhY2ggZm9yIHBlcmYgcmVhc29ucyAodHJ5aW5nIHRvIGF2b2lkICNjYWxsKVxuICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvbGxlY3Rpb25MZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGtleSA9IChjb2xsZWN0aW9uID09PSBjb2xsZWN0aW9uS2V5cykgPyBpbmRleCA6IGNvbGxlY3Rpb25LZXlzW2luZGV4XTtcbiAgICAgICAgICAgIHZhbHVlID0gY29sbGVjdGlvbltrZXldO1xuICAgICAgICAgICAgYmxvY2sgPSBuZXh0QmxvY2tPcmRlcltpbmRleF07XG5cbiAgICAgICAgICAgIGlmIChibG9jay5zY29wZSkge1xuICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGFscmVhZHkgc2VlbiB0aGlzIG9iamVjdCwgdGhlbiB3ZSBuZWVkIHRvIHJldXNlIHRoZVxuICAgICAgICAgICAgICAvLyBhc3NvY2lhdGVkIHNjb3BlL2VsZW1lbnRcblxuICAgICAgICAgICAgICBuZXh0Tm9kZSA9IHByZXZpb3VzTm9kZTtcblxuICAgICAgICAgICAgICAvLyBza2lwIG5vZGVzIHRoYXQgYXJlIGFscmVhZHkgcGVuZGluZyByZW1vdmFsIHZpYSBsZWF2ZSBhbmltYXRpb25cbiAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKG5leHROb2RlICYmIG5leHROb2RlW05HX1JFTU9WRURdKTtcblxuICAgICAgICAgICAgICBpZiAoZ2V0QmxvY2tTdGFydChibG9jaykgIT0gbmV4dE5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBleGlzdGluZyBpdGVtIHdoaWNoIGdvdCBtb3ZlZFxuICAgICAgICAgICAgICAgICRhbmltYXRlLm1vdmUoZ2V0QmxvY2tOb2RlcyhibG9jay5jbG9uZSksIG51bGwsIGpxTGl0ZShwcmV2aW91c05vZGUpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBnZXRCbG9ja0VuZChibG9jayk7XG4gICAgICAgICAgICAgIHVwZGF0ZVNjb3BlKGJsb2NrLnNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBjb2xsZWN0aW9uTGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIG5ldyBpdGVtIHdoaWNoIHdlIGRvbid0IGtub3cgYWJvdXRcbiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGUoZnVuY3Rpb24gbmdSZXBlYXRUcmFuc2NsdWRlKGNsb25lLCBzY29wZSkge1xuICAgICAgICAgICAgICAgIGJsb2NrLnNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vY2xvbmUtdnMtY3JlYXRlY29tbWVudFxuICAgICAgICAgICAgICAgIHZhciBlbmROb2RlID0gbmdSZXBlYXRFbmRDb21tZW50LmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgY2xvbmVbY2xvbmUubGVuZ3RoKytdID0gZW5kTm9kZTtcblxuICAgICAgICAgICAgICAgIC8vIFRPRE8ocGVyZik6IHN1cHBvcnQgbmFrZWQgcHJldmlvdXNOb2RlIGluIGBlbnRlcmAgdG8gYXZvaWQgY3JlYXRpb24gb2YganFMaXRlIHdyYXBwZXI/XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIG51bGwsIGpxTGl0ZShwcmV2aW91c05vZGUpKTtcbiAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBlbmROb2RlO1xuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIG9ubHkgbmVlZCB0aGUgZmlyc3QvbGFzdCBub2RlIG9mIHRoZSBjbG9uZWQgbm9kZXMuXG4gICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgd2UgbmVlZCB0byBrZWVwIHRoZSByZWZlcmVuY2UgdG8gdGhlIGpxbGl0ZSB3cmFwcGVyIGFzIGl0IG1pZ2h0IGJlIGNoYW5nZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXRzIHRlbXBsYXRlIGFycml2ZXMuXG4gICAgICAgICAgICAgICAgYmxvY2suY2xvbmUgPSBjbG9uZTtcbiAgICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbYmxvY2suaWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgICAgdXBkYXRlU2NvcGUoYmxvY2suc2NvcGUsIGluZGV4LCB2YWx1ZUlkZW50aWZpZXIsIHZhbHVlLCBrZXlJZGVudGlmaWVyLCBrZXksIGNvbGxlY3Rpb25MZW5ndGgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdEJsb2NrTWFwID0gbmV4dEJsb2NrTWFwO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBOR19ISURFX0NMQVNTID0gJ25nLWhpZGUnO1xudmFyIE5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1MgPSAnbmctaGlkZS1hbmltYXRlJztcbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTaG93XG4gKiBAbXVsdGlFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nU2hvd2AgZGlyZWN0aXZlIHNob3dzIG9yIGhpZGVzIHRoZSBnaXZlbiBIVE1MIGVsZW1lbnQgYmFzZWQgb24gdGhlIGV4cHJlc3Npb25cbiAqIHByb3ZpZGVkIHRvIHRoZSBgbmdTaG93YCBhdHRyaWJ1dGUuIFRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiBieSByZW1vdmluZyBvciBhZGRpbmdcbiAqIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50LiBUaGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcHJlZGVmaW5lZFxuICogaW4gQW5ndWxhckpTIGFuZCBzZXRzIHRoZSBkaXNwbGF5IHN0eWxlIHRvIG5vbmUgKHVzaW5nIGFuICFpbXBvcnRhbnQgZmxhZykuXG4gKiBGb3IgQ1NQIG1vZGUgcGxlYXNlIGFkZCBgYW5ndWxhci1jc3AuY3NzYCB0byB5b3VyIGh0bWwgZmlsZSAoc2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDc3AgbmdDc3B9KS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgdHJ1dGh5IChlbGVtZW50IGlzIHZpc2libGUpIC0tPlxuICogPGRpdiBuZy1zaG93PVwibXlWYWx1ZVwiPjwvZGl2PlxuICpcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyBmYWxzeSAoZWxlbWVudCBpcyBoaWRkZW4pIC0tPlxuICogPGRpdiBuZy1zaG93PVwibXlWYWx1ZVwiIGNsYXNzPVwibmctaGlkZVwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYG5nU2hvd2AgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBmYWxzeSB2YWx1ZSB0aGVuIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBhZGRlZCB0byB0aGUgY2xhc3NcbiAqIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBjYXVzaW5nIGl0IHRvIGJlY29tZSBoaWRkZW4uIFdoZW4gdHJ1dGh5LCB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcmVtb3ZlZFxuICogZnJvbSB0aGUgZWxlbWVudCBjYXVzaW5nIHRoZSBlbGVtZW50IG5vdCB0byBhcHBlYXIgaGlkZGVuLlxuICpcbiAqICMjIFdoeSBpcyAhaW1wb3J0YW50IHVzZWQ/XG4gKlxuICogWW91IG1heSBiZSB3b25kZXJpbmcgd2h5ICFpbXBvcnRhbnQgaXMgdXNlZCBmb3IgdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzLiBUaGlzIGlzIGJlY2F1c2UgdGhlIGAubmctaGlkZWAgc2VsZWN0b3JcbiAqIGNhbiBiZSBlYXNpbHkgb3ZlcnJpZGRlbiBieSBoZWF2aWVyIHNlbGVjdG9ycy4gRm9yIGV4YW1wbGUsIHNvbWV0aGluZyBhcyBzaW1wbGVcbiAqIGFzIGNoYW5naW5nIHRoZSBkaXNwbGF5IHN0eWxlIG9uIGEgSFRNTCBsaXN0IGl0ZW0gd291bGQgbWFrZSBoaWRkZW4gZWxlbWVudHMgYXBwZWFyIHZpc2libGUuXG4gKiBUaGlzIGFsc28gYmVjb21lcyBhIGJpZ2dlciBpc3N1ZSB3aGVuIGRlYWxpbmcgd2l0aCBDU1MgZnJhbWV3b3Jrcy5cbiAqXG4gKiBCeSB1c2luZyAhaW1wb3J0YW50LCB0aGUgc2hvdyBhbmQgaGlkZSBiZWhhdmlvciB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgZGVzcGl0ZSBhbnkgY2xhc2ggYmV0d2VlbiBDU1Mgc2VsZWN0b3JcbiAqIHNwZWNpZmljaXR5ICh3aGVuICFpbXBvcnRhbnQgaXNuJ3QgdXNlZCB3aXRoIGFueSBjb25mbGljdGluZyBzdHlsZXMpLiBJZiBhIGRldmVsb3BlciBjaG9vc2VzIHRvIG92ZXJyaWRlIHRoZVxuICogc3R5bGluZyB0byBjaGFuZ2UgaG93IHRvIGhpZGUgYW4gZWxlbWVudCB0aGVuIGl0IGlzIGp1c3QgYSBtYXR0ZXIgb2YgdXNpbmcgIWltcG9ydGFudCBpbiB0aGVpciBvd24gQ1NTIGNvZGUuXG4gKlxuICogIyMjIE92ZXJyaWRpbmcgYC5uZy1oaWRlYFxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBgLm5nLWhpZGVgIGNsYXNzIHdpbGwgc3R5bGUgdGhlIGVsZW1lbnQgd2l0aCBgZGlzcGxheTogbm9uZSFpbXBvcnRhbnRgLiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2VcbiAqIHRoZSBoaWRlIGJlaGF2aW9yIHdpdGggbmdTaG93L25nSGlkZSB0aGVuIHRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJlc3RhdGluZyB0aGUgc3R5bGVzIGZvciB0aGUgYC5uZy1oaWRlYFxuICogY2xhc3MgQ1NTLiBOb3RlIHRoYXQgdGhlIHNlbGVjdG9yIHRoYXQgbmVlZHMgdG8gYmUgdXNlZCBpcyBhY3R1YWxseSBgLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpYCB0byBjb3BlXG4gKiB3aXRoIGV4dHJhIGFuaW1hdGlvbiBjbGFzc2VzIHRoYXQgY2FuIGJlIGFkZGVkLlxuICpcbiAqIGBgYGNzc1xuICogLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpIHtcbiAqICAgLyYjNDI7IHRoaXMgaXMganVzdCBhbm90aGVyIGZvcm0gb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvXG4gKiAgIGRpc3BsYXk6IGJsb2NrIWltcG9ydGFudDtcbiAqICAgcG9zaXRpb246IGFic29sdXRlO1xuICogICB0b3A6IC05OTk5cHg7XG4gKiAgIGxlZnQ6IC05OTk5cHg7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBCeSBkZWZhdWx0IHlvdSBkb24ndCBuZWVkIHRvIG92ZXJyaWRlIGluIENTUyBhbnl0aGluZyBhbmQgdGhlIGFuaW1hdGlvbnMgd2lsbCB3b3JrIGFyb3VuZCB0aGUgZGlzcGxheSBzdHlsZS5cbiAqXG4gKiAjIyBBIG5vdGUgYWJvdXQgYW5pbWF0aW9ucyB3aXRoIGBuZ1Nob3dgXG4gKlxuICogQW5pbWF0aW9ucyBpbiBuZ1Nob3cvbmdIaWRlIHdvcmsgd2l0aCB0aGUgc2hvdyBhbmQgaGlkZSBldmVudHMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gdGhlIGRpcmVjdGl2ZSBleHByZXNzaW9uXG4gKiBpcyB0cnVlIGFuZCBmYWxzZS4gVGhpcyBzeXN0ZW0gd29ya3MgbGlrZSB0aGUgYW5pbWF0aW9uIHN5c3RlbSBwcmVzZW50IHdpdGggbmdDbGFzcyBleGNlcHQgdGhhdFxuICogeW91IG11c3QgYWxzbyBpbmNsdWRlIHRoZSAhaW1wb3J0YW50IGZsYWcgdG8gb3ZlcnJpZGUgdGhlIGRpc3BsYXkgcHJvcGVydHlcbiAqIHNvIHRoYXQgeW91IGNhbiBwZXJmb3JtIGFuIGFuaW1hdGlvbiB3aGVuIHRoZSBlbGVtZW50IGlzIGhpZGRlbiBkdXJpbmcgdGhlIHRpbWUgb2YgdGhlIGFuaW1hdGlvbi5cbiAqXG4gKiBgYGBjc3NcbiAqIC8vXG4gKiAvL2Egd29ya2luZyBleGFtcGxlIGNhbiBiZSBmb3VuZCBhdCB0aGUgYm90dG9tIG9mIHRoaXMgcGFnZVxuICogLy9cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLCAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7XG4gKiAgIC8mIzQyOyB0aGlzIGlzIHJlcXVpcmVkIGFzIG9mIDEuM3ggdG8gcHJvcGVybHlcbiAqICAgICAgYXBwbHkgYWxsIHN0eWxpbmcgaW4gYSBzaG93L2hpZGUgYW5pbWF0aW9uICYjNDI7L1xuICogICB0cmFuc2l0aW9uOiAwcyBsaW5lYXIgYWxsO1xuICogfVxuICpcbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLWFjdGl2ZSxcbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7XG4gKiAgIC8mIzQyOyB0aGUgdHJhbnNpdGlvbiBpcyBkZWZpbmVkIGluIHRoZSBhY3RpdmUgY2xhc3MgJiM0MjsvXG4gKiAgIHRyYW5zaXRpb246IDFzIGxpbmVhciBhbGw7XG4gKiB9XG4gKlxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLjAtYmV0YS4xMSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgdGhlIGRpc3BsYXlcbiAqIHByb3BlcnR5IHRvIGJsb2NrIGR1cmluZyBhbmltYXRpb24gc3RhdGVzLS1uZ0FuaW1hdGUgd2lsbCBoYW5kbGUgdGhlIHN0eWxlIHRvZ2dsaW5nIGF1dG9tYXRpY2FsbHkgZm9yIHlvdS5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogYWRkQ2xhc3M6IGAubmctaGlkZWAgLSBoYXBwZW5zIGFmdGVyIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSBhbmQgdGhlIGp1c3QgYmVmb3JlIGNvbnRlbnRzIGFyZSBzZXQgdG8gdmlzaWJsZVxuICogcmVtb3ZlQ2xhc3M6IGAubmctaGlkZWAgLSBoYXBwZW5zIGFmdGVyIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIG5vbiB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlblxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1Nob3cgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeVxuICogICAgIHRoZW4gdGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgQ2xpY2sgbWU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIiBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5nSGlkZVwiPjxici8+XG4gICAgICA8ZGl2PlxuICAgICAgICBTaG93OlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLXNob3dcIiBuZy1zaG93PVwiY2hlY2tlZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtdXBcIj48L3NwYW4+IEkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIEhpZGU6XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtc2hvd1wiIG5nLWhpZGU9XCJjaGVja2VkXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRodW1icy1kb3duXCI+PC9zcGFuPiBJIGhpZGUgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJnbHlwaGljb25zLmNzc1wiPlxuICAgICAgQGltcG9ydCB1cmwoLi4vLi4vY29tcG9uZW50cy9ib290c3RyYXAtMy4xLjEvY3NzL2Jvb3RzdHJhcC5jc3MpO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLXNob3cge1xuICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUtYWRkLCAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUtcmVtb3ZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIGxpbmVhciAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUge1xuICAgICAgICBsaW5lLWhlaWdodDogMDtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgcGFkZGluZzogMCAxMHB4O1xuICAgICAgfVxuXG4gICAgICAuY2hlY2stZWxlbWVudCB7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHRodW1ic1VwID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy11cCcpKTtcbiAgICAgIHZhciB0aHVtYnNEb3duID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy1kb3duJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXNob3cgLyBuZy1oaWRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh0aHVtYnNVcC5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KHRodW1ic0Rvd24uaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuXG4gICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTtcblxuICAgICAgICBleHBlY3QodGh1bWJzVXAuaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QodGh1bWJzRG93bi5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdTaG93RGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nU2hvdywgZnVuY3Rpb24gbmdTaG93V2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gd2UncmUgYWRkaW5nIGEgdGVtcG9yYXJ5LCBhbmltYXRpb24tc3BlY2lmaWMgY2xhc3MgZm9yIG5nLWhpZGUgc2luY2UgdGhpcyB3YXlcbiAgICAgICAgLy8gd2UgY2FuIGNvbnRyb2wgd2hlbiB0aGUgZWxlbWVudCBpcyBhY3R1YWxseSBkaXNwbGF5ZWQgb24gc2NyZWVuIHdpdGhvdXQgaGF2aW5nXG4gICAgICAgIC8vIHRvIGhhdmUgYSBnbG9iYWwvZ3JlZWR5IENTUyBzZWxlY3RvciB0aGF0IGJyZWFrcyB3aGVuIG90aGVyIGFuaW1hdGlvbnMgYXJlIHJ1bi5cbiAgICAgICAgLy8gUmVhZDogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTEwMyNpc3N1ZWNvbW1lbnQtNTgzMzU4NDVcbiAgICAgICAgJGFuaW1hdGVbdmFsdWUgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oZWxlbWVudCwgTkdfSElERV9DTEFTUywge1xuICAgICAgICAgIHRlbXBDbGFzc2VzOiBOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0hpZGVcbiAqIEBtdWx0aUVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdIaWRlYCBkaXJlY3RpdmUgc2hvd3Mgb3IgaGlkZXMgdGhlIGdpdmVuIEhUTUwgZWxlbWVudCBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvblxuICogcHJvdmlkZWQgdG8gdGhlIGBuZ0hpZGVgIGF0dHJpYnV0ZS4gVGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIGJ5IHJlbW92aW5nIG9yIGFkZGluZ1xuICogdGhlIGBuZy1oaWRlYCBDU1MgY2xhc3Mgb250byB0aGUgZWxlbWVudC4gVGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHByZWRlZmluZWRcbiAqIGluIEFuZ3VsYXJKUyBhbmQgc2V0cyB0aGUgZGlzcGxheSBzdHlsZSB0byBub25lICh1c2luZyBhbiAhaW1wb3J0YW50IGZsYWcpLlxuICogRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBodG1sIGZpbGUgKHNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuXG4gKlxuICogYGBgaHRtbFxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIHRydXRoeSAoZWxlbWVudCBpcyBoaWRkZW4pIC0tPlxuICogPGRpdiBuZy1oaWRlPVwibXlWYWx1ZVwiIGNsYXNzPVwibmctaGlkZVwiPjwvZGl2PlxuICpcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyBmYWxzeSAoZWxlbWVudCBpcyB2aXNpYmxlKSAtLT5cbiAqIDxkaXYgbmctaGlkZT1cIm15VmFsdWVcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIHRoZW4gdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBjbGFzc1xuICogYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGNhdXNpbmcgaXQgdG8gYmVjb21lIGhpZGRlbi4gV2hlbiBmYWxzeSwgdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHJlbW92ZWRcbiAqIGZyb20gdGhlIGVsZW1lbnQgY2F1c2luZyB0aGUgZWxlbWVudCBub3QgdG8gYXBwZWFyIGhpZGRlbi5cbiAqXG4gKiAjIyBXaHkgaXMgIWltcG9ydGFudCB1c2VkP1xuICpcbiAqIFlvdSBtYXkgYmUgd29uZGVyaW5nIHdoeSAhaW1wb3J0YW50IGlzIHVzZWQgZm9yIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gVGhpcyBpcyBiZWNhdXNlIHRoZSBgLm5nLWhpZGVgIHNlbGVjdG9yXG4gKiBjYW4gYmUgZWFzaWx5IG92ZXJyaWRkZW4gYnkgaGVhdmllciBzZWxlY3RvcnMuIEZvciBleGFtcGxlLCBzb21ldGhpbmcgYXMgc2ltcGxlXG4gKiBhcyBjaGFuZ2luZyB0aGUgZGlzcGxheSBzdHlsZSBvbiBhIEhUTUwgbGlzdCBpdGVtIHdvdWxkIG1ha2UgaGlkZGVuIGVsZW1lbnRzIGFwcGVhciB2aXNpYmxlLlxuICogVGhpcyBhbHNvIGJlY29tZXMgYSBiaWdnZXIgaXNzdWUgd2hlbiBkZWFsaW5nIHdpdGggQ1NTIGZyYW1ld29ya3MuXG4gKlxuICogQnkgdXNpbmcgIWltcG9ydGFudCwgdGhlIHNob3cgYW5kIGhpZGUgYmVoYXZpb3Igd2lsbCB3b3JrIGFzIGV4cGVjdGVkIGRlc3BpdGUgYW55IGNsYXNoIGJldHdlZW4gQ1NTIHNlbGVjdG9yXG4gKiBzcGVjaWZpY2l0eSAod2hlbiAhaW1wb3J0YW50IGlzbid0IHVzZWQgd2l0aCBhbnkgY29uZmxpY3Rpbmcgc3R5bGVzKS4gSWYgYSBkZXZlbG9wZXIgY2hvb3NlcyB0byBvdmVycmlkZSB0aGVcbiAqIHN0eWxpbmcgdG8gY2hhbmdlIGhvdyB0byBoaWRlIGFuIGVsZW1lbnQgdGhlbiBpdCBpcyBqdXN0IGEgbWF0dGVyIG9mIHVzaW5nICFpbXBvcnRhbnQgaW4gdGhlaXIgb3duIENTUyBjb2RlLlxuICpcbiAqICMjIyBPdmVycmlkaW5nIGAubmctaGlkZWBcbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgYC5uZy1oaWRlYCBjbGFzcyB3aWxsIHN0eWxlIHRoZSBlbGVtZW50IHdpdGggYGRpc3BsYXk6IG5vbmUhaW1wb3J0YW50YC4gSWYgeW91IHdpc2ggdG8gY2hhbmdlXG4gKiB0aGUgaGlkZSBiZWhhdmlvciB3aXRoIG5nU2hvdy9uZ0hpZGUgdGhlbiB0aGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXN0YXRpbmcgdGhlIHN0eWxlcyBmb3IgdGhlIGAubmctaGlkZWBcbiAqIGNsYXNzIGluIENTUzpcbiAqXG4gKiBgYGBjc3NcbiAqIC5uZy1oaWRlIHtcbiAqICAgLyYjNDI7IHRoaXMgaXMganVzdCBhbm90aGVyIGZvcm0gb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvXG4gKiAgIGRpc3BsYXk6IGJsb2NrIWltcG9ydGFudDtcbiAqICAgcG9zaXRpb246IGFic29sdXRlO1xuICogICB0b3A6IC05OTk5cHg7XG4gKiAgIGxlZnQ6IC05OTk5cHg7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBCeSBkZWZhdWx0IHlvdSBkb24ndCBuZWVkIHRvIG92ZXJyaWRlIGluIENTUyBhbnl0aGluZyBhbmQgdGhlIGFuaW1hdGlvbnMgd2lsbCB3b3JrIGFyb3VuZCB0aGUgZGlzcGxheSBzdHlsZS5cbiAqXG4gKiAjIyBBIG5vdGUgYWJvdXQgYW5pbWF0aW9ucyB3aXRoIGBuZ0hpZGVgXG4gKlxuICogQW5pbWF0aW9ucyBpbiBuZ1Nob3cvbmdIaWRlIHdvcmsgd2l0aCB0aGUgc2hvdyBhbmQgaGlkZSBldmVudHMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gdGhlIGRpcmVjdGl2ZSBleHByZXNzaW9uXG4gKiBpcyB0cnVlIGFuZCBmYWxzZS4gVGhpcyBzeXN0ZW0gd29ya3MgbGlrZSB0aGUgYW5pbWF0aW9uIHN5c3RlbSBwcmVzZW50IHdpdGggbmdDbGFzcywgZXhjZXB0IHRoYXQgdGhlIGAubmctaGlkZWBcbiAqIENTUyBjbGFzcyBpcyBhZGRlZCBhbmQgcmVtb3ZlZCBmb3IgeW91IGluc3RlYWQgb2YgeW91ciBvd24gQ1NTIGNsYXNzLlxuICpcbiAqIGBgYGNzc1xuICogLy9cbiAqIC8vYSB3b3JraW5nIGV4YW1wbGUgY2FuIGJlIGZvdW5kIGF0IHRoZSBib3R0b20gb2YgdGhpcyBwYWdlXG4gKiAvL1xuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQsIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHtcbiAqICAgdHJhbnNpdGlvbjogMC41cyBsaW5lYXIgYWxsO1xuICogfVxuICpcbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZS5uZy1oaWRlLXJlbW92ZS1hY3RpdmUgeyAuLi4gfVxuICogYGBgXG4gKlxuICogS2VlcCBpbiBtaW5kIHRoYXQsIGFzIG9mIEFuZ3VsYXJKUyB2ZXJzaW9uIDEuMy4wLWJldGEuMTEsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2hhbmdlIHRoZSBkaXNwbGF5XG4gKiBwcm9wZXJ0eSB0byBibG9jayBkdXJpbmcgYW5pbWF0aW9uIHN0YXRlcy0tbmdBbmltYXRlIHdpbGwgaGFuZGxlIHRoZSBzdHlsZSB0b2dnbGluZyBhdXRvbWF0aWNhbGx5IGZvciB5b3UuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIHJlbW92ZUNsYXNzOiBgLm5nLWhpZGVgIC0gaGFwcGVucyBhZnRlciB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlblxuICogYWRkQ2xhc3M6IGAubmctaGlkZWAgLSBoYXBwZW5zIGFmdGVyIHRoZSBgbmdIaWRlYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIG5vbiB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIHZpc2libGVcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdIaWRlIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHkgdGhlblxuICogICAgIHRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiByZXNwZWN0aXZlbHkuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIENsaWNrIG1lOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuZ1Nob3dcIj48YnIvPlxuICAgICAgPGRpdj5cbiAgICAgICAgU2hvdzpcbiAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1oaWRlXCIgbmctc2hvdz1cImNoZWNrZWRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdGh1bWJzLXVwXCI+PC9zcGFuPiBJIHNob3cgdXAgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICBIaWRlOlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLWhpZGVcIiBuZy1oaWRlPVwiY2hlY2tlZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtZG93blwiPjwvc3Bhbj4gSSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiZ2x5cGhpY29ucy5jc3NcIj5cbiAgICAgIEBpbXBvcnQgdXJsKC4uLy4uL2NvbXBvbmVudHMvYm9vdHN0cmFwLTMuMS4xL2Nzcy9ib290c3RyYXAuY3NzKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1oaWRlIHtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIGxpbmVhciAwLjVzO1xuICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1oaWRlLm5nLWhpZGUge1xuICAgICAgICBsaW5lLWhlaWdodDogMDtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgcGFkZGluZzogMCAxMHB4O1xuICAgICAgfVxuXG4gICAgICAuY2hlY2stZWxlbWVudCB7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHRodW1ic1VwID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy11cCcpKTtcbiAgICAgIHZhciB0aHVtYnNEb3duID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy1kb3duJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXNob3cgLyBuZy1oaWRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh0aHVtYnNVcC5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KHRodW1ic0Rvd24uaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuXG4gICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTtcblxuICAgICAgICBleHBlY3QodGh1bWJzVXAuaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QodGh1bWJzRG93bi5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdIaWRlRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nSGlkZSwgZnVuY3Rpb24gbmdIaWRlV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gVGhlIGNvbW1lbnQgaW5zaWRlIG9mIHRoZSBuZ1Nob3dEaXJlY3RpdmUgZXhwbGFpbnMgd2h5IHdlIGFkZCBhbmRcbiAgICAgICAgLy8gcmVtb3ZlIGEgdGVtcG9yYXJ5IGNsYXNzIGZvciB0aGUgc2hvdy9oaWRlIGFuaW1hdGlvblxuICAgICAgICAkYW5pbWF0ZVt2YWx1ZSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShlbGVtZW50LE5HX0hJREVfQ0xBU1MsIHtcbiAgICAgICAgICB0ZW1wQ2xhc3NlczogTkdfSElERV9JTl9QUk9HUkVTU19DTEFTU1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3R5bGVcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1N0eWxlYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzZXQgQ1NTIHN0eWxlIG9uIGFuIEhUTUwgZWxlbWVudCBjb25kaXRpb25hbGx5LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1N0eWxlXG4gKlxuICoge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gd2hpY2ggZXZhbHMgdG8gYW5cbiAqIG9iamVjdCB3aG9zZSBrZXlzIGFyZSBDU1Mgc3R5bGUgbmFtZXMgYW5kIHZhbHVlcyBhcmUgY29ycmVzcG9uZGluZyB2YWx1ZXMgZm9yIHRob3NlIENTU1xuICoga2V5cy5cbiAqXG4gKiBTaW5jZSBzb21lIENTUyBzdHlsZSBuYW1lcyBhcmUgbm90IHZhbGlkIGtleXMgZm9yIGFuIG9iamVjdCwgdGhleSBtdXN0IGJlIHF1b3RlZC5cbiAqIFNlZSB0aGUgJ2JhY2tncm91bmQtY29sb3InIHN0eWxlIGluIHRoZSBleGFtcGxlIGJlbG93LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cInNldCBjb2xvclwiIG5nLWNsaWNrPVwibXlTdHlsZT17Y29sb3I6J3JlZCd9XCI+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXQgYmFja2dyb3VuZFwiIG5nLWNsaWNrPVwibXlTdHlsZT17J2JhY2tncm91bmQtY29sb3InOidibHVlJ31cIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cImNsZWFyXCIgbmctY2xpY2s9XCJteVN0eWxlPXt9XCI+XG4gICAgICAgIDxici8+XG4gICAgICAgIDxzcGFuIG5nLXN0eWxlPVwibXlTdHlsZVwiPlNhbXBsZSBUZXh0PC9zcGFuPlxuICAgICAgICA8cHJlPm15U3R5bGU9e3tteVN0eWxlfX08L3ByZT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgc3BhbiB7XG4gICAgICAgICBjb2xvcjogYmxhY2s7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgY29sb3JTcGFuID0gZWxlbWVudChieS5jc3MoJ3NwYW4nKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXN0eWxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnaW5wdXRbdmFsdWU9XFwnc2V0IGNvbG9yXFwnXScpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGNvbG9yU3Bhbi5nZXRDc3NWYWx1ZSgnY29sb3InKSkudG9CZSgncmdiYSgyNTUsIDAsIDAsIDEpJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnaW5wdXRbdmFsdWU9Y2xlYXJdJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nU3R5bGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZShmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICBzY29wZS4kd2F0Y2goYXR0ci5uZ1N0eWxlLCBmdW5jdGlvbiBuZ1N0eWxlV2F0Y2hBY3Rpb24obmV3U3R5bGVzLCBvbGRTdHlsZXMpIHtcbiAgICBpZiAob2xkU3R5bGVzICYmIChuZXdTdHlsZXMgIT09IG9sZFN0eWxlcykpIHtcbiAgICAgIGZvckVhY2gob2xkU3R5bGVzLCBmdW5jdGlvbih2YWwsIHN0eWxlKSB7IGVsZW1lbnQuY3NzKHN0eWxlLCAnJyk7fSk7XG4gICAgfVxuICAgIGlmIChuZXdTdHlsZXMpIGVsZW1lbnQuY3NzKG5ld1N0eWxlcyk7XG4gIH0sIHRydWUpO1xufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTd2l0Y2hcbiAqIEByZXN0cmljdCBFQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1N3aXRjaGAgZGlyZWN0aXZlIGlzIHVzZWQgdG8gY29uZGl0aW9uYWxseSBzd2FwIERPTSBzdHJ1Y3R1cmUgb24geW91ciB0ZW1wbGF0ZSBiYXNlZCBvbiBhIHNjb3BlIGV4cHJlc3Npb24uXG4gKiBFbGVtZW50cyB3aXRoaW4gYG5nU3dpdGNoYCBidXQgd2l0aG91dCBgbmdTd2l0Y2hXaGVuYCBvciBgbmdTd2l0Y2hEZWZhdWx0YCBkaXJlY3RpdmVzIHdpbGwgYmUgcHJlc2VydmVkIGF0IHRoZSBsb2NhdGlvblxuICogYXMgc3BlY2lmaWVkIGluIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGl0c2VsZiB3b3JrcyBzaW1pbGFyIHRvIG5nSW5jbHVkZSwgaG93ZXZlciwgaW5zdGVhZCBvZiBkb3dubG9hZGluZyB0ZW1wbGF0ZSBjb2RlIChvciBsb2FkaW5nIGl0XG4gKiBmcm9tIHRoZSB0ZW1wbGF0ZSBjYWNoZSksIGBuZ1N3aXRjaGAgc2ltcGx5IGNob29zZXMgb25lIG9mIHRoZSBuZXN0ZWQgZWxlbWVudHMgYW5kIG1ha2VzIGl0IHZpc2libGUgYmFzZWQgb24gd2hpY2ggZWxlbWVudFxuICogbWF0Y2hlcyB0aGUgdmFsdWUgb2J0YWluZWQgZnJvbSB0aGUgZXZhbHVhdGVkIGV4cHJlc3Npb24uIEluIG90aGVyIHdvcmRzLCB5b3UgZGVmaW5lIGEgY29udGFpbmVyIGVsZW1lbnRcbiAqICh3aGVyZSB5b3UgcGxhY2UgdGhlIGRpcmVjdGl2ZSksIHBsYWNlIGFuIGV4cHJlc3Npb24gb24gdGhlICoqYG9uPVwiLi4uXCJgIGF0dHJpYnV0ZSoqXG4gKiAob3IgdGhlICoqYG5nLXN3aXRjaD1cIi4uLlwiYCBhdHRyaWJ1dGUqKiksIGRlZmluZSBhbnkgaW5uZXIgZWxlbWVudHMgaW5zaWRlIG9mIHRoZSBkaXJlY3RpdmUgYW5kIHBsYWNlXG4gKiBhIHdoZW4gYXR0cmlidXRlIHBlciBlbGVtZW50LiBUaGUgd2hlbiBhdHRyaWJ1dGUgaXMgdXNlZCB0byBpbmZvcm0gbmdTd2l0Y2ggd2hpY2ggZWxlbWVudCB0byBkaXNwbGF5IHdoZW4gdGhlIG9uXG4gKiBleHByZXNzaW9uIGlzIGV2YWx1YXRlZC4gSWYgYSBtYXRjaGluZyBleHByZXNzaW9uIGlzIG5vdCBmb3VuZCB2aWEgYSB3aGVuIGF0dHJpYnV0ZSB0aGVuIGFuIGVsZW1lbnQgd2l0aCB0aGUgZGVmYXVsdFxuICogYXR0cmlidXRlIGlzIGRpc3BsYXllZC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogQmUgYXdhcmUgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlcyB0byBtYXRjaCBhZ2FpbnN0IGNhbm5vdCBiZSBleHByZXNzaW9ucy4gVGhleSBhcmUgaW50ZXJwcmV0ZWRcbiAqIGFzIGxpdGVyYWwgc3RyaW5nIHZhbHVlcyB0byBtYXRjaCBhZ2FpbnN0LlxuICogRm9yIGV4YW1wbGUsICoqYG5nLXN3aXRjaC13aGVuPVwic29tZVZhbFwiYCoqIHdpbGwgbWF0Y2ggYWdhaW5zdCB0aGUgc3RyaW5nIGBcInNvbWVWYWxcImAgbm90IGFnYWluc3QgdGhlXG4gKiB2YWx1ZSBvZiB0aGUgZXhwcmVzc2lvbiBgJHNjb3BlLnNvbWVWYWxgLlxuICogPC9kaXY+XG5cbiAqIEBhbmltYXRpb25zXG4gKiBlbnRlciAtIGhhcHBlbnMgYWZ0ZXIgdGhlIG5nU3dpdGNoIGNvbnRlbnRzIGNoYW5nZSBhbmQgdGhlIG1hdGNoZWQgY2hpbGQgZWxlbWVudCBpcyBwbGFjZWQgaW5zaWRlIHRoZSBjb250YWluZXJcbiAqIGxlYXZlIC0gaGFwcGVucyBqdXN0IGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIGp1c3QgYmVmb3JlIHRoZSBmb3JtZXIgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gKlxuICogQHVzYWdlXG4gKlxuICogYGBgXG4gKiA8QU5ZIG5nLXN3aXRjaD1cImV4cHJlc3Npb25cIj5cbiAqICAgPEFOWSBuZy1zd2l0Y2gtd2hlbj1cIm1hdGNoVmFsdWUxXCI+Li4uPC9BTlk+XG4gKiAgIDxBTlkgbmctc3dpdGNoLXdoZW49XCJtYXRjaFZhbHVlMlwiPi4uLjwvQU5ZPlxuICogICA8QU5ZIG5nLXN3aXRjaC1kZWZhdWx0Pi4uLjwvQU5ZPlxuICogPC9BTlk+XG4gKiBgYGBcbiAqXG4gKlxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgMTIwMFxuICogQHBhcmFtIHsqfSBuZ1N3aXRjaHxvbiBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QgPGNvZGU+bmctc3dpdGNoLXdoZW48L2NvZGU+LlxuICogT24gY2hpbGQgZWxlbWVudHMgYWRkOlxuICpcbiAqICogYG5nU3dpdGNoV2hlbmA6IHRoZSBjYXNlIHN0YXRlbWVudCB0byBtYXRjaCBhZ2FpbnN0LiBJZiBtYXRjaCB0aGVuIHRoaXNcbiAqICAgY2FzZSB3aWxsIGJlIGRpc3BsYXllZC4gSWYgdGhlIHNhbWUgbWF0Y2ggYXBwZWFycyBtdWx0aXBsZSB0aW1lcywgYWxsIHRoZVxuICogICBlbGVtZW50cyB3aWxsIGJlIGRpc3BsYXllZC5cbiAqICogYG5nU3dpdGNoRGVmYXVsdGA6IHRoZSBkZWZhdWx0IGNhc2Ugd2hlbiBubyBvdGhlciBjYXNlIG1hdGNoLiBJZiB0aGVyZVxuICogICBhcmUgbXVsdGlwbGUgZGVmYXVsdCBjYXNlcywgYWxsIG9mIHRoZW0gd2lsbCBiZSBkaXNwbGF5ZWQgd2hlbiBubyBvdGhlclxuICogICBjYXNlIG1hdGNoLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJzd2l0Y2hFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJzZWxlY3Rpb25cIiBuZy1vcHRpb25zPVwiaXRlbSBmb3IgaXRlbSBpbiBpdGVtc1wiPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPGNvZGU+c2VsZWN0aW9uPXt7c2VsZWN0aW9ufX08L2NvZGU+XG4gICAgICAgIDxoci8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlLXN3aXRjaC1jb250YWluZXJcIlxuICAgICAgICAgIG5nLXN3aXRjaCBvbj1cInNlbGVjdGlvblwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLXdoZW49XCJzZXR0aW5nc1wiPlNldHRpbmdzIERpdjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLXdoZW49XCJob21lXCI+SG9tZSBTcGFuPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtZGVmYXVsdD5kZWZhdWx0PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdzd2l0Y2hFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuaXRlbXMgPSBbJ3NldHRpbmdzJywgJ2hvbWUnLCAnb3RoZXInXTtcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0aW9uID0gJHNjb3BlLml0ZW1zWzBdO1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lciB7XG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBoZWlnaHQ6NDBweDtcbiAgICAgICAgb3ZlcmZsb3c6aGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gge1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1hbmltYXRlIHtcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuXG4gICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICB0b3A6MDtcbiAgICAgICAgbGVmdDowO1xuICAgICAgICByaWdodDowO1xuICAgICAgICBib3R0b206MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSxcbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1lbnRlciB7XG4gICAgICAgIHRvcDotNTBweDtcbiAgICAgIH1cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1sZWF2ZSxcbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICB0b3A6MDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHN3aXRjaEVsZW0gPSBlbGVtZW50KGJ5LmNzcygnW25nLXN3aXRjaF0nKSk7XG4gICAgICB2YXIgc2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgnc2VsZWN0aW9uJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIHN0YXJ0IGluIHNldHRpbmdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvU2V0dGluZ3MgRGl2Lyk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRvIGhvbWUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMSkuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Ib21lIFNwYW4vKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBzZWxlY3QgZGVmYXVsdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgyKS5jbGljaygpO1xuICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL2RlZmF1bHQvKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdTd2l0Y2hEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnbmdTd2l0Y2gnLFxuXG4gICAgLy8gYXNrcyBmb3IgJHNjb3BlIHRvIGZvb2wgdGhlIEJDIGNvbnRyb2xsZXIgbW9kdWxlXG4gICAgY29udHJvbGxlcjogWyckc2NvcGUnLCBmdW5jdGlvbiBuZ1N3aXRjaENvbnRyb2xsZXIoKSB7XG4gICAgIHRoaXMuY2FzZXMgPSB7fTtcbiAgICB9XSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgbmdTd2l0Y2hDb250cm9sbGVyKSB7XG4gICAgICB2YXIgd2F0Y2hFeHByID0gYXR0ci5uZ1N3aXRjaCB8fCBhdHRyLm9uLFxuICAgICAgICAgIHNlbGVjdGVkVHJhbnNjbHVkZXMgPSBbXSxcbiAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzID0gW10sXG4gICAgICAgICAgcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMgPSBbXSxcbiAgICAgICAgICBzZWxlY3RlZFNjb3BlcyA9IFtdO1xuXG4gICAgICB2YXIgc3BsaWNlRmFjdG9yeSA9IGZ1bmN0aW9uKGFycmF5LCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTsgfTtcbiAgICAgIH07XG5cbiAgICAgIHNjb3BlLiR3YXRjaCh3YXRjaEV4cHIsIGZ1bmN0aW9uIG5nU3dpdGNoV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGksIGlpO1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHByZXZpb3VzTGVhdmVBbmltYXRpb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5jYW5jZWwocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzTGVhdmVBbmltYXRpb25zLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBzZWxlY3RlZFNjb3Blcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkID0gZ2V0QmxvY2tOb2RlcyhzZWxlY3RlZEVsZW1lbnRzW2ldLmNsb25lKTtcbiAgICAgICAgICBzZWxlY3RlZFNjb3Blc1tpXS4kZGVzdHJveSgpO1xuICAgICAgICAgIHZhciBwcm9taXNlID0gcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnNbaV0gPSAkYW5pbWF0ZS5sZWF2ZShzZWxlY3RlZCk7XG4gICAgICAgICAgcHJvbWlzZS50aGVuKHNwbGljZUZhY3RvcnkocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMsIGkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGVjdGVkRWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICAgICAgc2VsZWN0ZWRTY29wZXMubGVuZ3RoID0gMDtcblxuICAgICAgICBpZiAoKHNlbGVjdGVkVHJhbnNjbHVkZXMgPSBuZ1N3aXRjaENvbnRyb2xsZXIuY2FzZXNbJyEnICsgdmFsdWVdIHx8IG5nU3dpdGNoQ29udHJvbGxlci5jYXNlc1snPyddKSkge1xuICAgICAgICAgIGZvckVhY2goc2VsZWN0ZWRUcmFuc2NsdWRlcywgZnVuY3Rpb24oc2VsZWN0ZWRUcmFuc2NsdWRlKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFRyYW5zY2x1ZGUudHJhbnNjbHVkZShmdW5jdGlvbihjYXNlRWxlbWVudCwgc2VsZWN0ZWRTY29wZSkge1xuICAgICAgICAgICAgICBzZWxlY3RlZFNjb3Blcy5wdXNoKHNlbGVjdGVkU2NvcGUpO1xuICAgICAgICAgICAgICB2YXIgYW5jaG9yID0gc2VsZWN0ZWRUcmFuc2NsdWRlLmVsZW1lbnQ7XG4gICAgICAgICAgICAgIGNhc2VFbGVtZW50W2Nhc2VFbGVtZW50Lmxlbmd0aCsrXSA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJyBlbmQgbmdTd2l0Y2hXaGVuOiAnKTtcbiAgICAgICAgICAgICAgdmFyIGJsb2NrID0geyBjbG9uZTogY2FzZUVsZW1lbnQgfTtcblxuICAgICAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjYXNlRWxlbWVudCwgYW5jaG9yLnBhcmVudCgpLCBhbmNob3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gIHByaW9yaXR5OiAxMjAwLFxuICByZXF1aXJlOiAnXm5nU3dpdGNoJyxcbiAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG4gICAgY3RybC5jYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dID0gKGN0cmwuY2FzZXNbJyEnICsgYXR0cnMubmdTd2l0Y2hXaGVuXSB8fCBbXSk7XG4gICAgY3RybC5jYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dLnB1c2goeyB0cmFuc2NsdWRlOiAkdHJhbnNjbHVkZSwgZWxlbWVudDogZWxlbWVudCB9KTtcbiAgfVxufSk7XG5cbnZhciBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgcHJpb3JpdHk6IDEyMDAsXG4gIHJlcXVpcmU6ICdebmdTd2l0Y2gnLFxuICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgIGN0cmwuY2FzZXNbJz8nXSA9IChjdHJsLmNhc2VzWyc/J10gfHwgW10pO1xuICAgIGN0cmwuY2FzZXNbJz8nXS5wdXNoKHsgdHJhbnNjbHVkZTogJHRyYW5zY2x1ZGUsIGVsZW1lbnQ6IGVsZW1lbnQgfSk7XG4gICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1RyYW5zY2x1ZGVcbiAqIEByZXN0cmljdCBFQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERpcmVjdGl2ZSB0aGF0IG1hcmtzIHRoZSBpbnNlcnRpb24gcG9pbnQgZm9yIHRoZSB0cmFuc2NsdWRlZCBET00gb2YgdGhlIG5lYXJlc3QgcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHVzZXMgdHJhbnNjbHVzaW9uLlxuICpcbiAqIEFueSBleGlzdGluZyBjb250ZW50IG9mIHRoZSBlbGVtZW50IHRoYXQgdGhpcyBkaXJlY3RpdmUgaXMgcGxhY2VkIG9uIHdpbGwgYmUgcmVtb3ZlZCBiZWZvcmUgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgaW5zZXJ0ZWQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cInRyYW5zY2x1ZGVFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd0cmFuc2NsdWRlRXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5kaXJlY3RpdmUoJ3BhbmUnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAgICAgIHNjb3BlOiB7IHRpdGxlOidAJyB9LFxuICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHN0eWxlPVwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6IGdyYXlcIj57e3RpdGxlfX08L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bmctdHJhbnNjbHVkZT48L25nLXRyYW5zY2x1ZGU+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgfSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICRzY29wZS50aXRsZSA9ICdMb3JlbSBJcHN1bSc7XG4gICAgICAgICAgICRzY29wZS50ZXh0ID0gJ05lcXVlIHBvcnJvIHF1aXNxdWFtIGVzdCBxdWkgZG9sb3JlbSBpcHN1bSBxdWlhIGRvbG9yLi4uJztcbiAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwidGl0bGVcIiBhcmlhLWxhYmVsPVwidGl0bGVcIj4gPGJyLz5cbiAgICAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cInRleHRcIiBhcmlhLWxhYmVsPVwidGV4dFwiPjwvdGV4dGFyZWE+IDxici8+XG4gICAgICAgICA8cGFuZSB0aXRsZT1cInt7dGl0bGV9fVwiPnt7dGV4dH19PC9wYW5lPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBoYXZlIHRyYW5zY2x1ZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRpdGxlRWxlbWVudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RpdGxlJykpO1xuICAgICAgICAgIHRpdGxlRWxlbWVudC5jbGVhcigpO1xuICAgICAgICAgIHRpdGxlRWxlbWVudC5zZW5kS2V5cygnVElUTEUnKTtcbiAgICAgICAgICB2YXIgdGV4dEVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0ZXh0JykpO1xuICAgICAgICAgIHRleHRFbGVtZW50LmNsZWFyKCk7XG4gICAgICAgICAgdGV4dEVsZW1lbnQuc2VuZEtleXMoJ1RFWFQnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd0aXRsZScpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RJVExFJyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGV4dCcpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RFWFQnKTtcbiAgICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKi9cbnZhciBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIHJlc3RyaWN0OiAnRUFDJyxcbiAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCBjb250cm9sbGVyLCAkdHJhbnNjbHVkZSkge1xuICAgIGlmICghJHRyYW5zY2x1ZGUpIHtcbiAgICAgIHRocm93IG1pbkVycignbmdUcmFuc2NsdWRlJykoJ29ycGhhbicsXG4gICAgICAgJ0lsbGVnYWwgdXNlIG9mIG5nVHJhbnNjbHVkZSBkaXJlY3RpdmUgaW4gdGhlIHRlbXBsYXRlISAnICtcbiAgICAgICAnTm8gcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHJlcXVpcmVzIGEgdHJhbnNjbHVzaW9uIGZvdW5kLiAnICtcbiAgICAgICAnRWxlbWVudDogezB9JyxcbiAgICAgICBzdGFydGluZ1RhZygkZWxlbWVudCkpO1xuICAgIH1cblxuICAgICR0cmFuc2NsdWRlKGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAkZWxlbWVudC5lbXB0eSgpO1xuICAgICAgJGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgc2NyaXB0XG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTG9hZCB0aGUgY29udGVudCBvZiBhIGA8c2NyaXB0PmAgZWxlbWVudCBpbnRvIHtAbGluayBuZy4kdGVtcGxhdGVDYWNoZSBgJHRlbXBsYXRlQ2FjaGVgfSwgc28gdGhhdCB0aGVcbiAqIHRlbXBsYXRlIGNhbiBiZSB1c2VkIGJ5IHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIGBuZ0luY2x1ZGVgfSxcbiAqIHtAbGluayBuZ1JvdXRlLmRpcmVjdGl2ZTpuZ1ZpZXcgYG5nVmlld2B9LCBvciB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LiBUaGUgdHlwZSBvZiB0aGVcbiAqIGA8c2NyaXB0PmAgZWxlbWVudCBtdXN0IGJlIHNwZWNpZmllZCBhcyBgdGV4dC9uZy10ZW1wbGF0ZWAsIGFuZCBhIGNhY2hlIG5hbWUgZm9yIHRoZSB0ZW1wbGF0ZSBtdXN0IGJlXG4gKiBhc3NpZ25lZCB0aHJvdWdoIHRoZSBlbGVtZW50J3MgYGlkYCwgd2hpY2ggY2FuIHRoZW4gYmUgdXNlZCBhcyBhIGRpcmVjdGl2ZSdzIGB0ZW1wbGF0ZVVybGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgTXVzdCBiZSBzZXQgdG8gYCd0ZXh0L25nLXRlbXBsYXRlJ2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ2FjaGUgbmFtZSBvZiB0aGUgdGVtcGxhdGUuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGU+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cIi90cGwuaHRtbFwiPlxuICAgICAgICBDb250ZW50IG9mIHRoZSB0ZW1wbGF0ZS5cbiAgICAgIDwvc2NyaXB0PlxuXG4gICAgICA8YSBuZy1jbGljaz1cImN1cnJlbnRUcGw9Jy90cGwuaHRtbCdcIiBpZD1cInRwbC1saW5rXCI+TG9hZCBpbmxpbmVkIHRlbXBsYXRlPC9hPlxuICAgICAgPGRpdiBpZD1cInRwbC1jb250ZW50XCIgbmctaW5jbHVkZSBzcmM9XCJjdXJyZW50VHBsXCI+PC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZSBkZWZpbmVkIGluc2lkZSBzY3JpcHQgdGFnJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjdHBsLWxpbmsnKSkuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcjdHBsLWNvbnRlbnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRoZSB0ZW1wbGF0ZS8pO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBzY3JpcHREaXJlY3RpdmUgPSBbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIGlmIChhdHRyLnR5cGUgPT0gJ3RleHQvbmctdGVtcGxhdGUnKSB7XG4gICAgICAgIHZhciB0ZW1wbGF0ZVVybCA9IGF0dHIuaWQsXG4gICAgICAgICAgICB0ZXh0ID0gZWxlbWVudFswXS50ZXh0O1xuXG4gICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCh0ZW1wbGF0ZVVybCwgdGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBub29wTmdNb2RlbENvbnRyb2xsZXIgPSB7ICRzZXRWaWV3VmFsdWU6IG5vb3AsICRyZW5kZXI6IG5vb3AgfTtcblxuZnVuY3Rpb24gY2hyb21lSGFjayhvcHRpb25FbGVtZW50KSB7XG4gIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zODE0NTlcbiAgLy8gQWRkaW5nIGFuIDxvcHRpb24gc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPiBlbGVtZW50IHRvIGEgPHNlbGVjdCByZXF1aXJlZD1cInJlcXVpcmVkXCI+IHNob3VsZFxuICAvLyBhdXRvbWF0aWNhbGx5IHNlbGVjdCB0aGUgbmV3IGVsZW1lbnRcbiAgaWYgKG9wdGlvbkVsZW1lbnRbMF0uaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpKSB7XG4gICAgb3B0aW9uRWxlbWVudFswXS5zZWxlY3RlZCA9IHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgIHNlbGVjdC5TZWxlY3RDb250cm9sbGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBjb250cm9sbGVyIGZvciB0aGUgYDxzZWxlY3Q+YCBkaXJlY3RpdmUuIFRoaXMgcHJvdmlkZXMgc3VwcG9ydCBmb3IgcmVhZGluZ1xuICogYW5kIHdyaXRpbmcgdGhlIHNlbGVjdGVkIHZhbHVlKHMpIG9mIHRoZSBjb250cm9sIGFuZCBhbHNvIGNvb3JkaW5hdGVzIGR5bmFtaWNhbGx5XG4gKiBhZGRlZCBgPG9wdGlvbj5gIGVsZW1lbnRzLCBwZXJoYXBzIGJ5IGFuIGBuZ1JlcGVhdGAgZGlyZWN0aXZlLlxuICovXG52YXIgU2VsZWN0Q29udHJvbGxlciA9XG4gICAgICAgIFsnJGVsZW1lbnQnLCAnJHNjb3BlJywgJyRhdHRycycsIGZ1bmN0aW9uKCRlbGVtZW50LCAkc2NvcGUsICRhdHRycykge1xuXG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIG9wdGlvbnNNYXAgPSBuZXcgSGFzaE1hcCgpO1xuXG4gIC8vIElmIHRoZSBuZ01vZGVsIGRvZXNuJ3QgZ2V0IHByb3ZpZGVkIHRoZW4gcHJvdmlkZSBhIGR1bW15IG5vb3AgdmVyc2lvbiB0byBwcmV2ZW50IGVycm9yc1xuICBzZWxmLm5nTW9kZWxDdHJsID0gbm9vcE5nTW9kZWxDb250cm9sbGVyO1xuXG4gIC8vIFRoZSBcInVua25vd25cIiBvcHRpb24gaXMgb25lIHRoYXQgaXMgcHJlcGVuZGVkIHRvIHRoZSBsaXN0IGlmIHRoZSB2aWV3VmFsdWVcbiAgLy8gZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb25zLiBXaGVuIGl0IGlzIHJlbmRlcmVkIHRoZSB2YWx1ZSBvZiB0aGUgdW5rbm93blxuICAvLyBvcHRpb24gaXMgJz8gWFhYID8nIHdoZXJlIFhYWCBpcyB0aGUgaGFzaEtleSBvZiB0aGUgdmFsdWUgdGhhdCBpcyBub3Qga25vd24uXG4gIC8vXG4gIC8vIFdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXG4gIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICBzZWxmLnVua25vd25PcHRpb24gPSBqcUxpdGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJykpO1xuICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgdW5rbm93blZhbCA9ICc/ICcgKyBoYXNoS2V5KHZhbCkgKyAnID8nO1xuICAgIHNlbGYudW5rbm93bk9wdGlvbi52YWwodW5rbm93blZhbCk7XG4gICAgJGVsZW1lbnQucHJlcGVuZChzZWxmLnVua25vd25PcHRpb24pO1xuICAgICRlbGVtZW50LnZhbCh1bmtub3duVmFsKTtcbiAgfTtcblxuICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgIC8vIGRpc2FibGUgdW5rbm93biBvcHRpb24gc28gdGhhdCB3ZSBkb24ndCBkbyB3b3JrIHdoZW4gdGhlIHdob2xlIHNlbGVjdCBpcyBiZWluZyBkZXN0cm95ZWRcbiAgICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBub29wO1xuICB9KTtcblxuICBzZWxmLnJlbW92ZVVua25vd25PcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi51bmtub3duT3B0aW9uLnBhcmVudCgpKSBzZWxmLnVua25vd25PcHRpb24ucmVtb3ZlKCk7XG4gIH07XG5cblxuICAvLyBSZWFkIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0IGNvbnRyb2wsIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGNoYW5nZXMgZGVwZW5kaW5nXG4gIC8vIHVwb24gd2hldGhlciB0aGUgc2VsZWN0IGNhbiBoYXZlIG11bHRpcGxlIHZhbHVlcyBhbmQgd2hldGhlciBuZ09wdGlvbnMgaXMgYXQgd29yay5cbiAgc2VsZi5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkU2luZ2xlVmFsdWUoKSB7XG4gICAgc2VsZi5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG4gICAgcmV0dXJuICRlbGVtZW50LnZhbCgpO1xuICB9O1xuXG5cbiAgLy8gV3JpdGUgdGhlIHZhbHVlIHRvIHRoZSBzZWxlY3QgY29udHJvbCwgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgY2hhbmdlcyBkZXBlbmRpbmdcbiAgLy8gdXBvbiB3aGV0aGVyIHRoZSBzZWxlY3QgY2FuIGhhdmUgbXVsdGlwbGUgdmFsdWVzIGFuZCB3aGV0aGVyIG5nT3B0aW9ucyBpcyBhdCB3b3JrLlxuICBzZWxmLndyaXRlVmFsdWUgPSBmdW5jdGlvbiB3cml0ZVNpbmdsZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHNlbGYuaGFzT3B0aW9uKHZhbHVlKSkge1xuICAgICAgc2VsZi5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG4gICAgICAkZWxlbWVudC52YWwodmFsdWUpO1xuICAgICAgaWYgKHZhbHVlID09PSAnJykgc2VsZi5lbXB0eU9wdGlvbi5wcm9wKCdzZWxlY3RlZCcsIHRydWUpOyAvLyB0byBtYWtlIElFOSBoYXBweVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiBzZWxmLmVtcHR5T3B0aW9uKSB7XG4gICAgICAgIHNlbGYucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgICAkZWxlbWVudC52YWwoJycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5yZW5kZXJVbmtub3duT3B0aW9uKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cblxuICAvLyBUZWxsIHRoZSBzZWxlY3QgY29udHJvbCB0aGF0IGFuIG9wdGlvbiwgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUsIGhhcyBiZWVuIGFkZGVkXG4gIHNlbGYuYWRkT3B0aW9uID0gZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgJ1wib3B0aW9uIHZhbHVlXCInKTtcbiAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICBzZWxmLmVtcHR5T3B0aW9uID0gZWxlbWVudDtcbiAgICB9XG4gICAgdmFyIGNvdW50ID0gb3B0aW9uc01hcC5nZXQodmFsdWUpIHx8IDA7XG4gICAgb3B0aW9uc01hcC5wdXQodmFsdWUsIGNvdW50ICsgMSk7XG4gICAgc2VsZi5uZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgY2hyb21lSGFjayhlbGVtZW50KTtcbiAgfTtcblxuICAvLyBUZWxsIHRoZSBzZWxlY3QgY29udHJvbCB0aGF0IGFuIG9wdGlvbiwgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUsIGhhcyBiZWVuIHJlbW92ZWRcbiAgc2VsZi5yZW1vdmVPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBjb3VudCA9IG9wdGlvbnNNYXAuZ2V0KHZhbHVlKTtcbiAgICBpZiAoY291bnQpIHtcbiAgICAgIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgICBvcHRpb25zTWFwLnJlbW92ZSh2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICBzZWxmLmVtcHR5T3B0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zTWFwLnB1dCh2YWx1ZSwgY291bnQgLSAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2VsZWN0IGNvbnRyb2wgaGFzIGFuIG9wdGlvbiBtYXRjaGluZyB0aGUgZ2l2ZW4gdmFsdWVcbiAgc2VsZi5oYXNPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAhIW9wdGlvbnNNYXAuZ2V0KHZhbHVlKTtcbiAgfTtcblxuXG4gIHNlbGYucmVnaXN0ZXJPcHRpb24gPSBmdW5jdGlvbihvcHRpb25TY29wZSwgb3B0aW9uRWxlbWVudCwgb3B0aW9uQXR0cnMsIGludGVycG9sYXRlVmFsdWVGbiwgaW50ZXJwb2xhdGVUZXh0Rm4pIHtcblxuICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlRm4pIHtcbiAgICAgIC8vIFRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgaW50ZXJwb2xhdGVkXG4gICAgICB2YXIgb2xkVmFsO1xuICAgICAgb3B0aW9uQXR0cnMuJG9ic2VydmUoJ3ZhbHVlJywgZnVuY3Rpb24gdmFsdWVBdHRyaWJ1dGVPYnNlcnZlQWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICBpZiAoaXNEZWZpbmVkKG9sZFZhbCkpIHtcbiAgICAgICAgICBzZWxmLnJlbW92ZU9wdGlvbihvbGRWYWwpO1xuICAgICAgICB9XG4gICAgICAgIG9sZFZhbCA9IG5ld1ZhbDtcbiAgICAgICAgc2VsZi5hZGRPcHRpb24obmV3VmFsLCBvcHRpb25FbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGVUZXh0Rm4pIHtcbiAgICAgIC8vIFRoZSB0ZXh0IGNvbnRlbnQgaXMgaW50ZXJwb2xhdGVkXG4gICAgICBvcHRpb25TY29wZS4kd2F0Y2goaW50ZXJwb2xhdGVUZXh0Rm4sIGZ1bmN0aW9uIGludGVycG9sYXRlV2F0Y2hBY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgb3B0aW9uQXR0cnMuJHNldCgndmFsdWUnLCBuZXdWYWwpO1xuICAgICAgICBpZiAob2xkVmFsICE9PSBuZXdWYWwpIHtcbiAgICAgICAgICBzZWxmLnJlbW92ZU9wdGlvbihvbGRWYWwpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuYWRkT3B0aW9uKG5ld1ZhbCwgb3B0aW9uRWxlbWVudCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBzdGF0aWNcbiAgICAgIHNlbGYuYWRkT3B0aW9uKG9wdGlvbkF0dHJzLnZhbHVlLCBvcHRpb25FbGVtZW50KTtcbiAgICB9XG5cbiAgICBvcHRpb25FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5yZW1vdmVPcHRpb24ob3B0aW9uQXR0cnMudmFsdWUpO1xuICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgfSk7XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBzZWxlY3RcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIGBTRUxFQ1RgIGVsZW1lbnQgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy5cbiAqXG4gKiBUaGUgYHNlbGVjdGAgZGlyZWN0aXZlIGlzIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9IHRvIHByb3ZpZGUgZGF0YS1iaW5kaW5nXG4gKiBiZXR3ZWVuIHRoZSBzY29wZSBhbmQgdGhlIGA8c2VsZWN0PmAgY29udHJvbCAoaW5jbHVkaW5nIHNldHRpbmcgZGVmYXVsdCB2YWx1ZXMpLlxuICogw4x0IGFsc28gaGFuZGxlcyBkeW5hbWljIGA8b3B0aW9uPmAgZWxlbWVudHMsIHdoaWNoIGNhbiBiZSBhZGRlZCB1c2luZyB0aGUge0BsaW5rIG5nUmVwZWF0IGBuZ1JlcGVhdH1gIG9yXG4gKiB7QGxpbmsgbmdPcHRpb25zIGBuZ09wdGlvbnNgfSBkaXJlY3RpdmVzLlxuICpcbiAqIFdoZW4gYW4gaXRlbSBpbiB0aGUgYDxzZWxlY3Q+YCBtZW51IGlzIHNlbGVjdGVkLCB0aGUgdmFsdWUgb2YgdGhlIHNlbGVjdGVkIG9wdGlvbiB3aWxsIGJlIGJvdW5kXG4gKiB0byB0aGUgbW9kZWwgaWRlbnRpZmllZCBieSB0aGUgYG5nTW9kZWxgIGRpcmVjdGl2ZS4gV2l0aCBzdGF0aWMgb3IgcmVwZWF0ZWQgb3B0aW9ucywgdGhpcyBpc1xuICogdGhlIGNvbnRlbnQgb2YgdGhlIGB2YWx1ZWAgYXR0cmlidXRlIG9yIHRoZSB0ZXh0Q29udGVudCBvZiB0aGUgYDxvcHRpb24+YCwgaWYgdGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBtaXNzaW5nLlxuICogSWYgeW91IHdhbnQgZHluYW1pYyB2YWx1ZSBhdHRyaWJ1dGVzLCB5b3UgY2FuIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgdmFsdWUgYXR0cmlidXRlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiBOb3RlIHRoYXQgdGhlIHZhbHVlIG9mIGEgYHNlbGVjdGAgZGlyZWN0aXZlIHVzZWQgd2l0aG91dCBgbmdPcHRpb25zYCBpcyBhbHdheXMgYSBzdHJpbmcuXG4gKiBXaGVuIHRoZSBtb2RlbCBuZWVkcyB0byBiZSBib3VuZCB0byBhIG5vbi1zdHJpbmcgdmFsdWUsIHlvdSBtdXN0IGVpdGhlciBleHBsaWN0bHkgY29udmVydCBpdFxuICogdXNpbmcgYSBkaXJlY3RpdmUgKHNlZSBleGFtcGxlIGJlbG93KSBvciB1c2UgYG5nT3B0aW9uc2AgdG8gc3BlY2lmeSB0aGUgc2V0IG9mIG9wdGlvbnMuXG4gKiBUaGlzIGlzIGJlY2F1c2UgYW4gb3B0aW9uIGVsZW1lbnQgY2FuIG9ubHkgYmUgYm91bmQgdG8gc3RyaW5nIHZhbHVlcyBhdCBwcmVzZW50LlxuICogPC9kaXY+XG4gKlxuICogSWYgdGhlIHZpZXdWYWx1ZSBvZiBgbmdNb2RlbGAgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb25zLCB0aGVuIHRoZSBjb250cm9sXG4gKiB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIGFuIFwidW5rbm93blwiIG9wdGlvbiwgd2hpY2ggaXQgdGhlbiByZW1vdmVzIHdoZW4gdGhlIG1pc21hdGNoIGlzIHJlc29sdmVkLlxuICpcbiAqIE9wdGlvbmFsbHksIGEgc2luZ2xlIGhhcmQtY29kZWQgYDxvcHRpb24+YCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLCBjYW5cbiAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgXCJub3Qgc2VsZWN0ZWRcIlxuICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogSW4gbWFueSBjYXNlcywgYG5nUmVwZWF0YCBjYW4gYmUgdXNlZCBvbiBgPG9wdGlvbj5gIGVsZW1lbnRzIGluc3RlYWQgb2Yge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ09wdGlvbnNcbiAqIG5nT3B0aW9uc30gdG8gYWNoaWV2ZSBhIHNpbWlsYXIgcmVzdWx0LiBIb3dldmVyLCBgbmdPcHRpb25zYCBwcm92aWRlcyBzb21lIGJlbmVmaXRzLCBzdWNoIGFzXG4gKiBtb3JlIGZsZXhpYmlsaXR5IGluIGhvdyB0aGUgYDxzZWxlY3Q+YCdzIG1vZGVsIGlzIGFzc2lnbmVkIHZpYSB0aGUgYHNlbGVjdGAgKipgYXNgKiogcGFydCBvZiB0aGVcbiAqIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvbiwgYW5kIGFkZGl0aW9uYWxseSBpbiByZWR1Y2luZyBtZW1vcnkgYW5kIGluY3JlYXNpbmcgc3BlZWQgYnkgbm90IGNyZWF0aW5nXG4gKiBhIG5ldyBzY29wZSBmb3IgZWFjaCByZXBlYXRlZCBpbnN0YW5jZS5cbiAqIDwvZGl2PlxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG11bHRpcGxlIEFsbG93cyBtdWx0aXBsZSBvcHRpb25zIHRvIGJlIHNlbGVjdGVkLiBUaGUgc2VsZWN0ZWQgdmFsdWVzIHdpbGwgYmVcbiAqICAgICBib3VuZCB0byB0aGUgbW9kZWwgYXMgYW4gYXJyYXkuXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyByZXF1aXJlZCBhdHRyaWJ1dGUgYW5kIHJlcXVpcmVkIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICogdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgbmdSZXF1aXJlZCBpbnN0ZWFkIG9mIHJlcXVpcmVkXG4gKiB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgcmVxdWlyZWQgYXR0cmlidXRlLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBzZWxlY3RlZCBvcHRpb24ocykgY2hhbmdlcyBkdWUgdG8gdXNlclxuICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgc2VsZWN0IGVsZW1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nT3B0aW9ucyBzZXRzIHRoZSBvcHRpb25zIHRoYXQgdGhlIHNlbGVjdCBpcyBwb3B1bGF0ZWQgd2l0aCBhbmQgZGVmaW5lcyB3aGF0IGlzXG4gKiBzZXQgb24gdGhlIG1vZGVsIG9uIHNlbGVjdGlvbi4gU2VlIHtAbGluayBuZ09wdGlvbnMgYG5nT3B0aW9uc2B9LlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgU2ltcGxlIGBzZWxlY3RgIGVsZW1lbnRzIHdpdGggc3RhdGljIG9wdGlvbnNcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwic3RhdGljLXNlbGVjdFwiIG1vZHVsZT1cInN0YXRpY1NlbGVjdFwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAqICAgICA8bGFiZWwgZm9yPVwic2luZ2xlU2VsZWN0XCI+IFNpbmdsZSBzZWxlY3Q6IDwvbGFiZWw+PGJyPlxuICogICAgIDxzZWxlY3QgbmFtZT1cInNpbmdsZVNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5zaW5nbGVTZWxlY3RcIj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMVwiPk9wdGlvbiAxPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTJcIj5PcHRpb24gMjwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0Pjxicj5cbiAqXG4gKiAgICAgPGxhYmVsIGZvcj1cInNpbmdsZVNlbGVjdFwiPiBTaW5nbGUgc2VsZWN0IHdpdGggXCJub3Qgc2VsZWN0ZWRcIiBvcHRpb24gYW5kIGR5bmFtaWMgb3B0aW9uIHZhbHVlczogPC9sYWJlbD48YnI+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwic2luZ2xlU2VsZWN0XCIgaWQ9XCJzaW5nbGVTZWxlY3RcIiBuZy1tb2RlbD1cImRhdGEuc2luZ2xlU2VsZWN0XCI+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0tUGxlYXNlIHNlbGVjdC0tLTwvb3B0aW9uPiA8IS0tIG5vdCBzZWxlY3RlZCAvIGJsYW5rIG9wdGlvbiAtLT5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJ7e2RhdGEub3B0aW9uMX19XCI+T3B0aW9uIDE8L29wdGlvbj4gPCEtLSBpbnRlcnBvbGF0aW9uIC0tPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0yXCI+T3B0aW9uIDI8L29wdGlvbj5cbiAqICAgICA8L3NlbGVjdD48YnI+XG4gKiAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImZvcmNlVW5rbm93bk9wdGlvbigpXCI+Rm9yY2UgdW5rbm93biBvcHRpb248L2J1dHRvbj48YnI+XG4gKiAgICAgPHR0PnNpbmdsZVNlbGVjdCA9IHt7ZGF0YS5zaW5nbGVTZWxlY3R9fTwvdHQ+XG4gKlxuICogICAgIDxocj5cbiAqICAgICA8bGFiZWwgZm9yPVwibXVsdGlwbGVTZWxlY3RcIj4gTXVsdGlwbGUgc2VsZWN0OiA8L2xhYmVsPjxicj5cbiAqICAgICA8c2VsZWN0IG5hbWU9XCJtdWx0aXBsZVNlbGVjdFwiIGlkPVwibXVsdGlwbGVTZWxlY3RcIiBuZy1tb2RlbD1cImRhdGEubXVsdGlwbGVTZWxlY3RcIiBtdWx0aXBsZT5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMVwiPk9wdGlvbiAxPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTJcIj5PcHRpb24gMjwvb3B0aW9uPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0zXCI+T3B0aW9uIDM8L29wdGlvbj5cbiAqICAgICA8L3NlbGVjdD48YnI+XG4gKiAgICAgPHR0Pm11bHRpcGxlU2VsZWN0ID0ge3tkYXRhLm11bHRpcGxlU2VsZWN0fX08L3R0Pjxici8+XG4gKiAgIDwvZm9ybT5cbiAqIDwvZGl2PlxuICogPC9maWxlPlxuICogPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogIGFuZ3VsYXIubW9kdWxlKCdzdGF0aWNTZWxlY3QnLCBbXSlcbiAqICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICRzY29wZS5kYXRhID0ge1xuICogICAgICAgc2luZ2xlU2VsZWN0OiBudWxsLFxuICogICAgICAgbXVsdGlwbGVTZWxlY3Q6IFtdLFxuICogICAgICAgb3B0aW9uMTogJ29wdGlvbi0xJyxcbiAqICAgICAgfTtcbiAqXG4gKiAgICAgICRzY29wZS5mb3JjZVVua25vd25PcHRpb24gPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAkc2NvcGUuZGF0YS5zaW5nbGVTZWxlY3QgPSAnbm9uc2Vuc2UnO1xuICogICAgICB9O1xuICogICB9XSk7XG4gKiA8L2ZpbGU+XG4gKjwvZXhhbXBsZT5cbiAqXG4gKiAjIyMgVXNpbmcgYG5nUmVwZWF0YCB0byBnZW5lcmF0ZSBgc2VsZWN0YCBvcHRpb25zXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdyZXBlYXQtc2VsZWN0XCIgbW9kdWxlPVwibmdyZXBlYXRTZWxlY3RcIj5cbiAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgICAgPGxhYmVsIGZvcj1cInJlcGVhdFNlbGVjdFwiPiBSZXBlYXQgc2VsZWN0OiA8L2xhYmVsPlxuICogICAgIDxzZWxlY3QgbmFtZT1cInJlcGVhdFNlbGVjdFwiIGlkPVwicmVwZWF0U2VsZWN0XCIgbmctbW9kZWw9XCJkYXRhLnJlcGVhdFNlbGVjdFwiPlxuICogICAgICAgPG9wdGlvbiBuZy1yZXBlYXQ9XCJvcHRpb24gaW4gZGF0YS5hdmFpbGFibGVPcHRpb25zXCIgdmFsdWU9XCJ7e29wdGlvbi5pZH19XCI+e3tvcHRpb24ubmFtZX19PC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+XG4gKiAgIDwvZm9ybT5cbiAqICAgPGhyPlxuICogICA8dHQ+cmVwZWF0U2VsZWN0ID0ge3tkYXRhLnJlcGVhdFNlbGVjdH19PC90dD48YnIvPlxuICogPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgYW5ndWxhci5tb2R1bGUoJ25ncmVwZWF0U2VsZWN0JywgW10pXG4gKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAkc2NvcGUuZGF0YSA9IHtcbiAqICAgICAgIHJlcGVhdFNlbGVjdDogbnVsbCxcbiAqICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcbiAqICAgICAgICAge2lkOiAnMScsIG5hbWU6ICdPcHRpb24gQSd9LFxuICogICAgICAgICB7aWQ6ICcyJywgbmFtZTogJ09wdGlvbiBCJ30sXG4gKiAgICAgICAgIHtpZDogJzMnLCBuYW1lOiAnT3B0aW9uIEMnfVxuICogICAgICAgXSxcbiAqICAgICAgfTtcbiAqICAgfV0pO1xuICogPC9maWxlPlxuICo8L2V4YW1wbGU+XG4gKlxuICpcbiAqICMjIyBVc2luZyBgc2VsZWN0YCB3aXRoIGBuZ09wdGlvbnNgIGFuZCBzZXR0aW5nIGEgZGVmYXVsdCB2YWx1ZVxuICogU2VlIHRoZSB7QGxpbmsgbmdPcHRpb25zIG5nT3B0aW9ucyBkb2N1bWVudGF0aW9ufSBmb3IgbW9yZSBgbmdPcHRpb25zYCB1c2FnZSBleGFtcGxlcy5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwic2VsZWN0LXdpdGgtZGVmYXVsdC12YWx1ZXNcIiBtb2R1bGU9XCJkZWZhdWx0VmFsdWVTZWxlY3RcIj5cbiAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgICAgPGxhYmVsIGZvcj1cIm15U2VsZWN0XCI+TWFrZSBhIGNob2ljZTo8L2xhYmVsPlxuICogICAgIDxzZWxlY3QgbmFtZT1cIm15U2VsZWN0XCIgaWQ9XCJteVNlbGVjdFwiXG4gKiAgICAgICBuZy1vcHRpb25zPVwib3B0aW9uLm5hbWUgZm9yIG9wdGlvbiBpbiBkYXRhLmF2YWlsYWJsZU9wdGlvbnMgdHJhY2sgYnkgb3B0aW9uLmlkXCJcbiAqICAgICAgIG5nLW1vZGVsPVwiZGF0YS5zZWxlY3RlZE9wdGlvblwiPjwvc2VsZWN0PlxuICogICA8L2Zvcm0+XG4gKiAgIDxocj5cbiAqICAgPHR0Pm9wdGlvbiA9IHt7ZGF0YS5zZWxlY3RlZE9wdGlvbn19PC90dD48YnIvPlxuICogPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgYW5ndWxhci5tb2R1bGUoJ2RlZmF1bHRWYWx1ZVNlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLmRhdGEgPSB7XG4gKiAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXG4gKiAgICAgICAgIHtpZDogJzEnLCBuYW1lOiAnT3B0aW9uIEEnfSxcbiAqICAgICAgICAge2lkOiAnMicsIG5hbWU6ICdPcHRpb24gQid9LFxuICogICAgICAgICB7aWQ6ICczJywgbmFtZTogJ09wdGlvbiBDJ31cbiAqICAgICAgIF0sXG4gKiAgICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAnMycsIG5hbWU6ICdPcHRpb24gQyd9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXG4gKiAgICAgICB9O1xuICogICB9XSk7XG4gKiA8L2ZpbGU+XG4gKjwvZXhhbXBsZT5cbiAqXG4gKlxuICogIyMjIEJpbmRpbmcgYHNlbGVjdGAgdG8gYSBub24tc3RyaW5nIHZhbHVlIHZpYSBgbmdNb2RlbGAgcGFyc2luZyAvIGZvcm1hdHRpbmdcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwic2VsZWN0LXdpdGgtbm9uLXN0cmluZy1vcHRpb25zXCIgbW9kdWxlPVwibm9uU3RyaW5nU2VsZWN0XCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm1vZGVsLmlkXCIgY29udmVydC10by1udW1iZXI+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwiMFwiPlplcm88L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIxXCI+T25lPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwiMlwiPlR3bzwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0PlxuICogICAgIHt7IG1vZGVsIH19XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgIGFuZ3VsYXIubW9kdWxlKCdub25TdHJpbmdTZWxlY3QnLCBbXSlcbiAqICAgICAgIC5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICogICAgICAgICAkcm9vdFNjb3BlLm1vZGVsID0geyBpZDogMiB9O1xuICogICAgICAgfSlcbiAqICAgICAgIC5kaXJlY3RpdmUoJ2NvbnZlcnRUb051bWJlcicsIGZ1bmN0aW9uKCkge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAqICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcbiAqICAgICAgICAgICAgIG5nTW9kZWwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWwpIHtcbiAqICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTApO1xuICogICAgICAgICAgICAgfSk7XG4gKiAgICAgICAgICAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsKSB7XG4gKiAgICAgICAgICAgICAgIHJldHVybiAnJyArIHZhbDtcbiAqICAgICAgICAgICAgIH0pO1xuICogICAgICAgICAgIH1cbiAqICAgICAgICAgfTtcbiAqICAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIHZhciBzZWxlY3QgPSBlbGVtZW50KGJ5LmNzcygnc2VsZWN0JykpO1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ21vZGVsLmlkJykpLiQoJ29wdGlvbjpjaGVja2VkJykuZ2V0VGV4dCgpKS50b0VxdWFsKCdUd28nKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqL1xudmFyIHNlbGVjdERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXF1aXJlOiBbJ3NlbGVjdCcsICc/bmdNb2RlbCddLFxuICAgIGNvbnRyb2xsZXI6IFNlbGVjdENvbnRyb2xsZXIsXG4gICAgcHJpb3JpdHk6IDEsXG4gICAgbGluazoge1xuICAgICAgcHJlOiBzZWxlY3RQcmVMaW5rXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHNlbGVjdFByZUxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG5cbiAgICAgIC8vIGlmIG5nTW9kZWwgaXMgbm90IGRlZmluZWQsIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmdcbiAgICAgIHZhciBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuICAgICAgaWYgKCFuZ01vZGVsQ3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgc2VsZWN0Q3RybCA9IGN0cmxzWzBdO1xuXG4gICAgICBzZWxlY3RDdHJsLm5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmw7XG5cbiAgICAgIC8vIFdlIGRlbGVnYXRlIHJlbmRlcmluZyB0byB0aGUgYHdyaXRlVmFsdWVgIG1ldGhvZCwgd2hpY2ggY2FuIGJlIGNoYW5nZWRcbiAgICAgIC8vIGlmIHRoZSBzZWxlY3QgY2FuIGhhdmUgbXVsdGlwbGUgc2VsZWN0ZWQgdmFsdWVzIG9yIGlmIHRoZSBvcHRpb25zIGFyZSBiZWluZ1xuICAgICAgLy8gZ2VuZXJhdGVkIGJ5IGBuZ09wdGlvbnNgXG4gICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdEN0cmwud3JpdGVWYWx1ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIFdoZW4gdGhlIHNlbGVjdGVkIGl0ZW0ocykgY2hhbmdlcyB3ZSBkZWxlZ2F0ZSBnZXR0aW5nIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0IGNvbnRyb2xcbiAgICAgIC8vIHRvIHRoZSBgcmVhZFZhbHVlYCBtZXRob2QsIHdoaWNoIGNhbiBiZSBjaGFuZ2VkIGlmIHRoZSBzZWxlY3QgY2FuIGhhdmUgbXVsdGlwbGVcbiAgICAgIC8vIHNlbGVjdGVkIHZhbHVlcyBvciBpZiB0aGUgb3B0aW9ucyBhcmUgYmVpbmcgZ2VuZXJhdGVkIGJ5IGBuZ09wdGlvbnNgXG4gICAgICBlbGVtZW50Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoc2VsZWN0Q3RybC5yZWFkVmFsdWUoKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIElmIHRoZSBzZWxlY3QgYWxsb3dzIG11bHRpcGxlIHZhbHVlcyB0aGVuIHdlIG5lZWQgdG8gbW9kaWZ5IGhvdyB3ZSByZWFkIGFuZCB3cml0ZVxuICAgICAgLy8gdmFsdWVzIGZyb20gYW5kIHRvIHRoZSBjb250cm9sOyBhbHNvIHdoYXQgaXQgbWVhbnMgZm9yIHRoZSB2YWx1ZSB0byBiZSBlbXB0eSBhbmRcbiAgICAgIC8vIHdlIGhhdmUgdG8gYWRkIGFuIGV4dHJhIHdhdGNoIHNpbmNlIG5nTW9kZWwgZG9lc24ndCB3b3JrIHdlbGwgd2l0aCBhcnJheXMgLSBpdFxuICAgICAgLy8gZG9lc24ndCB0cmlnZ2VyIHJlbmRlcmluZyBpZiBvbmx5IGFuIGl0ZW0gaW4gdGhlIGFycmF5IGNoYW5nZXMuXG4gICAgICBpZiAoYXR0ci5tdWx0aXBsZSkge1xuXG4gICAgICAgIC8vIFJlYWQgdmFsdWUgbm93IG5lZWRzIHRvIGNoZWNrIGVhY2ggb3B0aW9uIHRvIHNlZSBpZiBpdCBpcyBzZWxlY3RlZFxuICAgICAgICBzZWxlY3RDdHJsLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWRNdWx0aXBsZVZhbHVlKCkge1xuICAgICAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgICAgIGZvckVhY2goZWxlbWVudC5maW5kKCdvcHRpb24nKSwgZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgIGFycmF5LnB1c2gob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gV3JpdGUgdmFsdWUgbm93IG5lZWRzIHRvIHNldCB0aGUgc2VsZWN0ZWQgcHJvcGVydHkgb2YgZWFjaCBtYXRjaGluZyBvcHRpb25cbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlID0gZnVuY3Rpb24gd3JpdGVNdWx0aXBsZVZhbHVlKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIGl0ZW1zID0gbmV3IEhhc2hNYXAodmFsdWUpO1xuICAgICAgICAgIGZvckVhY2goZWxlbWVudC5maW5kKCdvcHRpb24nKSwgZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBpc0RlZmluZWQoaXRlbXMuZ2V0KG9wdGlvbi52YWx1ZSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHdlIGhhdmUgdG8gZG8gaXQgb24gZWFjaCB3YXRjaCBzaW5jZSBuZ01vZGVsIHdhdGNoZXMgcmVmZXJlbmNlLCBidXRcbiAgICAgICAgLy8gd2UgbmVlZCB0byB3b3JrIG9mIGFuIGFycmF5LCBzbyB3ZSBuZWVkIHRvIHNlZSBpZiBhbnl0aGluZyB3YXMgaW5zZXJ0ZWQvcmVtb3ZlZFxuICAgICAgICB2YXIgbGFzdFZpZXcsIGxhc3RWaWV3UmVmID0gTmFOO1xuICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gc2VsZWN0TXVsdGlwbGVXYXRjaCgpIHtcbiAgICAgICAgICBpZiAobGFzdFZpZXdSZWYgPT09IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgJiYgIWVxdWFscyhsYXN0VmlldywgbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgIGxhc3RWaWV3ID0gc2hhbGxvd0NvcHkobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSk7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhc3RWaWV3UmVmID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSWYgd2UgYXJlIGEgbXVsdGlwbGUgc2VsZWN0IHRoZW4gdmFsdWUgaXMgbm93IGEgY29sbGVjdGlvblxuICAgICAgICAvLyBzbyB0aGUgbWVhbmluZyBvZiAkaXNFbXB0eSBjaGFuZ2VzXG4gICAgICAgIG5nTW9kZWxDdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfTtcblxuICAgICAgfVxuICAgIH1cbn07XG5cblxuLy8gVGhlIG9wdGlvbiBkaXJlY3RpdmUgaXMgcHVyZWx5IGRlc2lnbmVkIHRvIGNvbW11bmljYXRlIHRoZSBleGlzdGVuY2UgKG9yIGxhY2sgb2YpXG4vLyBvZiBkeW5hbWljYWxseSBjcmVhdGVkIChhbmQgZGVzdHJveWVkKSBvcHRpb24gZWxlbWVudHMgdG8gdGhlaXIgY29udGFpbmluZyBzZWxlY3Rcbi8vIGRpcmVjdGl2ZSB2aWEgaXRzIGNvbnRyb2xsZXIuXG52YXIgb3B0aW9uRGlyZWN0aXZlID0gWyckaW50ZXJwb2xhdGUnLCBmdW5jdGlvbigkaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHByaW9yaXR5OiAxMDAsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuXG4gICAgICBpZiAoaXNEZWZpbmVkKGF0dHIudmFsdWUpKSB7XG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgZGVmaW5lZCwgY2hlY2sgaWYgaXQgY29udGFpbnMgYW4gaW50ZXJwb2xhdGlvblxuICAgICAgICB2YXIgaW50ZXJwb2xhdGVWYWx1ZUZuID0gJGludGVycG9sYXRlKGF0dHIudmFsdWUsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBub3QgZGVmaW5lZCB0aGVuIHdlIGZhbGwgYmFjayB0byB0aGVcbiAgICAgICAgLy8gdGV4dCBjb250ZW50IG9mIHRoZSBvcHRpb24gZWxlbWVudCwgd2hpY2ggbWF5IGJlIGludGVycG9sYXRlZFxuICAgICAgICB2YXIgaW50ZXJwb2xhdGVUZXh0Rm4gPSAkaW50ZXJwb2xhdGUoZWxlbWVudC50ZXh0KCksIHRydWUpO1xuICAgICAgICBpZiAoIWludGVycG9sYXRlVGV4dEZuKSB7XG4gICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIGVsZW1lbnQudGV4dCgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcblxuICAgICAgICAvLyBUaGlzIGlzIGFuIG9wdGltaXphdGlvbiBvdmVyIHVzaW5nIF5eIHNpbmNlIHdlIGRvbid0IHdhbnQgdG8gaGF2ZSB0byBzZWFyY2hcbiAgICAgICAgLy8gYWxsIHRoZSB3YXkgdG8gdGhlIHJvb3Qgb2YgdGhlIERPTSBmb3IgZXZlcnkgc2luZ2xlIG9wdGlvbiBlbGVtZW50XG4gICAgICAgIHZhciBzZWxlY3RDdHJsTmFtZSA9ICckc2VsZWN0Q29udHJvbGxlcicsXG4gICAgICAgICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudCgpLFxuICAgICAgICAgICAgc2VsZWN0Q3RybCA9IHBhcmVudC5kYXRhKHNlbGVjdEN0cmxOYW1lKSB8fFxuICAgICAgICAgICAgICBwYXJlbnQucGFyZW50KCkuZGF0YShzZWxlY3RDdHJsTmFtZSk7IC8vIGluIGNhc2Ugd2UgYXJlIGluIG9wdGdyb3VwXG5cbiAgICAgICAgaWYgKHNlbGVjdEN0cmwpIHtcbiAgICAgICAgICBzZWxlY3RDdHJsLnJlZ2lzdGVyT3B0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBpbnRlcnBvbGF0ZVZhbHVlRm4sIGludGVycG9sYXRlVGV4dEZuKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxudmFyIHN0eWxlRGlyZWN0aXZlID0gdmFsdWVGbih7XG4gIHJlc3RyaWN0OiAnRScsXG4gIHRlcm1pbmFsOiBmYWxzZVxufSk7XG5cbnZhciByZXF1aXJlZERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcbiAgICAgIGF0dHIucmVxdWlyZWQgPSB0cnVlOyAvLyBmb3JjZSB0cnV0aHkgaW4gY2FzZSB3ZSBhcmUgb24gbm9uIGlucHV0IGVsZW1lbnRcblxuICAgICAgY3RybC4kdmFsaWRhdG9ycy5yZXF1aXJlZCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gIWF0dHIucmVxdWlyZWQgfHwgIWN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKTtcbiAgICAgIH07XG5cbiAgICAgIGF0dHIuJG9ic2VydmUoJ3JlcXVpcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG5cbnZhciBwYXR0ZXJuRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgcmVnZXhwLCBwYXR0ZXJuRXhwID0gYXR0ci5uZ1BhdHRlcm4gfHwgYXR0ci5wYXR0ZXJuO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgncGF0dGVybicsIGZ1bmN0aW9uKHJlZ2V4KSB7XG4gICAgICAgIGlmIChpc1N0cmluZyhyZWdleCkgJiYgcmVnZXgubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyByZWdleCArICckJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVnZXggJiYgIXJlZ2V4LnRlc3QpIHtcbiAgICAgICAgICB0aHJvdyBtaW5FcnIoJ25nUGF0dGVybicpKCdub3JlZ2V4cCcsXG4gICAgICAgICAgICAnRXhwZWN0ZWQgezB9IHRvIGJlIGEgUmVnRXhwIGJ1dCB3YXMgezF9LiBFbGVtZW50OiB7Mn0nLCBwYXR0ZXJuRXhwLFxuICAgICAgICAgICAgcmVnZXgsIHN0YXJ0aW5nVGFnKGVsbSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnZXhwID0gcmVnZXggfHwgdW5kZWZpbmVkO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMucGF0dGVybiA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICAvLyBIVE1MNSBwYXR0ZXJuIGNvbnN0cmFpbnQgdmFsaWRhdGVzIHRoZSBpbnB1dCB2YWx1ZSwgc28gd2UgdmFsaWRhdGUgdGhlIHZpZXdWYWx1ZVxuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IGlzVW5kZWZpbmVkKHJlZ2V4cCkgfHwgcmVnZXhwLnRlc3Qodmlld1ZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuXG52YXIgbWF4bGVuZ3RoRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgbWF4bGVuZ3RoID0gLTE7XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtYXhsZW5ndGgnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaW50VmFsID0gdG9JbnQodmFsdWUpO1xuICAgICAgICBtYXhsZW5ndGggPSBpc05hTihpbnRWYWwpID8gLTEgOiBpbnRWYWw7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4bGVuZ3RoID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiAobWF4bGVuZ3RoIDwgMCkgfHwgY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8ICh2aWV3VmFsdWUubGVuZ3RoIDw9IG1heGxlbmd0aCk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBtaW5sZW5ndGhEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgaWYgKCFjdHJsKSByZXR1cm47XG5cbiAgICAgIHZhciBtaW5sZW5ndGggPSAwO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWlubGVuZ3RoJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgbWlubGVuZ3RoID0gdG9JbnQodmFsdWUpIHx8IDA7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWlubGVuZ3RoID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgdmlld1ZhbHVlLmxlbmd0aCA+PSBtaW5sZW5ndGg7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbmlmICh3aW5kb3cuYW5ndWxhci5ib290c3RyYXApIHtcbiAgLy9Bbmd1bGFySlMgaXMgYWxyZWFkeSBsb2FkZWQsIHNvIHdlIGNhbiByZXR1cm4gaGVyZS4uLlxuICBjb25zb2xlLmxvZygnV0FSTklORzogVHJpZWQgdG8gbG9hZCBhbmd1bGFyIG1vcmUgdGhhbiBvbmNlLicpO1xuICByZXR1cm47XG59XG5cbi8vdHJ5IHRvIGJpbmQgdG8ganF1ZXJ5IG5vdyBzbyB0aGF0IG9uZSBjYW4gd3JpdGUganFMaXRlKGRvY3VtZW50KS5yZWFkeSgpXG4vL2J1dCB3ZSB3aWxsIHJlYmluZCBvbiBib290c3RyYXAgYWdhaW4uXG5iaW5kSlF1ZXJ5KCk7XG5cbnB1Ymxpc2hFeHRlcm5hbEFQSShhbmd1bGFyKTtcblxuYW5ndWxhci5tb2R1bGUoXCJuZ0xvY2FsZVwiLCBbXSwgW1wiJHByb3ZpZGVcIiwgZnVuY3Rpb24oJHByb3ZpZGUpIHtcbnZhciBQTFVSQUxfQ0FURUdPUlkgPSB7WkVSTzogXCJ6ZXJvXCIsIE9ORTogXCJvbmVcIiwgVFdPOiBcInR3b1wiLCBGRVc6IFwiZmV3XCIsIE1BTlk6IFwibWFueVwiLCBPVEhFUjogXCJvdGhlclwifTtcbmZ1bmN0aW9uIGdldERlY2ltYWxzKG4pIHtcbiAgbiA9IG4gKyAnJztcbiAgdmFyIGkgPSBuLmluZGV4T2YoJy4nKTtcbiAgcmV0dXJuIChpID09IC0xKSA/IDAgOiBuLmxlbmd0aCAtIGkgLSAxO1xufVxuXG5mdW5jdGlvbiBnZXRWRihuLCBvcHRfcHJlY2lzaW9uKSB7XG4gIHZhciB2ID0gb3B0X3ByZWNpc2lvbjtcblxuICBpZiAodW5kZWZpbmVkID09PSB2KSB7XG4gICAgdiA9IE1hdGgubWluKGdldERlY2ltYWxzKG4pLCAzKTtcbiAgfVxuXG4gIHZhciBiYXNlID0gTWF0aC5wb3coMTAsIHYpO1xuICB2YXIgZiA9ICgobiAqIGJhc2UpIHwgMCkgJSBiYXNlO1xuICByZXR1cm4ge3Y6IHYsIGY6IGZ9O1xufVxuXG4kcHJvdmlkZS52YWx1ZShcIiRsb2NhbGVcIiwge1xuICBcIkRBVEVUSU1FX0ZPUk1BVFNcIjoge1xuICAgIFwiQU1QTVNcIjogW1xuICAgICAgXCJBTVwiLFxuICAgICAgXCJQTVwiXG4gICAgXSxcbiAgICBcIkRBWVwiOiBbXG4gICAgICBcIlN1bmRheVwiLFxuICAgICAgXCJNb25kYXlcIixcbiAgICAgIFwiVHVlc2RheVwiLFxuICAgICAgXCJXZWRuZXNkYXlcIixcbiAgICAgIFwiVGh1cnNkYXlcIixcbiAgICAgIFwiRnJpZGF5XCIsXG4gICAgICBcIlNhdHVyZGF5XCJcbiAgICBdLFxuICAgIFwiRVJBTkFNRVNcIjogW1xuICAgICAgXCJCZWZvcmUgQ2hyaXN0XCIsXG4gICAgICBcIkFubm8gRG9taW5pXCJcbiAgICBdLFxuICAgIFwiRVJBU1wiOiBbXG4gICAgICBcIkJDXCIsXG4gICAgICBcIkFEXCJcbiAgICBdLFxuICAgIFwiRklSU1REQVlPRldFRUtcIjogNixcbiAgICBcIk1PTlRIXCI6IFtcbiAgICAgIFwiSmFudWFyeVwiLFxuICAgICAgXCJGZWJydWFyeVwiLFxuICAgICAgXCJNYXJjaFwiLFxuICAgICAgXCJBcHJpbFwiLFxuICAgICAgXCJNYXlcIixcbiAgICAgIFwiSnVuZVwiLFxuICAgICAgXCJKdWx5XCIsXG4gICAgICBcIkF1Z3VzdFwiLFxuICAgICAgXCJTZXB0ZW1iZXJcIixcbiAgICAgIFwiT2N0b2JlclwiLFxuICAgICAgXCJOb3ZlbWJlclwiLFxuICAgICAgXCJEZWNlbWJlclwiXG4gICAgXSxcbiAgICBcIlNIT1JUREFZXCI6IFtcbiAgICAgIFwiU3VuXCIsXG4gICAgICBcIk1vblwiLFxuICAgICAgXCJUdWVcIixcbiAgICAgIFwiV2VkXCIsXG4gICAgICBcIlRodVwiLFxuICAgICAgXCJGcmlcIixcbiAgICAgIFwiU2F0XCJcbiAgICBdLFxuICAgIFwiU0hPUlRNT05USFwiOiBbXG4gICAgICBcIkphblwiLFxuICAgICAgXCJGZWJcIixcbiAgICAgIFwiTWFyXCIsXG4gICAgICBcIkFwclwiLFxuICAgICAgXCJNYXlcIixcbiAgICAgIFwiSnVuXCIsXG4gICAgICBcIkp1bFwiLFxuICAgICAgXCJBdWdcIixcbiAgICAgIFwiU2VwXCIsXG4gICAgICBcIk9jdFwiLFxuICAgICAgXCJOb3ZcIixcbiAgICAgIFwiRGVjXCJcbiAgICBdLFxuICAgIFwiV0VFS0VORFJBTkdFXCI6IFtcbiAgICAgIDUsXG4gICAgICA2XG4gICAgXSxcbiAgICBcImZ1bGxEYXRlXCI6IFwiRUVFRSwgTU1NTSBkLCB5XCIsXG4gICAgXCJsb25nRGF0ZVwiOiBcIk1NTU0gZCwgeVwiLFxuICAgIFwibWVkaXVtXCI6IFwiTU1NIGQsIHkgaDptbTpzcyBhXCIsXG4gICAgXCJtZWRpdW1EYXRlXCI6IFwiTU1NIGQsIHlcIixcbiAgICBcIm1lZGl1bVRpbWVcIjogXCJoOm1tOnNzIGFcIixcbiAgICBcInNob3J0XCI6IFwiTS9kL3l5IGg6bW0gYVwiLFxuICAgIFwic2hvcnREYXRlXCI6IFwiTS9kL3l5XCIsXG4gICAgXCJzaG9ydFRpbWVcIjogXCJoOm1tIGFcIlxuICB9LFxuICBcIk5VTUJFUl9GT1JNQVRTXCI6IHtcbiAgICBcIkNVUlJFTkNZX1NZTVwiOiBcIiRcIixcbiAgICBcIkRFQ0lNQUxfU0VQXCI6IFwiLlwiLFxuICAgIFwiR1JPVVBfU0VQXCI6IFwiLFwiLFxuICAgIFwiUEFUVEVSTlNcIjogW1xuICAgICAge1xuICAgICAgICBcImdTaXplXCI6IDMsXG4gICAgICAgIFwibGdTaXplXCI6IDMsXG4gICAgICAgIFwibWF4RnJhY1wiOiAzLFxuICAgICAgICBcIm1pbkZyYWNcIjogMCxcbiAgICAgICAgXCJtaW5JbnRcIjogMSxcbiAgICAgICAgXCJuZWdQcmVcIjogXCItXCIsXG4gICAgICAgIFwibmVnU3VmXCI6IFwiXCIsXG4gICAgICAgIFwicG9zUHJlXCI6IFwiXCIsXG4gICAgICAgIFwicG9zU3VmXCI6IFwiXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiZ1NpemVcIjogMyxcbiAgICAgICAgXCJsZ1NpemVcIjogMyxcbiAgICAgICAgXCJtYXhGcmFjXCI6IDIsXG4gICAgICAgIFwibWluRnJhY1wiOiAyLFxuICAgICAgICBcIm1pbkludFwiOiAxLFxuICAgICAgICBcIm5lZ1ByZVwiOiBcIi1cXHUwMGE0XCIsXG4gICAgICAgIFwibmVnU3VmXCI6IFwiXCIsXG4gICAgICAgIFwicG9zUHJlXCI6IFwiXFx1MDBhNFwiLFxuICAgICAgICBcInBvc1N1ZlwiOiBcIlwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICBcImlkXCI6IFwiZW4tdXNcIixcbiAgXCJwbHVyYWxDYXRcIjogZnVuY3Rpb24obiwgb3B0X3ByZWNpc2lvbikgeyAgdmFyIGkgPSBuIHwgMDsgIHZhciB2ZiA9IGdldFZGKG4sIG9wdF9wcmVjaXNpb24pOyAgaWYgKGkgPT0gMSAmJiB2Zi52ID09IDApIHsgICAgcmV0dXJuIFBMVVJBTF9DQVRFR09SWS5PTkU7ICB9ICByZXR1cm4gUExVUkFMX0NBVEVHT1JZLk9USEVSO31cbn0pO1xufV0pO1xuXG4gIGpxTGl0ZShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgYW5ndWxhckluaXQoZG9jdW1lbnQsIGJvb3RzdHJhcCk7XG4gIH0pO1xuXG59KSh3aW5kb3csIGRvY3VtZW50KTtcblxuIXdpbmRvdy5hbmd1bGFyLiQkY3NwKCkubm9JbmxpbmVTdHlsZSAmJiB3aW5kb3cuYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmhlYWQpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5AY2hhcnNldCBcIlVURi04XCI7W25nXFxcXDpjbG9ha10sW25nLWNsb2FrXSxbZGF0YS1uZy1jbG9ha10sW3gtbmctY2xvYWtdLC5uZy1jbG9haywueC1uZy1jbG9haywubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSl7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fW5nXFxcXDpmb3Jte2Rpc3BsYXk6YmxvY2s7fS5uZy1hbmltYXRlLXNoaW17dmlzaWJpbGl0eTpoaWRkZW47fS5uZy1hbmNob3J7cG9zaXRpb246YWJzb2x1dGU7fTwvc3R5bGU+Jyk7IiwiLyoqXG4gKiBTdGF0ZS1iYXNlZCByb3V0aW5nIGZvciBBbmd1bGFySlNcbiAqIEB2ZXJzaW9uIHYwLjIuMTVcbiAqIEBsaW5rIGh0dHA6Ly9hbmd1bGFyLXVpLmdpdGh1Yi5jb20vXG4gKiBAbGljZW5zZSBNSVQgTGljZW5zZSwgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqL1xuXG4vKiBjb21tb25qcyBwYWNrYWdlIG1hbmFnZXIgc3VwcG9ydCAoZWcgY29tcG9uZW50anMpICovXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cyA9PT0gZXhwb3J0cyl7XG4gIG1vZHVsZS5leHBvcnRzID0gJ3VpLnJvdXRlcic7XG59XG5cbihmdW5jdGlvbiAod2luZG93LCBhbmd1bGFyLCB1bmRlZmluZWQpIHtcbi8qanNoaW50IGdsb2JhbHN0cmljdDp0cnVlKi9cbi8qZ2xvYmFsIGFuZ3VsYXI6ZmFsc2UqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNEZWZpbmVkID0gYW5ndWxhci5pc0RlZmluZWQsXG4gICAgaXNGdW5jdGlvbiA9IGFuZ3VsYXIuaXNGdW5jdGlvbixcbiAgICBpc1N0cmluZyA9IGFuZ3VsYXIuaXNTdHJpbmcsXG4gICAgaXNPYmplY3QgPSBhbmd1bGFyLmlzT2JqZWN0LFxuICAgIGlzQXJyYXkgPSBhbmd1bGFyLmlzQXJyYXksXG4gICAgZm9yRWFjaCA9IGFuZ3VsYXIuZm9yRWFjaCxcbiAgICBleHRlbmQgPSBhbmd1bGFyLmV4dGVuZCxcbiAgICBjb3B5ID0gYW5ndWxhci5jb3B5O1xuXG5mdW5jdGlvbiBpbmhlcml0KHBhcmVudCwgZXh0cmEpIHtcbiAgcmV0dXJuIGV4dGVuZChuZXcgKGV4dGVuZChmdW5jdGlvbigpIHt9LCB7IHByb3RvdHlwZTogcGFyZW50IH0pKSgpLCBleHRyYSk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlKGRzdCkge1xuICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiAhPT0gZHN0KSB7XG4gICAgICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoIWRzdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSBkc3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRzdDtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgY29tbW9uIGFuY2VzdG9yIHBhdGggYmV0d2VlbiB0d28gc3RhdGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBmaXJzdCBUaGUgZmlyc3Qgc3RhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gc2Vjb25kIFRoZSBzZWNvbmQgc3RhdGUuXG4gKiBAcmV0dXJuIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBzdGF0ZSBuYW1lcyBpbiBkZXNjZW5kaW5nIG9yZGVyLCBub3QgaW5jbHVkaW5nIHRoZSByb290LlxuICovXG5mdW5jdGlvbiBhbmNlc3RvcnMoZmlyc3QsIHNlY29uZCkge1xuICB2YXIgcGF0aCA9IFtdO1xuXG4gIGZvciAodmFyIG4gaW4gZmlyc3QucGF0aCkge1xuICAgIGlmIChmaXJzdC5wYXRoW25dICE9PSBzZWNvbmQucGF0aFtuXSkgYnJlYWs7XG4gICAgcGF0aC5wdXNoKGZpcnN0LnBhdGhbbl0pO1xuICB9XG4gIHJldHVybiBwYXRoO1xufVxuXG4vKipcbiAqIElFOC1zYWZlIHdyYXBwZXIgZm9yIGBPYmplY3Qua2V5cygpYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IEEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAcmV0dXJuIHtBcnJheX0gUmV0dXJucyB0aGUga2V5cyBvZiB0aGUgb2JqZWN0IGFzIGFuIGFycmF5LlxuICovXG5mdW5jdGlvbiBvYmplY3RLZXlzKG9iamVjdCkge1xuICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG5cbiAgZm9yRWFjaChvYmplY3QsIGZ1bmN0aW9uKHZhbCwga2V5KSB7XG4gICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogSUU4LXNhZmUgd3JhcHBlciBmb3IgYEFycmF5LnByb3RvdHlwZS5pbmRleE9mKClgLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IEEgSmF2YVNjcmlwdCBhcnJheS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQSB2YWx1ZSB0byBzZWFyY2ggdGhlIGFycmF5IGZvci5cbiAqIEByZXR1cm4ge051bWJlcn0gUmV0dXJucyB0aGUgYXJyYXkgaW5kZXggdmFsdWUgb2YgYHZhbHVlYCwgb3IgYC0xYCBpZiBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgcmV0dXJuIGFycmF5LmluZGV4T2YodmFsdWUsIE51bWJlcihhcmd1bWVudHNbMl0pIHx8IDApO1xuICB9XG4gIHZhciBsZW4gPSBhcnJheS5sZW5ndGggPj4+IDAsIGZyb20gPSBOdW1iZXIoYXJndW1lbnRzWzJdKSB8fCAwO1xuICBmcm9tID0gKGZyb20gPCAwKSA/IE1hdGguY2VpbChmcm9tKSA6IE1hdGguZmxvb3IoZnJvbSk7XG5cbiAgaWYgKGZyb20gPCAwKSBmcm9tICs9IGxlbjtcblxuICBmb3IgKDsgZnJvbSA8IGxlbjsgZnJvbSsrKSB7XG4gICAgaWYgKGZyb20gaW4gYXJyYXkgJiYgYXJyYXlbZnJvbV0gPT09IHZhbHVlKSByZXR1cm4gZnJvbTtcbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogTWVyZ2VzIGEgc2V0IG9mIHBhcmFtZXRlcnMgd2l0aCBhbGwgcGFyYW1ldGVycyBpbmhlcml0ZWQgYmV0d2VlbiB0aGUgY29tbW9uIHBhcmVudHMgb2YgdGhlXG4gKiBjdXJyZW50IHN0YXRlIGFuZCBhIGdpdmVuIGRlc3RpbmF0aW9uIHN0YXRlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdXJyZW50UGFyYW1zIFRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudCBzdGF0ZSBwYXJhbWV0ZXJzICgkc3RhdGVQYXJhbXMpLlxuICogQHBhcmFtIHtPYmplY3R9IG5ld1BhcmFtcyBUaGUgc2V0IG9mIHBhcmFtZXRlcnMgd2hpY2ggd2lsbCBiZSBjb21wb3NpdGVkIHdpdGggaW5oZXJpdGVkIHBhcmFtcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSAkY3VycmVudCBJbnRlcm5hbCBkZWZpbml0aW9uIG9mIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gJHRvIEludGVybmFsIGRlZmluaXRpb24gb2Ygb2JqZWN0IHJlcHJlc2VudGluZyBzdGF0ZSB0byB0cmFuc2l0aW9uIHRvLlxuICovXG5mdW5jdGlvbiBpbmhlcml0UGFyYW1zKGN1cnJlbnRQYXJhbXMsIG5ld1BhcmFtcywgJGN1cnJlbnQsICR0bykge1xuICB2YXIgcGFyZW50cyA9IGFuY2VzdG9ycygkY3VycmVudCwgJHRvKSwgcGFyZW50UGFyYW1zLCBpbmhlcml0ZWQgPSB7fSwgaW5oZXJpdExpc3QgPSBbXTtcblxuICBmb3IgKHZhciBpIGluIHBhcmVudHMpIHtcbiAgICBpZiAoIXBhcmVudHNbaV0ucGFyYW1zKSBjb250aW51ZTtcbiAgICBwYXJlbnRQYXJhbXMgPSBvYmplY3RLZXlzKHBhcmVudHNbaV0ucGFyYW1zKTtcbiAgICBpZiAoIXBhcmVudFBhcmFtcy5sZW5ndGgpIGNvbnRpbnVlO1xuXG4gICAgZm9yICh2YXIgaiBpbiBwYXJlbnRQYXJhbXMpIHtcbiAgICAgIGlmIChpbmRleE9mKGluaGVyaXRMaXN0LCBwYXJlbnRQYXJhbXNbal0pID49IDApIGNvbnRpbnVlO1xuICAgICAgaW5oZXJpdExpc3QucHVzaChwYXJlbnRQYXJhbXNbal0pO1xuICAgICAgaW5oZXJpdGVkW3BhcmVudFBhcmFtc1tqXV0gPSBjdXJyZW50UGFyYW1zW3BhcmVudFBhcmFtc1tqXV07XG4gICAgfVxuICB9XG4gIHJldHVybiBleHRlbmQoe30sIGluaGVyaXRlZCwgbmV3UGFyYW1zKTtcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhIG5vbi1zdHJpY3QgY29tcGFyaXNvbiBvZiB0aGUgc3Vic2V0IG9mIHR3byBvYmplY3RzLCBkZWZpbmVkIGJ5IGEgbGlzdCBvZiBrZXlzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBmaXJzdCBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgc2Vjb25kIG9iamVjdC5cbiAqIEBwYXJhbSB7QXJyYXl9IGtleXMgVGhlIGxpc3Qgb2Yga2V5cyB3aXRoaW4gZWFjaCBvYmplY3QgdG8gY29tcGFyZS4gSWYgdGhlIGxpc3QgaXMgZW1wdHkgb3Igbm90IHNwZWNpZmllZCxcbiAqICAgICAgICAgICAgICAgICAgICAgaXQgZGVmYXVsdHMgdG8gdGhlIGxpc3Qgb2Yga2V5cyBpbiBgYWAuXG4gKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUga2V5cyBtYXRjaCwgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsRm9yS2V5cyhhLCBiLCBrZXlzKSB7XG4gIGlmICgha2V5cykge1xuICAgIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBuIGluIGEpIGtleXMucHVzaChuKTsgLy8gVXNlZCBpbnN0ZWFkIG9mIE9iamVjdC5rZXlzKCkgZm9yIElFOCBjb21wYXRpYmlsaXR5XG4gIH1cblxuICBmb3IgKHZhciBpPTA7IGk8a2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrID0ga2V5c1tpXTtcbiAgICBpZiAoYVtrXSAhPSBiW2tdKSByZXR1cm4gZmFsc2U7IC8vIE5vdCAnPT09JywgdmFsdWVzIGFyZW4ndCBuZWNlc3NhcmlseSBub3JtYWxpemVkXG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc3Vic2V0IG9mIGFuIG9iamVjdCwgYmFzZWQgb24gYSBsaXN0IG9mIGtleXMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0ga2V5c1xuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlc1xuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyBhIHN1YnNldCBvZiBgdmFsdWVzYC5cbiAqL1xuZnVuY3Rpb24gZmlsdGVyQnlLZXlzKGtleXMsIHZhbHVlcykge1xuICB2YXIgZmlsdGVyZWQgPSB7fTtcblxuICBmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgZmlsdGVyZWRbbmFtZV0gPSB2YWx1ZXNbbmFtZV07XG4gIH0pO1xuICByZXR1cm4gZmlsdGVyZWQ7XG59XG5cbi8vIGxpa2UgXy5pbmRleEJ5XG4vLyB3aGVuIHlvdSBrbm93IHRoYXQgeW91ciBpbmRleCB2YWx1ZXMgd2lsbCBiZSB1bmlxdWUsIG9yIHlvdSB3YW50IGxhc3Qtb25lLWluIHRvIHdpblxuZnVuY3Rpb24gaW5kZXhCeShhcnJheSwgcHJvcE5hbWUpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmb3JFYWNoKGFycmF5LCBmdW5jdGlvbihpdGVtKSB7XG4gICAgcmVzdWx0W2l0ZW1bcHJvcE5hbWVdXSA9IGl0ZW07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBleHRyYWN0ZWQgZnJvbSB1bmRlcnNjb3JlLmpzXG4vLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgb25seSBjb250YWluaW5nIHRoZSB3aGl0ZWxpc3RlZCBwcm9wZXJ0aWVzLlxuZnVuY3Rpb24gcGljayhvYmopIHtcbiAgdmFyIGNvcHkgPSB7fTtcbiAgdmFyIGtleXMgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KEFycmF5LnByb3RvdHlwZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gIGZvckVhY2goa2V5cywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGtleSBpbiBvYmopIGNvcHlba2V5XSA9IG9ialtrZXldO1xuICB9KTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbi8vIGV4dHJhY3RlZCBmcm9tIHVuZGVyc2NvcmUuanNcbi8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCBvbWl0dGluZyB0aGUgYmxhY2tsaXN0ZWQgcHJvcGVydGllcy5cbmZ1bmN0aW9uIG9taXQob2JqKSB7XG4gIHZhciBjb3B5ID0ge307XG4gIHZhciBrZXlzID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShBcnJheS5wcm90b3R5cGUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGluZGV4T2Yoa2V5cywga2V5KSA9PSAtMSkgY29weVtrZXldID0gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHBsdWNrKGNvbGxlY3Rpb24sIGtleSkge1xuICB2YXIgcmVzdWx0ID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IFtdIDoge307XG5cbiAgZm9yRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWwsIGkpIHtcbiAgICByZXN1bHRbaV0gPSBpc0Z1bmN0aW9uKGtleSkgPyBrZXkodmFsKSA6IHZhbFtrZXldO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIGNhbGxiYWNrKSB7XG4gIHZhciBhcnJheSA9IGlzQXJyYXkoY29sbGVjdGlvbik7XG4gIHZhciByZXN1bHQgPSBhcnJheSA/IFtdIDoge307XG4gIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsLCBpKSB7XG4gICAgaWYgKGNhbGxiYWNrKHZhbCwgaSkpIHtcbiAgICAgIHJlc3VsdFthcnJheSA/IHJlc3VsdC5sZW5ndGggOiBpXSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgY2FsbGJhY2spIHtcbiAgdmFyIHJlc3VsdCA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBbXSA6IHt9O1xuXG4gIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsLCBpKSB7XG4gICAgcmVzdWx0W2ldID0gY2FsbGJhY2sodmFsLCBpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQG5nZG9jIG92ZXJ2aWV3XG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogIyB1aS5yb3V0ZXIudXRpbCBzdWItbW9kdWxlXG4gKlxuICogVGhpcyBtb2R1bGUgaXMgYSBkZXBlbmRlbmN5IG9mIG90aGVyIHN1Yi1tb2R1bGVzLiBEbyBub3QgaW5jbHVkZSB0aGlzIG1vZHVsZSBhcyBhIGRlcGVuZGVuY3lcbiAqIGluIHlvdXIgYW5ndWxhciBhcHAgKHVzZSB7QGxpbmsgdWkucm91dGVyfSBtb2R1bGUgaW5zdGVhZCkuXG4gKlxuICovXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnV0aWwnLCBbJ25nJ10pO1xuXG4vKipcbiAqIEBuZ2RvYyBvdmVydmlld1xuICogQG5hbWUgdWkucm91dGVyLnJvdXRlclxuICogXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnV0aWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgdWkucm91dGVyLnJvdXRlciBzdWItbW9kdWxlXG4gKlxuICogVGhpcyBtb2R1bGUgaXMgYSBkZXBlbmRlbmN5IG9mIG90aGVyIHN1Yi1tb2R1bGVzLiBEbyBub3QgaW5jbHVkZSB0aGlzIG1vZHVsZSBhcyBhIGRlcGVuZGVuY3lcbiAqIGluIHlvdXIgYW5ndWxhciBhcHAgKHVzZSB7QGxpbmsgdWkucm91dGVyfSBtb2R1bGUgaW5zdGVhZCkuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIucm91dGVyJywgWyd1aS5yb3V0ZXIudXRpbCddKTtcblxuLyoqXG4gKiBAbmdkb2Mgb3ZlcnZpZXdcbiAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZVxuICogXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnJvdXRlclxuICogQHJlcXVpcmVzIHVpLnJvdXRlci51dGlsXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAjIHVpLnJvdXRlci5zdGF0ZSBzdWItbW9kdWxlXG4gKlxuICogVGhpcyBtb2R1bGUgaXMgYSBkZXBlbmRlbmN5IG9mIHRoZSBtYWluIHVpLnJvdXRlciBtb2R1bGUuIERvIG5vdCBpbmNsdWRlIHRoaXMgbW9kdWxlIGFzIGEgZGVwZW5kZW5jeVxuICogaW4geW91ciBhbmd1bGFyIGFwcCAodXNlIHtAbGluayB1aS5yb3V0ZXJ9IG1vZHVsZSBpbnN0ZWFkKS5cbiAqIFxuICovXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnN0YXRlJywgWyd1aS5yb3V0ZXIucm91dGVyJywgJ3VpLnJvdXRlci51dGlsJ10pO1xuXG4vKipcbiAqIEBuZ2RvYyBvdmVydmlld1xuICogQG5hbWUgdWkucm91dGVyXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogIyB1aS5yb3V0ZXJcbiAqIFxuICogIyMgVGhlIG1haW4gbW9kdWxlIGZvciB1aS5yb3V0ZXIgXG4gKiBUaGVyZSBhcmUgc2V2ZXJhbCBzdWItbW9kdWxlcyBpbmNsdWRlZCB3aXRoIHRoZSB1aS5yb3V0ZXIgbW9kdWxlLCBob3dldmVyIG9ubHkgdGhpcyBtb2R1bGUgaXMgbmVlZGVkXG4gKiBhcyBhIGRlcGVuZGVuY3kgd2l0aGluIHlvdXIgYW5ndWxhciBhcHAuIFRoZSBvdGhlciBtb2R1bGVzIGFyZSBmb3Igb3JnYW5pemF0aW9uIHB1cnBvc2VzLiBcbiAqXG4gKiBUaGUgbW9kdWxlcyBhcmU6XG4gKiAqIHVpLnJvdXRlciAtIHRoZSBtYWluIFwidW1icmVsbGFcIiBtb2R1bGVcbiAqICogdWkucm91dGVyLnJvdXRlciAtIFxuICogXG4gKiAqWW91J2xsIG5lZWQgdG8gaW5jbHVkZSAqKm9ubHkqKiB0aGlzIG1vZHVsZSBhcyB0aGUgZGVwZW5kZW5jeSB3aXRoaW4geW91ciBhbmd1bGFyIGFwcC4qXG4gKiBcbiAqIDxwcmU+XG4gKiA8IWRvY3R5cGUgaHRtbD5cbiAqIDxodG1sIG5nLWFwcD1cIm15QXBwXCI+XG4gKiA8aGVhZD5cbiAqICAgPHNjcmlwdCBzcmM9XCJqcy9hbmd1bGFyLmpzXCI+PC9zY3JpcHQ+XG4gKiAgIDwhLS0gSW5jbHVkZSB0aGUgdWktcm91dGVyIHNjcmlwdCAtLT5cbiAqICAgPHNjcmlwdCBzcmM9XCJqcy9hbmd1bGFyLXVpLXJvdXRlci5taW4uanNcIj48L3NjcmlwdD5cbiAqICAgPHNjcmlwdD5cbiAqICAgICAvLyAuLi5hbmQgYWRkICd1aS5yb3V0ZXInIGFzIGEgZGVwZW5kZW5jeVxuICogICAgIHZhciBteUFwcCA9IGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFsndWkucm91dGVyJ10pO1xuICogICA8L3NjcmlwdD5cbiAqIDwvaGVhZD5cbiAqIDxib2R5PlxuICogPC9ib2R5PlxuICogPC9odG1sPlxuICogPC9wcmU+XG4gKi9cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXInLCBbJ3VpLnJvdXRlci5zdGF0ZSddKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5jb21wYXQnLCBbJ3VpLnJvdXRlciddKTtcblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kcmVzb2x2ZVxuICpcbiAqIEByZXF1aXJlcyAkcVxuICogQHJlcXVpcmVzICRpbmplY3RvclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTWFuYWdlcyByZXNvbHV0aW9uIG9mIChhY3ljbGljKSBncmFwaHMgb2YgcHJvbWlzZXMuXG4gKi9cbiRSZXNvbHZlLiRpbmplY3QgPSBbJyRxJywgJyRpbmplY3RvciddO1xuZnVuY3Rpb24gJFJlc29sdmUoICAkcSwgICAgJGluamVjdG9yKSB7XG4gIFxuICB2YXIgVklTSVRfSU5fUFJPR1JFU1MgPSAxLFxuICAgICAgVklTSVRfRE9ORSA9IDIsXG4gICAgICBOT1RISU5HID0ge30sXG4gICAgICBOT19ERVBFTkRFTkNJRVMgPSBbXSxcbiAgICAgIE5PX0xPQ0FMUyA9IE5PVEhJTkcsXG4gICAgICBOT19QQVJFTlQgPSBleHRlbmQoJHEud2hlbihOT1RISU5HKSwgeyAkJHByb21pc2VzOiBOT1RISU5HLCAkJHZhbHVlczogTk9USElORyB9KTtcbiAgXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kcmVzb2x2ZSNzdHVkeVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHJlc29sdmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFN0dWRpZXMgYSBzZXQgb2YgaW52b2NhYmxlcyB0aGF0IGFyZSBsaWtlbHkgdG8gYmUgdXNlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICogPHByZT5cbiAgICogJHJlc29sdmUuc3R1ZHkoaW52b2NhYmxlcykobG9jYWxzLCBwYXJlbnQsIHNlbGYpXG4gICAqIDwvcHJlPlxuICAgKiBpcyBlcXVpdmFsZW50IHRvXG4gICAqIDxwcmU+XG4gICAqICRyZXNvbHZlLnJlc29sdmUoaW52b2NhYmxlcywgbG9jYWxzLCBwYXJlbnQsIHNlbGYpXG4gICAqIDwvcHJlPlxuICAgKiBidXQgdGhlIGZvcm1lciBpcyBtb3JlIGVmZmljaWVudCAoaW4gZmFjdCBgcmVzb2x2ZWAganVzdCBjYWxscyBgc3R1ZHlgIFxuICAgKiBpbnRlcm5hbGx5KS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGludm9jYWJsZXMgSW52b2NhYmxlIG9iamVjdHNcbiAgICogQHJldHVybiB7ZnVuY3Rpb259IGEgZnVuY3Rpb24gdG8gcGFzcyBpbiBsb2NhbHMsIHBhcmVudCBhbmQgc2VsZlxuICAgKi9cbiAgdGhpcy5zdHVkeSA9IGZ1bmN0aW9uIChpbnZvY2FibGVzKSB7XG4gICAgaWYgKCFpc09iamVjdChpbnZvY2FibGVzKSkgdGhyb3cgbmV3IEVycm9yKFwiJ2ludm9jYWJsZXMnIG11c3QgYmUgYW4gb2JqZWN0XCIpO1xuICAgIHZhciBpbnZvY2FibGVLZXlzID0gb2JqZWN0S2V5cyhpbnZvY2FibGVzIHx8IHt9KTtcbiAgICBcbiAgICAvLyBQZXJmb3JtIGEgdG9wb2xvZ2ljYWwgc29ydCBvZiBpbnZvY2FibGVzIHRvIGJ1aWxkIGFuIG9yZGVyZWQgcGxhblxuICAgIHZhciBwbGFuID0gW10sIGN5Y2xlID0gW10sIHZpc2l0ZWQgPSB7fTtcbiAgICBmdW5jdGlvbiB2aXNpdCh2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmlzaXRlZFtrZXldID09PSBWSVNJVF9ET05FKSByZXR1cm47XG4gICAgICBcbiAgICAgIGN5Y2xlLnB1c2goa2V5KTtcbiAgICAgIGlmICh2aXNpdGVkW2tleV0gPT09IFZJU0lUX0lOX1BST0dSRVNTKSB7XG4gICAgICAgIGN5Y2xlLnNwbGljZSgwLCBpbmRleE9mKGN5Y2xlLCBrZXkpKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ3ljbGljIGRlcGVuZGVuY3k6IFwiICsgY3ljbGUuam9pbihcIiAtPiBcIikpO1xuICAgICAgfVxuICAgICAgdmlzaXRlZFtrZXldID0gVklTSVRfSU5fUFJPR1JFU1M7XG4gICAgICBcbiAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgcGxhbi5wdXNoKGtleSwgWyBmdW5jdGlvbigpIHsgcmV0dXJuICRpbmplY3Rvci5nZXQodmFsdWUpOyB9XSwgTk9fREVQRU5ERU5DSUVTKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSAkaW5qZWN0b3IuYW5ub3RhdGUodmFsdWUpO1xuICAgICAgICBmb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgaWYgKHBhcmFtICE9PSBrZXkgJiYgaW52b2NhYmxlcy5oYXNPd25Qcm9wZXJ0eShwYXJhbSkpIHZpc2l0KGludm9jYWJsZXNbcGFyYW1dLCBwYXJhbSk7XG4gICAgICAgIH0pO1xuICAgICAgICBwbGFuLnB1c2goa2V5LCB2YWx1ZSwgcGFyYW1zKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY3ljbGUucG9wKCk7XG4gICAgICB2aXNpdGVkW2tleV0gPSBWSVNJVF9ET05FO1xuICAgIH1cbiAgICBmb3JFYWNoKGludm9jYWJsZXMsIHZpc2l0KTtcbiAgICBpbnZvY2FibGVzID0gY3ljbGUgPSB2aXNpdGVkID0gbnVsbDsgLy8gcGxhbiBpcyBhbGwgdGhhdCdzIHJlcXVpcmVkXG4gICAgXG4gICAgZnVuY3Rpb24gaXNSZXNvbHZlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIHZhbHVlLnRoZW4gJiYgdmFsdWUuJCRwcm9taXNlcztcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChsb2NhbHMsIHBhcmVudCwgc2VsZikge1xuICAgICAgaWYgKGlzUmVzb2x2ZShsb2NhbHMpICYmIHNlbGYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZWxmID0gcGFyZW50OyBwYXJlbnQgPSBsb2NhbHM7IGxvY2FscyA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoIWxvY2FscykgbG9jYWxzID0gTk9fTE9DQUxTO1xuICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KGxvY2FscykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ2xvY2FscycgbXVzdCBiZSBhbiBvYmplY3RcIik7XG4gICAgICB9ICAgICAgIFxuICAgICAgaWYgKCFwYXJlbnQpIHBhcmVudCA9IE5PX1BBUkVOVDtcbiAgICAgIGVsc2UgaWYgKCFpc1Jlc29sdmUocGFyZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIncGFyZW50JyBtdXN0IGJlIGEgcHJvbWlzZSByZXR1cm5lZCBieSAkcmVzb2x2ZS5yZXNvbHZlKClcIik7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFRvIGNvbXBsZXRlIHRoZSBvdmVyYWxsIHJlc29sdXRpb24sIHdlIGhhdmUgdG8gd2FpdCBmb3IgdGhlIHBhcmVudFxuICAgICAgLy8gcHJvbWlzZSBhbmQgZm9yIHRoZSBwcm9taXNlIGZvciBlYWNoIGludm9rYWJsZSBpbiBvdXIgcGxhbi5cbiAgICAgIHZhciByZXNvbHV0aW9uID0gJHEuZGVmZXIoKSxcbiAgICAgICAgICByZXN1bHQgPSByZXNvbHV0aW9uLnByb21pc2UsXG4gICAgICAgICAgcHJvbWlzZXMgPSByZXN1bHQuJCRwcm9taXNlcyA9IHt9LFxuICAgICAgICAgIHZhbHVlcyA9IGV4dGVuZCh7fSwgbG9jYWxzKSxcbiAgICAgICAgICB3YWl0ID0gMSArIHBsYW4ubGVuZ3RoLzMsXG4gICAgICAgICAgbWVyZ2VkID0gZmFsc2U7XG4gICAgICAgICAgXG4gICAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgICAvLyBNZXJnZSBwYXJlbnQgdmFsdWVzIHdlIGhhdmVuJ3QgZ290IHlldCBhbmQgcHVibGlzaCBvdXIgb3duICQkdmFsdWVzXG4gICAgICAgIGlmICghLS13YWl0KSB7XG4gICAgICAgICAgaWYgKCFtZXJnZWQpIG1lcmdlKHZhbHVlcywgcGFyZW50LiQkdmFsdWVzKTsgXG4gICAgICAgICAgcmVzdWx0LiQkdmFsdWVzID0gdmFsdWVzO1xuICAgICAgICAgIHJlc3VsdC4kJHByb21pc2VzID0gcmVzdWx0LiQkcHJvbWlzZXMgfHwgdHJ1ZTsgLy8ga2VlcCBmb3IgaXNSZXNvbHZlKClcbiAgICAgICAgICBkZWxldGUgcmVzdWx0LiQkaW5oZXJpdGVkVmFsdWVzO1xuICAgICAgICAgIHJlc29sdXRpb24ucmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGZ1bmN0aW9uIGZhaWwocmVhc29uKSB7XG4gICAgICAgIHJlc3VsdC4kJGZhaWx1cmUgPSByZWFzb247XG4gICAgICAgIHJlc29sdXRpb24ucmVqZWN0KHJlYXNvbik7XG4gICAgICB9XG5cbiAgICAgIC8vIFNob3J0LWNpcmN1aXQgaWYgcGFyZW50IGhhcyBhbHJlYWR5IGZhaWxlZFxuICAgICAgaWYgKGlzRGVmaW5lZChwYXJlbnQuJCRmYWlsdXJlKSkge1xuICAgICAgICBmYWlsKHBhcmVudC4kJGZhaWx1cmUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAocGFyZW50LiQkaW5oZXJpdGVkVmFsdWVzKSB7XG4gICAgICAgIG1lcmdlKHZhbHVlcywgb21pdChwYXJlbnQuJCRpbmhlcml0ZWRWYWx1ZXMsIGludm9jYWJsZUtleXMpKTtcbiAgICAgIH1cblxuICAgICAgLy8gTWVyZ2UgcGFyZW50IHZhbHVlcyBpZiB0aGUgcGFyZW50IGhhcyBhbHJlYWR5IHJlc29sdmVkLCBvciBtZXJnZVxuICAgICAgLy8gcGFyZW50IHByb21pc2VzIGFuZCB3YWl0IGlmIHRoZSBwYXJlbnQgcmVzb2x2ZSBpcyBzdGlsbCBpbiBwcm9ncmVzcy5cbiAgICAgIGV4dGVuZChwcm9taXNlcywgcGFyZW50LiQkcHJvbWlzZXMpO1xuICAgICAgaWYgKHBhcmVudC4kJHZhbHVlcykge1xuICAgICAgICBtZXJnZWQgPSBtZXJnZSh2YWx1ZXMsIG9taXQocGFyZW50LiQkdmFsdWVzLCBpbnZvY2FibGVLZXlzKSk7XG4gICAgICAgIHJlc3VsdC4kJGluaGVyaXRlZFZhbHVlcyA9IG9taXQocGFyZW50LiQkdmFsdWVzLCBpbnZvY2FibGVLZXlzKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHBhcmVudC4kJGluaGVyaXRlZFZhbHVlcykge1xuICAgICAgICAgIHJlc3VsdC4kJGluaGVyaXRlZFZhbHVlcyA9IG9taXQocGFyZW50LiQkaW5oZXJpdGVkVmFsdWVzLCBpbnZvY2FibGVLZXlzKTtcbiAgICAgICAgfSAgICAgICAgXG4gICAgICAgIHBhcmVudC50aGVuKGRvbmUsIGZhaWwpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBQcm9jZXNzIGVhY2ggaW52b2NhYmxlIGluIHRoZSBwbGFuLCBidXQgaWdub3JlIGFueSB3aGVyZSBhIGxvY2FsIG9mIHRoZSBzYW1lIG5hbWUgZXhpc3RzLlxuICAgICAgZm9yICh2YXIgaT0wLCBpaT1wbGFuLmxlbmd0aDsgaTxpaTsgaSs9Mykge1xuICAgICAgICBpZiAobG9jYWxzLmhhc093blByb3BlcnR5KHBsYW5baV0pKSBkb25lKCk7XG4gICAgICAgIGVsc2UgaW52b2tlKHBsYW5baV0sIHBsYW5baSsxXSwgcGxhbltpKzJdKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgZnVuY3Rpb24gaW52b2tlKGtleSwgaW52b2NhYmxlLCBwYXJhbXMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgZGVmZXJyZWQgZm9yIHRoaXMgaW52b2NhdGlvbi4gRmFpbHVyZXMgd2lsbCBwcm9wYWdhdGUgdG8gdGhlIHJlc29sdXRpb24gYXMgd2VsbC5cbiAgICAgICAgdmFyIGludm9jYXRpb24gPSAkcS5kZWZlcigpLCB3YWl0UGFyYW1zID0gMDtcbiAgICAgICAgZnVuY3Rpb24gb25mYWlsdXJlKHJlYXNvbikge1xuICAgICAgICAgIGludm9jYXRpb24ucmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgZmFpbChyZWFzb24pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdhaXQgZm9yIGFueSBwYXJhbWV0ZXIgdGhhdCB3ZSBoYXZlIGEgcHJvbWlzZSBmb3IgKGVpdGhlciBmcm9tIHBhcmVudCBvciBmcm9tIHRoaXNcbiAgICAgICAgLy8gcmVzb2x2ZTsgaW4gdGhhdCBjYXNlIHN0dWR5KCkgd2lsbCBoYXZlIG1hZGUgc3VyZSBpdCdzIG9yZGVyZWQgYmVmb3JlIHVzIGluIHRoZSBwbGFuKS5cbiAgICAgICAgZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIChkZXApIHtcbiAgICAgICAgICBpZiAocHJvbWlzZXMuaGFzT3duUHJvcGVydHkoZGVwKSAmJiAhbG9jYWxzLmhhc093blByb3BlcnR5KGRlcCkpIHtcbiAgICAgICAgICAgIHdhaXRQYXJhbXMrKztcbiAgICAgICAgICAgIHByb21pc2VzW2RlcF0udGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIHZhbHVlc1tkZXBdID0gcmVzdWx0O1xuICAgICAgICAgICAgICBpZiAoISgtLXdhaXRQYXJhbXMpKSBwcm9jZWVkKCk7XG4gICAgICAgICAgICB9LCBvbmZhaWx1cmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghd2FpdFBhcmFtcykgcHJvY2VlZCgpO1xuICAgICAgICBmdW5jdGlvbiBwcm9jZWVkKCkge1xuICAgICAgICAgIGlmIChpc0RlZmluZWQocmVzdWx0LiQkZmFpbHVyZSkpIHJldHVybjtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaW52b2NhdGlvbi5yZXNvbHZlKCRpbmplY3Rvci5pbnZva2UoaW52b2NhYmxlLCBzZWxmLCB2YWx1ZXMpKTtcbiAgICAgICAgICAgIGludm9jYXRpb24ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgdmFsdWVzW2tleV0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0sIG9uZmFpbHVyZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgb25mYWlsdXJlKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBQdWJsaXNoIHByb21pc2Ugc3luY2hyb25vdXNseTsgaW52b2NhdGlvbnMgZnVydGhlciBkb3duIGluIHRoZSBwbGFuIG1heSBkZXBlbmQgb24gaXQuXG4gICAgICAgIHByb21pc2VzW2tleV0gPSBpbnZvY2F0aW9uLnByb21pc2U7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcbiAgXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHJlc29sdmUjcmVzb2x2ZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHJlc29sdmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlc29sdmVzIGEgc2V0IG9mIGludm9jYWJsZXMuIEFuIGludm9jYWJsZSBpcyBhIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQgdmlhIFxuICAgKiBgJGluamVjdG9yLmludm9rZSgpYCwgYW5kIGNhbiBoYXZlIGFuIGFyYml0cmFyeSBudW1iZXIgb2YgZGVwZW5kZW5jaWVzLiBcbiAgICogQW4gaW52b2NhYmxlIGNhbiBlaXRoZXIgcmV0dXJuIGEgdmFsdWUgZGlyZWN0bHksXG4gICAqIG9yIGEgYCRxYCBwcm9taXNlLiBJZiBhIHByb21pc2UgaXMgcmV0dXJuZWQgaXQgd2lsbCBiZSByZXNvbHZlZCBhbmQgdGhlIFxuICAgKiByZXN1bHRpbmcgdmFsdWUgd2lsbCBiZSB1c2VkIGluc3RlYWQuIERlcGVuZGVuY2llcyBvZiBpbnZvY2FibGVzIGFyZSByZXNvbHZlZCBcbiAgICogKGluIHRoaXMgb3JkZXIgb2YgcHJlY2VkZW5jZSlcbiAgICpcbiAgICogLSBmcm9tIHRoZSBzcGVjaWZpZWQgYGxvY2Fsc2BcbiAgICogLSBmcm9tIGFub3RoZXIgaW52b2NhYmxlIHRoYXQgaXMgcGFydCBvZiB0aGlzIGAkcmVzb2x2ZWAgY2FsbFxuICAgKiAtIGZyb20gYW4gaW52b2NhYmxlIHRoYXQgaXMgaW5oZXJpdGVkIGZyb20gYSBgcGFyZW50YCBjYWxsIHRvIGAkcmVzb2x2ZWAgXG4gICAqICAgKG9yIHJlY3Vyc2l2ZWx5XG4gICAqIC0gZnJvbSBhbnkgYW5jZXN0b3IgYCRyZXNvbHZlYCBvZiB0aGF0IHBhcmVudCkuXG4gICAqXG4gICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgYCRyZXNvbHZlYCBpcyBhIHByb21pc2UgZm9yIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIFxuICAgKiAoaW4gdGhpcyBvcmRlciBvZiBwcmVjZWRlbmNlKVxuICAgKlxuICAgKiAtIGFueSBgbG9jYWxzYCAoaWYgc3BlY2lmaWVkKVxuICAgKiAtIHRoZSByZXNvbHZlZCByZXR1cm4gdmFsdWVzIG9mIGFsbCBpbmplY3RhYmxlc1xuICAgKiAtIGFueSB2YWx1ZXMgaW5oZXJpdGVkIGZyb20gYSBgcGFyZW50YCBjYWxsIHRvIGAkcmVzb2x2ZWAgKGlmIHNwZWNpZmllZClcbiAgICpcbiAgICogVGhlIHByb21pc2Ugd2lsbCByZXNvbHZlIGFmdGVyIHRoZSBgcGFyZW50YCBwcm9taXNlIChpZiBhbnkpIGFuZCBhbGwgcHJvbWlzZXMgXG4gICAqIHJldHVybmVkIGJ5IGluamVjdGFibGVzIGhhdmUgYmVlbiByZXNvbHZlZC4gSWYgYW55IGludm9jYWJsZSBcbiAgICogKG9yIGAkaW5qZWN0b3IuaW52b2tlYCkgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgb3IgaWYgYSBwcm9taXNlIHJldHVybmVkIGJ5IGFuIFxuICAgKiBpbnZvY2FibGUgaXMgcmVqZWN0ZWQsIHRoZSBgJHJlc29sdmVgIHByb21pc2UgaXMgaW1tZWRpYXRlbHkgcmVqZWN0ZWQgd2l0aCB0aGUgXG4gICAqIHNhbWUgZXJyb3IuIEEgcmVqZWN0aW9uIG9mIGEgYHBhcmVudGAgcHJvbWlzZSAoaWYgc3BlY2lmaWVkKSB3aWxsIGxpa2V3aXNlIGJlIFxuICAgKiBwcm9wYWdhdGVkIGltbWVkaWF0ZWx5LiBPbmNlIHRoZSBgJHJlc29sdmVgIHByb21pc2UgaGFzIGJlZW4gcmVqZWN0ZWQsIG5vIFxuICAgKiBmdXJ0aGVyIGludm9jYWJsZXMgd2lsbCBiZSBjYWxsZWQuXG4gICAqIFxuICAgKiBDeWNsaWMgZGVwZW5kZW5jaWVzIGJldHdlZW4gaW52b2NhYmxlcyBhcmUgbm90IHBlcm1pdHRlZCBhbmQgd2lsbCBjYXVlcyBgJHJlc29sdmVgXG4gICAqIHRvIHRocm93IGFuIGVycm9yLiBBcyBhIHNwZWNpYWwgY2FzZSwgYW4gaW5qZWN0YWJsZSBjYW4gZGVwZW5kIG9uIGEgcGFyYW1ldGVyIFxuICAgKiB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGluamVjdGFibGUsIHdoaWNoIHdpbGwgYmUgZnVsZmlsbGVkIGZyb20gdGhlIGBwYXJlbnRgIFxuICAgKiBpbmplY3RhYmxlIG9mIHRoZSBzYW1lIG5hbWUuIFRoaXMgYWxsb3dzIGluaGVyaXRlZCB2YWx1ZXMgdG8gYmUgZGVjb3JhdGVkLiBcbiAgICogTm90ZSB0aGF0IGluIHRoaXMgY2FzZSBhbnkgb3RoZXIgaW5qZWN0YWJsZSBpbiB0aGUgc2FtZSBgJHJlc29sdmVgIHdpdGggdGhlIHNhbWVcbiAgICogZGVwZW5kZW5jeSB3b3VsZCBzZWUgdGhlIGRlY29yYXRlZCB2YWx1ZSwgbm90IHRoZSBpbmhlcml0ZWQgdmFsdWUuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBtaXNzaW5nIGRlcGVuZGVuY2llcyAtLSB1bmxpa2UgY3ljbGljIGRlcGVuZGVuY2llcyAtLSB3aWxsIGNhdXNlIGFuIFxuICAgKiAoYXN5bmNocm9ub3VzKSByZWplY3Rpb24gb2YgdGhlIGAkcmVzb2x2ZWAgcHJvbWlzZSByYXRoZXIgdGhhbiBhIChzeW5jaHJvbm91cykgXG4gICAqIGV4Y2VwdGlvbi5cbiAgICpcbiAgICogSW52b2NhYmxlcyBhcmUgaW52b2tlZCBlYWdlcmx5IGFzIHNvb24gYXMgYWxsIGRlcGVuZGVuY2llcyBhcmUgYXZhaWxhYmxlLiBcbiAgICogVGhpcyBpcyB0cnVlIGV2ZW4gZm9yIGRlcGVuZGVuY2llcyBpbmhlcml0ZWQgZnJvbSBhIGBwYXJlbnRgIGNhbGwgdG8gYCRyZXNvbHZlYC5cbiAgICpcbiAgICogQXMgYSBzcGVjaWFsIGNhc2UsIGFuIGludm9jYWJsZSBjYW4gYmUgYSBzdHJpbmcsIGluIHdoaWNoIGNhc2UgaXQgaXMgdGFrZW4gdG8gXG4gICAqIGJlIGEgc2VydmljZSBuYW1lIHRvIGJlIHBhc3NlZCB0byBgJGluamVjdG9yLmdldCgpYC4gVGhpcyBpcyBzdXBwb3J0ZWQgcHJpbWFyaWx5IFxuICAgKiBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgd2l0aCB0aGUgYHJlc29sdmVgIHByb3BlcnR5IG9mIGAkcm91dGVQcm92aWRlcmAgXG4gICAqIHJvdXRlcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGludm9jYWJsZXMgZnVuY3Rpb25zIHRvIGludm9rZSBvciBcbiAgICogYCRpbmplY3RvcmAgc2VydmljZXMgdG8gZmV0Y2guXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsb2NhbHMgIHZhbHVlcyB0byBtYWtlIGF2YWlsYWJsZSB0byB0aGUgaW5qZWN0YWJsZXNcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmVudCAgYSBwcm9taXNlIHJldHVybmVkIGJ5IGFub3RoZXIgY2FsbCB0byBgJHJlc29sdmVgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gc2VsZiAgdGhlIGB0aGlzYCBmb3IgdGhlIGludm9rZWQgbWV0aG9kc1xuICAgKiBAcmV0dXJuIHtvYmplY3R9IFByb21pc2UgZm9yIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSByZXNvbHZlZCByZXR1cm4gdmFsdWVcbiAgICogb2YgYWxsIGludm9jYWJsZXMsIGFzIHdlbGwgYXMgYW55IGluaGVyaXRlZCBhbmQgbG9jYWwgdmFsdWVzLlxuICAgKi9cbiAgdGhpcy5yZXNvbHZlID0gZnVuY3Rpb24gKGludm9jYWJsZXMsIGxvY2FscywgcGFyZW50LCBzZWxmKSB7XG4gICAgcmV0dXJuIHRoaXMuc3R1ZHkoaW52b2NhYmxlcykobG9jYWxzLCBwYXJlbnQsIHNlbGYpO1xuICB9O1xufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnV0aWwnKS5zZXJ2aWNlKCckcmVzb2x2ZScsICRSZXNvbHZlKTtcblxuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnlcbiAqXG4gKiBAcmVxdWlyZXMgJGh0dHBcbiAqIEByZXF1aXJlcyAkdGVtcGxhdGVDYWNoZVxuICogQHJlcXVpcmVzICRpbmplY3RvclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2VydmljZS4gTWFuYWdlcyBsb2FkaW5nIG9mIHRlbXBsYXRlcy5cbiAqL1xuJFRlbXBsYXRlRmFjdG9yeS4kaW5qZWN0ID0gWyckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckaW5qZWN0b3InXTtcbmZ1bmN0aW9uICRUZW1wbGF0ZUZhY3RvcnkoICAkaHR0cCwgICAkdGVtcGxhdGVDYWNoZSwgICAkaW5qZWN0b3IpIHtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnkjZnJvbUNvbmZpZ1xuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ3JlYXRlcyBhIHRlbXBsYXRlIGZyb20gYSBjb25maWd1cmF0aW9uIG9iamVjdC4gXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIHdoaWNoIHRvIGxvYWQgYSB0ZW1wbGF0ZS4gXG4gICAqIFRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgc2VhcmNoIGluIHRoZSBzcGVjaWZpZWQgb3JkZXIsIGFuZCB0aGUgZmlyc3Qgb25lIFxuICAgKiB0aGF0IGlzIGRlZmluZWQgaXMgdXNlZCB0byBjcmVhdGUgdGhlIHRlbXBsYXRlOlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IGNvbmZpZy50ZW1wbGF0ZSBodG1sIHN0cmluZyB0ZW1wbGF0ZSBvciBmdW5jdGlvbiB0byBcbiAgICogbG9hZCB2aWEge0BsaW5rIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnkjZnJvbVN0cmluZyBmcm9tU3RyaW5nfS5cbiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBjb25maWcudGVtcGxhdGVVcmwgdXJsIHRvIGxvYWQgb3IgYSBmdW5jdGlvbiByZXR1cm5pbmcgXG4gICAqIHRoZSB1cmwgdG8gbG9hZCB2aWEge0BsaW5rIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnkjZnJvbVVybCBmcm9tVXJsfS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uZmlnLnRlbXBsYXRlUHJvdmlkZXIgZnVuY3Rpb24gdG8gaW52b2tlIHZpYSBcbiAgICoge0BsaW5rIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnkjZnJvbVByb3ZpZGVyIGZyb21Qcm92aWRlcn0uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMgIFBhcmFtZXRlcnMgdG8gcGFzcyB0byB0aGUgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsb2NhbHMgTG9jYWxzIHRvIHBhc3MgdG8gYGludm9rZWAgaWYgdGhlIHRlbXBsYXRlIGlzIGxvYWRlZCBcbiAgICogdmlhIGEgYHRlbXBsYXRlUHJvdmlkZXJgLiBEZWZhdWx0cyB0byBgeyBwYXJhbXM6IHBhcmFtcyB9YC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfG9iamVjdH0gIFRoZSB0ZW1wbGF0ZSBodG1sIGFzIGEgc3RyaW5nLCBvciBhIHByb21pc2UgZm9yIFxuICAgKiB0aGF0IHN0cmluZyxvciBgbnVsbGAgaWYgbm8gdGVtcGxhdGUgaXMgY29uZmlndXJlZC5cbiAgICovXG4gIHRoaXMuZnJvbUNvbmZpZyA9IGZ1bmN0aW9uIChjb25maWcsIHBhcmFtcywgbG9jYWxzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGlzRGVmaW5lZChjb25maWcudGVtcGxhdGUpID8gdGhpcy5mcm9tU3RyaW5nKGNvbmZpZy50ZW1wbGF0ZSwgcGFyYW1zKSA6XG4gICAgICBpc0RlZmluZWQoY29uZmlnLnRlbXBsYXRlVXJsKSA/IHRoaXMuZnJvbVVybChjb25maWcudGVtcGxhdGVVcmwsIHBhcmFtcykgOlxuICAgICAgaXNEZWZpbmVkKGNvbmZpZy50ZW1wbGF0ZVByb3ZpZGVyKSA/IHRoaXMuZnJvbVByb3ZpZGVyKGNvbmZpZy50ZW1wbGF0ZVByb3ZpZGVyLCBwYXJhbXMsIGxvY2FscykgOlxuICAgICAgbnVsbFxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5I2Zyb21TdHJpbmdcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSB0ZW1wbGF0ZSBmcm9tIGEgc3RyaW5nIG9yIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGEgc3RyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHRlbXBsYXRlIGh0bWwgdGVtcGxhdGUgYXMgYSBzdHJpbmcgb3IgZnVuY3Rpb24gdGhhdCBcbiAgICogcmV0dXJucyBhbiBodG1sIHRlbXBsYXRlIGFzIGEgc3RyaW5nLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIFBhcmFtZXRlcnMgdG8gcGFzcyB0byB0aGUgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ3xvYmplY3R9IFRoZSB0ZW1wbGF0ZSBodG1sIGFzIGEgc3RyaW5nLCBvciBhIHByb21pc2UgZm9yIHRoYXQgXG4gICAqIHN0cmluZy5cbiAgICovXG4gIHRoaXMuZnJvbVN0cmluZyA9IGZ1bmN0aW9uICh0ZW1wbGF0ZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGVtcGxhdGUpID8gdGVtcGxhdGUocGFyYW1zKSA6IHRlbXBsYXRlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeSNmcm9tVXJsXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5XG4gICAqIFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogTG9hZHMgYSB0ZW1wbGF0ZSBmcm9tIHRoZSBhIFVSTCB2aWEgYCRodHRwYCBhbmQgYCR0ZW1wbGF0ZUNhY2hlYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8RnVuY3Rpb259IHVybCB1cmwgb2YgdGhlIHRlbXBsYXRlIHRvIGxvYWQsIG9yIGEgZnVuY3Rpb24gXG4gICAqIHRoYXQgcmV0dXJucyBhIHVybC5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBQYXJhbWV0ZXJzIHRvIHBhc3MgdG8gdGhlIHVybCBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7c3RyaW5nfFByb21pc2UuPHN0cmluZz59IFRoZSB0ZW1wbGF0ZSBodG1sIGFzIGEgc3RyaW5nLCBvciBhIHByb21pc2UgXG4gICAqIGZvciB0aGF0IHN0cmluZy5cbiAgICovXG4gIHRoaXMuZnJvbVVybCA9IGZ1bmN0aW9uICh1cmwsIHBhcmFtcykge1xuICAgIGlmIChpc0Z1bmN0aW9uKHVybCkpIHVybCA9IHVybChwYXJhbXMpO1xuICAgIGlmICh1cmwgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgZWxzZSByZXR1cm4gJGh0dHBcbiAgICAgICAgLmdldCh1cmwsIHsgY2FjaGU6ICR0ZW1wbGF0ZUNhY2hlLCBoZWFkZXJzOiB7IEFjY2VwdDogJ3RleHQvaHRtbCcgfX0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7IHJldHVybiByZXNwb25zZS5kYXRhOyB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnkjZnJvbVByb3ZpZGVyXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgdGVtcGxhdGUgYnkgaW52b2tpbmcgYW4gaW5qZWN0YWJsZSBwcm92aWRlciBmdW5jdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXIgRnVuY3Rpb24gdG8gaW52b2tlIHZpYSBgJGluamVjdG9yLmludm9rZWBcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBQYXJhbWV0ZXJzIGZvciB0aGUgdGVtcGxhdGUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhbHMgTG9jYWxzIHRvIHBhc3MgdG8gYGludm9rZWAuIERlZmF1bHRzIHRvIFxuICAgKiBgeyBwYXJhbXM6IHBhcmFtcyB9YC5cbiAgICogQHJldHVybiB7c3RyaW5nfFByb21pc2UuPHN0cmluZz59IFRoZSB0ZW1wbGF0ZSBodG1sIGFzIGEgc3RyaW5nLCBvciBhIHByb21pc2UgXG4gICAqIGZvciB0aGF0IHN0cmluZy5cbiAgICovXG4gIHRoaXMuZnJvbVByb3ZpZGVyID0gZnVuY3Rpb24gKHByb3ZpZGVyLCBwYXJhbXMsIGxvY2Fscykge1xuICAgIHJldHVybiAkaW5qZWN0b3IuaW52b2tlKHByb3ZpZGVyLCBudWxsLCBsb2NhbHMgfHwgeyBwYXJhbXM6IHBhcmFtcyB9KTtcbiAgfTtcbn1cblxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci51dGlsJykuc2VydmljZSgnJHRlbXBsYXRlRmFjdG9yeScsICRUZW1wbGF0ZUZhY3RvcnkpO1xuXG52YXIgJCRVTUZQOyAvLyByZWZlcmVuY2UgdG8gJFVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXJcblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE1hdGNoZXMgVVJMcyBhZ2FpbnN0IHBhdHRlcm5zIGFuZCBleHRyYWN0cyBuYW1lZCBwYXJhbWV0ZXJzIGZyb20gdGhlIHBhdGggb3IgdGhlIHNlYXJjaFxuICogcGFydCBvZiB0aGUgVVJMLiBBIFVSTCBwYXR0ZXJuIGNvbnNpc3RzIG9mIGEgcGF0aCBwYXR0ZXJuLCBvcHRpb25hbGx5IGZvbGxvd2VkIGJ5ICc/JyBhbmQgYSBsaXN0XG4gKiBvZiBzZWFyY2ggcGFyYW1ldGVycy4gTXVsdGlwbGUgc2VhcmNoIHBhcmFtZXRlciBuYW1lcyBhcmUgc2VwYXJhdGVkIGJ5ICcmJy4gU2VhcmNoIHBhcmFtZXRlcnNcbiAqIGRvIG5vdCBpbmZsdWVuY2Ugd2hldGhlciBvciBub3QgYSBVUkwgaXMgbWF0Y2hlZCwgYnV0IHRoZWlyIHZhbHVlcyBhcmUgcGFzc2VkIHRocm91Z2ggaW50b1xuICogdGhlIG1hdGNoZWQgcGFyYW1ldGVycyByZXR1cm5lZCBieSB7QGxpbmsgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyI21ldGhvZHNfZXhlYyBleGVjfS5cbiAqXG4gKiBQYXRoIHBhcmFtZXRlciBwbGFjZWhvbGRlcnMgY2FuIGJlIHNwZWNpZmllZCB1c2luZyBzaW1wbGUgY29sb24vY2F0Y2gtYWxsIHN5bnRheCBvciBjdXJseSBicmFjZVxuICogc3ludGF4LCB3aGljaCBvcHRpb25hbGx5IGFsbG93cyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgdGhlIHBhcmFtZXRlciB0byBiZSBzcGVjaWZpZWQ6XG4gKlxuICogKiBgJzonYCBuYW1lIC0gY29sb24gcGxhY2Vob2xkZXJcbiAqICogYCcqJ2AgbmFtZSAtIGNhdGNoLWFsbCBwbGFjZWhvbGRlclxuICogKiBgJ3snIG5hbWUgJ30nYCAtIGN1cmx5IHBsYWNlaG9sZGVyXG4gKiAqIGAneycgbmFtZSAnOicgcmVnZXhwfHR5cGUgJ30nYCAtIGN1cmx5IHBsYWNlaG9sZGVyIHdpdGggcmVnZXhwIG9yIHR5cGUgbmFtZS4gU2hvdWxkIHRoZVxuICogICByZWdleHAgaXRzZWxmIGNvbnRhaW4gY3VybHkgYnJhY2VzLCB0aGV5IG11c3QgYmUgaW4gbWF0Y2hlZCBwYWlycyBvciBlc2NhcGVkIHdpdGggYSBiYWNrc2xhc2guXG4gKlxuICogUGFyYW1ldGVyIG5hbWVzIG1heSBjb250YWluIG9ubHkgd29yZCBjaGFyYWN0ZXJzIChsYXRpbiBsZXR0ZXJzLCBkaWdpdHMsIGFuZCB1bmRlcnNjb3JlKSBhbmRcbiAqIG11c3QgYmUgdW5pcXVlIHdpdGhpbiB0aGUgcGF0dGVybiAoYWNyb3NzIGJvdGggcGF0aCBhbmQgc2VhcmNoIHBhcmFtZXRlcnMpLiBGb3IgY29sb25cbiAqIHBsYWNlaG9sZGVycyBvciBjdXJseSBwbGFjZWhvbGRlcnMgd2l0aG91dCBhbiBleHBsaWNpdCByZWdleHAsIGEgcGF0aCBwYXJhbWV0ZXIgbWF0Y2hlcyBhbnlcbiAqIG51bWJlciBvZiBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gJy8nLiBGb3IgY2F0Y2gtYWxsIHBsYWNlaG9sZGVycyB0aGUgcGF0aCBwYXJhbWV0ZXIgbWF0Y2hlc1xuICogYW55IG51bWJlciBvZiBjaGFyYWN0ZXJzLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICogYCcvaGVsbG8vJ2AgLSBNYXRjaGVzIG9ubHkgaWYgdGhlIHBhdGggaXMgZXhhY3RseSAnL2hlbGxvLycuIFRoZXJlIGlzIG5vIHNwZWNpYWwgdHJlYXRtZW50IGZvclxuICogICB0cmFpbGluZyBzbGFzaGVzLCBhbmQgcGF0dGVybnMgaGF2ZSB0byBtYXRjaCB0aGUgZW50aXJlIHBhdGgsIG5vdCBqdXN0IGEgcHJlZml4LlxuICogKiBgJy91c2VyLzppZCdgIC0gTWF0Y2hlcyAnL3VzZXIvYm9iJyBvciAnL3VzZXIvMTIzNCEhIScgb3IgZXZlbiAnL3VzZXIvJyBidXQgbm90ICcvdXNlcicgb3JcbiAqICAgJy91c2VyL2JvYi9kZXRhaWxzJy4gVGhlIHNlY29uZCBwYXRoIHNlZ21lbnQgd2lsbCBiZSBjYXB0dXJlZCBhcyB0aGUgcGFyYW1ldGVyICdpZCcuXG4gKiAqIGAnL3VzZXIve2lkfSdgIC0gU2FtZSBhcyB0aGUgcHJldmlvdXMgZXhhbXBsZSwgYnV0IHVzaW5nIGN1cmx5IGJyYWNlIHN5bnRheC5cbiAqICogYCcvdXNlci97aWQ6W14vXSp9J2AgLSBTYW1lIGFzIHRoZSBwcmV2aW91cyBleGFtcGxlLlxuICogKiBgJy91c2VyL3tpZDpbMC05YS1mQS1GXXsxLDh9fSdgIC0gU2ltaWxhciB0byB0aGUgcHJldmlvdXMgZXhhbXBsZSwgYnV0IG9ubHkgbWF0Y2hlcyBpZiB0aGUgaWRcbiAqICAgcGFyYW1ldGVyIGNvbnNpc3RzIG9mIDEgdG8gOCBoZXggZGlnaXRzLlxuICogKiBgJy9maWxlcy97cGF0aDouKn0nYCAtIE1hdGNoZXMgYW55IFVSTCBzdGFydGluZyB3aXRoICcvZmlsZXMvJyBhbmQgY2FwdHVyZXMgdGhlIHJlc3Qgb2YgdGhlXG4gKiAgIHBhdGggaW50byB0aGUgcGFyYW1ldGVyICdwYXRoJy5cbiAqICogYCcvZmlsZXMvKnBhdGgnYCAtIGRpdHRvLlxuICogKiBgJy9jYWxlbmRhci97c3RhcnQ6ZGF0ZX0nYCAtIE1hdGNoZXMgXCIvY2FsZW5kYXIvMjAxNC0xMS0xMlwiIChiZWNhdXNlIHRoZSBwYXR0ZXJuIGRlZmluZWRcbiAqICAgaW4gdGhlIGJ1aWx0LWluICBgZGF0ZWAgVHlwZSBtYXRjaGVzIGAyMDE0LTExLTEyYCkgYW5kIHByb3ZpZGVzIGEgRGF0ZSBvYmplY3QgaW4gJHN0YXRlUGFyYW1zLnN0YXJ0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm4gIFRoZSBwYXR0ZXJuIHRvIGNvbXBpbGUgaW50byBhIG1hdGNoZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnICBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGhhc2g6XG4gKiBAcGFyYW0ge09iamVjdD19IHBhcmVudE1hdGNoZXIgVXNlZCB0byBjb25jYXRlbmF0ZSB0aGUgcGF0dGVybi9jb25maWcgb250b1xuICogICBhbiBleGlzdGluZyBVcmxNYXRjaGVyXG4gKlxuICogKiBgY2FzZUluc2Vuc2l0aXZlYCAtIGB0cnVlYCBpZiBVUkwgbWF0Y2hpbmcgc2hvdWxkIGJlIGNhc2UgaW5zZW5zaXRpdmUsIG90aGVyd2lzZSBgZmFsc2VgLCB0aGUgZGVmYXVsdCB2YWx1ZSAoZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkpIGlzIGBmYWxzZWAuXG4gKiAqIGBzdHJpY3RgIC0gYGZhbHNlYCBpZiBtYXRjaGluZyBhZ2FpbnN0IGEgVVJMIHdpdGggYSB0cmFpbGluZyBzbGFzaCBzaG91bGQgYmUgdHJlYXRlZCBhcyBlcXVpdmFsZW50IHRvIGEgVVJMIHdpdGhvdXQgYSB0cmFpbGluZyBzbGFzaCwgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwcmVmaXggIEEgc3RhdGljIHByZWZpeCBvZiB0aGlzIHBhdHRlcm4uIFRoZSBtYXRjaGVyIGd1YXJhbnRlZXMgdGhhdCBhbnlcbiAqICAgVVJMIG1hdGNoaW5nIHRoaXMgbWF0Y2hlciAoaS5lLiBhbnkgc3RyaW5nIGZvciB3aGljaCB7QGxpbmsgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyI21ldGhvZHNfZXhlYyBleGVjKCl9IHJldHVybnNcbiAqICAgbm9uLW51bGwpIHdpbGwgc3RhcnQgd2l0aCB0aGlzIHByZWZpeC5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc291cmNlICBUaGUgcGF0dGVybiB0aGF0IHdhcyBwYXNzZWQgaW50byB0aGUgY29uc3RydWN0b3JcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc291cmNlUGF0aCAgVGhlIHBhdGggcG9ydGlvbiBvZiB0aGUgc291cmNlIHByb3BlcnR5XG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNvdXJjZVNlYXJjaCAgVGhlIHNlYXJjaCBwb3J0aW9uIG9mIHRoZSBzb3VyY2UgcHJvcGVydHlcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcmVnZXggIFRoZSBjb25zdHJ1Y3RlZCByZWdleCB0aGF0IHdpbGwgYmUgdXNlZCB0byBtYXRjaCBhZ2FpbnN0IHRoZSB1cmwgd2hlblxuICogICBpdCBpcyB0aW1lIHRvIGRldGVybWluZSB3aGljaCB1cmwgd2lsbCBtYXRjaC5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAgTmV3IGBVcmxNYXRjaGVyYCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gVXJsTWF0Y2hlcihwYXR0ZXJuLCBjb25maWcsIHBhcmVudE1hdGNoZXIpIHtcbiAgY29uZmlnID0gZXh0ZW5kKHsgcGFyYW1zOiB7fSB9LCBpc09iamVjdChjb25maWcpID8gY29uZmlnIDoge30pO1xuXG4gIC8vIEZpbmQgYWxsIHBsYWNlaG9sZGVycyBhbmQgY3JlYXRlIGEgY29tcGlsZWQgcGF0dGVybiwgdXNpbmcgZWl0aGVyIGNsYXNzaWMgb3IgY3VybHkgc3ludGF4OlxuICAvLyAgICcqJyBuYW1lXG4gIC8vICAgJzonIG5hbWVcbiAgLy8gICAneycgbmFtZSAnfSdcbiAgLy8gICAneycgbmFtZSAnOicgcmVnZXhwICd9J1xuICAvLyBUaGUgcmVndWxhciBleHByZXNzaW9uIGlzIHNvbWV3aGF0IGNvbXBsaWNhdGVkIGR1ZSB0byB0aGUgbmVlZCB0byBhbGxvdyBjdXJseSBicmFjZXNcbiAgLy8gaW5zaWRlIHRoZSByZWd1bGFyIGV4cHJlc3Npb24uIFRoZSBwbGFjZWhvbGRlciByZWdleHAgYnJlYWtzIGRvd24gYXMgZm9sbG93czpcbiAgLy8gICAgKFs6Kl0pKFtcXHdcXFtcXF1dKykgICAgICAgICAgICAgIC0gY2xhc3NpYyBwbGFjZWhvbGRlciAoJDEgLyAkMikgKHNlYXJjaCB2ZXJzaW9uIGhhcyAtIGZvciBzbmFrZS1jYXNlKVxuICAvLyAgICBcXHsoW1xcd1xcW1xcXV0rKSg/OlxcOiggLi4uICkpP1xcfSAgLSBjdXJseSBicmFjZSBwbGFjZWhvbGRlciAoJDMpIHdpdGggb3B0aW9uYWwgcmVnZXhwL3R5cGUgLi4uICgkNCkgKHNlYXJjaCB2ZXJzaW9uIGhhcyAtIGZvciBzbmFrZS1jYXNlXG4gIC8vICAgICg/OiAuLi4gfCAuLi4gfCAuLi4gKSsgICAgICAgICAtIHRoZSByZWdleHAgY29uc2lzdHMgb2YgYW55IG51bWJlciBvZiBhdG9tcywgYW4gYXRvbSBiZWluZyBlaXRoZXJcbiAgLy8gICAgW157fVxcXFxdKyAgICAgICAgICAgICAgICAgICAgICAgLSBhbnl0aGluZyBvdGhlciB0aGFuIGN1cmx5IGJyYWNlcyBvciBiYWNrc2xhc2hcbiAgLy8gICAgXFxcXC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBhIGJhY2tzbGFzaCBlc2NhcGVcbiAgLy8gICAgXFx7KD86W157fVxcXFxdK3xcXFxcLikqXFx9ICAgICAgICAgIC0gYSBtYXRjaGVkIHNldCBvZiBjdXJseSBicmFjZXMgY29udGFpbmluZyBvdGhlciBhdG9tc1xuICB2YXIgcGxhY2Vob2xkZXIgICAgICAgPSAvKFs6Kl0pKFtcXHdcXFtcXF1dKyl8XFx7KFtcXHdcXFtcXF1dKykoPzpcXDooKD86W157fVxcXFxdK3xcXFxcLnxcXHsoPzpbXnt9XFxcXF0rfFxcXFwuKSpcXH0pKykpP1xcfS9nLFxuICAgICAgc2VhcmNoUGxhY2Vob2xkZXIgPSAvKFs6XT8pKFtcXHdcXFtcXF0tXSspfFxceyhbXFx3XFxbXFxdLV0rKSg/OlxcOigoPzpbXnt9XFxcXF0rfFxcXFwufFxceyg/Oltee31cXFxcXSt8XFxcXC4pKlxcfSkrKSk/XFx9L2csXG4gICAgICBjb21waWxlZCA9ICdeJywgbGFzdCA9IDAsIG0sXG4gICAgICBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHMgPSBbXSxcbiAgICAgIHBhcmVudFBhcmFtcyA9IHBhcmVudE1hdGNoZXIgPyBwYXJlbnRNYXRjaGVyLnBhcmFtcyA6IHt9LFxuICAgICAgcGFyYW1zID0gdGhpcy5wYXJhbXMgPSBwYXJlbnRNYXRjaGVyID8gcGFyZW50TWF0Y2hlci5wYXJhbXMuJCRuZXcoKSA6IG5ldyAkJFVNRlAuUGFyYW1TZXQoKSxcbiAgICAgIHBhcmFtTmFtZXMgPSBbXTtcblxuICBmdW5jdGlvbiBhZGRQYXJhbWV0ZXIoaWQsIHR5cGUsIGNvbmZpZywgbG9jYXRpb24pIHtcbiAgICBwYXJhbU5hbWVzLnB1c2goaWQpO1xuICAgIGlmIChwYXJlbnRQYXJhbXNbaWRdKSByZXR1cm4gcGFyZW50UGFyYW1zW2lkXTtcbiAgICBpZiAoIS9eXFx3KygtK1xcdyspKig/OlxcW1xcXSk/JC8udGVzdChpZCkpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFyYW1ldGVyIG5hbWUgJ1wiICsgaWQgKyBcIicgaW4gcGF0dGVybiAnXCIgKyBwYXR0ZXJuICsgXCInXCIpO1xuICAgIGlmIChwYXJhbXNbaWRdKSB0aHJvdyBuZXcgRXJyb3IoXCJEdXBsaWNhdGUgcGFyYW1ldGVyIG5hbWUgJ1wiICsgaWQgKyBcIicgaW4gcGF0dGVybiAnXCIgKyBwYXR0ZXJuICsgXCInXCIpO1xuICAgIHBhcmFtc1tpZF0gPSBuZXcgJCRVTUZQLlBhcmFtKGlkLCB0eXBlLCBjb25maWcsIGxvY2F0aW9uKTtcbiAgICByZXR1cm4gcGFyYW1zW2lkXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1b3RlUmVnRXhwKHN0cmluZywgcGF0dGVybiwgc3F1YXNoLCBvcHRpb25hbCkge1xuICAgIHZhciBzdXJyb3VuZFBhdHRlcm4gPSBbJycsJyddLCByZXN1bHQgPSBzdHJpbmcucmVwbGFjZSgvW1xcXFxcXFtcXF1cXF4kKis/LigpfHt9XS9nLCBcIlxcXFwkJlwiKTtcbiAgICBpZiAoIXBhdHRlcm4pIHJldHVybiByZXN1bHQ7XG4gICAgc3dpdGNoKHNxdWFzaCkge1xuICAgICAgY2FzZSBmYWxzZTogc3Vycm91bmRQYXR0ZXJuID0gWycoJywgJyknICsgKG9wdGlvbmFsID8gXCI/XCIgOiBcIlwiKV07IGJyZWFrO1xuICAgICAgY2FzZSB0cnVlOiAgc3Vycm91bmRQYXR0ZXJuID0gWyc/KCcsICcpPyddOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6ICAgIHN1cnJvdW5kUGF0dGVybiA9IFsnKCcgKyBzcXVhc2ggKyBcInxcIiwgJyk/J107IGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0ICsgc3Vycm91bmRQYXR0ZXJuWzBdICsgcGF0dGVybiArIHN1cnJvdW5kUGF0dGVyblsxXTtcbiAgfVxuXG4gIHRoaXMuc291cmNlID0gcGF0dGVybjtcblxuICAvLyBTcGxpdCBpbnRvIHN0YXRpYyBzZWdtZW50cyBzZXBhcmF0ZWQgYnkgcGF0aCBwYXJhbWV0ZXIgcGxhY2Vob2xkZXJzLlxuICAvLyBUaGUgbnVtYmVyIG9mIHNlZ21lbnRzIGlzIGFsd2F5cyAxIG1vcmUgdGhhbiB0aGUgbnVtYmVyIG9mIHBhcmFtZXRlcnMuXG4gIGZ1bmN0aW9uIG1hdGNoRGV0YWlscyhtLCBpc1NlYXJjaCkge1xuICAgIHZhciBpZCwgcmVnZXhwLCBzZWdtZW50LCB0eXBlLCBjZmcsIGFycmF5TW9kZTtcbiAgICBpZCAgICAgICAgICA9IG1bMl0gfHwgbVszXTsgLy8gSUVbNzhdIHJldHVybnMgJycgZm9yIHVubWF0Y2hlZCBncm91cHMgaW5zdGVhZCBvZiBudWxsXG4gICAgY2ZnICAgICAgICAgPSBjb25maWcucGFyYW1zW2lkXTtcbiAgICBzZWdtZW50ICAgICA9IHBhdHRlcm4uc3Vic3RyaW5nKGxhc3QsIG0uaW5kZXgpO1xuICAgIHJlZ2V4cCAgICAgID0gaXNTZWFyY2ggPyBtWzRdIDogbVs0XSB8fCAobVsxXSA9PSAnKicgPyAnLionIDogbnVsbCk7XG4gICAgdHlwZSAgICAgICAgPSAkJFVNRlAudHlwZShyZWdleHAgfHwgXCJzdHJpbmdcIikgfHwgaW5oZXJpdCgkJFVNRlAudHlwZShcInN0cmluZ1wiKSwgeyBwYXR0ZXJuOiBuZXcgUmVnRXhwKHJlZ2V4cCwgY29uZmlnLmNhc2VJbnNlbnNpdGl2ZSA/ICdpJyA6IHVuZGVmaW5lZCkgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBpZCwgcmVnZXhwOiByZWdleHAsIHNlZ21lbnQ6IHNlZ21lbnQsIHR5cGU6IHR5cGUsIGNmZzogY2ZnXG4gICAgfTtcbiAgfVxuXG4gIHZhciBwLCBwYXJhbSwgc2VnbWVudDtcbiAgd2hpbGUgKChtID0gcGxhY2Vob2xkZXIuZXhlYyhwYXR0ZXJuKSkpIHtcbiAgICBwID0gbWF0Y2hEZXRhaWxzKG0sIGZhbHNlKTtcbiAgICBpZiAocC5zZWdtZW50LmluZGV4T2YoJz8nKSA+PSAwKSBicmVhazsgLy8gd2UncmUgaW50byB0aGUgc2VhcmNoIHBhcnRcblxuICAgIHBhcmFtID0gYWRkUGFyYW1ldGVyKHAuaWQsIHAudHlwZSwgcC5jZmcsIFwicGF0aFwiKTtcbiAgICBjb21waWxlZCArPSBxdW90ZVJlZ0V4cChwLnNlZ21lbnQsIHBhcmFtLnR5cGUucGF0dGVybi5zb3VyY2UsIHBhcmFtLnNxdWFzaCwgcGFyYW0uaXNPcHRpb25hbCk7XG4gICAgc2VnbWVudHMucHVzaChwLnNlZ21lbnQpO1xuICAgIGxhc3QgPSBwbGFjZWhvbGRlci5sYXN0SW5kZXg7XG4gIH1cbiAgc2VnbWVudCA9IHBhdHRlcm4uc3Vic3RyaW5nKGxhc3QpO1xuXG4gIC8vIEZpbmQgYW55IHNlYXJjaCBwYXJhbWV0ZXIgbmFtZXMgYW5kIHJlbW92ZSB0aGVtIGZyb20gdGhlIGxhc3Qgc2VnbWVudFxuICB2YXIgaSA9IHNlZ21lbnQuaW5kZXhPZignPycpO1xuXG4gIGlmIChpID49IDApIHtcbiAgICB2YXIgc2VhcmNoID0gdGhpcy5zb3VyY2VTZWFyY2ggPSBzZWdtZW50LnN1YnN0cmluZyhpKTtcbiAgICBzZWdtZW50ID0gc2VnbWVudC5zdWJzdHJpbmcoMCwgaSk7XG4gICAgdGhpcy5zb3VyY2VQYXRoID0gcGF0dGVybi5zdWJzdHJpbmcoMCwgbGFzdCArIGkpO1xuXG4gICAgaWYgKHNlYXJjaC5sZW5ndGggPiAwKSB7XG4gICAgICBsYXN0ID0gMDtcbiAgICAgIHdoaWxlICgobSA9IHNlYXJjaFBsYWNlaG9sZGVyLmV4ZWMoc2VhcmNoKSkpIHtcbiAgICAgICAgcCA9IG1hdGNoRGV0YWlscyhtLCB0cnVlKTtcbiAgICAgICAgcGFyYW0gPSBhZGRQYXJhbWV0ZXIocC5pZCwgcC50eXBlLCBwLmNmZywgXCJzZWFyY2hcIik7XG4gICAgICAgIGxhc3QgPSBwbGFjZWhvbGRlci5sYXN0SW5kZXg7XG4gICAgICAgIC8vIGNoZWNrIGlmID8mXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuc291cmNlUGF0aCA9IHBhdHRlcm47XG4gICAgdGhpcy5zb3VyY2VTZWFyY2ggPSAnJztcbiAgfVxuXG4gIGNvbXBpbGVkICs9IHF1b3RlUmVnRXhwKHNlZ21lbnQpICsgKGNvbmZpZy5zdHJpY3QgPT09IGZhbHNlID8gJ1xcLz8nIDogJycpICsgJyQnO1xuICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuXG4gIHRoaXMucmVnZXhwID0gbmV3IFJlZ0V4cChjb21waWxlZCwgY29uZmlnLmNhc2VJbnNlbnNpdGl2ZSA/ICdpJyA6IHVuZGVmaW5lZCk7XG4gIHRoaXMucHJlZml4ID0gc2VnbWVudHNbMF07XG4gIHRoaXMuJCRwYXJhbU5hbWVzID0gcGFyYW1OYW1lcztcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciNjb25jYXRcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYSBuZXcgbWF0Y2hlciBmb3IgYSBwYXR0ZXJuIGNvbnN0cnVjdGVkIGJ5IGFwcGVuZGluZyB0aGUgcGF0aCBwYXJ0IGFuZCBhZGRpbmcgdGhlXG4gKiBzZWFyY2ggcGFyYW1ldGVycyBvZiB0aGUgc3BlY2lmaWVkIHBhdHRlcm4gdG8gdGhpcyBwYXR0ZXJuLiBUaGUgY3VycmVudCBwYXR0ZXJuIGlzIG5vdFxuICogbW9kaWZpZWQuIFRoaXMgY2FuIGJlIHVuZGVyc3Rvb2QgYXMgY3JlYXRpbmcgYSBwYXR0ZXJuIGZvciBVUkxzIHRoYXQgYXJlIHJlbGF0aXZlIHRvIChvclxuICogc3VmZml4ZXMgb2YpIHRoZSBjdXJyZW50IHBhdHRlcm4uXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoZSBmb2xsb3dpbmcgdHdvIG1hdGNoZXJzIGFyZSBlcXVpdmFsZW50OlxuICogPHByZT5cbiAqIG5ldyBVcmxNYXRjaGVyKCcvdXNlci97aWR9P3EnKS5jb25jYXQoJy9kZXRhaWxzP2RhdGUnKTtcbiAqIG5ldyBVcmxNYXRjaGVyKCcvdXNlci97aWR9L2RldGFpbHM/cSZkYXRlJyk7XG4gKiA8L3ByZT5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAgVGhlIHBhdHRlcm4gdG8gYXBwZW5kLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyAgQW4gb2JqZWN0IGhhc2ggb2YgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBtYXRjaGVyLlxuICogQHJldHVybnMge1VybE1hdGNoZXJ9ICBBIG1hdGNoZXIgZm9yIHRoZSBjb25jYXRlbmF0ZWQgcGF0dGVybi5cbiAqL1xuVXJsTWF0Y2hlci5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKHBhdHRlcm4sIGNvbmZpZykge1xuICAvLyBCZWNhdXNlIG9yZGVyIG9mIHNlYXJjaCBwYXJhbWV0ZXJzIGlzIGlycmVsZXZhbnQsIHdlIGNhbiBhZGQgb3VyIG93biBzZWFyY2hcbiAgLy8gcGFyYW1ldGVycyB0byB0aGUgZW5kIG9mIHRoZSBuZXcgcGF0dGVybi4gUGFyc2UgdGhlIG5ldyBwYXR0ZXJuIGJ5IGl0c2VsZlxuICAvLyBhbmQgdGhlbiBqb2luIHRoZSBiaXRzIHRvZ2V0aGVyLCBidXQgaXQncyBtdWNoIGVhc2llciB0byBkbyB0aGlzIG9uIGEgc3RyaW5nIGxldmVsLlxuICB2YXIgZGVmYXVsdENvbmZpZyA9IHtcbiAgICBjYXNlSW5zZW5zaXRpdmU6ICQkVU1GUC5jYXNlSW5zZW5zaXRpdmUoKSxcbiAgICBzdHJpY3Q6ICQkVU1GUC5zdHJpY3RNb2RlKCksXG4gICAgc3F1YXNoOiAkJFVNRlAuZGVmYXVsdFNxdWFzaFBvbGljeSgpXG4gIH07XG4gIHJldHVybiBuZXcgVXJsTWF0Y2hlcih0aGlzLnNvdXJjZVBhdGggKyBwYXR0ZXJuICsgdGhpcy5zb3VyY2VTZWFyY2gsIGV4dGVuZChkZWZhdWx0Q29uZmlnLCBjb25maWcpLCB0aGlzKTtcbn07XG5cblVybE1hdGNoZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5zb3VyY2U7XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyI2V4ZWNcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRlc3RzIHRoZSBzcGVjaWZpZWQgcGF0aCBhZ2FpbnN0IHRoaXMgbWF0Y2hlciwgYW5kIHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGNhcHR1cmVkXG4gKiBwYXJhbWV0ZXIgdmFsdWVzLCBvciBudWxsIGlmIHRoZSBwYXRoIGRvZXMgbm90IG1hdGNoLiBUaGUgcmV0dXJuZWQgb2JqZWN0IGNvbnRhaW5zIHRoZSB2YWx1ZXNcbiAqIG9mIGFueSBzZWFyY2ggcGFyYW1ldGVycyB0aGF0IGFyZSBtZW50aW9uZWQgaW4gdGhlIHBhdHRlcm4sIGJ1dCB0aGVpciB2YWx1ZSBtYXkgYmUgbnVsbCBpZlxuICogdGhleSBhcmUgbm90IHByZXNlbnQgaW4gYHNlYXJjaFBhcmFtc2AuIFRoaXMgbWVhbnMgdGhhdCBzZWFyY2ggcGFyYW1ldGVycyBhcmUgYWx3YXlzIHRyZWF0ZWRcbiAqIGFzIG9wdGlvbmFsLlxuICpcbiAqIEBleGFtcGxlXG4gKiA8cHJlPlxuICogbmV3IFVybE1hdGNoZXIoJy91c2VyL3tpZH0/cSZyJykuZXhlYygnL3VzZXIvYm9iJywge1xuICogICB4OiAnMScsIHE6ICdoZWxsbydcbiAqIH0pO1xuICogLy8gcmV0dXJucyB7IGlkOiAnYm9iJywgcTogJ2hlbGxvJywgcjogbnVsbCB9XG4gKiA8L3ByZT5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAgVGhlIFVSTCBwYXRoIHRvIG1hdGNoLCBlLmcuIGAkbG9jYXRpb24ucGF0aCgpYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWFyY2hQYXJhbXMgIFVSTCBzZWFyY2ggcGFyYW1ldGVycywgZS5nLiBgJGxvY2F0aW9uLnNlYXJjaCgpYC5cbiAqIEByZXR1cm5zIHtPYmplY3R9ICBUaGUgY2FwdHVyZWQgcGFyYW1ldGVyIHZhbHVlcy5cbiAqL1xuVXJsTWF0Y2hlci5wcm90b3R5cGUuZXhlYyA9IGZ1bmN0aW9uIChwYXRoLCBzZWFyY2hQYXJhbXMpIHtcbiAgdmFyIG0gPSB0aGlzLnJlZ2V4cC5leGVjKHBhdGgpO1xuICBpZiAoIW0pIHJldHVybiBudWxsO1xuICBzZWFyY2hQYXJhbXMgPSBzZWFyY2hQYXJhbXMgfHwge307XG5cbiAgdmFyIHBhcmFtTmFtZXMgPSB0aGlzLnBhcmFtZXRlcnMoKSwgblRvdGFsID0gcGFyYW1OYW1lcy5sZW5ndGgsXG4gICAgblBhdGggPSB0aGlzLnNlZ21lbnRzLmxlbmd0aCAtIDEsXG4gICAgdmFsdWVzID0ge30sIGksIGosIGNmZywgcGFyYW1OYW1lO1xuXG4gIGlmIChuUGF0aCAhPT0gbS5sZW5ndGggLSAxKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmJhbGFuY2VkIGNhcHR1cmUgZ3JvdXAgaW4gcm91dGUgJ1wiICsgdGhpcy5zb3VyY2UgKyBcIidcIik7XG5cbiAgZnVuY3Rpb24gZGVjb2RlUGF0aEFycmF5KHN0cmluZykge1xuICAgIGZ1bmN0aW9uIHJldmVyc2VTdHJpbmcoc3RyKSB7IHJldHVybiBzdHIuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7IH1cbiAgICBmdW5jdGlvbiB1bnF1b3RlRGFzaGVzKHN0cikgeyByZXR1cm4gc3RyLnJlcGxhY2UoL1xcXFwtL2csIFwiLVwiKTsgfVxuXG4gICAgdmFyIHNwbGl0ID0gcmV2ZXJzZVN0cmluZyhzdHJpbmcpLnNwbGl0KC8tKD8hXFxcXCkvKTtcbiAgICB2YXIgYWxsUmV2ZXJzZWQgPSBtYXAoc3BsaXQsIHJldmVyc2VTdHJpbmcpO1xuICAgIHJldHVybiBtYXAoYWxsUmV2ZXJzZWQsIHVucXVvdGVEYXNoZXMpLnJldmVyc2UoKTtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBuUGF0aDsgaSsrKSB7XG4gICAgcGFyYW1OYW1lID0gcGFyYW1OYW1lc1tpXTtcbiAgICB2YXIgcGFyYW0gPSB0aGlzLnBhcmFtc1twYXJhbU5hbWVdO1xuICAgIHZhciBwYXJhbVZhbCA9IG1baSsxXTtcbiAgICAvLyBpZiB0aGUgcGFyYW0gdmFsdWUgbWF0Y2hlcyBhIHByZS1yZXBsYWNlIHBhaXIsIHJlcGxhY2UgdGhlIHZhbHVlIGJlZm9yZSBkZWNvZGluZy5cbiAgICBmb3IgKGogPSAwOyBqIDwgcGFyYW0ucmVwbGFjZTsgaisrKSB7XG4gICAgICBpZiAocGFyYW0ucmVwbGFjZVtqXS5mcm9tID09PSBwYXJhbVZhbCkgcGFyYW1WYWwgPSBwYXJhbS5yZXBsYWNlW2pdLnRvO1xuICAgIH1cbiAgICBpZiAocGFyYW1WYWwgJiYgcGFyYW0uYXJyYXkgPT09IHRydWUpIHBhcmFtVmFsID0gZGVjb2RlUGF0aEFycmF5KHBhcmFtVmFsKTtcbiAgICB2YWx1ZXNbcGFyYW1OYW1lXSA9IHBhcmFtLnZhbHVlKHBhcmFtVmFsKTtcbiAgfVxuICBmb3IgKC8qKi87IGkgPCBuVG90YWw7IGkrKykge1xuICAgIHBhcmFtTmFtZSA9IHBhcmFtTmFtZXNbaV07XG4gICAgdmFsdWVzW3BhcmFtTmFtZV0gPSB0aGlzLnBhcmFtc1twYXJhbU5hbWVdLnZhbHVlKHNlYXJjaFBhcmFtc1twYXJhbU5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyI3BhcmFtZXRlcnNcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdGhlIG5hbWVzIG9mIGFsbCBwYXRoIGFuZCBzZWFyY2ggcGFyYW1ldGVycyBvZiB0aGlzIHBhdHRlcm4gaW4gYW4gdW5zcGVjaWZpZWQgb3JkZXIuXG4gKlxuICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSAgQW4gYXJyYXkgb2YgcGFyYW1ldGVyIG5hbWVzLiBNdXN0IGJlIHRyZWF0ZWQgYXMgcmVhZC1vbmx5LiBJZiB0aGVcbiAqICAgIHBhdHRlcm4gaGFzIG5vIHBhcmFtZXRlcnMsIGFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkLlxuICovXG5VcmxNYXRjaGVyLnByb3RvdHlwZS5wYXJhbWV0ZXJzID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gIGlmICghaXNEZWZpbmVkKHBhcmFtKSkgcmV0dXJuIHRoaXMuJCRwYXJhbU5hbWVzO1xuICByZXR1cm4gdGhpcy5wYXJhbXNbcGFyYW1dIHx8IG51bGw7XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyI3ZhbGlkYXRlXG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDaGVja3MgYW4gb2JqZWN0IGhhc2ggb2YgcGFyYW1ldGVycyB0byB2YWxpZGF0ZSB0aGVpciBjb3JyZWN0bmVzcyBhY2NvcmRpbmcgdG8gdGhlIHBhcmFtZXRlclxuICogdHlwZXMgb2YgdGhpcyBgVXJsTWF0Y2hlcmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBUaGUgb2JqZWN0IGhhc2ggb2YgcGFyYW1ldGVycyB0byB2YWxpZGF0ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGFyYW1zYCB2YWxpZGF0ZXMsIG90aGVyd2lzZSBgZmFsc2VgLlxuICovXG5VcmxNYXRjaGVyLnByb3RvdHlwZS52YWxpZGF0ZXMgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLnBhcmFtcy4kJHZhbGlkYXRlcyhwYXJhbXMpO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciNmb3JtYXRcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBVUkwgdGhhdCBtYXRjaGVzIHRoaXMgcGF0dGVybiBieSBzdWJzdGl0dXRpbmcgdGhlIHNwZWNpZmllZCB2YWx1ZXNcbiAqIGZvciB0aGUgcGF0aCBhbmQgc2VhcmNoIHBhcmFtZXRlcnMuIE51bGwgdmFsdWVzIGZvciBwYXRoIHBhcmFtZXRlcnMgYXJlXG4gKiB0cmVhdGVkIGFzIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxwcmU+XG4gKiBuZXcgVXJsTWF0Y2hlcignL3VzZXIve2lkfT9xJykuZm9ybWF0KHsgaWQ6J2JvYicsIHE6J3llcycgfSk7XG4gKiAvLyByZXR1cm5zICcvdXNlci9ib2I/cT15ZXMnXG4gKiA8L3ByZT5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzICB0aGUgdmFsdWVzIHRvIHN1YnN0aXR1dGUgZm9yIHRoZSBwYXJhbWV0ZXJzIGluIHRoaXMgcGF0dGVybi5cbiAqIEByZXR1cm5zIHtzdHJpbmd9ICB0aGUgZm9ybWF0dGVkIFVSTCAocGF0aCBhbmQgb3B0aW9uYWxseSBzZWFyY2ggcGFydCkuXG4gKi9cblVybE1hdGNoZXIucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgdmFsdWVzID0gdmFsdWVzIHx8IHt9O1xuICB2YXIgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzLCBwYXJhbXMgPSB0aGlzLnBhcmFtZXRlcnMoKSwgcGFyYW1zZXQgPSB0aGlzLnBhcmFtcztcbiAgaWYgKCF0aGlzLnZhbGlkYXRlcyh2YWx1ZXMpKSByZXR1cm4gbnVsbDtcblxuICB2YXIgaSwgc2VhcmNoID0gZmFsc2UsIG5QYXRoID0gc2VnbWVudHMubGVuZ3RoIC0gMSwgblRvdGFsID0gcGFyYW1zLmxlbmd0aCwgcmVzdWx0ID0gc2VnbWVudHNbMF07XG5cbiAgZnVuY3Rpb24gZW5jb2RlRGFzaGVzKHN0cikgeyAvLyBSZXBsYWNlIGRhc2hlcyB3aXRoIGVuY29kZWQgXCJcXC1cIlxuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC8tL2csIGZ1bmN0aW9uKGMpIHsgcmV0dXJuICclNUMlJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSk7XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgblRvdGFsOyBpKyspIHtcbiAgICB2YXIgaXNQYXRoUGFyYW0gPSBpIDwgblBhdGg7XG4gICAgdmFyIG5hbWUgPSBwYXJhbXNbaV0sIHBhcmFtID0gcGFyYW1zZXRbbmFtZV0sIHZhbHVlID0gcGFyYW0udmFsdWUodmFsdWVzW25hbWVdKTtcbiAgICB2YXIgaXNEZWZhdWx0VmFsdWUgPSBwYXJhbS5pc09wdGlvbmFsICYmIHBhcmFtLnR5cGUuZXF1YWxzKHBhcmFtLnZhbHVlKCksIHZhbHVlKTtcbiAgICB2YXIgc3F1YXNoID0gaXNEZWZhdWx0VmFsdWUgPyBwYXJhbS5zcXVhc2ggOiBmYWxzZTtcbiAgICB2YXIgZW5jb2RlZCA9IHBhcmFtLnR5cGUuZW5jb2RlKHZhbHVlKTtcblxuICAgIGlmIChpc1BhdGhQYXJhbSkge1xuICAgICAgdmFyIG5leHRTZWdtZW50ID0gc2VnbWVudHNbaSArIDFdO1xuICAgICAgaWYgKHNxdWFzaCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGVuY29kZWQgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KGVuY29kZWQpKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gbWFwKGVuY29kZWQsIGVuY29kZURhc2hlcykuam9pbihcIi1cIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBlbmNvZGVVUklDb21wb25lbnQoZW5jb2RlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSBuZXh0U2VnbWVudDtcbiAgICAgIH0gZWxzZSBpZiAoc3F1YXNoID09PSB0cnVlKSB7XG4gICAgICAgIHZhciBjYXB0dXJlID0gcmVzdWx0Lm1hdGNoKC9cXC8kLykgPyAvXFwvPyguKikvIDogLyguKikvO1xuICAgICAgICByZXN1bHQgKz0gbmV4dFNlZ21lbnQubWF0Y2goY2FwdHVyZSlbMV07XG4gICAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKHNxdWFzaCkpIHtcbiAgICAgICAgcmVzdWx0ICs9IHNxdWFzaCArIG5leHRTZWdtZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZW5jb2RlZCA9PSBudWxsIHx8IChpc0RlZmF1bHRWYWx1ZSAmJiBzcXVhc2ggIT09IGZhbHNlKSkgY29udGludWU7XG4gICAgICBpZiAoIWlzQXJyYXkoZW5jb2RlZCkpIGVuY29kZWQgPSBbIGVuY29kZWQgXTtcbiAgICAgIGVuY29kZWQgPSBtYXAoZW5jb2RlZCwgZW5jb2RlVVJJQ29tcG9uZW50KS5qb2luKCcmJyArIG5hbWUgKyAnPScpO1xuICAgICAgcmVzdWx0ICs9IChzZWFyY2ggPyAnJicgOiAnPycpICsgKG5hbWUgKyAnPScgKyBlbmNvZGVkKTtcbiAgICAgIHNlYXJjaCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJbXBsZW1lbnRzIGFuIGludGVyZmFjZSB0byBkZWZpbmUgY3VzdG9tIHBhcmFtZXRlciB0eXBlcyB0aGF0IGNhbiBiZSBkZWNvZGVkIGZyb20gYW5kIGVuY29kZWQgdG9cbiAqIHN0cmluZyBwYXJhbWV0ZXJzIG1hdGNoZWQgaW4gYSBVUkwuIFVzZWQgYnkge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciBgVXJsTWF0Y2hlcmB9XG4gKiBvYmplY3RzIHdoZW4gbWF0Y2hpbmcgb3IgZm9ybWF0dGluZyBVUkxzLCBvciBjb21wYXJpbmcgb3IgdmFsaWRhdGluZyBwYXJhbWV0ZXIgdmFsdWVzLlxuICpcbiAqIFNlZSB7QGxpbmsgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5I21ldGhvZHNfdHlwZSBgJHVybE1hdGNoZXJGYWN0b3J5I3R5cGUoKWB9IGZvciBtb3JlXG4gKiBpbmZvcm1hdGlvbiBvbiByZWdpc3RlcmluZyBjdXN0b20gdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyAgQSBjb25maWd1cmF0aW9uIG9iamVjdCB3aGljaCBjb250YWlucyB0aGUgY3VzdG9tIHR5cGUgZGVmaW5pdGlvbi4gIFRoZSBvYmplY3Qnc1xuICogICAgICAgIHByb3BlcnRpZXMgd2lsbCBvdmVycmlkZSB0aGUgZGVmYXVsdCBtZXRob2RzIGFuZC9vciBwYXR0ZXJuIGluIGBUeXBlYCdzIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBAZXhhbXBsZVxuICogPHByZT5cbiAqIHtcbiAqICAgZGVjb2RlOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTApOyB9LFxuICogICBlbmNvZGU6IGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gdmFsICYmIHZhbC50b1N0cmluZygpOyB9LFxuICogICBlcXVhbHM6IGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHRoaXMuaXMoYSkgJiYgYSA9PT0gYjsgfSxcbiAqICAgaXM6IGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gYW5ndWxhci5pc051bWJlcih2YWwpIGlzRmluaXRlKHZhbCkgJiYgdmFsICUgMSA9PT0gMDsgfSxcbiAqICAgcGF0dGVybjogL1xcZCsvXG4gKiB9XG4gKiA8L3ByZT5cbiAqXG4gKiBAcHJvcGVydHkge1JlZ0V4cH0gcGF0dGVybiBUaGUgcmVndWxhciBleHByZXNzaW9uIHBhdHRlcm4gdXNlZCB0byBtYXRjaCB2YWx1ZXMgb2YgdGhpcyB0eXBlIHdoZW5cbiAqICAgICAgICAgICBjb21pbmcgZnJvbSBhIHN1YnN0cmluZyBvZiBhIFVSTC5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAgUmV0dXJucyBhIG5ldyBgVHlwZWAgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBUeXBlKGNvbmZpZykge1xuICBleHRlbmQodGhpcywgY29uZmlnKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZSNpc1xuICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZWN0cyB3aGV0aGVyIGEgdmFsdWUgaXMgb2YgYSBwYXJ0aWN1bGFyIHR5cGUuIEFjY2VwdHMgYSBuYXRpdmUgKGRlY29kZWQpIHZhbHVlXG4gKiBhbmQgZGV0ZXJtaW5lcyB3aGV0aGVyIGl0IG1hdGNoZXMgdGhlIGN1cnJlbnQgYFR5cGVgIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCAgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAgT3B0aW9uYWwuIElmIHRoZSB0eXBlIGNoZWNrIGlzIGhhcHBlbmluZyBpbiB0aGUgY29udGV4dCBvZiBhIHNwZWNpZmljXG4gKiAgICAgICAge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciBgVXJsTWF0Y2hlcmB9IG9iamVjdCwgdGhpcyBpcyB0aGUgbmFtZSBvZiB0aGVcbiAqICAgICAgICBwYXJhbWV0ZXIgaW4gd2hpY2ggYHZhbGAgaXMgc3RvcmVkLiBDYW4gYmUgdXNlZCBmb3IgbWV0YS1wcm9ncmFtbWluZyBvZiBgVHlwZWAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtCb29sZWFufSAgUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlIG1hdGNoZXMgdGhlIHR5cGUsIG90aGVyd2lzZSBgZmFsc2VgLlxuICovXG5UeXBlLnByb3RvdHlwZS5pcyA9IGZ1bmN0aW9uKHZhbCwga2V5KSB7XG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZSNlbmNvZGVcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVuY29kZXMgYSBjdXN0b20vbmF0aXZlIHR5cGUgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBjYW4gYmUgZW1iZWRkZWQgaW4gYSBVUkwuIE5vdGUgdGhhdCB0aGVcbiAqIHJldHVybiB2YWx1ZSBkb2VzICpub3QqIG5lZWQgdG8gYmUgVVJMLXNhZmUgKGkuZS4gcGFzc2VkIHRocm91Z2ggYGVuY29kZVVSSUNvbXBvbmVudCgpYCksIGl0XG4gKiBvbmx5IG5lZWRzIHRvIGJlIGEgcmVwcmVzZW50YXRpb24gb2YgYHZhbGAgdGhhdCBoYXMgYmVlbiBjb2VyY2VkIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsICBUaGUgdmFsdWUgdG8gZW5jb2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAgVGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlciBpbiB3aGljaCBgdmFsYCBpcyBzdG9yZWQuIENhbiBiZSB1c2VkIGZvclxuICogICAgICAgIG1ldGEtcHJvZ3JhbW1pbmcgb2YgYFR5cGVgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAgUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBgdmFsYCB0aGF0IGNhbiBiZSBlbmNvZGVkIGluIGEgVVJMLlxuICovXG5UeXBlLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbih2YWwsIGtleSkge1xuICByZXR1cm4gdmFsO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZSNkZWNvZGVcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIGEgcGFyYW1ldGVyIHZhbHVlIChmcm9tIFVSTCBzdHJpbmcgb3IgdHJhbnNpdGlvbiBwYXJhbSkgdG8gYSBjdXN0b20vbmF0aXZlIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgIFRoZSBVUkwgcGFyYW1ldGVyIHZhbHVlIHRvIGRlY29kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgIFRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgaW4gd2hpY2ggYHZhbGAgaXMgc3RvcmVkLiBDYW4gYmUgdXNlZCBmb3JcbiAqICAgICAgICBtZXRhLXByb2dyYW1taW5nIG9mIGBUeXBlYCBvYmplY3RzLlxuICogQHJldHVybnMgeyp9ICBSZXR1cm5zIGEgY3VzdG9tIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBVUkwgcGFyYW1ldGVyIHZhbHVlLlxuICovXG5UeXBlLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbih2YWwsIGtleSkge1xuICByZXR1cm4gdmFsO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZSNlcXVhbHNcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgd2hldGhlciB0d28gZGVjb2RlZCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHBhcmFtIHsqfSBhICBBIHZhbHVlIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAqIEBwYXJhbSB7Kn0gYiAgQSB2YWx1ZSB0byBjb21wYXJlIGFnYWluc3QuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gIFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQvZXF1YWwsIG90aGVyd2lzZSBgZmFsc2VgLlxuICovXG5UeXBlLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID09IGI7XG59O1xuXG5UeXBlLnByb3RvdHlwZS4kc3ViUGF0dGVybiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3ViID0gdGhpcy5wYXR0ZXJuLnRvU3RyaW5nKCk7XG4gIHJldHVybiBzdWIuc3Vic3RyKDEsIHN1Yi5sZW5ndGggLSAyKTtcbn07XG5cblR5cGUucHJvdG90eXBlLnBhdHRlcm4gPSAvLiovO1xuXG5UeXBlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gXCJ7VHlwZTpcIiArIHRoaXMubmFtZSArIFwifVwiOyB9O1xuXG4vKiogR2l2ZW4gYW4gZW5jb2RlZCBzdHJpbmcsIG9yIGEgZGVjb2RlZCBvYmplY3QsIHJldHVybnMgYSBkZWNvZGVkIG9iamVjdCAqL1xuVHlwZS5wcm90b3R5cGUuJG5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdGhpcy5pcyh2YWwpID8gdmFsIDogdGhpcy5kZWNvZGUodmFsKTtcbn07XG5cbi8qXG4gKiBXcmFwcyBhbiBleGlzdGluZyBjdXN0b20gVHlwZSBhcyBhbiBhcnJheSBvZiBUeXBlLCBkZXBlbmRpbmcgb24gJ21vZGUnLlxuICogZS5nLjpcbiAqIC0gdXJsbWF0Y2hlciBwYXR0ZXJuIFwiL3BhdGg/e3F1ZXJ5UGFyYW1bXTppbnR9XCJcbiAqIC0gdXJsOiBcIi9wYXRoP3F1ZXJ5UGFyYW09MSZxdWVyeVBhcmFtPTJcbiAqIC0gJHN0YXRlUGFyYW1zLnF1ZXJ5UGFyYW0gd2lsbCBiZSBbMSwgMl1cbiAqIGlmIGBtb2RlYCBpcyBcImF1dG9cIiwgdGhlblxuICogLSB1cmw6IFwiL3BhdGg/cXVlcnlQYXJhbT0xIHdpbGwgY3JlYXRlICRzdGF0ZVBhcmFtcy5xdWVyeVBhcmFtOiAxXG4gKiAtIHVybDogXCIvcGF0aD9xdWVyeVBhcmFtPTEmcXVlcnlQYXJhbT0yIHdpbGwgY3JlYXRlICRzdGF0ZVBhcmFtcy5xdWVyeVBhcmFtOiBbMSwgMl1cbiAqL1xuVHlwZS5wcm90b3R5cGUuJGFzQXJyYXkgPSBmdW5jdGlvbihtb2RlLCBpc1NlYXJjaCkge1xuICBpZiAoIW1vZGUpIHJldHVybiB0aGlzO1xuICBpZiAobW9kZSA9PT0gXCJhdXRvXCIgJiYgIWlzU2VhcmNoKSB0aHJvdyBuZXcgRXJyb3IoXCInYXV0bycgYXJyYXkgbW9kZSBpcyBmb3IgcXVlcnkgcGFyYW1ldGVycyBvbmx5XCIpO1xuXG4gIGZ1bmN0aW9uIEFycmF5VHlwZSh0eXBlLCBtb2RlKSB7XG4gICAgZnVuY3Rpb24gYmluZFRvKHR5cGUsIGNhbGxiYWNrTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdHlwZVtjYWxsYmFja05hbWVdLmFwcGx5KHR5cGUsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFdyYXAgbm9uLWFycmF5IHZhbHVlIGFzIGFycmF5XG4gICAgZnVuY3Rpb24gYXJyYXlXcmFwKHZhbCkgeyByZXR1cm4gaXNBcnJheSh2YWwpID8gdmFsIDogKGlzRGVmaW5lZCh2YWwpID8gWyB2YWwgXSA6IFtdKTsgfVxuICAgIC8vIFVud3JhcCBhcnJheSB2YWx1ZSBmb3IgXCJhdXRvXCIgbW9kZS4gUmV0dXJuIHVuZGVmaW5lZCBmb3IgZW1wdHkgYXJyYXkuXG4gICAgZnVuY3Rpb24gYXJyYXlVbndyYXAodmFsKSB7XG4gICAgICBzd2l0Y2godmFsLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG1vZGUgPT09IFwiYXV0b1wiID8gdmFsWzBdIDogdmFsO1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBmYWxzZXkodmFsKSB7IHJldHVybiAhdmFsOyB9XG5cbiAgICAvLyBXcmFwcyB0eXBlICguaXMvLmVuY29kZS8uZGVjb2RlKSBmdW5jdGlvbnMgdG8gb3BlcmF0ZSBvbiBlYWNoIHZhbHVlIG9mIGFuIGFycmF5XG4gICAgZnVuY3Rpb24gYXJyYXlIYW5kbGVyKGNhbGxiYWNrLCBhbGxUcnV0aHlNb2RlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlQXJyYXkodmFsKSB7XG4gICAgICAgIHZhbCA9IGFycmF5V3JhcCh2YWwpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbWFwKHZhbCwgY2FsbGJhY2spO1xuICAgICAgICBpZiAoYWxsVHJ1dGh5TW9kZSA9PT0gdHJ1ZSlcbiAgICAgICAgICByZXR1cm4gZmlsdGVyKHJlc3VsdCwgZmFsc2V5KS5sZW5ndGggPT09IDA7XG4gICAgICAgIHJldHVybiBhcnJheVVud3JhcChyZXN1bHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBXcmFwcyB0eXBlICguZXF1YWxzKSBmdW5jdGlvbnMgdG8gb3BlcmF0ZSBvbiBlYWNoIHZhbHVlIG9mIGFuIGFycmF5XG4gICAgZnVuY3Rpb24gYXJyYXlFcXVhbHNIYW5kbGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlQXJyYXkodmFsMSwgdmFsMikge1xuICAgICAgICB2YXIgbGVmdCA9IGFycmF5V3JhcCh2YWwxKSwgcmlnaHQgPSBhcnJheVdyYXAodmFsMik7XG4gICAgICAgIGlmIChsZWZ0Lmxlbmd0aCAhPT0gcmlnaHQubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVmdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICghY2FsbGJhY2sobGVmdFtpXSwgcmlnaHRbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMuZW5jb2RlID0gYXJyYXlIYW5kbGVyKGJpbmRUbyh0eXBlLCAnZW5jb2RlJykpO1xuICAgIHRoaXMuZGVjb2RlID0gYXJyYXlIYW5kbGVyKGJpbmRUbyh0eXBlLCAnZGVjb2RlJykpO1xuICAgIHRoaXMuaXMgICAgID0gYXJyYXlIYW5kbGVyKGJpbmRUbyh0eXBlLCAnaXMnKSwgdHJ1ZSk7XG4gICAgdGhpcy5lcXVhbHMgPSBhcnJheUVxdWFsc0hhbmRsZXIoYmluZFRvKHR5cGUsICdlcXVhbHMnKSk7XG4gICAgdGhpcy5wYXR0ZXJuID0gdHlwZS5wYXR0ZXJuO1xuICAgIHRoaXMuJG5vcm1hbGl6ZSA9IGFycmF5SGFuZGxlcihiaW5kVG8odHlwZSwgJyRub3JtYWxpemUnKSk7XG4gICAgdGhpcy5uYW1lID0gdHlwZS5uYW1lO1xuICAgIHRoaXMuJGFycmF5TW9kZSA9IG1vZGU7XG4gIH1cblxuICByZXR1cm4gbmV3IEFycmF5VHlwZSh0aGlzLCBtb2RlKTtcbn07XG5cblxuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmFjdG9yeSBmb3Ige0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciBgVXJsTWF0Y2hlcmB9IGluc3RhbmNlcy4gVGhlIGZhY3RvcnlcbiAqIGlzIGFsc28gYXZhaWxhYmxlIHRvIHByb3ZpZGVycyB1bmRlciB0aGUgbmFtZSBgJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXJgLlxuICovXG5mdW5jdGlvbiAkVXJsTWF0Y2hlckZhY3RvcnkoKSB7XG4gICQkVU1GUCA9IHRoaXM7XG5cbiAgdmFyIGlzQ2FzZUluc2Vuc2l0aXZlID0gZmFsc2UsIGlzU3RyaWN0TW9kZSA9IHRydWUsIGRlZmF1bHRTcXVhc2hQb2xpY3kgPSBmYWxzZTtcblxuICBmdW5jdGlvbiB2YWxUb1N0cmluZyh2YWwpIHsgcmV0dXJuIHZhbCAhPSBudWxsID8gdmFsLnRvU3RyaW5nKCkucmVwbGFjZSgvXFwvL2csIFwiJTJGXCIpIDogdmFsOyB9XG4gIGZ1bmN0aW9uIHZhbEZyb21TdHJpbmcodmFsKSB7IHJldHVybiB2YWwgIT0gbnVsbCA/IHZhbC50b1N0cmluZygpLnJlcGxhY2UoLyUyRi9nLCBcIi9cIikgOiB2YWw7IH1cblxuICB2YXIgJHR5cGVzID0ge30sIGVucXVldWUgPSB0cnVlLCB0eXBlUXVldWUgPSBbXSwgaW5qZWN0b3IsIGRlZmF1bHRUeXBlcyA9IHtcbiAgICBzdHJpbmc6IHtcbiAgICAgIGVuY29kZTogdmFsVG9TdHJpbmcsXG4gICAgICBkZWNvZGU6IHZhbEZyb21TdHJpbmcsXG4gICAgICAvLyBUT0RPOiBpbiAxLjAsIG1ha2Ugc3RyaW5nIC5pcygpIHJldHVybiBmYWxzZSBpZiB2YWx1ZSBpcyB1bmRlZmluZWQvbnVsbCBieSBkZWZhdWx0LlxuICAgICAgLy8gSW4gMC4yLngsIHN0cmluZyBwYXJhbXMgYXJlIG9wdGlvbmFsIGJ5IGRlZmF1bHQgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAgICAgIGlzOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHZhbCA9PSBudWxsIHx8ICFpc0RlZmluZWQodmFsKSB8fCB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiOyB9LFxuICAgICAgcGF0dGVybjogL1teL10qL1xuICAgIH0sXG4gICAgaW50OiB7XG4gICAgICBlbmNvZGU6IHZhbFRvU3RyaW5nLFxuICAgICAgZGVjb2RlOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTApOyB9LFxuICAgICAgaXM6IGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gaXNEZWZpbmVkKHZhbCkgJiYgdGhpcy5kZWNvZGUodmFsLnRvU3RyaW5nKCkpID09PSB2YWw7IH0sXG4gICAgICBwYXR0ZXJuOiAvXFxkKy9cbiAgICB9LFxuICAgIGJvb2w6IHtcbiAgICAgIGVuY29kZTogZnVuY3Rpb24odmFsKSB7IHJldHVybiB2YWwgPyAxIDogMDsgfSxcbiAgICAgIGRlY29kZTogZnVuY3Rpb24odmFsKSB7IHJldHVybiBwYXJzZUludCh2YWwsIDEwKSAhPT0gMDsgfSxcbiAgICAgIGlzOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09IGZhbHNlOyB9LFxuICAgICAgcGF0dGVybjogLzB8MS9cbiAgICB9LFxuICAgIGRhdGU6IHtcbiAgICAgIGVuY29kZTogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICBpZiAoIXRoaXMuaXModmFsKSlcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gWyB2YWwuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAoJzAnICsgKHZhbC5nZXRNb250aCgpICsgMSkpLnNsaWNlKC0yKSxcbiAgICAgICAgICAoJzAnICsgdmFsLmdldERhdGUoKSkuc2xpY2UoLTIpXG4gICAgICAgIF0uam9pbihcIi1cIik7XG4gICAgICB9LFxuICAgICAgZGVjb2RlOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIGlmICh0aGlzLmlzKHZhbCkpIHJldHVybiB2YWw7XG4gICAgICAgIHZhciBtYXRjaCA9IHRoaXMuY2FwdHVyZS5leGVjKHZhbCk7XG4gICAgICAgIHJldHVybiBtYXRjaCA/IG5ldyBEYXRlKG1hdGNoWzFdLCBtYXRjaFsyXSAtIDEsIG1hdGNoWzNdKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0sXG4gICAgICBpczogZnVuY3Rpb24odmFsKSB7IHJldHVybiB2YWwgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTih2YWwudmFsdWVPZigpKTsgfSxcbiAgICAgIGVxdWFsczogZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIHRoaXMuaXMoYSkgJiYgdGhpcy5pcyhiKSAmJiBhLnRvSVNPU3RyaW5nKCkgPT09IGIudG9JU09TdHJpbmcoKTsgfSxcbiAgICAgIHBhdHRlcm46IC9bMC05XXs0fS0oPzowWzEtOV18MVswLTJdKS0oPzowWzEtOV18WzEtMl1bMC05XXwzWzAtMV0pLyxcbiAgICAgIGNhcHR1cmU6IC8oWzAtOV17NH0pLSgwWzEtOV18MVswLTJdKS0oMFsxLTldfFsxLTJdWzAtOV18M1swLTFdKS9cbiAgICB9LFxuICAgIGpzb246IHtcbiAgICAgIGVuY29kZTogYW5ndWxhci50b0pzb24sXG4gICAgICBkZWNvZGU6IGFuZ3VsYXIuZnJvbUpzb24sXG4gICAgICBpczogYW5ndWxhci5pc09iamVjdCxcbiAgICAgIGVxdWFsczogYW5ndWxhci5lcXVhbHMsXG4gICAgICBwYXR0ZXJuOiAvW14vXSovXG4gICAgfSxcbiAgICBhbnk6IHsgLy8gZG9lcyBub3QgZW5jb2RlL2RlY29kZVxuICAgICAgZW5jb2RlOiBhbmd1bGFyLmlkZW50aXR5LFxuICAgICAgZGVjb2RlOiBhbmd1bGFyLmlkZW50aXR5LFxuICAgICAgZXF1YWxzOiBhbmd1bGFyLmVxdWFscyxcbiAgICAgIHBhdHRlcm46IC8uKi9cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0RGVmYXVsdENvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RyaWN0OiBpc1N0cmljdE1vZGUsXG4gICAgICBjYXNlSW5zZW5zaXRpdmU6IGlzQ2FzZUluc2Vuc2l0aXZlXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSW5qZWN0YWJsZSh2YWx1ZSkge1xuICAgIHJldHVybiAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgKGlzQXJyYXkodmFsdWUpICYmIGlzRnVuY3Rpb24odmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0pKSk7XG4gIH1cblxuICAvKipcbiAgICogW0ludGVybmFsXSBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwYXJhbWV0ZXIsIHdoaWNoIG1heSBiZSBhbiBpbmplY3RhYmxlIGZ1bmN0aW9uLlxuICAgKi9cbiAgJFVybE1hdGNoZXJGYWN0b3J5LiQkZ2V0RGVmYXVsdFZhbHVlID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgaWYgKCFpc0luamVjdGFibGUoY29uZmlnLnZhbHVlKSkgcmV0dXJuIGNvbmZpZy52YWx1ZTtcbiAgICBpZiAoIWluamVjdG9yKSB0aHJvdyBuZXcgRXJyb3IoXCJJbmplY3RhYmxlIGZ1bmN0aW9ucyBjYW5ub3QgYmUgY2FsbGVkIGF0IGNvbmZpZ3VyYXRpb24gdGltZVwiKTtcbiAgICByZXR1cm4gaW5qZWN0b3IuaW52b2tlKGNvbmZpZy52YWx1ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnkjY2FzZUluc2Vuc2l0aXZlXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERlZmluZXMgd2hldGhlciBVUkwgbWF0Y2hpbmcgc2hvdWxkIGJlIGNhc2Ugc2Vuc2l0aXZlICh0aGUgZGVmYXVsdCBiZWhhdmlvciksIG9yIG5vdC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSBgZmFsc2VgIHRvIG1hdGNoIFVSTCBpbiBhIGNhc2Ugc2Vuc2l0aXZlIG1hbm5lcjsgb3RoZXJ3aXNlIGB0cnVlYDtcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRoZSBjdXJyZW50IHZhbHVlIG9mIGNhc2VJbnNlbnNpdGl2ZVxuICAgKi9cbiAgdGhpcy5jYXNlSW5zZW5zaXRpdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKVxuICAgICAgaXNDYXNlSW5zZW5zaXRpdmUgPSB2YWx1ZTtcbiAgICByZXR1cm4gaXNDYXNlSW5zZW5zaXRpdmU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3Rvcnkjc3RyaWN0TW9kZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZWZpbmVzIHdoZXRoZXIgVVJMcyBzaG91bGQgbWF0Y2ggdHJhaWxpbmcgc2xhc2hlcywgb3Igbm90ICh0aGUgZGVmYXVsdCBiZWhhdmlvcikuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIGBmYWxzZWAgdG8gbWF0Y2ggdHJhaWxpbmcgc2xhc2hlcyBpbiBVUkxzLCBvdGhlcndpc2UgYHRydWVgLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdGhlIGN1cnJlbnQgdmFsdWUgb2Ygc3RyaWN0TW9kZVxuICAgKi9cbiAgdGhpcy5zdHJpY3RNb2RlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSlcbiAgICAgIGlzU3RyaWN0TW9kZSA9IHZhbHVlO1xuICAgIHJldHVybiBpc1N0cmljdE1vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnkjZGVmYXVsdFNxdWFzaFBvbGljeVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIHdoZW4gZ2VuZXJhdGluZyBvciBtYXRjaGluZyBVUkxzIHdpdGggZGVmYXVsdCBwYXJhbWV0ZXIgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgQSBzdHJpbmcgdGhhdCBkZWZpbmVzIHRoZSBkZWZhdWx0IHBhcmFtZXRlciBVUkwgc3F1YXNoaW5nIGJlaGF2aW9yLlxuICAgKiAgICBgbm9zcXVhc2hgOiBXaGVuIGdlbmVyYXRpbmcgYW4gaHJlZiB3aXRoIGEgZGVmYXVsdCBwYXJhbWV0ZXIgdmFsdWUsIGRvIG5vdCBzcXVhc2ggdGhlIHBhcmFtZXRlciB2YWx1ZSBmcm9tIHRoZSBVUkxcbiAgICogICAgYHNsYXNoYDogV2hlbiBnZW5lcmF0aW5nIGFuIGhyZWYgd2l0aCBhIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlLCBzcXVhc2ggKHJlbW92ZSkgdGhlIHBhcmFtZXRlciB2YWx1ZSwgYW5kLCBpZiB0aGVcbiAgICogICAgICAgICAgICAgcGFyYW1ldGVyIGlzIHN1cnJvdW5kZWQgYnkgc2xhc2hlcywgc3F1YXNoIChyZW1vdmUpIG9uZSBzbGFzaCBmcm9tIHRoZSBVUkxcbiAgICogICAgYW55IG90aGVyIHN0cmluZywgZS5nLiBcIn5cIjogV2hlbiBnZW5lcmF0aW5nIGFuIGhyZWYgd2l0aCBhIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlLCBzcXVhc2ggKHJlbW92ZSlcbiAgICogICAgICAgICAgICAgdGhlIHBhcmFtZXRlciB2YWx1ZSBmcm9tIHRoZSBVUkwgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGlzIHN0cmluZy5cbiAgICovXG4gIHRoaXMuZGVmYXVsdFNxdWFzaFBvbGljeSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFpc0RlZmluZWQodmFsdWUpKSByZXR1cm4gZGVmYXVsdFNxdWFzaFBvbGljeTtcbiAgICBpZiAodmFsdWUgIT09IHRydWUgJiYgdmFsdWUgIT09IGZhbHNlICYmICFpc1N0cmluZyh2YWx1ZSkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHNxdWFzaCBwb2xpY3k6IFwiICsgdmFsdWUgKyBcIi4gVmFsaWQgcG9saWNpZXM6IGZhbHNlLCB0cnVlLCBhcmJpdHJhcnktc3RyaW5nXCIpO1xuICAgIGRlZmF1bHRTcXVhc2hQb2xpY3kgPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnkjY29tcGlsZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciBgVXJsTWF0Y2hlcmB9IGZvciB0aGUgc3BlY2lmaWVkIHBhdHRlcm4uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuICBUaGUgVVJMIHBhdHRlcm4uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgIFRoZSBjb25maWcgb2JqZWN0IGhhc2guXG4gICAqIEByZXR1cm5zIHtVcmxNYXRjaGVyfSAgVGhlIFVybE1hdGNoZXIuXG4gICAqL1xuICB0aGlzLmNvbXBpbGUgPSBmdW5jdGlvbiAocGF0dGVybiwgY29uZmlnKSB7XG4gICAgcmV0dXJuIG5ldyBVcmxNYXRjaGVyKHBhdHRlcm4sIGV4dGVuZChnZXREZWZhdWx0Q29uZmlnKCksIGNvbmZpZykpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5I2lzTWF0Y2hlclxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCBvYmplY3QgaXMgYSBgVXJsTWF0Y2hlcmAsIG9yIGZhbHNlIG90aGVyd2lzZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCAgVGhlIG9iamVjdCB0byBwZXJmb3JtIHRoZSB0eXBlIGNoZWNrIGFnYWluc3QuXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSAgUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdCBtYXRjaGVzIHRoZSBgVXJsTWF0Y2hlcmAgaW50ZXJmYWNlLCBieVxuICAgKiAgICAgICAgICBpbXBsZW1lbnRpbmcgYWxsIHRoZSBzYW1lIG1ldGhvZHMuXG4gICAqL1xuICB0aGlzLmlzTWF0Y2hlciA9IGZ1bmN0aW9uIChvKSB7XG4gICAgaWYgKCFpc09iamVjdChvKSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciByZXN1bHQgPSB0cnVlO1xuXG4gICAgZm9yRWFjaChVcmxNYXRjaGVyLnByb3RvdHlwZSwgZnVuY3Rpb24odmFsLCBuYW1lKSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCAmJiAoaXNEZWZpbmVkKG9bbmFtZV0pICYmIGlzRnVuY3Rpb24ob1tuYW1lXSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnkjdHlwZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlcnMgYSBjdXN0b20ge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZSBgVHlwZWB9IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvXG4gICAqIGdlbmVyYXRlIFVSTHMgd2l0aCB0eXBlZCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAgVGhlIHR5cGUgbmFtZS5cbiAgICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IGRlZmluaXRpb24gICBUaGUgdHlwZSBkZWZpbml0aW9uLiBTZWVcbiAgICogICAgICAgIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGUgYFR5cGVgfSBmb3IgaW5mb3JtYXRpb24gb24gdGhlIHZhbHVlcyBhY2NlcHRlZC5cbiAgICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IGRlZmluaXRpb25GbiAob3B0aW9uYWwpIEEgZnVuY3Rpb24gdGhhdCBpcyBpbmplY3RlZCBiZWZvcmUgdGhlIGFwcFxuICAgKiAgICAgICAgcnVudGltZSBzdGFydHMuICBUaGUgcmVzdWx0IG9mIHRoaXMgZnVuY3Rpb24gaXMgbWVyZ2VkIGludG8gdGhlIGV4aXN0aW5nIGBkZWZpbml0aW9uYC5cbiAgICogICAgICAgIFNlZSB7QGxpbmsgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlIGBUeXBlYH0gZm9yIGluZm9ybWF0aW9uIG9uIHRoZSB2YWx1ZXMgYWNjZXB0ZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9ICBSZXR1cm5zIGAkdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlcmAuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIFRoaXMgaXMgYSBzaW1wbGUgZXhhbXBsZSBvZiBhIGN1c3RvbSB0eXBlIHRoYXQgZW5jb2RlcyBhbmQgZGVjb2RlcyBpdGVtcyBmcm9tIGFuXG4gICAqIGFycmF5LCB1c2luZyB0aGUgYXJyYXkgaW5kZXggYXMgdGhlIFVSTC1lbmNvZGVkIHZhbHVlOlxuICAgKlxuICAgKiA8cHJlPlxuICAgKiB2YXIgbGlzdCA9IFsnSm9obicsICdQYXVsJywgJ0dlb3JnZScsICdSaW5nbyddO1xuICAgKlxuICAgKiAkdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlci50eXBlKCdsaXN0SXRlbScsIHtcbiAgICogICBlbmNvZGU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICogICAgIC8vIFJlcHJlc2VudCB0aGUgbGlzdCBpdGVtIGluIHRoZSBVUkwgdXNpbmcgaXRzIGNvcnJlc3BvbmRpbmcgaW5kZXhcbiAgICogICAgIHJldHVybiBsaXN0LmluZGV4T2YoaXRlbSk7XG4gICAqICAgfSxcbiAgICogICBkZWNvZGU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICogICAgIC8vIExvb2sgdXAgdGhlIGxpc3QgaXRlbSBieSBpbmRleFxuICAgKiAgICAgcmV0dXJuIGxpc3RbcGFyc2VJbnQoaXRlbSwgMTApXTtcbiAgICogICB9LFxuICAgKiAgIGlzOiBmdW5jdGlvbihpdGVtKSB7XG4gICAqICAgICAvLyBFbnN1cmUgdGhlIGl0ZW0gaXMgdmFsaWQgYnkgY2hlY2tpbmcgdG8gc2VlIHRoYXQgaXQgYXBwZWFyc1xuICAgKiAgICAgLy8gaW4gdGhlIGxpc3RcbiAgICogICAgIHJldHVybiBsaXN0LmluZGV4T2YoaXRlbSkgPiAtMTtcbiAgICogICB9XG4gICAqIH0pO1xuICAgKlxuICAgKiAkc3RhdGVQcm92aWRlci5zdGF0ZSgnbGlzdCcsIHtcbiAgICogICB1cmw6IFwiL2xpc3Qve2l0ZW06bGlzdEl0ZW19XCIsXG4gICAqICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCRzdGF0ZVBhcmFtcy5pdGVtKTtcbiAgICogICB9XG4gICAqIH0pO1xuICAgKlxuICAgKiAvLyAuLi5cbiAgICpcbiAgICogLy8gQ2hhbmdlcyBVUkwgdG8gJy9saXN0LzMnLCBsb2dzIFwiUmluZ29cIiB0byB0aGUgY29uc29sZVxuICAgKiAkc3RhdGUuZ28oJ2xpc3QnLCB7IGl0ZW06IFwiUmluZ29cIiB9KTtcbiAgICogPC9wcmU+XG4gICAqXG4gICAqIFRoaXMgaXMgYSBtb3JlIGNvbXBsZXggZXhhbXBsZSBvZiBhIHR5cGUgdGhhdCByZWxpZXMgb24gZGVwZW5kZW5jeSBpbmplY3Rpb24gdG9cbiAgICogaW50ZXJhY3Qgd2l0aCBzZXJ2aWNlcywgYW5kIHVzZXMgdGhlIHBhcmFtZXRlciBuYW1lIGZyb20gdGhlIFVSTCB0byBpbmZlciBob3cgdG9cbiAgICogaGFuZGxlIGVuY29kaW5nIGFuZCBkZWNvZGluZyBwYXJhbWV0ZXIgdmFsdWVzOlxuICAgKlxuICAgKiA8cHJlPlxuICAgKiAvLyBEZWZpbmVzIGEgY3VzdG9tIHR5cGUgdGhhdCBnZXRzIGEgdmFsdWUgZnJvbSBhIHNlcnZpY2UsXG4gICAqIC8vIHdoZXJlIGVhY2ggc2VydmljZSBnZXRzIGRpZmZlcmVudCB0eXBlcyBvZiB2YWx1ZXMgZnJvbVxuICAgKiAvLyBhIGJhY2tlbmQgQVBJOlxuICAgKiAkdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlci50eXBlKCdkYk9iamVjdCcsIHt9LCBmdW5jdGlvbihVc2VycywgUG9zdHMpIHtcbiAgICpcbiAgICogICAvLyBNYXRjaGVzIHVwIHNlcnZpY2VzIHRvIFVSTCBwYXJhbWV0ZXIgbmFtZXNcbiAgICogICB2YXIgc2VydmljZXMgPSB7XG4gICAqICAgICB1c2VyOiBVc2VycyxcbiAgICogICAgIHBvc3Q6IFBvc3RzXG4gICAqICAgfTtcbiAgICpcbiAgICogICByZXR1cm4ge1xuICAgKiAgICAgZW5jb2RlOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICogICAgICAgLy8gUmVwcmVzZW50IHRoZSBvYmplY3QgaW4gdGhlIFVSTCB1c2luZyBpdHMgdW5pcXVlIElEXG4gICAqICAgICAgIHJldHVybiBvYmplY3QuaWQ7XG4gICAqICAgICB9LFxuICAgKiAgICAgZGVjb2RlOiBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAqICAgICAgIC8vIExvb2sgdXAgdGhlIG9iamVjdCBieSBJRCwgdXNpbmcgdGhlIHBhcmFtZXRlclxuICAgKiAgICAgICAvLyBuYW1lIChrZXkpIHRvIGNhbGwgdGhlIGNvcnJlY3Qgc2VydmljZVxuICAgKiAgICAgICByZXR1cm4gc2VydmljZXNba2V5XS5maW5kQnlJZCh2YWx1ZSk7XG4gICAqICAgICB9LFxuICAgKiAgICAgaXM6IGZ1bmN0aW9uKG9iamVjdCwga2V5KSB7XG4gICAqICAgICAgIC8vIENoZWNrIHRoYXQgb2JqZWN0IGlzIGEgdmFsaWQgZGJPYmplY3RcbiAgICogICAgICAgcmV0dXJuIGFuZ3VsYXIuaXNPYmplY3Qob2JqZWN0KSAmJiBvYmplY3QuaWQgJiYgc2VydmljZXNba2V5XTtcbiAgICogICAgIH1cbiAgICogICAgIGVxdWFsczogZnVuY3Rpb24oYSwgYikge1xuICAgKiAgICAgICAvLyBDaGVjayB0aGUgZXF1YWxpdHkgb2YgZGVjb2RlZCBvYmplY3RzIGJ5IGNvbXBhcmluZ1xuICAgKiAgICAgICAvLyB0aGVpciB1bmlxdWUgSURzXG4gICAqICAgICAgIHJldHVybiBhLmlkID09PSBiLmlkO1xuICAgKiAgICAgfVxuICAgKiAgIH07XG4gICAqIH0pO1xuICAgKlxuICAgKiAvLyBJbiBhIGNvbmZpZygpIGJsb2NrLCB5b3UgY2FuIHRoZW4gYXR0YWNoIFVSTHMgd2l0aFxuICAgKiAvLyB0eXBlLWFubm90YXRlZCBwYXJhbWV0ZXJzOlxuICAgKiAkc3RhdGVQcm92aWRlci5zdGF0ZSgndXNlcnMnLCB7XG4gICAqICAgdXJsOiBcIi91c2Vyc1wiLFxuICAgKiAgIC8vIC4uLlxuICAgKiB9KS5zdGF0ZSgndXNlcnMuaXRlbScsIHtcbiAgICogICB1cmw6IFwiL3t1c2VyOmRiT2JqZWN0fVwiLFxuICAgKiAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAqICAgICAvLyAkc3RhdGVQYXJhbXMudXNlciB3aWxsIG5vdyBiZSBhbiBvYmplY3QgcmV0dXJuZWQgZnJvbVxuICAgKiAgICAgLy8gdGhlIFVzZXJzIHNlcnZpY2VcbiAgICogICB9LFxuICAgKiAgIC8vIC4uLlxuICAgKiB9KTtcbiAgICogPC9wcmU+XG4gICAqL1xuICB0aGlzLnR5cGUgPSBmdW5jdGlvbiAobmFtZSwgZGVmaW5pdGlvbiwgZGVmaW5pdGlvbkZuKSB7XG4gICAgaWYgKCFpc0RlZmluZWQoZGVmaW5pdGlvbikpIHJldHVybiAkdHlwZXNbbmFtZV07XG4gICAgaWYgKCR0eXBlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgdGhyb3cgbmV3IEVycm9yKFwiQSB0eXBlIG5hbWVkICdcIiArIG5hbWUgKyBcIicgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkLlwiKTtcblxuICAgICR0eXBlc1tuYW1lXSA9IG5ldyBUeXBlKGV4dGVuZCh7IG5hbWU6IG5hbWUgfSwgZGVmaW5pdGlvbikpO1xuICAgIGlmIChkZWZpbml0aW9uRm4pIHtcbiAgICAgIHR5cGVRdWV1ZS5wdXNoKHsgbmFtZTogbmFtZSwgZGVmOiBkZWZpbml0aW9uRm4gfSk7XG4gICAgICBpZiAoIWVucXVldWUpIGZsdXNoVHlwZVF1ZXVlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIGBmbHVzaFR5cGVRdWV1ZSgpYCB3YWl0cyB1bnRpbCBgJHVybE1hdGNoZXJGYWN0b3J5YCBpcyBpbmplY3RlZCBiZWZvcmUgaW52b2tpbmcgdGhlIHF1ZXVlZCBgZGVmaW5pdGlvbkZuYHNcbiAgZnVuY3Rpb24gZmx1c2hUeXBlUXVldWUoKSB7XG4gICAgd2hpbGUodHlwZVF1ZXVlLmxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlUXVldWUuc2hpZnQoKTtcbiAgICAgIGlmICh0eXBlLnBhdHRlcm4pIHRocm93IG5ldyBFcnJvcihcIllvdSBjYW5ub3Qgb3ZlcnJpZGUgYSB0eXBlJ3MgLnBhdHRlcm4gYXQgcnVudGltZS5cIik7XG4gICAgICBhbmd1bGFyLmV4dGVuZCgkdHlwZXNbdHlwZS5uYW1lXSwgaW5qZWN0b3IuaW52b2tlKHR5cGUuZGVmKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVnaXN0ZXIgZGVmYXVsdCB0eXBlcy4gU3RvcmUgdGhlbSBpbiB0aGUgcHJvdG90eXBlIG9mICR0eXBlcy5cbiAgZm9yRWFjaChkZWZhdWx0VHlwZXMsIGZ1bmN0aW9uKHR5cGUsIG5hbWUpIHsgJHR5cGVzW25hbWVdID0gbmV3IFR5cGUoZXh0ZW5kKHtuYW1lOiBuYW1lfSwgdHlwZSkpOyB9KTtcbiAgJHR5cGVzID0gaW5oZXJpdCgkdHlwZXMsIHt9KTtcblxuICAvKiBObyBuZWVkIHRvIGRvY3VtZW50ICRnZXQsIHNpbmNlIGl0IHJldHVybnMgdGhpcyAqL1xuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uICgkaW5qZWN0b3IpIHtcbiAgICBpbmplY3RvciA9ICRpbmplY3RvcjtcbiAgICBlbnF1ZXVlID0gZmFsc2U7XG4gICAgZmx1c2hUeXBlUXVldWUoKTtcblxuICAgIGZvckVhY2goZGVmYXVsdFR5cGVzLCBmdW5jdGlvbih0eXBlLCBuYW1lKSB7XG4gICAgICBpZiAoISR0eXBlc1tuYW1lXSkgJHR5cGVzW25hbWVdID0gbmV3IFR5cGUodHlwZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1dO1xuXG4gIHRoaXMuUGFyYW0gPSBmdW5jdGlvbiBQYXJhbShpZCwgdHlwZSwgY29uZmlnLCBsb2NhdGlvbikge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBjb25maWcgPSB1bndyYXBTaG9ydGhhbmQoY29uZmlnKTtcbiAgICB0eXBlID0gZ2V0VHlwZShjb25maWcsIHR5cGUsIGxvY2F0aW9uKTtcbiAgICB2YXIgYXJyYXlNb2RlID0gZ2V0QXJyYXlNb2RlKCk7XG4gICAgdHlwZSA9IGFycmF5TW9kZSA/IHR5cGUuJGFzQXJyYXkoYXJyYXlNb2RlLCBsb2NhdGlvbiA9PT0gXCJzZWFyY2hcIikgOiB0eXBlO1xuICAgIGlmICh0eXBlLm5hbWUgPT09IFwic3RyaW5nXCIgJiYgIWFycmF5TW9kZSAmJiBsb2NhdGlvbiA9PT0gXCJwYXRoXCIgJiYgY29uZmlnLnZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICBjb25maWcudmFsdWUgPSBcIlwiOyAvLyBmb3IgMC4yLng7IGluIDAuMy4wKyBkbyBub3QgYXV0b21hdGljYWxseSBkZWZhdWx0IHRvIFwiXCJcbiAgICB2YXIgaXNPcHRpb25hbCA9IGNvbmZpZy52YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBzcXVhc2ggPSBnZXRTcXVhc2hQb2xpY3koY29uZmlnLCBpc09wdGlvbmFsKTtcbiAgICB2YXIgcmVwbGFjZSA9IGdldFJlcGxhY2UoY29uZmlnLCBhcnJheU1vZGUsIGlzT3B0aW9uYWwsIHNxdWFzaCk7XG5cbiAgICBmdW5jdGlvbiB1bndyYXBTaG9ydGhhbmQoY29uZmlnKSB7XG4gICAgICB2YXIga2V5cyA9IGlzT2JqZWN0KGNvbmZpZykgPyBvYmplY3RLZXlzKGNvbmZpZykgOiBbXTtcbiAgICAgIHZhciBpc1Nob3J0aGFuZCA9IGluZGV4T2Yoa2V5cywgXCJ2YWx1ZVwiKSA9PT0gLTEgJiYgaW5kZXhPZihrZXlzLCBcInR5cGVcIikgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleE9mKGtleXMsIFwic3F1YXNoXCIpID09PSAtMSAmJiBpbmRleE9mKGtleXMsIFwiYXJyYXlcIikgPT09IC0xO1xuICAgICAgaWYgKGlzU2hvcnRoYW5kKSBjb25maWcgPSB7IHZhbHVlOiBjb25maWcgfTtcbiAgICAgIGNvbmZpZy4kJGZuID0gaXNJbmplY3RhYmxlKGNvbmZpZy52YWx1ZSkgPyBjb25maWcudmFsdWUgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWcudmFsdWU7IH07XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFR5cGUoY29uZmlnLCB1cmxUeXBlLCBsb2NhdGlvbikge1xuICAgICAgaWYgKGNvbmZpZy50eXBlICYmIHVybFR5cGUpIHRocm93IG5ldyBFcnJvcihcIlBhcmFtICdcIitpZCtcIicgaGFzIHR3byB0eXBlIGNvbmZpZ3VyYXRpb25zLlwiKTtcbiAgICAgIGlmICh1cmxUeXBlKSByZXR1cm4gdXJsVHlwZTtcbiAgICAgIGlmICghY29uZmlnLnR5cGUpIHJldHVybiAobG9jYXRpb24gPT09IFwiY29uZmlnXCIgPyAkdHlwZXMuYW55IDogJHR5cGVzLnN0cmluZyk7XG4gICAgICByZXR1cm4gY29uZmlnLnR5cGUgaW5zdGFuY2VvZiBUeXBlID8gY29uZmlnLnR5cGUgOiBuZXcgVHlwZShjb25maWcudHlwZSk7XG4gICAgfVxuXG4gICAgLy8gYXJyYXkgY29uZmlnOiBwYXJhbSBuYW1lIChwYXJhbVtdKSBvdmVycmlkZXMgZGVmYXVsdCBzZXR0aW5ncy4gIGV4cGxpY2l0IGNvbmZpZyBvdmVycmlkZXMgcGFyYW0gbmFtZS5cbiAgICBmdW5jdGlvbiBnZXRBcnJheU1vZGUoKSB7XG4gICAgICB2YXIgYXJyYXlEZWZhdWx0cyA9IHsgYXJyYXk6IChsb2NhdGlvbiA9PT0gXCJzZWFyY2hcIiA/IFwiYXV0b1wiIDogZmFsc2UpIH07XG4gICAgICB2YXIgYXJyYXlQYXJhbU5vbWVuY2xhdHVyZSA9IGlkLm1hdGNoKC9cXFtcXF0kLykgPyB7IGFycmF5OiB0cnVlIH0gOiB7fTtcbiAgICAgIHJldHVybiBleHRlbmQoYXJyYXlEZWZhdWx0cywgYXJyYXlQYXJhbU5vbWVuY2xhdHVyZSwgY29uZmlnKS5hcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXR1cm5zIGZhbHNlLCB0cnVlLCBvciB0aGUgc3F1YXNoIHZhbHVlIHRvIGluZGljYXRlIHRoZSBcImRlZmF1bHQgcGFyYW1ldGVyIHVybCBzcXVhc2ggcG9saWN5XCIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0U3F1YXNoUG9saWN5KGNvbmZpZywgaXNPcHRpb25hbCkge1xuICAgICAgdmFyIHNxdWFzaCA9IGNvbmZpZy5zcXVhc2g7XG4gICAgICBpZiAoIWlzT3B0aW9uYWwgfHwgc3F1YXNoID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKCFpc0RlZmluZWQoc3F1YXNoKSB8fCBzcXVhc2ggPT0gbnVsbCkgcmV0dXJuIGRlZmF1bHRTcXVhc2hQb2xpY3k7XG4gICAgICBpZiAoc3F1YXNoID09PSB0cnVlIHx8IGlzU3RyaW5nKHNxdWFzaCkpIHJldHVybiBzcXVhc2g7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHNxdWFzaCBwb2xpY3k6ICdcIiArIHNxdWFzaCArIFwiJy4gVmFsaWQgcG9saWNpZXM6IGZhbHNlLCB0cnVlLCBvciBhcmJpdHJhcnkgc3RyaW5nXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFJlcGxhY2UoY29uZmlnLCBhcnJheU1vZGUsIGlzT3B0aW9uYWwsIHNxdWFzaCkge1xuICAgICAgdmFyIHJlcGxhY2UsIGNvbmZpZ3VyZWRLZXlzLCBkZWZhdWx0UG9saWN5ID0gW1xuICAgICAgICB7IGZyb206IFwiXCIsICAgdG86IChpc09wdGlvbmFsIHx8IGFycmF5TW9kZSA/IHVuZGVmaW5lZCA6IFwiXCIpIH0sXG4gICAgICAgIHsgZnJvbTogbnVsbCwgdG86IChpc09wdGlvbmFsIHx8IGFycmF5TW9kZSA/IHVuZGVmaW5lZCA6IFwiXCIpIH1cbiAgICAgIF07XG4gICAgICByZXBsYWNlID0gaXNBcnJheShjb25maWcucmVwbGFjZSkgPyBjb25maWcucmVwbGFjZSA6IFtdO1xuICAgICAgaWYgKGlzU3RyaW5nKHNxdWFzaCkpXG4gICAgICAgIHJlcGxhY2UucHVzaCh7IGZyb206IHNxdWFzaCwgdG86IHVuZGVmaW5lZCB9KTtcbiAgICAgIGNvbmZpZ3VyZWRLZXlzID0gbWFwKHJlcGxhY2UsIGZ1bmN0aW9uKGl0ZW0pIHsgcmV0dXJuIGl0ZW0uZnJvbTsgfSApO1xuICAgICAgcmV0dXJuIGZpbHRlcihkZWZhdWx0UG9saWN5LCBmdW5jdGlvbihpdGVtKSB7IHJldHVybiBpbmRleE9mKGNvbmZpZ3VyZWRLZXlzLCBpdGVtLmZyb20pID09PSAtMTsgfSkuY29uY2F0KHJlcGxhY2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFtJbnRlcm5hbF0gR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcGFyYW1ldGVyLCB3aGljaCBtYXkgYmUgYW4gaW5qZWN0YWJsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAkJGdldERlZmF1bHRWYWx1ZSgpIHtcbiAgICAgIGlmICghaW5qZWN0b3IpIHRocm93IG5ldyBFcnJvcihcIkluamVjdGFibGUgZnVuY3Rpb25zIGNhbm5vdCBiZSBjYWxsZWQgYXQgY29uZmlndXJhdGlvbiB0aW1lXCIpO1xuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IGluamVjdG9yLmludm9rZShjb25maWcuJCRmbik7XG4gICAgICBpZiAoZGVmYXVsdFZhbHVlICE9PSBudWxsICYmIGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICFzZWxmLnR5cGUuaXMoZGVmYXVsdFZhbHVlKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGVmYXVsdCB2YWx1ZSAoXCIgKyBkZWZhdWx0VmFsdWUgKyBcIikgZm9yIHBhcmFtZXRlciAnXCIgKyBzZWxmLmlkICsgXCInIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUeXBlIChcIiArIHNlbGYudHlwZS5uYW1lICsgXCIpXCIpO1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBbSW50ZXJuYWxdIEdldHMgdGhlIGRlY29kZWQgcmVwcmVzZW50YXRpb24gb2YgYSB2YWx1ZSBpZiB0aGUgdmFsdWUgaXMgZGVmaW5lZCwgb3RoZXJ3aXNlLCByZXR1cm5zIHRoZVxuICAgICAqIGRlZmF1bHQgdmFsdWUsIHdoaWNoIG1heSBiZSB0aGUgcmVzdWx0IG9mIGFuIGluamVjdGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gJHZhbHVlKHZhbHVlKSB7XG4gICAgICBmdW5jdGlvbiBoYXNSZXBsYWNlVmFsKHZhbCkgeyByZXR1cm4gZnVuY3Rpb24ob2JqKSB7IHJldHVybiBvYmouZnJvbSA9PT0gdmFsOyB9OyB9XG4gICAgICBmdW5jdGlvbiAkcmVwbGFjZSh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBtYXAoZmlsdGVyKHNlbGYucmVwbGFjZSwgaGFzUmVwbGFjZVZhbCh2YWx1ZSkpLCBmdW5jdGlvbihvYmopIHsgcmV0dXJuIG9iai50bzsgfSk7XG4gICAgICAgIHJldHVybiByZXBsYWNlbWVudC5sZW5ndGggPyByZXBsYWNlbWVudFswXSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSAkcmVwbGFjZSh2YWx1ZSk7XG4gICAgICByZXR1cm4gIWlzRGVmaW5lZCh2YWx1ZSkgPyAkJGdldERlZmF1bHRWYWx1ZSgpIDogc2VsZi50eXBlLiRub3JtYWxpemUodmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKCkgeyByZXR1cm4gXCJ7UGFyYW06XCIgKyBpZCArIFwiIFwiICsgdHlwZSArIFwiIHNxdWFzaDogJ1wiICsgc3F1YXNoICsgXCInIG9wdGlvbmFsOiBcIiArIGlzT3B0aW9uYWwgKyBcIn1cIjsgfVxuXG4gICAgZXh0ZW5kKHRoaXMsIHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICBhcnJheTogYXJyYXlNb2RlLFxuICAgICAgc3F1YXNoOiBzcXVhc2gsXG4gICAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgICAgaXNPcHRpb25hbDogaXNPcHRpb25hbCxcbiAgICAgIHZhbHVlOiAkdmFsdWUsXG4gICAgICBkeW5hbWljOiB1bmRlZmluZWQsXG4gICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgIHRvU3RyaW5nOiB0b1N0cmluZ1xuICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFBhcmFtU2V0KHBhcmFtcykge1xuICAgIGV4dGVuZCh0aGlzLCBwYXJhbXMgfHwge30pO1xuICB9XG5cbiAgUGFyYW1TZXQucHJvdG90eXBlID0ge1xuICAgICQkbmV3OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpbmhlcml0KHRoaXMsIGV4dGVuZChuZXcgUGFyYW1TZXQoKSwgeyAkJHBhcmVudDogdGhpc30pKTtcbiAgICB9LFxuICAgICQka2V5czogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGtleXMgPSBbXSwgY2hhaW4gPSBbXSwgcGFyZW50ID0gdGhpcyxcbiAgICAgICAgaWdub3JlID0gb2JqZWN0S2V5cyhQYXJhbVNldC5wcm90b3R5cGUpO1xuICAgICAgd2hpbGUgKHBhcmVudCkgeyBjaGFpbi5wdXNoKHBhcmVudCk7IHBhcmVudCA9IHBhcmVudC4kJHBhcmVudDsgfVxuICAgICAgY2hhaW4ucmV2ZXJzZSgpO1xuICAgICAgZm9yRWFjaChjaGFpbiwgZnVuY3Rpb24ocGFyYW1zZXQpIHtcbiAgICAgICAgZm9yRWFjaChvYmplY3RLZXlzKHBhcmFtc2V0KSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBpZiAoaW5kZXhPZihrZXlzLCBrZXkpID09PSAtMSAmJiBpbmRleE9mKGlnbm9yZSwga2V5KSA9PT0gLTEpIGtleXMucHVzaChrZXkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGtleXM7XG4gICAgfSxcbiAgICAkJHZhbHVlczogZnVuY3Rpb24ocGFyYW1WYWx1ZXMpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSB7fSwgc2VsZiA9IHRoaXM7XG4gICAgICBmb3JFYWNoKHNlbGYuJCRrZXlzKCksIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICB2YWx1ZXNba2V5XSA9IHNlbGZba2V5XS52YWx1ZShwYXJhbVZhbHVlcyAmJiBwYXJhbVZhbHVlc1trZXldKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9LFxuICAgICQkZXF1YWxzOiBmdW5jdGlvbihwYXJhbVZhbHVlczEsIHBhcmFtVmFsdWVzMikge1xuICAgICAgdmFyIGVxdWFsID0gdHJ1ZSwgc2VsZiA9IHRoaXM7XG4gICAgICBmb3JFYWNoKHNlbGYuJCRrZXlzKCksIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICB2YXIgbGVmdCA9IHBhcmFtVmFsdWVzMSAmJiBwYXJhbVZhbHVlczFba2V5XSwgcmlnaHQgPSBwYXJhbVZhbHVlczIgJiYgcGFyYW1WYWx1ZXMyW2tleV07XG4gICAgICAgIGlmICghc2VsZltrZXldLnR5cGUuZXF1YWxzKGxlZnQsIHJpZ2h0KSkgZXF1YWwgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGVxdWFsO1xuICAgIH0sXG4gICAgJCR2YWxpZGF0ZXM6IGZ1bmN0aW9uICQkdmFsaWRhdGUocGFyYW1WYWx1ZXMpIHtcbiAgICAgIHZhciBrZXlzID0gdGhpcy4kJGtleXMoKSwgaSwgcGFyYW0sIHJhd1ZhbCwgbm9ybWFsaXplZCwgZW5jb2RlZDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHBhcmFtID0gdGhpc1trZXlzW2ldXTtcbiAgICAgICAgcmF3VmFsID0gcGFyYW1WYWx1ZXNba2V5c1tpXV07XG4gICAgICAgIGlmICgocmF3VmFsID09PSB1bmRlZmluZWQgfHwgcmF3VmFsID09PSBudWxsKSAmJiBwYXJhbS5pc09wdGlvbmFsKVxuICAgICAgICAgIGJyZWFrOyAvLyBUaGVyZSB3YXMgbm8gcGFyYW1ldGVyIHZhbHVlLCBidXQgdGhlIHBhcmFtIGlzIG9wdGlvbmFsXG4gICAgICAgIG5vcm1hbGl6ZWQgPSBwYXJhbS50eXBlLiRub3JtYWxpemUocmF3VmFsKTtcbiAgICAgICAgaWYgKCFwYXJhbS50eXBlLmlzKG5vcm1hbGl6ZWQpKVxuICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gVGhlIHZhbHVlIHdhcyBub3Qgb2YgdGhlIGNvcnJlY3QgVHlwZSwgYW5kIGNvdWxkIG5vdCBiZSBkZWNvZGVkIHRvIHRoZSBjb3JyZWN0IFR5cGVcbiAgICAgICAgZW5jb2RlZCA9IHBhcmFtLnR5cGUuZW5jb2RlKG5vcm1hbGl6ZWQpO1xuICAgICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhlbmNvZGVkKSAmJiAhcGFyYW0udHlwZS5wYXR0ZXJuLmV4ZWMoZW5jb2RlZCkpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBUaGUgdmFsdWUgd2FzIG9mIHRoZSBjb3JyZWN0IHR5cGUsIGJ1dCB3aGVuIGVuY29kZWQsIGRpZCBub3QgbWF0Y2ggdGhlIFR5cGUncyByZWdleHBcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgJCRwYXJlbnQ6IHVuZGVmaW5lZFxuICB9O1xuXG4gIHRoaXMuUGFyYW1TZXQgPSBQYXJhbVNldDtcbn1cblxuLy8gUmVnaXN0ZXIgYXMgYSBwcm92aWRlciBzbyBpdCdzIGF2YWlsYWJsZSB0byBvdGhlciBwcm92aWRlcnNcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIudXRpbCcpLnByb3ZpZGVyKCckdXJsTWF0Y2hlckZhY3RvcnknLCAkVXJsTWF0Y2hlckZhY3RvcnkpO1xuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci51dGlsJykucnVuKFsnJHVybE1hdGNoZXJGYWN0b3J5JywgZnVuY3Rpb24oJHVybE1hdGNoZXJGYWN0b3J5KSB7IH1dKTtcblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJQcm92aWRlclxuICpcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlclxuICogQHJlcXVpcmVzICRsb2NhdGlvblByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgJHVybFJvdXRlclByb3ZpZGVyYCBoYXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHdhdGNoaW5nIGAkbG9jYXRpb25gLiBcbiAqIFdoZW4gYCRsb2NhdGlvbmAgY2hhbmdlcyBpdCBydW5zIHRocm91Z2ggYSBsaXN0IG9mIHJ1bGVzIG9uZSBieSBvbmUgdW50aWwgYSBcbiAqIG1hdGNoIGlzIGZvdW5kLiBgJHVybFJvdXRlclByb3ZpZGVyYCBpcyB1c2VkIGJlaGluZCB0aGUgc2NlbmVzIGFueXRpbWUgeW91IHNwZWNpZnkgXG4gKiBhIHVybCBpbiBhIHN0YXRlIGNvbmZpZ3VyYXRpb24uIEFsbCB1cmxzIGFyZSBjb21waWxlZCBpbnRvIGEgVXJsTWF0Y2hlciBvYmplY3QuXG4gKlxuICogVGhlcmUgYXJlIHNldmVyYWwgbWV0aG9kcyBvbiBgJHVybFJvdXRlclByb3ZpZGVyYCB0aGF0IG1ha2UgaXQgdXNlZnVsIHRvIHVzZSBkaXJlY3RseVxuICogaW4geW91ciBtb2R1bGUgY29uZmlnLlxuICovXG4kVXJsUm91dGVyUHJvdmlkZXIuJGluamVjdCA9IFsnJGxvY2F0aW9uUHJvdmlkZXInLCAnJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXInXTtcbmZ1bmN0aW9uICRVcmxSb3V0ZXJQcm92aWRlciggICAkbG9jYXRpb25Qcm92aWRlciwgICAkdXJsTWF0Y2hlckZhY3RvcnkpIHtcbiAgdmFyIHJ1bGVzID0gW10sIG90aGVyd2lzZSA9IG51bGwsIGludGVyY2VwdERlZmVycmVkID0gZmFsc2UsIGxpc3RlbmVyO1xuXG4gIC8vIFJldHVybnMgYSBzdHJpbmcgdGhhdCBpcyBhIHByZWZpeCBvZiBhbGwgc3RyaW5ncyBtYXRjaGluZyB0aGUgUmVnRXhwXG4gIGZ1bmN0aW9uIHJlZ0V4cFByZWZpeChyZSkge1xuICAgIHZhciBwcmVmaXggPSAvXlxcXigoPzpcXFxcW15hLXpBLVowLTldfFteXFxcXFxcW1xcXVxcXiQqKz8uKCl8e31dKykqKS8uZXhlYyhyZS5zb3VyY2UpO1xuICAgIHJldHVybiAocHJlZml4ICE9IG51bGwpID8gcHJlZml4WzFdLnJlcGxhY2UoL1xcXFwoLikvZywgXCIkMVwiKSA6ICcnO1xuICB9XG5cbiAgLy8gSW50ZXJwb2xhdGVzIG1hdGNoZWQgdmFsdWVzIGludG8gYSBTdHJpbmcucmVwbGFjZSgpLXN0eWxlIHBhdHRlcm5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUocGF0dGVybiwgbWF0Y2gpIHtcbiAgICByZXR1cm4gcGF0dGVybi5yZXBsYWNlKC9cXCQoXFwkfFxcZHsxLDJ9KS8sIGZ1bmN0aW9uIChtLCB3aGF0KSB7XG4gICAgICByZXR1cm4gbWF0Y2hbd2hhdCA9PT0gJyQnID8gMCA6IE51bWJlcih3aGF0KV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyI3J1bGVcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZWZpbmVzIHJ1bGVzIHRoYXQgYXJlIHVzZWQgYnkgYCR1cmxSb3V0ZXJQcm92aWRlcmAgdG8gZmluZCBtYXRjaGVzIGZvclxuICAgKiBzcGVjaWZpYyBVUkxzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8cHJlPlxuICAgKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyLnJvdXRlciddKTtcbiAgICpcbiAgICogYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAqICAgLy8gSGVyZSdzIGFuIGV4YW1wbGUgb2YgaG93IHlvdSBtaWdodCBhbGxvdyBjYXNlIGluc2Vuc2l0aXZlIHVybHNcbiAgICogICAkdXJsUm91dGVyUHJvdmlkZXIucnVsZShmdW5jdGlvbiAoJGluamVjdG9yLCAkbG9jYXRpb24pIHtcbiAgICogICAgIHZhciBwYXRoID0gJGxvY2F0aW9uLnBhdGgoKSxcbiAgICogICAgICAgICBub3JtYWxpemVkID0gcGF0aC50b0xvd2VyQ2FzZSgpO1xuICAgKlxuICAgKiAgICAgaWYgKHBhdGggIT09IG5vcm1hbGl6ZWQpIHtcbiAgICogICAgICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG4gICAqICAgICB9XG4gICAqICAgfSk7XG4gICAqIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHJ1bGUgSGFuZGxlciBmdW5jdGlvbiB0aGF0IHRha2VzIGAkaW5qZWN0b3JgIGFuZCBgJGxvY2F0aW9uYFxuICAgKiBzZXJ2aWNlcyBhcyBhcmd1bWVudHMuIFlvdSBjYW4gdXNlIHRoZW0gdG8gcmV0dXJuIGEgdmFsaWQgcGF0aCBhcyBhIHN0cmluZy5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSBgJHVybFJvdXRlclByb3ZpZGVyYCAtIGAkdXJsUm91dGVyUHJvdmlkZXJgIGluc3RhbmNlXG4gICAqL1xuICB0aGlzLnJ1bGUgPSBmdW5jdGlvbiAocnVsZSkge1xuICAgIGlmICghaXNGdW5jdGlvbihydWxlKSkgdGhyb3cgbmV3IEVycm9yKFwiJ3J1bGUnIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICBydWxlcy5wdXNoKHJ1bGUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgb2JqZWN0XG4gICAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyI290aGVyd2lzZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERlZmluZXMgYSBwYXRoIHRoYXQgaXMgdXNlZCB3aGVuIGFuIGludmFsaWQgcm91dGUgaXMgcmVxdWVzdGVkLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8cHJlPlxuICAgKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyLnJvdXRlciddKTtcbiAgICpcbiAgICogYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAqICAgLy8gaWYgdGhlIHBhdGggZG9lc24ndCBtYXRjaCBhbnkgb2YgdGhlIHVybHMgeW91IGNvbmZpZ3VyZWRcbiAgICogICAvLyBvdGhlcndpc2Ugd2lsbCB0YWtlIGNhcmUgb2Ygcm91dGluZyB0aGUgdXNlciB0byB0aGVcbiAgICogICAvLyBzcGVjaWZpZWQgdXJsXG4gICAqICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2luZGV4Jyk7XG4gICAqXG4gICAqICAgLy8gRXhhbXBsZSBvZiB1c2luZyBmdW5jdGlvbiBydWxlIGFzIHBhcmFtXG4gICAqICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShmdW5jdGlvbiAoJGluamVjdG9yLCAkbG9jYXRpb24pIHtcbiAgICogICAgIHJldHVybiAnL2EvdmFsaWQvdXJsJztcbiAgICogICB9KTtcbiAgICogfSk7XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJ1bGUgVGhlIHVybCBwYXRoIHlvdSB3YW50IHRvIHJlZGlyZWN0IHRvIG9yIGEgZnVuY3Rpb24gXG4gICAqIHJ1bGUgdGhhdCByZXR1cm5zIHRoZSB1cmwgcGF0aC4gVGhlIGZ1bmN0aW9uIHZlcnNpb24gaXMgcGFzc2VkIHR3byBwYXJhbXM6IFxuICAgKiBgJGluamVjdG9yYCBhbmQgYCRsb2NhdGlvbmAgc2VydmljZXMsIGFuZCBtdXN0IHJldHVybiBhIHVybCBzdHJpbmcuXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gYCR1cmxSb3V0ZXJQcm92aWRlcmAgLSBgJHVybFJvdXRlclByb3ZpZGVyYCBpbnN0YW5jZVxuICAgKi9cbiAgdGhpcy5vdGhlcndpc2UgPSBmdW5jdGlvbiAocnVsZSkge1xuICAgIGlmIChpc1N0cmluZyhydWxlKSkge1xuICAgICAgdmFyIHJlZGlyZWN0ID0gcnVsZTtcbiAgICAgIHJ1bGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZWRpcmVjdDsgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWlzRnVuY3Rpb24ocnVsZSkpIHRocm93IG5ldyBFcnJvcihcIidydWxlJyBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gICAgb3RoZXJ3aXNlID0gcnVsZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIGhhbmRsZUlmTWF0Y2goJGluamVjdG9yLCBoYW5kbGVyLCBtYXRjaCkge1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgcmVzdWx0ID0gJGluamVjdG9yLmludm9rZShoYW5kbGVyLCBoYW5kbGVyLCB7ICRtYXRjaDogbWF0Y2ggfSk7XG4gICAgcmV0dXJuIGlzRGVmaW5lZChyZXN1bHQpID8gcmVzdWx0IDogdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXIjd2hlblxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIGhhbmRsZXIgZm9yIGEgZ2l2ZW4gdXJsIG1hdGNoaW5nLiBpZiBoYW5kbGUgaXMgYSBzdHJpbmcsIGl0IGlzXG4gICAqIHRyZWF0ZWQgYXMgYSByZWRpcmVjdCwgYW5kIGlzIGludGVycG9sYXRlZCBhY2NvcmRpbmcgdG8gdGhlIHN5bnRheCBvZiBtYXRjaFxuICAgKiAoaS5lLiBsaWtlIGBTdHJpbmcucmVwbGFjZSgpYCBmb3IgYFJlZ0V4cGAsIG9yIGxpa2UgYSBgVXJsTWF0Y2hlcmAgcGF0dGVybiBvdGhlcndpc2UpLlxuICAgKlxuICAgKiBJZiB0aGUgaGFuZGxlciBpcyBhIGZ1bmN0aW9uLCBpdCBpcyBpbmplY3RhYmxlLiBJdCBnZXRzIGludm9rZWQgaWYgYCRsb2NhdGlvbmBcbiAgICogbWF0Y2hlcy4gWW91IGhhdmUgdGhlIG9wdGlvbiBvZiBpbmplY3QgdGhlIG1hdGNoIG9iamVjdCBhcyBgJG1hdGNoYC5cbiAgICpcbiAgICogVGhlIGhhbmRsZXIgY2FuIHJldHVyblxuICAgKlxuICAgKiAtICoqZmFsc3kqKiB0byBpbmRpY2F0ZSB0aGF0IHRoZSBydWxlIGRpZG4ndCBtYXRjaCBhZnRlciBhbGwsIHRoZW4gYCR1cmxSb3V0ZXJgXG4gICAqICAgd2lsbCBjb250aW51ZSB0cnlpbmcgdG8gZmluZCBhbm90aGVyIG9uZSB0aGF0IG1hdGNoZXMuXG4gICAqIC0gKipzdHJpbmcqKiB3aGljaCBpcyB0cmVhdGVkIGFzIGEgcmVkaXJlY3QgYW5kIHBhc3NlZCB0byBgJGxvY2F0aW9uLnVybCgpYFxuICAgKiAtICoqdm9pZCoqIG9yIGFueSAqKnRydXRoeSoqIHZhbHVlIHRlbGxzIGAkdXJsUm91dGVyYCB0aGF0IHRoZSB1cmwgd2FzIGhhbmRsZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxwcmU+XG4gICAqIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXIucm91dGVyJ10pO1xuICAgKlxuICAgKiBhcHAuY29uZmlnKGZ1bmN0aW9uICgkdXJsUm91dGVyUHJvdmlkZXIpIHtcbiAgICogICAkdXJsUm91dGVyUHJvdmlkZXIud2hlbigkc3RhdGUudXJsLCBmdW5jdGlvbiAoJG1hdGNoLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgIGlmICgkc3RhdGUuJGN1cnJlbnQubmF2aWdhYmxlICE9PSBzdGF0ZSB8fFxuICAgKiAgICAgICAgICFlcXVhbEZvcktleXMoJG1hdGNoLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgICAkc3RhdGUudHJhbnNpdGlvblRvKHN0YXRlLCAkbWF0Y2gsIGZhbHNlKTtcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICogfSk7XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHdoYXQgVGhlIGluY29taW5nIHBhdGggdGhhdCB5b3Ugd2FudCB0byByZWRpcmVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBoYW5kbGVyIFRoZSBwYXRoIHlvdSB3YW50IHRvIHJlZGlyZWN0IHlvdXIgdXNlciB0by5cbiAgICovXG4gIHRoaXMud2hlbiA9IGZ1bmN0aW9uICh3aGF0LCBoYW5kbGVyKSB7XG4gICAgdmFyIHJlZGlyZWN0LCBoYW5kbGVySXNTdHJpbmcgPSBpc1N0cmluZyhoYW5kbGVyKTtcbiAgICBpZiAoaXNTdHJpbmcod2hhdCkpIHdoYXQgPSAkdXJsTWF0Y2hlckZhY3RvcnkuY29tcGlsZSh3aGF0KTtcblxuICAgIGlmICghaGFuZGxlcklzU3RyaW5nICYmICFpc0Z1bmN0aW9uKGhhbmRsZXIpICYmICFpc0FycmF5KGhhbmRsZXIpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCAnaGFuZGxlcicgaW4gd2hlbigpXCIpO1xuXG4gICAgdmFyIHN0cmF0ZWdpZXMgPSB7XG4gICAgICBtYXRjaGVyOiBmdW5jdGlvbiAod2hhdCwgaGFuZGxlcikge1xuICAgICAgICBpZiAoaGFuZGxlcklzU3RyaW5nKSB7XG4gICAgICAgICAgcmVkaXJlY3QgPSAkdXJsTWF0Y2hlckZhY3RvcnkuY29tcGlsZShoYW5kbGVyKTtcbiAgICAgICAgICBoYW5kbGVyID0gWyckbWF0Y2gnLCBmdW5jdGlvbiAoJG1hdGNoKSB7IHJldHVybiByZWRpcmVjdC5mb3JtYXQoJG1hdGNoKTsgfV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoJGluamVjdG9yLCAkbG9jYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSWZNYXRjaCgkaW5qZWN0b3IsIGhhbmRsZXIsIHdoYXQuZXhlYygkbG9jYXRpb24ucGF0aCgpLCAkbG9jYXRpb24uc2VhcmNoKCkpKTtcbiAgICAgICAgfSwge1xuICAgICAgICAgIHByZWZpeDogaXNTdHJpbmcod2hhdC5wcmVmaXgpID8gd2hhdC5wcmVmaXggOiAnJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICByZWdleDogZnVuY3Rpb24gKHdoYXQsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHdoYXQuZ2xvYmFsIHx8IHdoYXQuc3RpY2t5KSB0aHJvdyBuZXcgRXJyb3IoXCJ3aGVuKCkgUmVnRXhwIG11c3Qgbm90IGJlIGdsb2JhbCBvciBzdGlja3lcIik7XG5cbiAgICAgICAgaWYgKGhhbmRsZXJJc1N0cmluZykge1xuICAgICAgICAgIHJlZGlyZWN0ID0gaGFuZGxlcjtcbiAgICAgICAgICBoYW5kbGVyID0gWyckbWF0Y2gnLCBmdW5jdGlvbiAoJG1hdGNoKSB7IHJldHVybiBpbnRlcnBvbGF0ZShyZWRpcmVjdCwgJG1hdGNoKTsgfV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoJGluamVjdG9yLCAkbG9jYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSWZNYXRjaCgkaW5qZWN0b3IsIGhhbmRsZXIsIHdoYXQuZXhlYygkbG9jYXRpb24ucGF0aCgpKSk7XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBwcmVmaXg6IHJlZ0V4cFByZWZpeCh3aGF0KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGNoZWNrID0geyBtYXRjaGVyOiAkdXJsTWF0Y2hlckZhY3RvcnkuaXNNYXRjaGVyKHdoYXQpLCByZWdleDogd2hhdCBpbnN0YW5jZW9mIFJlZ0V4cCB9O1xuXG4gICAgZm9yICh2YXIgbiBpbiBjaGVjaykge1xuICAgICAgaWYgKGNoZWNrW25dKSByZXR1cm4gdGhpcy5ydWxlKHN0cmF0ZWdpZXNbbl0od2hhdCwgaGFuZGxlcikpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgJ3doYXQnIGluIHdoZW4oKVwiKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyI2RlZmVySW50ZXJjZXB0XG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGlzYWJsZXMgKG9yIGVuYWJsZXMpIGRlZmVycmluZyBsb2NhdGlvbiBjaGFuZ2UgaW50ZXJjZXB0aW9uLlxuICAgKlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjdXN0b21pemUgdGhlIGJlaGF2aW9yIG9mIHN5bmNpbmcgdGhlIFVSTCAoZm9yIGV4YW1wbGUsIGlmIHlvdSB3aXNoIHRvXG4gICAqIGRlZmVyIGEgdHJhbnNpdGlvbiBidXQgbWFpbnRhaW4gdGhlIGN1cnJlbnQgVVJMKSwgY2FsbCB0aGlzIG1ldGhvZCBhdCBjb25maWd1cmF0aW9uIHRpbWUuXG4gICAqIFRoZW4sIGF0IHJ1biB0aW1lLCBjYWxsIGAkdXJsUm91dGVyLmxpc3RlbigpYCBhZnRlciB5b3UgaGF2ZSBjb25maWd1cmVkIHlvdXIgb3duXG4gICAqIGAkbG9jYXRpb25DaGFuZ2VTdWNjZXNzYCBldmVudCBoYW5kbGVyLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8cHJlPlxuICAgKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyLnJvdXRlciddKTtcbiAgICpcbiAgICogYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAqXG4gICAqICAgLy8gUHJldmVudCAkdXJsUm91dGVyIGZyb20gYXV0b21hdGljYWxseSBpbnRlcmNlcHRpbmcgVVJMIGNoYW5nZXM7XG4gICAqICAgLy8gdGhpcyBhbGxvd3MgeW91IHRvIGNvbmZpZ3VyZSBjdXN0b20gYmVoYXZpb3IgaW4gYmV0d2VlblxuICAgKiAgIC8vIGxvY2F0aW9uIGNoYW5nZXMgYW5kIHJvdXRlIHN5bmNocm9uaXphdGlvbjpcbiAgICogICAkdXJsUm91dGVyUHJvdmlkZXIuZGVmZXJJbnRlcmNlcHQoKTtcbiAgICpcbiAgICogfSkucnVuKGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkdXJsUm91dGVyLCBVc2VyU2VydmljZSkge1xuICAgKlxuICAgKiAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oZSkge1xuICAgKiAgICAgLy8gVXNlclNlcnZpY2UgaXMgYW4gZXhhbXBsZSBzZXJ2aWNlIGZvciBtYW5hZ2luZyB1c2VyIHN0YXRlXG4gICAqICAgICBpZiAoVXNlclNlcnZpY2UuaXNMb2dnZWRJbigpKSByZXR1cm47XG4gICAqXG4gICAqICAgICAvLyBQcmV2ZW50ICR1cmxSb3V0ZXIncyBkZWZhdWx0IGhhbmRsZXIgZnJvbSBmaXJpbmdcbiAgICogICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICpcbiAgICogICAgIFVzZXJTZXJ2aWNlLmhhbmRsZUxvZ2luKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICogICAgICAgLy8gT25jZSB0aGUgdXNlciBoYXMgbG9nZ2VkIGluLCBzeW5jIHRoZSBjdXJyZW50IFVSTFxuICAgKiAgICAgICAvLyB0byB0aGUgcm91dGVyOlxuICAgKiAgICAgICAkdXJsUm91dGVyLnN5bmMoKTtcbiAgICogICAgIH0pO1xuICAgKiAgIH0pO1xuICAgKlxuICAgKiAgIC8vIENvbmZpZ3VyZXMgJHVybFJvdXRlcidzIGxpc3RlbmVyICphZnRlciogeW91ciBjdXN0b20gbGlzdGVuZXJcbiAgICogICAkdXJsUm91dGVyLmxpc3RlbigpO1xuICAgKiB9KTtcbiAgICogPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZGVmZXIgSW5kaWNhdGVzIHdoZXRoZXIgdG8gZGVmZXIgbG9jYXRpb24gY2hhbmdlIGludGVyY2VwdGlvbi4gUGFzc2luZ1xuICAgICAgICAgICAgbm8gcGFyYW1ldGVyIGlzIGVxdWl2YWxlbnQgdG8gYHRydWVgLlxuICAgKi9cbiAgdGhpcy5kZWZlckludGVyY2VwdCA9IGZ1bmN0aW9uIChkZWZlcikge1xuICAgIGlmIChkZWZlciA9PT0gdW5kZWZpbmVkKSBkZWZlciA9IHRydWU7XG4gICAgaW50ZXJjZXB0RGVmZXJyZWQgPSBkZWZlcjtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG9iamVjdFxuICAgKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJcbiAgICpcbiAgICogQHJlcXVpcmVzICRsb2NhdGlvblxuICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgKiBAcmVxdWlyZXMgJGluamVjdG9yXG4gICAqIEByZXF1aXJlcyAkYnJvd3NlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICovXG4gIHRoaXMuJGdldCA9ICRnZXQ7XG4gICRnZXQuJGluamVjdCA9IFsnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCAnJGluamVjdG9yJywgJyRicm93c2VyJ107XG4gIGZ1bmN0aW9uICRnZXQoICAgJGxvY2F0aW9uLCAgICRyb290U2NvcGUsICAgJGluamVjdG9yLCAgICRicm93c2VyKSB7XG5cbiAgICB2YXIgYmFzZUhyZWYgPSAkYnJvd3Nlci5iYXNlSHJlZigpLCBsb2NhdGlvbiA9ICRsb2NhdGlvbi51cmwoKSwgbGFzdFB1c2hlZFVybDtcblxuICAgIGZ1bmN0aW9uIGFwcGVuZEJhc2VQYXRoKHVybCwgaXNIdG1sNSwgYWJzb2x1dGUpIHtcbiAgICAgIGlmIChiYXNlSHJlZiA9PT0gJy8nKSByZXR1cm4gdXJsO1xuICAgICAgaWYgKGlzSHRtbDUpIHJldHVybiBiYXNlSHJlZi5zbGljZSgwLCAtMSkgKyB1cmw7XG4gICAgICBpZiAoYWJzb2x1dGUpIHJldHVybiBiYXNlSHJlZi5zbGljZSgxKSArIHVybDtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogT3B0aW1pemUgZ3JvdXBzIG9mIHJ1bGVzIHdpdGggbm9uLWVtcHR5IHByZWZpeCBpbnRvIHNvbWUgc29ydCBvZiBkZWNpc2lvbiB0cmVlXG4gICAgZnVuY3Rpb24gdXBkYXRlKGV2dCkge1xuICAgICAgaWYgKGV2dCAmJiBldnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgICAgdmFyIGlnbm9yZVVwZGF0ZSA9IGxhc3RQdXNoZWRVcmwgJiYgJGxvY2F0aW9uLnVybCgpID09PSBsYXN0UHVzaGVkVXJsO1xuICAgICAgbGFzdFB1c2hlZFVybCA9IHVuZGVmaW5lZDtcbiAgICAgIC8vIFRPRE86IFJlLWltcGxlbWVudCB0aGlzIGluIDEuMCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXItdWkvdWktcm91dGVyL2lzc3Vlcy8xNTczXG4gICAgICAvL2lmIChpZ25vcmVVcGRhdGUpIHJldHVybiB0cnVlO1xuXG4gICAgICBmdW5jdGlvbiBjaGVjayhydWxlKSB7XG4gICAgICAgIHZhciBoYW5kbGVkID0gcnVsZSgkaW5qZWN0b3IsICRsb2NhdGlvbik7XG5cbiAgICAgICAgaWYgKCFoYW5kbGVkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChpc1N0cmluZyhoYW5kbGVkKSkgJGxvY2F0aW9uLnJlcGxhY2UoKS51cmwoaGFuZGxlZCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG4gPSBydWxlcy5sZW5ndGgsIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKGNoZWNrKHJ1bGVzW2ldKSkgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYWx3YXlzIGNoZWNrIG90aGVyd2lzZSBsYXN0IHRvIGFsbG93IGR5bmFtaWMgdXBkYXRlcyB0byB0aGUgc2V0IG9mIHJ1bGVzXG4gICAgICBpZiAob3RoZXJ3aXNlKSBjaGVjayhvdGhlcndpc2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIgfHwgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCB1cGRhdGUpO1xuICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgIH1cblxuICAgIGlmICghaW50ZXJjZXB0RGVmZXJyZWQpIGxpc3RlbigpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXIjc3luY1xuICAgICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogVHJpZ2dlcnMgYW4gdXBkYXRlOyB0aGUgc2FtZSB1cGRhdGUgdGhhdCBoYXBwZW5zIHdoZW4gdGhlIGFkZHJlc3MgYmFyIHVybCBjaGFuZ2VzLCBha2EgYCRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NgLlxuICAgICAgICogVGhpcyBtZXRob2QgaXMgdXNlZnVsIHdoZW4geW91IG5lZWQgdG8gdXNlIGBwcmV2ZW50RGVmYXVsdCgpYCBvbiB0aGUgYCRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NgIGV2ZW50LFxuICAgICAgICogcGVyZm9ybSBzb21lIGN1c3RvbSBsb2dpYyAocm91dGUgcHJvdGVjdGlvbiwgYXV0aCwgY29uZmlnLCByZWRpcmVjdGlvbiwgZXRjKSBhbmQgdGhlbiBmaW5hbGx5IHByb2NlZWRcbiAgICAgICAqIHdpdGggdGhlIHRyYW5zaXRpb24gYnkgY2FsbGluZyBgJHVybFJvdXRlci5zeW5jKClgLlxuICAgICAgICpcbiAgICAgICAqIEBleGFtcGxlXG4gICAgICAgKiA8cHJlPlxuICAgICAgICogYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyJ10pXG4gICAgICAgKiAgIC5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSwgJHVybFJvdXRlcikge1xuICAgICAgICogICAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgKiAgICAgICAvLyBIYWx0IHN0YXRlIGNoYW5nZSBmcm9tIGV2ZW4gc3RhcnRpbmdcbiAgICAgICAqICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICogICAgICAgLy8gUGVyZm9ybSBjdXN0b20gbG9naWNcbiAgICAgICAqICAgICAgIHZhciBtZWV0c1JlcXVpcmVtZW50ID0gLi4uXG4gICAgICAgKiAgICAgICAvLyBDb250aW51ZSB3aXRoIHRoZSB1cGRhdGUgYW5kIHN0YXRlIHRyYW5zaXRpb24gaWYgbG9naWMgYWxsb3dzXG4gICAgICAgKiAgICAgICBpZiAobWVldHNSZXF1aXJlbWVudCkgJHVybFJvdXRlci5zeW5jKCk7XG4gICAgICAgKiAgICAgfSk7XG4gICAgICAgKiB9KTtcbiAgICAgICAqIDwvcHJlPlxuICAgICAgICovXG4gICAgICBzeW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdXBkYXRlKCk7XG4gICAgICB9LFxuXG4gICAgICBsaXN0ZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbGlzdGVuKCk7XG4gICAgICB9LFxuXG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uKHJlYWQpIHtcbiAgICAgICAgaWYgKHJlYWQpIHtcbiAgICAgICAgICBsb2NhdGlvbiA9ICRsb2NhdGlvbi51cmwoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRsb2NhdGlvbi51cmwoKSA9PT0gbG9jYXRpb24pIHJldHVybjtcblxuICAgICAgICAkbG9jYXRpb24udXJsKGxvY2F0aW9uKTtcbiAgICAgICAgJGxvY2F0aW9uLnJlcGxhY2UoKTtcbiAgICAgIH0sXG5cbiAgICAgIHB1c2g6IGZ1bmN0aW9uKHVybE1hdGNoZXIsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICAgdmFyIHVybCA9IHVybE1hdGNoZXIuZm9ybWF0KHBhcmFtcyB8fCB7fSk7XG5cbiAgICAgICAgLy8gSGFuZGxlIHRoZSBzcGVjaWFsIGhhc2ggcGFyYW0sIGlmIG5lZWRlZFxuICAgICAgICBpZiAodXJsICE9PSBudWxsICYmIHBhcmFtcyAmJiBwYXJhbXNbJyMnXSkge1xuICAgICAgICAgICAgdXJsICs9ICcjJyArIHBhcmFtc1snIyddO1xuICAgICAgICB9XG5cbiAgICAgICAgJGxvY2F0aW9uLnVybCh1cmwpO1xuICAgICAgICBsYXN0UHVzaGVkVXJsID0gb3B0aW9ucyAmJiBvcHRpb25zLiQkYXZvaWRSZXN5bmMgPyAkbG9jYXRpb24udXJsKCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVwbGFjZSkgJGxvY2F0aW9uLnJlcGxhY2UoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXIjaHJlZlxuICAgICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQSBVUkwgZ2VuZXJhdGlvbiBtZXRob2QgdGhhdCByZXR1cm5zIHRoZSBjb21waWxlZCBVUkwgZm9yIGEgZ2l2ZW5cbiAgICAgICAqIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgYFVybE1hdGNoZXJgfSwgcG9wdWxhdGVkIHdpdGggdGhlIHByb3ZpZGVkIHBhcmFtZXRlcnMuXG4gICAgICAgKlxuICAgICAgICogQGV4YW1wbGVcbiAgICAgICAqIDxwcmU+XG4gICAgICAgKiAkYm9iID0gJHVybFJvdXRlci5ocmVmKG5ldyBVcmxNYXRjaGVyKFwiL2Fib3V0LzpwZXJzb25cIiksIHtcbiAgICAgICAqICAgcGVyc29uOiBcImJvYlwiXG4gICAgICAgKiB9KTtcbiAgICAgICAqIC8vICRib2IgPT0gXCIvYWJvdXQvYm9iXCI7XG4gICAgICAgKiA8L3ByZT5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1VybE1hdGNoZXJ9IHVybE1hdGNoZXIgVGhlIGBVcmxNYXRjaGVyYCBvYmplY3Qgd2hpY2ggaXMgdXNlZCBhcyB0aGUgdGVtcGxhdGUgb2YgdGhlIFVSTCB0byBnZW5lcmF0ZS5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gcGFyYW1zIEFuIG9iamVjdCBvZiBwYXJhbWV0ZXIgdmFsdWVzIHRvIGZpbGwgdGhlIG1hdGNoZXIncyByZXF1aXJlZCBwYXJhbWV0ZXJzLlxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LiBUaGUgb3B0aW9ucyBhcmU6XG4gICAgICAgKlxuICAgICAgICogLSAqKmBhYnNvbHV0ZWAqKiAtIHtib29sZWFuPWZhbHNlfSwgIElmIHRydWUgd2lsbCBnZW5lcmF0ZSBhbiBhYnNvbHV0ZSB1cmwsIGUuZy4gXCJodHRwOi8vd3d3LmV4YW1wbGUuY29tL2Z1bGx1cmxcIi5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdWxseSBjb21waWxlZCBVUkwsIG9yIGBudWxsYCBpZiBgcGFyYW1zYCBmYWlsIHZhbGlkYXRpb24gYWdhaW5zdCBgdXJsTWF0Y2hlcmBcbiAgICAgICAqL1xuICAgICAgaHJlZjogZnVuY3Rpb24odXJsTWF0Y2hlciwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdXJsTWF0Y2hlci52YWxpZGF0ZXMocGFyYW1zKSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgdmFyIGlzSHRtbDUgPSAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUoKTtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3QoaXNIdG1sNSkpIHtcbiAgICAgICAgICBpc0h0bWw1ID0gaXNIdG1sNS5lbmFibGVkO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgdXJsID0gdXJsTWF0Y2hlci5mb3JtYXQocGFyYW1zKTtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgaWYgKCFpc0h0bWw1ICYmIHVybCAhPT0gbnVsbCkge1xuICAgICAgICAgIHVybCA9IFwiI1wiICsgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgpICsgdXJsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIHNwZWNpYWwgaGFzaCBwYXJhbSwgaWYgbmVlZGVkXG4gICAgICAgIGlmICh1cmwgIT09IG51bGwgJiYgcGFyYW1zICYmIHBhcmFtc1snIyddKSB7XG4gICAgICAgICAgdXJsICs9ICcjJyArIHBhcmFtc1snIyddO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsID0gYXBwZW5kQmFzZVBhdGgodXJsLCBpc0h0bWw1LCBvcHRpb25zLmFic29sdXRlKTtcblxuICAgICAgICBpZiAoIW9wdGlvbnMuYWJzb2x1dGUgfHwgIXVybCkge1xuICAgICAgICAgIHJldHVybiB1cmw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2xhc2ggPSAoIWlzSHRtbDUgJiYgdXJsID8gJy8nIDogJycpLCBwb3J0ID0gJGxvY2F0aW9uLnBvcnQoKTtcbiAgICAgICAgcG9ydCA9IChwb3J0ID09PSA4MCB8fCBwb3J0ID09PSA0NDMgPyAnJyA6ICc6JyArIHBvcnQpO1xuXG4gICAgICAgIHJldHVybiBbJGxvY2F0aW9uLnByb3RvY29sKCksICc6Ly8nLCAkbG9jYXRpb24uaG9zdCgpLCBwb3J0LCBzbGFzaCwgdXJsXS5qb2luKCcnKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIucm91dGVyJykucHJvdmlkZXIoJyR1cmxSb3V0ZXInLCAkVXJsUm91dGVyUHJvdmlkZXIpO1xuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVQcm92aWRlclxuICpcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJQcm92aWRlclxuICogQHJlcXVpcmVzIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgbmV3IGAkc3RhdGVQcm92aWRlcmAgd29ya3Mgc2ltaWxhciB0byBBbmd1bGFyJ3MgdjEgcm91dGVyLCBidXQgaXQgZm9jdXNlcyBwdXJlbHlcbiAqIG9uIHN0YXRlLlxuICpcbiAqIEEgc3RhdGUgY29ycmVzcG9uZHMgdG8gYSBcInBsYWNlXCIgaW4gdGhlIGFwcGxpY2F0aW9uIGluIHRlcm1zIG9mIHRoZSBvdmVyYWxsIFVJIGFuZFxuICogbmF2aWdhdGlvbi4gQSBzdGF0ZSBkZXNjcmliZXMgKHZpYSB0aGUgY29udHJvbGxlciAvIHRlbXBsYXRlIC8gdmlldyBwcm9wZXJ0aWVzKSB3aGF0XG4gKiB0aGUgVUkgbG9va3MgbGlrZSBhbmQgZG9lcyBhdCB0aGF0IHBsYWNlLlxuICpcbiAqIFN0YXRlcyBvZnRlbiBoYXZlIHRoaW5ncyBpbiBjb21tb24sIGFuZCB0aGUgcHJpbWFyeSB3YXkgb2YgZmFjdG9yaW5nIG91dCB0aGVzZVxuICogY29tbW9uYWxpdGllcyBpbiB0aGlzIG1vZGVsIGlzIHZpYSB0aGUgc3RhdGUgaGllcmFyY2h5LCBpLmUuIHBhcmVudC9jaGlsZCBzdGF0ZXMgYWthXG4gKiBuZXN0ZWQgc3RhdGVzLlxuICpcbiAqIFRoZSBgJHN0YXRlUHJvdmlkZXJgIHByb3ZpZGVzIGludGVyZmFjZXMgdG8gZGVjbGFyZSB0aGVzZSBzdGF0ZXMgZm9yIHlvdXIgYXBwLlxuICovXG4kU3RhdGVQcm92aWRlci4kaW5qZWN0ID0gWyckdXJsUm91dGVyUHJvdmlkZXInLCAnJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXInXTtcbmZ1bmN0aW9uICRTdGF0ZVByb3ZpZGVyKCAgICR1cmxSb3V0ZXJQcm92aWRlciwgICAkdXJsTWF0Y2hlckZhY3RvcnkpIHtcblxuICB2YXIgcm9vdCwgc3RhdGVzID0ge30sICRzdGF0ZSwgcXVldWUgPSB7fSwgYWJzdHJhY3RLZXkgPSAnYWJzdHJhY3QnO1xuXG4gIC8vIEJ1aWxkcyBzdGF0ZSBwcm9wZXJ0aWVzIGZyb20gZGVmaW5pdGlvbiBwYXNzZWQgdG8gcmVnaXN0ZXJTdGF0ZSgpXG4gIHZhciBzdGF0ZUJ1aWxkZXIgPSB7XG5cbiAgICAvLyBEZXJpdmUgcGFyZW50IHN0YXRlIGZyb20gYSBoaWVyYXJjaGljYWwgbmFtZSBvbmx5IGlmICdwYXJlbnQnIGlzIG5vdCBleHBsaWNpdGx5IGRlZmluZWQuXG4gICAgLy8gc3RhdGUuY2hpbGRyZW4gPSBbXTtcbiAgICAvLyBpZiAocGFyZW50KSBwYXJlbnQuY2hpbGRyZW4ucHVzaChzdGF0ZSk7XG4gICAgcGFyZW50OiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgaWYgKGlzRGVmaW5lZChzdGF0ZS5wYXJlbnQpICYmIHN0YXRlLnBhcmVudCkgcmV0dXJuIGZpbmRTdGF0ZShzdGF0ZS5wYXJlbnQpO1xuICAgICAgLy8gcmVnZXggbWF0Y2hlcyBhbnkgdmFsaWQgY29tcG9zaXRlIHN0YXRlIG5hbWVcbiAgICAgIC8vIHdvdWxkIG1hdGNoIFwiY29udGFjdC5saXN0XCIgYnV0IG5vdCBcImNvbnRhY3RzXCJcbiAgICAgIHZhciBjb21wb3NpdGVOYW1lID0gL14oLispXFwuW14uXSskLy5leGVjKHN0YXRlLm5hbWUpO1xuICAgICAgcmV0dXJuIGNvbXBvc2l0ZU5hbWUgPyBmaW5kU3RhdGUoY29tcG9zaXRlTmFtZVsxXSkgOiByb290O1xuICAgIH0sXG5cbiAgICAvLyBpbmhlcml0ICdkYXRhJyBmcm9tIHBhcmVudCBhbmQgb3ZlcnJpZGUgYnkgb3duIHZhbHVlcyAoaWYgYW55KVxuICAgIGRhdGE6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICBpZiAoc3RhdGUucGFyZW50ICYmIHN0YXRlLnBhcmVudC5kYXRhKSB7XG4gICAgICAgIHN0YXRlLmRhdGEgPSBzdGF0ZS5zZWxmLmRhdGEgPSBleHRlbmQoe30sIHN0YXRlLnBhcmVudC5kYXRhLCBzdGF0ZS5kYXRhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGF0ZS5kYXRhO1xuICAgIH0sXG5cbiAgICAvLyBCdWlsZCBhIFVSTE1hdGNoZXIgaWYgbmVjZXNzYXJ5LCBlaXRoZXIgdmlhIGEgcmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMXG4gICAgdXJsOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgdmFyIHVybCA9IHN0YXRlLnVybCwgY29uZmlnID0geyBwYXJhbXM6IHN0YXRlLnBhcmFtcyB8fCB7fSB9O1xuXG4gICAgICBpZiAoaXNTdHJpbmcodXJsKSkge1xuICAgICAgICBpZiAodXJsLmNoYXJBdCgwKSA9PSAnXicpIHJldHVybiAkdXJsTWF0Y2hlckZhY3RvcnkuY29tcGlsZSh1cmwuc3Vic3RyaW5nKDEpLCBjb25maWcpO1xuICAgICAgICByZXR1cm4gKHN0YXRlLnBhcmVudC5uYXZpZ2FibGUgfHwgcm9vdCkudXJsLmNvbmNhdCh1cmwsIGNvbmZpZyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdXJsIHx8ICR1cmxNYXRjaGVyRmFjdG9yeS5pc01hdGNoZXIodXJsKSkgcmV0dXJuIHVybDtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdXJsICdcIiArIHVybCArIFwiJyBpbiBzdGF0ZSAnXCIgKyBzdGF0ZSArIFwiJ1wiKTtcbiAgICB9LFxuXG4gICAgLy8gS2VlcCB0cmFjayBvZiB0aGUgY2xvc2VzdCBhbmNlc3RvciBzdGF0ZSB0aGF0IGhhcyBhIFVSTCAoaS5lLiBpcyBuYXZpZ2FibGUpXG4gICAgbmF2aWdhYmxlOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgcmV0dXJuIHN0YXRlLnVybCA/IHN0YXRlIDogKHN0YXRlLnBhcmVudCA/IHN0YXRlLnBhcmVudC5uYXZpZ2FibGUgOiBudWxsKTtcbiAgICB9LFxuXG4gICAgLy8gT3duIHBhcmFtZXRlcnMgZm9yIHRoaXMgc3RhdGUuIHN0YXRlLnVybC5wYXJhbXMgaXMgYWxyZWFkeSBidWlsdCBhdCB0aGlzIHBvaW50LiBDcmVhdGUgYW5kIGFkZCBub24tdXJsIHBhcmFtc1xuICAgIG93blBhcmFtczogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBzdGF0ZS51cmwgJiYgc3RhdGUudXJsLnBhcmFtcyB8fCBuZXcgJCRVTUZQLlBhcmFtU2V0KCk7XG4gICAgICBmb3JFYWNoKHN0YXRlLnBhcmFtcyB8fCB7fSwgZnVuY3Rpb24oY29uZmlnLCBpZCkge1xuICAgICAgICBpZiAoIXBhcmFtc1tpZF0pIHBhcmFtc1tpZF0gPSBuZXcgJCRVTUZQLlBhcmFtKGlkLCBudWxsLCBjb25maWcsIFwiY29uZmlnXCIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH0sXG5cbiAgICAvLyBEZXJpdmUgcGFyYW1ldGVycyBmb3IgdGhpcyBzdGF0ZSBhbmQgZW5zdXJlIHRoZXkncmUgYSBzdXBlci1zZXQgb2YgcGFyZW50J3MgcGFyYW1ldGVyc1xuICAgIHBhcmFtczogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5wYXJlbnQgJiYgc3RhdGUucGFyZW50LnBhcmFtcyA/IGV4dGVuZChzdGF0ZS5wYXJlbnQucGFyYW1zLiQkbmV3KCksIHN0YXRlLm93blBhcmFtcykgOiBuZXcgJCRVTUZQLlBhcmFtU2V0KCk7XG4gICAgfSxcblxuICAgIC8vIElmIHRoZXJlIGlzIG5vIGV4cGxpY2l0IG11bHRpLXZpZXcgY29uZmlndXJhdGlvbiwgbWFrZSBvbmUgdXAgc28gd2UgZG9uJ3QgaGF2ZVxuICAgIC8vIHRvIGhhbmRsZSBib3RoIGNhc2VzIGluIHRoZSB2aWV3IGRpcmVjdGl2ZSBsYXRlci4gTm90ZSB0aGF0IGhhdmluZyBhbiBleHBsaWNpdFxuICAgIC8vICd2aWV3cycgcHJvcGVydHkgd2lsbCBtZWFuIHRoZSBkZWZhdWx0IHVubmFtZWQgdmlldyBwcm9wZXJ0aWVzIGFyZSBpZ25vcmVkLiBUaGlzXG4gICAgLy8gaXMgYWxzbyBhIGdvb2QgdGltZSB0byByZXNvbHZlIHZpZXcgbmFtZXMgdG8gYWJzb2x1dGUgbmFtZXMsIHNvIGV2ZXJ5dGhpbmcgaXMgYVxuICAgIC8vIHN0cmFpZ2h0IGxvb2t1cCBhdCBsaW5rIHRpbWUuXG4gICAgdmlld3M6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICB2YXIgdmlld3MgPSB7fTtcblxuICAgICAgZm9yRWFjaChpc0RlZmluZWQoc3RhdGUudmlld3MpID8gc3RhdGUudmlld3MgOiB7ICcnOiBzdGF0ZSB9LCBmdW5jdGlvbiAodmlldywgbmFtZSkge1xuICAgICAgICBpZiAobmFtZS5pbmRleE9mKCdAJykgPCAwKSBuYW1lICs9ICdAJyArIHN0YXRlLnBhcmVudC5uYW1lO1xuICAgICAgICB2aWV3c1tuYW1lXSA9IHZpZXc7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB2aWV3cztcbiAgICB9LFxuXG4gICAgLy8gS2VlcCBhIGZ1bGwgcGF0aCBmcm9tIHRoZSByb290IGRvd24gdG8gdGhpcyBzdGF0ZSBhcyB0aGlzIGlzIG5lZWRlZCBmb3Igc3RhdGUgYWN0aXZhdGlvbi5cbiAgICBwYXRoOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgcmV0dXJuIHN0YXRlLnBhcmVudCA/IHN0YXRlLnBhcmVudC5wYXRoLmNvbmNhdChzdGF0ZSkgOiBbXTsgLy8gZXhjbHVkZSByb290IGZyb20gcGF0aFxuICAgIH0sXG5cbiAgICAvLyBTcGVlZCB1cCAkc3RhdGUuY29udGFpbnMoKSBhcyBpdCdzIHVzZWQgYSBsb3RcbiAgICBpbmNsdWRlczogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHZhciBpbmNsdWRlcyA9IHN0YXRlLnBhcmVudCA/IGV4dGVuZCh7fSwgc3RhdGUucGFyZW50LmluY2x1ZGVzKSA6IHt9O1xuICAgICAgaW5jbHVkZXNbc3RhdGUubmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIGluY2x1ZGVzO1xuICAgIH0sXG5cbiAgICAkZGVsZWdhdGVzOiB7fVxuICB9O1xuXG4gIGZ1bmN0aW9uIGlzUmVsYXRpdmUoc3RhdGVOYW1lKSB7XG4gICAgcmV0dXJuIHN0YXRlTmFtZS5pbmRleE9mKFwiLlwiKSA9PT0gMCB8fCBzdGF0ZU5hbWUuaW5kZXhPZihcIl5cIikgPT09IDA7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kU3RhdGUoc3RhdGVPck5hbWUsIGJhc2UpIHtcbiAgICBpZiAoIXN0YXRlT3JOYW1lKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgdmFyIGlzU3RyID0gaXNTdHJpbmcoc3RhdGVPck5hbWUpLFxuICAgICAgICBuYW1lICA9IGlzU3RyID8gc3RhdGVPck5hbWUgOiBzdGF0ZU9yTmFtZS5uYW1lLFxuICAgICAgICBwYXRoICA9IGlzUmVsYXRpdmUobmFtZSk7XG5cbiAgICBpZiAocGF0aCkge1xuICAgICAgaWYgKCFiYXNlKSB0aHJvdyBuZXcgRXJyb3IoXCJObyByZWZlcmVuY2UgcG9pbnQgZ2l2ZW4gZm9yIHBhdGggJ1wiICArIG5hbWUgKyBcIidcIik7XG4gICAgICBiYXNlID0gZmluZFN0YXRlKGJhc2UpO1xuICAgICAgXG4gICAgICB2YXIgcmVsID0gbmFtZS5zcGxpdChcIi5cIiksIGkgPSAwLCBwYXRoTGVuZ3RoID0gcmVsLmxlbmd0aCwgY3VycmVudCA9IGJhc2U7XG5cbiAgICAgIGZvciAoOyBpIDwgcGF0aExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChyZWxbaV0gPT09IFwiXCIgJiYgaSA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnQgPSBiYXNlO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWxbaV0gPT09IFwiXlwiKSB7XG4gICAgICAgICAgaWYgKCFjdXJyZW50LnBhcmVudCkgdGhyb3cgbmV3IEVycm9yKFwiUGF0aCAnXCIgKyBuYW1lICsgXCInIG5vdCB2YWxpZCBmb3Igc3RhdGUgJ1wiICsgYmFzZS5uYW1lICsgXCInXCIpO1xuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJlbCA9IHJlbC5zbGljZShpKS5qb2luKFwiLlwiKTtcbiAgICAgIG5hbWUgPSBjdXJyZW50Lm5hbWUgKyAoY3VycmVudC5uYW1lICYmIHJlbCA/IFwiLlwiIDogXCJcIikgKyByZWw7XG4gICAgfVxuICAgIHZhciBzdGF0ZSA9IHN0YXRlc1tuYW1lXTtcblxuICAgIGlmIChzdGF0ZSAmJiAoaXNTdHIgfHwgKCFpc1N0ciAmJiAoc3RhdGUgPT09IHN0YXRlT3JOYW1lIHx8IHN0YXRlLnNlbGYgPT09IHN0YXRlT3JOYW1lKSkpKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBxdWV1ZVN0YXRlKHBhcmVudE5hbWUsIHN0YXRlKSB7XG4gICAgaWYgKCFxdWV1ZVtwYXJlbnROYW1lXSkge1xuICAgICAgcXVldWVbcGFyZW50TmFtZV0gPSBbXTtcbiAgICB9XG4gICAgcXVldWVbcGFyZW50TmFtZV0ucHVzaChzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaFF1ZXVlZENoaWxkcmVuKHBhcmVudE5hbWUpIHtcbiAgICB2YXIgcXVldWVkID0gcXVldWVbcGFyZW50TmFtZV0gfHwgW107XG4gICAgd2hpbGUocXVldWVkLmxlbmd0aCkge1xuICAgICAgcmVnaXN0ZXJTdGF0ZShxdWV1ZWQuc2hpZnQoKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJTdGF0ZShzdGF0ZSkge1xuICAgIC8vIFdyYXAgYSBuZXcgb2JqZWN0IGFyb3VuZCB0aGUgc3RhdGUgc28gd2UgY2FuIHN0b3JlIG91ciBwcml2YXRlIGRldGFpbHMgZWFzaWx5LlxuICAgIHN0YXRlID0gaW5oZXJpdChzdGF0ZSwge1xuICAgICAgc2VsZjogc3RhdGUsXG4gICAgICByZXNvbHZlOiBzdGF0ZS5yZXNvbHZlIHx8IHt9LFxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5uYW1lOyB9XG4gICAgfSk7XG5cbiAgICB2YXIgbmFtZSA9IHN0YXRlLm5hbWU7XG4gICAgaWYgKCFpc1N0cmluZyhuYW1lKSB8fCBuYW1lLmluZGV4T2YoJ0AnKSA+PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJTdGF0ZSBtdXN0IGhhdmUgYSB2YWxpZCBuYW1lXCIpO1xuICAgIGlmIChzdGF0ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHRocm93IG5ldyBFcnJvcihcIlN0YXRlICdcIiArIG5hbWUgKyBcIicnIGlzIGFscmVhZHkgZGVmaW5lZFwiKTtcblxuICAgIC8vIEdldCBwYXJlbnQgbmFtZVxuICAgIHZhciBwYXJlbnROYW1lID0gKG5hbWUuaW5kZXhPZignLicpICE9PSAtMSkgPyBuYW1lLnN1YnN0cmluZygwLCBuYW1lLmxhc3RJbmRleE9mKCcuJykpXG4gICAgICAgIDogKGlzU3RyaW5nKHN0YXRlLnBhcmVudCkpID8gc3RhdGUucGFyZW50XG4gICAgICAgIDogKGlzT2JqZWN0KHN0YXRlLnBhcmVudCkgJiYgaXNTdHJpbmcoc3RhdGUucGFyZW50Lm5hbWUpKSA/IHN0YXRlLnBhcmVudC5uYW1lXG4gICAgICAgIDogJyc7XG5cbiAgICAvLyBJZiBwYXJlbnQgaXMgbm90IHJlZ2lzdGVyZWQgeWV0LCBhZGQgc3RhdGUgdG8gcXVldWUgYW5kIHJlZ2lzdGVyIGxhdGVyXG4gICAgaWYgKHBhcmVudE5hbWUgJiYgIXN0YXRlc1twYXJlbnROYW1lXSkge1xuICAgICAgcmV0dXJuIHF1ZXVlU3RhdGUocGFyZW50TmFtZSwgc3RhdGUuc2VsZik7XG4gICAgfVxuXG4gICAgZm9yICh2YXIga2V5IGluIHN0YXRlQnVpbGRlcikge1xuICAgICAgaWYgKGlzRnVuY3Rpb24oc3RhdGVCdWlsZGVyW2tleV0pKSBzdGF0ZVtrZXldID0gc3RhdGVCdWlsZGVyW2tleV0oc3RhdGUsIHN0YXRlQnVpbGRlci4kZGVsZWdhdGVzW2tleV0pO1xuICAgIH1cbiAgICBzdGF0ZXNbbmFtZV0gPSBzdGF0ZTtcblxuICAgIC8vIFJlZ2lzdGVyIHRoZSBzdGF0ZSBpbiB0aGUgZ2xvYmFsIHN0YXRlIGxpc3QgYW5kIHdpdGggJHVybFJvdXRlciBpZiBuZWNlc3NhcnkuXG4gICAgaWYgKCFzdGF0ZVthYnN0cmFjdEtleV0gJiYgc3RhdGUudXJsKSB7XG4gICAgICAkdXJsUm91dGVyUHJvdmlkZXIud2hlbihzdGF0ZS51cmwsIFsnJG1hdGNoJywgJyRzdGF0ZVBhcmFtcycsIGZ1bmN0aW9uICgkbWF0Y2gsICRzdGF0ZVBhcmFtcykge1xuICAgICAgICBpZiAoJHN0YXRlLiRjdXJyZW50Lm5hdmlnYWJsZSAhPSBzdGF0ZSB8fCAhZXF1YWxGb3JLZXlzKCRtYXRjaCwgJHN0YXRlUGFyYW1zKSkge1xuICAgICAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oc3RhdGUsICRtYXRjaCwgeyBpbmhlcml0OiB0cnVlLCBsb2NhdGlvbjogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcbiAgICB9XG5cbiAgICAvLyBSZWdpc3RlciBhbnkgcXVldWVkIGNoaWxkcmVuXG4gICAgZmx1c2hRdWV1ZWRDaGlsZHJlbihuYW1lKTtcblxuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIC8vIENoZWNrcyB0ZXh0IHRvIHNlZSBpZiBpdCBsb29rcyBsaWtlIGEgZ2xvYi5cbiAgZnVuY3Rpb24gaXNHbG9iICh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQuaW5kZXhPZignKicpID4gLTE7XG4gIH1cblxuICAvLyBSZXR1cm5zIHRydWUgaWYgZ2xvYiBtYXRjaGVzIGN1cnJlbnQgJHN0YXRlIG5hbWUuXG4gIGZ1bmN0aW9uIGRvZXNTdGF0ZU1hdGNoR2xvYiAoZ2xvYikge1xuICAgIHZhciBnbG9iU2VnbWVudHMgPSBnbG9iLnNwbGl0KCcuJyksXG4gICAgICAgIHNlZ21lbnRzID0gJHN0YXRlLiRjdXJyZW50Lm5hbWUuc3BsaXQoJy4nKTtcblxuICAgIC8vbWF0Y2ggc2luZ2xlIHN0YXJzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBnbG9iU2VnbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoZ2xvYlNlZ21lbnRzW2ldID09PSAnKicpIHtcbiAgICAgICAgc2VnbWVudHNbaV0gPSAnKic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9tYXRjaCBncmVlZHkgc3RhcnRzXG4gICAgaWYgKGdsb2JTZWdtZW50c1swXSA9PT0gJyoqJykge1xuICAgICAgIHNlZ21lbnRzID0gc2VnbWVudHMuc2xpY2UoaW5kZXhPZihzZWdtZW50cywgZ2xvYlNlZ21lbnRzWzFdKSk7XG4gICAgICAgc2VnbWVudHMudW5zaGlmdCgnKionKTtcbiAgICB9XG4gICAgLy9tYXRjaCBncmVlZHkgZW5kc1xuICAgIGlmIChnbG9iU2VnbWVudHNbZ2xvYlNlZ21lbnRzLmxlbmd0aCAtIDFdID09PSAnKionKSB7XG4gICAgICAgc2VnbWVudHMuc3BsaWNlKGluZGV4T2Yoc2VnbWVudHMsIGdsb2JTZWdtZW50c1tnbG9iU2VnbWVudHMubGVuZ3RoIC0gMl0pICsgMSwgTnVtYmVyLk1BWF9WQUxVRSk7XG4gICAgICAgc2VnbWVudHMucHVzaCgnKionKTtcbiAgICB9XG5cbiAgICBpZiAoZ2xvYlNlZ21lbnRzLmxlbmd0aCAhPSBzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VnbWVudHMuam9pbignJykgPT09IGdsb2JTZWdtZW50cy5qb2luKCcnKTtcbiAgfVxuXG5cbiAgLy8gSW1wbGljaXQgcm9vdCBzdGF0ZSB0aGF0IGlzIGFsd2F5cyBhY3RpdmVcbiAgcm9vdCA9IHJlZ2lzdGVyU3RhdGUoe1xuICAgIG5hbWU6ICcnLFxuICAgIHVybDogJ14nLFxuICAgIHZpZXdzOiBudWxsLFxuICAgICdhYnN0cmFjdCc6IHRydWVcbiAgfSk7XG4gIHJvb3QubmF2aWdhYmxlID0gbnVsbDtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVByb3ZpZGVyI2RlY29yYXRvclxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBbGxvd3MgeW91IHRvIGV4dGVuZCAoY2FyZWZ1bGx5KSBvciBvdmVycmlkZSAoYXQgeW91ciBvd24gcGVyaWwpIHRoZSBcbiAgICogYHN0YXRlQnVpbGRlcmAgb2JqZWN0IHVzZWQgaW50ZXJuYWxseSBieSBgJHN0YXRlUHJvdmlkZXJgLiBUaGlzIGNhbiBiZSB1c2VkIFxuICAgKiB0byBhZGQgY3VzdG9tIGZ1bmN0aW9uYWxpdHkgdG8gdWktcm91dGVyLCBmb3IgZXhhbXBsZSBpbmZlcnJpbmcgdGVtcGxhdGVVcmwgXG4gICAqIGJhc2VkIG9uIHRoZSBzdGF0ZSBuYW1lLlxuICAgKlxuICAgKiBXaGVuIHBhc3Npbmcgb25seSBhIG5hbWUsIGl0IHJldHVybnMgdGhlIGN1cnJlbnQgKG9yaWdpbmFsIG9yIGRlY29yYXRlZCkgYnVpbGRlclxuICAgKiBmdW5jdGlvbiB0aGF0IG1hdGNoZXMgYG5hbWVgLlxuICAgKlxuICAgKiBUaGUgYnVpbGRlciBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgZGVjb3JhdGVkIGFyZSBsaXN0ZWQgYmVsb3cuIFRob3VnaCBub3QgYWxsXG4gICAqIG5lY2Vzc2FyaWx5IGhhdmUgYSBnb29kIHVzZSBjYXNlIGZvciBkZWNvcmF0aW9uLCB0aGF0IGlzIHVwIHRvIHlvdSB0byBkZWNpZGUuXG4gICAqXG4gICAqIEluIGFkZGl0aW9uLCB1c2VycyBjYW4gYXR0YWNoIGN1c3RvbSBkZWNvcmF0b3JzLCB3aGljaCB3aWxsIGdlbmVyYXRlIG5ldyBcbiAgICogcHJvcGVydGllcyB3aXRoaW4gdGhlIHN0YXRlJ3MgaW50ZXJuYWwgZGVmaW5pdGlvbi4gVGhlcmUgaXMgY3VycmVudGx5IG5vIGNsZWFyIFxuICAgKiB1c2UtY2FzZSBmb3IgdGhpcyBiZXlvbmQgYWNjZXNzaW5nIGludGVybmFsIHN0YXRlcyAoaS5lLiAkc3RhdGUuJGN1cnJlbnQpLCBcbiAgICogaG93ZXZlciwgZXhwZWN0IHRoaXMgdG8gYmVjb21lIGluY3JlYXNpbmdseSByZWxldmFudCBhcyB3ZSBpbnRyb2R1Y2UgYWRkaXRpb25hbCBcbiAgICogbWV0YS1wcm9ncmFtbWluZyBmZWF0dXJlcy5cbiAgICpcbiAgICogKipXYXJuaW5nKio6IERlY29yYXRvcnMgc2hvdWxkIG5vdCBiZSBpbnRlcmRlcGVuZGVudCBiZWNhdXNlIHRoZSBvcmRlciBvZiBcbiAgICogZXhlY3V0aW9uIG9mIHRoZSBidWlsZGVyIGZ1bmN0aW9ucyBpbiBub24tZGV0ZXJtaW5pc3RpYy4gQnVpbGRlciBmdW5jdGlvbnMgXG4gICAqIHNob3VsZCBvbmx5IGJlIGRlcGVuZGVudCBvbiB0aGUgc3RhdGUgZGVmaW5pdGlvbiBvYmplY3QgYW5kIHN1cGVyIGZ1bmN0aW9uLlxuICAgKlxuICAgKlxuICAgKiBFeGlzdGluZyBidWlsZGVyIGZ1bmN0aW9ucyBhbmQgY3VycmVudCByZXR1cm4gdmFsdWVzOlxuICAgKlxuICAgKiAtICoqcGFyZW50KiogYHtvYmplY3R9YCAtIHJldHVybnMgdGhlIHBhcmVudCBzdGF0ZSBvYmplY3QuXG4gICAqIC0gKipkYXRhKiogYHtvYmplY3R9YCAtIHJldHVybnMgc3RhdGUgZGF0YSwgaW5jbHVkaW5nIGFueSBpbmhlcml0ZWQgZGF0YSB0aGF0IGlzIG5vdFxuICAgKiAgIG92ZXJyaWRkZW4gYnkgb3duIHZhbHVlcyAoaWYgYW55KS5cbiAgICogLSAqKnVybCoqIGB7b2JqZWN0fWAgLSByZXR1cm5zIGEge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciBVcmxNYXRjaGVyfVxuICAgKiAgIG9yIGBudWxsYC5cbiAgICogLSAqKm5hdmlnYWJsZSoqIGB7b2JqZWN0fWAgLSByZXR1cm5zIGNsb3Nlc3QgYW5jZXN0b3Igc3RhdGUgdGhhdCBoYXMgYSBVUkwgKGFrYSBpcyBcbiAgICogICBuYXZpZ2FibGUpLlxuICAgKiAtICoqcGFyYW1zKiogYHtvYmplY3R9YCAtIHJldHVybnMgYW4gYXJyYXkgb2Ygc3RhdGUgcGFyYW1zIHRoYXQgYXJlIGVuc3VyZWQgdG8gXG4gICAqICAgYmUgYSBzdXBlci1zZXQgb2YgcGFyZW50J3MgcGFyYW1zLlxuICAgKiAtICoqdmlld3MqKiBge29iamVjdH1gIC0gcmV0dXJucyBhIHZpZXdzIG9iamVjdCB3aGVyZSBlYWNoIGtleSBpcyBhbiBhYnNvbHV0ZSB2aWV3IFxuICAgKiAgIG5hbWUgKGkuZS4gXCJ2aWV3TmFtZUBzdGF0ZU5hbWVcIikgYW5kIGVhY2ggdmFsdWUgaXMgdGhlIGNvbmZpZyBvYmplY3QgXG4gICAqICAgKHRlbXBsYXRlLCBjb250cm9sbGVyKSBmb3IgdGhlIHZpZXcuIEV2ZW4gd2hlbiB5b3UgZG9uJ3QgdXNlIHRoZSB2aWV3cyBvYmplY3QgXG4gICAqICAgZXhwbGljaXRseSBvbiBhIHN0YXRlIGNvbmZpZywgb25lIGlzIHN0aWxsIGNyZWF0ZWQgZm9yIHlvdSBpbnRlcm5hbGx5LlxuICAgKiAgIFNvIGJ5IGRlY29yYXRpbmcgdGhpcyBidWlsZGVyIGZ1bmN0aW9uIHlvdSBoYXZlIGFjY2VzcyB0byBkZWNvcmF0aW5nIHRlbXBsYXRlIFxuICAgKiAgIGFuZCBjb250cm9sbGVyIHByb3BlcnRpZXMuXG4gICAqIC0gKipvd25QYXJhbXMqKiBge29iamVjdH1gIC0gcmV0dXJucyBhbiBhcnJheSBvZiBwYXJhbXMgdGhhdCBiZWxvbmcgdG8gdGhlIHN0YXRlLCBcbiAgICogICBub3QgaW5jbHVkaW5nIGFueSBwYXJhbXMgZGVmaW5lZCBieSBhbmNlc3RvciBzdGF0ZXMuXG4gICAqIC0gKipwYXRoKiogYHtzdHJpbmd9YCAtIHJldHVybnMgdGhlIGZ1bGwgcGF0aCBmcm9tIHRoZSByb290IGRvd24gdG8gdGhpcyBzdGF0ZS4gXG4gICAqICAgTmVlZGVkIGZvciBzdGF0ZSBhY3RpdmF0aW9uLlxuICAgKiAtICoqaW5jbHVkZXMqKiBge29iamVjdH1gIC0gcmV0dXJucyBhbiBvYmplY3QgdGhhdCBpbmNsdWRlcyBldmVyeSBzdGF0ZSB0aGF0IFxuICAgKiAgIHdvdWxkIHBhc3MgYSBgJHN0YXRlLmluY2x1ZGVzKClgIHRlc3QuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxwcmU+XG4gICAqIC8vIE92ZXJyaWRlIHRoZSBpbnRlcm5hbCAndmlld3MnIGJ1aWxkZXIgd2l0aCBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIHN0YXRlXG4gICAqIC8vIGRlZmluaXRpb24sIGFuZCBhIHJlZmVyZW5jZSB0byB0aGUgaW50ZXJuYWwgZnVuY3Rpb24gYmVpbmcgb3ZlcnJpZGRlbjpcbiAgICogJHN0YXRlUHJvdmlkZXIuZGVjb3JhdG9yKCd2aWV3cycsIGZ1bmN0aW9uIChzdGF0ZSwgcGFyZW50KSB7XG4gICAqICAgdmFyIHJlc3VsdCA9IHt9LFxuICAgKiAgICAgICB2aWV3cyA9IHBhcmVudChzdGF0ZSk7XG4gICAqXG4gICAqICAgYW5ndWxhci5mb3JFYWNoKHZpZXdzLCBmdW5jdGlvbiAoY29uZmlnLCBuYW1lKSB7XG4gICAqICAgICB2YXIgYXV0b05hbWUgPSAoc3RhdGUubmFtZSArICcuJyArIG5hbWUpLnJlcGxhY2UoJy4nLCAnLycpO1xuICAgKiAgICAgY29uZmlnLnRlbXBsYXRlVXJsID0gY29uZmlnLnRlbXBsYXRlVXJsIHx8ICcvcGFydGlhbHMvJyArIGF1dG9OYW1lICsgJy5odG1sJztcbiAgICogICAgIHJlc3VsdFtuYW1lXSA9IGNvbmZpZztcbiAgICogICB9KTtcbiAgICogICByZXR1cm4gcmVzdWx0O1xuICAgKiB9KTtcbiAgICpcbiAgICogJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2hvbWUnLCB7XG4gICAqICAgdmlld3M6IHtcbiAgICogICAgICdjb250YWN0Lmxpc3QnOiB7IGNvbnRyb2xsZXI6ICdMaXN0Q29udHJvbGxlcicgfSxcbiAgICogICAgICdjb250YWN0Lml0ZW0nOiB7IGNvbnRyb2xsZXI6ICdJdGVtQ29udHJvbGxlcicgfVxuICAgKiAgIH1cbiAgICogfSk7XG4gICAqXG4gICAqIC8vIC4uLlxuICAgKlxuICAgKiAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICogLy8gQXV0by1wb3B1bGF0ZXMgbGlzdCBhbmQgaXRlbSB2aWV3cyB3aXRoIC9wYXJ0aWFscy9ob21lL2NvbnRhY3QvbGlzdC5odG1sLFxuICAgKiAvLyBhbmQgL3BhcnRpYWxzL2hvbWUvY29udGFjdC9pdGVtLmh0bWwsIHJlc3BlY3RpdmVseS5cbiAgICogPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBidWlsZGVyIGZ1bmN0aW9uIHRvIGRlY29yYXRlLiBcbiAgICogQHBhcmFtIHtvYmplY3R9IGZ1bmMgQSBmdW5jdGlvbiB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciBkZWNvcmF0aW5nIHRoZSBvcmlnaW5hbCBcbiAgICogYnVpbGRlciBmdW5jdGlvbi4gVGhlIGZ1bmN0aW9uIHJlY2VpdmVzIHR3byBwYXJhbWV0ZXJzOlxuICAgKlxuICAgKiAgIC0gYHtvYmplY3R9YCAtIHN0YXRlIC0gVGhlIHN0YXRlIGNvbmZpZyBvYmplY3QuXG4gICAqICAgLSBge29iamVjdH1gIC0gc3VwZXIgLSBUaGUgb3JpZ2luYWwgYnVpbGRlciBmdW5jdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSAkc3RhdGVQcm92aWRlciAtICRzdGF0ZVByb3ZpZGVyIGluc3RhbmNlXG4gICAqL1xuICB0aGlzLmRlY29yYXRvciA9IGRlY29yYXRvcjtcbiAgZnVuY3Rpb24gZGVjb3JhdG9yKG5hbWUsIGZ1bmMpIHtcbiAgICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICBpZiAoaXNTdHJpbmcobmFtZSkgJiYgIWlzRGVmaW5lZChmdW5jKSkge1xuICAgICAgcmV0dXJuIHN0YXRlQnVpbGRlcltuYW1lXTtcbiAgICB9XG4gICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpIHx8ICFpc1N0cmluZyhuYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmIChzdGF0ZUJ1aWxkZXJbbmFtZV0gJiYgIXN0YXRlQnVpbGRlci4kZGVsZWdhdGVzW25hbWVdKSB7XG4gICAgICBzdGF0ZUJ1aWxkZXIuJGRlbGVnYXRlc1tuYW1lXSA9IHN0YXRlQnVpbGRlcltuYW1lXTtcbiAgICB9XG4gICAgc3RhdGVCdWlsZGVyW25hbWVdID0gZnVuYztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVByb3ZpZGVyI3N0YXRlXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIHN0YXRlIGNvbmZpZ3VyYXRpb24gdW5kZXIgYSBnaXZlbiBzdGF0ZSBuYW1lLiBUaGUgc3RhdGVDb25maWcgb2JqZWN0XG4gICAqIGhhcyB0aGUgZm9sbG93aW5nIGFjY2VwdGFibGUgcHJvcGVydGllcy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSB1bmlxdWUgc3RhdGUgbmFtZSwgZS5nLiBcImhvbWVcIiwgXCJhYm91dFwiLCBcImNvbnRhY3RzXCIuXG4gICAqIFRvIGNyZWF0ZSBhIHBhcmVudC9jaGlsZCBzdGF0ZSB1c2UgYSBkb3QsIGUuZy4gXCJhYm91dC5zYWxlc1wiLCBcImhvbWUubmV3ZXN0XCIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZUNvbmZpZyBTdGF0ZSBjb25maWd1cmF0aW9uIG9iamVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb249fSBzdGF0ZUNvbmZpZy50ZW1wbGF0ZVxuICAgKiA8YSBpZD0ndGVtcGxhdGUnPjwvYT5cbiAgICogICBodG1sIHRlbXBsYXRlIGFzIGEgc3RyaW5nIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAqICAgYW4gaHRtbCB0ZW1wbGF0ZSBhcyBhIHN0cmluZyB3aGljaCBzaG91bGQgYmUgdXNlZCBieSB0aGUgdWlWaWV3IGRpcmVjdGl2ZXMuIFRoaXMgcHJvcGVydHkgXG4gICAqICAgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIHRlbXBsYXRlVXJsLlxuICAgKiAgIFxuICAgKiAgIElmIGB0ZW1wbGF0ZWAgaXMgYSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gICAqXG4gICAqICAgLSB7YXJyYXkuJmx0O29iamVjdCZndDt9IC0gc3RhdGUgcGFyYW1ldGVycyBleHRyYWN0ZWQgZnJvbSB0aGUgY3VycmVudCAkbG9jYXRpb24ucGF0aCgpIGJ5XG4gICAqICAgICBhcHBseWluZyB0aGUgY3VycmVudCBzdGF0ZVxuICAgKlxuICAgKiA8cHJlPnRlbXBsYXRlOlxuICAgKiAgIFwiPGgxPmlubGluZSB0ZW1wbGF0ZSBkZWZpbml0aW9uPC9oMT5cIiArXG4gICAqICAgXCI8ZGl2IHVpLXZpZXc+PC9kaXY+XCI8L3ByZT5cbiAgICogPHByZT50ZW1wbGF0ZTogZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAqICAgICAgIHJldHVybiBcIjxoMT5nZW5lcmF0ZWQgdGVtcGxhdGU8L2gxPlwiOyB9PC9wcmU+XG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbj19IHN0YXRlQ29uZmlnLnRlbXBsYXRlVXJsXG4gICAqIDxhIGlkPSd0ZW1wbGF0ZVVybCc+PC9hPlxuICAgKlxuICAgKiAgIHBhdGggb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcGF0aCB0byBhbiBodG1sXG4gICAqICAgdGVtcGxhdGUgdGhhdCBzaG91bGQgYmUgdXNlZCBieSB1aVZpZXcuXG4gICAqICAgXG4gICAqICAgSWYgYHRlbXBsYXRlVXJsYCBpcyBhIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAgICpcbiAgICogICAtIHthcnJheS4mbHQ7b2JqZWN0Jmd0O30gLSBzdGF0ZSBwYXJhbWV0ZXJzIGV4dHJhY3RlZCBmcm9tIHRoZSBjdXJyZW50ICRsb2NhdGlvbi5wYXRoKCkgYnkgXG4gICAqICAgICBhcHBseWluZyB0aGUgY3VycmVudCBzdGF0ZVxuICAgKlxuICAgKiA8cHJlPnRlbXBsYXRlVXJsOiBcImhvbWUuaHRtbFwiPC9wcmU+XG4gICAqIDxwcmU+dGVtcGxhdGVVcmw6IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgKiAgICAgcmV0dXJuIG15VGVtcGxhdGVzW3BhcmFtcy5wYWdlSWRdOyB9PC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb249fSBzdGF0ZUNvbmZpZy50ZW1wbGF0ZVByb3ZpZGVyXG4gICAqIDxhIGlkPSd0ZW1wbGF0ZVByb3ZpZGVyJz48L2E+XG4gICAqICAgIFByb3ZpZGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBIVE1MIGNvbnRlbnQgc3RyaW5nLlxuICAgKiA8cHJlPiB0ZW1wbGF0ZVByb3ZpZGVyOlxuICAgKiAgICAgICBmdW5jdGlvbihNeVRlbXBsYXRlU2VydmljZSwgcGFyYW1zKSB7XG4gICAqICAgICAgICAgcmV0dXJuIE15VGVtcGxhdGVTZXJ2aWNlLmdldFRlbXBsYXRlKHBhcmFtcy5wYWdlSWQpO1xuICAgKiAgICAgICB9PC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uPX0gc3RhdGVDb25maWcuY29udHJvbGxlclxuICAgKiA8YSBpZD0nY29udHJvbGxlcic+PC9hPlxuICAgKlxuICAgKiAgQ29udHJvbGxlciBmbiB0aGF0IHNob3VsZCBiZSBhc3NvY2lhdGVkIHdpdGggbmV3bHlcbiAgICogICByZWxhdGVkIHNjb3BlIG9yIHRoZSBuYW1lIG9mIGEgcmVnaXN0ZXJlZCBjb250cm9sbGVyIGlmIHBhc3NlZCBhcyBhIHN0cmluZy5cbiAgICogICBPcHRpb25hbGx5LCB0aGUgQ29udHJvbGxlckFzIG1heSBiZSBkZWNsYXJlZCBoZXJlLlxuICAgKiA8cHJlPmNvbnRyb2xsZXI6IFwiTXlSZWdpc3RlcmVkQ29udHJvbGxlclwiPC9wcmU+XG4gICAqIDxwcmU+Y29udHJvbGxlcjpcbiAgICogICAgIFwiTXlSZWdpc3RlcmVkQ29udHJvbGxlciBhcyBmb29DdHJsXCJ9PC9wcmU+XG4gICAqIDxwcmU+Y29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCBNeVNlcnZpY2UpIHtcbiAgICogICAgICRzY29wZS5kYXRhID0gTXlTZXJ2aWNlLmdldERhdGEoKTsgfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gc3RhdGVDb25maWcuY29udHJvbGxlclByb3ZpZGVyXG4gICAqIDxhIGlkPSdjb250cm9sbGVyUHJvdmlkZXInPjwvYT5cbiAgICpcbiAgICogSW5qZWN0YWJsZSBwcm92aWRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGFjdHVhbCBjb250cm9sbGVyIG9yIHN0cmluZy5cbiAgICogPHByZT5jb250cm9sbGVyUHJvdmlkZXI6XG4gICAqICAgZnVuY3Rpb24oTXlSZXNvbHZlRGF0YSkge1xuICAgKiAgICAgaWYgKE15UmVzb2x2ZURhdGEuZm9vKVxuICAgKiAgICAgICByZXR1cm4gXCJGb29DdHJsXCJcbiAgICogICAgIGVsc2UgaWYgKE15UmVzb2x2ZURhdGEuYmFyKVxuICAgKiAgICAgICByZXR1cm4gXCJCYXJDdHJsXCI7XG4gICAqICAgICBlbHNlIHJldHVybiBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICogICAgICAgJHNjb3BlLmJheiA9IFwiUXV4XCI7XG4gICAqICAgICB9XG4gICAqICAgfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHN0YXRlQ29uZmlnLmNvbnRyb2xsZXJBc1xuICAgKiA8YSBpZD0nY29udHJvbGxlckFzJz48L2E+XG4gICAqIFxuICAgKiBBIGNvbnRyb2xsZXIgYWxpYXMgbmFtZS4gSWYgcHJlc2VudCB0aGUgY29udHJvbGxlciB3aWxsIGJlXG4gICAqICAgcHVibGlzaGVkIHRvIHNjb3BlIHVuZGVyIHRoZSBjb250cm9sbGVyQXMgbmFtZS5cbiAgICogPHByZT5jb250cm9sbGVyQXM6IFwibXlDdHJsXCI8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0PX0gc3RhdGVDb25maWcucGFyZW50XG4gICAqIDxhIGlkPSdwYXJlbnQnPjwvYT5cbiAgICogT3B0aW9uYWxseSBzcGVjaWZpZXMgdGhlIHBhcmVudCBzdGF0ZSBvZiB0aGlzIHN0YXRlLlxuICAgKlxuICAgKiA8cHJlPnBhcmVudDogJ3BhcmVudFN0YXRlJzwvcHJlPlxuICAgKiA8cHJlPnBhcmVudDogcGFyZW50U3RhdGUgLy8gSlMgdmFyaWFibGU8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZUNvbmZpZy5yZXNvbHZlXG4gICAqIDxhIGlkPSdyZXNvbHZlJz48L2E+XG4gICAqXG4gICAqIEFuIG9wdGlvbmFsIG1hcCZsdDtzdHJpbmcsIGZ1bmN0aW9uJmd0OyBvZiBkZXBlbmRlbmNpZXMgd2hpY2hcbiAgICogICBzaG91bGQgYmUgaW5qZWN0ZWQgaW50byB0aGUgY29udHJvbGxlci4gSWYgYW55IG9mIHRoZXNlIGRlcGVuZGVuY2llcyBhcmUgcHJvbWlzZXMsIFxuICAgKiAgIHRoZSByb3V0ZXIgd2lsbCB3YWl0IGZvciB0aGVtIGFsbCB0byBiZSByZXNvbHZlZCBiZWZvcmUgdGhlIGNvbnRyb2xsZXIgaXMgaW5zdGFudGlhdGVkLlxuICAgKiAgIElmIGFsbCB0aGUgcHJvbWlzZXMgYXJlIHJlc29sdmVkIHN1Y2Nlc3NmdWxseSwgdGhlICRzdGF0ZUNoYW5nZVN1Y2Nlc3MgZXZlbnQgaXMgZmlyZWRcbiAgICogICBhbmQgdGhlIHZhbHVlcyBvZiB0aGUgcmVzb2x2ZWQgcHJvbWlzZXMgYXJlIGluamVjdGVkIGludG8gYW55IGNvbnRyb2xsZXJzIHRoYXQgcmVmZXJlbmNlIHRoZW0uXG4gICAqICAgSWYgYW55ICBvZiB0aGUgcHJvbWlzZXMgYXJlIHJlamVjdGVkIHRoZSAkc3RhdGVDaGFuZ2VFcnJvciBldmVudCBpcyBmaXJlZC5cbiAgICpcbiAgICogICBUaGUgbWFwIG9iamVjdCBpczpcbiAgICogICBcbiAgICogICAtIGtleSAtIHtzdHJpbmd9OiBuYW1lIG9mIGRlcGVuZGVuY3kgdG8gYmUgaW5qZWN0ZWQgaW50byBjb250cm9sbGVyXG4gICAqICAgLSBmYWN0b3J5IC0ge3N0cmluZ3xmdW5jdGlvbn06IElmIHN0cmluZyB0aGVuIGl0IGlzIGFsaWFzIGZvciBzZXJ2aWNlLiBPdGhlcndpc2UgaWYgZnVuY3Rpb24sIFxuICAgKiAgICAgaXQgaXMgaW5qZWN0ZWQgYW5kIHJldHVybiB2YWx1ZSBpdCB0cmVhdGVkIGFzIGRlcGVuZGVuY3kuIElmIHJlc3VsdCBpcyBhIHByb21pc2UsIGl0IGlzIFxuICAgKiAgICAgcmVzb2x2ZWQgYmVmb3JlIGl0cyB2YWx1ZSBpcyBpbmplY3RlZCBpbnRvIGNvbnRyb2xsZXIuXG4gICAqXG4gICAqIDxwcmU+cmVzb2x2ZToge1xuICAgKiAgICAgbXlSZXNvbHZlMTpcbiAgICogICAgICAgZnVuY3Rpb24oJGh0dHAsICRzdGF0ZVBhcmFtcykge1xuICAgKiAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoXCIvYXBpL2Zvb3MvXCIrc3RhdGVQYXJhbXMuZm9vSUQpO1xuICAgKiAgICAgICB9XG4gICAqICAgICB9PC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gc3RhdGVDb25maWcudXJsXG4gICAqIDxhIGlkPSd1cmwnPjwvYT5cbiAgICpcbiAgICogICBBIHVybCBmcmFnbWVudCB3aXRoIG9wdGlvbmFsIHBhcmFtZXRlcnMuIFdoZW4gYSBzdGF0ZSBpcyBuYXZpZ2F0ZWQgb3JcbiAgICogICB0cmFuc2l0aW9uZWQgdG8sIHRoZSBgJHN0YXRlUGFyYW1zYCBzZXJ2aWNlIHdpbGwgYmUgcG9wdWxhdGVkIHdpdGggYW55IFxuICAgKiAgIHBhcmFtZXRlcnMgdGhhdCB3ZXJlIHBhc3NlZC5cbiAgICpcbiAgICogICAoU2VlIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgVXJsTWF0Y2hlcn0gYFVybE1hdGNoZXJgfSBmb3JcbiAgICogICBtb3JlIGRldGFpbHMgb24gYWNjZXB0YWJsZSBwYXR0ZXJucyApXG4gICAqXG4gICAqIGV4YW1wbGVzOlxuICAgKiA8cHJlPnVybDogXCIvaG9tZVwiXG4gICAqIHVybDogXCIvdXNlcnMvOnVzZXJpZFwiXG4gICAqIHVybDogXCIvYm9va3Mve2Jvb2tpZDpbYS16QS1aXy1dfVwiXG4gICAqIHVybDogXCIvYm9va3Mve2NhdGVnb3J5aWQ6aW50fVwiXG4gICAqIHVybDogXCIvYm9va3Mve3B1Ymxpc2hlcm5hbWU6c3RyaW5nfS97Y2F0ZWdvcnlpZDppbnR9XCJcbiAgICogdXJsOiBcIi9tZXNzYWdlcz9iZWZvcmUmYWZ0ZXJcIlxuICAgKiB1cmw6IFwiL21lc3NhZ2VzP3tiZWZvcmU6ZGF0ZX0me2FmdGVyOmRhdGV9XCJcbiAgICogdXJsOiBcIi9tZXNzYWdlcy86bWFpbGJveGlkP3tiZWZvcmU6ZGF0ZX0me2FmdGVyOmRhdGV9XCJcbiAgICogPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gc3RhdGVDb25maWcudmlld3NcbiAgICogPGEgaWQ9J3ZpZXdzJz48L2E+XG4gICAqIGFuIG9wdGlvbmFsIG1hcCZsdDtzdHJpbmcsIG9iamVjdCZndDsgd2hpY2ggZGVmaW5lZCBtdWx0aXBsZSB2aWV3cywgb3IgdGFyZ2V0cyB2aWV3c1xuICAgKiBtYW51YWxseS9leHBsaWNpdGx5LlxuICAgKlxuICAgKiBFeGFtcGxlczpcbiAgICpcbiAgICogVGFyZ2V0cyB0aHJlZSBuYW1lZCBgdWktdmlld2BzIGluIHRoZSBwYXJlbnQgc3RhdGUncyB0ZW1wbGF0ZVxuICAgKiA8cHJlPnZpZXdzOiB7XG4gICAqICAgICBoZWFkZXI6IHtcbiAgICogICAgICAgY29udHJvbGxlcjogXCJoZWFkZXJDdHJsXCIsXG4gICAqICAgICAgIHRlbXBsYXRlVXJsOiBcImhlYWRlci5odG1sXCJcbiAgICogICAgIH0sIGJvZHk6IHtcbiAgICogICAgICAgY29udHJvbGxlcjogXCJib2R5Q3RybFwiLFxuICAgKiAgICAgICB0ZW1wbGF0ZVVybDogXCJib2R5Lmh0bWxcIlxuICAgKiAgICAgfSwgZm9vdGVyOiB7XG4gICAqICAgICAgIGNvbnRyb2xsZXI6IFwiZm9vdEN0cmxcIixcbiAgICogICAgICAgdGVtcGxhdGVVcmw6IFwiZm9vdGVyLmh0bWxcIlxuICAgKiAgICAgfVxuICAgKiAgIH08L3ByZT5cbiAgICpcbiAgICogVGFyZ2V0cyBuYW1lZCBgdWktdmlldz1cImhlYWRlclwiYCBmcm9tIGdyYW5kcGFyZW50IHN0YXRlICd0b3AnJ3MgdGVtcGxhdGUsIGFuZCBuYW1lZCBgdWktdmlldz1cImJvZHlcIiBmcm9tIHBhcmVudCBzdGF0ZSdzIHRlbXBsYXRlLlxuICAgKiA8cHJlPnZpZXdzOiB7XG4gICAqICAgICAnaGVhZGVyQHRvcCc6IHtcbiAgICogICAgICAgY29udHJvbGxlcjogXCJtc2dIZWFkZXJDdHJsXCIsXG4gICAqICAgICAgIHRlbXBsYXRlVXJsOiBcIm1zZ0hlYWRlci5odG1sXCJcbiAgICogICAgIH0sICdib2R5Jzoge1xuICAgKiAgICAgICBjb250cm9sbGVyOiBcIm1lc3NhZ2VzQ3RybFwiLFxuICAgKiAgICAgICB0ZW1wbGF0ZVVybDogXCJtZXNzYWdlcy5odG1sXCJcbiAgICogICAgIH1cbiAgICogICB9PC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtzdGF0ZUNvbmZpZy5hYnN0cmFjdD1mYWxzZV1cbiAgICogPGEgaWQ9J2Fic3RyYWN0Jz48L2E+XG4gICAqIEFuIGFic3RyYWN0IHN0YXRlIHdpbGwgbmV2ZXIgYmUgZGlyZWN0bHkgYWN0aXZhdGVkLFxuICAgKiAgIGJ1dCBjYW4gcHJvdmlkZSBpbmhlcml0ZWQgcHJvcGVydGllcyB0byBpdHMgY29tbW9uIGNoaWxkcmVuIHN0YXRlcy5cbiAgICogPHByZT5hYnN0cmFjdDogdHJ1ZTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gc3RhdGVDb25maWcub25FbnRlclxuICAgKiA8YSBpZD0nb25FbnRlcic+PC9hPlxuICAgKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmb3Igd2hlbiBhIHN0YXRlIGlzIGVudGVyZWQuIEdvb2Qgd2F5XG4gICAqICAgdG8gdHJpZ2dlciBhbiBhY3Rpb24gb3IgZGlzcGF0Y2ggYW4gZXZlbnQsIHN1Y2ggYXMgb3BlbmluZyBhIGRpYWxvZy5cbiAgICogSWYgbWluaWZ5aW5nIHlvdXIgc2NyaXB0cywgbWFrZSBzdXJlIHRvIGV4cGxpY3RseSBhbm5vdGF0ZSB0aGlzIGZ1bmN0aW9uLFxuICAgKiBiZWNhdXNlIGl0IHdvbid0IGJlIGF1dG9tYXRpY2FsbHkgYW5ub3RhdGVkIGJ5IHlvdXIgYnVpbGQgdG9vbHMuXG4gICAqXG4gICAqIDxwcmU+b25FbnRlcjogZnVuY3Rpb24oTXlTZXJ2aWNlLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgIE15U2VydmljZS5mb28oJHN0YXRlUGFyYW1zLm15UGFyYW0pO1xuICAgKiB9PC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb249fSBzdGF0ZUNvbmZpZy5vbkV4aXRcbiAgICogPGEgaWQ9J29uRXhpdCc+PC9hPlxuICAgKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmb3Igd2hlbiBhIHN0YXRlIGlzIGV4aXRlZC4gR29vZCB3YXkgdG9cbiAgICogICB0cmlnZ2VyIGFuIGFjdGlvbiBvciBkaXNwYXRjaCBhbiBldmVudCwgc3VjaCBhcyBvcGVuaW5nIGEgZGlhbG9nLlxuICAgKiBJZiBtaW5pZnlpbmcgeW91ciBzY3JpcHRzLCBtYWtlIHN1cmUgdG8gZXhwbGljdGx5IGFubm90YXRlIHRoaXMgZnVuY3Rpb24sXG4gICAqIGJlY2F1c2UgaXQgd29uJ3QgYmUgYXV0b21hdGljYWxseSBhbm5vdGF0ZWQgYnkgeW91ciBidWlsZCB0b29scy5cbiAgICpcbiAgICogPHByZT5vbkV4aXQ6IGZ1bmN0aW9uKE15U2VydmljZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAqICAgICBNeVNlcnZpY2UuY2xlYW51cCgkc3RhdGVQYXJhbXMubXlQYXJhbSk7XG4gICAqIH08L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gW3N0YXRlQ29uZmlnLnJlbG9hZE9uU2VhcmNoPXRydWVdXG4gICAqIDxhIGlkPSdyZWxvYWRPblNlYXJjaCc+PC9hPlxuICAgKlxuICAgKiBJZiBgZmFsc2VgLCB3aWxsIG5vdCByZXRyaWdnZXIgdGhlIHNhbWUgc3RhdGVcbiAgICogICBqdXN0IGJlY2F1c2UgYSBzZWFyY2gvcXVlcnkgcGFyYW1ldGVyIGhhcyBjaGFuZ2VkICh2aWEgJGxvY2F0aW9uLnNlYXJjaCgpIG9yICRsb2NhdGlvbi5oYXNoKCkpLiBcbiAgICogICBVc2VmdWwgZm9yIHdoZW4geW91J2QgbGlrZSB0byBtb2RpZnkgJGxvY2F0aW9uLnNlYXJjaCgpIHdpdGhvdXQgdHJpZ2dlcmluZyBhIHJlbG9hZC5cbiAgICogPHByZT5yZWxvYWRPblNlYXJjaDogZmFsc2U8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZUNvbmZpZy5kYXRhXG4gICAqIDxhIGlkPSdkYXRhJz48L2E+XG4gICAqXG4gICAqIEFyYml0cmFyeSBkYXRhIG9iamVjdCwgdXNlZnVsIGZvciBjdXN0b20gY29uZmlndXJhdGlvbi4gIFRoZSBwYXJlbnQgc3RhdGUncyBgZGF0YWAgaXNcbiAgICogICBwcm90b3R5cGFsbHkgaW5oZXJpdGVkLiAgSW4gb3RoZXIgd29yZHMsIGFkZGluZyBhIGRhdGEgcHJvcGVydHkgdG8gYSBzdGF0ZSBhZGRzIGl0IHRvXG4gICAqICAgdGhlIGVudGlyZSBzdWJ0cmVlIHZpYSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLlxuICAgKlxuICAgKiA8cHJlPmRhdGE6IHtcbiAgICogICAgIHJlcXVpcmVkUm9sZTogJ2ZvbydcbiAgICogfSA8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZUNvbmZpZy5wYXJhbXNcbiAgICogPGEgaWQ9J3BhcmFtcyc+PC9hPlxuICAgKlxuICAgKiBBIG1hcCB3aGljaCBvcHRpb25hbGx5IGNvbmZpZ3VyZXMgcGFyYW1ldGVycyBkZWNsYXJlZCBpbiB0aGUgYHVybGAsIG9yXG4gICAqICAgZGVmaW5lcyBhZGRpdGlvbmFsIG5vbi11cmwgcGFyYW1ldGVycy4gIEZvciBlYWNoIHBhcmFtZXRlciBiZWluZ1xuICAgKiAgIGNvbmZpZ3VyZWQsIGFkZCBhIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGtleWVkIHRvIHRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqICAgRWFjaCBwYXJhbWV0ZXIgY29uZmlndXJhdGlvbiBvYmplY3QgbWF5IGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gKiogdmFsdWUgKiogLSB7b2JqZWN0fGZ1bmN0aW9uPX06IHNwZWNpZmllcyB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhpc1xuICAgKiAgICAgcGFyYW1ldGVyLiAgVGhpcyBpbXBsaWNpdGx5IHNldHMgdGhpcyBwYXJhbWV0ZXIgYXMgb3B0aW9uYWwuXG4gICAqXG4gICAqICAgICBXaGVuIFVJLVJvdXRlciByb3V0ZXMgdG8gYSBzdGF0ZSBhbmQgbm8gdmFsdWUgaXNcbiAgICogICAgIHNwZWNpZmllZCBmb3IgdGhpcyBwYXJhbWV0ZXIgaW4gdGhlIFVSTCBvciB0cmFuc2l0aW9uLCB0aGVcbiAgICogICAgIGRlZmF1bHQgdmFsdWUgd2lsbCBiZSB1c2VkIGluc3RlYWQuICBJZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sXG4gICAqICAgICBpdCB3aWxsIGJlIGluamVjdGVkIGFuZCBpbnZva2VkLCBhbmQgdGhlIHJldHVybiB2YWx1ZSB1c2VkLlxuICAgKlxuICAgKiAgICAgKk5vdGUqOiBgdW5kZWZpbmVkYCBpcyB0cmVhdGVkIGFzIFwibm8gZGVmYXVsdCB2YWx1ZVwiIHdoaWxlIGBudWxsYFxuICAgKiAgICAgaXMgdHJlYXRlZCBhcyBcInRoZSBkZWZhdWx0IHZhbHVlIGlzIGBudWxsYFwiLlxuICAgKlxuICAgKiAgICAgKlNob3J0aGFuZCo6IElmIHlvdSBvbmx5IG5lZWQgdG8gY29uZmlndXJlIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZVxuICAgKiAgICAgcGFyYW1ldGVyLCB5b3UgbWF5IHVzZSBhIHNob3J0aGFuZCBzeW50YXguICAgSW4gdGhlICoqYHBhcmFtc2AqKlxuICAgKiAgICAgbWFwLCBpbnN0ZWFkIG1hcHBpbmcgdGhlIHBhcmFtIG5hbWUgdG8gYSBmdWxsIHBhcmFtZXRlciBjb25maWd1cmF0aW9uXG4gICAqICAgICBvYmplY3QsIHNpbXBseSBzZXQgbWFwIGl0IHRvIHRoZSBkZWZhdWx0IHBhcmFtZXRlciB2YWx1ZSwgZS5nLjpcbiAgICpcbiAgICogPHByZT4vLyBkZWZpbmUgYSBwYXJhbWV0ZXIncyBkZWZhdWx0IHZhbHVlXG4gICAqIHBhcmFtczoge1xuICAgKiAgICAgcGFyYW0xOiB7IHZhbHVlOiBcImRlZmF1bHRWYWx1ZVwiIH1cbiAgICogfVxuICAgKiAvLyBzaG9ydGhhbmQgZGVmYXVsdCB2YWx1ZXNcbiAgICogcGFyYW1zOiB7XG4gICAqICAgICBwYXJhbTE6IFwiZGVmYXVsdFZhbHVlXCIsXG4gICAqICAgICBwYXJhbTI6IFwicGFyYW0yRGVmYXVsdFwiXG4gICAqIH08L3ByZT5cbiAgICpcbiAgICogICAtICoqIGFycmF5ICoqIC0ge2Jvb2xlYW49fTogKihkZWZhdWx0OiBmYWxzZSkqIElmIHRydWUsIHRoZSBwYXJhbSB2YWx1ZSB3aWxsIGJlXG4gICAqICAgICB0cmVhdGVkIGFzIGFuIGFycmF5IG9mIHZhbHVlcy4gIElmIHlvdSBzcGVjaWZpZWQgYSBUeXBlLCB0aGUgdmFsdWUgd2lsbCBiZVxuICAgKiAgICAgdHJlYXRlZCBhcyBhbiBhcnJheSBvZiB0aGUgc3BlY2lmaWVkIFR5cGUuICBOb3RlOiBxdWVyeSBwYXJhbWV0ZXIgdmFsdWVzXG4gICAqICAgICBkZWZhdWx0IHRvIGEgc3BlY2lhbCBgXCJhdXRvXCJgIG1vZGUuXG4gICAqXG4gICAqICAgICBGb3IgcXVlcnkgcGFyYW1ldGVycyBpbiBgXCJhdXRvXCJgIG1vZGUsIGlmIG11bHRpcGxlICB2YWx1ZXMgZm9yIGEgc2luZ2xlIHBhcmFtZXRlclxuICAgKiAgICAgYXJlIHByZXNlbnQgaW4gdGhlIFVSTCAoZS5nLjogYC9mb28/YmFyPTEmYmFyPTImYmFyPTNgKSB0aGVuIHRoZSB2YWx1ZXNcbiAgICogICAgIGFyZSBtYXBwZWQgdG8gYW4gYXJyYXkgKGUuZy46IGB7IGZvbzogWyAnMScsICcyJywgJzMnIF0gfWApLiAgSG93ZXZlciwgaWZcbiAgICogICAgIG9ubHkgb25lIHZhbHVlIGlzIHByZXNlbnQgKGUuZy46IGAvZm9vP2Jhcj0xYCkgdGhlbiB0aGUgdmFsdWUgaXMgdHJlYXRlZCBhcyBzaW5nbGVcbiAgICogICAgIHZhbHVlIChlLmcuOiBgeyBmb286ICcxJyB9YCkuXG4gICAqXG4gICAqIDxwcmU+cGFyYW1zOiB7XG4gICAqICAgICBwYXJhbTE6IHsgYXJyYXk6IHRydWUgfVxuICAgKiB9PC9wcmU+XG4gICAqXG4gICAqICAgLSAqKiBzcXVhc2ggKiogLSB7Ym9vbHxzdHJpbmc9fTogYHNxdWFzaGAgY29uZmlndXJlcyBob3cgYSBkZWZhdWx0IHBhcmFtZXRlciB2YWx1ZSBpcyByZXByZXNlbnRlZCBpbiB0aGUgVVJMIHdoZW5cbiAgICogICAgIHRoZSBjdXJyZW50IHBhcmFtZXRlciB2YWx1ZSBpcyB0aGUgc2FtZSBhcyB0aGUgZGVmYXVsdCB2YWx1ZS4gSWYgYHNxdWFzaGAgaXMgbm90IHNldCwgaXQgdXNlcyB0aGVcbiAgICogICAgIGNvbmZpZ3VyZWQgZGVmYXVsdCBzcXVhc2ggcG9saWN5LlxuICAgKiAgICAgKFNlZSB7QGxpbmsgdWkucm91dGVyLnV0aWwuJHVybE1hdGNoZXJGYWN0b3J5I21ldGhvZHNfZGVmYXVsdFNxdWFzaFBvbGljeSBgZGVmYXVsdFNxdWFzaFBvbGljeSgpYH0pXG4gICAqXG4gICAqICAgVGhlcmUgYXJlIHRocmVlIHNxdWFzaCBzZXR0aW5nczpcbiAgICpcbiAgICogICAgIC0gZmFsc2U6IFRoZSBwYXJhbWV0ZXIncyBkZWZhdWx0IHZhbHVlIGlzIG5vdCBzcXVhc2hlZC4gIEl0IGlzIGVuY29kZWQgYW5kIGluY2x1ZGVkIGluIHRoZSBVUkxcbiAgICogICAgIC0gdHJ1ZTogVGhlIHBhcmFtZXRlcidzIGRlZmF1bHQgdmFsdWUgaXMgb21pdHRlZCBmcm9tIHRoZSBVUkwuICBJZiB0aGUgcGFyYW1ldGVyIGlzIHByZWNlZWRlZCBhbmQgZm9sbG93ZWRcbiAgICogICAgICAgYnkgc2xhc2hlcyBpbiB0aGUgc3RhdGUncyBgdXJsYCBkZWNsYXJhdGlvbiwgdGhlbiBvbmUgb2YgdGhvc2Ugc2xhc2hlcyBhcmUgb21pdHRlZC5cbiAgICogICAgICAgVGhpcyBjYW4gYWxsb3cgZm9yIGNsZWFuZXIgbG9va2luZyBVUkxzLlxuICAgKiAgICAgLSBgXCI8YXJiaXRyYXJ5IHN0cmluZz5cImA6IFRoZSBwYXJhbWV0ZXIncyBkZWZhdWx0IHZhbHVlIGlzIHJlcGxhY2VkIHdpdGggYW4gYXJiaXRyYXJ5IHBsYWNlaG9sZGVyIG9mICB5b3VyIGNob2ljZS5cbiAgICpcbiAgICogPHByZT5wYXJhbXM6IHtcbiAgICogICAgIHBhcmFtMToge1xuICAgKiAgICAgICB2YWx1ZTogXCJkZWZhdWx0SWRcIixcbiAgICogICAgICAgc3F1YXNoOiB0cnVlXG4gICAqIH0gfVxuICAgKiAvLyBzcXVhc2ggXCJkZWZhdWx0VmFsdWVcIiB0byBcIn5cIlxuICAgKiBwYXJhbXM6IHtcbiAgICogICAgIHBhcmFtMToge1xuICAgKiAgICAgICB2YWx1ZTogXCJkZWZhdWx0VmFsdWVcIixcbiAgICogICAgICAgc3F1YXNoOiBcIn5cIlxuICAgKiB9IH1cbiAgICogPC9wcmU+XG4gICAqXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxwcmU+XG4gICAqIC8vIFNvbWUgc3RhdGUgbmFtZSBleGFtcGxlc1xuICAgKlxuICAgKiAvLyBzdGF0ZU5hbWUgY2FuIGJlIGEgc2luZ2xlIHRvcC1sZXZlbCBuYW1lIChtdXN0IGJlIHVuaXF1ZSkuXG4gICAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLCB7fSk7XG4gICAqXG4gICAqIC8vIE9yIGl0IGNhbiBiZSBhIG5lc3RlZCBzdGF0ZSBuYW1lLiBUaGlzIHN0YXRlIGlzIGEgY2hpbGQgb2YgdGhlXG4gICAqIC8vIGFib3ZlIFwiaG9tZVwiIHN0YXRlLlxuICAgKiAkc3RhdGVQcm92aWRlci5zdGF0ZShcImhvbWUubmV3ZXN0XCIsIHt9KTtcbiAgICpcbiAgICogLy8gTmVzdCBzdGF0ZXMgYXMgZGVlcGx5IGFzIG5lZWRlZC5cbiAgICogJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJob21lLm5ld2VzdC5hYmMueHl6LmluY2VwdGlvblwiLCB7fSk7XG4gICAqXG4gICAqIC8vIHN0YXRlKCkgcmV0dXJucyAkc3RhdGVQcm92aWRlciwgc28geW91IGNhbiBjaGFpbiBzdGF0ZSBkZWNsYXJhdGlvbnMuXG4gICAqICRzdGF0ZVByb3ZpZGVyXG4gICAqICAgLnN0YXRlKFwiaG9tZVwiLCB7fSlcbiAgICogICAuc3RhdGUoXCJhYm91dFwiLCB7fSlcbiAgICogICAuc3RhdGUoXCJjb250YWN0c1wiLCB7fSk7XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKi9cbiAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICBmdW5jdGlvbiBzdGF0ZShuYW1lLCBkZWZpbml0aW9uKSB7XG4gICAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgaWYgKGlzT2JqZWN0KG5hbWUpKSBkZWZpbml0aW9uID0gbmFtZTtcbiAgICBlbHNlIGRlZmluaXRpb24ubmFtZSA9IG5hbWU7XG4gICAgcmVnaXN0ZXJTdGF0ZShkZWZpbml0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2Mgb2JqZWN0XG4gICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICpcbiAgICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAgICogQHJlcXVpcmVzICRxXG4gICAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHZpZXdcbiAgICogQHJlcXVpcmVzICRpbmplY3RvclxuICAgKiBAcmVxdWlyZXMgdWkucm91dGVyLnV0aWwuJHJlc29sdmVcbiAgICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVQYXJhbXNcbiAgICogQHJlcXVpcmVzIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclxuICAgKlxuICAgKiBAcHJvcGVydHkge29iamVjdH0gcGFyYW1zIEEgcGFyYW0gb2JqZWN0LCBlLmcuIHtzZWN0aW9uSWQ6IHNlY3Rpb24uaWQpfSwgdGhhdCBcbiAgICogeW91J2QgbGlrZSB0byB0ZXN0IGFnYWluc3QgdGhlIGN1cnJlbnQgYWN0aXZlIHN0YXRlLlxuICAgKiBAcHJvcGVydHkge29iamVjdH0gY3VycmVudCBBIHJlZmVyZW5jZSB0byB0aGUgc3RhdGUncyBjb25maWcgb2JqZWN0LiBIb3dldmVyIFxuICAgKiB5b3UgcGFzc2VkIGl0IGluLiBVc2VmdWwgZm9yIGFjY2Vzc2luZyBjdXN0b20gZGF0YS5cbiAgICogQHByb3BlcnR5IHtvYmplY3R9IHRyYW5zaXRpb24gQ3VycmVudGx5IHBlbmRpbmcgdHJhbnNpdGlvbi4gQSBwcm9taXNlIHRoYXQnbGwgXG4gICAqIHJlc29sdmUgb3IgcmVqZWN0LlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogYCRzdGF0ZWAgc2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgcmVwcmVzZW50aW5nIHN0YXRlcyBhcyB3ZWxsIGFzIHRyYW5zaXRpb25pbmdcbiAgICogYmV0d2VlbiB0aGVtLiBJdCBhbHNvIHByb3ZpZGVzIGludGVyZmFjZXMgdG8gYXNrIGZvciBjdXJyZW50IHN0YXRlIG9yIGV2ZW4gc3RhdGVzXG4gICAqIHlvdSdyZSBjb21pbmcgZnJvbS5cbiAgICovXG4gIHRoaXMuJGdldCA9ICRnZXQ7XG4gICRnZXQuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICckcScsICckdmlldycsICckaW5qZWN0b3InLCAnJHJlc29sdmUnLCAnJHN0YXRlUGFyYW1zJywgJyR1cmxSb3V0ZXInLCAnJGxvY2F0aW9uJywgJyR1cmxNYXRjaGVyRmFjdG9yeSddO1xuICBmdW5jdGlvbiAkZ2V0KCAgICRyb290U2NvcGUsICAgJHEsICAgJHZpZXcsICAgJGluamVjdG9yLCAgICRyZXNvbHZlLCAgICRzdGF0ZVBhcmFtcywgICAkdXJsUm91dGVyLCAgICRsb2NhdGlvbiwgICAkdXJsTWF0Y2hlckZhY3RvcnkpIHtcblxuICAgIHZhciBUcmFuc2l0aW9uU3VwZXJzZWRlZCA9ICRxLnJlamVjdChuZXcgRXJyb3IoJ3RyYW5zaXRpb24gc3VwZXJzZWRlZCcpKTtcbiAgICB2YXIgVHJhbnNpdGlvblByZXZlbnRlZCA9ICRxLnJlamVjdChuZXcgRXJyb3IoJ3RyYW5zaXRpb24gcHJldmVudGVkJykpO1xuICAgIHZhciBUcmFuc2l0aW9uQWJvcnRlZCA9ICRxLnJlamVjdChuZXcgRXJyb3IoJ3RyYW5zaXRpb24gYWJvcnRlZCcpKTtcbiAgICB2YXIgVHJhbnNpdGlvbkZhaWxlZCA9ICRxLnJlamVjdChuZXcgRXJyb3IoJ3RyYW5zaXRpb24gZmFpbGVkJykpO1xuXG4gICAgLy8gSGFuZGxlcyB0aGUgY2FzZSB3aGVyZSBhIHN0YXRlIHdoaWNoIGlzIHRoZSB0YXJnZXQgb2YgYSB0cmFuc2l0aW9uIGlzIG5vdCBmb3VuZCwgYW5kIHRoZSB1c2VyXG4gICAgLy8gY2FuIG9wdGlvbmFsbHkgcmV0cnkgb3IgZGVmZXIgdGhlIHRyYW5zaXRpb25cbiAgICBmdW5jdGlvbiBoYW5kbGVSZWRpcmVjdChyZWRpcmVjdCwgc3RhdGUsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjJHN0YXRlTm90Rm91bmRcbiAgICAgICAqIEBldmVudE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogRmlyZWQgd2hlbiBhIHJlcXVlc3RlZCBzdGF0ZSAqKmNhbm5vdCBiZSBmb3VuZCoqIHVzaW5nIHRoZSBwcm92aWRlZCBzdGF0ZSBuYW1lIGR1cmluZyB0cmFuc2l0aW9uLlxuICAgICAgICogVGhlIGV2ZW50IGlzIGJyb2FkY2FzdCBhbGxvd2luZyBhbnkgaGFuZGxlcnMgYSBzaW5nbGUgY2hhbmNlIHRvIGRlYWwgd2l0aCB0aGUgZXJyb3IgKHVzdWFsbHkgYnlcbiAgICAgICAqIGxhenktbG9hZGluZyB0aGUgdW5mb3VuZCBzdGF0ZSkuIEEgc3BlY2lhbCBgdW5mb3VuZFN0YXRlYCBvYmplY3QgaXMgcGFzc2VkIHRvIHRoZSBsaXN0ZW5lciBoYW5kbGVyLFxuICAgICAgICogeW91IGNhbiBzZWUgaXRzIHRocmVlIHByb3BlcnRpZXMgaW4gdGhlIGV4YW1wbGUuIFlvdSBjYW4gdXNlIGBldmVudC5wcmV2ZW50RGVmYXVsdCgpYCB0byBhYm9ydCB0aGVcbiAgICAgICAqIHRyYW5zaXRpb24gYW5kIHRoZSBwcm9taXNlIHJldHVybmVkIGZyb20gYGdvYCB3aWxsIGJlIHJlamVjdGVkIHdpdGggYSBgJ3RyYW5zaXRpb24gYWJvcnRlZCdgIHZhbHVlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBFdmVudCBvYmplY3QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gdW5mb3VuZFN0YXRlIFVuZm91bmQgU3RhdGUgaW5mb3JtYXRpb24uIENvbnRhaW5zOiBgdG8sIHRvUGFyYW1zLCBvcHRpb25zYCBwcm9wZXJ0aWVzLlxuICAgICAgICogQHBhcmFtIHtTdGF0ZX0gZnJvbVN0YXRlIEN1cnJlbnQgc3RhdGUgb2JqZWN0LlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IGZyb21QYXJhbXMgQ3VycmVudCBzdGF0ZSBwYXJhbXMuXG4gICAgICAgKlxuICAgICAgICogQGV4YW1wbGVcbiAgICAgICAqXG4gICAgICAgKiA8cHJlPlxuICAgICAgICogLy8gc29tZXdoZXJlLCBhc3N1bWUgbGF6eS5zdGF0ZSBoYXMgbm90IGJlZW4gZGVmaW5lZFxuICAgICAgICogJHN0YXRlLmdvKFwibGF6eS5zdGF0ZVwiLCB7YToxLCBiOjJ9LCB7aW5oZXJpdDpmYWxzZX0pO1xuICAgICAgICpcbiAgICAgICAqIC8vIHNvbWV3aGVyZSBlbHNlXG4gICAgICAgKiAkc2NvcGUuJG9uKCckc3RhdGVOb3RGb3VuZCcsXG4gICAgICAgKiBmdW5jdGlvbihldmVudCwgdW5mb3VuZFN0YXRlLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpe1xuICAgICAgICogICAgIGNvbnNvbGUubG9nKHVuZm91bmRTdGF0ZS50byk7IC8vIFwibGF6eS5zdGF0ZVwiXG4gICAgICAgKiAgICAgY29uc29sZS5sb2codW5mb3VuZFN0YXRlLnRvUGFyYW1zKTsgLy8ge2E6MSwgYjoyfVxuICAgICAgICogICAgIGNvbnNvbGUubG9nKHVuZm91bmRTdGF0ZS5vcHRpb25zKTsgLy8ge2luaGVyaXQ6ZmFsc2V9ICsgZGVmYXVsdCBvcHRpb25zXG4gICAgICAgKiB9KVxuICAgICAgICogPC9wcmU+XG4gICAgICAgKi9cbiAgICAgIHZhciBldnQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRzdGF0ZU5vdEZvdW5kJywgcmVkaXJlY3QsIHN0YXRlLCBwYXJhbXMpO1xuXG4gICAgICBpZiAoZXZ0LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgJHVybFJvdXRlci51cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIFRyYW5zaXRpb25BYm9ydGVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2dC5yZXRyeSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gQWxsb3cgdGhlIGhhbmRsZXIgdG8gcmV0dXJuIGEgcHJvbWlzZSB0byBkZWZlciBzdGF0ZSBsb29rdXAgcmV0cnlcbiAgICAgIGlmIChvcHRpb25zLiRyZXRyeSkge1xuICAgICAgICAkdXJsUm91dGVyLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gVHJhbnNpdGlvbkZhaWxlZDtcbiAgICAgIH1cbiAgICAgIHZhciByZXRyeVRyYW5zaXRpb24gPSAkc3RhdGUudHJhbnNpdGlvbiA9ICRxLndoZW4oZXZ0LnJldHJ5KTtcblxuICAgICAgcmV0cnlUcmFuc2l0aW9uLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChyZXRyeVRyYW5zaXRpb24gIT09ICRzdGF0ZS50cmFuc2l0aW9uKSByZXR1cm4gVHJhbnNpdGlvblN1cGVyc2VkZWQ7XG4gICAgICAgIHJlZGlyZWN0Lm9wdGlvbnMuJHJldHJ5ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuICRzdGF0ZS50cmFuc2l0aW9uVG8ocmVkaXJlY3QudG8sIHJlZGlyZWN0LnRvUGFyYW1zLCByZWRpcmVjdC5vcHRpb25zKTtcbiAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVHJhbnNpdGlvbkFib3J0ZWQ7XG4gICAgICB9KTtcbiAgICAgICR1cmxSb3V0ZXIudXBkYXRlKCk7XG5cbiAgICAgIHJldHVybiByZXRyeVRyYW5zaXRpb247XG4gICAgfVxuXG4gICAgcm9vdC5sb2NhbHMgPSB7IHJlc29sdmU6IG51bGwsIGdsb2JhbHM6IHsgJHN0YXRlUGFyYW1zOiB7fSB9IH07XG5cbiAgICAkc3RhdGUgPSB7XG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgY3VycmVudDogcm9vdC5zZWxmLFxuICAgICAgJGN1cnJlbnQ6IHJvb3QsXG4gICAgICB0cmFuc2l0aW9uOiBudWxsXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjcmVsb2FkXG4gICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEEgbWV0aG9kIHRoYXQgZm9yY2UgcmVsb2FkcyB0aGUgY3VycmVudCBzdGF0ZS4gQWxsIHJlc29sdmVzIGFyZSByZS1yZXNvbHZlZCxcbiAgICAgKiBjb250cm9sbGVycyByZWluc3RhbnRpYXRlZCwgYW5kIGV2ZW50cyByZS1maXJlZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogPHByZT5cbiAgICAgKiB2YXIgYXBwIGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ3VpLnJvdXRlciddKTtcbiAgICAgKlxuICAgICAqIGFwcC5jb250cm9sbGVyKCdjdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJHN0YXRlKSB7XG4gICAgICogICAkc2NvcGUucmVsb2FkID0gZnVuY3Rpb24oKXtcbiAgICAgKiAgICAgJHN0YXRlLnJlbG9hZCgpO1xuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqIDwvcHJlPlxuICAgICAqXG4gICAgICogYHJlbG9hZCgpYCBpcyBqdXN0IGFuIGFsaWFzIGZvcjpcbiAgICAgKiA8cHJlPlxuICAgICAqICRzdGF0ZS50cmFuc2l0aW9uVG8oJHN0YXRlLmN1cnJlbnQsICRzdGF0ZVBhcmFtcywgeyBcbiAgICAgKiAgIHJlbG9hZDogdHJ1ZSwgaW5oZXJpdDogZmFsc2UsIG5vdGlmeTogdHJ1ZVxuICAgICAqIH0pO1xuICAgICAqIDwvcHJlPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fG9iamVjdD19IHN0YXRlIC0gQSBzdGF0ZSBuYW1lIG9yIGEgc3RhdGUgb2JqZWN0LCB3aGljaCBpcyB0aGUgcm9vdCBvZiB0aGUgcmVzb2x2ZXMgdG8gYmUgcmUtcmVzb2x2ZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiA8cHJlPlxuICAgICAqIC8vYXNzdW1pbmcgYXBwIGFwcGxpY2F0aW9uIGNvbnNpc3RzIG9mIDMgc3RhdGVzOiAnY29udGFjdHMnLCAnY29udGFjdHMuZGV0YWlsJywgJ2NvbnRhY3RzLmRldGFpbC5pdGVtJyBcbiAgICAgKiAvL2FuZCBjdXJyZW50IHN0YXRlIGlzICdjb250YWN0cy5kZXRhaWwuaXRlbSdcbiAgICAgKiB2YXIgYXBwIGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ3VpLnJvdXRlciddKTtcbiAgICAgKlxuICAgICAqIGFwcC5jb250cm9sbGVyKCdjdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJHN0YXRlKSB7XG4gICAgICogICAkc2NvcGUucmVsb2FkID0gZnVuY3Rpb24oKXtcbiAgICAgKiAgICAgLy93aWxsIHJlbG9hZCAnY29udGFjdC5kZXRhaWwnIGFuZCAnY29udGFjdC5kZXRhaWwuaXRlbScgc3RhdGVzXG4gICAgICogICAgICRzdGF0ZS5yZWxvYWQoJ2NvbnRhY3QuZGV0YWlsJyk7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBgcmVsb2FkKClgIGlzIGp1c3QgYW4gYWxpYXMgZm9yOlxuICAgICAqIDxwcmU+XG4gICAgICogJHN0YXRlLnRyYW5zaXRpb25Ubygkc3RhdGUuY3VycmVudCwgJHN0YXRlUGFyYW1zLCB7IFxuICAgICAqICAgcmVsb2FkOiB0cnVlLCBpbmhlcml0OiBmYWxzZSwgbm90aWZ5OiB0cnVlXG4gICAgICogfSk7XG4gICAgICogPC9wcmU+XG5cbiAgICAgKiBAcmV0dXJucyB7cHJvbWlzZX0gQSBwcm9taXNlIHJlcHJlc2VudGluZyB0aGUgc3RhdGUgb2YgdGhlIG5ldyB0cmFuc2l0aW9uLiBTZWVcbiAgICAgKiB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNtZXRob2RzX2dvICRzdGF0ZS5nb30uXG4gICAgICovXG4gICAgJHN0YXRlLnJlbG9hZCA9IGZ1bmN0aW9uIHJlbG9hZChzdGF0ZSkge1xuICAgICAgcmV0dXJuICRzdGF0ZS50cmFuc2l0aW9uVG8oJHN0YXRlLmN1cnJlbnQsICRzdGF0ZVBhcmFtcywgeyByZWxvYWQ6IHN0YXRlIHx8IHRydWUsIGluaGVyaXQ6IGZhbHNlLCBub3RpZnk6IHRydWV9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNnb1xuICAgICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIHRyYW5zaXRpb25pbmcgdG8gYSBuZXcgc3RhdGUuIGAkc3RhdGUuZ29gIGNhbGxzIFxuICAgICAqIGAkc3RhdGUudHJhbnNpdGlvblRvYCBpbnRlcm5hbGx5IGJ1dCBhdXRvbWF0aWNhbGx5IHNldHMgb3B0aW9ucyB0byBcbiAgICAgKiBgeyBsb2NhdGlvbjogdHJ1ZSwgaW5oZXJpdDogdHJ1ZSwgcmVsYXRpdmU6ICRzdGF0ZS4kY3VycmVudCwgbm90aWZ5OiB0cnVlIH1gLiBcbiAgICAgKiBUaGlzIGFsbG93cyB5b3UgdG8gZWFzaWx5IHVzZSBhbiBhYnNvbHV0ZSBvciByZWxhdGl2ZSB0byBwYXRoIGFuZCBzcGVjaWZ5IFxuICAgICAqIG9ubHkgdGhlIHBhcmFtZXRlcnMgeW91J2QgbGlrZSB0byB1cGRhdGUgKHdoaWxlIGxldHRpbmcgdW5zcGVjaWZpZWQgcGFyYW1ldGVycyBcbiAgICAgKiBpbmhlcml0IGZyb20gdGhlIGN1cnJlbnRseSBhY3RpdmUgYW5jZXN0b3Igc3RhdGVzKS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogPHByZT5cbiAgICAgKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyJ10pO1xuICAgICAqXG4gICAgICogYXBwLmNvbnRyb2xsZXIoJ2N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkc3RhdGUpIHtcbiAgICAgKiAgICRzY29wZS5jaGFuZ2VTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgKiAgICAgJHN0YXRlLmdvKCdjb250YWN0LmRldGFpbCcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKiA8L3ByZT5cbiAgICAgKiA8aW1nIHNyYz0nLi4vbmdkb2NfYXNzZXRzL1N0YXRlR29FeGFtcGxlcy5wbmcnLz5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0byBBYnNvbHV0ZSBzdGF0ZSBuYW1lIG9yIHJlbGF0aXZlIHN0YXRlIHBhdGguIFNvbWUgZXhhbXBsZXM6XG4gICAgICpcbiAgICAgKiAtIGAkc3RhdGUuZ28oJ2NvbnRhY3QuZGV0YWlsJylgIC0gd2lsbCBnbyB0byB0aGUgYGNvbnRhY3QuZGV0YWlsYCBzdGF0ZVxuICAgICAqIC0gYCRzdGF0ZS5nbygnXicpYCAtIHdpbGwgZ28gdG8gYSBwYXJlbnQgc3RhdGVcbiAgICAgKiAtIGAkc3RhdGUuZ28oJ14uc2libGluZycpYCAtIHdpbGwgZ28gdG8gYSBzaWJsaW5nIHN0YXRlXG4gICAgICogLSBgJHN0YXRlLmdvKCcuY2hpbGQuZ3JhbmRjaGlsZCcpYCAtIHdpbGwgZ28gdG8gZ3JhbmRjaGlsZCBzdGF0ZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBwYXJhbXMgQSBtYXAgb2YgdGhlIHBhcmFtZXRlcnMgdGhhdCB3aWxsIGJlIHNlbnQgdG8gdGhlIHN0YXRlLCBcbiAgICAgKiB3aWxsIHBvcHVsYXRlICRzdGF0ZVBhcmFtcy4gQW55IHBhcmFtZXRlcnMgdGhhdCBhcmUgbm90IHNwZWNpZmllZCB3aWxsIGJlIGluaGVyaXRlZCBmcm9tIGN1cnJlbnRseSBcbiAgICAgKiBkZWZpbmVkIHBhcmFtZXRlcnMuIFRoaXMgYWxsb3dzLCBmb3IgZXhhbXBsZSwgZ29pbmcgdG8gYSBzaWJsaW5nIHN0YXRlIHRoYXQgc2hhcmVzIHBhcmFtZXRlcnNcbiAgICAgKiBzcGVjaWZpZWQgaW4gYSBwYXJlbnQgc3RhdGUuIFBhcmFtZXRlciBpbmhlcml0YW5jZSBvbmx5IHdvcmtzIGJldHdlZW4gY29tbW9uIGFuY2VzdG9yIHN0YXRlcywgSS5lLlxuICAgICAqIHRyYW5zaXRpb25pbmcgdG8gYSBzaWJsaW5nIHdpbGwgZ2V0IHlvdSB0aGUgcGFyYW1ldGVycyBmb3IgYWxsIHBhcmVudHMsIHRyYW5zaXRpb25pbmcgdG8gYSBjaGlsZFxuICAgICAqIHdpbGwgZ2V0IHlvdSBhbGwgY3VycmVudCBwYXJhbWV0ZXJzLCBldGMuXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LiBUaGUgb3B0aW9ucyBhcmU6XG4gICAgICpcbiAgICAgKiAtICoqYGxvY2F0aW9uYCoqIC0ge2Jvb2xlYW49dHJ1ZXxzdHJpbmc9fSAtIElmIGB0cnVlYCB3aWxsIHVwZGF0ZSB0aGUgdXJsIGluIHRoZSBsb2NhdGlvbiBiYXIsIGlmIGBmYWxzZWBcbiAgICAgKiAgICB3aWxsIG5vdC4gSWYgc3RyaW5nLCBtdXN0IGJlIGBcInJlcGxhY2VcImAsIHdoaWNoIHdpbGwgdXBkYXRlIHVybCBhbmQgYWxzbyByZXBsYWNlIGxhc3QgaGlzdG9yeSByZWNvcmQuXG4gICAgICogLSAqKmBpbmhlcml0YCoqIC0ge2Jvb2xlYW49dHJ1ZX0sIElmIGB0cnVlYCB3aWxsIGluaGVyaXQgdXJsIHBhcmFtZXRlcnMgZnJvbSBjdXJyZW50IHVybC5cbiAgICAgKiAtICoqYHJlbGF0aXZlYCoqIC0ge29iamVjdD0kc3RhdGUuJGN1cnJlbnR9LCBXaGVuIHRyYW5zaXRpb25pbmcgd2l0aCByZWxhdGl2ZSBwYXRoIChlLmcgJ14nKSwgXG4gICAgICogICAgZGVmaW5lcyB3aGljaCBzdGF0ZSB0byBiZSByZWxhdGl2ZSBmcm9tLlxuICAgICAqIC0gKipgbm90aWZ5YCoqIC0ge2Jvb2xlYW49dHJ1ZX0sIElmIGB0cnVlYCB3aWxsIGJyb2FkY2FzdCAkc3RhdGVDaGFuZ2VTdGFydCBhbmQgJHN0YXRlQ2hhbmdlU3VjY2VzcyBldmVudHMuXG4gICAgICogLSAqKmByZWxvYWRgKiogKHYwLjIuNSkgLSB7Ym9vbGVhbj1mYWxzZX0sIElmIGB0cnVlYCB3aWxsIGZvcmNlIHRyYW5zaXRpb24gZXZlbiBpZiB0aGUgc3RhdGUgb3IgcGFyYW1zIFxuICAgICAqICAgIGhhdmUgbm90IGNoYW5nZWQsIGFrYSBhIHJlbG9hZCBvZiB0aGUgc2FtZSBzdGF0ZS4gSXQgZGlmZmVycyBmcm9tIHJlbG9hZE9uU2VhcmNoIGJlY2F1c2UgeW91J2RcbiAgICAgKiAgICB1c2UgdGhpcyB3aGVuIHlvdSB3YW50IHRvIGZvcmNlIGEgcmVsb2FkIHdoZW4gKmV2ZXJ5dGhpbmcqIGlzIHRoZSBzYW1lLCBpbmNsdWRpbmcgc2VhcmNoIHBhcmFtcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2UgcmVwcmVzZW50aW5nIHRoZSBzdGF0ZSBvZiB0aGUgbmV3IHRyYW5zaXRpb24uXG4gICAgICpcbiAgICAgKiBQb3NzaWJsZSBzdWNjZXNzIHZhbHVlczpcbiAgICAgKlxuICAgICAqIC0gJHN0YXRlLmN1cnJlbnRcbiAgICAgKlxuICAgICAqIDxici8+UG9zc2libGUgcmVqZWN0aW9uIHZhbHVlczpcbiAgICAgKlxuICAgICAqIC0gJ3RyYW5zaXRpb24gc3VwZXJzZWRlZCcgLSB3aGVuIGEgbmV3ZXIgdHJhbnNpdGlvbiBoYXMgYmVlbiBzdGFydGVkIGFmdGVyIHRoaXMgb25lXG4gICAgICogLSAndHJhbnNpdGlvbiBwcmV2ZW50ZWQnIC0gd2hlbiBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgaGFzIGJlZW4gY2FsbGVkIGluIGEgYCRzdGF0ZUNoYW5nZVN0YXJ0YCBsaXN0ZW5lclxuICAgICAqIC0gJ3RyYW5zaXRpb24gYWJvcnRlZCcgLSB3aGVuIGBldmVudC5wcmV2ZW50RGVmYXVsdCgpYCBoYXMgYmVlbiBjYWxsZWQgaW4gYSBgJHN0YXRlTm90Rm91bmRgIGxpc3RlbmVyIG9yXG4gICAgICogICB3aGVuIGEgYCRzdGF0ZU5vdEZvdW5kYCBgZXZlbnQucmV0cnlgIHByb21pc2UgZXJyb3JzLlxuICAgICAqIC0gJ3RyYW5zaXRpb24gZmFpbGVkJyAtIHdoZW4gYSBzdGF0ZSBoYXMgYmVlbiB1bnN1Y2Nlc3NmdWxseSBmb3VuZCBhZnRlciAyIHRyaWVzLlxuICAgICAqIC0gKnJlc29sdmUgZXJyb3IqIC0gd2hlbiBhbiBlcnJvciBoYXMgb2NjdXJyZWQgd2l0aCBhIGByZXNvbHZlYFxuICAgICAqXG4gICAgICovXG4gICAgJHN0YXRlLmdvID0gZnVuY3Rpb24gZ28odG8sIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuICRzdGF0ZS50cmFuc2l0aW9uVG8odG8sIHBhcmFtcywgZXh0ZW5kKHsgaW5oZXJpdDogdHJ1ZSwgcmVsYXRpdmU6ICRzdGF0ZS4kY3VycmVudCB9LCBvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjdHJhbnNpdGlvblRvXG4gICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIExvdy1sZXZlbCBtZXRob2QgZm9yIHRyYW5zaXRpb25pbmcgdG8gYSBuZXcgc3RhdGUuIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfZ28gJHN0YXRlLmdvfVxuICAgICAqIHVzZXMgYHRyYW5zaXRpb25Ub2AgaW50ZXJuYWxseS4gYCRzdGF0ZS5nb2AgaXMgcmVjb21tZW5kZWQgaW4gbW9zdCBzaXR1YXRpb25zLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiA8cHJlPlxuICAgICAqIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXInXSk7XG4gICAgICpcbiAgICAgKiBhcHAuY29udHJvbGxlcignY3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZSkge1xuICAgICAqICAgJHNjb3BlLmNoYW5nZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAqICAgICAkc3RhdGUudHJhbnNpdGlvblRvKCdjb250YWN0LmRldGFpbCcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0byBTdGF0ZSBuYW1lLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gdG9QYXJhbXMgQSBtYXAgb2YgdGhlIHBhcmFtZXRlcnMgdGhhdCB3aWxsIGJlIHNlbnQgdG8gdGhlIHN0YXRlLFxuICAgICAqIHdpbGwgcG9wdWxhdGUgJHN0YXRlUGFyYW1zLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdC4gVGhlIG9wdGlvbnMgYXJlOlxuICAgICAqXG4gICAgICogLSAqKmBsb2NhdGlvbmAqKiAtIHtib29sZWFuPXRydWV8c3RyaW5nPX0gLSBJZiBgdHJ1ZWAgd2lsbCB1cGRhdGUgdGhlIHVybCBpbiB0aGUgbG9jYXRpb24gYmFyLCBpZiBgZmFsc2VgXG4gICAgICogICAgd2lsbCBub3QuIElmIHN0cmluZywgbXVzdCBiZSBgXCJyZXBsYWNlXCJgLCB3aGljaCB3aWxsIHVwZGF0ZSB1cmwgYW5kIGFsc28gcmVwbGFjZSBsYXN0IGhpc3RvcnkgcmVjb3JkLlxuICAgICAqIC0gKipgaW5oZXJpdGAqKiAtIHtib29sZWFuPWZhbHNlfSwgSWYgYHRydWVgIHdpbGwgaW5oZXJpdCB1cmwgcGFyYW1ldGVycyBmcm9tIGN1cnJlbnQgdXJsLlxuICAgICAqIC0gKipgcmVsYXRpdmVgKiogLSB7b2JqZWN0PX0sIFdoZW4gdHJhbnNpdGlvbmluZyB3aXRoIHJlbGF0aXZlIHBhdGggKGUuZyAnXicpLCBcbiAgICAgKiAgICBkZWZpbmVzIHdoaWNoIHN0YXRlIHRvIGJlIHJlbGF0aXZlIGZyb20uXG4gICAgICogLSAqKmBub3RpZnlgKiogLSB7Ym9vbGVhbj10cnVlfSwgSWYgYHRydWVgIHdpbGwgYnJvYWRjYXN0ICRzdGF0ZUNoYW5nZVN0YXJ0IGFuZCAkc3RhdGVDaGFuZ2VTdWNjZXNzIGV2ZW50cy5cbiAgICAgKiAtICoqYHJlbG9hZGAqKiAodjAuMi41KSAtIHtib29sZWFuPWZhbHNlfHN0cmluZz18b2JqZWN0PX0sIElmIGB0cnVlYCB3aWxsIGZvcmNlIHRyYW5zaXRpb24gZXZlbiBpZiB0aGUgc3RhdGUgb3IgcGFyYW1zIFxuICAgICAqICAgIGhhdmUgbm90IGNoYW5nZWQsIGFrYSBhIHJlbG9hZCBvZiB0aGUgc2FtZSBzdGF0ZS4gSXQgZGlmZmVycyBmcm9tIHJlbG9hZE9uU2VhcmNoIGJlY2F1c2UgeW91J2RcbiAgICAgKiAgICB1c2UgdGhpcyB3aGVuIHlvdSB3YW50IHRvIGZvcmNlIGEgcmVsb2FkIHdoZW4gKmV2ZXJ5dGhpbmcqIGlzIHRoZSBzYW1lLCBpbmNsdWRpbmcgc2VhcmNoIHBhcmFtcy5cbiAgICAgKiAgICBpZiBTdHJpbmcsIHRoZW4gd2lsbCByZWxvYWQgdGhlIHN0YXRlIHdpdGggdGhlIG5hbWUgZ2l2ZW4gaW4gcmVsb2FkLCBhbmQgYW55IGNoaWxkcmVuLlxuICAgICAqICAgIGlmIE9iamVjdCwgdGhlbiBhIHN0YXRlT2JqIGlzIGV4cGVjdGVkLCB3aWxsIHJlbG9hZCB0aGUgc3RhdGUgZm91bmQgaW4gc3RhdGVPYmosIGFuZCBhbnkgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7cHJvbWlzZX0gQSBwcm9taXNlIHJlcHJlc2VudGluZyB0aGUgc3RhdGUgb2YgdGhlIG5ldyB0cmFuc2l0aW9uLiBTZWVcbiAgICAgKiB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNtZXRob2RzX2dvICRzdGF0ZS5nb30uXG4gICAgICovXG4gICAgJHN0YXRlLnRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIHRyYW5zaXRpb25Ubyh0bywgdG9QYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIHRvUGFyYW1zID0gdG9QYXJhbXMgfHwge307XG4gICAgICBvcHRpb25zID0gZXh0ZW5kKHtcbiAgICAgICAgbG9jYXRpb246IHRydWUsIGluaGVyaXQ6IGZhbHNlLCByZWxhdGl2ZTogbnVsbCwgbm90aWZ5OiB0cnVlLCByZWxvYWQ6IGZhbHNlLCAkcmV0cnk6IGZhbHNlXG4gICAgICB9LCBvcHRpb25zIHx8IHt9KTtcblxuICAgICAgdmFyIGZyb20gPSAkc3RhdGUuJGN1cnJlbnQsIGZyb21QYXJhbXMgPSAkc3RhdGUucGFyYW1zLCBmcm9tUGF0aCA9IGZyb20ucGF0aDtcbiAgICAgIHZhciBldnQsIHRvU3RhdGUgPSBmaW5kU3RhdGUodG8sIG9wdGlvbnMucmVsYXRpdmUpO1xuXG4gICAgICAvLyBTdG9yZSB0aGUgaGFzaCBwYXJhbSBmb3IgbGF0ZXIgKHNpbmNlIGl0IHdpbGwgYmUgc3RyaXBwZWQgb3V0IGJ5IHZhcmlvdXMgbWV0aG9kcylcbiAgICAgIHZhciBoYXNoID0gdG9QYXJhbXNbJyMnXTtcblxuICAgICAgaWYgKCFpc0RlZmluZWQodG9TdGF0ZSkpIHtcbiAgICAgICAgdmFyIHJlZGlyZWN0ID0geyB0bzogdG8sIHRvUGFyYW1zOiB0b1BhcmFtcywgb3B0aW9uczogb3B0aW9ucyB9O1xuICAgICAgICB2YXIgcmVkaXJlY3RSZXN1bHQgPSBoYW5kbGVSZWRpcmVjdChyZWRpcmVjdCwgZnJvbS5zZWxmLCBmcm9tUGFyYW1zLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAocmVkaXJlY3RSZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVkaXJlY3RSZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBbHdheXMgcmV0cnkgb25jZSBpZiB0aGUgJHN0YXRlTm90Rm91bmQgd2FzIG5vdCBwcmV2ZW50ZWRcbiAgICAgICAgLy8gKGhhbmRsZXMgZWl0aGVyIHJlZGlyZWN0IGNoYW5nZWQgb3Igc3RhdGUgbGF6eS1kZWZpbml0aW9uKVxuICAgICAgICB0byA9IHJlZGlyZWN0LnRvO1xuICAgICAgICB0b1BhcmFtcyA9IHJlZGlyZWN0LnRvUGFyYW1zO1xuICAgICAgICBvcHRpb25zID0gcmVkaXJlY3Qub3B0aW9ucztcbiAgICAgICAgdG9TdGF0ZSA9IGZpbmRTdGF0ZSh0bywgb3B0aW9ucy5yZWxhdGl2ZSk7XG5cbiAgICAgICAgaWYgKCFpc0RlZmluZWQodG9TdGF0ZSkpIHtcbiAgICAgICAgICBpZiAoIW9wdGlvbnMucmVsYXRpdmUpIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggc3RhdGUgJ1wiICsgdG8gKyBcIidcIik7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHJlc29sdmUgJ1wiICsgdG8gKyBcIicgZnJvbSBzdGF0ZSAnXCIgKyBvcHRpb25zLnJlbGF0aXZlICsgXCInXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodG9TdGF0ZVthYnN0cmFjdEtleV0pIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB0cmFuc2l0aW9uIHRvIGFic3RyYWN0IHN0YXRlICdcIiArIHRvICsgXCInXCIpO1xuICAgICAgaWYgKG9wdGlvbnMuaW5oZXJpdCkgdG9QYXJhbXMgPSBpbmhlcml0UGFyYW1zKCRzdGF0ZVBhcmFtcywgdG9QYXJhbXMgfHwge30sICRzdGF0ZS4kY3VycmVudCwgdG9TdGF0ZSk7XG4gICAgICBpZiAoIXRvU3RhdGUucGFyYW1zLiQkdmFsaWRhdGVzKHRvUGFyYW1zKSkgcmV0dXJuIFRyYW5zaXRpb25GYWlsZWQ7XG5cbiAgICAgIHRvUGFyYW1zID0gdG9TdGF0ZS5wYXJhbXMuJCR2YWx1ZXModG9QYXJhbXMpO1xuICAgICAgdG8gPSB0b1N0YXRlO1xuXG4gICAgICB2YXIgdG9QYXRoID0gdG8ucGF0aDtcblxuICAgICAgLy8gU3RhcnRpbmcgZnJvbSB0aGUgcm9vdCBvZiB0aGUgcGF0aCwga2VlcCBhbGwgbGV2ZWxzIHRoYXQgaGF2ZW4ndCBjaGFuZ2VkXG4gICAgICB2YXIga2VlcCA9IDAsIHN0YXRlID0gdG9QYXRoW2tlZXBdLCBsb2NhbHMgPSByb290LmxvY2FscywgdG9Mb2NhbHMgPSBbXTtcblxuICAgICAgaWYgKCFvcHRpb25zLnJlbG9hZCkge1xuICAgICAgICB3aGlsZSAoc3RhdGUgJiYgc3RhdGUgPT09IGZyb21QYXRoW2tlZXBdICYmIHN0YXRlLm93blBhcmFtcy4kJGVxdWFscyh0b1BhcmFtcywgZnJvbVBhcmFtcykpIHtcbiAgICAgICAgICBsb2NhbHMgPSB0b0xvY2Fsc1trZWVwXSA9IHN0YXRlLmxvY2FscztcbiAgICAgICAgICBrZWVwKys7XG4gICAgICAgICAgc3RhdGUgPSB0b1BhdGhba2VlcF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcob3B0aW9ucy5yZWxvYWQpIHx8IGlzT2JqZWN0KG9wdGlvbnMucmVsb2FkKSkge1xuICAgICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucy5yZWxvYWQpICYmICFvcHRpb25zLnJlbG9hZC5uYW1lKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlbG9hZCBzdGF0ZSBvYmplY3QnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHJlbG9hZFN0YXRlID0gb3B0aW9ucy5yZWxvYWQgPT09IHRydWUgPyBmcm9tUGF0aFswXSA6IGZpbmRTdGF0ZShvcHRpb25zLnJlbG9hZCk7XG4gICAgICAgIGlmIChvcHRpb25zLnJlbG9hZCAmJiAhcmVsb2FkU3RhdGUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIHJlbG9hZCBzdGF0ZSAnXCIgKyAoaXNTdHJpbmcob3B0aW9ucy5yZWxvYWQpID8gb3B0aW9ucy5yZWxvYWQgOiBvcHRpb25zLnJlbG9hZC5uYW1lKSArIFwiJ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChzdGF0ZSAmJiBzdGF0ZSA9PT0gZnJvbVBhdGhba2VlcF0gJiYgc3RhdGUgIT09IHJlbG9hZFN0YXRlKSB7XG4gICAgICAgICAgbG9jYWxzID0gdG9Mb2NhbHNba2VlcF0gPSBzdGF0ZS5sb2NhbHM7XG4gICAgICAgICAga2VlcCsrO1xuICAgICAgICAgIHN0YXRlID0gdG9QYXRoW2tlZXBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlJ3JlIGdvaW5nIHRvIHRoZSBzYW1lIHN0YXRlIGFuZCBhbGwgbG9jYWxzIGFyZSBrZXB0LCB3ZSd2ZSBnb3Qgbm90aGluZyB0byBkby5cbiAgICAgIC8vIEJ1dCBjbGVhciAndHJhbnNpdGlvbicsIGFzIHdlIHN0aWxsIHdhbnQgdG8gY2FuY2VsIGFueSBvdGhlciBwZW5kaW5nIHRyYW5zaXRpb25zLlxuICAgICAgLy8gVE9ETzogV2UgbWF5IG5vdCB3YW50IHRvIGJ1bXAgJ3RyYW5zaXRpb24nIGlmIHdlJ3JlIGNhbGxlZCBmcm9tIGEgbG9jYXRpb24gY2hhbmdlXG4gICAgICAvLyB0aGF0IHdlJ3ZlIGluaXRpYXRlZCBvdXJzZWx2ZXMsIGJlY2F1c2Ugd2UgbWlnaHQgYWNjaWRlbnRhbGx5IGFib3J0IGEgbGVnaXRpbWF0ZVxuICAgICAgLy8gdHJhbnNpdGlvbiBpbml0aWF0ZWQgZnJvbSBjb2RlP1xuICAgICAgaWYgKHNob3VsZFNraXBSZWxvYWQodG8sIHRvUGFyYW1zLCBmcm9tLCBmcm9tUGFyYW1zLCBsb2NhbHMsIG9wdGlvbnMpKSB7XG4gICAgICAgIGlmIChoYXNoKSB0b1BhcmFtc1snIyddID0gaGFzaDtcbiAgICAgICAgJHN0YXRlLnBhcmFtcyA9IHRvUGFyYW1zO1xuICAgICAgICBjb3B5KCRzdGF0ZS5wYXJhbXMsICRzdGF0ZVBhcmFtcyk7XG4gICAgICAgIGlmIChvcHRpb25zLmxvY2F0aW9uICYmIHRvLm5hdmlnYWJsZSAmJiB0by5uYXZpZ2FibGUudXJsKSB7XG4gICAgICAgICAgJHVybFJvdXRlci5wdXNoKHRvLm5hdmlnYWJsZS51cmwsIHRvUGFyYW1zLCB7XG4gICAgICAgICAgICAkJGF2b2lkUmVzeW5jOiB0cnVlLCByZXBsYWNlOiBvcHRpb25zLmxvY2F0aW9uID09PSAncmVwbGFjZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAkdXJsUm91dGVyLnVwZGF0ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICAkc3RhdGUudHJhbnNpdGlvbiA9IG51bGw7XG4gICAgICAgIHJldHVybiAkcS53aGVuKCRzdGF0ZS5jdXJyZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gRmlsdGVyIHBhcmFtZXRlcnMgYmVmb3JlIHdlIHBhc3MgdGhlbSB0byBldmVudCBoYW5kbGVycyBldGMuXG4gICAgICB0b1BhcmFtcyA9IGZpbHRlckJ5S2V5cyh0by5wYXJhbXMuJCRrZXlzKCksIHRvUGFyYW1zIHx8IHt9KTtcblxuICAgICAgLy8gQnJvYWRjYXN0IHN0YXJ0IGV2ZW50IGFuZCBjYW5jZWwgdGhlIHRyYW5zaXRpb24gaWYgcmVxdWVzdGVkXG4gICAgICBpZiAob3B0aW9ucy5ub3RpZnkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlIyRzdGF0ZUNoYW5nZVN0YXJ0XG4gICAgICAgICAqIEBldmVudE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogRmlyZWQgd2hlbiB0aGUgc3RhdGUgdHJhbnNpdGlvbiAqKmJlZ2lucyoqLiBZb3UgY2FuIHVzZSBgZXZlbnQucHJldmVudERlZmF1bHQoKWBcbiAgICAgICAgICogdG8gcHJldmVudCB0aGUgdHJhbnNpdGlvbiBmcm9tIGhhcHBlbmluZyBhbmQgdGhlbiB0aGUgdHJhbnNpdGlvbiBwcm9taXNlIHdpbGwgYmVcbiAgICAgICAgICogcmVqZWN0ZWQgd2l0aCBhIGAndHJhbnNpdGlvbiBwcmV2ZW50ZWQnYCB2YWx1ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtTdGF0ZX0gdG9TdGF0ZSBUaGUgc3RhdGUgYmVpbmcgdHJhbnNpdGlvbmVkIHRvLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdG9QYXJhbXMgVGhlIHBhcmFtcyBzdXBwbGllZCB0byB0aGUgYHRvU3RhdGVgLlxuICAgICAgICAgKiBAcGFyYW0ge1N0YXRlfSBmcm9tU3RhdGUgVGhlIGN1cnJlbnQgc3RhdGUsIHByZS10cmFuc2l0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZnJvbVBhcmFtcyBUaGUgcGFyYW1zIHN1cHBsaWVkIHRvIHRoZSBgZnJvbVN0YXRlYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogPHByZT5cbiAgICAgICAgICogJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN0YXJ0JyxcbiAgICAgICAgICogZnVuY3Rpb24oZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpe1xuICAgICAgICAgKiAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICogICAgIC8vIHRyYW5zaXRpb25UbygpIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoXG4gICAgICAgICAqICAgICAvLyBhICd0cmFuc2l0aW9uIHByZXZlbnRlZCcgZXJyb3JcbiAgICAgICAgICogfSlcbiAgICAgICAgICogPC9wcmU+XG4gICAgICAgICAqL1xuICAgICAgICBpZiAoJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckc3RhdGVDaGFuZ2VTdGFydCcsIHRvLnNlbGYsIHRvUGFyYW1zLCBmcm9tLnNlbGYsIGZyb21QYXJhbXMpLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRzdGF0ZUNoYW5nZUNhbmNlbCcsIHRvLnNlbGYsIHRvUGFyYW1zLCBmcm9tLnNlbGYsIGZyb21QYXJhbXMpO1xuICAgICAgICAgICR1cmxSb3V0ZXIudXBkYXRlKCk7XG4gICAgICAgICAgcmV0dXJuIFRyYW5zaXRpb25QcmV2ZW50ZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVzb2x2ZSBsb2NhbHMgZm9yIHRoZSByZW1haW5pbmcgc3RhdGVzLCBidXQgZG9uJ3QgdXBkYXRlIGFueSBnbG9iYWwgc3RhdGUganVzdFxuICAgICAgLy8geWV0IC0tIGlmIGFueXRoaW5nIGZhaWxzIHRvIHJlc29sdmUgdGhlIGN1cnJlbnQgc3RhdGUgbmVlZHMgdG8gcmVtYWluIHVudG91Y2hlZC5cbiAgICAgIC8vIFdlIGFsc28gc2V0IHVwIGFuIGluaGVyaXRhbmNlIGNoYWluIGZvciB0aGUgbG9jYWxzIGhlcmUuIFRoaXMgYWxsb3dzIHRoZSB2aWV3IGRpcmVjdGl2ZVxuICAgICAgLy8gdG8gcXVpY2tseSBsb29rIHVwIHRoZSBjb3JyZWN0IGRlZmluaXRpb24gZm9yIGVhY2ggdmlldyBpbiB0aGUgY3VycmVudCBzdGF0ZS4gRXZlblxuICAgICAgLy8gdGhvdWdoIHdlIGNyZWF0ZSB0aGUgbG9jYWxzIG9iamVjdCBpdHNlbGYgb3V0c2lkZSByZXNvbHZlU3RhdGUoKSwgaXQgaXMgaW5pdGlhbGx5XG4gICAgICAvLyBlbXB0eSBhbmQgZ2V0cyBmaWxsZWQgYXN5bmNocm9ub3VzbHkuIFdlIG5lZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUgcHJvbWlzZSBmb3IgdGhlXG4gICAgICAvLyAoZnVsbHkgcmVzb2x2ZWQpIGN1cnJlbnQgbG9jYWxzLCBhbmQgcGFzcyB0aGlzIGRvd24gdGhlIGNoYWluLlxuICAgICAgdmFyIHJlc29sdmVkID0gJHEud2hlbihsb2NhbHMpO1xuXG4gICAgICBmb3IgKHZhciBsID0ga2VlcDsgbCA8IHRvUGF0aC5sZW5ndGg7IGwrKywgc3RhdGUgPSB0b1BhdGhbbF0pIHtcbiAgICAgICAgbG9jYWxzID0gdG9Mb2NhbHNbbF0gPSBpbmhlcml0KGxvY2Fscyk7XG4gICAgICAgIHJlc29sdmVkID0gcmVzb2x2ZVN0YXRlKHN0YXRlLCB0b1BhcmFtcywgc3RhdGUgPT09IHRvLCByZXNvbHZlZCwgbG9jYWxzLCBvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgLy8gT25jZSBldmVyeXRoaW5nIGlzIHJlc29sdmVkLCB3ZSBhcmUgcmVhZHkgdG8gcGVyZm9ybSB0aGUgYWN0dWFsIHRyYW5zaXRpb25cbiAgICAgIC8vIGFuZCByZXR1cm4gYSBwcm9taXNlIGZvciB0aGUgbmV3IHN0YXRlLiBXZSBhbHNvIGtlZXAgdHJhY2sgb2Ygd2hhdCB0aGVcbiAgICAgIC8vIGN1cnJlbnQgcHJvbWlzZSBpcywgc28gdGhhdCB3ZSBjYW4gZGV0ZWN0IG92ZXJsYXBwaW5nIHRyYW5zaXRpb25zIGFuZFxuICAgICAgLy8ga2VlcCBvbmx5IHRoZSBvdXRjb21lIG9mIHRoZSBsYXN0IHRyYW5zaXRpb24uXG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICRzdGF0ZS50cmFuc2l0aW9uID0gcmVzb2x2ZWQudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsLCBlbnRlcmluZywgZXhpdGluZztcblxuICAgICAgICBpZiAoJHN0YXRlLnRyYW5zaXRpb24gIT09IHRyYW5zaXRpb24pIHJldHVybiBUcmFuc2l0aW9uU3VwZXJzZWRlZDtcblxuICAgICAgICAvLyBFeGl0ICdmcm9tJyBzdGF0ZXMgbm90IGtlcHRcbiAgICAgICAgZm9yIChsID0gZnJvbVBhdGgubGVuZ3RoIC0gMTsgbCA+PSBrZWVwOyBsLS0pIHtcbiAgICAgICAgICBleGl0aW5nID0gZnJvbVBhdGhbbF07XG4gICAgICAgICAgaWYgKGV4aXRpbmcuc2VsZi5vbkV4aXQpIHtcbiAgICAgICAgICAgICRpbmplY3Rvci5pbnZva2UoZXhpdGluZy5zZWxmLm9uRXhpdCwgZXhpdGluZy5zZWxmLCBleGl0aW5nLmxvY2Fscy5nbG9iYWxzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXhpdGluZy5sb2NhbHMgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW50ZXIgJ3RvJyBzdGF0ZXMgbm90IGtlcHRcbiAgICAgICAgZm9yIChsID0ga2VlcDsgbCA8IHRvUGF0aC5sZW5ndGg7IGwrKykge1xuICAgICAgICAgIGVudGVyaW5nID0gdG9QYXRoW2xdO1xuICAgICAgICAgIGVudGVyaW5nLmxvY2FscyA9IHRvTG9jYWxzW2xdO1xuICAgICAgICAgIGlmIChlbnRlcmluZy5zZWxmLm9uRW50ZXIpIHtcbiAgICAgICAgICAgICRpbmplY3Rvci5pbnZva2UoZW50ZXJpbmcuc2VsZi5vbkVudGVyLCBlbnRlcmluZy5zZWxmLCBlbnRlcmluZy5sb2NhbHMuZ2xvYmFscyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmUtYWRkIHRoZSBzYXZlZCBoYXNoIGJlZm9yZSB3ZSBzdGFydCByZXR1cm5pbmcgdGhpbmdzXG4gICAgICAgIGlmIChoYXNoKSB0b1BhcmFtc1snIyddID0gaGFzaDtcblxuICAgICAgICAvLyBSdW4gaXQgYWdhaW4sIHRvIGNhdGNoIGFueSB0cmFuc2l0aW9ucyBpbiBjYWxsYmFja3NcbiAgICAgICAgaWYgKCRzdGF0ZS50cmFuc2l0aW9uICE9PSB0cmFuc2l0aW9uKSByZXR1cm4gVHJhbnNpdGlvblN1cGVyc2VkZWQ7XG5cbiAgICAgICAgLy8gVXBkYXRlIGdsb2JhbHMgaW4gJHN0YXRlXG4gICAgICAgICRzdGF0ZS4kY3VycmVudCA9IHRvO1xuICAgICAgICAkc3RhdGUuY3VycmVudCA9IHRvLnNlbGY7XG4gICAgICAgICRzdGF0ZS5wYXJhbXMgPSB0b1BhcmFtcztcbiAgICAgICAgY29weSgkc3RhdGUucGFyYW1zLCAkc3RhdGVQYXJhbXMpO1xuICAgICAgICAkc3RhdGUudHJhbnNpdGlvbiA9IG51bGw7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubG9jYXRpb24gJiYgdG8ubmF2aWdhYmxlKSB7XG4gICAgICAgICAgJHVybFJvdXRlci5wdXNoKHRvLm5hdmlnYWJsZS51cmwsIHRvLm5hdmlnYWJsZS5sb2NhbHMuZ2xvYmFscy4kc3RhdGVQYXJhbXMsIHtcbiAgICAgICAgICAgICQkYXZvaWRSZXN5bmM6IHRydWUsIHJlcGxhY2U6IG9wdGlvbnMubG9jYXRpb24gPT09ICdyZXBsYWNlJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubm90aWZ5KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSMkc3RhdGVDaGFuZ2VTdWNjZXNzXG4gICAgICAgICAqIEBldmVudE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogRmlyZWQgb25jZSB0aGUgc3RhdGUgdHJhbnNpdGlvbiBpcyAqKmNvbXBsZXRlKiouXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBFdmVudCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7U3RhdGV9IHRvU3RhdGUgVGhlIHN0YXRlIGJlaW5nIHRyYW5zaXRpb25lZCB0by5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHRvUGFyYW1zIFRoZSBwYXJhbXMgc3VwcGxpZWQgdG8gdGhlIGB0b1N0YXRlYC5cbiAgICAgICAgICogQHBhcmFtIHtTdGF0ZX0gZnJvbVN0YXRlIFRoZSBjdXJyZW50IHN0YXRlLCBwcmUtdHJhbnNpdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGZyb21QYXJhbXMgVGhlIHBhcmFtcyBzdXBwbGllZCB0byB0aGUgYGZyb21TdGF0ZWAuXG4gICAgICAgICAqL1xuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJHN0YXRlQ2hhbmdlU3VjY2VzcycsIHRvLnNlbGYsIHRvUGFyYW1zLCBmcm9tLnNlbGYsIGZyb21QYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgICR1cmxSb3V0ZXIudXBkYXRlKHRydWUpO1xuXG4gICAgICAgIHJldHVybiAkc3RhdGUuY3VycmVudDtcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoJHN0YXRlLnRyYW5zaXRpb24gIT09IHRyYW5zaXRpb24pIHJldHVybiBUcmFuc2l0aW9uU3VwZXJzZWRlZDtcblxuICAgICAgICAkc3RhdGUudHJhbnNpdGlvbiA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSMkc3RhdGVDaGFuZ2VFcnJvclxuICAgICAgICAgKiBAZXZlbnRPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIEZpcmVkIHdoZW4gYW4gKiplcnJvciBvY2N1cnMqKiBkdXJpbmcgdHJhbnNpdGlvbi4gSXQncyBpbXBvcnRhbnQgdG8gbm90ZSB0aGF0IGlmIHlvdVxuICAgICAgICAgKiBoYXZlIGFueSBlcnJvcnMgaW4geW91ciByZXNvbHZlIGZ1bmN0aW9ucyAoamF2YXNjcmlwdCBlcnJvcnMsIG5vbi1leGlzdGVudCBzZXJ2aWNlcywgZXRjKVxuICAgICAgICAgKiB0aGV5IHdpbGwgbm90IHRocm93IHRyYWRpdGlvbmFsbHkuIFlvdSBtdXN0IGxpc3RlbiBmb3IgdGhpcyAkc3RhdGVDaGFuZ2VFcnJvciBldmVudCB0b1xuICAgICAgICAgKiBjYXRjaCAqKkFMTCoqIGVycm9ycy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtTdGF0ZX0gdG9TdGF0ZSBUaGUgc3RhdGUgYmVpbmcgdHJhbnNpdGlvbmVkIHRvLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdG9QYXJhbXMgVGhlIHBhcmFtcyBzdXBwbGllZCB0byB0aGUgYHRvU3RhdGVgLlxuICAgICAgICAgKiBAcGFyYW0ge1N0YXRlfSBmcm9tU3RhdGUgVGhlIGN1cnJlbnQgc3RhdGUsIHByZS10cmFuc2l0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZnJvbVBhcmFtcyBUaGUgcGFyYW1zIHN1cHBsaWVkIHRvIHRoZSBgZnJvbVN0YXRlYC5cbiAgICAgICAgICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIHJlc29sdmUgZXJyb3Igb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgZXZ0ID0gJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckc3RhdGVDaGFuZ2VFcnJvcicsIHRvLnNlbGYsIHRvUGFyYW1zLCBmcm9tLnNlbGYsIGZyb21QYXJhbXMsIGVycm9yKTtcblxuICAgICAgICBpZiAoIWV2dC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAkdXJsUm91dGVyLnVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnJvcik7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRyYW5zaXRpb247XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjaXNcbiAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2ltaWxhciB0byB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNtZXRob2RzX2luY2x1ZGVzICRzdGF0ZS5pbmNsdWRlc30sXG4gICAgICogYnV0IG9ubHkgY2hlY2tzIGZvciB0aGUgZnVsbCBzdGF0ZSBuYW1lLiBJZiBwYXJhbXMgaXMgc3VwcGxpZWQgdGhlbiBpdCB3aWxsIGJlXG4gICAgICogdGVzdGVkIGZvciBzdHJpY3QgZXF1YWxpdHkgYWdhaW5zdCB0aGUgY3VycmVudCBhY3RpdmUgcGFyYW1zIG9iamVjdCwgc28gYWxsIHBhcmFtc1xuICAgICAqIG11c3QgbWF0Y2ggd2l0aCBub25lIG1pc3NpbmcgYW5kIG5vIGV4dHJhcy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogPHByZT5cbiAgICAgKiAkc3RhdGUuJGN1cnJlbnQubmFtZSA9ICdjb250YWN0cy5kZXRhaWxzLml0ZW0nO1xuICAgICAqXG4gICAgICogLy8gYWJzb2x1dGUgbmFtZVxuICAgICAqICRzdGF0ZS5pcygnY29udGFjdC5kZXRhaWxzLml0ZW0nKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmlzKGNvbnRhY3REZXRhaWxJdGVtU3RhdGVPYmplY3QpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKlxuICAgICAqIC8vIHJlbGF0aXZlIG5hbWUgKC4gYW5kIF4pLCB0eXBpY2FsbHkgZnJvbSBhIHRlbXBsYXRlXG4gICAgICogLy8gRS5nLiBmcm9tIHRoZSAnY29udGFjdHMuZGV0YWlscycgdGVtcGxhdGVcbiAgICAgKiA8ZGl2IG5nLWNsYXNzPVwie2hpZ2hsaWdodGVkOiAkc3RhdGUuaXMoJy5pdGVtJyl9XCI+SXRlbTwvZGl2PlxuICAgICAqIDwvcHJlPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBzdGF0ZU9yTmFtZSBUaGUgc3RhdGUgbmFtZSAoYWJzb2x1dGUgb3IgcmVsYXRpdmUpIG9yIHN0YXRlIG9iamVjdCB5b3UnZCBsaWtlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gcGFyYW1zIEEgcGFyYW0gb2JqZWN0LCBlLmcuIGB7c2VjdGlvbklkOiBzZWN0aW9uLmlkfWAsIHRoYXQgeW91J2QgbGlrZVxuICAgICAqIHRvIHRlc3QgYWdhaW5zdCB0aGUgY3VycmVudCBhY3RpdmUgc3RhdGUuXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIEFuIG9wdGlvbnMgb2JqZWN0LiAgVGhlIG9wdGlvbnMgYXJlOlxuICAgICAqXG4gICAgICogLSAqKmByZWxhdGl2ZWAqKiAtIHtzdHJpbmd8b2JqZWN0fSAtICBJZiBgc3RhdGVPck5hbWVgIGlzIGEgcmVsYXRpdmUgc3RhdGUgbmFtZSBhbmQgYG9wdGlvbnMucmVsYXRpdmVgIGlzIHNldCwgLmlzIHdpbGxcbiAgICAgKiB0ZXN0IHJlbGF0aXZlIHRvIGBvcHRpb25zLnJlbGF0aXZlYCBzdGF0ZSAob3IgbmFtZSkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGl0IGlzIHRoZSBzdGF0ZS5cbiAgICAgKi9cbiAgICAkc3RhdGUuaXMgPSBmdW5jdGlvbiBpcyhzdGF0ZU9yTmFtZSwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gZXh0ZW5kKHsgcmVsYXRpdmU6ICRzdGF0ZS4kY3VycmVudCB9LCBvcHRpb25zIHx8IHt9KTtcbiAgICAgIHZhciBzdGF0ZSA9IGZpbmRTdGF0ZShzdGF0ZU9yTmFtZSwgb3B0aW9ucy5yZWxhdGl2ZSk7XG5cbiAgICAgIGlmICghaXNEZWZpbmVkKHN0YXRlKSkgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG4gICAgICBpZiAoJHN0YXRlLiRjdXJyZW50ICE9PSBzdGF0ZSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIHJldHVybiBwYXJhbXMgPyBlcXVhbEZvcktleXMoc3RhdGUucGFyYW1zLiQkdmFsdWVzKHBhcmFtcyksICRzdGF0ZVBhcmFtcykgOiB0cnVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI2luY2x1ZGVzXG4gICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEEgbWV0aG9kIHRvIGRldGVybWluZSBpZiB0aGUgY3VycmVudCBhY3RpdmUgc3RhdGUgaXMgZXF1YWwgdG8gb3IgaXMgdGhlIGNoaWxkIG9mIHRoZVxuICAgICAqIHN0YXRlIHN0YXRlTmFtZS4gSWYgYW55IHBhcmFtcyBhcmUgcGFzc2VkIHRoZW4gdGhleSB3aWxsIGJlIHRlc3RlZCBmb3IgYSBtYXRjaCBhcyB3ZWxsLlxuICAgICAqIE5vdCBhbGwgdGhlIHBhcmFtZXRlcnMgbmVlZCB0byBiZSBwYXNzZWQsIGp1c3QgdGhlIG9uZXMgeW91J2QgbGlrZSB0byB0ZXN0IGZvciBlcXVhbGl0eS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogUGFydGlhbCBhbmQgcmVsYXRpdmUgbmFtZXNcbiAgICAgKiA8cHJlPlxuICAgICAqICRzdGF0ZS4kY3VycmVudC5uYW1lID0gJ2NvbnRhY3RzLmRldGFpbHMuaXRlbSc7XG4gICAgICpcbiAgICAgKiAvLyBVc2luZyBwYXJ0aWFsIG5hbWVzXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiY29udGFjdHNcIik7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcImNvbnRhY3RzLmRldGFpbHNcIik7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcImNvbnRhY3RzLmRldGFpbHMuaXRlbVwiKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiY29udGFjdHMubGlzdFwiKTsgLy8gcmV0dXJucyBmYWxzZVxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcImFib3V0XCIpOyAvLyByZXR1cm5zIGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBVc2luZyByZWxhdGl2ZSBuYW1lcyAoLiBhbmQgXiksIHR5cGljYWxseSBmcm9tIGEgdGVtcGxhdGVcbiAgICAgKiAvLyBFLmcuIGZyb20gdGhlICdjb250YWN0cy5kZXRhaWxzJyB0ZW1wbGF0ZVxuICAgICAqIDxkaXYgbmctY2xhc3M9XCJ7aGlnaGxpZ2h0ZWQ6ICRzdGF0ZS5pbmNsdWRlcygnLml0ZW0nKX1cIj5JdGVtPC9kaXY+XG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBCYXNpYyBnbG9iYmluZyBwYXR0ZXJuc1xuICAgICAqIDxwcmU+XG4gICAgICogJHN0YXRlLiRjdXJyZW50Lm5hbWUgPSAnY29udGFjdHMuZGV0YWlscy5pdGVtLnVybCc7XG4gICAgICpcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCIqLmRldGFpbHMuKi4qXCIpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCIqLmRldGFpbHMuKipcIik7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcIioqLml0ZW0uKipcIik7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcIiouZGV0YWlscy5pdGVtLnVybFwiKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiKi5kZXRhaWxzLioudXJsXCIpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCIqLmRldGFpbHMuKlwiKTsgLy8gcmV0dXJucyBmYWxzZVxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcIml0ZW0uKipcIik7IC8vIHJldHVybnMgZmFsc2VcbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0ZU9yTmFtZSBBIHBhcnRpYWwgbmFtZSwgcmVsYXRpdmUgbmFtZSwgb3IgZ2xvYiBwYXR0ZXJuXG4gICAgICogdG8gYmUgc2VhcmNoZWQgZm9yIHdpdGhpbiB0aGUgY3VycmVudCBzdGF0ZSBuYW1lLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gcGFyYW1zIEEgcGFyYW0gb2JqZWN0LCBlLmcuIGB7c2VjdGlvbklkOiBzZWN0aW9uLmlkfWAsXG4gICAgICogdGhhdCB5b3UnZCBsaWtlIHRvIHRlc3QgYWdhaW5zdCB0aGUgY3VycmVudCBhY3RpdmUgc3RhdGUuXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIEFuIG9wdGlvbnMgb2JqZWN0LiAgVGhlIG9wdGlvbnMgYXJlOlxuICAgICAqXG4gICAgICogLSAqKmByZWxhdGl2ZWAqKiAtIHtzdHJpbmd8b2JqZWN0PX0gLSAgSWYgYHN0YXRlT3JOYW1lYCBpcyBhIHJlbGF0aXZlIHN0YXRlIHJlZmVyZW5jZSBhbmQgYG9wdGlvbnMucmVsYXRpdmVgIGlzIHNldCxcbiAgICAgKiAuaW5jbHVkZXMgd2lsbCB0ZXN0IHJlbGF0aXZlIHRvIGBvcHRpb25zLnJlbGF0aXZlYCBzdGF0ZSAob3IgbmFtZSkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGl0IGRvZXMgaW5jbHVkZSB0aGUgc3RhdGVcbiAgICAgKi9cbiAgICAkc3RhdGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyhzdGF0ZU9yTmFtZSwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gZXh0ZW5kKHsgcmVsYXRpdmU6ICRzdGF0ZS4kY3VycmVudCB9LCBvcHRpb25zIHx8IHt9KTtcbiAgICAgIGlmIChpc1N0cmluZyhzdGF0ZU9yTmFtZSkgJiYgaXNHbG9iKHN0YXRlT3JOYW1lKSkge1xuICAgICAgICBpZiAoIWRvZXNTdGF0ZU1hdGNoR2xvYihzdGF0ZU9yTmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGVPck5hbWUgPSAkc3RhdGUuJGN1cnJlbnQubmFtZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXRlID0gZmluZFN0YXRlKHN0YXRlT3JOYW1lLCBvcHRpb25zLnJlbGF0aXZlKTtcbiAgICAgIGlmICghaXNEZWZpbmVkKHN0YXRlKSkgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG4gICAgICBpZiAoIWlzRGVmaW5lZCgkc3RhdGUuJGN1cnJlbnQuaW5jbHVkZXNbc3RhdGUubmFtZV0pKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgcmV0dXJuIHBhcmFtcyA/IGVxdWFsRm9yS2V5cyhzdGF0ZS5wYXJhbXMuJCR2YWx1ZXMocGFyYW1zKSwgJHN0YXRlUGFyYW1zLCBvYmplY3RLZXlzKHBhcmFtcykpIDogdHJ1ZTtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI2hyZWZcbiAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSB1cmwgZ2VuZXJhdGlvbiBtZXRob2QgdGhhdCByZXR1cm5zIHRoZSBjb21waWxlZCB1cmwgZm9yIHRoZSBnaXZlbiBzdGF0ZSBwb3B1bGF0ZWQgd2l0aCB0aGUgZ2l2ZW4gcGFyYW1zLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiA8cHJlPlxuICAgICAqIGV4cGVjdCgkc3RhdGUuaHJlZihcImFib3V0LnBlcnNvblwiLCB7IHBlcnNvbjogXCJib2JcIiB9KSkudG9FcXVhbChcIi9hYm91dC9ib2JcIik7XG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHN0YXRlT3JOYW1lIFRoZSBzdGF0ZSBuYW1lIG9yIHN0YXRlIG9iamVjdCB5b3UnZCBsaWtlIHRvIGdlbmVyYXRlIGEgdXJsIGZyb20uXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBwYXJhbXMgQW4gb2JqZWN0IG9mIHBhcmFtZXRlciB2YWx1ZXMgdG8gZmlsbCB0aGUgc3RhdGUncyByZXF1aXJlZCBwYXJhbWV0ZXJzLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdC4gVGhlIG9wdGlvbnMgYXJlOlxuICAgICAqXG4gICAgICogLSAqKmBsb3NzeWAqKiAtIHtib29sZWFuPXRydWV9IC0gIElmIHRydWUsIGFuZCBpZiB0aGVyZSBpcyBubyB1cmwgYXNzb2NpYXRlZCB3aXRoIHRoZSBzdGF0ZSBwcm92aWRlZCBpbiB0aGVcbiAgICAgKiAgICBmaXJzdCBwYXJhbWV0ZXIsIHRoZW4gdGhlIGNvbnN0cnVjdGVkIGhyZWYgdXJsIHdpbGwgYmUgYnVpbHQgZnJvbSB0aGUgZmlyc3QgbmF2aWdhYmxlIGFuY2VzdG9yIChha2FcbiAgICAgKiAgICBhbmNlc3RvciB3aXRoIGEgdmFsaWQgdXJsKS5cbiAgICAgKiAtICoqYGluaGVyaXRgKiogLSB7Ym9vbGVhbj10cnVlfSwgSWYgYHRydWVgIHdpbGwgaW5oZXJpdCB1cmwgcGFyYW1ldGVycyBmcm9tIGN1cnJlbnQgdXJsLlxuICAgICAqIC0gKipgcmVsYXRpdmVgKiogLSB7b2JqZWN0PSRzdGF0ZS4kY3VycmVudH0sIFdoZW4gdHJhbnNpdGlvbmluZyB3aXRoIHJlbGF0aXZlIHBhdGggKGUuZyAnXicpLCBcbiAgICAgKiAgICBkZWZpbmVzIHdoaWNoIHN0YXRlIHRvIGJlIHJlbGF0aXZlIGZyb20uXG4gICAgICogLSAqKmBhYnNvbHV0ZWAqKiAtIHtib29sZWFuPWZhbHNlfSwgIElmIHRydWUgd2lsbCBnZW5lcmF0ZSBhbiBhYnNvbHV0ZSB1cmwsIGUuZy4gXCJodHRwOi8vd3d3LmV4YW1wbGUuY29tL2Z1bGx1cmxcIi5cbiAgICAgKiBcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBjb21waWxlZCBzdGF0ZSB1cmxcbiAgICAgKi9cbiAgICAkc3RhdGUuaHJlZiA9IGZ1bmN0aW9uIGhyZWYoc3RhdGVPck5hbWUsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IGV4dGVuZCh7XG4gICAgICAgIGxvc3N5OiAgICB0cnVlLFxuICAgICAgICBpbmhlcml0OiAgdHJ1ZSxcbiAgICAgICAgYWJzb2x1dGU6IGZhbHNlLFxuICAgICAgICByZWxhdGl2ZTogJHN0YXRlLiRjdXJyZW50XG4gICAgICB9LCBvcHRpb25zIHx8IHt9KTtcblxuICAgICAgdmFyIHN0YXRlID0gZmluZFN0YXRlKHN0YXRlT3JOYW1lLCBvcHRpb25zLnJlbGF0aXZlKTtcblxuICAgICAgaWYgKCFpc0RlZmluZWQoc3RhdGUpKSByZXR1cm4gbnVsbDtcbiAgICAgIGlmIChvcHRpb25zLmluaGVyaXQpIHBhcmFtcyA9IGluaGVyaXRQYXJhbXMoJHN0YXRlUGFyYW1zLCBwYXJhbXMgfHwge30sICRzdGF0ZS4kY3VycmVudCwgc3RhdGUpO1xuICAgICAgXG4gICAgICB2YXIgbmF2ID0gKHN0YXRlICYmIG9wdGlvbnMubG9zc3kpID8gc3RhdGUubmF2aWdhYmxlIDogc3RhdGU7XG5cbiAgICAgIGlmICghbmF2IHx8IG5hdi51cmwgPT09IHVuZGVmaW5lZCB8fCBuYXYudXJsID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuICR1cmxSb3V0ZXIuaHJlZihuYXYudXJsLCBmaWx0ZXJCeUtleXMoc3RhdGUucGFyYW1zLiQka2V5cygpLmNvbmNhdCgnIycpLCBwYXJhbXMgfHwge30pLCB7XG4gICAgICAgIGFic29sdXRlOiBvcHRpb25zLmFic29sdXRlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNnZXRcbiAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyB0aGUgc3RhdGUgY29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGFueSBzcGVjaWZpYyBzdGF0ZSBvciBhbGwgc3RhdGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0PX0gc3RhdGVPck5hbWUgKGFic29sdXRlIG9yIHJlbGF0aXZlKSBJZiBwcm92aWRlZCwgd2lsbCBvbmx5IGdldCB0aGUgY29uZmlnIGZvclxuICAgICAqIHRoZSByZXF1ZXN0ZWQgc3RhdGUuIElmIG5vdCBwcm92aWRlZCwgcmV0dXJucyBhbiBhcnJheSBvZiBBTEwgc3RhdGUgY29uZmlncy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3Q9fSBjb250ZXh0IFdoZW4gc3RhdGVPck5hbWUgaXMgYSByZWxhdGl2ZSBzdGF0ZSByZWZlcmVuY2UsIHRoZSBzdGF0ZSB3aWxsIGJlIHJldHJpZXZlZCByZWxhdGl2ZSB0byBjb250ZXh0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8QXJyYXl9IFN0YXRlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IG9yIGFycmF5IG9mIGFsbCBvYmplY3RzLlxuICAgICAqL1xuICAgICRzdGF0ZS5nZXQgPSBmdW5jdGlvbiAoc3RhdGVPck5hbWUsIGNvbnRleHQpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gbWFwKG9iamVjdEtleXMoc3RhdGVzKSwgZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gc3RhdGVzW25hbWVdLnNlbGY7IH0pO1xuICAgICAgdmFyIHN0YXRlID0gZmluZFN0YXRlKHN0YXRlT3JOYW1lLCBjb250ZXh0IHx8ICRzdGF0ZS4kY3VycmVudCk7XG4gICAgICByZXR1cm4gKHN0YXRlICYmIHN0YXRlLnNlbGYpID8gc3RhdGUuc2VsZiA6IG51bGw7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlc29sdmVTdGF0ZShzdGF0ZSwgcGFyYW1zLCBwYXJhbXNBcmVGaWx0ZXJlZCwgaW5oZXJpdGVkLCBkc3QsIG9wdGlvbnMpIHtcbiAgICAgIC8vIE1ha2UgYSByZXN0cmljdGVkICRzdGF0ZVBhcmFtcyB3aXRoIG9ubHkgdGhlIHBhcmFtZXRlcnMgdGhhdCBhcHBseSB0byB0aGlzIHN0YXRlIGlmXG4gICAgICAvLyBuZWNlc3NhcnkuIEluIGFkZGl0aW9uIHRvIGJlaW5nIGF2YWlsYWJsZSB0byB0aGUgY29udHJvbGxlciBhbmQgb25FbnRlci9vbkV4aXQgY2FsbGJhY2tzLFxuICAgICAgLy8gd2UgYWxzbyBuZWVkICRzdGF0ZVBhcmFtcyB0byBiZSBhdmFpbGFibGUgZm9yIGFueSAkaW5qZWN0b3IgY2FsbHMgd2UgbWFrZSBkdXJpbmcgdGhlXG4gICAgICAvLyBkZXBlbmRlbmN5IHJlc29sdXRpb24gcHJvY2Vzcy5cbiAgICAgIHZhciAkc3RhdGVQYXJhbXMgPSAocGFyYW1zQXJlRmlsdGVyZWQpID8gcGFyYW1zIDogZmlsdGVyQnlLZXlzKHN0YXRlLnBhcmFtcy4kJGtleXMoKSwgcGFyYW1zKTtcbiAgICAgIHZhciBsb2NhbHMgPSB7ICRzdGF0ZVBhcmFtczogJHN0YXRlUGFyYW1zIH07XG5cbiAgICAgIC8vIFJlc29sdmUgJ2dsb2JhbCcgZGVwZW5kZW5jaWVzIGZvciB0aGUgc3RhdGUsIGkuZS4gdGhvc2Ugbm90IHNwZWNpZmljIHRvIGEgdmlldy5cbiAgICAgIC8vIFdlJ3JlIGFsc28gaW5jbHVkaW5nICRzdGF0ZVBhcmFtcyBpbiB0aGlzOyB0aGF0IHdheSB0aGUgcGFyYW1ldGVycyBhcmUgcmVzdHJpY3RlZFxuICAgICAgLy8gdG8gdGhlIHNldCB0aGF0IHNob3VsZCBiZSB2aXNpYmxlIHRvIHRoZSBzdGF0ZSwgYW5kIGFyZSBpbmRlcGVuZGVudCBvZiB3aGVuIHdlIHVwZGF0ZVxuICAgICAgLy8gdGhlIGdsb2JhbCAkc3RhdGUgYW5kICRzdGF0ZVBhcmFtcyB2YWx1ZXMuXG4gICAgICBkc3QucmVzb2x2ZSA9ICRyZXNvbHZlLnJlc29sdmUoc3RhdGUucmVzb2x2ZSwgbG9jYWxzLCBkc3QucmVzb2x2ZSwgc3RhdGUpO1xuICAgICAgdmFyIHByb21pc2VzID0gW2RzdC5yZXNvbHZlLnRoZW4oZnVuY3Rpb24gKGdsb2JhbHMpIHtcbiAgICAgICAgZHN0Lmdsb2JhbHMgPSBnbG9iYWxzO1xuICAgICAgfSldO1xuICAgICAgaWYgKGluaGVyaXRlZCkgcHJvbWlzZXMucHVzaChpbmhlcml0ZWQpO1xuXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVmlld3MoKSB7XG4gICAgICAgIHZhciB2aWV3c1Byb21pc2VzID0gW107XG5cbiAgICAgICAgLy8gUmVzb2x2ZSB0ZW1wbGF0ZSBhbmQgZGVwZW5kZW5jaWVzIGZvciBhbGwgdmlld3MuXG4gICAgICAgIGZvckVhY2goc3RhdGUudmlld3MsIGZ1bmN0aW9uICh2aWV3LCBuYW1lKSB7XG4gICAgICAgICAgdmFyIGluamVjdGFibGVzID0gKHZpZXcucmVzb2x2ZSAmJiB2aWV3LnJlc29sdmUgIT09IHN0YXRlLnJlc29sdmUgPyB2aWV3LnJlc29sdmUgOiB7fSk7XG4gICAgICAgICAgaW5qZWN0YWJsZXMuJHRlbXBsYXRlID0gWyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJHZpZXcubG9hZChuYW1lLCB7IHZpZXc6IHZpZXcsIGxvY2FsczogZHN0Lmdsb2JhbHMsIHBhcmFtczogJHN0YXRlUGFyYW1zLCBub3RpZnk6IG9wdGlvbnMubm90aWZ5IH0pIHx8ICcnO1xuICAgICAgICAgIH1dO1xuXG4gICAgICAgICAgdmlld3NQcm9taXNlcy5wdXNoKCRyZXNvbHZlLnJlc29sdmUoaW5qZWN0YWJsZXMsIGRzdC5nbG9iYWxzLCBkc3QucmVzb2x2ZSwgc3RhdGUpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgLy8gUmVmZXJlbmNlcyB0byB0aGUgY29udHJvbGxlciAob25seSBpbnN0YW50aWF0ZWQgYXQgbGluayB0aW1lKVxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmlldy5jb250cm9sbGVyUHJvdmlkZXIpIHx8IGlzQXJyYXkodmlldy5jb250cm9sbGVyUHJvdmlkZXIpKSB7XG4gICAgICAgICAgICAgIHZhciBpbmplY3RMb2NhbHMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgaW5qZWN0YWJsZXMsIGRzdC5nbG9iYWxzKTtcbiAgICAgICAgICAgICAgcmVzdWx0LiQkY29udHJvbGxlciA9ICRpbmplY3Rvci5pbnZva2Uodmlldy5jb250cm9sbGVyUHJvdmlkZXIsIG51bGwsIGluamVjdExvY2Fscyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHQuJCRjb250cm9sbGVyID0gdmlldy5jb250cm9sbGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUHJvdmlkZSBhY2Nlc3MgdG8gdGhlIHN0YXRlIGl0c2VsZiBmb3IgaW50ZXJuYWwgdXNlXG4gICAgICAgICAgICByZXN1bHQuJCRzdGF0ZSA9IHN0YXRlO1xuICAgICAgICAgICAgcmVzdWx0LiQkY29udHJvbGxlckFzID0gdmlldy5jb250cm9sbGVyQXM7XG4gICAgICAgICAgICBkc3RbbmFtZV0gPSByZXN1bHQ7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gJHEuYWxsKHZpZXdzUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgICByZXR1cm4gZHN0Lmdsb2JhbHM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBXYWl0IGZvciBhbGwgdGhlIHByb21pc2VzIGFuZCB0aGVuIHJldHVybiB0aGUgYWN0aXZhdGlvbiBvYmplY3RcbiAgICAgIHJldHVybiAkcS5hbGwocHJvbWlzZXMpLnRoZW4ocmVzb2x2ZVZpZXdzKS50aGVuKGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIGRzdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiAkc3RhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRTa2lwUmVsb2FkKHRvLCB0b1BhcmFtcywgZnJvbSwgZnJvbVBhcmFtcywgbG9jYWxzLCBvcHRpb25zKSB7XG4gICAgLy8gUmV0dXJuIHRydWUgaWYgdGhlcmUgYXJlIG5vIGRpZmZlcmVuY2VzIGluIG5vbi1zZWFyY2ggKHBhdGgvb2JqZWN0KSBwYXJhbXMsIGZhbHNlIGlmIHRoZXJlIGFyZSBkaWZmZXJlbmNlc1xuICAgIGZ1bmN0aW9uIG5vblNlYXJjaFBhcmFtc0VxdWFsKGZyb21BbmRUb1N0YXRlLCBmcm9tUGFyYW1zLCB0b1BhcmFtcykge1xuICAgICAgLy8gSWRlbnRpZnkgd2hldGhlciBhbGwgdGhlIHBhcmFtZXRlcnMgdGhhdCBkaWZmZXIgYmV0d2VlbiBgZnJvbVBhcmFtc2AgYW5kIGB0b1BhcmFtc2Agd2VyZSBzZWFyY2ggcGFyYW1zLlxuICAgICAgZnVuY3Rpb24gbm90U2VhcmNoUGFyYW0oa2V5KSB7XG4gICAgICAgIHJldHVybiBmcm9tQW5kVG9TdGF0ZS5wYXJhbXNba2V5XS5sb2NhdGlvbiAhPSBcInNlYXJjaFwiO1xuICAgICAgfVxuICAgICAgdmFyIG5vblF1ZXJ5UGFyYW1LZXlzID0gZnJvbUFuZFRvU3RhdGUucGFyYW1zLiQka2V5cygpLmZpbHRlcihub3RTZWFyY2hQYXJhbSk7XG4gICAgICB2YXIgbm9uUXVlcnlQYXJhbXMgPSBwaWNrLmFwcGx5KHt9LCBbZnJvbUFuZFRvU3RhdGUucGFyYW1zXS5jb25jYXQobm9uUXVlcnlQYXJhbUtleXMpKTtcbiAgICAgIHZhciBub25RdWVyeVBhcmFtU2V0ID0gbmV3ICQkVU1GUC5QYXJhbVNldChub25RdWVyeVBhcmFtcyk7XG4gICAgICByZXR1cm4gbm9uUXVlcnlQYXJhbVNldC4kJGVxdWFscyhmcm9tUGFyYW1zLCB0b1BhcmFtcyk7XG4gICAgfVxuXG4gICAgLy8gSWYgcmVsb2FkIHdhcyBub3QgZXhwbGljaXRseSByZXF1ZXN0ZWRcbiAgICAvLyBhbmQgd2UncmUgdHJhbnNpdGlvbmluZyB0byB0aGUgc2FtZSBzdGF0ZSB3ZSdyZSBhbHJlYWR5IGluXG4gICAgLy8gYW5kICAgIHRoZSBsb2NhbHMgZGlkbid0IGNoYW5nZVxuICAgIC8vICAgICBvciB0aGV5IGNoYW5nZWQgaW4gYSB3YXkgdGhhdCBkb2Vzbid0IG1lcml0IHJlbG9hZGluZ1xuICAgIC8vICAgICAgICAocmVsb2FkT25QYXJhbXM6ZmFsc2UsIG9yIHJlbG9hZE9uU2VhcmNoLmZhbHNlIGFuZCBvbmx5IHNlYXJjaCBwYXJhbXMgY2hhbmdlZClcbiAgICAvLyBUaGVuIHJldHVybiB0cnVlLlxuICAgIGlmICghb3B0aW9ucy5yZWxvYWQgJiYgdG8gPT09IGZyb20gJiZcbiAgICAgIChsb2NhbHMgPT09IGZyb20ubG9jYWxzIHx8ICh0by5zZWxmLnJlbG9hZE9uU2VhcmNoID09PSBmYWxzZSAmJiBub25TZWFyY2hQYXJhbXNFcXVhbChmcm9tLCBmcm9tUGFyYW1zLCB0b1BhcmFtcykpKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKVxuICAudmFsdWUoJyRzdGF0ZVBhcmFtcycsIHt9KVxuICAucHJvdmlkZXIoJyRzdGF0ZScsICRTdGF0ZVByb3ZpZGVyKTtcblxuXG4kVmlld1Byb3ZpZGVyLiRpbmplY3QgPSBbXTtcbmZ1bmN0aW9uICRWaWV3UHJvdmlkZXIoKSB7XG5cbiAgdGhpcy4kZ2V0ID0gJGdldDtcbiAgLyoqXG4gICAqIEBuZ2RvYyBvYmplY3RcbiAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiR2aWV3XG4gICAqXG4gICAqIEByZXF1aXJlcyB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5XG4gICAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKi9cbiAgJGdldC4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyR0ZW1wbGF0ZUZhY3RvcnknXTtcbiAgZnVuY3Rpb24gJGdldCggICAkcm9vdFNjb3BlLCAgICR0ZW1wbGF0ZUZhY3RvcnkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gJHZpZXcubG9hZCgnZnVsbC52aWV3TmFtZScsIHsgdGVtcGxhdGU6IC4uLiwgY29udHJvbGxlcjogLi4uLCByZXNvbHZlOiAuLi4sIGFzeW5jOiBmYWxzZSwgcGFyYW1zOiAuLi4gfSlcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHZpZXcjbG9hZFxuICAgICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kdmlld1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWVcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIG9wdGlvbiBvYmplY3QuXG4gICAgICAgKi9cbiAgICAgIGxvYWQ6IGZ1bmN0aW9uIGxvYWQobmFtZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgcmVzdWx0LCBkZWZhdWx0cyA9IHtcbiAgICAgICAgICB0ZW1wbGF0ZTogbnVsbCwgY29udHJvbGxlcjogbnVsbCwgdmlldzogbnVsbCwgbG9jYWxzOiBudWxsLCBub3RpZnk6IHRydWUsIGFzeW5jOiB0cnVlLCBwYXJhbXM6IHt9XG4gICAgICAgIH07XG4gICAgICAgIG9wdGlvbnMgPSBleHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnZpZXcpIHtcbiAgICAgICAgICByZXN1bHQgPSAkdGVtcGxhdGVGYWN0b3J5LmZyb21Db25maWcob3B0aW9ucy52aWV3LCBvcHRpb25zLnBhcmFtcywgb3B0aW9ucy5sb2NhbHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQgJiYgb3B0aW9ucy5ub3RpZnkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlIyR2aWV3Q29udGVudExvYWRpbmdcbiAgICAgICAgICogQGV2ZW50T2YgdWkucm91dGVyLnN0YXRlLiR2aWV3XG4gICAgICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEZpcmVkIG9uY2UgdGhlIHZpZXcgKipiZWdpbnMgbG9hZGluZyoqLCAqYmVmb3JlKiB0aGUgRE9NIGlzIHJlbmRlcmVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgRXZlbnQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdmlld0NvbmZpZyBUaGUgdmlldyBjb25maWcgcHJvcGVydGllcyAodGVtcGxhdGUsIGNvbnRyb2xsZXIsIGV0YykuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqIDxwcmU+XG4gICAgICAgICAqICRzY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRpbmcnLFxuICAgICAgICAgKiBmdW5jdGlvbihldmVudCwgdmlld0NvbmZpZyl7XG4gICAgICAgICAqICAgICAvLyBBY2Nlc3MgdG8gYWxsIHRoZSB2aWV3IGNvbmZpZyBwcm9wZXJ0aWVzLlxuICAgICAgICAgKiAgICAgLy8gYW5kIG9uZSBzcGVjaWFsIHByb3BlcnR5ICd0YXJnZXRWaWV3J1xuICAgICAgICAgKiAgICAgLy8gdmlld0NvbmZpZy50YXJnZXRWaWV3XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKiA8L3ByZT5cbiAgICAgICAgICovXG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckdmlld0NvbnRlbnRMb2FkaW5nJywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKS5wcm92aWRlcignJHZpZXcnLCAkVmlld1Byb3ZpZGVyKTtcblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHVpVmlld1Njcm9sbFByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBQcm92aWRlciB0aGF0IHJldHVybnMgdGhlIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHVpVmlld1Njcm9sbH0gc2VydmljZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gJFZpZXdTY3JvbGxQcm92aWRlcigpIHtcblxuICB2YXIgdXNlQW5jaG9yU2Nyb2xsID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHVpVmlld1Njcm9sbFByb3ZpZGVyI3VzZUFuY2hvclNjcm9sbFxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiR1aVZpZXdTY3JvbGxQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV2ZXJ0cyBiYWNrIHRvIHVzaW5nIHRoZSBjb3JlIFtgJGFuY2hvclNjcm9sbGBdKGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRhbmNob3JTY3JvbGwpIHNlcnZpY2UgZm9yXG4gICAqIHNjcm9sbGluZyBiYXNlZCBvbiB0aGUgdXJsIGFuY2hvci5cbiAgICovXG4gIHRoaXMudXNlQW5jaG9yU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgIHVzZUFuY2hvclNjcm9sbCA9IHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBvYmplY3RcbiAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiR1aVZpZXdTY3JvbGxcbiAgICpcbiAgICogQHJlcXVpcmVzICRhbmNob3JTY3JvbGxcbiAgICogQHJlcXVpcmVzICR0aW1lb3V0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBXaGVuIGNhbGxlZCB3aXRoIGEganFMaXRlIGVsZW1lbnQsIGl0IHNjcm9sbHMgdGhlIGVsZW1lbnQgaW50byB2aWV3IChhZnRlciBhXG4gICAqIGAkdGltZW91dGAgc28gdGhlIERPTSBoYXMgdGltZSB0byByZWZyZXNoKS5cbiAgICpcbiAgICogSWYgeW91IHByZWZlciB0byByZWx5IG9uIGAkYW5jaG9yU2Nyb2xsYCB0byBzY3JvbGwgdGhlIHZpZXcgdG8gdGhlIGFuY2hvcixcbiAgICogdGhpcyBjYW4gYmUgZW5hYmxlZCBieSBjYWxsaW5nIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHVpVmlld1Njcm9sbFByb3ZpZGVyI21ldGhvZHNfdXNlQW5jaG9yU2Nyb2xsIGAkdWlWaWV3U2Nyb2xsUHJvdmlkZXIudXNlQW5jaG9yU2Nyb2xsKClgfS5cbiAgICovXG4gIHRoaXMuJGdldCA9IFsnJGFuY2hvclNjcm9sbCcsICckdGltZW91dCcsIGZ1bmN0aW9uICgkYW5jaG9yU2Nyb2xsLCAkdGltZW91dCkge1xuICAgIGlmICh1c2VBbmNob3JTY3JvbGwpIHtcbiAgICAgIHJldHVybiAkYW5jaG9yU2Nyb2xsO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoJGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICRlbGVtZW50WzBdLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICB9LCAwLCBmYWxzZSk7XG4gICAgfTtcbiAgfV07XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKS5wcm92aWRlcignJHVpVmlld1Njcm9sbCcsICRWaWV3U2Nyb2xsUHJvdmlkZXIpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS5kaXJlY3RpdmU6dWktdmlld1xuICpcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gKiBAcmVxdWlyZXMgJGNvbXBpbGVcbiAqIEByZXF1aXJlcyAkY29udHJvbGxlclxuICogQHJlcXVpcmVzICRpbmplY3RvclxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kdWlWaWV3U2Nyb2xsXG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gKlxuICogQHJlc3RyaWN0IEVDQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIHVpLXZpZXcgZGlyZWN0aXZlIHRlbGxzICRzdGF0ZSB3aGVyZSB0byBwbGFjZSB5b3VyIHRlbXBsYXRlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgQSB2aWV3IG5hbWUuIFRoZSBuYW1lIHNob3VsZCBiZSB1bmlxdWUgYW1vbmdzdCB0aGUgb3RoZXIgdmlld3MgaW4gdGhlXG4gKiBzYW1lIHN0YXRlLiBZb3UgY2FuIGhhdmUgdmlld3Mgb2YgdGhlIHNhbWUgbmFtZSB0aGF0IGxpdmUgaW4gZGlmZmVyZW50IHN0YXRlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGF1dG9zY3JvbGwgSXQgYWxsb3dzIHlvdSB0byBzZXQgdGhlIHNjcm9sbCBiZWhhdmlvciBvZiB0aGUgYnJvd3NlciB3aW5kb3dcbiAqIHdoZW4gYSB2aWV3IGlzIHBvcHVsYXRlZC4gQnkgZGVmYXVsdCwgJGFuY2hvclNjcm9sbCBpcyBvdmVycmlkZGVuIGJ5IHVpLXJvdXRlcidzIGN1c3RvbSBzY3JvbGxcbiAqIHNlcnZpY2UsIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHVpVmlld1Njcm9sbH0uIFRoaXMgY3VzdG9tIHNlcnZpY2UgbGV0J3MgeW91XG4gKiBzY3JvbGwgdWktdmlldyBlbGVtZW50cyBpbnRvIHZpZXcgd2hlbiB0aGV5IGFyZSBwb3B1bGF0ZWQgZHVyaW5nIGEgc3RhdGUgYWN0aXZhdGlvbi5cbiAqXG4gKiAqTm90ZTogVG8gcmV2ZXJ0IGJhY2sgdG8gb2xkIFtgJGFuY2hvclNjcm9sbGBdKGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRhbmNob3JTY3JvbGwpXG4gKiBmdW5jdGlvbmFsaXR5LCBjYWxsIGAkdWlWaWV3U2Nyb2xsUHJvdmlkZXIudXNlQW5jaG9yU2Nyb2xsKClgLipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG9ubG9hZCBFeHByZXNzaW9uIHRvIGV2YWx1YXRlIHdoZW5ldmVyIHRoZSB2aWV3IHVwZGF0ZXMuXG4gKiBcbiAqIEBleGFtcGxlXG4gKiBBIHZpZXcgY2FuIGJlIHVubmFtZWQgb3IgbmFtZWQuIFxuICogPHByZT5cbiAqIDwhLS0gVW5uYW1lZCAtLT5cbiAqIDxkaXYgdWktdmlldz48L2Rpdj4gXG4gKiBcbiAqIDwhLS0gTmFtZWQgLS0+XG4gKiA8ZGl2IHVpLXZpZXc9XCJ2aWV3TmFtZVwiPjwvZGl2PlxuICogPC9wcmU+XG4gKlxuICogWW91IGNhbiBvbmx5IGhhdmUgb25lIHVubmFtZWQgdmlldyB3aXRoaW4gYW55IHRlbXBsYXRlIChvciByb290IGh0bWwpLiBJZiB5b3UgYXJlIG9ubHkgdXNpbmcgYSBcbiAqIHNpbmdsZSB2aWV3IGFuZCBpdCBpcyB1bm5hbWVkIHRoZW4geW91IGNhbiBwb3B1bGF0ZSBpdCBsaWtlIHNvOlxuICogPHByZT5cbiAqIDxkaXYgdWktdmlldz48L2Rpdj4gXG4gKiAkc3RhdGVQcm92aWRlci5zdGF0ZShcImhvbWVcIiwge1xuICogICB0ZW1wbGF0ZTogXCI8aDE+SEVMTE8hPC9oMT5cIlxuICogfSlcbiAqIDwvcHJlPlxuICogXG4gKiBUaGUgYWJvdmUgaXMgYSBjb252ZW5pZW50IHNob3J0Y3V0IGVxdWl2YWxlbnQgdG8gc3BlY2lmeWluZyB5b3VyIHZpZXcgZXhwbGljaXRseSB3aXRoIHRoZSB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVByb3ZpZGVyI3ZpZXdzIGB2aWV3c2B9XG4gKiBjb25maWcgcHJvcGVydHksIGJ5IG5hbWUsIGluIHRoaXMgY2FzZSBhbiBlbXB0eSBuYW1lOlxuICogPHByZT5cbiAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLCB7XG4gKiAgIHZpZXdzOiB7XG4gKiAgICAgXCJcIjoge1xuICogICAgICAgdGVtcGxhdGU6IFwiPGgxPkhFTExPITwvaDE+XCJcbiAqICAgICB9XG4gKiAgIH0gICAgXG4gKiB9KVxuICogPC9wcmU+XG4gKiBcbiAqIEJ1dCB0eXBpY2FsbHkgeW91J2xsIG9ubHkgdXNlIHRoZSB2aWV3cyBwcm9wZXJ0eSBpZiB5b3UgbmFtZSB5b3VyIHZpZXcgb3IgaGF2ZSBtb3JlIHRoYW4gb25lIHZpZXcgXG4gKiBpbiB0aGUgc2FtZSB0ZW1wbGF0ZS4gVGhlcmUncyBub3QgcmVhbGx5IGEgY29tcGVsbGluZyByZWFzb24gdG8gbmFtZSBhIHZpZXcgaWYgaXRzIHRoZSBvbmx5IG9uZSwgXG4gKiBidXQgeW91IGNvdWxkIGlmIHlvdSB3YW50ZWQsIGxpa2Ugc286XG4gKiA8cHJlPlxuICogPGRpdiB1aS12aWV3PVwibWFpblwiPjwvZGl2PlxuICogPC9wcmU+IFxuICogPHByZT5cbiAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLCB7XG4gKiAgIHZpZXdzOiB7XG4gKiAgICAgXCJtYWluXCI6IHtcbiAqICAgICAgIHRlbXBsYXRlOiBcIjxoMT5IRUxMTyE8L2gxPlwiXG4gKiAgICAgfVxuICogICB9ICAgIFxuICogfSlcbiAqIDwvcHJlPlxuICogXG4gKiBSZWFsbHkgdGhvdWdoLCB5b3UnbGwgdXNlIHZpZXdzIHRvIHNldCB1cCBtdWx0aXBsZSB2aWV3czpcbiAqIDxwcmU+XG4gKiA8ZGl2IHVpLXZpZXc+PC9kaXY+XG4gKiA8ZGl2IHVpLXZpZXc9XCJjaGFydFwiPjwvZGl2PiBcbiAqIDxkaXYgdWktdmlldz1cImRhdGFcIj48L2Rpdj4gXG4gKiA8L3ByZT5cbiAqIFxuICogPHByZT5cbiAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLCB7XG4gKiAgIHZpZXdzOiB7XG4gKiAgICAgXCJcIjoge1xuICogICAgICAgdGVtcGxhdGU6IFwiPGgxPkhFTExPITwvaDE+XCJcbiAqICAgICB9LFxuICogICAgIFwiY2hhcnRcIjoge1xuICogICAgICAgdGVtcGxhdGU6IFwiPGNoYXJ0X3RoaW5nLz5cIlxuICogICAgIH0sXG4gKiAgICAgXCJkYXRhXCI6IHtcbiAqICAgICAgIHRlbXBsYXRlOiBcIjxkYXRhX3RoaW5nLz5cIlxuICogICAgIH1cbiAqICAgfSAgICBcbiAqIH0pXG4gKiA8L3ByZT5cbiAqXG4gKiBFeGFtcGxlcyBmb3IgYGF1dG9zY3JvbGxgOlxuICpcbiAqIDxwcmU+XG4gKiA8IS0tIElmIGF1dG9zY3JvbGwgcHJlc2VudCB3aXRoIG5vIGV4cHJlc3Npb24sXG4gKiAgICAgIHRoZW4gc2Nyb2xsIHVpLXZpZXcgaW50byB2aWV3IC0tPlxuICogPHVpLXZpZXcgYXV0b3Njcm9sbC8+XG4gKlxuICogPCEtLSBJZiBhdXRvc2Nyb2xsIHByZXNlbnQgd2l0aCB2YWxpZCBleHByZXNzaW9uLFxuICogICAgICB0aGVuIHNjcm9sbCB1aS12aWV3IGludG8gdmlldyBpZiBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlIC0tPlxuICogPHVpLXZpZXcgYXV0b3Njcm9sbD0ndHJ1ZScvPlxuICogPHVpLXZpZXcgYXV0b3Njcm9sbD0nZmFsc2UnLz5cbiAqIDx1aS12aWV3IGF1dG9zY3JvbGw9J3Njb3BlVmFyaWFibGUnLz5cbiAqIDwvcHJlPlxuICovXG4kVmlld0RpcmVjdGl2ZS4kaW5qZWN0ID0gWyckc3RhdGUnLCAnJGluamVjdG9yJywgJyR1aVZpZXdTY3JvbGwnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiAkVmlld0RpcmVjdGl2ZSggICAkc3RhdGUsICAgJGluamVjdG9yLCAgICR1aVZpZXdTY3JvbGwsICAgJGludGVycG9sYXRlKSB7XG5cbiAgZnVuY3Rpb24gZ2V0U2VydmljZSgpIHtcbiAgICByZXR1cm4gKCRpbmplY3Rvci5oYXMpID8gZnVuY3Rpb24oc2VydmljZSkge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5oYXMoc2VydmljZSkgPyAkaW5qZWN0b3IuZ2V0KHNlcnZpY2UpIDogbnVsbDtcbiAgICB9IDogZnVuY3Rpb24oc2VydmljZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuICRpbmplY3Rvci5nZXQoc2VydmljZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgc2VydmljZSA9IGdldFNlcnZpY2UoKSxcbiAgICAgICRhbmltYXRvciA9IHNlcnZpY2UoJyRhbmltYXRvcicpLFxuICAgICAgJGFuaW1hdGUgPSBzZXJ2aWNlKCckYW5pbWF0ZScpO1xuXG4gIC8vIFJldHVybnMgYSBzZXQgb2YgRE9NIG1hbmlwdWxhdGlvbiBmdW5jdGlvbnMgYmFzZWQgb24gd2hpY2ggQW5ndWxhciB2ZXJzaW9uXG4gIC8vIGl0IHNob3VsZCB1c2VcbiAgZnVuY3Rpb24gZ2V0UmVuZGVyZXIoYXR0cnMsIHNjb3BlKSB7XG4gICAgdmFyIHN0YXRpY3MgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVudGVyOiBmdW5jdGlvbiAoZWxlbWVudCwgdGFyZ2V0LCBjYikgeyB0YXJnZXQuYWZ0ZXIoZWxlbWVudCk7IGNiKCk7IH0sXG4gICAgICAgIGxlYXZlOiBmdW5jdGlvbiAoZWxlbWVudCwgY2IpIHsgZWxlbWVudC5yZW1vdmUoKTsgY2IoKTsgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgaWYgKCRhbmltYXRlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgdGFyZ2V0LCBjYikge1xuICAgICAgICAgIHZhciBwcm9taXNlID0gJGFuaW1hdGUuZW50ZXIoZWxlbWVudCwgbnVsbCwgdGFyZ2V0LCBjYik7XG4gICAgICAgICAgaWYgKHByb21pc2UgJiYgcHJvbWlzZS50aGVuKSBwcm9taXNlLnRoZW4oY2IpO1xuICAgICAgICB9LFxuICAgICAgICBsZWF2ZTogZnVuY3Rpb24oZWxlbWVudCwgY2IpIHtcbiAgICAgICAgICB2YXIgcHJvbWlzZSA9ICRhbmltYXRlLmxlYXZlKGVsZW1lbnQsIGNiKTtcbiAgICAgICAgICBpZiAocHJvbWlzZSAmJiBwcm9taXNlLnRoZW4pIHByb21pc2UudGhlbihjYik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCRhbmltYXRvcikge1xuICAgICAgdmFyIGFuaW1hdGUgPSAkYW5pbWF0b3IgJiYgJGFuaW1hdG9yKHNjb3BlLCBhdHRycyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCB0YXJnZXQsIGNiKSB7YW5pbWF0ZS5lbnRlcihlbGVtZW50LCBudWxsLCB0YXJnZXQpOyBjYigpOyB9LFxuICAgICAgICBsZWF2ZTogZnVuY3Rpb24oZWxlbWVudCwgY2IpIHsgYW5pbWF0ZS5sZWF2ZShlbGVtZW50KTsgY2IoKTsgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGljcygpO1xuICB9XG5cbiAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICByZXN0cmljdDogJ0VDQScsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgcHJpb3JpdHk6IDQwMCxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gKHRFbGVtZW50LCB0QXR0cnMsICR0cmFuc2NsdWRlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCAkZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgdmFyIHByZXZpb3VzRWwsIGN1cnJlbnRFbCwgY3VycmVudFNjb3BlLCBsYXRlc3RMb2NhbHMsXG4gICAgICAgICAgICBvbmxvYWRFeHAgICAgID0gYXR0cnMub25sb2FkIHx8ICcnLFxuICAgICAgICAgICAgYXV0b1Njcm9sbEV4cCA9IGF0dHJzLmF1dG9zY3JvbGwsXG4gICAgICAgICAgICByZW5kZXJlciAgICAgID0gZ2V0UmVuZGVyZXIoYXR0cnMsIHNjb3BlKTtcblxuICAgICAgICBzY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1cGRhdGVWaWV3KGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVwZGF0ZVZpZXcoZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICB1cGRhdGVWaWV3KHRydWUpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFudXBMYXN0VmlldygpIHtcbiAgICAgICAgICBpZiAocHJldmlvdXNFbCkge1xuICAgICAgICAgICAgcHJldmlvdXNFbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIHByZXZpb3VzRWwgPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VycmVudEVsKSB7XG4gICAgICAgICAgICByZW5kZXJlci5sZWF2ZShjdXJyZW50RWwsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwcmV2aW91c0VsID0gY3VycmVudEVsO1xuICAgICAgICAgICAgY3VycmVudEVsID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVWaWV3KGZpcnN0VGltZSkge1xuICAgICAgICAgIHZhciBuZXdTY29wZSxcbiAgICAgICAgICAgICAgbmFtZSAgICAgICAgICAgID0gZ2V0VWlWaWV3TmFtZShzY29wZSwgYXR0cnMsICRlbGVtZW50LCAkaW50ZXJwb2xhdGUpLFxuICAgICAgICAgICAgICBwcmV2aW91c0xvY2FscyAgPSBuYW1lICYmICRzdGF0ZS4kY3VycmVudCAmJiAkc3RhdGUuJGN1cnJlbnQubG9jYWxzW25hbWVdO1xuXG4gICAgICAgICAgaWYgKCFmaXJzdFRpbWUgJiYgcHJldmlvdXNMb2NhbHMgPT09IGxhdGVzdExvY2FscykgcmV0dXJuOyAvLyBub3RoaW5nIHRvIGRvXG4gICAgICAgICAgbmV3U2NvcGUgPSBzY29wZS4kbmV3KCk7XG4gICAgICAgICAgbGF0ZXN0TG9jYWxzID0gJHN0YXRlLiRjdXJyZW50LmxvY2Fsc1tuYW1lXTtcblxuICAgICAgICAgIHZhciBjbG9uZSA9ICR0cmFuc2NsdWRlKG5ld1Njb3BlLCBmdW5jdGlvbihjbG9uZSkge1xuICAgICAgICAgICAgcmVuZGVyZXIuZW50ZXIoY2xvbmUsICRlbGVtZW50LCBmdW5jdGlvbiBvblVpVmlld0VudGVyKCkge1xuICAgICAgICAgICAgICBpZihjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50U2NvcGUuJGVtaXQoJyR2aWV3Q29udGVudEFuaW1hdGlvbkVuZGVkJyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoYXV0b1Njcm9sbEV4cCkgJiYgIWF1dG9TY3JvbGxFeHAgfHwgc2NvcGUuJGV2YWwoYXV0b1Njcm9sbEV4cCkpIHtcbiAgICAgICAgICAgICAgICAkdWlWaWV3U2Nyb2xsKGNsb25lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjbGVhbnVwTGFzdFZpZXcoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGN1cnJlbnRFbCA9IGNsb25lO1xuICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS5kaXJlY3RpdmU6dWktdmlldyMkdmlld0NvbnRlbnRMb2FkZWRcbiAgICAgICAgICAgKiBAZXZlbnRPZiB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXZpZXdcbiAgICAgICAgICAgKiBAZXZlbnRUeXBlIGVtaXRzIG9uIHVpLXZpZXcgZGlyZWN0aXZlIHNjb3BlXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uICAgICAgICAgICAqXG4gICAgICAgICAgICogRmlyZWQgb25jZSB0aGUgdmlldyBpcyAqKmxvYWRlZCoqLCAqYWZ0ZXIqIHRoZSBET00gaXMgcmVuZGVyZWQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgRXZlbnQgb2JqZWN0LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGN1cnJlbnRTY29wZS4kZW1pdCgnJHZpZXdDb250ZW50TG9hZGVkJyk7XG4gICAgICAgICAgY3VycmVudFNjb3BlLiRldmFsKG9ubG9hZEV4cCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBkaXJlY3RpdmU7XG59XG5cbiRWaWV3RGlyZWN0aXZlRmlsbC4kaW5qZWN0ID0gWyckY29tcGlsZScsICckY29udHJvbGxlcicsICckc3RhdGUnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiAkVmlld0RpcmVjdGl2ZUZpbGwgKCAgJGNvbXBpbGUsICAgJGNvbnRyb2xsZXIsICAgJHN0YXRlLCAgICRpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICBwcmlvcml0eTogLTQwMCxcbiAgICBjb21waWxlOiBmdW5jdGlvbiAodEVsZW1lbnQpIHtcbiAgICAgIHZhciBpbml0aWFsID0gdEVsZW1lbnQuaHRtbCgpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgJGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gJHN0YXRlLiRjdXJyZW50LFxuICAgICAgICAgICAgbmFtZSA9IGdldFVpVmlld05hbWUoc2NvcGUsIGF0dHJzLCAkZWxlbWVudCwgJGludGVycG9sYXRlKSxcbiAgICAgICAgICAgIGxvY2FscyAgPSBjdXJyZW50ICYmIGN1cnJlbnQubG9jYWxzW25hbWVdO1xuXG4gICAgICAgIGlmICghIGxvY2Fscykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICRlbGVtZW50LmRhdGEoJyR1aVZpZXcnLCB7IG5hbWU6IG5hbWUsIHN0YXRlOiBsb2NhbHMuJCRzdGF0ZSB9KTtcbiAgICAgICAgJGVsZW1lbnQuaHRtbChsb2NhbHMuJHRlbXBsYXRlID8gbG9jYWxzLiR0ZW1wbGF0ZSA6IGluaXRpYWwpO1xuXG4gICAgICAgIHZhciBsaW5rID0gJGNvbXBpbGUoJGVsZW1lbnQuY29udGVudHMoKSk7XG5cbiAgICAgICAgaWYgKGxvY2Fscy4kJGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBsb2NhbHMuJHNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgbG9jYWxzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSAkY29udHJvbGxlcihsb2NhbHMuJCRjb250cm9sbGVyLCBsb2NhbHMpO1xuICAgICAgICAgIGlmIChsb2NhbHMuJCRjb250cm9sbGVyQXMpIHtcbiAgICAgICAgICAgIHNjb3BlW2xvY2Fscy4kJGNvbnRyb2xsZXJBc10gPSBjb250cm9sbGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkZWxlbWVudC5kYXRhKCckbmdDb250cm9sbGVyQ29udHJvbGxlcicsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICRlbGVtZW50LmNoaWxkcmVuKCkuZGF0YSgnJG5nQ29udHJvbGxlckNvbnRyb2xsZXInLCBjb250cm9sbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpbmsoc2NvcGUpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogU2hhcmVkIHVpLXZpZXcgY29kZSBmb3IgYm90aCBkaXJlY3RpdmVzOlxuICogR2l2ZW4gc2NvcGUsIGVsZW1lbnQsIGFuZCBpdHMgYXR0cmlidXRlcywgcmV0dXJuIHRoZSB2aWV3J3MgbmFtZVxuICovXG5mdW5jdGlvbiBnZXRVaVZpZXdOYW1lKHNjb3BlLCBhdHRycywgZWxlbWVudCwgJGludGVycG9sYXRlKSB7XG4gIHZhciBuYW1lID0gJGludGVycG9sYXRlKGF0dHJzLnVpVmlldyB8fCBhdHRycy5uYW1lIHx8ICcnKShzY29wZSk7XG4gIHZhciBpbmhlcml0ZWQgPSBlbGVtZW50LmluaGVyaXRlZERhdGEoJyR1aVZpZXcnKTtcbiAgcmV0dXJuIG5hbWUuaW5kZXhPZignQCcpID49IDAgPyAgbmFtZSA6ICAobmFtZSArICdAJyArIChpbmhlcml0ZWQgPyBpbmhlcml0ZWQuc3RhdGUubmFtZSA6ICcnKSk7XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKS5kaXJlY3RpdmUoJ3VpVmlldycsICRWaWV3RGlyZWN0aXZlKTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKS5kaXJlY3RpdmUoJ3VpVmlldycsICRWaWV3RGlyZWN0aXZlRmlsbCk7XG5cbmZ1bmN0aW9uIHBhcnNlU3RhdGVSZWYocmVmLCBjdXJyZW50KSB7XG4gIHZhciBwcmVwYXJzZWQgPSByZWYubWF0Y2goL15cXHMqKHtbXn1dKn0pXFxzKiQvKSwgcGFyc2VkO1xuICBpZiAocHJlcGFyc2VkKSByZWYgPSBjdXJyZW50ICsgJygnICsgcHJlcGFyc2VkWzFdICsgJyknO1xuICBwYXJzZWQgPSByZWYucmVwbGFjZSgvXFxuL2csIFwiIFwiKS5tYXRjaCgvXihbXihdKz8pXFxzKihcXCgoLiopXFwpKT8kLyk7XG4gIGlmICghcGFyc2VkIHx8IHBhcnNlZC5sZW5ndGggIT09IDQpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RhdGUgcmVmICdcIiArIHJlZiArIFwiJ1wiKTtcbiAgcmV0dXJuIHsgc3RhdGU6IHBhcnNlZFsxXSwgcGFyYW1FeHByOiBwYXJzZWRbM10gfHwgbnVsbCB9O1xufVxuXG5mdW5jdGlvbiBzdGF0ZUNvbnRleHQoZWwpIHtcbiAgdmFyIHN0YXRlRGF0YSA9IGVsLnBhcmVudCgpLmluaGVyaXRlZERhdGEoJyR1aVZpZXcnKTtcblxuICBpZiAoc3RhdGVEYXRhICYmIHN0YXRlRGF0YS5zdGF0ZSAmJiBzdGF0ZURhdGEuc3RhdGUubmFtZSkge1xuICAgIHJldHVybiBzdGF0ZURhdGEuc3RhdGU7XG4gIH1cbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXNyZWZcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICogQHJlcXVpcmVzICR0aW1lb3V0XG4gKlxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZGlyZWN0aXZlIHRoYXQgYmluZHMgYSBsaW5rIChgPGE+YCB0YWcpIHRvIGEgc3RhdGUuIElmIHRoZSBzdGF0ZSBoYXMgYW4gYXNzb2NpYXRlZCBcbiAqIFVSTCwgdGhlIGRpcmVjdGl2ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGUgJiB1cGRhdGUgdGhlIGBocmVmYCBhdHRyaWJ1dGUgdmlhIFxuICogdGhlIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfaHJlZiAkc3RhdGUuaHJlZigpfSBtZXRob2QuIENsaWNraW5nIFxuICogdGhlIGxpbmsgd2lsbCB0cmlnZ2VyIGEgc3RhdGUgdHJhbnNpdGlvbiB3aXRoIG9wdGlvbmFsIHBhcmFtZXRlcnMuIFxuICpcbiAqIEFsc28gbWlkZGxlLWNsaWNraW5nLCByaWdodC1jbGlja2luZywgYW5kIGN0cmwtY2xpY2tpbmcgb24gdGhlIGxpbmsgd2lsbCBiZSBcbiAqIGhhbmRsZWQgbmF0aXZlbHkgYnkgdGhlIGJyb3dzZXIuXG4gKlxuICogWW91IGNhbiBhbHNvIHVzZSByZWxhdGl2ZSBzdGF0ZSBwYXRocyB3aXRoaW4gdWktc3JlZiwganVzdCBsaWtlIHRoZSByZWxhdGl2ZSBcbiAqIHBhdGhzIHBhc3NlZCB0byBgJHN0YXRlLmdvKClgLiBZb3UganVzdCBuZWVkIHRvIGJlIGF3YXJlIHRoYXQgdGhlIHBhdGggaXMgcmVsYXRpdmVcbiAqIHRvIHRoZSBzdGF0ZSB0aGF0IHRoZSBsaW5rIGxpdmVzIGluLCBpbiBvdGhlciB3b3JkcyB0aGUgc3RhdGUgdGhhdCBsb2FkZWQgdGhlIFxuICogdGVtcGxhdGUgY29udGFpbmluZyB0aGUgbGluay5cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgb3B0aW9ucyB0byBwYXNzIHRvIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI2dvICRzdGF0ZS5nbygpfVxuICogdXNpbmcgdGhlIGB1aS1zcmVmLW9wdHNgIGF0dHJpYnV0ZS4gT3B0aW9ucyBhcmUgcmVzdHJpY3RlZCB0byBgbG9jYXRpb25gLCBgaW5oZXJpdGAsXG4gKiBhbmQgYHJlbG9hZGAuXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUncyBhbiBleGFtcGxlIG9mIGhvdyB5b3UnZCB1c2UgdWktc3JlZiBhbmQgaG93IGl0IHdvdWxkIGNvbXBpbGUuIElmIHlvdSBoYXZlIHRoZSBcbiAqIGZvbGxvd2luZyB0ZW1wbGF0ZTpcbiAqIDxwcmU+XG4gKiA8YSB1aS1zcmVmPVwiaG9tZVwiPkhvbWU8L2E+IHwgPGEgdWktc3JlZj1cImFib3V0XCI+QWJvdXQ8L2E+IHwgPGEgdWktc3JlZj1cIntwYWdlOiAyfVwiPk5leHQgcGFnZTwvYT5cbiAqIFxuICogPHVsPlxuICogICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxhIHVpLXNyZWY9XCJjb250YWN0cy5kZXRhaWwoeyBpZDogY29udGFjdC5pZCB9KVwiPnt7IGNvbnRhY3QubmFtZSB9fTwvYT5cbiAqICAgICA8L2xpPlxuICogPC91bD5cbiAqIDwvcHJlPlxuICogXG4gKiBUaGVuIHRoZSBjb21waWxlZCBodG1sIHdvdWxkIGJlIChhc3N1bWluZyBIdG1sNU1vZGUgaXMgb2ZmIGFuZCBjdXJyZW50IHN0YXRlIGlzIGNvbnRhY3RzKTpcbiAqIDxwcmU+XG4gKiA8YSBocmVmPVwiIy9ob21lXCIgdWktc3JlZj1cImhvbWVcIj5Ib21lPC9hPiB8IDxhIGhyZWY9XCIjL2Fib3V0XCIgdWktc3JlZj1cImFib3V0XCI+QWJvdXQ8L2E+IHwgPGEgaHJlZj1cIiMvY29udGFjdHM/cGFnZT0yXCIgdWktc3JlZj1cIntwYWdlOiAyfVwiPk5leHQgcGFnZTwvYT5cbiAqIFxuICogPHVsPlxuICogICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxhIGhyZWY9XCIjL2NvbnRhY3RzLzFcIiB1aS1zcmVmPVwiY29udGFjdHMuZGV0YWlsKHsgaWQ6IGNvbnRhY3QuaWQgfSlcIj5Kb2U8L2E+XG4gKiAgICAgPC9saT5cbiAqICAgICA8bGkgbmctcmVwZWF0PVwiY29udGFjdCBpbiBjb250YWN0c1wiPlxuICogICAgICAgICA8YSBocmVmPVwiIy9jb250YWN0cy8yXCIgdWktc3JlZj1cImNvbnRhY3RzLmRldGFpbCh7IGlkOiBjb250YWN0LmlkIH0pXCI+QWxpY2U8L2E+XG4gKiAgICAgPC9saT5cbiAqICAgICA8bGkgbmctcmVwZWF0PVwiY29udGFjdCBpbiBjb250YWN0c1wiPlxuICogICAgICAgICA8YSBocmVmPVwiIy9jb250YWN0cy8zXCIgdWktc3JlZj1cImNvbnRhY3RzLmRldGFpbCh7IGlkOiBjb250YWN0LmlkIH0pXCI+Qm9iPC9hPlxuICogICAgIDwvbGk+XG4gKiA8L3VsPlxuICpcbiAqIDxhIHVpLXNyZWY9XCJob21lXCIgdWktc3JlZi1vcHRzPVwie3JlbG9hZDogdHJ1ZX1cIj5Ib21lPC9hPlxuICogPC9wcmU+XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVpLXNyZWYgJ3N0YXRlTmFtZScgY2FuIGJlIGFueSB2YWxpZCBhYnNvbHV0ZSBvciByZWxhdGl2ZSBzdGF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHVpLXNyZWYtb3B0cyBvcHRpb25zIHRvIHBhc3MgdG8ge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjZ28gJHN0YXRlLmdvKCl9XG4gKi9cbiRTdGF0ZVJlZkRpcmVjdGl2ZS4kaW5qZWN0ID0gWyckc3RhdGUnLCAnJHRpbWVvdXQnXTtcbmZ1bmN0aW9uICRTdGF0ZVJlZkRpcmVjdGl2ZSgkc3RhdGUsICR0aW1lb3V0KSB7XG4gIHZhciBhbGxvd2VkT3B0aW9ucyA9IFsnbG9jYXRpb24nLCAnaW5oZXJpdCcsICdyZWxvYWQnLCAnYWJzb2x1dGUnXTtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogWyc/XnVpU3JlZkFjdGl2ZScsICc/XnVpU3JlZkFjdGl2ZUVxJ10sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCB1aVNyZWZBY3RpdmUpIHtcbiAgICAgIHZhciByZWYgPSBwYXJzZVN0YXRlUmVmKGF0dHJzLnVpU3JlZiwgJHN0YXRlLmN1cnJlbnQubmFtZSk7XG4gICAgICB2YXIgcGFyYW1zID0gbnVsbCwgdXJsID0gbnVsbCwgYmFzZSA9IHN0YXRlQ29udGV4dChlbGVtZW50KSB8fCAkc3RhdGUuJGN1cnJlbnQ7XG4gICAgICAvLyBTVkdBRWxlbWVudCBkb2VzIG5vdCB1c2UgdGhlIGhyZWYgYXR0cmlidXRlLCBidXQgcmF0aGVyIHRoZSAneGxpbmtIcmVmJyBhdHRyaWJ1dGUuXG4gICAgICB2YXIgaHJlZktpbmQgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZWxlbWVudC5wcm9wKCdocmVmJykpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nID9cbiAgICAgICAgICAgICAgICAgJ3hsaW5rOmhyZWYnIDogJ2hyZWYnO1xuICAgICAgdmFyIG5ld0hyZWYgPSBudWxsLCBpc0FuY2hvciA9IGVsZW1lbnQucHJvcChcInRhZ05hbWVcIikudG9VcHBlckNhc2UoKSA9PT0gXCJBXCI7XG4gICAgICB2YXIgaXNGb3JtID0gZWxlbWVudFswXS5ub2RlTmFtZSA9PT0gXCJGT1JNXCI7XG4gICAgICB2YXIgYXR0ciA9IGlzRm9ybSA/IFwiYWN0aW9uXCIgOiBocmVmS2luZCwgbmF2ID0gdHJ1ZTtcblxuICAgICAgdmFyIG9wdGlvbnMgPSB7IHJlbGF0aXZlOiBiYXNlLCBpbmhlcml0OiB0cnVlIH07XG4gICAgICB2YXIgb3B0aW9uc092ZXJyaWRlID0gc2NvcGUuJGV2YWwoYXR0cnMudWlTcmVmT3B0cykgfHwge307XG5cbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChhbGxvd2VkT3B0aW9ucywgZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgIGlmIChvcHRpb24gaW4gb3B0aW9uc092ZXJyaWRlKSB7XG4gICAgICAgICAgb3B0aW9uc1tvcHRpb25dID0gb3B0aW9uc092ZXJyaWRlW29wdGlvbl07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24obmV3VmFsKSB7XG4gICAgICAgIGlmIChuZXdWYWwpIHBhcmFtcyA9IGFuZ3VsYXIuY29weShuZXdWYWwpO1xuICAgICAgICBpZiAoIW5hdikgcmV0dXJuO1xuXG4gICAgICAgIG5ld0hyZWYgPSAkc3RhdGUuaHJlZihyZWYuc3RhdGUsIHBhcmFtcywgb3B0aW9ucyk7XG5cbiAgICAgICAgdmFyIGFjdGl2ZURpcmVjdGl2ZSA9IHVpU3JlZkFjdGl2ZVsxXSB8fCB1aVNyZWZBY3RpdmVbMF07XG4gICAgICAgIGlmIChhY3RpdmVEaXJlY3RpdmUpIHtcbiAgICAgICAgICBhY3RpdmVEaXJlY3RpdmUuJCRhZGRTdGF0ZUluZm8ocmVmLnN0YXRlLCBwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdIcmVmID09PSBudWxsKSB7XG4gICAgICAgICAgbmF2ID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGF0dHJzLiRzZXQoYXR0ciwgbmV3SHJlZik7XG4gICAgICB9O1xuXG4gICAgICBpZiAocmVmLnBhcmFtRXhwcikge1xuICAgICAgICBzY29wZS4kd2F0Y2gocmVmLnBhcmFtRXhwciwgZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICBpZiAobmV3VmFsICE9PSBwYXJhbXMpIHVwZGF0ZShuZXdWYWwpO1xuICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgcGFyYW1zID0gYW5ndWxhci5jb3B5KHNjb3BlLiRldmFsKHJlZi5wYXJhbUV4cHIpKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZSgpO1xuXG4gICAgICBpZiAoaXNGb3JtKSByZXR1cm47XG5cbiAgICAgIGVsZW1lbnQuYmluZChcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGJ1dHRvbiA9IGUud2hpY2ggfHwgZS5idXR0b247XG4gICAgICAgIGlmICggIShidXR0b24gPiAxIHx8IGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgZS5zaGlmdEtleSB8fCBlbGVtZW50LmF0dHIoJ3RhcmdldCcpKSApIHtcbiAgICAgICAgICAvLyBIQUNLOiBUaGlzIGlzIHRvIGFsbG93IG5nLWNsaWNrcyB0byBiZSBwcm9jZXNzZWQgYmVmb3JlIHRoZSB0cmFuc2l0aW9uIGlzIGluaXRpYXRlZDpcbiAgICAgICAgICB2YXIgdHJhbnNpdGlvbiA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHN0YXRlLmdvKHJlZi5zdGF0ZSwgcGFyYW1zLCBvcHRpb25zKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAvLyBpZiB0aGUgc3RhdGUgaGFzIG5vIFVSTCwgaWdub3JlIG9uZSBwcmV2ZW50RGVmYXVsdCBmcm9tIHRoZSA8YT4gZGlyZWN0aXZlLlxuICAgICAgICAgIHZhciBpZ25vcmVQcmV2ZW50RGVmYXVsdENvdW50ID0gaXNBbmNob3IgJiYgIW5ld0hyZWYgPyAxOiAwO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpZ25vcmVQcmV2ZW50RGVmYXVsdENvdW50LS0gPD0gMClcbiAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRyYW5zaXRpb24pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXNyZWYtYWN0aXZlXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlUGFyYW1zXG4gKiBAcmVxdWlyZXMgJGludGVycG9sYXRlXG4gKlxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZGlyZWN0aXZlIHdvcmtpbmcgYWxvbmdzaWRlIHVpLXNyZWYgdG8gYWRkIGNsYXNzZXMgdG8gYW4gZWxlbWVudCB3aGVuIHRoZVxuICogcmVsYXRlZCB1aS1zcmVmIGRpcmVjdGl2ZSdzIHN0YXRlIGlzIGFjdGl2ZSwgYW5kIHJlbW92aW5nIHRoZW0gd2hlbiBpdCBpcyBpbmFjdGl2ZS5cbiAqIFRoZSBwcmltYXJ5IHVzZS1jYXNlIGlzIHRvIHNpbXBsaWZ5IHRoZSBzcGVjaWFsIGFwcGVhcmFuY2Ugb2YgbmF2aWdhdGlvbiBtZW51c1xuICogcmVseWluZyBvbiBgdWktc3JlZmAsIGJ5IGhhdmluZyB0aGUgXCJhY3RpdmVcIiBzdGF0ZSdzIG1lbnUgYnV0dG9uIGFwcGVhciBkaWZmZXJlbnQsXG4gKiBkaXN0aW5ndWlzaGluZyBpdCBmcm9tIHRoZSBpbmFjdGl2ZSBtZW51IGl0ZW1zLlxuICpcbiAqIHVpLXNyZWYtYWN0aXZlIGNhbiBsaXZlIG9uIHRoZSBzYW1lIGVsZW1lbnQgYXMgdWktc3JlZiBvciBvbiBhIHBhcmVudCBlbGVtZW50LiBUaGUgZmlyc3RcbiAqIHVpLXNyZWYtYWN0aXZlIGZvdW5kIGF0IHRoZSBzYW1lIGxldmVsIG9yIGFib3ZlIHRoZSB1aS1zcmVmIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBXaWxsIGFjdGl2YXRlIHdoZW4gdGhlIHVpLXNyZWYncyB0YXJnZXQgc3RhdGUgb3IgYW55IGNoaWxkIHN0YXRlIGlzIGFjdGl2ZS4gSWYgeW91XG4gKiBuZWVkIHRvIGFjdGl2YXRlIG9ubHkgd2hlbiB0aGUgdWktc3JlZiB0YXJnZXQgc3RhdGUgaXMgYWN0aXZlIGFuZCAqbm90KiBhbnkgb2ZcbiAqIGl0J3MgY2hpbGRyZW4sIHRoZW4geW91IHdpbGwgdXNlXG4gKiB7QGxpbmsgdWkucm91dGVyLnN0YXRlLmRpcmVjdGl2ZTp1aS1zcmVmLWFjdGl2ZS1lcSB1aS1zcmVmLWFjdGl2ZS1lcX1cbiAqXG4gKiBAZXhhbXBsZVxuICogR2l2ZW4gdGhlIGZvbGxvd2luZyB0ZW1wbGF0ZTpcbiAqIDxwcmU+XG4gKiA8dWw+XG4gKiAgIDxsaSB1aS1zcmVmLWFjdGl2ZT1cImFjdGl2ZVwiIGNsYXNzPVwiaXRlbVwiPlxuICogICAgIDxhIGhyZWYgdWktc3JlZj1cImFwcC51c2VyKHt1c2VyOiAnYmlsYm9iYWdnaW5zJ30pXCI+QGJpbGJvYmFnZ2luczwvYT5cbiAqICAgPC9saT5cbiAqIDwvdWw+XG4gKiA8L3ByZT5cbiAqXG4gKlxuICogV2hlbiB0aGUgYXBwIHN0YXRlIGlzIFwiYXBwLnVzZXJcIiAob3IgYW55IGNoaWxkcmVuIHN0YXRlcyksIGFuZCBjb250YWlucyB0aGUgc3RhdGUgcGFyYW1ldGVyIFwidXNlclwiIHdpdGggdmFsdWUgXCJiaWxib2JhZ2dpbnNcIixcbiAqIHRoZSByZXN1bHRpbmcgSFRNTCB3aWxsIGFwcGVhciBhcyAobm90ZSB0aGUgJ2FjdGl2ZScgY2xhc3MpOlxuICogPHByZT5cbiAqIDx1bD5cbiAqICAgPGxpIHVpLXNyZWYtYWN0aXZlPVwiYWN0aXZlXCIgY2xhc3M9XCJpdGVtIGFjdGl2ZVwiPlxuICogICAgIDxhIHVpLXNyZWY9XCJhcHAudXNlcih7dXNlcjogJ2JpbGJvYmFnZ2lucyd9KVwiIGhyZWY9XCIvdXNlcnMvYmlsYm9iYWdnaW5zXCI+QGJpbGJvYmFnZ2luczwvYT5cbiAqICAgPC9saT5cbiAqIDwvdWw+XG4gKiA8L3ByZT5cbiAqXG4gKiBUaGUgY2xhc3MgbmFtZSBpcyBpbnRlcnBvbGF0ZWQgKipvbmNlKiogZHVyaW5nIHRoZSBkaXJlY3RpdmVzIGxpbmsgdGltZSAoYW55IGZ1cnRoZXIgY2hhbmdlcyB0byB0aGVcbiAqIGludGVycG9sYXRlZCB2YWx1ZSBhcmUgaWdub3JlZCkuXG4gKlxuICogTXVsdGlwbGUgY2xhc3NlcyBtYXkgYmUgc3BlY2lmaWVkIGluIGEgc3BhY2Utc2VwYXJhdGVkIGZvcm1hdDpcbiAqIDxwcmU+XG4gKiA8dWw+XG4gKiAgIDxsaSB1aS1zcmVmLWFjdGl2ZT0nY2xhc3MxIGNsYXNzMiBjbGFzczMnPlxuICogICAgIDxhIHVpLXNyZWY9XCJhcHAudXNlclwiPmxpbms8L2E+XG4gKiAgIDwvbGk+XG4gKiA8L3VsPlxuICogPC9wcmU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXNyZWYtYWN0aXZlLWVxXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlUGFyYW1zXG4gKiBAcmVxdWlyZXMgJGludGVycG9sYXRlXG4gKlxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBzYW1lIGFzIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXNyZWYtYWN0aXZlIHVpLXNyZWYtYWN0aXZlfSBidXQgd2lsbCBvbmx5IGFjdGl2YXRlXG4gKiB3aGVuIHRoZSBleGFjdCB0YXJnZXQgc3RhdGUgdXNlZCBpbiB0aGUgYHVpLXNyZWZgIGlzIGFjdGl2ZTsgbm8gY2hpbGQgc3RhdGVzLlxuICpcbiAqL1xuJFN0YXRlUmVmQWN0aXZlRGlyZWN0aXZlLiRpbmplY3QgPSBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiAkU3RhdGVSZWZBY3RpdmVEaXJlY3RpdmUoJHN0YXRlLCAkc3RhdGVQYXJhbXMsICRpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4gIHtcbiAgICByZXN0cmljdDogXCJBXCIsXG4gICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgZnVuY3Rpb24gKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykge1xuICAgICAgdmFyIHN0YXRlcyA9IFtdLCBhY3RpdmVDbGFzcztcblxuICAgICAgLy8gVGhlcmUgcHJvYmFibHkgaXNuJ3QgbXVjaCBwb2ludCBpbiAkb2JzZXJ2aW5nIHRoaXNcbiAgICAgIC8vIHVpU3JlZkFjdGl2ZSBhbmQgdWlTcmVmQWN0aXZlRXEgc2hhcmUgdGhlIHNhbWUgZGlyZWN0aXZlIG9iamVjdCB3aXRoIHNvbWVcbiAgICAgIC8vIHNsaWdodCBkaWZmZXJlbmNlIGluIGxvZ2ljIHJvdXRpbmdcbiAgICAgIGFjdGl2ZUNsYXNzID0gJGludGVycG9sYXRlKCRhdHRycy51aVNyZWZBY3RpdmVFcSB8fCAkYXR0cnMudWlTcmVmQWN0aXZlIHx8ICcnLCBmYWxzZSkoJHNjb3BlKTtcblxuICAgICAgLy8gQWxsb3cgdWlTcmVmIHRvIGNvbW11bmljYXRlIHdpdGggdWlTcmVmQWN0aXZlW0VxdWFsc11cbiAgICAgIHRoaXMuJCRhZGRTdGF0ZUluZm8gPSBmdW5jdGlvbiAobmV3U3RhdGUsIG5ld1BhcmFtcykge1xuICAgICAgICB2YXIgc3RhdGUgPSAkc3RhdGUuZ2V0KG5ld1N0YXRlLCBzdGF0ZUNvbnRleHQoJGVsZW1lbnQpKTtcblxuICAgICAgICBzdGF0ZXMucHVzaCh7XG4gICAgICAgICAgc3RhdGU6IHN0YXRlIHx8IHsgbmFtZTogbmV3U3RhdGUgfSxcbiAgICAgICAgICBwYXJhbXM6IG5ld1BhcmFtc1xuICAgICAgICB9KTtcblxuICAgICAgICB1cGRhdGUoKTtcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCB1cGRhdGUpO1xuXG4gICAgICAvLyBVcGRhdGUgcm91dGUgc3RhdGVcbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKGFueU1hdGNoKCkpIHtcbiAgICAgICAgICAkZWxlbWVudC5hZGRDbGFzcyhhY3RpdmVDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnQucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFueU1hdGNoKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChpc01hdGNoKHN0YXRlc1tpXS5zdGF0ZSwgc3RhdGVzW2ldLnBhcmFtcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGlzTWF0Y2goc3RhdGUsIHBhcmFtcykge1xuICAgICAgICBpZiAodHlwZW9mICRhdHRycy51aVNyZWZBY3RpdmVFcSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmlzKHN0YXRlLm5hbWUsIHBhcmFtcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRzdGF0ZS5pbmNsdWRlcyhzdGF0ZS5uYW1lLCBwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfV1cbiAgfTtcbn1cblxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5zdGF0ZScpXG4gIC5kaXJlY3RpdmUoJ3VpU3JlZicsICRTdGF0ZVJlZkRpcmVjdGl2ZSlcbiAgLmRpcmVjdGl2ZSgndWlTcmVmQWN0aXZlJywgJFN0YXRlUmVmQWN0aXZlRGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCd1aVNyZWZBY3RpdmVFcScsICRTdGF0ZVJlZkFjdGl2ZURpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgdWkucm91dGVyLnN0YXRlLmZpbHRlcjppc1N0YXRlXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRyYW5zbGF0ZXMgdG8ge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjbWV0aG9kc19pcyAkc3RhdGUuaXMoXCJzdGF0ZU5hbWVcIil9LlxuICovXG4kSXNTdGF0ZUZpbHRlci4kaW5qZWN0ID0gWyckc3RhdGUnXTtcbmZ1bmN0aW9uICRJc1N0YXRlRmlsdGVyKCRzdGF0ZSkge1xuICB2YXIgaXNGaWx0ZXIgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICByZXR1cm4gJHN0YXRlLmlzKHN0YXRlKTtcbiAgfTtcbiAgaXNGaWx0ZXIuJHN0YXRlZnVsID0gdHJ1ZTtcbiAgcmV0dXJuIGlzRmlsdGVyO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS5maWx0ZXI6aW5jbHVkZWRCeVN0YXRlXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRyYW5zbGF0ZXMgdG8ge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjbWV0aG9kc19pbmNsdWRlcyAkc3RhdGUuaW5jbHVkZXMoJ2Z1bGxPclBhcnRpYWxTdGF0ZU5hbWUnKX0uXG4gKi9cbiRJbmNsdWRlZEJ5U3RhdGVGaWx0ZXIuJGluamVjdCA9IFsnJHN0YXRlJ107XG5mdW5jdGlvbiAkSW5jbHVkZWRCeVN0YXRlRmlsdGVyKCRzdGF0ZSkge1xuICB2YXIgaW5jbHVkZXNGaWx0ZXIgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICByZXR1cm4gJHN0YXRlLmluY2x1ZGVzKHN0YXRlKTtcbiAgfTtcbiAgaW5jbHVkZXNGaWx0ZXIuJHN0YXRlZnVsID0gdHJ1ZTtcbiAgcmV0dXJuICBpbmNsdWRlc0ZpbHRlcjtcbn1cblxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5zdGF0ZScpXG4gIC5maWx0ZXIoJ2lzU3RhdGUnLCAkSXNTdGF0ZUZpbHRlcilcbiAgLmZpbHRlcignaW5jbHVkZWRCeVN0YXRlJywgJEluY2x1ZGVkQnlTdGF0ZUZpbHRlcik7XG59KSh3aW5kb3csIHdpbmRvdy5hbmd1bGFyKTsiLCIvLyAgICAgVW5kZXJzY29yZS5qcyAxLjguM1xuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4vLyAgICAgKGMpIDIwMDktMjAxNSBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcblxuICAvLyBCYXNlbGluZSBzZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZXhwb3J0c2Agb24gdGhlIHNlcnZlci5cbiAgdmFyIHJvb3QgPSB0aGlzO1xuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXG4gIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87XG5cbiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjpcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgRnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4gIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLlxuICB2YXJcbiAgICBwdXNoICAgICAgICAgICAgID0gQXJyYXlQcm90by5wdXNoLFxuICAgIHNsaWNlICAgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlLFxuICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICBoYXNPd25Qcm9wZXJ0eSAgID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlXG4gIC8vIGFyZSBkZWNsYXJlZCBoZXJlLlxuICB2YXJcbiAgICBuYXRpdmVJc0FycmF5ICAgICAgPSBBcnJheS5pc0FycmF5LFxuICAgIG5hdGl2ZUtleXMgICAgICAgICA9IE9iamVjdC5rZXlzLFxuICAgIG5hdGl2ZUJpbmQgICAgICAgICA9IEZ1bmNQcm90by5iaW5kLFxuICAgIG5hdGl2ZUNyZWF0ZSAgICAgICA9IE9iamVjdC5jcmVhdGU7XG5cbiAgLy8gTmFrZWQgZnVuY3Rpb24gcmVmZXJlbmNlIGZvciBzdXJyb2dhdGUtcHJvdG90eXBlLXN3YXBwaW5nLlxuICB2YXIgQ3RvciA9IGZ1bmN0aW9uKCl7fTtcblxuICAvLyBDcmVhdGUgYSBzYWZlIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yIHVzZSBiZWxvdy5cbiAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgXykgcmV0dXJuIG9iajtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgXykpIHJldHVybiBuZXcgXyhvYmopO1xuICAgIHRoaXMuX3dyYXBwZWQgPSBvYmo7XG4gIH07XG5cbiAgLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgKipOb2RlLmpzKiosIHdpdGhcbiAgLy8gYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgZm9yIHRoZSBvbGQgYHJlcXVpcmUoKWAgQVBJLiBJZiB3ZSdyZSBpblxuICAvLyB0aGUgYnJvd3NlciwgYWRkIGBfYCBhcyBhIGdsb2JhbCBvYmplY3QuXG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF87XG4gICAgfVxuICAgIGV4cG9ydHMuXyA9IF87XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fID0gXztcbiAgfVxuXG4gIC8vIEN1cnJlbnQgdmVyc2lvbi5cbiAgXy5WRVJTSU9OID0gJzEuOC4zJztcblxuICAvLyBJbnRlcm5hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gZWZmaWNpZW50IChmb3IgY3VycmVudCBlbmdpbmVzKSB2ZXJzaW9uXG4gIC8vIG9mIHRoZSBwYXNzZWQtaW4gY2FsbGJhY2ssIHRvIGJlIHJlcGVhdGVkbHkgYXBwbGllZCBpbiBvdGhlciBVbmRlcnNjb3JlXG4gIC8vIGZ1bmN0aW9ucy5cbiAgdmFyIG9wdGltaXplQ2IgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHJldHVybiBmdW5jO1xuICAgIHN3aXRjaCAoYXJnQ291bnQgPT0gbnVsbCA/IDMgOiBhcmdDb3VudCkge1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBBIG1vc3RseS1pbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBjYWxsYmFja3MgdGhhdCBjYW4gYmUgYXBwbGllZFxuICAvLyB0byBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdGhlIGRlc2lyZWQgcmVzdWx0IOKAlCBlaXRoZXJcbiAgLy8gaWRlbnRpdHksIGFuIGFyYml0cmFyeSBjYWxsYmFjaywgYSBwcm9wZXJ0eSBtYXRjaGVyLCBvciBhIHByb3BlcnR5IGFjY2Vzc29yLlxuICB2YXIgY2IgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIF8uaWRlbnRpdHk7XG4gICAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiBvcHRpbWl6ZUNiKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCk7XG4gICAgaWYgKF8uaXNPYmplY3QodmFsdWUpKSByZXR1cm4gXy5tYXRjaGVyKHZhbHVlKTtcbiAgICByZXR1cm4gXy5wcm9wZXJ0eSh2YWx1ZSk7XG4gIH07XG4gIF8uaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBjYih2YWx1ZSwgY29udGV4dCwgSW5maW5pdHkpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhc3NpZ25lciBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVBc3NpZ25lciA9IGZ1bmN0aW9uKGtleXNGdW5jLCB1bmRlZmluZWRPbmx5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMiB8fCBvYmogPT0gbnVsbCkgcmV0dXJuIG9iajtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF0sXG4gICAgICAgICAgICBrZXlzID0ga2V5c0Z1bmMoc291cmNlKSxcbiAgICAgICAgICAgIGwgPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoIXVuZGVmaW5lZE9ubHkgfHwgb2JqW2tleV0gPT09IHZvaWQgMCkgb2JqW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIGFub3RoZXIuXG4gIHZhciBiYXNlQ3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KHByb3RvdHlwZSkpIHJldHVybiB7fTtcbiAgICBpZiAobmF0aXZlQ3JlYXRlKSByZXR1cm4gbmF0aXZlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgQ3Rvci5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBDdG9yO1xuICAgIEN0b3IucHJvdG90eXBlID0gbnVsbDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBwcm9wZXJ0eSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtrZXldO1xuICAgIH07XG4gIH07XG5cbiAgLy8gSGVscGVyIGZvciBjb2xsZWN0aW9uIG1ldGhvZHMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBjb2xsZWN0aW9uXG4gIC8vIHNob3VsZCBiZSBpdGVyYXRlZCBhcyBhbiBhcnJheSBvciBhcyBhbiBvYmplY3RcbiAgLy8gUmVsYXRlZDogaHR0cDovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9sZW5ndGhcbiAgLy8gQXZvaWRzIGEgdmVyeSBuYXN0eSBpT1MgOCBKSVQgYnVnIG9uIEFSTS02NC4gIzIwOTRcbiAgdmFyIE1BWF9BUlJBWV9JTkRFWCA9IE1hdGgucG93KDIsIDUzKSAtIDE7XG4gIHZhciBnZXRMZW5ndGggPSBwcm9wZXJ0eSgnbGVuZ3RoJyk7XG4gIHZhciBpc0FycmF5TGlrZSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKGNvbGxlY3Rpb24pO1xuICAgIHJldHVybiB0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInICYmIGxlbmd0aCA+PSAwICYmIGxlbmd0aCA8PSBNQVhfQVJSQVlfSU5ERVg7XG4gIH07XG5cbiAgLy8gQ29sbGVjdGlvbiBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBUaGUgY29ybmVyc3RvbmUsIGFuIGBlYWNoYCBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC5cbiAgLy8gSGFuZGxlcyByYXcgb2JqZWN0cyBpbiBhZGRpdGlvbiB0byBhcnJheS1saWtlcy4gVHJlYXRzIGFsbFxuICAvLyBzcGFyc2UgYXJyYXktbGlrZXMgYXMgaWYgdGhleSB3ZXJlIGRlbnNlLlxuICBfLmVhY2ggPSBfLmZvckVhY2ggPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIgaSwgbGVuZ3RoO1xuICAgIGlmIChpc0FycmF5TGlrZShvYmopKSB7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0ZWUob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYXRlZShvYmpba2V5c1tpXV0sIGtleXNbaV0sIG9iaik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQuXG4gIF8ubWFwID0gXy5jb2xsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICByZXN1bHRzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgcmVzdWx0c1tpbmRleF0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIHJlZHVjaW5nIGZ1bmN0aW9uIGl0ZXJhdGluZyBsZWZ0IG9yIHJpZ2h0LlxuICBmdW5jdGlvbiBjcmVhdGVSZWR1Y2UoZGlyKSB7XG4gICAgLy8gT3B0aW1pemVkIGl0ZXJhdG9yIGZ1bmN0aW9uIGFzIHVzaW5nIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAvLyBpbiB0aGUgbWFpbiBmdW5jdGlvbiB3aWxsIGRlb3B0aW1pemUgdGhlLCBzZWUgIzE5OTEuXG4gICAgZnVuY3Rpb24gaXRlcmF0b3Iob2JqLCBpdGVyYXRlZSwgbWVtbywga2V5cywgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgZm9yICg7IGluZGV4ID49IDAgJiYgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IGRpcikge1xuICAgICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGNvbnRleHQpIHtcbiAgICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgNCk7XG4gICAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxuICAgICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZGlyID4gMCA/IDAgOiBsZW5ndGggLSAxO1xuICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBpbml0aWFsIHZhbHVlIGlmIG5vbmUgaXMgcHJvdmlkZWQuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgbWVtbyA9IG9ialtrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGRpcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRvcihvYmosIGl0ZXJhdGVlLCBtZW1vLCBrZXlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gKipSZWR1Y2UqKiBidWlsZHMgdXAgYSBzaW5nbGUgcmVzdWx0IGZyb20gYSBsaXN0IG9mIHZhbHVlcywgYWthIGBpbmplY3RgLFxuICAvLyBvciBgZm9sZGxgLlxuICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGNyZWF0ZVJlZHVjZSgxKTtcblxuICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBjcmVhdGVSZWR1Y2UoLTEpO1xuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC5cbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBrZXk7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIGtleSA9IF8uZmluZEluZGV4KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAga2V5ID0gXy5maW5kS2V5KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKGtleSAhPT0gdm9pZCAwICYmIGtleSAhPT0gLTEpIHJldHVybiBvYmpba2V5XTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLlxuICBfLmZpbHRlciA9IF8uc2VsZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy5cbiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIF8ubmVnYXRlKGNiKHByZWRpY2F0ZSkpLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYWxsYC5cbiAgXy5ldmVyeSA9IF8uYWxsID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAoIXByZWRpY2F0ZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYGFueWAuXG4gIF8uc29tZSA9IF8uYW55ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgdGhlIGFycmF5IG9yIG9iamVjdCBjb250YWlucyBhIGdpdmVuIGl0ZW0gKHVzaW5nIGA9PT1gKS5cbiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZXNgIGFuZCBgaW5jbHVkZWAuXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGVzID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCBpdGVtLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgIGlmICh0eXBlb2YgZnJvbUluZGV4ICE9ICdudW1iZXInIHx8IGd1YXJkKSBmcm9tSW5kZXggPSAwO1xuICAgIHJldHVybiBfLmluZGV4T2Yob2JqLCBpdGVtLCBmcm9tSW5kZXgpID49IDA7XG4gIH07XG5cbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG4gIF8uaW52b2tlID0gZnVuY3Rpb24ob2JqLCBtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgaXNGdW5jID0gXy5pc0Z1bmN0aW9uKG1ldGhvZCk7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNGdW5jID8gbWV0aG9kIDogdmFsdWVbbWV0aG9kXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyBmdW5jIDogZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgbWFwYDogZmV0Y2hpbmcgYSBwcm9wZXJ0eS5cbiAgXy5wbHVjayA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgXy5wcm9wZXJ0eShrZXkpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzXG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ud2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmluZGA6IGdldHRpbmcgdGhlIGZpcnN0IG9iamVjdFxuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmZpbmRXaGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maW5kKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gLUluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSAtSW5maW5pdHksXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCAmJiBvYmogIT0gbnVsbCkge1xuICAgICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBpZiAodmFsdWUgPiByZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgICAgIGlmIChjb21wdXRlZCA+IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gLUluZmluaXR5ICYmIHJlc3VsdCA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbWluaW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS5cbiAgXy5taW4gPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IEluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSBJbmZpbml0eSxcbiAgICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICAgIGlmIChpdGVyYXRlZSA9PSBudWxsICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICAgIGlmICh2YWx1ZSA8IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KTtcbiAgICAgICAgaWYgKGNvbXB1dGVkIDwgbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSBJbmZpbml0eSAmJiByZXN1bHQgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFNodWZmbGUgYSBjb2xsZWN0aW9uLCB1c2luZyB0aGUgbW9kZXJuIHZlcnNpb24gb2YgdGhlXG4gIC8vIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXLigJNZYXRlc19zaHVmZmxlKS5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHNldCA9IGlzQXJyYXlMaWtlKG9iaikgPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBzZXQubGVuZ3RoO1xuICAgIHZhciBzaHVmZmxlZCA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwLCByYW5kOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmFuZCA9IF8ucmFuZG9tKDAsIGluZGV4KTtcbiAgICAgIGlmIChyYW5kICE9PSBpbmRleCkgc2h1ZmZsZWRbaW5kZXhdID0gc2h1ZmZsZWRbcmFuZF07XG4gICAgICBzaHVmZmxlZFtyYW5kXSA9IHNldFtpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBzaHVmZmxlZDtcbiAgfTtcblxuICAvLyBTYW1wbGUgKipuKiogcmFuZG9tIHZhbHVlcyBmcm9tIGEgY29sbGVjdGlvbi5cbiAgLy8gSWYgKipuKiogaXMgbm90IHNwZWNpZmllZCwgcmV0dXJucyBhIHNpbmdsZSByYW5kb20gZWxlbWVudC5cbiAgLy8gVGhlIGludGVybmFsIGBndWFyZGAgYXJndW1lbnQgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgbWFwYC5cbiAgXy5zYW1wbGUgPSBmdW5jdGlvbihvYmosIG4sIGd1YXJkKSB7XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkge1xuICAgICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgICAgcmV0dXJuIG9ialtfLnJhbmRvbShvYmoubGVuZ3RoIC0gMSldO1xuICAgIH1cbiAgICByZXR1cm4gXy5zaHVmZmxlKG9iaikuc2xpY2UoMCwgTWF0aC5tYXgoMCwgbikpO1xuICB9O1xuXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRlZS5cbiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIF8ucGx1Y2soXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBjcml0ZXJpYTogaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KVxuICAgICAgfTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7XG4gICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0LmluZGV4IC0gcmlnaHQuaW5kZXg7XG4gICAgfSksICd2YWx1ZScpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSBcImdyb3VwIGJ5XCIgb3BlcmF0aW9ucy5cbiAgdmFyIGdyb3VwID0gZnVuY3Rpb24oYmVoYXZpb3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGtleSA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgb2JqKTtcbiAgICAgICAgYmVoYXZpb3IocmVzdWx0LCB2YWx1ZSwga2V5KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEdyb3VwcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLiBQYXNzIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGVcbiAgLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uXG4gIF8uZ3JvdXBCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIGlmIChfLmhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldLnB1c2godmFsdWUpOyBlbHNlIHJlc3VsdFtrZXldID0gW3ZhbHVlXTtcbiAgfSk7XG5cbiAgLy8gSW5kZXhlcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLCBzaW1pbGFyIHRvIGBncm91cEJ5YCwgYnV0IGZvclxuICAvLyB3aGVuIHlvdSBrbm93IHRoYXQgeW91ciBpbmRleCB2YWx1ZXMgd2lsbCBiZSB1bmlxdWUuXG4gIF8uaW5kZXhCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH0pO1xuXG4gIC8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuICAvLyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlIHRvIGNvdW50IGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgLy8gY3JpdGVyaW9uLlxuICBfLmNvdW50QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoXy5oYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XSsrOyBlbHNlIHJlc3VsdFtrZXldID0gMTtcbiAgfSk7XG5cbiAgLy8gU2FmZWx5IGNyZWF0ZSBhIHJlYWwsIGxpdmUgYXJyYXkgZnJvbSBhbnl0aGluZyBpdGVyYWJsZS5cbiAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBbXTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikpIHJldHVybiBzbGljZS5jYWxsKG9iaik7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpO1xuICAgIHJldHVybiBfLnZhbHVlcyhvYmopO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIG9iamVjdC5cbiAgXy5zaXplID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gMDtcbiAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqKSA/IG9iai5sZW5ndGggOiBfLmtleXMob2JqKS5sZW5ndGg7XG4gIH07XG5cbiAgLy8gU3BsaXQgYSBjb2xsZWN0aW9uIGludG8gdHdvIGFycmF5czogb25lIHdob3NlIGVsZW1lbnRzIGFsbCBzYXRpc2Z5IHRoZSBnaXZlblxuICAvLyBwcmVkaWNhdGUsIGFuZCBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIGRvIG5vdCBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUuXG4gIF8ucGFydGl0aW9uID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBwYXNzID0gW10sIGZhaWwgPSBbXTtcbiAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHtcbiAgICAgIChwcmVkaWNhdGUodmFsdWUsIGtleSwgb2JqKSA/IHBhc3MgOiBmYWlsKS5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW3Bhc3MsIGZhaWxdO1xuICB9O1xuXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVja1xuICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbMF07XG4gICAgcmV0dXJuIF8uaW5pdGlhbChhcnJheSwgYXJyYXkubGVuZ3RoIC0gbik7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgbGFzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEVzcGVjaWFsbHkgdXNlZnVsIG9uXG4gIC8vIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIGFsbCB0aGUgdmFsdWVzIGluXG4gIC8vIHRoZSBhcnJheSwgZXhjbHVkaW5nIHRoZSBsYXN0IE4uXG4gIF8uaW5pdGlhbCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSAobiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pKSk7XG4gIH07XG5cbiAgLy8gR2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGxhc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIF8ucmVzdChhcnJheSwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gbikpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgdGFpbGAgYW5kIGBkcm9wYC5cbiAgLy8gRXNwZWNpYWxseSB1c2VmdWwgb24gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgYW4gKipuKiogd2lsbCByZXR1cm5cbiAgLy8gdGhlIHJlc3QgTiB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuICBfLnJlc3QgPSBfLnRhaWwgPSBfLmRyb3AgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgbiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pO1xuICB9O1xuXG4gIC8vIFRyaW0gb3V0IGFsbCBmYWxzeSB2YWx1ZXMgZnJvbSBhbiBhcnJheS5cbiAgXy5jb21wYWN0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIF8uaWRlbnRpdHkpO1xuICB9O1xuXG4gIC8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIGEgcmVjdXJzaXZlIGBmbGF0dGVuYCBmdW5jdGlvbi5cbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihpbnB1dCwgc2hhbGxvdywgc3RyaWN0LCBzdGFydEluZGV4KSB7XG4gICAgdmFyIG91dHB1dCA9IFtdLCBpZHggPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4IHx8IDAsIGxlbmd0aCA9IGdldExlbmd0aChpbnB1dCk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmIChfLmlzQXJyYXkodmFsdWUpIHx8IF8uaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICAvL2ZsYXR0ZW4gY3VycmVudCBsZXZlbCBvZiBhcnJheSBvciBhcmd1bWVudHMgb2JqZWN0XG4gICAgICAgIGlmICghc2hhbGxvdykgdmFsdWUgPSBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBzdHJpY3QpO1xuICAgICAgICB2YXIgaiA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgb3V0cHV0Lmxlbmd0aCArPSBsZW47XG4gICAgICAgIHdoaWxlIChqIDwgbGVuKSB7XG4gICAgICAgICAgb3V0cHV0W2lkeCsrXSA9IHZhbHVlW2orK107XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCkge1xuICAgICAgICBvdXRwdXRbaWR4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgLy8gRmxhdHRlbiBvdXQgYW4gYXJyYXksIGVpdGhlciByZWN1cnNpdmVseSAoYnkgZGVmYXVsdCksIG9yIGp1c3Qgb25lIGxldmVsLlxuICBfLmZsYXR0ZW4gPSBmdW5jdGlvbihhcnJheSwgc2hhbGxvdykge1xuICAgIHJldHVybiBmbGF0dGVuKGFycmF5LCBzaGFsbG93LCBmYWxzZSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgdmVyc2lvbiBvZiB0aGUgYXJyYXkgdGhhdCBkb2VzIG5vdCBjb250YWluIHRoZSBzcGVjaWZpZWQgdmFsdWUocykuXG4gIF8ud2l0aG91dCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgcmV0dXJuIF8uZGlmZmVyZW5jZShhcnJheSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiB0aGUgYXJyYXkuIElmIHRoZSBhcnJheSBoYXMgYWxyZWFkeVxuICAvLyBiZWVuIHNvcnRlZCwgeW91IGhhdmUgdGhlIG9wdGlvbiBvZiB1c2luZyBhIGZhc3RlciBhbGdvcml0aG0uXG4gIC8vIEFsaWFzZWQgYXMgYHVuaXF1ZWAuXG4gIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGlmICghXy5pc0Jvb2xlYW4oaXNTb3J0ZWQpKSB7XG4gICAgICBjb250ZXh0ID0gaXRlcmF0ZWU7XG4gICAgICBpdGVyYXRlZSA9IGlzU29ydGVkO1xuICAgICAgaXNTb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGl0ZXJhdGVlICE9IG51bGwpIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldLFxuICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSwgaSwgYXJyYXkpIDogdmFsdWU7XG4gICAgICBpZiAoaXNTb3J0ZWQpIHtcbiAgICAgICAgaWYgKCFpIHx8IHNlZW4gIT09IGNvbXB1dGVkKSByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgIH0gZWxzZSBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKCFfLmNvbnRhaW5zKHNlZW4sIGNvbXB1dGVkKSkge1xuICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFfLmNvbnRhaW5zKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgdGhlIHVuaW9uOiBlYWNoIGRpc3RpbmN0IGVsZW1lbnQgZnJvbSBhbGwgb2ZcbiAgLy8gdGhlIHBhc3NlZC1pbiBhcnJheXMuXG4gIF8udW5pb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXy51bmlxKGZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZVxuICAvLyBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IGFycmF5W2ldO1xuICAgICAgaWYgKF8uY29udGFpbnMocmVzdWx0LCBpdGVtKSkgY29udGludWU7XG4gICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGFyZ3NMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoYXJndW1lbnRzW2pdLCBpdGVtKSkgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaiA9PT0gYXJnc0xlbmd0aCkgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuICBfLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gZmxhdHRlbihhcmd1bWVudHMsIHRydWUsIHRydWUsIDEpO1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgZnVuY3Rpb24odmFsdWUpe1xuICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBaaXAgdG9nZXRoZXIgbXVsdGlwbGUgbGlzdHMgaW50byBhIHNpbmdsZSBhcnJheSAtLSBlbGVtZW50cyB0aGF0IHNoYXJlXG4gIC8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLlxuICBfLnppcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLnVuemlwKGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQ29tcGxlbWVudCBvZiBfLnppcC4gVW56aXAgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgYW5kIGdyb3Vwc1xuICAvLyBlYWNoIGFycmF5J3MgZWxlbWVudHMgb24gc2hhcmVkIGluZGljZXNcbiAgXy51bnppcCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ICYmIF8ubWF4KGFycmF5LCBnZXRMZW5ndGgpLmxlbmd0aCB8fCAwO1xuICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IF8ucGx1Y2soYXJyYXksIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4gIC8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZlxuICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gIF8ub2JqZWN0ID0gZnVuY3Rpb24obGlzdCwgdmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgobGlzdCk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRvciBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGZpbmRJbmRleCBhbmQgZmluZExhc3RJbmRleCBmdW5jdGlvbnNcbiAgZnVuY3Rpb24gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoZGlyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgICAgIHZhciBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcbiAgICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgaW5kZXggb24gYW4gYXJyYXktbGlrZSB0aGF0IHBhc3NlcyBhIHByZWRpY2F0ZSB0ZXN0XG4gIF8uZmluZEluZGV4ID0gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoMSk7XG4gIF8uZmluZExhc3RJbmRleCA9IGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyKC0xKTtcblxuICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXG4gIC8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC5cbiAgXy5zb3J0ZWRJbmRleCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgdmFyIHZhbHVlID0gaXRlcmF0ZWUob2JqKTtcbiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W21pZF0pIDwgdmFsdWUpIGxvdyA9IG1pZCArIDE7IGVsc2UgaGlnaCA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbiAgfTtcblxuICAvLyBHZW5lcmF0b3IgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBpbmRleE9mIGFuZCBsYXN0SW5kZXhPZiBmdW5jdGlvbnNcbiAgZnVuY3Rpb24gY3JlYXRlSW5kZXhGaW5kZXIoZGlyLCBwcmVkaWNhdGVGaW5kLCBzb3J0ZWRJbmRleCkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgaXRlbSwgaWR4KSB7XG4gICAgICB2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgICBpZiAodHlwZW9mIGlkeCA9PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoZGlyID4gMCkge1xuICAgICAgICAgICAgaSA9IGlkeCA+PSAwID8gaWR4IDogTWF0aC5tYXgoaWR4ICsgbGVuZ3RoLCBpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlbmd0aCA9IGlkeCA+PSAwID8gTWF0aC5taW4oaWR4ICsgMSwgbGVuZ3RoKSA6IGlkeCArIGxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc29ydGVkSW5kZXggJiYgaWR4ICYmIGxlbmd0aCkge1xuICAgICAgICBpZHggPSBzb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpZHhdID09PSBpdGVtID8gaWR4IDogLTE7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbSAhPT0gaXRlbSkge1xuICAgICAgICBpZHggPSBwcmVkaWNhdGVGaW5kKHNsaWNlLmNhbGwoYXJyYXksIGksIGxlbmd0aCksIF8uaXNOYU4pO1xuICAgICAgICByZXR1cm4gaWR4ID49IDAgPyBpZHggKyBpIDogLTE7XG4gICAgICB9XG4gICAgICBmb3IgKGlkeCA9IGRpciA+IDAgPyBpIDogbGVuZ3RoIC0gMTsgaWR4ID49IDAgJiYgaWR4IDwgbGVuZ3RoOyBpZHggKz0gZGlyKSB7XG4gICAgICAgIGlmIChhcnJheVtpZHhdID09PSBpdGVtKSByZXR1cm4gaWR4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gIH1cblxuICAvLyBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuIGl0ZW0gaW4gYW4gYXJyYXksXG4gIC8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG4gIC8vIElmIHRoZSBhcnJheSBpcyBsYXJnZSBhbmQgYWxyZWFkeSBpbiBzb3J0IG9yZGVyLCBwYXNzIGB0cnVlYFxuICAvLyBmb3IgKippc1NvcnRlZCoqIHRvIHVzZSBiaW5hcnkgc2VhcmNoLlxuICBfLmluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigxLCBfLmZpbmRJbmRleCwgXy5zb3J0ZWRJbmRleCk7XG4gIF8ubGFzdEluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigtMSwgXy5maW5kTGFzdEluZGV4KTtcblxuICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mXG4gIC8vIHRoZSBuYXRpdmUgUHl0aG9uIGByYW5nZSgpYCBmdW5jdGlvbi4gU2VlXG4gIC8vIFt0aGUgUHl0aG9uIGRvY3VtZW50YXRpb25dKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9mdW5jdGlvbnMuaHRtbCNyYW5nZSkuXG4gIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChzdG9wID09IG51bGwpIHtcbiAgICAgIHN0b3AgPSBzdGFydCB8fCAwO1xuICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICBzdGVwID0gc3RlcCB8fCAxO1xuXG4gICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApLCAwKTtcbiAgICB2YXIgcmFuZ2UgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKywgc3RhcnQgKz0gc3RlcCkge1xuICAgICAgcmFuZ2VbaWR4XSA9IHN0YXJ0O1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICAvLyBGdW5jdGlvbiAoYWhlbSkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIERldGVybWluZXMgd2hldGhlciB0byBleGVjdXRlIGEgZnVuY3Rpb24gYXMgYSBjb25zdHJ1Y3RvclxuICAvLyBvciBhIG5vcm1hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBhcmd1bWVudHNcbiAgdmFyIGV4ZWN1dGVCb3VuZCA9IGZ1bmN0aW9uKHNvdXJjZUZ1bmMsIGJvdW5kRnVuYywgY29udGV4dCwgY2FsbGluZ0NvbnRleHQsIGFyZ3MpIHtcbiAgICBpZiAoIShjYWxsaW5nQ29udGV4dCBpbnN0YW5jZW9mIGJvdW5kRnVuYykpIHJldHVybiBzb3VyY2VGdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIHZhciBzZWxmID0gYmFzZUNyZWF0ZShzb3VyY2VGdW5jLnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IHNvdXJjZUZ1bmMuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgaWYgKF8uaXNPYmplY3QocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSBmdW5jdGlvbiBib3VuZCB0byBhIGdpdmVuIG9iamVjdCAoYXNzaWduaW5nIGB0aGlzYCwgYW5kIGFyZ3VtZW50cyxcbiAgLy8gb3B0aW9uYWxseSkuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBGdW5jdGlvbi5iaW5kYCBpZlxuICAvLyBhdmFpbGFibGUuXG4gIF8uYmluZCA9IGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQpIHtcbiAgICBpZiAobmF0aXZlQmluZCAmJiBmdW5jLmJpbmQgPT09IG5hdGl2ZUJpbmQpIHJldHVybiBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgaWYgKCFfLmlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JpbmQgbXVzdCBiZSBjYWxsZWQgb24gYSBmdW5jdGlvbicpO1xuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHZhciBib3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgY29udGV4dCwgdGhpcywgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgfTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH07XG5cbiAgLy8gUGFydGlhbGx5IGFwcGx5IGEgZnVuY3Rpb24gYnkgY3JlYXRpbmcgYSB2ZXJzaW9uIHRoYXQgaGFzIGhhZCBzb21lIG9mIGl0c1xuICAvLyBhcmd1bWVudHMgcHJlLWZpbGxlZCwgd2l0aG91dCBjaGFuZ2luZyBpdHMgZHluYW1pYyBgdGhpc2AgY29udGV4dC4gXyBhY3RzXG4gIC8vIGFzIGEgcGxhY2Vob2xkZXIsIGFsbG93aW5nIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMgdG8gYmUgcHJlLWZpbGxlZC5cbiAgXy5wYXJ0aWFsID0gZnVuY3Rpb24oZnVuYykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgdmFyIGJvdW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSAwLCBsZW5ndGggPSBib3VuZEFyZ3MubGVuZ3RoO1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBhcmdzW2ldID0gYm91bmRBcmdzW2ldID09PSBfID8gYXJndW1lbnRzW3Bvc2l0aW9uKytdIDogYm91bmRBcmdzW2ldO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgYXJndW1lbnRzLmxlbmd0aCkgYXJncy5wdXNoKGFyZ3VtZW50c1twb3NpdGlvbisrXSk7XG4gICAgICByZXR1cm4gZXhlY3V0ZUJvdW5kKGZ1bmMsIGJvdW5kLCB0aGlzLCB0aGlzLCBhcmdzKTtcbiAgICB9O1xuICAgIHJldHVybiBib3VuZDtcbiAgfTtcblxuICAvLyBCaW5kIGEgbnVtYmVyIG9mIGFuIG9iamVjdCdzIG1ldGhvZHMgdG8gdGhhdCBvYmplY3QuIFJlbWFpbmluZyBhcmd1bWVudHNcbiAgLy8gYXJlIHRoZSBtZXRob2QgbmFtZXMgdG8gYmUgYm91bmQuIFVzZWZ1bCBmb3IgZW5zdXJpbmcgdGhhdCBhbGwgY2FsbGJhY2tzXG4gIC8vIGRlZmluZWQgb24gYW4gb2JqZWN0IGJlbG9uZyB0byBpdC5cbiAgXy5iaW5kQWxsID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGksIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsIGtleTtcbiAgICBpZiAobGVuZ3RoIDw9IDEpIHRocm93IG5ldyBFcnJvcignYmluZEFsbCBtdXN0IGJlIHBhc3NlZCBmdW5jdGlvbiBuYW1lcycpO1xuICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gYXJndW1lbnRzW2ldO1xuICAgICAgb2JqW2tleV0gPSBfLmJpbmQob2JqW2tleV0sIG9iaik7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gTWVtb2l6ZSBhbiBleHBlbnNpdmUgZnVuY3Rpb24gYnkgc3RvcmluZyBpdHMgcmVzdWx0cy5cbiAgXy5tZW1vaXplID0gZnVuY3Rpb24oZnVuYywgaGFzaGVyKSB7XG4gICAgdmFyIG1lbW9pemUgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBjYWNoZSA9IG1lbW9pemUuY2FjaGU7XG4gICAgICB2YXIgYWRkcmVzcyA9ICcnICsgKGhhc2hlciA/IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDoga2V5KTtcbiAgICAgIGlmICghXy5oYXMoY2FjaGUsIGFkZHJlc3MpKSBjYWNoZVthZGRyZXNzXSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBjYWNoZVthZGRyZXNzXTtcbiAgICB9O1xuICAgIG1lbW9pemUuY2FjaGUgPSB7fTtcbiAgICByZXR1cm4gbWVtb2l6ZTtcbiAgfTtcblxuICAvLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzXG4gIC8vIGl0IHdpdGggdGhlIGFyZ3VtZW50cyBzdXBwbGllZC5cbiAgXy5kZWxheSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSwgd2FpdCk7XG4gIH07XG5cbiAgLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzXG4gIC8vIGNsZWFyZWQuXG4gIF8uZGVmZXIgPSBfLnBhcnRpYWwoXy5kZWxheSwgXywgMSk7XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4gIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsIHJ1blxuICAvLyBhcyBtdWNoIGFzIGl0IGNhbiwgd2l0aG91dCBldmVyIGdvaW5nIG1vcmUgdGhhbiBvbmNlIHBlciBgd2FpdGAgZHVyYXRpb247XG4gIC8vIGJ1dCBpZiB5b3UnZCBsaWtlIHRvIGRpc2FibGUgdGhlIGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlLCBwYXNzXG4gIC8vIGB7bGVhZGluZzogZmFsc2V9YC4gVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLlxuICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgIHZhciBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gICAgdmFyIHRpbWVvdXQgPSBudWxsO1xuICAgIHZhciBwcmV2aW91cyA9IDA7XG4gICAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBwcmV2aW91cyA9IG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogXy5ub3coKTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vdyA9IF8ubm93KCk7XG4gICAgICBpZiAoIXByZXZpb3VzICYmIG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UpIHByZXZpb3VzID0gbm93O1xuICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpO1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgaWYgKHJlbWFpbmluZyA8PSAwIHx8IHJlbWFpbmluZyA+IHdhaXQpIHtcbiAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXMgPSBub3c7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICghdGltZW91dCAmJiBvcHRpb25zLnRyYWlsaW5nICE9PSBmYWxzZSkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gIC8vIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3JcbiAgLy8gTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4gIC8vIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG4gIF8uZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICB2YXIgdGltZW91dCwgYXJncywgY29udGV4dCwgdGltZXN0YW1wLCByZXN1bHQ7XG5cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsYXN0ID0gXy5ub3coKSAtIHRpbWVzdGFtcDtcblxuICAgICAgaWYgKGxhc3QgPCB3YWl0ICYmIGxhc3QgPj0gMCkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB0aW1lc3RhbXAgPSBfLm5vdygpO1xuICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICBpZiAoIXRpbWVvdXQpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgIGlmIChjYWxsTm93KSB7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGZ1bmN0aW9uIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgc2Vjb25kLFxuICAvLyBhbGxvd2luZyB5b3UgdG8gYWRqdXN0IGFyZ3VtZW50cywgcnVuIGNvZGUgYmVmb3JlIGFuZCBhZnRlciwgYW5kXG4gIC8vIGNvbmRpdGlvbmFsbHkgZXhlY3V0ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uXG4gIF8ud3JhcCA9IGZ1bmN0aW9uKGZ1bmMsIHdyYXBwZXIpIHtcbiAgICByZXR1cm4gXy5wYXJ0aWFsKHdyYXBwZXIsIGZ1bmMpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIHBhc3NlZC1pbiBwcmVkaWNhdGUuXG4gIF8ubmVnYXRlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoXG4gIC8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuXG4gIF8uY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdGFydCA9IGFyZ3MubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IHN0YXJ0O1xuICAgICAgdmFyIHJlc3VsdCA9IGFyZ3Nbc3RhcnRdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB3aGlsZSAoaS0tKSByZXN1bHQgPSBhcmdzW2ldLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgb24gYW5kIGFmdGVyIHRoZSBOdGggY2FsbC5cbiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgdXAgdG8gKGJ1dCBub3QgaW5jbHVkaW5nKSB0aGUgTnRoIGNhbGwuXG4gIF8uYmVmb3JlID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHtcbiAgICB2YXIgbWVtbztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aW1lcyA+IDApIHtcbiAgICAgICAgbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lcyA8PSAxKSBmdW5jID0gbnVsbDtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93XG4gIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uXG4gIF8ub25jZSA9IF8ucGFydGlhbChfLmJlZm9yZSwgMik7XG5cbiAgLy8gT2JqZWN0IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gS2V5cyBpbiBJRSA8IDkgdGhhdCB3b24ndCBiZSBpdGVyYXRlZCBieSBgZm9yIGtleSBpbiAuLi5gIGFuZCB0aHVzIG1pc3NlZC5cbiAgdmFyIGhhc0VudW1CdWcgPSAhe3RvU3RyaW5nOiBudWxsfS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKTtcbiAgdmFyIG5vbkVudW1lcmFibGVQcm9wcyA9IFsndmFsdWVPZicsICdpc1Byb3RvdHlwZU9mJywgJ3RvU3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAncHJvcGVydHlJc0VudW1lcmFibGUnLCAnaGFzT3duUHJvcGVydHknLCAndG9Mb2NhbGVTdHJpbmcnXTtcblxuICBmdW5jdGlvbiBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cykge1xuICAgIHZhciBub25FbnVtSWR4ID0gbm9uRW51bWVyYWJsZVByb3BzLmxlbmd0aDtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBvYmouY29uc3RydWN0b3I7XG4gICAgdmFyIHByb3RvID0gKF8uaXNGdW5jdGlvbihjb25zdHJ1Y3RvcikgJiYgY29uc3RydWN0b3IucHJvdG90eXBlKSB8fCBPYmpQcm90bztcblxuICAgIC8vIENvbnN0cnVjdG9yIGlzIGEgc3BlY2lhbCBjYXNlLlxuICAgIHZhciBwcm9wID0gJ2NvbnN0cnVjdG9yJztcbiAgICBpZiAoXy5oYXMob2JqLCBwcm9wKSAmJiAhXy5jb250YWlucyhrZXlzLCBwcm9wKSkga2V5cy5wdXNoKHByb3ApO1xuXG4gICAgd2hpbGUgKG5vbkVudW1JZHgtLSkge1xuICAgICAgcHJvcCA9IG5vbkVudW1lcmFibGVQcm9wc1tub25FbnVtSWR4XTtcbiAgICAgIGlmIChwcm9wIGluIG9iaiAmJiBvYmpbcHJvcF0gIT09IHByb3RvW3Byb3BdICYmICFfLmNvbnRhaW5zKGtleXMsIHByb3ApKSB7XG4gICAgICAgIGtleXMucHVzaChwcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBPYmplY3Qua2V5c2BcbiAgXy5rZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICAgIC8vIEFoZW0sIElFIDwgOS5cbiAgICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFJldHJpZXZlIGFsbCB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LlxuICBfLmFsbEtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gICAgLy8gQWhlbSwgSUUgPCA5LlxuICAgIGlmIChoYXNFbnVtQnVnKSBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cyk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlc1tpXSA9IG9ialtrZXlzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQgb2YgdGhlIG9iamVjdFxuICAvLyBJbiBjb250cmFzdCB0byBfLm1hcCBpdCByZXR1cm5zIGFuIG9iamVjdFxuICBfLm1hcE9iamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9ICBfLmtleXMob2JqKSxcbiAgICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHRzID0ge30sXG4gICAgICAgICAgY3VycmVudEtleTtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY3VycmVudEtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgICByZXN1bHRzW2N1cnJlbnRLZXldID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ29udmVydCBhbiBvYmplY3QgaW50byBhIGxpc3Qgb2YgYFtrZXksIHZhbHVlXWAgcGFpcnMuXG4gIF8ucGFpcnMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgcGFpcnMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhaXJzW2ldID0gW2tleXNbaV0sIG9ialtrZXlzW2ldXV07XG4gICAgfVxuICAgIHJldHVybiBwYWlycztcbiAgfTtcblxuICAvLyBJbnZlcnQgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiBhbiBvYmplY3QuIFRoZSB2YWx1ZXMgbXVzdCBiZSBzZXJpYWxpemFibGUuXG4gIF8uaW52ZXJ0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtvYmpba2V5c1tpXV1dID0ga2V5c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBzb3J0ZWQgbGlzdCBvZiB0aGUgZnVuY3Rpb24gbmFtZXMgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QuXG4gIC8vIEFsaWFzZWQgYXMgYG1ldGhvZHNgXG4gIF8uZnVuY3Rpb25zID0gXy5tZXRob2RzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzLnNvcnQoKTtcbiAgfTtcblxuICAvLyBFeHRlbmQgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIHByb3BlcnRpZXMgaW4gcGFzc2VkLWluIG9iamVjdChzKS5cbiAgXy5leHRlbmQgPSBjcmVhdGVBc3NpZ25lcihfLmFsbEtleXMpO1xuXG4gIC8vIEFzc2lnbnMgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIG93biBwcm9wZXJ0aWVzIGluIHRoZSBwYXNzZWQtaW4gb2JqZWN0KHMpXG4gIC8vIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduKVxuICBfLmV4dGVuZE93biA9IF8uYXNzaWduID0gY3JlYXRlQXNzaWduZXIoXy5rZXlzKTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBrZXkgb24gYW4gb2JqZWN0IHRoYXQgcGFzc2VzIGEgcHJlZGljYXRlIHRlc3RcbiAgXy5maW5kS2V5ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaiksIGtleTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2tleV0sIGtleSwgb2JqKSkgcmV0dXJuIGtleTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5waWNrID0gZnVuY3Rpb24ob2JqZWN0LCBvaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0ge30sIG9iaiA9IG9iamVjdCwgaXRlcmF0ZWUsIGtleXM7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChfLmlzRnVuY3Rpb24ob2l0ZXJhdGVlKSkge1xuICAgICAga2V5cyA9IF8uYWxsS2V5cyhvYmopO1xuICAgICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKG9pdGVyYXRlZSwgY29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBmbGF0dGVuKGFyZ3VtZW50cywgZmFsc2UsIGZhbHNlLCAxKTtcbiAgICAgIGl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqKSB7IHJldHVybiBrZXkgaW4gb2JqOyB9O1xuICAgICAgb2JqID0gT2JqZWN0KG9iaik7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgaWYgKGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iaikpIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBibGFja2xpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLm9taXQgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihpdGVyYXRlZSkpIHtcbiAgICAgIGl0ZXJhdGVlID0gXy5uZWdhdGUoaXRlcmF0ZWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IF8ubWFwKGZsYXR0ZW4oYXJndW1lbnRzLCBmYWxzZSwgZmFsc2UsIDEpLCBTdHJpbmcpO1xuICAgICAgaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHJldHVybiAhXy5jb250YWlucyhrZXlzLCBrZXkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIF8ucGljayhvYmosIGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICBfLmRlZmF1bHRzID0gY3JlYXRlQXNzaWduZXIoXy5hbGxLZXlzLCB0cnVlKTtcblxuICAvLyBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGdpdmVuIHByb3RvdHlwZSBvYmplY3QuXG4gIC8vIElmIGFkZGl0aW9uYWwgcHJvcGVydGllcyBhcmUgcHJvdmlkZWQgdGhlbiB0aGV5IHdpbGwgYmUgYWRkZWQgdG8gdGhlXG4gIC8vIGNyZWF0ZWQgb2JqZWN0LlxuICBfLmNyZWF0ZSA9IGZ1bmN0aW9uKHByb3RvdHlwZSwgcHJvcHMpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgIGlmIChwcm9wcykgXy5leHRlbmRPd24ocmVzdWx0LCBwcm9wcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSAoc2hhbGxvdy1jbG9uZWQpIGR1cGxpY2F0ZSBvZiBhbiBvYmplY3QuXG4gIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgICByZXR1cm4gXy5pc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IF8uZXh0ZW5kKHt9LCBvYmopO1xuICB9O1xuXG4gIC8vIEludm9rZXMgaW50ZXJjZXB0b3Igd2l0aCB0aGUgb2JqLCBhbmQgdGhlbiByZXR1cm5zIG9iai5cbiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4sIGluXG4gIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLlxuICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHtcbiAgICBpbnRlcmNlcHRvcihvYmopO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJucyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2YgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8uaXNNYXRjaCA9IGZ1bmN0aW9uKG9iamVjdCwgYXR0cnMpIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhhdHRycyksIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuICFsZW5ndGg7XG4gICAgdmFyIG9iaiA9IE9iamVjdChvYmplY3QpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGF0dHJzW2tleV0gIT09IG9ialtrZXldIHx8ICEoa2V5IGluIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cblxuICAvLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuICB2YXIgZXEgPSBmdW5jdGlvbihhLCBiLCBhU3RhY2ssIGJTdGFjaykge1xuICAgIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC5cbiAgICAvLyBTZWUgdGhlIFtIYXJtb255IGBlZ2FsYCBwcm9wb3NhbF0oaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsKS5cbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGEgIT09IDAgfHwgMSAvIGEgPT09IDEgLyBiO1xuICAgIC8vIEEgc3RyaWN0IGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgYG51bGwgPT0gdW5kZWZpbmVkYC5cbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGEgPT09IGI7XG4gICAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuXG4gICAgaWYgKGEgaW5zdGFuY2VvZiBfKSBhID0gYS5fd3JhcHBlZDtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIF8pIGIgPSBiLl93cmFwcGVkO1xuICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSk7XG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgICAvLyBTdHJpbmdzLCBudW1iZXJzLCByZWd1bGFyIGV4cHJlc3Npb25zLCBkYXRlcywgYW5kIGJvb2xlYW5zIGFyZSBjb21wYXJlZCBieSB2YWx1ZS5cbiAgICAgIGNhc2UgJ1tvYmplY3QgUmVnRXhwXSc6XG4gICAgICAvLyBSZWdFeHBzIGFyZSBjb2VyY2VkIHRvIHN0cmluZ3MgZm9yIGNvbXBhcmlzb24gKE5vdGU6ICcnICsgL2EvaSA9PT0gJy9hL2knKVxuICAgICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcIjVcImAgaXNcbiAgICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZyhcIjVcIilgLlxuICAgICAgICByZXR1cm4gJycgKyBhID09PSAnJyArIGI7XG4gICAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOlxuICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgICAgICAvLyBPYmplY3QoTmFOKSBpcyBlcXVpdmFsZW50IHRvIE5hTlxuICAgICAgICBpZiAoK2EgIT09ICthKSByZXR1cm4gK2IgIT09ICtiO1xuICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICByZXR1cm4gK2EgPT09IDAgPyAxIC8gK2EgPT09IDEgLyBiIDogK2EgPT09ICtiO1xuICAgICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcbiAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpclxuICAgICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zXG4gICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICAgICAgcmV0dXJuICthID09PSArYjtcbiAgICB9XG5cbiAgICB2YXIgYXJlQXJyYXlzID0gY2xhc3NOYW1lID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIGlmICghYXJlQXJyYXlzKSB7XG4gICAgICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcblxuICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzIG9yIGBBcnJheWBzXG4gICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJiAhKF8uaXNGdW5jdGlvbihhQ3RvcikgJiYgYUN0b3IgaW5zdGFuY2VvZiBhQ3RvciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uaXNGdW5jdGlvbihiQ3RvcikgJiYgYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKCdjb25zdHJ1Y3RvcicgaW4gYSAmJiAnY29uc3RydWN0b3InIGluIGIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuXG4gICAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi5cbiAgICBhU3RhY2sgPSBhU3RhY2sgfHwgW107XG4gICAgYlN0YWNrID0gYlN0YWNrIHx8IFtdO1xuICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mXG4gICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG5cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICBpZiAoYXJlQXJyYXlzKSB7XG4gICAgICAvLyBDb21wYXJlIGFycmF5IGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeS5cbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKCFlcShhW2xlbmd0aF0sIGJbbGVuZ3RoXSwgYVN0YWNrLCBiU3RhY2spKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgICAgdmFyIGtleXMgPSBfLmtleXMoYSksIGtleTtcbiAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgICAgaWYgKF8ua2V5cyhiKS5sZW5ndGggIT09IGxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxuICAgICAgICBrZXkgPSBrZXlzW2xlbmd0aF07XG4gICAgICAgIGlmICghKF8uaGFzKGIsIGtleSkgJiYgZXEoYVtrZXldLCBiW2tleV0sIGFTdGFjaywgYlN0YWNrKSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnBvcCgpO1xuICAgIGJTdGFjay5wb3AoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC5cbiAgXy5pc0VxdWFsID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBlcShhLCBiKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT9cbiAgLy8gQW4gXCJlbXB0eVwiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy5cbiAgXy5pc0VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSAmJiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopIHx8IF8uaXNBcmd1bWVudHMob2JqKSkpIHJldHVybiBvYmoubGVuZ3RoID09PSAwO1xuICAgIHJldHVybiBfLmtleXMob2JqKS5sZW5ndGggPT09IDA7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5P1xuICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheVxuICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/XG4gIF8uaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHNvbWUgaXNUeXBlIG1ldGhvZHM6IGlzQXJndW1lbnRzLCBpc0Z1bmN0aW9uLCBpc1N0cmluZywgaXNOdW1iZXIsIGlzRGF0ZSwgaXNSZWdFeHAsIGlzRXJyb3IuXG4gIF8uZWFjaChbJ0FyZ3VtZW50cycsICdGdW5jdGlvbicsICdTdHJpbmcnLCAnTnVtYmVyJywgJ0RhdGUnLCAnUmVnRXhwJywgJ0Vycm9yJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBfWydpcycgKyBuYW1lXSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRGVmaW5lIGEgZmFsbGJhY2sgdmVyc2lvbiBvZiB0aGUgbWV0aG9kIGluIGJyb3dzZXJzIChhaGVtLCBJRSA8IDkpLCB3aGVyZVxuICAvLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuICBpZiAoIV8uaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBfLmhhcyhvYmosICdjYWxsZWUnKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gT3B0aW1pemUgYGlzRnVuY3Rpb25gIGlmIGFwcHJvcHJpYXRlLiBXb3JrIGFyb3VuZCBzb21lIHR5cGVvZiBidWdzIGluIG9sZCB2OCxcbiAgLy8gSUUgMTEgKCMxNjIxKSwgYW5kIGluIFNhZmFyaSA4ICgjMTkyOSkuXG4gIGlmICh0eXBlb2YgLy4vICE9ICdmdW5jdGlvbicgJiYgdHlwZW9mIEludDhBcnJheSAhPSAnb2JqZWN0Jykge1xuICAgIF8uaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJyB8fCBmYWxzZTtcbiAgICB9O1xuICB9XG5cbiAgLy8gSXMgYSBnaXZlbiBvYmplY3QgYSBmaW5pdGUgbnVtYmVyP1xuICBfLmlzRmluaXRlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIGlzRmluaXRlKG9iaikgJiYgIWlzTmFOKHBhcnNlRmxvYXQob2JqKSk7XG4gIH07XG5cbiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGBOYU5gPyAoTmFOIGlzIHRoZSBvbmx5IG51bWJlciB3aGljaCBkb2VzIG5vdCBlcXVhbCBpdHNlbGYpLlxuICBfLmlzTmFOID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIF8uaXNOdW1iZXIob2JqKSAmJiBvYmogIT09ICtvYmo7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIGJvb2xlYW4/XG4gIF8uaXNCb29sZWFuID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlIHx8IHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD9cbiAgXy5pc051bGwgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSBudWxsO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgdW5kZWZpbmVkP1xuICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xuICB9O1xuXG4gIC8vIFNob3J0Y3V0IGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gcHJvcGVydHkgZGlyZWN0bHlcbiAgLy8gb24gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS5cbiAgXy5oYXMgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgfTtcblxuICAvLyBVdGlsaXR5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJ1biBVbmRlcnNjb3JlLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHNcbiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290Ll8gPSBwcmV2aW91c1VuZGVyc2NvcmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdGVlcy5cbiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8vIFByZWRpY2F0ZS1nZW5lcmF0aW5nIGZ1bmN0aW9ucy4gT2Z0ZW4gdXNlZnVsIG91dHNpZGUgb2YgVW5kZXJzY29yZS5cbiAgXy5jb25zdGFudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gIH07XG5cbiAgXy5ub29wID0gZnVuY3Rpb24oKXt9O1xuXG4gIF8ucHJvcGVydHkgPSBwcm9wZXJ0eTtcblxuICAvLyBHZW5lcmF0ZXMgYSBmdW5jdGlvbiBmb3IgYSBnaXZlbiBvYmplY3QgdGhhdCByZXR1cm5zIGEgZ2l2ZW4gcHJvcGVydHkuXG4gIF8ucHJvcGVydHlPZiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT0gbnVsbCA/IGZ1bmN0aW9uKCl7fSA6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIHByZWRpY2F0ZSBmb3IgY2hlY2tpbmcgd2hldGhlciBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gc2V0IG9mXG4gIC8vIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLm1hdGNoZXIgPSBfLm1hdGNoZXMgPSBmdW5jdGlvbihhdHRycykge1xuICAgIGF0dHJzID0gXy5leHRlbmRPd24oe30sIGF0dHJzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gXy5pc01hdGNoKG9iaiwgYXR0cnMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuXG4gIF8udGltZXMgPSBmdW5jdGlvbihuLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciBhY2N1bSA9IEFycmF5KE1hdGgubWF4KDAsIG4pKTtcbiAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQsIDEpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSBhY2N1bVtpXSA9IGl0ZXJhdGVlKGkpO1xuICAgIHJldHVybiBhY2N1bTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLlxuICBfLnJhbmRvbSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICBtYXggPSBtaW47XG4gICAgICBtaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgfTtcblxuICAvLyBBIChwb3NzaWJseSBmYXN0ZXIpIHdheSB0byBnZXQgdGhlIGN1cnJlbnQgdGltZXN0YW1wIGFzIGFuIGludGVnZXIuXG4gIF8ubm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9O1xuXG4gICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLlxuICB2YXIgZXNjYXBlTWFwID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjeDI3OycsXG4gICAgJ2AnOiAnJiN4NjA7J1xuICB9O1xuICB2YXIgdW5lc2NhcGVNYXAgPSBfLmludmVydChlc2NhcGVNYXApO1xuXG4gIC8vIEZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5ncyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi5cbiAgdmFyIGNyZWF0ZUVzY2FwZXIgPSBmdW5jdGlvbihtYXApIHtcbiAgICB2YXIgZXNjYXBlciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWFwW21hdGNoXTtcbiAgICB9O1xuICAgIC8vIFJlZ2V4ZXMgZm9yIGlkZW50aWZ5aW5nIGEga2V5IHRoYXQgbmVlZHMgdG8gYmUgZXNjYXBlZFxuICAgIHZhciBzb3VyY2UgPSAnKD86JyArIF8ua2V5cyhtYXApLmpvaW4oJ3wnKSArICcpJztcbiAgICB2YXIgdGVzdFJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UpO1xuICAgIHZhciByZXBsYWNlUmVnZXhwID0gUmVnRXhwKHNvdXJjZSwgJ2cnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcgPT0gbnVsbCA/ICcnIDogJycgKyBzdHJpbmc7XG4gICAgICByZXR1cm4gdGVzdFJlZ2V4cC50ZXN0KHN0cmluZykgPyBzdHJpbmcucmVwbGFjZShyZXBsYWNlUmVnZXhwLCBlc2NhcGVyKSA6IHN0cmluZztcbiAgICB9O1xuICB9O1xuICBfLmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIoZXNjYXBlTWFwKTtcbiAgXy51bmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIodW5lc2NhcGVNYXApO1xuXG4gIC8vIElmIHRoZSB2YWx1ZSBvZiB0aGUgbmFtZWQgYHByb3BlcnR5YCBpcyBhIGZ1bmN0aW9uIHRoZW4gaW52b2tlIGl0IHdpdGggdGhlXG4gIC8vIGBvYmplY3RgIGFzIGNvbnRleHQ7IG90aGVyd2lzZSwgcmV0dXJuIGl0LlxuICBfLnJlc3VsdCA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGZhbGxiYWNrKSB7XG4gICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB2b2lkIDAgOiBvYmplY3RbcHJvcGVydHldO1xuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICB2YWx1ZSA9IGZhbGxiYWNrO1xuICAgIH1cbiAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGEgdW5pcXVlIGludGVnZXIgaWQgKHVuaXF1ZSB3aXRoaW4gdGhlIGVudGlyZSBjbGllbnQgc2Vzc2lvbikuXG4gIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuXG4gIHZhciBpZENvdW50ZXIgPSAwO1xuICBfLnVuaXF1ZUlkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJztcbiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDtcbiAgfTtcblxuICAvLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMsIGNoYW5nZSB0aGVcbiAgLy8gZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG4gICAgZXZhbHVhdGUgICAgOiAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgIGludGVycG9sYXRlIDogLzwlPShbXFxzXFxTXSs/KSU+L2csXG4gICAgZXNjYXBlICAgICAgOiAvPCUtKFtcXHNcXFNdKz8pJT4vZ1xuICB9O1xuXG4gIC8vIFdoZW4gY3VzdG9taXppbmcgYHRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW5cbiAgLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpc1xuICAvLyBndWFyYW50ZWVkIG5vdCB0byBtYXRjaC5cbiAgdmFyIG5vTWF0Y2ggPSAvKC4pXi87XG5cbiAgLy8gQ2VydGFpbiBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgY2FuIGJlIHB1dCBpbnRvIGFcbiAgLy8gc3RyaW5nIGxpdGVyYWwuXG4gIHZhciBlc2NhcGVzID0ge1xuICAgIFwiJ1wiOiAgICAgIFwiJ1wiLFxuICAgICdcXFxcJzogICAgICdcXFxcJyxcbiAgICAnXFxyJzogICAgICdyJyxcbiAgICAnXFxuJzogICAgICduJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgdmFyIGVzY2FwZXIgPSAvXFxcXHwnfFxccnxcXG58XFx1MjAyOHxcXHUyMDI5L2c7XG5cbiAgdmFyIGVzY2FwZUNoYXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiAnXFxcXCcgKyBlc2NhcGVzW21hdGNoXTtcbiAgfTtcblxuICAvLyBKYXZhU2NyaXB0IG1pY3JvLXRlbXBsYXRpbmcsIHNpbWlsYXIgdG8gSm9obiBSZXNpZydzIGltcGxlbWVudGF0aW9uLlxuICAvLyBVbmRlcnNjb3JlIHRlbXBsYXRpbmcgaGFuZGxlcyBhcmJpdHJhcnkgZGVsaW1pdGVycywgcHJlc2VydmVzIHdoaXRlc3BhY2UsXG4gIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLlxuICAvLyBOQjogYG9sZFNldHRpbmdzYCBvbmx5IGV4aXN0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gIF8udGVtcGxhdGUgPSBmdW5jdGlvbih0ZXh0LCBzZXR0aW5ncywgb2xkU2V0dGluZ3MpIHtcbiAgICBpZiAoIXNldHRpbmdzICYmIG9sZFNldHRpbmdzKSBzZXR0aW5ncyA9IG9sZFNldHRpbmdzO1xuICAgIHNldHRpbmdzID0gXy5kZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG5cbiAgICAvLyBDb21iaW5lIGRlbGltaXRlcnMgaW50byBvbmUgcmVndWxhciBleHByZXNzaW9uIHZpYSBhbHRlcm5hdGlvbi5cbiAgICB2YXIgbWF0Y2hlciA9IFJlZ0V4cChbXG4gICAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5pbnRlcnBvbGF0ZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAoc2V0dGluZ3MuZXZhbHVhdGUgfHwgbm9NYXRjaCkuc291cmNlXG4gICAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpO1xuXG4gICAgLy8gQ29tcGlsZSB0aGUgdGVtcGxhdGUgc291cmNlLCBlc2NhcGluZyBzdHJpbmcgbGl0ZXJhbHMgYXBwcm9wcmlhdGVseS5cbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBzb3VyY2UgPSBcIl9fcCs9J1wiO1xuICAgIHRleHQucmVwbGFjZShtYXRjaGVyLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlLCBpbnRlcnBvbGF0ZSwgZXZhbHVhdGUsIG9mZnNldCkge1xuICAgICAgc291cmNlICs9IHRleHQuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShlc2NhcGVyLCBlc2NhcGVDaGFyKTtcbiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgZXNjYXBlICsgXCIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGludGVycG9sYXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgaW50ZXJwb2xhdGUgKyBcIikpPT1udWxsPycnOl9fdCkrXFxuJ1wiO1xuICAgICAgfSBlbHNlIGlmIChldmFsdWF0ZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGUgKyBcIlxcbl9fcCs9J1wiO1xuICAgICAgfVxuXG4gICAgICAvLyBBZG9iZSBWTXMgbmVlZCB0aGUgbWF0Y2ggcmV0dXJuZWQgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBvZmZlc3QuXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgIC8vIElmIGEgdmFyaWFibGUgaXMgbm90IHNwZWNpZmllZCwgcGxhY2UgZGF0YSB2YWx1ZXMgaW4gbG9jYWwgc2NvcGUuXG4gICAgaWYgKCFzZXR0aW5ncy52YXJpYWJsZSkgc291cmNlID0gJ3dpdGgob2JqfHx7fSl7XFxuJyArIHNvdXJjZSArICd9XFxuJztcblxuICAgIHNvdXJjZSA9IFwidmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLFwiICtcbiAgICAgIFwicHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTtcXG5cIiArXG4gICAgICBzb3VyY2UgKyAncmV0dXJuIF9fcDtcXG4nO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhciByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgdmFyIHRlbXBsYXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIGRhdGEsIF8pO1xuICAgIH07XG5cbiAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBzb3VyY2UgYXMgYSBjb252ZW5pZW5jZSBmb3IgcHJlY29tcGlsYXRpb24uXG4gICAgdmFyIGFyZ3VtZW50ID0gc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaic7XG4gICAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyBhcmd1bWVudCArICcpe1xcbicgKyBzb3VyY2UgKyAnfSc7XG5cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH07XG5cbiAgLy8gQWRkIGEgXCJjaGFpblwiIGZ1bmN0aW9uLiBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8uY2hhaW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBfKG9iaik7XG4gICAgaW5zdGFuY2UuX2NoYWluID0gdHJ1ZTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG5cbiAgLy8gT09QXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdFxuICAvLyBjYW4gYmUgdXNlZCBPTy1zdHlsZS4gVGhpcyB3cmFwcGVyIGhvbGRzIGFsdGVyZWQgdmVyc2lvbnMgb2YgYWxsIHRoZVxuICAvLyB1bmRlcnNjb3JlIGZ1bmN0aW9ucy4gV3JhcHBlZCBvYmplY3RzIG1heSBiZSBjaGFpbmVkLlxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb250aW51ZSBjaGFpbmluZyBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uKGluc3RhbmNlLCBvYmopIHtcbiAgICByZXR1cm4gaW5zdGFuY2UuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgXy5lYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcbiAgICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdO1xuICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiByZXN1bHQodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgXy5taXhpbihfKTtcblxuICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuICBfLmVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT09ICdzaGlmdCcgfHwgbmFtZSA9PT0gJ3NwbGljZScpICYmIG9iai5sZW5ndGggPT09IDApIGRlbGV0ZSBvYmpbMF07XG4gICAgICByZXR1cm4gcmVzdWx0KHRoaXMsIG9iaik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBhY2Nlc3NvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCh0aGlzLCBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG4gIF8ucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XG4gIH07XG5cbiAgLy8gUHJvdmlkZSB1bndyYXBwaW5nIHByb3h5IGZvciBzb21lIG1ldGhvZHMgdXNlZCBpbiBlbmdpbmUgb3BlcmF0aW9uc1xuICAvLyBzdWNoIGFzIGFyaXRobWV0aWMgYW5kIEpTT04gc3RyaW5naWZpY2F0aW9uLlxuICBfLnByb3RvdHlwZS52YWx1ZU9mID0gXy5wcm90b3R5cGUudG9KU09OID0gXy5wcm90b3R5cGUudmFsdWU7XG5cbiAgXy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJycgKyB0aGlzLl93cmFwcGVkO1xuICB9O1xuXG4gIC8vIEFNRCByZWdpc3RyYXRpb24gaGFwcGVucyBhdCB0aGUgZW5kIGZvciBjb21wYXRpYmlsaXR5IHdpdGggQU1EIGxvYWRlcnNcbiAgLy8gdGhhdCBtYXkgbm90IGVuZm9yY2UgbmV4dC10dXJuIHNlbWFudGljcyBvbiBtb2R1bGVzLiBFdmVuIHRob3VnaCBnZW5lcmFsXG4gIC8vIHByYWN0aWNlIGZvciBBTUQgcmVnaXN0cmF0aW9uIGlzIHRvIGJlIGFub255bW91cywgdW5kZXJzY29yZSByZWdpc3RlcnNcbiAgLy8gYXMgYSBuYW1lZCBtb2R1bGUgYmVjYXVzZSwgbGlrZSBqUXVlcnksIGl0IGlzIGEgYmFzZSBsaWJyYXJ5IHRoYXQgaXNcbiAgLy8gcG9wdWxhciBlbm91Z2ggdG8gYmUgYnVuZGxlZCBpbiBhIHRoaXJkIHBhcnR5IGxpYiwgYnV0IG5vdCBiZSBwYXJ0IG9mXG4gIC8vIGFuIEFNRCBsb2FkIHJlcXVlc3QuIFRob3NlIGNhc2VzIGNvdWxkIGdlbmVyYXRlIGFuIGVycm9yIHdoZW4gYW5cbiAgLy8gYW5vbnltb3VzIGRlZmluZSgpIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgbG9hZGVyIHJlcXVlc3QuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoJ3VuZGVyc2NvcmUnLCBbXSwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsIi8qIVxuICogQ2hhcnQuanNcbiAqIGh0dHA6Ly9jaGFydGpzLm9yZy9cbiAqIFZlcnNpb246IDEuMC4yXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgTmljayBEb3duaWVcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL25ubmljay9DaGFydC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4gKi9cblxuXG4oZnVuY3Rpb24oKXtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHQvL0RlY2xhcmUgcm9vdCB2YXJpYWJsZSAtIHdpbmRvdyBpbiB0aGUgYnJvd3NlciwgZ2xvYmFsIG9uIHRoZSBzZXJ2ZXJcblx0dmFyIHJvb3QgPSB0aGlzLFxuXHRcdHByZXZpb3VzID0gcm9vdC5DaGFydDtcblxuXHQvL09jY3VweSB0aGUgZ2xvYmFsIHZhcmlhYmxlIG9mIENoYXJ0LCBhbmQgY3JlYXRlIGEgc2ltcGxlIGJhc2UgY2xhc3Ncblx0dmFyIENoYXJ0ID0gZnVuY3Rpb24oY29udGV4dCl7XG5cdFx0dmFyIGNoYXJ0ID0gdGhpcztcblx0XHR0aGlzLmNhbnZhcyA9IGNvbnRleHQuY2FudmFzO1xuXG5cdFx0dGhpcy5jdHggPSBjb250ZXh0O1xuXG5cdFx0Ly9WYXJpYWJsZXMgZ2xvYmFsIHRvIHRoZSBjaGFydFxuXHRcdHZhciBjb21wdXRlRGltZW5zaW9uID0gZnVuY3Rpb24oZWxlbWVudCxkaW1lbnNpb24pXG5cdFx0e1xuXHRcdFx0aWYgKGVsZW1lbnRbJ29mZnNldCcrZGltZW5zaW9uXSlcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnRbJ29mZnNldCcrZGltZW5zaW9uXTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZShkaW1lbnNpb24pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciB3aWR0aCA9IHRoaXMud2lkdGggPSBjb21wdXRlRGltZW5zaW9uKGNvbnRleHQuY2FudmFzLCdXaWR0aCcpO1xuXHRcdHZhciBoZWlnaHQgPSB0aGlzLmhlaWdodCA9IGNvbXB1dGVEaW1lbnNpb24oY29udGV4dC5jYW52YXMsJ0hlaWdodCcpO1xuXG5cdFx0Ly8gRmlyZWZveCByZXF1aXJlcyB0aGlzIHRvIHdvcmsgY29ycmVjdGx5XG5cdFx0Y29udGV4dC5jYW52YXMud2lkdGggID0gd2lkdGg7XG5cdFx0Y29udGV4dC5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0dmFyIHdpZHRoID0gdGhpcy53aWR0aCA9IGNvbnRleHQuY2FudmFzLndpZHRoO1xuXHRcdHZhciBoZWlnaHQgPSB0aGlzLmhlaWdodCA9IGNvbnRleHQuY2FudmFzLmhlaWdodDtcblx0XHR0aGlzLmFzcGVjdFJhdGlvID0gdGhpcy53aWR0aCAvIHRoaXMuaGVpZ2h0O1xuXHRcdC8vSGlnaCBwaXhlbCBkZW5zaXR5IGRpc3BsYXlzIC0gbXVsdGlwbHkgdGhlIHNpemUgb2YgdGhlIGNhbnZhcyBoZWlnaHQvd2lkdGggYnkgdGhlIGRldmljZSBwaXhlbCByYXRpbywgdGhlbiBzY2FsZS5cblx0XHRoZWxwZXJzLnJldGluYVNjYWxlKHRoaXMpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cdC8vR2xvYmFsbHkgZXhwb3NlIHRoZSBkZWZhdWx0cyB0byBhbGxvdyBmb3IgdXNlciB1cGRhdGluZy9jaGFuZ2luZ1xuXHRDaGFydC5kZWZhdWx0cyA9IHtcblx0XHRnbG9iYWw6IHtcblx0XHRcdC8vIEJvb2xlYW4gLSBXaGV0aGVyIHRvIGFuaW1hdGUgdGhlIGNoYXJ0XG5cdFx0XHRhbmltYXRpb246IHRydWUsXG5cblx0XHRcdC8vIE51bWJlciAtIE51bWJlciBvZiBhbmltYXRpb24gc3RlcHNcblx0XHRcdGFuaW1hdGlvblN0ZXBzOiA2MCxcblxuXHRcdFx0Ly8gU3RyaW5nIC0gQW5pbWF0aW9uIGVhc2luZyBlZmZlY3Rcblx0XHRcdGFuaW1hdGlvbkVhc2luZzogXCJlYXNlT3V0UXVhcnRcIixcblxuXHRcdFx0Ly8gQm9vbGVhbiAtIElmIHdlIHNob3VsZCBzaG93IHRoZSBzY2FsZSBhdCBhbGxcblx0XHRcdHNob3dTY2FsZTogdHJ1ZSxcblxuXHRcdFx0Ly8gQm9vbGVhbiAtIElmIHdlIHdhbnQgdG8gb3ZlcnJpZGUgd2l0aCBhIGhhcmQgY29kZWQgc2NhbGVcblx0XHRcdHNjYWxlT3ZlcnJpZGU6IGZhbHNlLFxuXG5cdFx0XHQvLyAqKiBSZXF1aXJlZCBpZiBzY2FsZU92ZXJyaWRlIGlzIHRydWUgKipcblx0XHRcdC8vIE51bWJlciAtIFRoZSBudW1iZXIgb2Ygc3RlcHMgaW4gYSBoYXJkIGNvZGVkIHNjYWxlXG5cdFx0XHRzY2FsZVN0ZXBzOiBudWxsLFxuXHRcdFx0Ly8gTnVtYmVyIC0gVGhlIHZhbHVlIGp1bXAgaW4gdGhlIGhhcmQgY29kZWQgc2NhbGVcblx0XHRcdHNjYWxlU3RlcFdpZHRoOiBudWxsLFxuXHRcdFx0Ly8gTnVtYmVyIC0gVGhlIHNjYWxlIHN0YXJ0aW5nIHZhbHVlXG5cdFx0XHRzY2FsZVN0YXJ0VmFsdWU6IG51bGwsXG5cblx0XHRcdC8vIFN0cmluZyAtIENvbG91ciBvZiB0aGUgc2NhbGUgbGluZVxuXHRcdFx0c2NhbGVMaW5lQ29sb3I6IFwicmdiYSgwLDAsMCwuMSlcIixcblxuXHRcdFx0Ly8gTnVtYmVyIC0gUGl4ZWwgd2lkdGggb2YgdGhlIHNjYWxlIGxpbmVcblx0XHRcdHNjYWxlTGluZVdpZHRoOiAxLFxuXG5cdFx0XHQvLyBCb29sZWFuIC0gV2hldGhlciB0byBzaG93IGxhYmVscyBvbiB0aGUgc2NhbGVcblx0XHRcdHNjYWxlU2hvd0xhYmVsczogdHJ1ZSxcblxuXHRcdFx0Ly8gSW50ZXJwb2xhdGVkIEpTIHN0cmluZyAtIGNhbiBhY2Nlc3MgdmFsdWVcblx0XHRcdHNjYWxlTGFiZWw6IFwiPCU9dmFsdWUlPlwiLFxuXG5cdFx0XHQvLyBCb29sZWFuIC0gV2hldGhlciB0aGUgc2NhbGUgc2hvdWxkIHN0aWNrIHRvIGludGVnZXJzLCBhbmQgbm90IHNob3cgYW55IGZsb2F0cyBldmVuIGlmIGRyYXdpbmcgc3BhY2UgaXMgdGhlcmVcblx0XHRcdHNjYWxlSW50ZWdlcnNPbmx5OiB0cnVlLFxuXG5cdFx0XHQvLyBCb29sZWFuIC0gV2hldGhlciB0aGUgc2NhbGUgc2hvdWxkIHN0YXJ0IGF0IHplcm8sIG9yIGFuIG9yZGVyIG9mIG1hZ25pdHVkZSBkb3duIGZyb20gdGhlIGxvd2VzdCB2YWx1ZVxuXHRcdFx0c2NhbGVCZWdpbkF0WmVybzogZmFsc2UsXG5cblx0XHRcdC8vIFN0cmluZyAtIFNjYWxlIGxhYmVsIGZvbnQgZGVjbGFyYXRpb24gZm9yIHRoZSBzY2FsZSBsYWJlbFxuXHRcdFx0c2NhbGVGb250RmFtaWx5OiBcIidIZWx2ZXRpY2EgTmV1ZScsICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmXCIsXG5cblx0XHRcdC8vIE51bWJlciAtIFNjYWxlIGxhYmVsIGZvbnQgc2l6ZSBpbiBwaXhlbHNcblx0XHRcdHNjYWxlRm9udFNpemU6IDEyLFxuXG5cdFx0XHQvLyBTdHJpbmcgLSBTY2FsZSBsYWJlbCBmb250IHdlaWdodCBzdHlsZVxuXHRcdFx0c2NhbGVGb250U3R5bGU6IFwibm9ybWFsXCIsXG5cblx0XHRcdC8vIFN0cmluZyAtIFNjYWxlIGxhYmVsIGZvbnQgY29sb3VyXG5cdFx0XHRzY2FsZUZvbnRDb2xvcjogXCIjNjY2XCIsXG5cblx0XHRcdC8vIEJvb2xlYW4gLSB3aGV0aGVyIG9yIG5vdCB0aGUgY2hhcnQgc2hvdWxkIGJlIHJlc3BvbnNpdmUgYW5kIHJlc2l6ZSB3aGVuIHRoZSBicm93c2VyIGRvZXMuXG5cdFx0XHRyZXNwb25zaXZlOiBmYWxzZSxcblxuXHRcdFx0Ly8gQm9vbGVhbiAtIHdoZXRoZXIgdG8gbWFpbnRhaW4gdGhlIHN0YXJ0aW5nIGFzcGVjdCByYXRpbyBvciBub3Qgd2hlbiByZXNwb25zaXZlLCBpZiBzZXQgdG8gZmFsc2UsIHdpbGwgdGFrZSB1cCBlbnRpcmUgY29udGFpbmVyXG5cdFx0XHRtYWludGFpbkFzcGVjdFJhdGlvOiB0cnVlLFxuXG5cdFx0XHQvLyBCb29sZWFuIC0gRGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGRyYXcgdG9vbHRpcHMgb24gdGhlIGNhbnZhcyBvciBub3QgLSBhdHRhY2hlcyBldmVudHMgdG8gdG91Y2htb3ZlICYgbW91c2Vtb3ZlXG5cdFx0XHRzaG93VG9vbHRpcHM6IHRydWUsXG5cblx0XHRcdC8vIEJvb2xlYW4gLSBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gZHJhdyBidWlsdC1pbiB0b29sdGlwIG9yIGNhbGwgY3VzdG9tIHRvb2x0aXAgZnVuY3Rpb25cblx0XHRcdGN1c3RvbVRvb2x0aXBzOiBmYWxzZSxcblxuXHRcdFx0Ly8gQXJyYXkgLSBBcnJheSBvZiBzdHJpbmcgbmFtZXMgdG8gYXR0YWNoIHRvb2x0aXAgZXZlbnRzXG5cdFx0XHR0b29sdGlwRXZlbnRzOiBbXCJtb3VzZW1vdmVcIiwgXCJ0b3VjaHN0YXJ0XCIsIFwidG91Y2htb3ZlXCIsIFwibW91c2VvdXRcIl0sXG5cblx0XHRcdC8vIFN0cmluZyAtIFRvb2x0aXAgYmFja2dyb3VuZCBjb2xvdXJcblx0XHRcdHRvb2x0aXBGaWxsQ29sb3I6IFwicmdiYSgwLDAsMCwwLjgpXCIsXG5cblx0XHRcdC8vIFN0cmluZyAtIFRvb2x0aXAgbGFiZWwgZm9udCBkZWNsYXJhdGlvbiBmb3IgdGhlIHNjYWxlIGxhYmVsXG5cdFx0XHR0b29sdGlwRm9udEZhbWlseTogXCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLFxuXG5cdFx0XHQvLyBOdW1iZXIgLSBUb29sdGlwIGxhYmVsIGZvbnQgc2l6ZSBpbiBwaXhlbHNcblx0XHRcdHRvb2x0aXBGb250U2l6ZTogMTQsXG5cblx0XHRcdC8vIFN0cmluZyAtIFRvb2x0aXAgZm9udCB3ZWlnaHQgc3R5bGVcblx0XHRcdHRvb2x0aXBGb250U3R5bGU6IFwibm9ybWFsXCIsXG5cblx0XHRcdC8vIFN0cmluZyAtIFRvb2x0aXAgbGFiZWwgZm9udCBjb2xvdXJcblx0XHRcdHRvb2x0aXBGb250Q29sb3I6IFwiI2ZmZlwiLFxuXG5cdFx0XHQvLyBTdHJpbmcgLSBUb29sdGlwIHRpdGxlIGZvbnQgZGVjbGFyYXRpb24gZm9yIHRoZSBzY2FsZSBsYWJlbFxuXHRcdFx0dG9vbHRpcFRpdGxlRm9udEZhbWlseTogXCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLFxuXG5cdFx0XHQvLyBOdW1iZXIgLSBUb29sdGlwIHRpdGxlIGZvbnQgc2l6ZSBpbiBwaXhlbHNcblx0XHRcdHRvb2x0aXBUaXRsZUZvbnRTaXplOiAxNCxcblxuXHRcdFx0Ly8gU3RyaW5nIC0gVG9vbHRpcCB0aXRsZSBmb250IHdlaWdodCBzdHlsZVxuXHRcdFx0dG9vbHRpcFRpdGxlRm9udFN0eWxlOiBcImJvbGRcIixcblxuXHRcdFx0Ly8gU3RyaW5nIC0gVG9vbHRpcCB0aXRsZSBmb250IGNvbG91clxuXHRcdFx0dG9vbHRpcFRpdGxlRm9udENvbG9yOiBcIiNmZmZcIixcblxuXHRcdFx0Ly8gTnVtYmVyIC0gcGl4ZWwgd2lkdGggb2YgcGFkZGluZyBhcm91bmQgdG9vbHRpcCB0ZXh0XG5cdFx0XHR0b29sdGlwWVBhZGRpbmc6IDYsXG5cblx0XHRcdC8vIE51bWJlciAtIHBpeGVsIHdpZHRoIG9mIHBhZGRpbmcgYXJvdW5kIHRvb2x0aXAgdGV4dFxuXHRcdFx0dG9vbHRpcFhQYWRkaW5nOiA2LFxuXG5cdFx0XHQvLyBOdW1iZXIgLSBTaXplIG9mIHRoZSBjYXJldCBvbiB0aGUgdG9vbHRpcFxuXHRcdFx0dG9vbHRpcENhcmV0U2l6ZTogOCxcblxuXHRcdFx0Ly8gTnVtYmVyIC0gUGl4ZWwgcmFkaXVzIG9mIHRoZSB0b29sdGlwIGJvcmRlclxuXHRcdFx0dG9vbHRpcENvcm5lclJhZGl1czogNixcblxuXHRcdFx0Ly8gTnVtYmVyIC0gUGl4ZWwgb2Zmc2V0IGZyb20gcG9pbnQgeCB0byB0b29sdGlwIGVkZ2Vcblx0XHRcdHRvb2x0aXBYT2Zmc2V0OiAxMCxcblxuXHRcdFx0Ly8gU3RyaW5nIC0gVGVtcGxhdGUgc3RyaW5nIGZvciBzaW5nbGUgdG9vbHRpcHNcblx0XHRcdHRvb2x0aXBUZW1wbGF0ZTogXCI8JWlmIChsYWJlbCl7JT48JT1sYWJlbCU+OiA8JX0lPjwlPSB2YWx1ZSAlPlwiLFxuXG5cdFx0XHQvLyBTdHJpbmcgLSBUZW1wbGF0ZSBzdHJpbmcgZm9yIHNpbmdsZSB0b29sdGlwc1xuXHRcdFx0bXVsdGlUb29sdGlwVGVtcGxhdGU6IFwiPCU9IHZhbHVlICU+XCIsXG5cblx0XHRcdC8vIFN0cmluZyAtIENvbG91ciBiZWhpbmQgdGhlIGxlZ2VuZCBjb2xvdXIgYmxvY2tcblx0XHRcdG11bHRpVG9vbHRpcEtleUJhY2tncm91bmQ6ICcjZmZmJyxcblxuXHRcdFx0Ly8gRnVuY3Rpb24gLSBXaWxsIGZpcmUgb24gYW5pbWF0aW9uIHByb2dyZXNzaW9uLlxuXHRcdFx0b25BbmltYXRpb25Qcm9ncmVzczogZnVuY3Rpb24oKXt9LFxuXG5cdFx0XHQvLyBGdW5jdGlvbiAtIFdpbGwgZmlyZSBvbiBhbmltYXRpb24gY29tcGxldGlvbi5cblx0XHRcdG9uQW5pbWF0aW9uQ29tcGxldGU6IGZ1bmN0aW9uKCl7fVxuXG5cdFx0fVxuXHR9O1xuXG5cdC8vQ3JlYXRlIGEgZGljdGlvbmFyeSBvZiBjaGFydCB0eXBlcywgdG8gYWxsb3cgZm9yIGV4dGVuc2lvbiBvZiBleGlzdGluZyB0eXBlc1xuXHRDaGFydC50eXBlcyA9IHt9O1xuXG5cdC8vR2xvYmFsIENoYXJ0IGhlbHBlcnMgb2JqZWN0IGZvciB1dGlsaXR5IG1ldGhvZHMgYW5kIGNsYXNzZXNcblx0dmFyIGhlbHBlcnMgPSBDaGFydC5oZWxwZXJzID0ge307XG5cblx0XHQvLy0tIEJhc2ljIGpzIHV0aWxpdHkgbWV0aG9kc1xuXHR2YXIgZWFjaCA9IGhlbHBlcnMuZWFjaCA9IGZ1bmN0aW9uKGxvb3BhYmxlLGNhbGxiYWNrLHNlbGYpe1xuXHRcdFx0dmFyIGFkZGl0aW9uYWxBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKTtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBudWxsIG9yIHVuZGVmaW5lZCBmaXJzdGx5LlxuXHRcdFx0aWYgKGxvb3BhYmxlKXtcblx0XHRcdFx0aWYgKGxvb3BhYmxlLmxlbmd0aCA9PT0gK2xvb3BhYmxlLmxlbmd0aCl7XG5cdFx0XHRcdFx0dmFyIGk7XG5cdFx0XHRcdFx0Zm9yIChpPTA7IGk8bG9vcGFibGUubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoc2VsZixbbG9vcGFibGVbaV0sIGldLmNvbmNhdChhZGRpdGlvbmFsQXJncykpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNle1xuXHRcdFx0XHRcdGZvciAodmFyIGl0ZW0gaW4gbG9vcGFibGUpe1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoc2VsZixbbG9vcGFibGVbaXRlbV0saXRlbV0uY29uY2F0KGFkZGl0aW9uYWxBcmdzKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRjbG9uZSA9IGhlbHBlcnMuY2xvbmUgPSBmdW5jdGlvbihvYmope1xuXHRcdFx0dmFyIG9iakNsb25lID0ge307XG5cdFx0XHRlYWNoKG9iaixmdW5jdGlvbih2YWx1ZSxrZXkpe1xuXHRcdFx0XHRpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIG9iakNsb25lW2tleV0gPSB2YWx1ZTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIG9iakNsb25lO1xuXHRcdH0sXG5cdFx0ZXh0ZW5kID0gaGVscGVycy5leHRlbmQgPSBmdW5jdGlvbihiYXNlKXtcblx0XHRcdGVhY2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLCBmdW5jdGlvbihleHRlbnNpb25PYmplY3QpIHtcblx0XHRcdFx0ZWFjaChleHRlbnNpb25PYmplY3QsZnVuY3Rpb24odmFsdWUsa2V5KXtcblx0XHRcdFx0XHRpZiAoZXh0ZW5zaW9uT2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkpIGJhc2Vba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGJhc2U7XG5cdFx0fSxcblx0XHRtZXJnZSA9IGhlbHBlcnMubWVyZ2UgPSBmdW5jdGlvbihiYXNlLG1hc3Rlcil7XG5cdFx0XHQvL01lcmdlIHByb3BlcnRpZXMgaW4gbGVmdCBvYmplY3Qgb3ZlciB0byBhIHNoYWxsb3cgY2xvbmUgb2Ygb2JqZWN0IHJpZ2h0LlxuXHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMCk7XG5cdFx0XHRhcmdzLnVuc2hpZnQoe30pO1xuXHRcdFx0cmV0dXJuIGV4dGVuZC5hcHBseShudWxsLCBhcmdzKTtcblx0XHR9LFxuXHRcdGluZGV4T2YgPSBoZWxwZXJzLmluZGV4T2YgPSBmdW5jdGlvbihhcnJheVRvU2VhcmNoLCBpdGVtKXtcblx0XHRcdGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuXHRcdFx0XHRyZXR1cm4gYXJyYXlUb1NlYXJjaC5pbmRleE9mKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZXtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheVRvU2VhcmNoLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aWYgKGFycmF5VG9TZWFyY2hbaV0gPT09IGl0ZW0pIHJldHVybiBpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHdoZXJlID0gaGVscGVycy53aGVyZSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGZpbHRlckNhbGxiYWNrKXtcblx0XHRcdHZhciBmaWx0ZXJlZCA9IFtdO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHRcdGlmIChmaWx0ZXJDYWxsYmFjayhpdGVtKSl7XG5cdFx0XHRcdFx0ZmlsdGVyZWQucHVzaChpdGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiBmaWx0ZXJlZDtcblx0XHR9LFxuXHRcdGZpbmROZXh0V2hlcmUgPSBoZWxwZXJzLmZpbmROZXh0V2hlcmUgPSBmdW5jdGlvbihhcnJheVRvU2VhcmNoLCBmaWx0ZXJDYWxsYmFjaywgc3RhcnRJbmRleCl7XG5cdFx0XHQvLyBEZWZhdWx0IHRvIHN0YXJ0IG9mIHRoZSBhcnJheVxuXHRcdFx0aWYgKCFzdGFydEluZGV4KXtcblx0XHRcdFx0c3RhcnRJbmRleCA9IC0xO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgaSA9IHN0YXJ0SW5kZXggKyAxOyBpIDwgYXJyYXlUb1NlYXJjaC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgY3VycmVudEl0ZW0gPSBhcnJheVRvU2VhcmNoW2ldO1xuXHRcdFx0XHRpZiAoZmlsdGVyQ2FsbGJhY2soY3VycmVudEl0ZW0pKXtcblx0XHRcdFx0XHRyZXR1cm4gY3VycmVudEl0ZW07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGZpbmRQcmV2aW91c1doZXJlID0gaGVscGVycy5maW5kUHJldmlvdXNXaGVyZSA9IGZ1bmN0aW9uKGFycmF5VG9TZWFyY2gsIGZpbHRlckNhbGxiYWNrLCBzdGFydEluZGV4KXtcblx0XHRcdC8vIERlZmF1bHQgdG8gZW5kIG9mIHRoZSBhcnJheVxuXHRcdFx0aWYgKCFzdGFydEluZGV4KXtcblx0XHRcdFx0c3RhcnRJbmRleCA9IGFycmF5VG9TZWFyY2gubGVuZ3RoO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgaSA9IHN0YXJ0SW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHR2YXIgY3VycmVudEl0ZW0gPSBhcnJheVRvU2VhcmNoW2ldO1xuXHRcdFx0XHRpZiAoZmlsdGVyQ2FsbGJhY2soY3VycmVudEl0ZW0pKXtcblx0XHRcdFx0XHRyZXR1cm4gY3VycmVudEl0ZW07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGluaGVyaXRzID0gaGVscGVycy5pbmhlcml0cyA9IGZ1bmN0aW9uKGV4dGVuc2lvbnMpe1xuXHRcdFx0Ly9CYXNpYyBqYXZhc2NyaXB0IGluaGVyaXRhbmNlIGJhc2VkIG9uIHRoZSBtb2RlbCBjcmVhdGVkIGluIEJhY2tib25lLmpzXG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcztcblx0XHRcdHZhciBDaGFydEVsZW1lbnQgPSAoZXh0ZW5zaW9ucyAmJiBleHRlbnNpb25zLmhhc093blByb3BlcnR5KFwiY29uc3RydWN0b3JcIikpID8gZXh0ZW5zaW9ucy5jb25zdHJ1Y3RvciA6IGZ1bmN0aW9uKCl7IHJldHVybiBwYXJlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcblxuXHRcdFx0dmFyIFN1cnJvZ2F0ZSA9IGZ1bmN0aW9uKCl7IHRoaXMuY29uc3RydWN0b3IgPSBDaGFydEVsZW1lbnQ7fTtcblx0XHRcdFN1cnJvZ2F0ZS5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlO1xuXHRcdFx0Q2hhcnRFbGVtZW50LnByb3RvdHlwZSA9IG5ldyBTdXJyb2dhdGUoKTtcblxuXHRcdFx0Q2hhcnRFbGVtZW50LmV4dGVuZCA9IGluaGVyaXRzO1xuXG5cdFx0XHRpZiAoZXh0ZW5zaW9ucykgZXh0ZW5kKENoYXJ0RWxlbWVudC5wcm90b3R5cGUsIGV4dGVuc2lvbnMpO1xuXG5cdFx0XHRDaGFydEVsZW1lbnQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTtcblxuXHRcdFx0cmV0dXJuIENoYXJ0RWxlbWVudDtcblx0XHR9LFxuXHRcdG5vb3AgPSBoZWxwZXJzLm5vb3AgPSBmdW5jdGlvbigpe30sXG5cdFx0dWlkID0gaGVscGVycy51aWQgPSAoZnVuY3Rpb24oKXtcblx0XHRcdHZhciBpZD0wO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHJldHVybiBcImNoYXJ0LVwiICsgaWQrKztcblx0XHRcdH07XG5cdFx0fSkoKSxcblx0XHR3YXJuID0gaGVscGVycy53YXJuID0gZnVuY3Rpb24oc3RyKXtcblx0XHRcdC8vTWV0aG9kIGZvciB3YXJuaW5nIG9mIGVycm9yc1xuXHRcdFx0aWYgKHdpbmRvdy5jb25zb2xlICYmIHR5cGVvZiB3aW5kb3cuY29uc29sZS53YXJuID09IFwiZnVuY3Rpb25cIikgY29uc29sZS53YXJuKHN0cik7XG5cdFx0fSxcblx0XHRhbWQgPSBoZWxwZXJzLmFtZCA9ICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCksXG5cdFx0Ly8tLSBNYXRoIG1ldGhvZHNcblx0XHRpc051bWJlciA9IGhlbHBlcnMuaXNOdW1iZXIgPSBmdW5jdGlvbihuKXtcblx0XHRcdHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG5cdFx0fSxcblx0XHRtYXggPSBoZWxwZXJzLm1heCA9IGZ1bmN0aW9uKGFycmF5KXtcblx0XHRcdHJldHVybiBNYXRoLm1heC5hcHBseSggTWF0aCwgYXJyYXkgKTtcblx0XHR9LFxuXHRcdG1pbiA9IGhlbHBlcnMubWluID0gZnVuY3Rpb24oYXJyYXkpe1xuXHRcdFx0cmV0dXJuIE1hdGgubWluLmFwcGx5KCBNYXRoLCBhcnJheSApO1xuXHRcdH0sXG5cdFx0Y2FwID0gaGVscGVycy5jYXAgPSBmdW5jdGlvbih2YWx1ZVRvQ2FwLG1heFZhbHVlLG1pblZhbHVlKXtcblx0XHRcdGlmKGlzTnVtYmVyKG1heFZhbHVlKSkge1xuXHRcdFx0XHRpZiggdmFsdWVUb0NhcCA+IG1heFZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXhWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihpc051bWJlcihtaW5WYWx1ZSkpe1xuXHRcdFx0XHRpZiAoIHZhbHVlVG9DYXAgPCBtaW5WYWx1ZSApe1xuXHRcdFx0XHRcdHJldHVybiBtaW5WYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlVG9DYXA7XG5cdFx0fSxcblx0XHRnZXREZWNpbWFsUGxhY2VzID0gaGVscGVycy5nZXREZWNpbWFsUGxhY2VzID0gZnVuY3Rpb24obnVtKXtcblx0XHRcdGlmIChudW0lMSE9PTAgJiYgaXNOdW1iZXIobnVtKSl7XG5cdFx0XHRcdHJldHVybiBudW0udG9TdHJpbmcoKS5zcGxpdChcIi5cIilbMV0ubGVuZ3RoO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dG9SYWRpYW5zID0gaGVscGVycy5yYWRpYW5zID0gZnVuY3Rpb24oZGVncmVlcyl7XG5cdFx0XHRyZXR1cm4gZGVncmVlcyAqIChNYXRoLlBJLzE4MCk7XG5cdFx0fSxcblx0XHQvLyBHZXRzIHRoZSBhbmdsZSBmcm9tIHZlcnRpY2FsIHVwcmlnaHQgdG8gdGhlIHBvaW50IGFib3V0IGEgY2VudHJlLlxuXHRcdGdldEFuZ2xlRnJvbVBvaW50ID0gaGVscGVycy5nZXRBbmdsZUZyb21Qb2ludCA9IGZ1bmN0aW9uKGNlbnRyZVBvaW50LCBhbmdsZVBvaW50KXtcblx0XHRcdHZhciBkaXN0YW5jZUZyb21YQ2VudGVyID0gYW5nbGVQb2ludC54IC0gY2VudHJlUG9pbnQueCxcblx0XHRcdFx0ZGlzdGFuY2VGcm9tWUNlbnRlciA9IGFuZ2xlUG9pbnQueSAtIGNlbnRyZVBvaW50LnksXG5cdFx0XHRcdHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciA9IE1hdGguc3FydCggZGlzdGFuY2VGcm9tWENlbnRlciAqIGRpc3RhbmNlRnJvbVhDZW50ZXIgKyBkaXN0YW5jZUZyb21ZQ2VudGVyICogZGlzdGFuY2VGcm9tWUNlbnRlcik7XG5cblxuXHRcdFx0dmFyIGFuZ2xlID0gTWF0aC5QSSAqIDIgKyBNYXRoLmF0YW4yKGRpc3RhbmNlRnJvbVlDZW50ZXIsIGRpc3RhbmNlRnJvbVhDZW50ZXIpO1xuXG5cdFx0XHQvL0lmIHRoZSBzZWdtZW50IGlzIGluIHRoZSB0b3AgbGVmdCBxdWFkcmFudCwgd2UgbmVlZCB0byBhZGQgYW5vdGhlciByb3RhdGlvbiB0byB0aGUgYW5nbGVcblx0XHRcdGlmIChkaXN0YW5jZUZyb21YQ2VudGVyIDwgMCAmJiBkaXN0YW5jZUZyb21ZQ2VudGVyIDwgMCl7XG5cdFx0XHRcdGFuZ2xlICs9IE1hdGguUEkqMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0YW5nbGU6IGFuZ2xlLFxuXHRcdFx0XHRkaXN0YW5jZTogcmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyXG5cdFx0XHR9O1xuXHRcdH0sXG5cdFx0YWxpYXNQaXhlbCA9IGhlbHBlcnMuYWxpYXNQaXhlbCA9IGZ1bmN0aW9uKHBpeGVsV2lkdGgpe1xuXHRcdFx0cmV0dXJuIChwaXhlbFdpZHRoICUgMiA9PT0gMCkgPyAwIDogMC41O1xuXHRcdH0sXG5cdFx0c3BsaW5lQ3VydmUgPSBoZWxwZXJzLnNwbGluZUN1cnZlID0gZnVuY3Rpb24oRmlyc3RQb2ludCxNaWRkbGVQb2ludCxBZnRlclBvaW50LHQpe1xuXHRcdFx0Ly9Qcm9wcyB0byBSb2IgU3BlbmNlciBhdCBzY2FsZWQgaW5ub3ZhdGlvbiBmb3IgaGlzIHBvc3Qgb24gc3BsaW5pbmcgYmV0d2VlbiBwb2ludHNcblx0XHRcdC8vaHR0cDovL3NjYWxlZGlubm92YXRpb24uY29tL2FuYWx5dGljcy9zcGxpbmVzL2Fib3V0U3BsaW5lcy5odG1sXG5cdFx0XHR2YXIgZDAxPU1hdGguc3FydChNYXRoLnBvdyhNaWRkbGVQb2ludC54LUZpcnN0UG9pbnQueCwyKStNYXRoLnBvdyhNaWRkbGVQb2ludC55LUZpcnN0UG9pbnQueSwyKSksXG5cdFx0XHRcdGQxMj1NYXRoLnNxcnQoTWF0aC5wb3coQWZ0ZXJQb2ludC54LU1pZGRsZVBvaW50LngsMikrTWF0aC5wb3coQWZ0ZXJQb2ludC55LU1pZGRsZVBvaW50LnksMikpLFxuXHRcdFx0XHRmYT10KmQwMS8oZDAxK2QxMiksLy8gc2NhbGluZyBmYWN0b3IgZm9yIHRyaWFuZ2xlIFRhXG5cdFx0XHRcdGZiPXQqZDEyLyhkMDErZDEyKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGlubmVyIDoge1xuXHRcdFx0XHRcdHggOiBNaWRkbGVQb2ludC54LWZhKihBZnRlclBvaW50LngtRmlyc3RQb2ludC54KSxcblx0XHRcdFx0XHR5IDogTWlkZGxlUG9pbnQueS1mYSooQWZ0ZXJQb2ludC55LUZpcnN0UG9pbnQueSlcblx0XHRcdFx0fSxcblx0XHRcdFx0b3V0ZXIgOiB7XG5cdFx0XHRcdFx0eDogTWlkZGxlUG9pbnQueCtmYiooQWZ0ZXJQb2ludC54LUZpcnN0UG9pbnQueCksXG5cdFx0XHRcdFx0eSA6IE1pZGRsZVBvaW50LnkrZmIqKEFmdGVyUG9pbnQueS1GaXJzdFBvaW50LnkpXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fSxcblx0XHRjYWxjdWxhdGVPcmRlck9mTWFnbml0dWRlID0gaGVscGVycy5jYWxjdWxhdGVPcmRlck9mTWFnbml0dWRlID0gZnVuY3Rpb24odmFsKXtcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKE1hdGgubG9nKHZhbCkgLyBNYXRoLkxOMTApO1xuXHRcdH0sXG5cdFx0Y2FsY3VsYXRlU2NhbGVSYW5nZSA9IGhlbHBlcnMuY2FsY3VsYXRlU2NhbGVSYW5nZSA9IGZ1bmN0aW9uKHZhbHVlc0FycmF5LCBkcmF3aW5nU2l6ZSwgdGV4dFNpemUsIHN0YXJ0RnJvbVplcm8sIGludGVnZXJzT25seSl7XG5cblx0XHRcdC8vU2V0IGEgbWluaW11bSBzdGVwIG9mIHR3byAtIGEgcG9pbnQgYXQgdGhlIHRvcCBvZiB0aGUgZ3JhcGgsIGFuZCBhIHBvaW50IGF0IHRoZSBiYXNlXG5cdFx0XHR2YXIgbWluU3RlcHMgPSAyLFxuXHRcdFx0XHRtYXhTdGVwcyA9IE1hdGguZmxvb3IoZHJhd2luZ1NpemUvKHRleHRTaXplICogMS41KSksXG5cdFx0XHRcdHNraXBGaXR0aW5nID0gKG1pblN0ZXBzID49IG1heFN0ZXBzKTtcblxuXHRcdFx0dmFyIG1heFZhbHVlID0gbWF4KHZhbHVlc0FycmF5KSxcblx0XHRcdFx0bWluVmFsdWUgPSBtaW4odmFsdWVzQXJyYXkpO1xuXG5cdFx0XHQvLyBXZSBuZWVkIHNvbWUgZGVncmVlIG9mIHNlcGVyYXRpb24gaGVyZSB0byBjYWxjdWxhdGUgdGhlIHNjYWxlcyBpZiBhbGwgdGhlIHZhbHVlcyBhcmUgdGhlIHNhbWVcblx0XHRcdC8vIEFkZGluZy9taW51c2luZyAwLjUgd2lsbCBnaXZlIHVzIGEgcmFuZ2Ugb2YgMS5cblx0XHRcdGlmIChtYXhWYWx1ZSA9PT0gbWluVmFsdWUpe1xuXHRcdFx0XHRtYXhWYWx1ZSArPSAwLjU7XG5cdFx0XHRcdC8vIFNvIHdlIGRvbid0IGVuZCB1cCB3aXRoIGEgZ3JhcGggd2l0aCBhIG5lZ2F0aXZlIHN0YXJ0IHZhbHVlIGlmIHdlJ3ZlIHNhaWQgYWx3YXlzIHN0YXJ0IGZyb20gemVyb1xuXHRcdFx0XHRpZiAobWluVmFsdWUgPj0gMC41ICYmICFzdGFydEZyb21aZXJvKXtcblx0XHRcdFx0XHRtaW5WYWx1ZSAtPSAwLjU7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZXtcblx0XHRcdFx0XHQvLyBNYWtlIHVwIGEgd2hvbGUgbnVtYmVyIGFib3ZlIHRoZSB2YWx1ZXNcblx0XHRcdFx0XHRtYXhWYWx1ZSArPSAwLjU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dmFyXHR2YWx1ZVJhbmdlID0gTWF0aC5hYnMobWF4VmFsdWUgLSBtaW5WYWx1ZSksXG5cdFx0XHRcdHJhbmdlT3JkZXJPZk1hZ25pdHVkZSA9IGNhbGN1bGF0ZU9yZGVyT2ZNYWduaXR1ZGUodmFsdWVSYW5nZSksXG5cdFx0XHRcdGdyYXBoTWF4ID0gTWF0aC5jZWlsKG1heFZhbHVlIC8gKDEgKiBNYXRoLnBvdygxMCwgcmFuZ2VPcmRlck9mTWFnbml0dWRlKSkpICogTWF0aC5wb3coMTAsIHJhbmdlT3JkZXJPZk1hZ25pdHVkZSksXG5cdFx0XHRcdGdyYXBoTWluID0gKHN0YXJ0RnJvbVplcm8pID8gMCA6IE1hdGguZmxvb3IobWluVmFsdWUgLyAoMSAqIE1hdGgucG93KDEwLCByYW5nZU9yZGVyT2ZNYWduaXR1ZGUpKSkgKiBNYXRoLnBvdygxMCwgcmFuZ2VPcmRlck9mTWFnbml0dWRlKSxcblx0XHRcdFx0Z3JhcGhSYW5nZSA9IGdyYXBoTWF4IC0gZ3JhcGhNaW4sXG5cdFx0XHRcdHN0ZXBWYWx1ZSA9IE1hdGgucG93KDEwLCByYW5nZU9yZGVyT2ZNYWduaXR1ZGUpLFxuXHRcdFx0XHRudW1iZXJPZlN0ZXBzID0gTWF0aC5yb3VuZChncmFwaFJhbmdlIC8gc3RlcFZhbHVlKTtcblxuXHRcdFx0Ly9JZiB3ZSBoYXZlIG1vcmUgc3BhY2Ugb24gdGhlIGdyYXBoIHdlJ2xsIHVzZSBpdCB0byBnaXZlIG1vcmUgZGVmaW5pdGlvbiB0byB0aGUgZGF0YVxuXHRcdFx0d2hpbGUoKG51bWJlck9mU3RlcHMgPiBtYXhTdGVwcyB8fCAobnVtYmVyT2ZTdGVwcyAqIDIpIDwgbWF4U3RlcHMpICYmICFza2lwRml0dGluZykge1xuXHRcdFx0XHRpZihudW1iZXJPZlN0ZXBzID4gbWF4U3RlcHMpe1xuXHRcdFx0XHRcdHN0ZXBWYWx1ZSAqPTI7XG5cdFx0XHRcdFx0bnVtYmVyT2ZTdGVwcyA9IE1hdGgucm91bmQoZ3JhcGhSYW5nZS9zdGVwVmFsdWUpO1xuXHRcdFx0XHRcdC8vIERvbid0IGV2ZXIgZGVhbCB3aXRoIGEgZGVjaW1hbCBudW1iZXIgb2Ygc3RlcHMgLSBjYW5jZWwgZml0dGluZyBhbmQganVzdCB1c2UgdGhlIG1pbmltdW0gbnVtYmVyIG9mIHN0ZXBzLlxuXHRcdFx0XHRcdGlmIChudW1iZXJPZlN0ZXBzICUgMSAhPT0gMCl7XG5cdFx0XHRcdFx0XHRza2lwRml0dGluZyA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vV2UgY2FuIGZpdCBpbiBkb3VibGUgdGhlIGFtb3VudCBvZiBzY2FsZSBwb2ludHMgb24gdGhlIHNjYWxlXG5cdFx0XHRcdGVsc2V7XG5cdFx0XHRcdFx0Ly9JZiB1c2VyIGhhcyBkZWNsYXJlZCBpbnRzIG9ubHksIGFuZCB0aGUgc3RlcCB2YWx1ZSBpc24ndCBhIGRlY2ltYWxcblx0XHRcdFx0XHRpZiAoaW50ZWdlcnNPbmx5ICYmIHJhbmdlT3JkZXJPZk1hZ25pdHVkZSA+PSAwKXtcblx0XHRcdFx0XHRcdC8vSWYgdGhlIHVzZXIgaGFzIHNhaWQgaW50ZWdlcnMgb25seSwgd2UgbmVlZCB0byBjaGVjayB0aGF0IG1ha2luZyB0aGUgc2NhbGUgbW9yZSBncmFudWxhciB3b3VsZG4ndCBtYWtlIGl0IGEgZmxvYXRcblx0XHRcdFx0XHRcdGlmKHN0ZXBWYWx1ZS8yICUgMSA9PT0gMCl7XG5cdFx0XHRcdFx0XHRcdHN0ZXBWYWx1ZSAvPTI7XG5cdFx0XHRcdFx0XHRcdG51bWJlck9mU3RlcHMgPSBNYXRoLnJvdW5kKGdyYXBoUmFuZ2Uvc3RlcFZhbHVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vSWYgaXQgd291bGQgbWFrZSBpdCBhIGZsb2F0IGJyZWFrIG91dCBvZiB0aGUgbG9vcFxuXHRcdFx0XHRcdFx0ZWxzZXtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vSWYgdGhlIHNjYWxlIGRvZXNuJ3QgaGF2ZSB0byBiZSBhbiBpbnQsIG1ha2UgdGhlIHNjYWxlIG1vcmUgZ3JhbnVsYXIgYW55d2F5LlxuXHRcdFx0XHRcdGVsc2V7XG5cdFx0XHRcdFx0XHRzdGVwVmFsdWUgLz0yO1xuXHRcdFx0XHRcdFx0bnVtYmVyT2ZTdGVwcyA9IE1hdGgucm91bmQoZ3JhcGhSYW5nZS9zdGVwVmFsdWUpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChza2lwRml0dGluZyl7XG5cdFx0XHRcdG51bWJlck9mU3RlcHMgPSBtaW5TdGVwcztcblx0XHRcdFx0c3RlcFZhbHVlID0gZ3JhcGhSYW5nZSAvIG51bWJlck9mU3RlcHM7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHN0ZXBzIDogbnVtYmVyT2ZTdGVwcyxcblx0XHRcdFx0c3RlcFZhbHVlIDogc3RlcFZhbHVlLFxuXHRcdFx0XHRtaW4gOiBncmFwaE1pbixcblx0XHRcdFx0bWF4XHQ6IGdyYXBoTWluICsgKG51bWJlck9mU3RlcHMgKiBzdGVwVmFsdWUpXG5cdFx0XHR9O1xuXG5cdFx0fSxcblx0XHQvKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG5cdFx0Ly8gQmxvd3MgdXAganNoaW50IGVycm9ycyBiYXNlZCBvbiB0aGUgbmV3IEZ1bmN0aW9uIGNvbnN0cnVjdG9yXG5cdFx0Ly9UZW1wbGF0aW5nIG1ldGhvZHNcblx0XHQvL0phdmFzY3JpcHQgbWljcm8gdGVtcGxhdGluZyBieSBKb2huIFJlc2lnIC0gc291cmNlIGF0IGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvXG5cdFx0dGVtcGxhdGUgPSBoZWxwZXJzLnRlbXBsYXRlID0gZnVuY3Rpb24odGVtcGxhdGVTdHJpbmcsIHZhbHVlc09iamVjdCl7XG5cblx0XHRcdC8vIElmIHRlbXBsYXRlU3RyaW5nIGlzIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHN0cmluZy10ZW1wbGF0ZSAtIGNhbGwgdGhlIGZ1bmN0aW9uIGZvciB2YWx1ZXNPYmplY3RcblxuXHRcdFx0aWYodGVtcGxhdGVTdHJpbmcgaW5zdGFuY2VvZiBGdW5jdGlvbil7XG5cdFx0XHQgXHRyZXR1cm4gdGVtcGxhdGVTdHJpbmcodmFsdWVzT2JqZWN0KTtcblx0XHQgXHR9XG5cblx0XHRcdHZhciBjYWNoZSA9IHt9O1xuXHRcdFx0ZnVuY3Rpb24gdG1wbChzdHIsIGRhdGEpe1xuXHRcdFx0XHQvLyBGaWd1cmUgb3V0IGlmIHdlJ3JlIGdldHRpbmcgYSB0ZW1wbGF0ZSwgb3IgaWYgd2UgbmVlZCB0b1xuXHRcdFx0XHQvLyBsb2FkIHRoZSB0ZW1wbGF0ZSAtIGFuZCBiZSBzdXJlIHRvIGNhY2hlIHRoZSByZXN1bHQuXG5cdFx0XHRcdHZhciBmbiA9ICEvXFxXLy50ZXN0KHN0cikgP1xuXHRcdFx0XHRjYWNoZVtzdHJdID0gY2FjaGVbc3RyXSA6XG5cblx0XHRcdFx0Ly8gR2VuZXJhdGUgYSByZXVzYWJsZSBmdW5jdGlvbiB0aGF0IHdpbGwgc2VydmUgYXMgYSB0ZW1wbGF0ZVxuXHRcdFx0XHQvLyBnZW5lcmF0b3IgKGFuZCB3aGljaCB3aWxsIGJlIGNhY2hlZCkuXG5cdFx0XHRcdG5ldyBGdW5jdGlvbihcIm9ialwiLFxuXHRcdFx0XHRcdFwidmFyIHA9W10scHJpbnQ9ZnVuY3Rpb24oKXtwLnB1c2guYXBwbHkocCxhcmd1bWVudHMpO307XCIgK1xuXG5cdFx0XHRcdFx0Ly8gSW50cm9kdWNlIHRoZSBkYXRhIGFzIGxvY2FsIHZhcmlhYmxlcyB1c2luZyB3aXRoKCl7fVxuXHRcdFx0XHRcdFwid2l0aChvYmope3AucHVzaCgnXCIgK1xuXG5cdFx0XHRcdFx0Ly8gQ29udmVydCB0aGUgdGVtcGxhdGUgaW50byBwdXJlIEphdmFTY3JpcHRcblx0XHRcdFx0XHRzdHJcblx0XHRcdFx0XHRcdC5yZXBsYWNlKC9bXFxyXFx0XFxuXS9nLCBcIiBcIilcblx0XHRcdFx0XHRcdC5zcGxpdChcIjwlXCIpLmpvaW4oXCJcXHRcIilcblx0XHRcdFx0XHRcdC5yZXBsYWNlKC8oKF58JT4pW15cXHRdKiknL2csIFwiJDFcXHJcIilcblx0XHRcdFx0XHRcdC5yZXBsYWNlKC9cXHQ9KC4qPyklPi9nLCBcIicsJDEsJ1wiKVxuXHRcdFx0XHRcdFx0LnNwbGl0KFwiXFx0XCIpLmpvaW4oXCInKTtcIilcblx0XHRcdFx0XHRcdC5zcGxpdChcIiU+XCIpLmpvaW4oXCJwLnB1c2goJ1wiKVxuXHRcdFx0XHRcdFx0LnNwbGl0KFwiXFxyXCIpLmpvaW4oXCJcXFxcJ1wiKSArXG5cdFx0XHRcdFx0XCInKTt9cmV0dXJuIHAuam9pbignJyk7XCJcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBQcm92aWRlIHNvbWUgYmFzaWMgY3VycnlpbmcgdG8gdGhlIHVzZXJcblx0XHRcdFx0cmV0dXJuIGRhdGEgPyBmbiggZGF0YSApIDogZm47XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdG1wbCh0ZW1wbGF0ZVN0cmluZyx2YWx1ZXNPYmplY3QpO1xuXHRcdH0sXG5cdFx0LyoganNoaW50IGlnbm9yZTplbmQgKi9cblx0XHRnZW5lcmF0ZUxhYmVscyA9IGhlbHBlcnMuZ2VuZXJhdGVMYWJlbHMgPSBmdW5jdGlvbih0ZW1wbGF0ZVN0cmluZyxudW1iZXJPZlN0ZXBzLGdyYXBoTWluLHN0ZXBWYWx1ZSl7XG5cdFx0XHR2YXIgbGFiZWxzQXJyYXkgPSBuZXcgQXJyYXkobnVtYmVyT2ZTdGVwcyk7XG5cdFx0XHRpZiAobGFiZWxUZW1wbGF0ZVN0cmluZyl7XG5cdFx0XHRcdGVhY2gobGFiZWxzQXJyYXksZnVuY3Rpb24odmFsLGluZGV4KXtcblx0XHRcdFx0XHRsYWJlbHNBcnJheVtpbmRleF0gPSB0ZW1wbGF0ZSh0ZW1wbGF0ZVN0cmluZyx7dmFsdWU6IChncmFwaE1pbiArIChzdGVwVmFsdWUqKGluZGV4KzEpKSl9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbGFiZWxzQXJyYXk7XG5cdFx0fSxcblx0XHQvLy0tQW5pbWF0aW9uIG1ldGhvZHNcblx0XHQvL0Vhc2luZyBmdW5jdGlvbnMgYWRhcHRlZCBmcm9tIFJvYmVydCBQZW5uZXIncyBlYXNpbmcgZXF1YXRpb25zXG5cdFx0Ly9odHRwOi8vd3d3LnJvYmVydHBlbm5lci5jb20vZWFzaW5nL1xuXHRcdGVhc2luZ0VmZmVjdHMgPSBoZWxwZXJzLmVhc2luZ0VmZmVjdHMgPSB7XG5cdFx0XHRsaW5lYXI6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiB0O1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJblF1YWQ6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiB0ICogdDtcblx0XHRcdH0sXG5cdFx0XHRlYXNlT3V0UXVhZDogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0cmV0dXJuIC0xICogdCAqICh0IC0gMik7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluT3V0UXVhZDogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0aWYgKCh0IC89IDEgLyAyKSA8IDEpIHJldHVybiAxIC8gMiAqIHQgKiB0O1xuXHRcdFx0XHRyZXR1cm4gLTEgLyAyICogKCgtLXQpICogKHQgLSAyKSAtIDEpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbkN1YmljOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRyZXR1cm4gdCAqIHQgKiB0O1xuXHRcdFx0fSxcblx0XHRcdGVhc2VPdXRDdWJpYzogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0cmV0dXJuIDEgKiAoKHQgPSB0IC8gMSAtIDEpICogdCAqIHQgKyAxKTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlSW5PdXRDdWJpYzogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0aWYgKCh0IC89IDEgLyAyKSA8IDEpIHJldHVybiAxIC8gMiAqIHQgKiB0ICogdDtcblx0XHRcdFx0cmV0dXJuIDEgLyAyICogKCh0IC09IDIpICogdCAqIHQgKyAyKTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlSW5RdWFydDogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0cmV0dXJuIHQgKiB0ICogdCAqIHQ7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZU91dFF1YXJ0OiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRyZXR1cm4gLTEgKiAoKHQgPSB0IC8gMSAtIDEpICogdCAqIHQgKiB0IC0gMSk7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluT3V0UXVhcnQ6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdGlmICgodCAvPSAxIC8gMikgPCAxKSByZXR1cm4gMSAvIDIgKiB0ICogdCAqIHQgKiB0O1xuXHRcdFx0XHRyZXR1cm4gLTEgLyAyICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMik7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluUXVpbnQ6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiAxICogKHQgLz0gMSkgKiB0ICogdCAqIHQgKiB0O1xuXHRcdFx0fSxcblx0XHRcdGVhc2VPdXRRdWludDogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0cmV0dXJuIDEgKiAoKHQgPSB0IC8gMSAtIDEpICogdCAqIHQgKiB0ICogdCArIDEpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbk91dFF1aW50OiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRpZiAoKHQgLz0gMSAvIDIpIDwgMSkgcmV0dXJuIDEgLyAyICogdCAqIHQgKiB0ICogdCAqIHQ7XG5cdFx0XHRcdHJldHVybiAxIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlSW5TaW5lOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRyZXR1cm4gLTEgKiBNYXRoLmNvcyh0IC8gMSAqIChNYXRoLlBJIC8gMikpICsgMTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlT3V0U2luZTogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0cmV0dXJuIDEgKiBNYXRoLnNpbih0IC8gMSAqIChNYXRoLlBJIC8gMikpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbk91dFNpbmU6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiAtMSAvIDIgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIHQgLyAxKSAtIDEpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbkV4cG86IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHJldHVybiAodCA9PT0gMCkgPyAxIDogMSAqIE1hdGgucG93KDIsIDEwICogKHQgLyAxIC0gMSkpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VPdXRFeHBvOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRyZXR1cm4gKHQgPT09IDEpID8gMSA6IDEgKiAoLU1hdGgucG93KDIsIC0xMCAqIHQgLyAxKSArIDEpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbk91dEV4cG86IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdGlmICh0ID09PSAwKSByZXR1cm4gMDtcblx0XHRcdFx0aWYgKHQgPT09IDEpIHJldHVybiAxO1xuXHRcdFx0XHRpZiAoKHQgLz0gMSAvIDIpIDwgMSkgcmV0dXJuIDEgLyAyICogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKTtcblx0XHRcdFx0cmV0dXJuIDEgLyAyICogKC1NYXRoLnBvdygyLCAtMTAgKiAtLXQpICsgMik7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluQ2lyYzogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0aWYgKHQgPj0gMSkgcmV0dXJuIHQ7XG5cdFx0XHRcdHJldHVybiAtMSAqIChNYXRoLnNxcnQoMSAtICh0IC89IDEpICogdCkgLSAxKTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlT3V0Q2lyYzogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0cmV0dXJuIDEgKiBNYXRoLnNxcnQoMSAtICh0ID0gdCAvIDEgLSAxKSAqIHQpO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbk91dENpcmM6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdGlmICgodCAvPSAxIC8gMikgPCAxKSByZXR1cm4gLTEgLyAyICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSk7XG5cdFx0XHRcdHJldHVybiAxIC8gMiAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlSW5FbGFzdGljOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0XHRcdHZhciBwID0gMDtcblx0XHRcdFx0dmFyIGEgPSAxO1xuXHRcdFx0XHRpZiAodCA9PT0gMCkgcmV0dXJuIDA7XG5cdFx0XHRcdGlmICgodCAvPSAxKSA9PSAxKSByZXR1cm4gMTtcblx0XHRcdFx0aWYgKCFwKSBwID0gMSAqIDAuMztcblx0XHRcdFx0aWYgKGEgPCBNYXRoLmFicygxKSkge1xuXHRcdFx0XHRcdGEgPSAxO1xuXHRcdFx0XHRcdHMgPSBwIC8gNDtcblx0XHRcdFx0fSBlbHNlIHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbigxIC8gYSk7XG5cdFx0XHRcdHJldHVybiAtKGEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0ICogMSAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApKTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlT3V0RWxhc3RpYzogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdFx0XHR2YXIgcCA9IDA7XG5cdFx0XHRcdHZhciBhID0gMTtcblx0XHRcdFx0aWYgKHQgPT09IDApIHJldHVybiAwO1xuXHRcdFx0XHRpZiAoKHQgLz0gMSkgPT0gMSkgcmV0dXJuIDE7XG5cdFx0XHRcdGlmICghcCkgcCA9IDEgKiAwLjM7XG5cdFx0XHRcdGlmIChhIDwgTWF0aC5hYnMoMSkpIHtcblx0XHRcdFx0XHRhID0gMTtcblx0XHRcdFx0XHRzID0gcCAvIDQ7XG5cdFx0XHRcdH0gZWxzZSBzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oMSAvIGEpO1xuXHRcdFx0XHRyZXR1cm4gYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHQgKiAxIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkgKyAxO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbk91dEVsYXN0aWM6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHZhciBzID0gMS43MDE1ODtcblx0XHRcdFx0dmFyIHAgPSAwO1xuXHRcdFx0XHR2YXIgYSA9IDE7XG5cdFx0XHRcdGlmICh0ID09PSAwKSByZXR1cm4gMDtcblx0XHRcdFx0aWYgKCh0IC89IDEgLyAyKSA9PSAyKSByZXR1cm4gMTtcblx0XHRcdFx0aWYgKCFwKSBwID0gMSAqICgwLjMgKiAxLjUpO1xuXHRcdFx0XHRpZiAoYSA8IE1hdGguYWJzKDEpKSB7XG5cdFx0XHRcdFx0YSA9IDE7XG5cdFx0XHRcdFx0cyA9IHAgLyA0O1xuXHRcdFx0XHR9IGVsc2UgcyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKDEgLyBhKTtcblx0XHRcdFx0aWYgKHQgPCAxKSByZXR1cm4gLTAuNSAqIChhICogTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAqIDEgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSk7XG5cdFx0XHRcdHJldHVybiBhICogTWF0aC5wb3coMiwgLTEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgKiAxIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkgKiAwLjUgKyAxO1xuXHRcdFx0fSxcblx0XHRcdGVhc2VJbkJhY2s6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdHZhciBzID0gMS43MDE1ODtcblx0XHRcdFx0cmV0dXJuIDEgKiAodCAvPSAxKSAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlT3V0QmFjazogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdFx0XHRyZXR1cm4gMSAqICgodCA9IHQgLyAxIC0gMSkgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxKTtcblx0XHRcdH0sXG5cdFx0XHRlYXNlSW5PdXRCYWNrOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0XHRcdGlmICgodCAvPSAxIC8gMikgPCAxKSByZXR1cm4gMSAvIDIgKiAodCAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0IC0gcykpO1xuXHRcdFx0XHRyZXR1cm4gMSAvIDIgKiAoKHQgLT0gMikgKiB0ICogKCgocyAqPSAoMS41MjUpKSArIDEpICogdCArIHMpICsgMik7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZUluQm91bmNlOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0XHRyZXR1cm4gMSAtIGVhc2luZ0VmZmVjdHMuZWFzZU91dEJvdW5jZSgxIC0gdCk7XG5cdFx0XHR9LFxuXHRcdFx0ZWFzZU91dEJvdW5jZTogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0aWYgKCh0IC89IDEpIDwgKDEgLyAyLjc1KSkge1xuXHRcdFx0XHRcdHJldHVybiAxICogKDcuNTYyNSAqIHQgKiB0KTtcblx0XHRcdFx0fSBlbHNlIGlmICh0IDwgKDIgLyAyLjc1KSkge1xuXHRcdFx0XHRcdHJldHVybiAxICogKDcuNTYyNSAqICh0IC09ICgxLjUgLyAyLjc1KSkgKiB0ICsgMC43NSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodCA8ICgyLjUgLyAyLjc1KSkge1xuXHRcdFx0XHRcdHJldHVybiAxICogKDcuNTYyNSAqICh0IC09ICgyLjI1IC8gMi43NSkpICogdCArIDAuOTM3NSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIDEgKiAoNy41NjI1ICogKHQgLT0gKDIuNjI1IC8gMi43NSkpICogdCArIDAuOTg0Mzc1KTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGVhc2VJbk91dEJvdW5jZTogZnVuY3Rpb24gKHQpIHtcblx0XHRcdFx0aWYgKHQgPCAxIC8gMikgcmV0dXJuIGVhc2luZ0VmZmVjdHMuZWFzZUluQm91bmNlKHQgKiAyKSAqIDAuNTtcblx0XHRcdFx0cmV0dXJuIGVhc2luZ0VmZmVjdHMuZWFzZU91dEJvdW5jZSh0ICogMiAtIDEpICogMC41ICsgMSAqIDAuNTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdC8vUmVxdWVzdCBhbmltYXRpb24gcG9seWZpbGwgLSBodHRwOi8vd3d3LnBhdWxpcmlzaC5jb20vMjAxMS9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWFuaW1hdGluZy9cblx0XHRyZXF1ZXN0QW5pbUZyYW1lID0gaGVscGVycy5yZXF1ZXN0QW5pbUZyYW1lID0gKGZ1bmN0aW9uKCl7XG5cdFx0XHRyZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0XHR3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHRcdHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdFx0d2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdFx0d2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHRcdGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xuXHRcdFx0XHR9O1xuXHRcdH0pKCksXG5cdFx0Y2FuY2VsQW5pbUZyYW1lID0gaGVscGVycy5jYW5jZWxBbmltRnJhbWUgPSAoZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdFx0d2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHRcdHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0XHR3aW5kb3cub0NhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHRcdHdpbmRvdy5tc0NhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHRcdGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdpbmRvdy5jbGVhclRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XG5cdFx0XHRcdH07XG5cdFx0fSkoKSxcblx0XHRhbmltYXRpb25Mb29wID0gaGVscGVycy5hbmltYXRpb25Mb29wID0gZnVuY3Rpb24oY2FsbGJhY2ssdG90YWxTdGVwcyxlYXNpbmdTdHJpbmcsb25Qcm9ncmVzcyxvbkNvbXBsZXRlLGNoYXJ0SW5zdGFuY2Upe1xuXG5cdFx0XHR2YXIgY3VycmVudFN0ZXAgPSAwLFxuXHRcdFx0XHRlYXNpbmdGdW5jdGlvbiA9IGVhc2luZ0VmZmVjdHNbZWFzaW5nU3RyaW5nXSB8fCBlYXNpbmdFZmZlY3RzLmxpbmVhcjtcblxuXHRcdFx0dmFyIGFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0Y3VycmVudFN0ZXArKztcblx0XHRcdFx0dmFyIHN0ZXBEZWNpbWFsID0gY3VycmVudFN0ZXAvdG90YWxTdGVwcztcblx0XHRcdFx0dmFyIGVhc2VEZWNpbWFsID0gZWFzaW5nRnVuY3Rpb24oc3RlcERlY2ltYWwpO1xuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoY2hhcnRJbnN0YW5jZSxlYXNlRGVjaW1hbCxzdGVwRGVjaW1hbCwgY3VycmVudFN0ZXApO1xuXHRcdFx0XHRvblByb2dyZXNzLmNhbGwoY2hhcnRJbnN0YW5jZSxlYXNlRGVjaW1hbCxzdGVwRGVjaW1hbCk7XG5cdFx0XHRcdGlmIChjdXJyZW50U3RlcCA8IHRvdGFsU3RlcHMpe1xuXHRcdFx0XHRcdGNoYXJ0SW5zdGFuY2UuYW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbUZyYW1lKGFuaW1hdGlvbkZyYW1lKTtcblx0XHRcdFx0fSBlbHNle1xuXHRcdFx0XHRcdG9uQ29tcGxldGUuYXBwbHkoY2hhcnRJbnN0YW5jZSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRyZXF1ZXN0QW5pbUZyYW1lKGFuaW1hdGlvbkZyYW1lKTtcblx0XHR9LFxuXHRcdC8vLS0gRE9NIG1ldGhvZHNcblx0XHRnZXRSZWxhdGl2ZVBvc2l0aW9uID0gaGVscGVycy5nZXRSZWxhdGl2ZVBvc2l0aW9uID0gZnVuY3Rpb24oZXZ0KXtcblx0XHRcdHZhciBtb3VzZVgsIG1vdXNlWTtcblx0XHRcdHZhciBlID0gZXZ0Lm9yaWdpbmFsRXZlbnQgfHwgZXZ0LFxuXHRcdFx0XHRjYW52YXMgPSBldnQuY3VycmVudFRhcmdldCB8fCBldnQuc3JjRWxlbWVudCxcblx0XHRcdFx0Ym91bmRpbmdSZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0XHRpZiAoZS50b3VjaGVzKXtcblx0XHRcdFx0bW91c2VYID0gZS50b3VjaGVzWzBdLmNsaWVudFggLSBib3VuZGluZ1JlY3QubGVmdDtcblx0XHRcdFx0bW91c2VZID0gZS50b3VjaGVzWzBdLmNsaWVudFkgLSBib3VuZGluZ1JlY3QudG9wO1xuXG5cdFx0XHR9XG5cdFx0XHRlbHNle1xuXHRcdFx0XHRtb3VzZVggPSBlLmNsaWVudFggLSBib3VuZGluZ1JlY3QubGVmdDtcblx0XHRcdFx0bW91c2VZID0gZS5jbGllbnRZIC0gYm91bmRpbmdSZWN0LnRvcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0eCA6IG1vdXNlWCxcblx0XHRcdFx0eSA6IG1vdXNlWVxuXHRcdFx0fTtcblxuXHRcdH0sXG5cdFx0YWRkRXZlbnQgPSBoZWxwZXJzLmFkZEV2ZW50ID0gZnVuY3Rpb24obm9kZSxldmVudFR5cGUsbWV0aG9kKXtcblx0XHRcdGlmIChub2RlLmFkZEV2ZW50TGlzdGVuZXIpe1xuXHRcdFx0XHRub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLG1ldGhvZCk7XG5cdFx0XHR9IGVsc2UgaWYgKG5vZGUuYXR0YWNoRXZlbnQpe1xuXHRcdFx0XHRub2RlLmF0dGFjaEV2ZW50KFwib25cIitldmVudFR5cGUsIG1ldGhvZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRub2RlW1wib25cIitldmVudFR5cGVdID0gbWV0aG9kO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVtb3ZlRXZlbnQgPSBoZWxwZXJzLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24obm9kZSwgZXZlbnRUeXBlLCBoYW5kbGVyKXtcblx0XHRcdGlmIChub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIpe1xuXHRcdFx0XHRub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBmYWxzZSk7XG5cdFx0XHR9IGVsc2UgaWYgKG5vZGUuZGV0YWNoRXZlbnQpe1xuXHRcdFx0XHRub2RlLmRldGFjaEV2ZW50KFwib25cIitldmVudFR5cGUsaGFuZGxlcik7XG5cdFx0XHR9IGVsc2V7XG5cdFx0XHRcdG5vZGVbXCJvblwiICsgZXZlbnRUeXBlXSA9IG5vb3A7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRiaW5kRXZlbnRzID0gaGVscGVycy5iaW5kRXZlbnRzID0gZnVuY3Rpb24oY2hhcnRJbnN0YW5jZSwgYXJyYXlPZkV2ZW50cywgaGFuZGxlcil7XG5cdFx0XHQvLyBDcmVhdGUgdGhlIGV2ZW50cyBvYmplY3QgaWYgaXQncyBub3QgYWxyZWFkeSBwcmVzZW50XG5cdFx0XHRpZiAoIWNoYXJ0SW5zdGFuY2UuZXZlbnRzKSBjaGFydEluc3RhbmNlLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRlYWNoKGFycmF5T2ZFdmVudHMsZnVuY3Rpb24oZXZlbnROYW1lKXtcblx0XHRcdFx0Y2hhcnRJbnN0YW5jZS5ldmVudHNbZXZlbnROYW1lXSA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0aGFuZGxlci5hcHBseShjaGFydEluc3RhbmNlLCBhcmd1bWVudHMpO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHRhZGRFdmVudChjaGFydEluc3RhbmNlLmNoYXJ0LmNhbnZhcyxldmVudE5hbWUsY2hhcnRJbnN0YW5jZS5ldmVudHNbZXZlbnROYW1lXSk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHVuYmluZEV2ZW50cyA9IGhlbHBlcnMudW5iaW5kRXZlbnRzID0gZnVuY3Rpb24gKGNoYXJ0SW5zdGFuY2UsIGFycmF5T2ZFdmVudHMpIHtcblx0XHRcdGVhY2goYXJyYXlPZkV2ZW50cywgZnVuY3Rpb24oaGFuZGxlcixldmVudE5hbWUpe1xuXHRcdFx0XHRyZW1vdmVFdmVudChjaGFydEluc3RhbmNlLmNoYXJ0LmNhbnZhcywgZXZlbnROYW1lLCBoYW5kbGVyKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0Z2V0TWF4aW11bVdpZHRoID0gaGVscGVycy5nZXRNYXhpbXVtV2lkdGggPSBmdW5jdGlvbihkb21Ob2RlKXtcblx0XHRcdHZhciBjb250YWluZXIgPSBkb21Ob2RlLnBhcmVudE5vZGU7XG5cdFx0XHQvLyBUT0RPID0gY2hlY2sgY3Jvc3MgYnJvd3NlciBzdHVmZiB3aXRoIHRoaXMuXG5cdFx0XHRyZXR1cm4gY29udGFpbmVyLmNsaWVudFdpZHRoO1xuXHRcdH0sXG5cdFx0Z2V0TWF4aW11bUhlaWdodCA9IGhlbHBlcnMuZ2V0TWF4aW11bUhlaWdodCA9IGZ1bmN0aW9uKGRvbU5vZGUpe1xuXHRcdFx0dmFyIGNvbnRhaW5lciA9IGRvbU5vZGUucGFyZW50Tm9kZTtcblx0XHRcdC8vIFRPRE8gPSBjaGVjayBjcm9zcyBicm93c2VyIHN0dWZmIHdpdGggdGhpcy5cblx0XHRcdHJldHVybiBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xuXHRcdH0sXG5cdFx0Z2V0TWF4aW11bVNpemUgPSBoZWxwZXJzLmdldE1heGltdW1TaXplID0gaGVscGVycy5nZXRNYXhpbXVtV2lkdGgsIC8vIGxlZ2FjeSBzdXBwb3J0XG5cdFx0cmV0aW5hU2NhbGUgPSBoZWxwZXJzLnJldGluYVNjYWxlID0gZnVuY3Rpb24oY2hhcnQpe1xuXHRcdFx0dmFyIGN0eCA9IGNoYXJ0LmN0eCxcblx0XHRcdFx0d2lkdGggPSBjaGFydC5jYW52YXMud2lkdGgsXG5cdFx0XHRcdGhlaWdodCA9IGNoYXJ0LmNhbnZhcy5oZWlnaHQ7XG5cblx0XHRcdGlmICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbykge1xuXHRcdFx0XHRjdHguY2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGggKyBcInB4XCI7XG5cdFx0XHRcdGN0eC5jYW52YXMuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgXCJweFwiO1xuXHRcdFx0XHRjdHguY2FudmFzLmhlaWdodCA9IGhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuXHRcdFx0XHRjdHguY2FudmFzLndpZHRoID0gd2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcblx0XHRcdFx0Y3R4LnNjYWxlKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHQvLy0tIENhbnZhcyBtZXRob2RzXG5cdFx0Y2xlYXIgPSBoZWxwZXJzLmNsZWFyID0gZnVuY3Rpb24oY2hhcnQpe1xuXHRcdFx0Y2hhcnQuY3R4LmNsZWFyUmVjdCgwLDAsY2hhcnQud2lkdGgsY2hhcnQuaGVpZ2h0KTtcblx0XHR9LFxuXHRcdGZvbnRTdHJpbmcgPSBoZWxwZXJzLmZvbnRTdHJpbmcgPSBmdW5jdGlvbihwaXhlbFNpemUsZm9udFN0eWxlLGZvbnRGYW1pbHkpe1xuXHRcdFx0cmV0dXJuIGZvbnRTdHlsZSArIFwiIFwiICsgcGl4ZWxTaXplK1wicHggXCIgKyBmb250RmFtaWx5O1xuXHRcdH0sXG5cdFx0bG9uZ2VzdFRleHQgPSBoZWxwZXJzLmxvbmdlc3RUZXh0ID0gZnVuY3Rpb24oY3R4LGZvbnQsYXJyYXlPZlN0cmluZ3Mpe1xuXHRcdFx0Y3R4LmZvbnQgPSBmb250O1xuXHRcdFx0dmFyIGxvbmdlc3QgPSAwO1xuXHRcdFx0ZWFjaChhcnJheU9mU3RyaW5ncyxmdW5jdGlvbihzdHJpbmcpe1xuXHRcdFx0XHR2YXIgdGV4dFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHN0cmluZykud2lkdGg7XG5cdFx0XHRcdGxvbmdlc3QgPSAodGV4dFdpZHRoID4gbG9uZ2VzdCkgPyB0ZXh0V2lkdGggOiBsb25nZXN0O1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gbG9uZ2VzdDtcblx0XHR9LFxuXHRcdGRyYXdSb3VuZGVkUmVjdGFuZ2xlID0gaGVscGVycy5kcmF3Um91bmRlZFJlY3RhbmdsZSA9IGZ1bmN0aW9uKGN0eCx4LHksd2lkdGgsaGVpZ2h0LHJhZGl1cyl7XG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRjdHgubW92ZVRvKHggKyByYWRpdXMsIHkpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgd2lkdGggLSByYWRpdXMsIHkpO1xuXHRcdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5LCB4ICsgd2lkdGgsIHkgKyByYWRpdXMpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xuXHRcdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0LCB4ICsgd2lkdGggLSByYWRpdXMsIHkgKyBoZWlnaHQpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgcmFkaXVzLCB5ICsgaGVpZ2h0KTtcblx0XHRcdGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4LCB5ICsgcmFkaXVzKTtcblx0XHRcdGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHksIHggKyByYWRpdXMsIHkpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdH07XG5cblxuXHQvL1N0b3JlIGEgcmVmZXJlbmNlIHRvIGVhY2ggaW5zdGFuY2UgLSBhbGxvd2luZyB1cyB0byBnbG9iYWxseSByZXNpemUgY2hhcnQgaW5zdGFuY2VzIG9uIHdpbmRvdyByZXNpemUuXG5cdC8vRGVzdHJveSBtZXRob2Qgb24gdGhlIGNoYXJ0IHdpbGwgcmVtb3ZlIHRoZSBpbnN0YW5jZSBvZiB0aGUgY2hhcnQgZnJvbSB0aGlzIHJlZmVyZW5jZS5cblx0Q2hhcnQuaW5zdGFuY2VzID0ge307XG5cblx0Q2hhcnQuVHlwZSA9IGZ1bmN0aW9uKGRhdGEsb3B0aW9ucyxjaGFydCl7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLmNoYXJ0ID0gY2hhcnQ7XG5cdFx0dGhpcy5pZCA9IHVpZCgpO1xuXHRcdC8vQWRkIHRoZSBjaGFydCBpbnN0YW5jZSB0byB0aGUgZ2xvYmFsIG5hbWVzcGFjZVxuXHRcdENoYXJ0Lmluc3RhbmNlc1t0aGlzLmlkXSA9IHRoaXM7XG5cblx0XHQvLyBJbml0aWFsaXplIGlzIGFsd2F5cyBjYWxsZWQgd2hlbiBhIGNoYXJ0IHR5cGUgaXMgY3JlYXRlZFxuXHRcdC8vIEJ5IGRlZmF1bHQgaXQgaXMgYSBubyBvcCwgYnV0IGl0IHNob3VsZCBiZSBleHRlbmRlZFxuXHRcdGlmIChvcHRpb25zLnJlc3BvbnNpdmUpe1xuXHRcdFx0dGhpcy5yZXNpemUoKTtcblx0XHR9XG5cdFx0dGhpcy5pbml0aWFsaXplLmNhbGwodGhpcyxkYXRhKTtcblx0fTtcblxuXHQvL0NvcmUgbWV0aG9kcyB0aGF0J2xsIGJlIGEgcGFydCBvZiBldmVyeSBjaGFydCB0eXBlXG5cdGV4dGVuZChDaGFydC5UeXBlLnByb3RvdHlwZSx7XG5cdFx0aW5pdGlhbGl6ZSA6IGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM7fSxcblx0XHRjbGVhciA6IGZ1bmN0aW9uKCl7XG5cdFx0XHRjbGVhcih0aGlzLmNoYXJ0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFx0c3RvcCA6IGZ1bmN0aW9uKCl7XG5cdFx0XHQvLyBTdG9wcyBhbnkgY3VycmVudCBhbmltYXRpb24gbG9vcCBvY2N1cmluZ1xuXHRcdFx0Y2FuY2VsQW5pbUZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWUpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblx0XHRyZXNpemUgOiBmdW5jdGlvbihjYWxsYmFjayl7XG5cdFx0XHR0aGlzLnN0b3AoKTtcblx0XHRcdHZhciBjYW52YXMgPSB0aGlzLmNoYXJ0LmNhbnZhcyxcblx0XHRcdFx0bmV3V2lkdGggPSBnZXRNYXhpbXVtV2lkdGgodGhpcy5jaGFydC5jYW52YXMpLFxuXHRcdFx0XHRuZXdIZWlnaHQgPSB0aGlzLm9wdGlvbnMubWFpbnRhaW5Bc3BlY3RSYXRpbyA/IG5ld1dpZHRoIC8gdGhpcy5jaGFydC5hc3BlY3RSYXRpbyA6IGdldE1heGltdW1IZWlnaHQodGhpcy5jaGFydC5jYW52YXMpO1xuXG5cdFx0XHRjYW52YXMud2lkdGggPSB0aGlzLmNoYXJ0LndpZHRoID0gbmV3V2lkdGg7XG5cdFx0XHRjYW52YXMuaGVpZ2h0ID0gdGhpcy5jaGFydC5oZWlnaHQgPSBuZXdIZWlnaHQ7XG5cblx0XHRcdHJldGluYVNjYWxlKHRoaXMuY2hhcnQpO1xuXG5cdFx0XHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFx0cmVmbG93IDogbm9vcCxcblx0XHRyZW5kZXIgOiBmdW5jdGlvbihyZWZsb3cpe1xuXHRcdFx0aWYgKHJlZmxvdyl7XG5cdFx0XHRcdHRoaXMucmVmbG93KCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbiAmJiAhcmVmbG93KXtcblx0XHRcdFx0aGVscGVycy5hbmltYXRpb25Mb29wKFxuXHRcdFx0XHRcdHRoaXMuZHJhdyxcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMuYW5pbWF0aW9uU3RlcHMsXG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZyxcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMub25BbmltYXRpb25Qcm9ncmVzcyxcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMub25BbmltYXRpb25Db21wbGV0ZSxcblx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNle1xuXHRcdFx0XHR0aGlzLmRyYXcoKTtcblx0XHRcdFx0dGhpcy5vcHRpb25zLm9uQW5pbWF0aW9uQ29tcGxldGUuY2FsbCh0aGlzKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFx0Z2VuZXJhdGVMZWdlbmQgOiBmdW5jdGlvbigpe1xuXHRcdFx0cmV0dXJuIHRlbXBsYXRlKHRoaXMub3B0aW9ucy5sZWdlbmRUZW1wbGF0ZSx0aGlzKTtcblx0XHR9LFxuXHRcdGRlc3Ryb3kgOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy5jbGVhcigpO1xuXHRcdFx0dW5iaW5kRXZlbnRzKHRoaXMsIHRoaXMuZXZlbnRzKTtcblx0XHRcdHZhciBjYW52YXMgPSB0aGlzLmNoYXJ0LmNhbnZhcztcblxuXHRcdFx0Ly8gUmVzZXQgY2FudmFzIGhlaWdodC93aWR0aCBhdHRyaWJ1dGVzIHN0YXJ0cyBhIGZyZXNoIHdpdGggdGhlIGNhbnZhcyBjb250ZXh0XG5cdFx0XHRjYW52YXMud2lkdGggPSB0aGlzLmNoYXJ0LndpZHRoO1xuXHRcdFx0Y2FudmFzLmhlaWdodCA9IHRoaXMuY2hhcnQuaGVpZ2h0O1xuXG5cdFx0XHQvLyA8IElFOSBkb2Vzbid0IHN1cHBvcnQgcmVtb3ZlUHJvcGVydHlcblx0XHRcdGlmIChjYW52YXMuc3R5bGUucmVtb3ZlUHJvcGVydHkpIHtcblx0XHRcdFx0Y2FudmFzLnN0eWxlLnJlbW92ZVByb3BlcnR5KCd3aWR0aCcpO1xuXHRcdFx0XHRjYW52YXMuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2hlaWdodCcpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2FudmFzLnN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnd2lkdGgnKTtcblx0XHRcdFx0Y2FudmFzLnN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnaGVpZ2h0Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGRlbGV0ZSBDaGFydC5pbnN0YW5jZXNbdGhpcy5pZF07XG5cdFx0fSxcblx0XHRzaG93VG9vbHRpcCA6IGZ1bmN0aW9uKENoYXJ0RWxlbWVudHMsIGZvcmNlUmVkcmF3KXtcblx0XHRcdC8vIE9ubHkgcmVkcmF3IHRoZSBjaGFydCBpZiB3ZSd2ZSBhY3R1YWxseSBjaGFuZ2VkIHdoYXQgd2UncmUgaG92ZXJpbmcgb24uXG5cdFx0XHRpZiAodHlwZW9mIHRoaXMuYWN0aXZlRWxlbWVudHMgPT09ICd1bmRlZmluZWQnKSB0aGlzLmFjdGl2ZUVsZW1lbnRzID0gW107XG5cblx0XHRcdHZhciBpc0NoYW5nZWQgPSAoZnVuY3Rpb24oRWxlbWVudHMpe1xuXHRcdFx0XHR2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdGlmIChFbGVtZW50cy5sZW5ndGggIT09IHRoaXMuYWN0aXZlRWxlbWVudHMubGVuZ3RoKXtcblx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRyZXR1cm4gY2hhbmdlZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVhY2goRWxlbWVudHMsIGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KXtcblx0XHRcdFx0XHRpZiAoZWxlbWVudCAhPT0gdGhpcy5hY3RpdmVFbGVtZW50c1tpbmRleF0pe1xuXHRcdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCB0aGlzKTtcblx0XHRcdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdFx0XHR9KS5jYWxsKHRoaXMsIENoYXJ0RWxlbWVudHMpO1xuXG5cdFx0XHRpZiAoIWlzQ2hhbmdlZCAmJiAhZm9yY2VSZWRyYXcpe1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRlbHNle1xuXHRcdFx0XHR0aGlzLmFjdGl2ZUVsZW1lbnRzID0gQ2hhcnRFbGVtZW50cztcblx0XHRcdH1cblx0XHRcdHRoaXMuZHJhdygpO1xuXHRcdFx0aWYodGhpcy5vcHRpb25zLmN1c3RvbVRvb2x0aXBzKXtcblx0XHRcdFx0dGhpcy5vcHRpb25zLmN1c3RvbVRvb2x0aXBzKGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdGlmIChDaGFydEVsZW1lbnRzLmxlbmd0aCA+IDApe1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG11bHRpcGxlIGRhdGFzZXRzLCBzaG93IGEgTXVsdGlUb29sdGlwIGZvciBhbGwgb2YgdGhlIGRhdGEgcG9pbnRzIGF0IHRoYXQgaW5kZXhcblx0XHRcdFx0aWYgKHRoaXMuZGF0YXNldHMgJiYgdGhpcy5kYXRhc2V0cy5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdFx0dmFyIGRhdGFBcnJheSxcblx0XHRcdFx0XHRcdGRhdGFJbmRleDtcblxuXHRcdFx0XHRcdGZvciAodmFyIGkgPSB0aGlzLmRhdGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdFx0XHRkYXRhQXJyYXkgPSB0aGlzLmRhdGFzZXRzW2ldLnBvaW50cyB8fCB0aGlzLmRhdGFzZXRzW2ldLmJhcnMgfHwgdGhpcy5kYXRhc2V0c1tpXS5zZWdtZW50cztcblx0XHRcdFx0XHRcdGRhdGFJbmRleCA9IGluZGV4T2YoZGF0YUFycmF5LCBDaGFydEVsZW1lbnRzWzBdKTtcblx0XHRcdFx0XHRcdGlmIChkYXRhSW5kZXggIT09IC0xKXtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciB0b29sdGlwTGFiZWxzID0gW10sXG5cdFx0XHRcdFx0XHR0b29sdGlwQ29sb3JzID0gW10sXG5cdFx0XHRcdFx0XHRtZWRpYW5Qb3NpdGlvbiA9IChmdW5jdGlvbihpbmRleCkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEdldCBhbGwgdGhlIHBvaW50cyBhdCB0aGF0IHBhcnRpY3VsYXIgaW5kZXhcblx0XHRcdFx0XHRcdFx0dmFyIEVsZW1lbnRzID0gW10sXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUNvbGxlY3Rpb24sXG5cdFx0XHRcdFx0XHRcdFx0eFBvc2l0aW9ucyA9IFtdLFxuXHRcdFx0XHRcdFx0XHRcdHlQb3NpdGlvbnMgPSBbXSxcblx0XHRcdFx0XHRcdFx0XHR4TWF4LFxuXHRcdFx0XHRcdFx0XHRcdHlNYXgsXG5cdFx0XHRcdFx0XHRcdFx0eE1pbixcblx0XHRcdFx0XHRcdFx0XHR5TWluO1xuXHRcdFx0XHRcdFx0XHRoZWxwZXJzLmVhY2godGhpcy5kYXRhc2V0cywgZnVuY3Rpb24oZGF0YXNldCl7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUNvbGxlY3Rpb24gPSBkYXRhc2V0LnBvaW50cyB8fCBkYXRhc2V0LmJhcnMgfHwgZGF0YXNldC5zZWdtZW50cztcblx0XHRcdFx0XHRcdFx0XHRpZiAoZGF0YUNvbGxlY3Rpb25bZGF0YUluZGV4XSAmJiBkYXRhQ29sbGVjdGlvbltkYXRhSW5kZXhdLmhhc1ZhbHVlKCkpe1xuXHRcdFx0XHRcdFx0XHRcdFx0RWxlbWVudHMucHVzaChkYXRhQ29sbGVjdGlvbltkYXRhSW5kZXhdKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0XHRcdGhlbHBlcnMuZWFjaChFbGVtZW50cywgZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0XHRcdFx0XHRcdHhQb3NpdGlvbnMucHVzaChlbGVtZW50LngpO1xuXHRcdFx0XHRcdFx0XHRcdHlQb3NpdGlvbnMucHVzaChlbGVtZW50LnkpO1xuXG5cblx0XHRcdFx0XHRcdFx0XHQvL0luY2x1ZGUgYW55IGNvbG91ciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdHRvb2x0aXBMYWJlbHMucHVzaChoZWxwZXJzLnRlbXBsYXRlKHRoaXMub3B0aW9ucy5tdWx0aVRvb2x0aXBUZW1wbGF0ZSwgZWxlbWVudCkpO1xuXHRcdFx0XHRcdFx0XHRcdHRvb2x0aXBDb2xvcnMucHVzaCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaWxsOiBlbGVtZW50Ll9zYXZlZC5maWxsQ29sb3IgfHwgZWxlbWVudC5maWxsQ29sb3IsXG5cdFx0XHRcdFx0XHRcdFx0XHRzdHJva2U6IGVsZW1lbnQuX3NhdmVkLnN0cm9rZUNvbG9yIHx8IGVsZW1lbnQuc3Ryb2tlQ29sb3Jcblx0XHRcdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0XHR9LCB0aGlzKTtcblxuXHRcdFx0XHRcdFx0XHR5TWluID0gbWluKHlQb3NpdGlvbnMpO1xuXHRcdFx0XHRcdFx0XHR5TWF4ID0gbWF4KHlQb3NpdGlvbnMpO1xuXG5cdFx0XHRcdFx0XHRcdHhNaW4gPSBtaW4oeFBvc2l0aW9ucyk7XG5cdFx0XHRcdFx0XHRcdHhNYXggPSBtYXgoeFBvc2l0aW9ucyk7XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHR4OiAoeE1pbiA+IHRoaXMuY2hhcnQud2lkdGgvMikgPyB4TWluIDogeE1heCxcblx0XHRcdFx0XHRcdFx0XHR5OiAoeU1pbiArIHlNYXgpLzJcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH0pLmNhbGwodGhpcywgZGF0YUluZGV4KTtcblxuXHRcdFx0XHRcdG5ldyBDaGFydC5NdWx0aVRvb2x0aXAoe1xuXHRcdFx0XHRcdFx0eDogbWVkaWFuUG9zaXRpb24ueCxcblx0XHRcdFx0XHRcdHk6IG1lZGlhblBvc2l0aW9uLnksXG5cdFx0XHRcdFx0XHR4UGFkZGluZzogdGhpcy5vcHRpb25zLnRvb2x0aXBYUGFkZGluZyxcblx0XHRcdFx0XHRcdHlQYWRkaW5nOiB0aGlzLm9wdGlvbnMudG9vbHRpcFlQYWRkaW5nLFxuXHRcdFx0XHRcdFx0eE9mZnNldDogdGhpcy5vcHRpb25zLnRvb2x0aXBYT2Zmc2V0LFxuXHRcdFx0XHRcdFx0ZmlsbENvbG9yOiB0aGlzLm9wdGlvbnMudG9vbHRpcEZpbGxDb2xvcixcblx0XHRcdFx0XHRcdHRleHRDb2xvcjogdGhpcy5vcHRpb25zLnRvb2x0aXBGb250Q29sb3IsXG5cdFx0XHRcdFx0XHRmb250RmFtaWx5OiB0aGlzLm9wdGlvbnMudG9vbHRpcEZvbnRGYW1pbHksXG5cdFx0XHRcdFx0XHRmb250U3R5bGU6IHRoaXMub3B0aW9ucy50b29sdGlwRm9udFN0eWxlLFxuXHRcdFx0XHRcdFx0Zm9udFNpemU6IHRoaXMub3B0aW9ucy50b29sdGlwRm9udFNpemUsXG5cdFx0XHRcdFx0XHR0aXRsZVRleHRDb2xvcjogdGhpcy5vcHRpb25zLnRvb2x0aXBUaXRsZUZvbnRDb2xvcixcblx0XHRcdFx0XHRcdHRpdGxlRm9udEZhbWlseTogdGhpcy5vcHRpb25zLnRvb2x0aXBUaXRsZUZvbnRGYW1pbHksXG5cdFx0XHRcdFx0XHR0aXRsZUZvbnRTdHlsZTogdGhpcy5vcHRpb25zLnRvb2x0aXBUaXRsZUZvbnRTdHlsZSxcblx0XHRcdFx0XHRcdHRpdGxlRm9udFNpemU6IHRoaXMub3B0aW9ucy50b29sdGlwVGl0bGVGb250U2l6ZSxcblx0XHRcdFx0XHRcdGNvcm5lclJhZGl1czogdGhpcy5vcHRpb25zLnRvb2x0aXBDb3JuZXJSYWRpdXMsXG5cdFx0XHRcdFx0XHRsYWJlbHM6IHRvb2x0aXBMYWJlbHMsXG5cdFx0XHRcdFx0XHRsZWdlbmRDb2xvcnM6IHRvb2x0aXBDb2xvcnMsXG5cdFx0XHRcdFx0XHRsZWdlbmRDb2xvckJhY2tncm91bmQgOiB0aGlzLm9wdGlvbnMubXVsdGlUb29sdGlwS2V5QmFja2dyb3VuZCxcblx0XHRcdFx0XHRcdHRpdGxlOiBDaGFydEVsZW1lbnRzWzBdLmxhYmVsLFxuXHRcdFx0XHRcdFx0Y2hhcnQ6IHRoaXMuY2hhcnQsXG5cdFx0XHRcdFx0XHRjdHg6IHRoaXMuY2hhcnQuY3R4LFxuXHRcdFx0XHRcdFx0Y3VzdG9tOiB0aGlzLm9wdGlvbnMuY3VzdG9tVG9vbHRpcHNcblx0XHRcdFx0XHR9KS5kcmF3KCk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlYWNoKENoYXJ0RWxlbWVudHMsIGZ1bmN0aW9uKEVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdHZhciB0b29sdGlwUG9zaXRpb24gPSBFbGVtZW50LnRvb2x0aXBQb3NpdGlvbigpO1xuXHRcdFx0XHRcdFx0bmV3IENoYXJ0LlRvb2x0aXAoe1xuXHRcdFx0XHRcdFx0XHR4OiBNYXRoLnJvdW5kKHRvb2x0aXBQb3NpdGlvbi54KSxcblx0XHRcdFx0XHRcdFx0eTogTWF0aC5yb3VuZCh0b29sdGlwUG9zaXRpb24ueSksXG5cdFx0XHRcdFx0XHRcdHhQYWRkaW5nOiB0aGlzLm9wdGlvbnMudG9vbHRpcFhQYWRkaW5nLFxuXHRcdFx0XHRcdFx0XHR5UGFkZGluZzogdGhpcy5vcHRpb25zLnRvb2x0aXBZUGFkZGluZyxcblx0XHRcdFx0XHRcdFx0ZmlsbENvbG9yOiB0aGlzLm9wdGlvbnMudG9vbHRpcEZpbGxDb2xvcixcblx0XHRcdFx0XHRcdFx0dGV4dENvbG9yOiB0aGlzLm9wdGlvbnMudG9vbHRpcEZvbnRDb2xvcixcblx0XHRcdFx0XHRcdFx0Zm9udEZhbWlseTogdGhpcy5vcHRpb25zLnRvb2x0aXBGb250RmFtaWx5LFxuXHRcdFx0XHRcdFx0XHRmb250U3R5bGU6IHRoaXMub3B0aW9ucy50b29sdGlwRm9udFN0eWxlLFxuXHRcdFx0XHRcdFx0XHRmb250U2l6ZTogdGhpcy5vcHRpb25zLnRvb2x0aXBGb250U2l6ZSxcblx0XHRcdFx0XHRcdFx0Y2FyZXRIZWlnaHQ6IHRoaXMub3B0aW9ucy50b29sdGlwQ2FyZXRTaXplLFxuXHRcdFx0XHRcdFx0XHRjb3JuZXJSYWRpdXM6IHRoaXMub3B0aW9ucy50b29sdGlwQ29ybmVyUmFkaXVzLFxuXHRcdFx0XHRcdFx0XHR0ZXh0OiB0ZW1wbGF0ZSh0aGlzLm9wdGlvbnMudG9vbHRpcFRlbXBsYXRlLCBFbGVtZW50KSxcblx0XHRcdFx0XHRcdFx0Y2hhcnQ6IHRoaXMuY2hhcnQsXG5cdFx0XHRcdFx0XHRcdGN1c3RvbTogdGhpcy5vcHRpb25zLmN1c3RvbVRvb2x0aXBzXG5cdFx0XHRcdFx0XHR9KS5kcmF3KCk7XG5cdFx0XHRcdFx0fSwgdGhpcyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFx0dG9CYXNlNjRJbWFnZSA6IGZ1bmN0aW9uKCl7XG5cdFx0XHRyZXR1cm4gdGhpcy5jaGFydC5jYW52YXMudG9EYXRhVVJMLmFwcGx5KHRoaXMuY2hhcnQuY2FudmFzLCBhcmd1bWVudHMpO1xuXHRcdH1cblx0fSk7XG5cblx0Q2hhcnQuVHlwZS5leHRlbmQgPSBmdW5jdGlvbihleHRlbnNpb25zKXtcblxuXHRcdHZhciBwYXJlbnQgPSB0aGlzO1xuXG5cdFx0dmFyIENoYXJ0VHlwZSA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRyZXR1cm4gcGFyZW50LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtcblx0XHR9O1xuXG5cdFx0Ly9Db3B5IHRoZSBwcm90b3R5cGUgb2JqZWN0IG9mIHRoZSB0aGlzIGNsYXNzXG5cdFx0Q2hhcnRUeXBlLnByb3RvdHlwZSA9IGNsb25lKHBhcmVudC5wcm90b3R5cGUpO1xuXHRcdC8vTm93IG92ZXJ3cml0ZSBzb21lIG9mIHRoZSBwcm9wZXJ0aWVzIGluIHRoZSBiYXNlIGNsYXNzIHdpdGggdGhlIG5ldyBleHRlbnNpb25zXG5cdFx0ZXh0ZW5kKENoYXJ0VHlwZS5wcm90b3R5cGUsIGV4dGVuc2lvbnMpO1xuXG5cdFx0Q2hhcnRUeXBlLmV4dGVuZCA9IENoYXJ0LlR5cGUuZXh0ZW5kO1xuXG5cdFx0aWYgKGV4dGVuc2lvbnMubmFtZSB8fCBwYXJlbnQucHJvdG90eXBlLm5hbWUpe1xuXG5cdFx0XHR2YXIgY2hhcnROYW1lID0gZXh0ZW5zaW9ucy5uYW1lIHx8IHBhcmVudC5wcm90b3R5cGUubmFtZTtcblx0XHRcdC8vQXNzaWduIGFueSBwb3RlbnRpYWwgZGVmYXVsdCB2YWx1ZXMgb2YgdGhlIG5ldyBjaGFydCB0eXBlXG5cblx0XHRcdC8vSWYgbm9uZSBhcmUgZGVmaW5lZCwgd2UnbGwgdXNlIGEgY2xvbmUgb2YgdGhlIGNoYXJ0IHR5cGUgdGhpcyBpcyBiZWluZyBleHRlbmRlZCBmcm9tLlxuXHRcdFx0Ly9JLmUuIGlmIHdlIGV4dGVuZCBhIGxpbmUgY2hhcnQsIHdlJ2xsIHVzZSB0aGUgZGVmYXVsdHMgZnJvbSB0aGUgbGluZSBjaGFydCBpZiBvdXIgbmV3IGNoYXJ0XG5cdFx0XHQvL2RvZXNuJ3QgZGVmaW5lIHNvbWUgZGVmYXVsdHMgb2YgdGhlaXIgb3duLlxuXG5cdFx0XHR2YXIgYmFzZURlZmF1bHRzID0gKENoYXJ0LmRlZmF1bHRzW3BhcmVudC5wcm90b3R5cGUubmFtZV0pID8gY2xvbmUoQ2hhcnQuZGVmYXVsdHNbcGFyZW50LnByb3RvdHlwZS5uYW1lXSkgOiB7fTtcblxuXHRcdFx0Q2hhcnQuZGVmYXVsdHNbY2hhcnROYW1lXSA9IGV4dGVuZChiYXNlRGVmYXVsdHMsZXh0ZW5zaW9ucy5kZWZhdWx0cyk7XG5cblx0XHRcdENoYXJ0LnR5cGVzW2NoYXJ0TmFtZV0gPSBDaGFydFR5cGU7XG5cblx0XHRcdC8vUmVnaXN0ZXIgdGhpcyBuZXcgY2hhcnQgdHlwZSBpbiB0aGUgQ2hhcnQgcHJvdG90eXBlXG5cdFx0XHRDaGFydC5wcm90b3R5cGVbY2hhcnROYW1lXSA9IGZ1bmN0aW9uKGRhdGEsb3B0aW9ucyl7XG5cdFx0XHRcdHZhciBjb25maWcgPSBtZXJnZShDaGFydC5kZWZhdWx0cy5nbG9iYWwsIENoYXJ0LmRlZmF1bHRzW2NoYXJ0TmFtZV0sIG9wdGlvbnMgfHwge30pO1xuXHRcdFx0XHRyZXR1cm4gbmV3IENoYXJ0VHlwZShkYXRhLGNvbmZpZyx0aGlzKTtcblx0XHRcdH07XG5cdFx0fSBlbHNle1xuXHRcdFx0d2FybihcIk5hbWUgbm90IHByb3ZpZGVkIGZvciB0aGlzIGNoYXJ0LCBzbyBpdCBoYXNuJ3QgYmVlbiByZWdpc3RlcmVkXCIpO1xuXHRcdH1cblx0XHRyZXR1cm4gcGFyZW50O1xuXHR9O1xuXG5cdENoYXJ0LkVsZW1lbnQgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uKXtcblx0XHRleHRlbmQodGhpcyxjb25maWd1cmF0aW9uKTtcblx0XHR0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcyxhcmd1bWVudHMpO1xuXHRcdHRoaXMuc2F2ZSgpO1xuXHR9O1xuXHRleHRlbmQoQ2hhcnQuRWxlbWVudC5wcm90b3R5cGUse1xuXHRcdGluaXRpYWxpemUgOiBmdW5jdGlvbigpe30sXG5cdFx0cmVzdG9yZSA6IGZ1bmN0aW9uKHByb3BzKXtcblx0XHRcdGlmICghcHJvcHMpe1xuXHRcdFx0XHRleHRlbmQodGhpcyx0aGlzLl9zYXZlZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlYWNoKHByb3BzLGZ1bmN0aW9uKGtleSl7XG5cdFx0XHRcdFx0dGhpc1trZXldID0gdGhpcy5fc2F2ZWRba2V5XTtcblx0XHRcdFx0fSx0aGlzKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFx0c2F2ZSA6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLl9zYXZlZCA9IGNsb25lKHRoaXMpO1xuXHRcdFx0ZGVsZXRlIHRoaXMuX3NhdmVkLl9zYXZlZDtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFx0dXBkYXRlIDogZnVuY3Rpb24obmV3UHJvcHMpe1xuXHRcdFx0ZWFjaChuZXdQcm9wcyxmdW5jdGlvbih2YWx1ZSxrZXkpe1xuXHRcdFx0XHR0aGlzLl9zYXZlZFtrZXldID0gdGhpc1trZXldO1xuXHRcdFx0XHR0aGlzW2tleV0gPSB2YWx1ZTtcblx0XHRcdH0sdGhpcyk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXHRcdHRyYW5zaXRpb24gOiBmdW5jdGlvbihwcm9wcyxlYXNlKXtcblx0XHRcdGVhY2gocHJvcHMsZnVuY3Rpb24odmFsdWUsa2V5KXtcblx0XHRcdFx0dGhpc1trZXldID0gKCh2YWx1ZSAtIHRoaXMuX3NhdmVkW2tleV0pICogZWFzZSkgKyB0aGlzLl9zYXZlZFtrZXldO1xuXHRcdFx0fSx0aGlzKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFx0dG9vbHRpcFBvc2l0aW9uIDogZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHggOiB0aGlzLngsXG5cdFx0XHRcdHkgOiB0aGlzLnlcblx0XHRcdH07XG5cdFx0fSxcblx0XHRoYXNWYWx1ZTogZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiBpc051bWJlcih0aGlzLnZhbHVlKTtcblx0XHR9XG5cdH0pO1xuXG5cdENoYXJ0LkVsZW1lbnQuZXh0ZW5kID0gaW5oZXJpdHM7XG5cblxuXHRDaGFydC5Qb2ludCA9IENoYXJ0LkVsZW1lbnQuZXh0ZW5kKHtcblx0XHRkaXNwbGF5OiB0cnVlLFxuXHRcdGluUmFuZ2U6IGZ1bmN0aW9uKGNoYXJ0WCxjaGFydFkpe1xuXHRcdFx0dmFyIGhpdERldGVjdGlvblJhbmdlID0gdGhpcy5oaXREZXRlY3Rpb25SYWRpdXMgKyB0aGlzLnJhZGl1cztcblx0XHRcdHJldHVybiAoKE1hdGgucG93KGNoYXJ0WC10aGlzLngsIDIpK01hdGgucG93KGNoYXJ0WS10aGlzLnksIDIpKSA8IE1hdGgucG93KGhpdERldGVjdGlvblJhbmdlLDIpKTtcblx0XHR9LFxuXHRcdGRyYXcgOiBmdW5jdGlvbigpe1xuXHRcdFx0aWYgKHRoaXMuZGlzcGxheSl7XG5cdFx0XHRcdHZhciBjdHggPSB0aGlzLmN0eDtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXG5cdFx0XHRcdGN0eC5hcmModGhpcy54LCB0aGlzLnksIHRoaXMucmFkaXVzLCAwLCBNYXRoLlBJKjIpO1xuXHRcdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cblx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5zdHJva2VDb2xvcjtcblx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMuc3Ryb2tlV2lkdGg7XG5cblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMuZmlsbENvbG9yO1xuXG5cdFx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdH1cblxuXG5cdFx0XHQvL1F1aWNrIGRlYnVnIGZvciBiZXppZXIgY3VydmUgc3BsaW5pbmdcblx0XHRcdC8vSGlnaGxpZ2h0cyBjb250cm9sIHBvaW50cyBhbmQgdGhlIGxpbmUgYmV0d2VlbiB0aGVtLlxuXHRcdFx0Ly9IYW5keSBmb3IgZGV2IC0gc3RyaXBwZWQgaW4gdGhlIG1pbiB2ZXJzaW9uLlxuXG5cdFx0XHQvLyBjdHguc2F2ZSgpO1xuXHRcdFx0Ly8gY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcblx0XHRcdC8vIGN0eC5zdHJva2VTdHlsZSA9IFwiYmxhY2tcIlxuXHRcdFx0Ly8gY3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0Ly8gY3R4LmFyYyh0aGlzLmNvbnRyb2xQb2ludHMuaW5uZXIueCx0aGlzLmNvbnRyb2xQb2ludHMuaW5uZXIueSwgMiwgMCwgTWF0aC5QSSoyKTtcblx0XHRcdC8vIGN0eC5maWxsKCk7XG5cblx0XHRcdC8vIGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdC8vIGN0eC5hcmModGhpcy5jb250cm9sUG9pbnRzLm91dGVyLngsdGhpcy5jb250cm9sUG9pbnRzLm91dGVyLnksIDIsIDAsIE1hdGguUEkqMik7XG5cdFx0XHQvLyBjdHguZmlsbCgpO1xuXG5cdFx0XHQvLyBjdHgubW92ZVRvKHRoaXMuY29udHJvbFBvaW50cy5pbm5lci54LHRoaXMuY29udHJvbFBvaW50cy5pbm5lci55KTtcblx0XHRcdC8vIGN0eC5saW5lVG8odGhpcy54LCB0aGlzLnkpO1xuXHRcdFx0Ly8gY3R4LmxpbmVUbyh0aGlzLmNvbnRyb2xQb2ludHMub3V0ZXIueCx0aGlzLmNvbnRyb2xQb2ludHMub3V0ZXIueSk7XG5cdFx0XHQvLyBjdHguc3Ryb2tlKCk7XG5cblx0XHRcdC8vIGN0eC5yZXN0b3JlKCk7XG5cblxuXG5cdFx0fVxuXHR9KTtcblxuXHRDaGFydC5BcmMgPSBDaGFydC5FbGVtZW50LmV4dGVuZCh7XG5cdFx0aW5SYW5nZSA6IGZ1bmN0aW9uKGNoYXJ0WCxjaGFydFkpe1xuXG5cdFx0XHR2YXIgcG9pbnRSZWxhdGl2ZVBvc2l0aW9uID0gaGVscGVycy5nZXRBbmdsZUZyb21Qb2ludCh0aGlzLCB7XG5cdFx0XHRcdHg6IGNoYXJ0WCxcblx0XHRcdFx0eTogY2hhcnRZXG5cdFx0XHR9KTtcblxuXHRcdFx0Ly9DaGVjayBpZiB3aXRoaW4gdGhlIHJhbmdlIG9mIHRoZSBvcGVuL2Nsb3NlIGFuZ2xlXG5cdFx0XHR2YXIgYmV0d2VlbkFuZ2xlcyA9IChwb2ludFJlbGF0aXZlUG9zaXRpb24uYW5nbGUgPj0gdGhpcy5zdGFydEFuZ2xlICYmIHBvaW50UmVsYXRpdmVQb3NpdGlvbi5hbmdsZSA8PSB0aGlzLmVuZEFuZ2xlKSxcblx0XHRcdFx0d2l0aGluUmFkaXVzID0gKHBvaW50UmVsYXRpdmVQb3NpdGlvbi5kaXN0YW5jZSA+PSB0aGlzLmlubmVyUmFkaXVzICYmIHBvaW50UmVsYXRpdmVQb3NpdGlvbi5kaXN0YW5jZSA8PSB0aGlzLm91dGVyUmFkaXVzKTtcblxuXHRcdFx0cmV0dXJuIChiZXR3ZWVuQW5nbGVzICYmIHdpdGhpblJhZGl1cyk7XG5cdFx0XHQvL0Vuc3VyZSB3aXRoaW4gdGhlIG91dHNpZGUgb2YgdGhlIGFyYyBjZW50cmUsIGJ1dCBpbnNpZGUgYXJjIG91dGVyXG5cdFx0fSxcblx0XHR0b29sdGlwUG9zaXRpb24gOiBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIGNlbnRyZUFuZ2xlID0gdGhpcy5zdGFydEFuZ2xlICsgKCh0aGlzLmVuZEFuZ2xlIC0gdGhpcy5zdGFydEFuZ2xlKSAvIDIpLFxuXHRcdFx0XHRyYW5nZUZyb21DZW50cmUgPSAodGhpcy5vdXRlclJhZGl1cyAtIHRoaXMuaW5uZXJSYWRpdXMpIC8gMiArIHRoaXMuaW5uZXJSYWRpdXM7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR4IDogdGhpcy54ICsgKE1hdGguY29zKGNlbnRyZUFuZ2xlKSAqIHJhbmdlRnJvbUNlbnRyZSksXG5cdFx0XHRcdHkgOiB0aGlzLnkgKyAoTWF0aC5zaW4oY2VudHJlQW5nbGUpICogcmFuZ2VGcm9tQ2VudHJlKVxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdGRyYXcgOiBmdW5jdGlvbihhbmltYXRpb25QZXJjZW50KXtcblxuXHRcdFx0dmFyIGVhc2luZ0RlY2ltYWwgPSBhbmltYXRpb25QZXJjZW50IHx8IDE7XG5cblx0XHRcdHZhciBjdHggPSB0aGlzLmN0eDtcblxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXG5cdFx0XHRjdHguYXJjKHRoaXMueCwgdGhpcy55LCB0aGlzLm91dGVyUmFkaXVzLCB0aGlzLnN0YXJ0QW5nbGUsIHRoaXMuZW5kQW5nbGUpO1xuXG5cdFx0XHRjdHguYXJjKHRoaXMueCwgdGhpcy55LCB0aGlzLmlubmVyUmFkaXVzLCB0aGlzLmVuZEFuZ2xlLCB0aGlzLnN0YXJ0QW5nbGUsIHRydWUpO1xuXG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnN0cm9rZUNvbG9yO1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMuc3Ryb2tlV2lkdGg7XG5cblx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmZpbGxDb2xvcjtcblxuXHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdGN0eC5saW5lSm9pbiA9ICdiZXZlbCc7XG5cblx0XHRcdGlmICh0aGlzLnNob3dTdHJva2Upe1xuXHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRDaGFydC5SZWN0YW5nbGUgPSBDaGFydC5FbGVtZW50LmV4dGVuZCh7XG5cdFx0ZHJhdyA6IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgY3R4ID0gdGhpcy5jdHgsXG5cdFx0XHRcdGhhbGZXaWR0aCA9IHRoaXMud2lkdGgvMixcblx0XHRcdFx0bGVmdFggPSB0aGlzLnggLSBoYWxmV2lkdGgsXG5cdFx0XHRcdHJpZ2h0WCA9IHRoaXMueCArIGhhbGZXaWR0aCxcblx0XHRcdFx0dG9wID0gdGhpcy5iYXNlIC0gKHRoaXMuYmFzZSAtIHRoaXMueSksXG5cdFx0XHRcdGhhbGZTdHJva2UgPSB0aGlzLnN0cm9rZVdpZHRoIC8gMjtcblxuXHRcdFx0Ly8gQ2FudmFzIGRvZXNuJ3QgYWxsb3cgdXMgdG8gc3Ryb2tlIGluc2lkZSB0aGUgd2lkdGggc28gd2UgY2FuXG5cdFx0XHQvLyBhZGp1c3QgdGhlIHNpemVzIHRvIGZpdCBpZiB3ZSdyZSBzZXR0aW5nIGEgc3Ryb2tlIG9uIHRoZSBsaW5lXG5cdFx0XHRpZiAodGhpcy5zaG93U3Ryb2tlKXtcblx0XHRcdFx0bGVmdFggKz0gaGFsZlN0cm9rZTtcblx0XHRcdFx0cmlnaHRYIC09IGhhbGZTdHJva2U7XG5cdFx0XHRcdHRvcCArPSBoYWxmU3Ryb2tlO1xuXHRcdFx0fVxuXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cblx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmZpbGxDb2xvcjtcblx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuc3Ryb2tlQ29sb3I7XG5cdFx0XHRjdHgubGluZVdpZHRoID0gdGhpcy5zdHJva2VXaWR0aDtcblxuXHRcdFx0Ly8gSXQnZCBiZSBuaWNlIHRvIGtlZXAgdGhpcyBjbGFzcyB0b3RhbGx5IGdlbmVyaWMgdG8gYW55IHJlY3RhbmdsZVxuXHRcdFx0Ly8gYW5kIHNpbXBseSBzcGVjaWZ5IHdoaWNoIGJvcmRlciB0byBtaXNzIG91dC5cblx0XHRcdGN0eC5tb3ZlVG8obGVmdFgsIHRoaXMuYmFzZSk7XG5cdFx0XHRjdHgubGluZVRvKGxlZnRYLCB0b3ApO1xuXHRcdFx0Y3R4LmxpbmVUbyhyaWdodFgsIHRvcCk7XG5cdFx0XHRjdHgubGluZVRvKHJpZ2h0WCwgdGhpcy5iYXNlKTtcblx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHRpZiAodGhpcy5zaG93U3Ryb2tlKXtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aGVpZ2h0IDogZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiB0aGlzLmJhc2UgLSB0aGlzLnk7XG5cdFx0fSxcblx0XHRpblJhbmdlIDogZnVuY3Rpb24oY2hhcnRYLGNoYXJ0WSl7XG5cdFx0XHRyZXR1cm4gKGNoYXJ0WCA+PSB0aGlzLnggLSB0aGlzLndpZHRoLzIgJiYgY2hhcnRYIDw9IHRoaXMueCArIHRoaXMud2lkdGgvMikgJiYgKGNoYXJ0WSA+PSB0aGlzLnkgJiYgY2hhcnRZIDw9IHRoaXMuYmFzZSk7XG5cdFx0fVxuXHR9KTtcblxuXHRDaGFydC5Ub29sdGlwID0gQ2hhcnQuRWxlbWVudC5leHRlbmQoe1xuXHRcdGRyYXcgOiBmdW5jdGlvbigpe1xuXG5cdFx0XHR2YXIgY3R4ID0gdGhpcy5jaGFydC5jdHg7XG5cblx0XHRcdGN0eC5mb250ID0gZm9udFN0cmluZyh0aGlzLmZvbnRTaXplLHRoaXMuZm9udFN0eWxlLHRoaXMuZm9udEZhbWlseSk7XG5cblx0XHRcdHRoaXMueEFsaWduID0gXCJjZW50ZXJcIjtcblx0XHRcdHRoaXMueUFsaWduID0gXCJhYm92ZVwiO1xuXG5cdFx0XHQvL0Rpc3RhbmNlIGJldHdlZW4gdGhlIGFjdHVhbCBlbGVtZW50LnkgcG9zaXRpb24gYW5kIHRoZSBzdGFydCBvZiB0aGUgdG9vbHRpcCBjYXJldFxuXHRcdFx0dmFyIGNhcmV0UGFkZGluZyA9IHRoaXMuY2FyZXRQYWRkaW5nID0gMjtcblxuXHRcdFx0dmFyIHRvb2x0aXBXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dCh0aGlzLnRleHQpLndpZHRoICsgMip0aGlzLnhQYWRkaW5nLFxuXHRcdFx0XHR0b29sdGlwUmVjdEhlaWdodCA9IHRoaXMuZm9udFNpemUgKyAyKnRoaXMueVBhZGRpbmcsXG5cdFx0XHRcdHRvb2x0aXBIZWlnaHQgPSB0b29sdGlwUmVjdEhlaWdodCArIHRoaXMuY2FyZXRIZWlnaHQgKyBjYXJldFBhZGRpbmc7XG5cblx0XHRcdGlmICh0aGlzLnggKyB0b29sdGlwV2lkdGgvMiA+dGhpcy5jaGFydC53aWR0aCl7XG5cdFx0XHRcdHRoaXMueEFsaWduID0gXCJsZWZ0XCI7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMueCAtIHRvb2x0aXBXaWR0aC8yIDwgMCl7XG5cdFx0XHRcdHRoaXMueEFsaWduID0gXCJyaWdodFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy55IC0gdG9vbHRpcEhlaWdodCA8IDApe1xuXHRcdFx0XHR0aGlzLnlBbGlnbiA9IFwiYmVsb3dcIjtcblx0XHRcdH1cblxuXG5cdFx0XHR2YXIgdG9vbHRpcFggPSB0aGlzLnggLSB0b29sdGlwV2lkdGgvMixcblx0XHRcdFx0dG9vbHRpcFkgPSB0aGlzLnkgLSB0b29sdGlwSGVpZ2h0O1xuXG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5maWxsQ29sb3I7XG5cblx0XHRcdC8vIEN1c3RvbSBUb29sdGlwc1xuXHRcdFx0aWYodGhpcy5jdXN0b20pe1xuXHRcdFx0XHR0aGlzLmN1c3RvbSh0aGlzKTtcblx0XHRcdH1cblx0XHRcdGVsc2V7XG5cdFx0XHRcdHN3aXRjaCh0aGlzLnlBbGlnbilcblx0XHRcdFx0e1xuXHRcdFx0XHRjYXNlIFwiYWJvdmVcIjpcblx0XHRcdFx0XHQvL0RyYXcgYSBjYXJldCBhYm92ZSB0aGUgeC95XG5cdFx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRcdGN0eC5tb3ZlVG8odGhpcy54LHRoaXMueSAtIGNhcmV0UGFkZGluZyk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyh0aGlzLnggKyB0aGlzLmNhcmV0SGVpZ2h0LCB0aGlzLnkgLSAoY2FyZXRQYWRkaW5nICsgdGhpcy5jYXJldEhlaWdodCkpO1xuXHRcdFx0XHRcdGN0eC5saW5lVG8odGhpcy54IC0gdGhpcy5jYXJldEhlaWdodCwgdGhpcy55IC0gKGNhcmV0UGFkZGluZyArIHRoaXMuY2FyZXRIZWlnaHQpKTtcblx0XHRcdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImJlbG93XCI6XG5cdFx0XHRcdFx0dG9vbHRpcFkgPSB0aGlzLnkgKyBjYXJldFBhZGRpbmcgKyB0aGlzLmNhcmV0SGVpZ2h0O1xuXHRcdFx0XHRcdC8vRHJhdyBhIGNhcmV0IGJlbG93IHRoZSB4L3lcblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyh0aGlzLngsIHRoaXMueSArIGNhcmV0UGFkZGluZyk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyh0aGlzLnggKyB0aGlzLmNhcmV0SGVpZ2h0LCB0aGlzLnkgKyBjYXJldFBhZGRpbmcgKyB0aGlzLmNhcmV0SGVpZ2h0KTtcblx0XHRcdFx0XHRjdHgubGluZVRvKHRoaXMueCAtIHRoaXMuY2FyZXRIZWlnaHQsIHRoaXMueSArIGNhcmV0UGFkZGluZyArIHRoaXMuY2FyZXRIZWlnaHQpO1xuXHRcdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3dpdGNoKHRoaXMueEFsaWduKVxuXHRcdFx0XHR7XG5cdFx0XHRcdGNhc2UgXCJsZWZ0XCI6XG5cdFx0XHRcdFx0dG9vbHRpcFggPSB0aGlzLnggLSB0b29sdGlwV2lkdGggKyAodGhpcy5jb3JuZXJSYWRpdXMgKyB0aGlzLmNhcmV0SGVpZ2h0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInJpZ2h0XCI6XG5cdFx0XHRcdFx0dG9vbHRpcFggPSB0aGlzLnggLSAodGhpcy5jb3JuZXJSYWRpdXMgKyB0aGlzLmNhcmV0SGVpZ2h0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRyYXdSb3VuZGVkUmVjdGFuZ2xlKGN0eCx0b29sdGlwWCx0b29sdGlwWSx0b29sdGlwV2lkdGgsdG9vbHRpcFJlY3RIZWlnaHQsdGhpcy5jb3JuZXJSYWRpdXMpO1xuXG5cdFx0XHRcdGN0eC5maWxsKCk7XG5cblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMudGV4dENvbG9yO1xuXHRcdFx0XHRjdHgudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcblx0XHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9IFwibWlkZGxlXCI7XG5cdFx0XHRcdGN0eC5maWxsVGV4dCh0aGlzLnRleHQsIHRvb2x0aXBYICsgdG9vbHRpcFdpZHRoLzIsIHRvb2x0aXBZICsgdG9vbHRpcFJlY3RIZWlnaHQvMik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRDaGFydC5NdWx0aVRvb2x0aXAgPSBDaGFydC5FbGVtZW50LmV4dGVuZCh7XG5cdFx0aW5pdGlhbGl6ZSA6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLmZvbnQgPSBmb250U3RyaW5nKHRoaXMuZm9udFNpemUsdGhpcy5mb250U3R5bGUsdGhpcy5mb250RmFtaWx5KTtcblxuXHRcdFx0dGhpcy50aXRsZUZvbnQgPSBmb250U3RyaW5nKHRoaXMudGl0bGVGb250U2l6ZSx0aGlzLnRpdGxlRm9udFN0eWxlLHRoaXMudGl0bGVGb250RmFtaWx5KTtcblxuXHRcdFx0dGhpcy5oZWlnaHQgPSAodGhpcy5sYWJlbHMubGVuZ3RoICogdGhpcy5mb250U2l6ZSkgKyAoKHRoaXMubGFiZWxzLmxlbmd0aC0xKSAqICh0aGlzLmZvbnRTaXplLzIpKSArICh0aGlzLnlQYWRkaW5nKjIpICsgdGhpcy50aXRsZUZvbnRTaXplICoxLjU7XG5cblx0XHRcdHRoaXMuY3R4LmZvbnQgPSB0aGlzLnRpdGxlRm9udDtcblxuXHRcdFx0dmFyIHRpdGxlV2lkdGggPSB0aGlzLmN0eC5tZWFzdXJlVGV4dCh0aGlzLnRpdGxlKS53aWR0aCxcblx0XHRcdFx0Ly9MYWJlbCBoYXMgYSBsZWdlbmQgc3F1YXJlIGFzIHdlbGwgc28gYWNjb3VudCBmb3IgdGhpcy5cblx0XHRcdFx0bGFiZWxXaWR0aCA9IGxvbmdlc3RUZXh0KHRoaXMuY3R4LHRoaXMuZm9udCx0aGlzLmxhYmVscykgKyB0aGlzLmZvbnRTaXplICsgMyxcblx0XHRcdFx0bG9uZ2VzdFRleHRXaWR0aCA9IG1heChbbGFiZWxXaWR0aCx0aXRsZVdpZHRoXSk7XG5cblx0XHRcdHRoaXMud2lkdGggPSBsb25nZXN0VGV4dFdpZHRoICsgKHRoaXMueFBhZGRpbmcqMik7XG5cblxuXHRcdFx0dmFyIGhhbGZIZWlnaHQgPSB0aGlzLmhlaWdodC8yO1xuXG5cdFx0XHQvL0NoZWNrIHRvIGVuc3VyZSB0aGUgaGVpZ2h0IHdpbGwgZml0IG9uIHRoZSBjYW52YXNcblx0XHRcdGlmICh0aGlzLnkgLSBoYWxmSGVpZ2h0IDwgMCApe1xuXHRcdFx0XHR0aGlzLnkgPSBoYWxmSGVpZ2h0O1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLnkgKyBoYWxmSGVpZ2h0ID4gdGhpcy5jaGFydC5oZWlnaHQpe1xuXHRcdFx0XHR0aGlzLnkgPSB0aGlzLmNoYXJ0LmhlaWdodCAtIGhhbGZIZWlnaHQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vRGVjaWRlIHdoZXRoZXIgdG8gYWxpZ24gbGVmdCBvciByaWdodCBiYXNlZCBvbiBwb3NpdGlvbiBvbiBjYW52YXNcblx0XHRcdGlmICh0aGlzLnggPiB0aGlzLmNoYXJ0LndpZHRoLzIpe1xuXHRcdFx0XHR0aGlzLnggLT0gdGhpcy54T2Zmc2V0ICsgdGhpcy53aWR0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMueCArPSB0aGlzLnhPZmZzZXQ7XG5cdFx0XHR9XG5cblxuXHRcdH0sXG5cdFx0Z2V0TGluZUhlaWdodCA6IGZ1bmN0aW9uKGluZGV4KXtcblx0XHRcdHZhciBiYXNlTGluZUhlaWdodCA9IHRoaXMueSAtICh0aGlzLmhlaWdodC8yKSArIHRoaXMueVBhZGRpbmcsXG5cdFx0XHRcdGFmdGVyVGl0bGVJbmRleCA9IGluZGV4LTE7XG5cblx0XHRcdC8vSWYgdGhlIGluZGV4IGlzIHplcm8sIHdlJ3JlIGdldHRpbmcgdGhlIHRpdGxlXG5cdFx0XHRpZiAoaW5kZXggPT09IDApe1xuXHRcdFx0XHRyZXR1cm4gYmFzZUxpbmVIZWlnaHQgKyB0aGlzLnRpdGxlRm9udFNpemUvMjtcblx0XHRcdH0gZWxzZXtcblx0XHRcdFx0cmV0dXJuIGJhc2VMaW5lSGVpZ2h0ICsgKCh0aGlzLmZvbnRTaXplKjEuNSphZnRlclRpdGxlSW5kZXgpICsgdGhpcy5mb250U2l6ZS8yKSArIHRoaXMudGl0bGVGb250U2l6ZSAqIDEuNTtcblx0XHRcdH1cblxuXHRcdH0sXG5cdFx0ZHJhdyA6IGZ1bmN0aW9uKCl7XG5cdFx0XHQvLyBDdXN0b20gVG9vbHRpcHNcblx0XHRcdGlmKHRoaXMuY3VzdG9tKXtcblx0XHRcdFx0dGhpcy5jdXN0b20odGhpcyk7XG5cdFx0XHR9XG5cdFx0XHRlbHNle1xuXHRcdFx0XHRkcmF3Um91bmRlZFJlY3RhbmdsZSh0aGlzLmN0eCx0aGlzLngsdGhpcy55IC0gdGhpcy5oZWlnaHQvMix0aGlzLndpZHRoLHRoaXMuaGVpZ2h0LHRoaXMuY29ybmVyUmFkaXVzKTtcblx0XHRcdFx0dmFyIGN0eCA9IHRoaXMuY3R4O1xuXHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5maWxsQ29sb3I7XG5cdFx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblxuXHRcdFx0XHRjdHgudGV4dEFsaWduID0gXCJsZWZ0XCI7XG5cdFx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSBcIm1pZGRsZVwiO1xuXHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy50aXRsZVRleHRDb2xvcjtcblx0XHRcdFx0Y3R4LmZvbnQgPSB0aGlzLnRpdGxlRm9udDtcblxuXHRcdFx0XHRjdHguZmlsbFRleHQodGhpcy50aXRsZSx0aGlzLnggKyB0aGlzLnhQYWRkaW5nLCB0aGlzLmdldExpbmVIZWlnaHQoMCkpO1xuXG5cdFx0XHRcdGN0eC5mb250ID0gdGhpcy5mb250O1xuXHRcdFx0XHRoZWxwZXJzLmVhY2godGhpcy5sYWJlbHMsZnVuY3Rpb24obGFiZWwsaW5kZXgpe1xuXHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLnRleHRDb2xvcjtcblx0XHRcdFx0XHRjdHguZmlsbFRleHQobGFiZWwsdGhpcy54ICsgdGhpcy54UGFkZGluZyArIHRoaXMuZm9udFNpemUgKyAzLCB0aGlzLmdldExpbmVIZWlnaHQoaW5kZXggKyAxKSk7XG5cblx0XHRcdFx0XHQvL0EgYml0IGduYXJseSwgYnV0IGNsZWFyaW5nIHRoaXMgcmVjdGFuZ2xlIGJyZWFrcyB3aGVuIHVzaW5nIGV4cGxvcmVyY2FudmFzIChjbGVhcnMgd2hvbGUgY2FudmFzKVxuXHRcdFx0XHRcdC8vY3R4LmNsZWFyUmVjdCh0aGlzLnggKyB0aGlzLnhQYWRkaW5nLCB0aGlzLmdldExpbmVIZWlnaHQoaW5kZXggKyAxKSAtIHRoaXMuZm9udFNpemUvMiwgdGhpcy5mb250U2l6ZSwgdGhpcy5mb250U2l6ZSk7XG5cdFx0XHRcdFx0Ly9JbnN0ZWFkIHdlJ2xsIG1ha2UgYSB3aGl0ZSBmaWxsZWQgYmxvY2sgdG8gcHV0IHRoZSBsZWdlbmRDb2xvdXIgcGFsZXR0ZSBvdmVyLlxuXG5cdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMubGVnZW5kQ29sb3JCYWNrZ3JvdW5kO1xuXHRcdFx0XHRcdGN0eC5maWxsUmVjdCh0aGlzLnggKyB0aGlzLnhQYWRkaW5nLCB0aGlzLmdldExpbmVIZWlnaHQoaW5kZXggKyAxKSAtIHRoaXMuZm9udFNpemUvMiwgdGhpcy5mb250U2l6ZSwgdGhpcy5mb250U2l6ZSk7XG5cblx0XHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5sZWdlbmRDb2xvcnNbaW5kZXhdLmZpbGw7XG5cdFx0XHRcdFx0Y3R4LmZpbGxSZWN0KHRoaXMueCArIHRoaXMueFBhZGRpbmcsIHRoaXMuZ2V0TGluZUhlaWdodChpbmRleCArIDEpIC0gdGhpcy5mb250U2l6ZS8yLCB0aGlzLmZvbnRTaXplLCB0aGlzLmZvbnRTaXplKTtcblxuXG5cdFx0XHRcdH0sdGhpcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRDaGFydC5TY2FsZSA9IENoYXJ0LkVsZW1lbnQuZXh0ZW5kKHtcblx0XHRpbml0aWFsaXplIDogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuZml0KCk7XG5cdFx0fSxcblx0XHRidWlsZFlMYWJlbHMgOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy55TGFiZWxzID0gW107XG5cblx0XHRcdHZhciBzdGVwRGVjaW1hbFBsYWNlcyA9IGdldERlY2ltYWxQbGFjZXModGhpcy5zdGVwVmFsdWUpO1xuXG5cdFx0XHRmb3IgKHZhciBpPTA7IGk8PXRoaXMuc3RlcHM7IGkrKyl7XG5cdFx0XHRcdHRoaXMueUxhYmVscy5wdXNoKHRlbXBsYXRlKHRoaXMudGVtcGxhdGVTdHJpbmcse3ZhbHVlOih0aGlzLm1pbiArIChpICogdGhpcy5zdGVwVmFsdWUpKS50b0ZpeGVkKHN0ZXBEZWNpbWFsUGxhY2VzKX0pKTtcblx0XHRcdH1cblx0XHRcdHRoaXMueUxhYmVsV2lkdGggPSAodGhpcy5kaXNwbGF5ICYmIHRoaXMuc2hvd0xhYmVscykgPyBsb25nZXN0VGV4dCh0aGlzLmN0eCx0aGlzLmZvbnQsdGhpcy55TGFiZWxzKSA6IDA7XG5cdFx0fSxcblx0XHRhZGRYTGFiZWwgOiBmdW5jdGlvbihsYWJlbCl7XG5cdFx0XHR0aGlzLnhMYWJlbHMucHVzaChsYWJlbCk7XG5cdFx0XHR0aGlzLnZhbHVlc0NvdW50Kys7XG5cdFx0XHR0aGlzLmZpdCgpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlWExhYmVsIDogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMueExhYmVscy5zaGlmdCgpO1xuXHRcdFx0dGhpcy52YWx1ZXNDb3VudC0tO1xuXHRcdFx0dGhpcy5maXQoKTtcblx0XHR9LFxuXHRcdC8vIEZpdHRpbmcgbG9vcCB0byByb3RhdGUgeCBMYWJlbHMgYW5kIGZpZ3VyZSBvdXQgd2hhdCBmaXRzIHRoZXJlLCBhbmQgYWxzbyBjYWxjdWxhdGUgaG93IG1hbnkgWSBzdGVwcyB0byB1c2Vcblx0XHRmaXQ6IGZ1bmN0aW9uKCl7XG5cdFx0XHQvLyBGaXJzdCB3ZSBuZWVkIHRoZSB3aWR0aCBvZiB0aGUgeUxhYmVscywgYXNzdW1pbmcgdGhlIHhMYWJlbHMgYXJlbid0IHJvdGF0ZWRcblxuXHRcdFx0Ly8gVG8gZG8gdGhhdCB3ZSBuZWVkIHRoZSBiYXNlIGxpbmUgYXQgdGhlIHRvcCBhbmQgYmFzZSBvZiB0aGUgY2hhcnQsIGFzc3VtaW5nIHRoZXJlIGlzIG5vIHggbGFiZWwgcm90YXRpb25cblx0XHRcdHRoaXMuc3RhcnRQb2ludCA9ICh0aGlzLmRpc3BsYXkpID8gdGhpcy5mb250U2l6ZSA6IDA7XG5cdFx0XHR0aGlzLmVuZFBvaW50ID0gKHRoaXMuZGlzcGxheSkgPyB0aGlzLmhlaWdodCAtICh0aGlzLmZvbnRTaXplICogMS41KSAtIDUgOiB0aGlzLmhlaWdodDsgLy8gLTUgdG8gcGFkIGxhYmVsc1xuXG5cdFx0XHQvLyBBcHBseSBwYWRkaW5nIHNldHRpbmdzIHRvIHRoZSBzdGFydCBhbmQgZW5kIHBvaW50LlxuXHRcdFx0dGhpcy5zdGFydFBvaW50ICs9IHRoaXMucGFkZGluZztcblx0XHRcdHRoaXMuZW5kUG9pbnQgLT0gdGhpcy5wYWRkaW5nO1xuXG5cdFx0XHQvLyBDYWNoZSB0aGUgc3RhcnRpbmcgaGVpZ2h0LCBzbyBjYW4gZGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gcmVjYWxjdWxhdGUgdGhlIHNjYWxlIHlBeGlzXG5cdFx0XHR2YXIgY2FjaGVkSGVpZ2h0ID0gdGhpcy5lbmRQb2ludCAtIHRoaXMuc3RhcnRQb2ludCxcblx0XHRcdFx0Y2FjaGVkWUxhYmVsV2lkdGg7XG5cblx0XHRcdC8vIEJ1aWxkIHRoZSBjdXJyZW50IHlMYWJlbHMgc28gd2UgaGF2ZSBhbiBpZGVhIG9mIHdoYXQgc2l6ZSB0aGV5J2xsIGJlIHRvIHN0YXJ0XG5cdFx0XHQvKlxuXHRcdFx0ICpcdFRoaXMgc2V0cyB3aGF0IGlzIHJldHVybmVkIGZyb20gY2FsY3VsYXRlU2NhbGVSYW5nZSBhcyBzdGF0aWMgcHJvcGVydGllcyBvZiB0aGlzIGNsYXNzOlxuXHRcdFx0ICpcblx0XHRcdFx0dGhpcy5zdGVwcztcblx0XHRcdFx0dGhpcy5zdGVwVmFsdWU7XG5cdFx0XHRcdHRoaXMubWluO1xuXHRcdFx0XHR0aGlzLm1heDtcblx0XHRcdCAqXG5cdFx0XHQgKi9cblx0XHRcdHRoaXMuY2FsY3VsYXRlWVJhbmdlKGNhY2hlZEhlaWdodCk7XG5cblx0XHRcdC8vIFdpdGggdGhlc2UgcHJvcGVydGllcyBzZXQgd2UgY2FuIG5vdyBidWlsZCB0aGUgYXJyYXkgb2YgeUxhYmVsc1xuXHRcdFx0Ly8gYW5kIGFsc28gdGhlIHdpZHRoIG9mIHRoZSBsYXJnZXN0IHlMYWJlbFxuXHRcdFx0dGhpcy5idWlsZFlMYWJlbHMoKTtcblxuXHRcdFx0dGhpcy5jYWxjdWxhdGVYTGFiZWxSb3RhdGlvbigpO1xuXG5cdFx0XHR3aGlsZSgoY2FjaGVkSGVpZ2h0ID4gdGhpcy5lbmRQb2ludCAtIHRoaXMuc3RhcnRQb2ludCkpe1xuXHRcdFx0XHRjYWNoZWRIZWlnaHQgPSB0aGlzLmVuZFBvaW50IC0gdGhpcy5zdGFydFBvaW50O1xuXHRcdFx0XHRjYWNoZWRZTGFiZWxXaWR0aCA9IHRoaXMueUxhYmVsV2lkdGg7XG5cblx0XHRcdFx0dGhpcy5jYWxjdWxhdGVZUmFuZ2UoY2FjaGVkSGVpZ2h0KTtcblx0XHRcdFx0dGhpcy5idWlsZFlMYWJlbHMoKTtcblxuXHRcdFx0XHQvLyBPbmx5IGdvIHRocm91Z2ggdGhlIHhMYWJlbCBsb29wIGFnYWluIGlmIHRoZSB5TGFiZWwgd2lkdGggaGFzIGNoYW5nZWRcblx0XHRcdFx0aWYgKGNhY2hlZFlMYWJlbFdpZHRoIDwgdGhpcy55TGFiZWxXaWR0aCl7XG5cdFx0XHRcdFx0dGhpcy5jYWxjdWxhdGVYTGFiZWxSb3RhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9LFxuXHRcdGNhbGN1bGF0ZVhMYWJlbFJvdGF0aW9uIDogZnVuY3Rpb24oKXtcblx0XHRcdC8vR2V0IHRoZSB3aWR0aCBvZiBlYWNoIGdyaWQgYnkgY2FsY3VsYXRpbmcgdGhlIGRpZmZlcmVuY2Vcblx0XHRcdC8vYmV0d2VlbiB4IG9mZnNldHMgYmV0d2VlbiAwIGFuZCAxLlxuXG5cdFx0XHR0aGlzLmN0eC5mb250ID0gdGhpcy5mb250O1xuXG5cdFx0XHR2YXIgZmlyc3RXaWR0aCA9IHRoaXMuY3R4Lm1lYXN1cmVUZXh0KHRoaXMueExhYmVsc1swXSkud2lkdGgsXG5cdFx0XHRcdGxhc3RXaWR0aCA9IHRoaXMuY3R4Lm1lYXN1cmVUZXh0KHRoaXMueExhYmVsc1t0aGlzLnhMYWJlbHMubGVuZ3RoIC0gMV0pLndpZHRoLFxuXHRcdFx0XHRmaXJzdFJvdGF0ZWQsXG5cdFx0XHRcdGxhc3RSb3RhdGVkO1xuXG5cblx0XHRcdHRoaXMueFNjYWxlUGFkZGluZ1JpZ2h0ID0gbGFzdFdpZHRoLzIgKyAzO1xuXHRcdFx0dGhpcy54U2NhbGVQYWRkaW5nTGVmdCA9IChmaXJzdFdpZHRoLzIgPiB0aGlzLnlMYWJlbFdpZHRoICsgMTApID8gZmlyc3RXaWR0aC8yIDogdGhpcy55TGFiZWxXaWR0aCArIDEwO1xuXG5cdFx0XHR0aGlzLnhMYWJlbFJvdGF0aW9uID0gMDtcblx0XHRcdGlmICh0aGlzLmRpc3BsYXkpe1xuXHRcdFx0XHR2YXIgb3JpZ2luYWxMYWJlbFdpZHRoID0gbG9uZ2VzdFRleHQodGhpcy5jdHgsdGhpcy5mb250LHRoaXMueExhYmVscyksXG5cdFx0XHRcdFx0Y29zUm90YXRpb24sXG5cdFx0XHRcdFx0Zmlyc3RSb3RhdGVkV2lkdGg7XG5cdFx0XHRcdHRoaXMueExhYmVsV2lkdGggPSBvcmlnaW5hbExhYmVsV2lkdGg7XG5cdFx0XHRcdC8vQWxsb3cgMyBwaXhlbHMgeDIgcGFkZGluZyBlaXRoZXIgc2lkZSBmb3IgbGFiZWwgcmVhZGFiaWxpdHlcblx0XHRcdFx0dmFyIHhHcmlkV2lkdGggPSBNYXRoLmZsb29yKHRoaXMuY2FsY3VsYXRlWCgxKSAtIHRoaXMuY2FsY3VsYXRlWCgwKSkgLSA2O1xuXG5cdFx0XHRcdC8vTWF4IGxhYmVsIHJvdGF0ZSBzaG91bGQgYmUgOTAgLSBhbHNvIGFjdCBhcyBhIGxvb3AgY291bnRlclxuXHRcdFx0XHR3aGlsZSAoKHRoaXMueExhYmVsV2lkdGggPiB4R3JpZFdpZHRoICYmIHRoaXMueExhYmVsUm90YXRpb24gPT09IDApIHx8ICh0aGlzLnhMYWJlbFdpZHRoID4geEdyaWRXaWR0aCAmJiB0aGlzLnhMYWJlbFJvdGF0aW9uIDw9IDkwICYmIHRoaXMueExhYmVsUm90YXRpb24gPiAwKSl7XG5cdFx0XHRcdFx0Y29zUm90YXRpb24gPSBNYXRoLmNvcyh0b1JhZGlhbnModGhpcy54TGFiZWxSb3RhdGlvbikpO1xuXG5cdFx0XHRcdFx0Zmlyc3RSb3RhdGVkID0gY29zUm90YXRpb24gKiBmaXJzdFdpZHRoO1xuXHRcdFx0XHRcdGxhc3RSb3RhdGVkID0gY29zUm90YXRpb24gKiBsYXN0V2lkdGg7XG5cblx0XHRcdFx0XHQvLyBXZSdyZSByaWdodCBhbGlnbmluZyB0aGUgdGV4dCBub3cuXG5cdFx0XHRcdFx0aWYgKGZpcnN0Um90YXRlZCArIHRoaXMuZm9udFNpemUgLyAyID4gdGhpcy55TGFiZWxXaWR0aCArIDgpe1xuXHRcdFx0XHRcdFx0dGhpcy54U2NhbGVQYWRkaW5nTGVmdCA9IGZpcnN0Um90YXRlZCArIHRoaXMuZm9udFNpemUgLyAyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLnhTY2FsZVBhZGRpbmdSaWdodCA9IHRoaXMuZm9udFNpemUvMjtcblxuXG5cdFx0XHRcdFx0dGhpcy54TGFiZWxSb3RhdGlvbisrO1xuXHRcdFx0XHRcdHRoaXMueExhYmVsV2lkdGggPSBjb3NSb3RhdGlvbiAqIG9yaWdpbmFsTGFiZWxXaWR0aDtcblxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLnhMYWJlbFJvdGF0aW9uID4gMCl7XG5cdFx0XHRcdFx0dGhpcy5lbmRQb2ludCAtPSBNYXRoLnNpbih0b1JhZGlhbnModGhpcy54TGFiZWxSb3RhdGlvbikpKm9yaWdpbmFsTGFiZWxXaWR0aCArIDM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2V7XG5cdFx0XHRcdHRoaXMueExhYmVsV2lkdGggPSAwO1xuXHRcdFx0XHR0aGlzLnhTY2FsZVBhZGRpbmdSaWdodCA9IHRoaXMucGFkZGluZztcblx0XHRcdFx0dGhpcy54U2NhbGVQYWRkaW5nTGVmdCA9IHRoaXMucGFkZGluZztcblx0XHRcdH1cblxuXHRcdH0sXG5cdFx0Ly8gTmVlZHMgdG8gYmUgb3ZlcmlkZGVuIGluIGVhY2ggQ2hhcnQgdHlwZVxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIHRvIHBhc3MgYWxsIHRoZSBkYXRhIGludG8gdGhlIHNjYWxlIGNsYXNzXG5cdFx0Y2FsY3VsYXRlWVJhbmdlOiBub29wLFxuXHRcdGRyYXdpbmdBcmVhOiBmdW5jdGlvbigpe1xuXHRcdFx0cmV0dXJuIHRoaXMuc3RhcnRQb2ludCAtIHRoaXMuZW5kUG9pbnQ7XG5cdFx0fSxcblx0XHRjYWxjdWxhdGVZIDogZnVuY3Rpb24odmFsdWUpe1xuXHRcdFx0dmFyIHNjYWxpbmdGYWN0b3IgPSB0aGlzLmRyYXdpbmdBcmVhKCkgLyAodGhpcy5taW4gLSB0aGlzLm1heCk7XG5cdFx0XHRyZXR1cm4gdGhpcy5lbmRQb2ludCAtIChzY2FsaW5nRmFjdG9yICogKHZhbHVlIC0gdGhpcy5taW4pKTtcblx0XHR9LFxuXHRcdGNhbGN1bGF0ZVggOiBmdW5jdGlvbihpbmRleCl7XG5cdFx0XHR2YXIgaXNSb3RhdGVkID0gKHRoaXMueExhYmVsUm90YXRpb24gPiAwKSxcblx0XHRcdFx0Ly8gaW5uZXJXaWR0aCA9ICh0aGlzLm9mZnNldEdyaWRMaW5lcykgPyB0aGlzLndpZHRoIC0gb2Zmc2V0TGVmdCAtIHRoaXMucGFkZGluZyA6IHRoaXMud2lkdGggLSAob2Zmc2V0TGVmdCArIGhhbGZMYWJlbFdpZHRoICogMikgLSB0aGlzLnBhZGRpbmcsXG5cdFx0XHRcdGlubmVyV2lkdGggPSB0aGlzLndpZHRoIC0gKHRoaXMueFNjYWxlUGFkZGluZ0xlZnQgKyB0aGlzLnhTY2FsZVBhZGRpbmdSaWdodCksXG5cdFx0XHRcdHZhbHVlV2lkdGggPSBpbm5lcldpZHRoL01hdGgubWF4KCh0aGlzLnZhbHVlc0NvdW50IC0gKCh0aGlzLm9mZnNldEdyaWRMaW5lcykgPyAwIDogMSkpLCAxKSxcblx0XHRcdFx0dmFsdWVPZmZzZXQgPSAodmFsdWVXaWR0aCAqIGluZGV4KSArIHRoaXMueFNjYWxlUGFkZGluZ0xlZnQ7XG5cblx0XHRcdGlmICh0aGlzLm9mZnNldEdyaWRMaW5lcyl7XG5cdFx0XHRcdHZhbHVlT2Zmc2V0ICs9ICh2YWx1ZVdpZHRoLzIpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZU9mZnNldCk7XG5cdFx0fSxcblx0XHR1cGRhdGUgOiBmdW5jdGlvbihuZXdQcm9wcyl7XG5cdFx0XHRoZWxwZXJzLmV4dGVuZCh0aGlzLCBuZXdQcm9wcyk7XG5cdFx0XHR0aGlzLmZpdCgpO1xuXHRcdH0sXG5cdFx0ZHJhdyA6IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgY3R4ID0gdGhpcy5jdHgsXG5cdFx0XHRcdHlMYWJlbEdhcCA9ICh0aGlzLmVuZFBvaW50IC0gdGhpcy5zdGFydFBvaW50KSAvIHRoaXMuc3RlcHMsXG5cdFx0XHRcdHhTdGFydCA9IE1hdGgucm91bmQodGhpcy54U2NhbGVQYWRkaW5nTGVmdCk7XG5cdFx0XHRpZiAodGhpcy5kaXNwbGF5KXtcblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMudGV4dENvbG9yO1xuXHRcdFx0XHRjdHguZm9udCA9IHRoaXMuZm9udDtcblx0XHRcdFx0ZWFjaCh0aGlzLnlMYWJlbHMsZnVuY3Rpb24obGFiZWxTdHJpbmcsaW5kZXgpe1xuXHRcdFx0XHRcdHZhciB5TGFiZWxDZW50ZXIgPSB0aGlzLmVuZFBvaW50IC0gKHlMYWJlbEdhcCAqIGluZGV4KSxcblx0XHRcdFx0XHRcdGxpbmVQb3NpdGlvblkgPSBNYXRoLnJvdW5kKHlMYWJlbENlbnRlciksXG5cdFx0XHRcdFx0XHRkcmF3SG9yaXpvbnRhbExpbmUgPSB0aGlzLnNob3dIb3Jpem9udGFsTGluZXM7XG5cblx0XHRcdFx0XHRjdHgudGV4dEFsaWduID0gXCJyaWdodFwiO1xuXHRcdFx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSBcIm1pZGRsZVwiO1xuXHRcdFx0XHRcdGlmICh0aGlzLnNob3dMYWJlbHMpe1xuXHRcdFx0XHRcdFx0Y3R4LmZpbGxUZXh0KGxhYmVsU3RyaW5nLHhTdGFydCAtIDEwLHlMYWJlbENlbnRlcik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gVGhpcyBpcyBYIGF4aXMsIHNvIGRyYXcgaXRcblx0XHRcdFx0XHRpZiAoaW5kZXggPT09IDAgJiYgIWRyYXdIb3Jpem9udGFsTGluZSl7XG5cdFx0XHRcdFx0XHRkcmF3SG9yaXpvbnRhbExpbmUgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChkcmF3SG9yaXpvbnRhbExpbmUpe1xuXHRcdFx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChpbmRleCA+IDApe1xuXHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIGdyaWQgbGluZSBpbiB0aGUgY2VudHJlLCBzbyBkcm9wIHRoYXRcblx0XHRcdFx0XHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLmdyaWRMaW5lV2lkdGg7XG5cdFx0XHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmdyaWRMaW5lQ29sb3I7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgdGhlIGZpcnN0IGxpbmUgb24gdGhlIHNjYWxlXG5cdFx0XHRcdFx0XHRjdHgubGluZVdpZHRoID0gdGhpcy5saW5lV2lkdGg7XG5cdFx0XHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmxpbmVDb2xvcjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRsaW5lUG9zaXRpb25ZICs9IGhlbHBlcnMuYWxpYXNQaXhlbChjdHgubGluZVdpZHRoKTtcblxuXHRcdFx0XHRcdGlmKGRyYXdIb3Jpem9udGFsTGluZSl7XG5cdFx0XHRcdFx0XHRjdHgubW92ZVRvKHhTdGFydCwgbGluZVBvc2l0aW9uWSk7XG5cdFx0XHRcdFx0XHRjdHgubGluZVRvKHRoaXMud2lkdGgsIGxpbmVQb3NpdGlvblkpO1xuXHRcdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLmxpbmVXaWR0aDtcblx0XHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmxpbmVDb2xvcjtcblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyh4U3RhcnQgLSA1LCBsaW5lUG9zaXRpb25ZKTtcblx0XHRcdFx0XHRjdHgubGluZVRvKHhTdGFydCwgbGluZVBvc2l0aW9uWSk7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblxuXHRcdFx0XHR9LHRoaXMpO1xuXG5cdFx0XHRcdGVhY2godGhpcy54TGFiZWxzLGZ1bmN0aW9uKGxhYmVsLGluZGV4KXtcblx0XHRcdFx0XHR2YXIgeFBvcyA9IHRoaXMuY2FsY3VsYXRlWChpbmRleCkgKyBhbGlhc1BpeGVsKHRoaXMubGluZVdpZHRoKSxcblx0XHRcdFx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBsaW5lL2JhciBoZXJlIGFuZCBkZWNpZGUgd2hlcmUgdG8gcGxhY2UgdGhlIGxpbmVcblx0XHRcdFx0XHRcdGxpbmVQb3MgPSB0aGlzLmNhbGN1bGF0ZVgoaW5kZXggLSAodGhpcy5vZmZzZXRHcmlkTGluZXMgPyAwLjUgOiAwKSkgKyBhbGlhc1BpeGVsKHRoaXMubGluZVdpZHRoKSxcblx0XHRcdFx0XHRcdGlzUm90YXRlZCA9ICh0aGlzLnhMYWJlbFJvdGF0aW9uID4gMCksXG5cdFx0XHRcdFx0XHRkcmF3VmVydGljYWxMaW5lID0gdGhpcy5zaG93VmVydGljYWxMaW5lcztcblxuXHRcdFx0XHRcdC8vIFRoaXMgaXMgWSBheGlzLCBzbyBkcmF3IGl0XG5cdFx0XHRcdFx0aWYgKGluZGV4ID09PSAwICYmICFkcmF3VmVydGljYWxMaW5lKXtcblx0XHRcdFx0XHRcdGRyYXdWZXJ0aWNhbExpbmUgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChkcmF3VmVydGljYWxMaW5lKXtcblx0XHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoaW5kZXggPiAwKXtcblx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBncmlkIGxpbmUgaW4gdGhlIGNlbnRyZSwgc28gZHJvcCB0aGF0XG5cdFx0XHRcdFx0XHRjdHgubGluZVdpZHRoID0gdGhpcy5ncmlkTGluZVdpZHRoO1xuXHRcdFx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5ncmlkTGluZUNvbG9yO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQvLyBUaGlzIGlzIHRoZSBmaXJzdCBsaW5lIG9uIHRoZSBzY2FsZVxuXHRcdFx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMubGluZVdpZHRoO1xuXHRcdFx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5saW5lQ29sb3I7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGRyYXdWZXJ0aWNhbExpbmUpe1xuXHRcdFx0XHRcdFx0Y3R4Lm1vdmVUbyhsaW5lUG9zLHRoaXMuZW5kUG9pbnQpO1xuXHRcdFx0XHRcdFx0Y3R4LmxpbmVUbyhsaW5lUG9zLHRoaXMuc3RhcnRQb2ludCAtIDMpO1xuXHRcdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0XHRcdH1cblxuXG5cdFx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMubGluZVdpZHRoO1xuXHRcdFx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IHRoaXMubGluZUNvbG9yO1xuXG5cblx0XHRcdFx0XHQvLyBTbWFsbCBsaW5lcyBhdCB0aGUgYm90dG9tIG9mIHRoZSBiYXNlIGdyaWQgbGluZVxuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRjdHgubW92ZVRvKGxpbmVQb3MsdGhpcy5lbmRQb2ludCk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyhsaW5lUG9zLHRoaXMuZW5kUG9pbnQgKyA1KTtcblx0XHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXG5cdFx0XHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdFx0XHRjdHgudHJhbnNsYXRlKHhQb3MsKGlzUm90YXRlZCkgPyB0aGlzLmVuZFBvaW50ICsgMTIgOiB0aGlzLmVuZFBvaW50ICsgOCk7XG5cdFx0XHRcdFx0Y3R4LnJvdGF0ZSh0b1JhZGlhbnModGhpcy54TGFiZWxSb3RhdGlvbikqLTEpO1xuXHRcdFx0XHRcdGN0eC5mb250ID0gdGhpcy5mb250O1xuXHRcdFx0XHRcdGN0eC50ZXh0QWxpZ24gPSAoaXNSb3RhdGVkKSA/IFwicmlnaHRcIiA6IFwiY2VudGVyXCI7XG5cdFx0XHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9IChpc1JvdGF0ZWQpID8gXCJtaWRkbGVcIiA6IFwidG9wXCI7XG5cdFx0XHRcdFx0Y3R4LmZpbGxUZXh0KGxhYmVsLCAwLCAwKTtcblx0XHRcdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdFx0XHR9LHRoaXMpO1xuXG5cdFx0XHR9XG5cdFx0fVxuXG5cdH0pO1xuXG5cdENoYXJ0LlJhZGlhbFNjYWxlID0gQ2hhcnQuRWxlbWVudC5leHRlbmQoe1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLnNpemUgPSBtaW4oW3RoaXMuaGVpZ2h0LCB0aGlzLndpZHRoXSk7XG5cdFx0XHR0aGlzLmRyYXdpbmdBcmVhID0gKHRoaXMuZGlzcGxheSkgPyAodGhpcy5zaXplLzIpIC0gKHRoaXMuZm9udFNpemUvMiArIHRoaXMuYmFja2Ryb3BQYWRkaW5nWSkgOiAodGhpcy5zaXplLzIpO1xuXHRcdH0sXG5cdFx0Y2FsY3VsYXRlQ2VudGVyT2Zmc2V0OiBmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHQvLyBUYWtlIGludG8gYWNjb3VudCBoYWxmIGZvbnQgc2l6ZSArIHRoZSB5UGFkZGluZyBvZiB0aGUgdG9wIHZhbHVlXG5cdFx0XHR2YXIgc2NhbGluZ0ZhY3RvciA9IHRoaXMuZHJhd2luZ0FyZWEgLyAodGhpcy5tYXggLSB0aGlzLm1pbik7XG5cblx0XHRcdHJldHVybiAodmFsdWUgLSB0aGlzLm1pbikgKiBzY2FsaW5nRmFjdG9yO1xuXHRcdH0sXG5cdFx0dXBkYXRlIDogZnVuY3Rpb24oKXtcblx0XHRcdGlmICghdGhpcy5saW5lQXJjKXtcblx0XHRcdFx0dGhpcy5zZXRTY2FsZVNpemUoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZHJhd2luZ0FyZWEgPSAodGhpcy5kaXNwbGF5KSA/ICh0aGlzLnNpemUvMikgLSAodGhpcy5mb250U2l6ZS8yICsgdGhpcy5iYWNrZHJvcFBhZGRpbmdZKSA6ICh0aGlzLnNpemUvMik7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmJ1aWxkWUxhYmVscygpO1xuXHRcdH0sXG5cdFx0YnVpbGRZTGFiZWxzOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy55TGFiZWxzID0gW107XG5cblx0XHRcdHZhciBzdGVwRGVjaW1hbFBsYWNlcyA9IGdldERlY2ltYWxQbGFjZXModGhpcy5zdGVwVmFsdWUpO1xuXG5cdFx0XHRmb3IgKHZhciBpPTA7IGk8PXRoaXMuc3RlcHM7IGkrKyl7XG5cdFx0XHRcdHRoaXMueUxhYmVscy5wdXNoKHRlbXBsYXRlKHRoaXMudGVtcGxhdGVTdHJpbmcse3ZhbHVlOih0aGlzLm1pbiArIChpICogdGhpcy5zdGVwVmFsdWUpKS50b0ZpeGVkKHN0ZXBEZWNpbWFsUGxhY2VzKX0pKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGdldENpcmN1bWZlcmVuY2UgOiBmdW5jdGlvbigpe1xuXHRcdFx0cmV0dXJuICgoTWF0aC5QSSoyKSAvIHRoaXMudmFsdWVzQ291bnQpO1xuXHRcdH0sXG5cdFx0c2V0U2NhbGVTaXplOiBmdW5jdGlvbigpe1xuXHRcdFx0Lypcblx0XHRcdCAqIFJpZ2h0LCB0aGlzIGlzIHJlYWxseSBjb25mdXNpbmcgYW5kIHRoZXJlIGlzIGEgbG90IG9mIG1hdGhzIGdvaW5nIG9uIGhlcmVcblx0XHRcdCAqIFRoZSBnaXN0IG9mIHRoZSBwcm9ibGVtIGlzIGhlcmU6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL25ubmljay82OTZjYzljNTVmNGIwYmViOGZlOVxuXHRcdFx0ICpcblx0XHRcdCAqIFJlYWN0aW9uOiBodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8zNDYwMTM2My90b29tdWNoc2NpZW5jZS5naWZcblx0XHRcdCAqXG5cdFx0XHQgKiBTb2x1dGlvbjpcblx0XHRcdCAqXG5cdFx0XHQgKiBXZSBhc3N1bWUgdGhlIHJhZGl1cyBvZiB0aGUgcG9seWdvbiBpcyBoYWxmIHRoZSBzaXplIG9mIHRoZSBjYW52YXMgYXQgZmlyc3Rcblx0XHRcdCAqIGF0IGVhY2ggaW5kZXggd2UgY2hlY2sgaWYgdGhlIHRleHQgb3ZlcmxhcHMuXG5cdFx0XHQgKlxuXHRcdFx0ICogV2hlcmUgaXQgZG9lcywgd2Ugc3RvcmUgdGhhdCBhbmdsZSBhbmQgdGhhdCBpbmRleC5cblx0XHRcdCAqXG5cdFx0XHQgKiBBZnRlciBmaW5kaW5nIHRoZSBsYXJnZXN0IGluZGV4IGFuZCBhbmdsZSB3ZSBjYWxjdWxhdGUgaG93IG11Y2ggd2UgbmVlZCB0byByZW1vdmVcblx0XHRcdCAqIGZyb20gdGhlIHNoYXBlIHJhZGl1cyB0byBtb3ZlIHRoZSBwb2ludCBpbndhcmRzIGJ5IHRoYXQgeC5cblx0XHRcdCAqXG5cdFx0XHQgKiBXZSBhdmVyYWdlIHRoZSBsZWZ0IGFuZCByaWdodCBkaXN0YW5jZXMgdG8gZ2V0IHRoZSBtYXhpbXVtIHNoYXBlIHJhZGl1cyB0aGF0IGNhbiBmaXQgaW4gdGhlIGJveFxuXHRcdFx0ICogYWxvbmcgd2l0aCBsYWJlbHMuXG5cdFx0XHQgKlxuXHRcdFx0ICogT25jZSB3ZSBoYXZlIHRoYXQsIHdlIGNhbiBmaW5kIHRoZSBjZW50cmUgcG9pbnQgZm9yIHRoZSBjaGFydCwgYnkgdGFraW5nIHRoZSB4IHRleHQgcHJvdHJ1c2lvblxuXHRcdFx0ICogb24gZWFjaCBzaWRlLCByZW1vdmluZyB0aGF0IGZyb20gdGhlIHNpemUsIGhhbHZpbmcgaXQgYW5kIGFkZGluZyB0aGUgbGVmdCB4IHByb3RydXNpb24gd2lkdGguXG5cdFx0XHQgKlxuXHRcdFx0ICogVGhpcyB3aWxsIG1lYW4gd2UgaGF2ZSBhIHNoYXBlIGZpdHRlZCB0byB0aGUgY2FudmFzLCBhcyBsYXJnZSBhcyBpdCBjYW4gYmUgd2l0aCB0aGUgbGFiZWxzXG5cdFx0XHQgKiBhbmQgcG9zaXRpb24gaXQgaW4gdGhlIG1vc3Qgc3BhY2UgZWZmaWNpZW50IG1hbm5lclxuXHRcdFx0ICpcblx0XHRcdCAqIGh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzM0NjAxMzYzL3llYWhzY2llbmNlLmdpZlxuXHRcdFx0ICovXG5cblxuXHRcdFx0Ly8gR2V0IG1heGltdW0gcmFkaXVzIG9mIHRoZSBwb2x5Z29uLiBFaXRoZXIgaGFsZiB0aGUgaGVpZ2h0IChtaW51cyB0aGUgdGV4dCB3aWR0aCkgb3IgaGFsZiB0aGUgd2lkdGguXG5cdFx0XHQvLyBVc2UgdGhpcyB0byBjYWxjdWxhdGUgdGhlIG9mZnNldCArIGNoYW5nZS4gLSBNYWtlIHN1cmUgTC9SIHByb3RydXNpb24gaXMgYXQgbGVhc3QgMCB0byBzdG9wIGlzc3VlcyB3aXRoIGNlbnRyZSBwb2ludHNcblx0XHRcdHZhciBsYXJnZXN0UG9zc2libGVSYWRpdXMgPSBtaW4oWyh0aGlzLmhlaWdodC8yIC0gdGhpcy5wb2ludExhYmVsRm9udFNpemUgLSA1KSwgdGhpcy53aWR0aC8yXSksXG5cdFx0XHRcdHBvaW50UG9zaXRpb24sXG5cdFx0XHRcdGksXG5cdFx0XHRcdHRleHRXaWR0aCxcblx0XHRcdFx0aGFsZlRleHRXaWR0aCxcblx0XHRcdFx0ZnVydGhlc3RSaWdodCA9IHRoaXMud2lkdGgsXG5cdFx0XHRcdGZ1cnRoZXN0UmlnaHRJbmRleCxcblx0XHRcdFx0ZnVydGhlc3RSaWdodEFuZ2xlLFxuXHRcdFx0XHRmdXJ0aGVzdExlZnQgPSAwLFxuXHRcdFx0XHRmdXJ0aGVzdExlZnRJbmRleCxcblx0XHRcdFx0ZnVydGhlc3RMZWZ0QW5nbGUsXG5cdFx0XHRcdHhQcm90cnVzaW9uTGVmdCxcblx0XHRcdFx0eFByb3RydXNpb25SaWdodCxcblx0XHRcdFx0cmFkaXVzUmVkdWN0aW9uUmlnaHQsXG5cdFx0XHRcdHJhZGl1c1JlZHVjdGlvbkxlZnQsXG5cdFx0XHRcdG1heFdpZHRoUmFkaXVzO1xuXHRcdFx0dGhpcy5jdHguZm9udCA9IGZvbnRTdHJpbmcodGhpcy5wb2ludExhYmVsRm9udFNpemUsdGhpcy5wb2ludExhYmVsRm9udFN0eWxlLHRoaXMucG9pbnRMYWJlbEZvbnRGYW1pbHkpO1xuXHRcdFx0Zm9yIChpPTA7aTx0aGlzLnZhbHVlc0NvdW50O2krKyl7XG5cdFx0XHRcdC8vIDVweCB0byBzcGFjZSB0aGUgdGV4dCBzbGlnaHRseSBvdXQgLSBzaW1pbGFyIHRvIHdoYXQgd2UgZG8gaW4gdGhlIGRyYXcgZnVuY3Rpb24uXG5cdFx0XHRcdHBvaW50UG9zaXRpb24gPSB0aGlzLmdldFBvaW50UG9zaXRpb24oaSwgbGFyZ2VzdFBvc3NpYmxlUmFkaXVzKTtcblx0XHRcdFx0dGV4dFdpZHRoID0gdGhpcy5jdHgubWVhc3VyZVRleHQodGVtcGxhdGUodGhpcy50ZW1wbGF0ZVN0cmluZywgeyB2YWx1ZTogdGhpcy5sYWJlbHNbaV0gfSkpLndpZHRoICsgNTtcblx0XHRcdFx0aWYgKGkgPT09IDAgfHwgaSA9PT0gdGhpcy52YWx1ZXNDb3VudC8yKXtcblx0XHRcdFx0XHQvLyBJZiB3ZSdyZSBhdCBpbmRleCB6ZXJvLCBvciBleGFjdGx5IHRoZSBtaWRkbGUsIHdlJ3JlIGF0IGV4YWN0bHkgdGhlIHRvcC9ib3R0b21cblx0XHRcdFx0XHQvLyBvZiB0aGUgcmFkYXIgY2hhcnQsIHNvIHRleHQgd2lsbCBiZSBhbGlnbmVkIGNlbnRyYWxseSwgc28gd2UnbGwgaGFsZiBpdCBhbmQgY29tcGFyZVxuXHRcdFx0XHRcdC8vIHcvbGVmdCBhbmQgcmlnaHQgdGV4dCBzaXplc1xuXHRcdFx0XHRcdGhhbGZUZXh0V2lkdGggPSB0ZXh0V2lkdGgvMjtcblx0XHRcdFx0XHRpZiAocG9pbnRQb3NpdGlvbi54ICsgaGFsZlRleHRXaWR0aCA+IGZ1cnRoZXN0UmlnaHQpIHtcblx0XHRcdFx0XHRcdGZ1cnRoZXN0UmlnaHQgPSBwb2ludFBvc2l0aW9uLnggKyBoYWxmVGV4dFdpZHRoO1xuXHRcdFx0XHRcdFx0ZnVydGhlc3RSaWdodEluZGV4ID0gaTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHBvaW50UG9zaXRpb24ueCAtIGhhbGZUZXh0V2lkdGggPCBmdXJ0aGVzdExlZnQpIHtcblx0XHRcdFx0XHRcdGZ1cnRoZXN0TGVmdCA9IHBvaW50UG9zaXRpb24ueCAtIGhhbGZUZXh0V2lkdGg7XG5cdFx0XHRcdFx0XHRmdXJ0aGVzdExlZnRJbmRleCA9IGk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKGkgPCB0aGlzLnZhbHVlc0NvdW50LzIpIHtcblx0XHRcdFx0XHQvLyBMZXNzIHRoYW4gaGFsZiB0aGUgdmFsdWVzIG1lYW5zIHdlJ2xsIGxlZnQgYWxpZ24gdGhlIHRleHRcblx0XHRcdFx0XHRpZiAocG9pbnRQb3NpdGlvbi54ICsgdGV4dFdpZHRoID4gZnVydGhlc3RSaWdodCkge1xuXHRcdFx0XHRcdFx0ZnVydGhlc3RSaWdodCA9IHBvaW50UG9zaXRpb24ueCArIHRleHRXaWR0aDtcblx0XHRcdFx0XHRcdGZ1cnRoZXN0UmlnaHRJbmRleCA9IGk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKGkgPiB0aGlzLnZhbHVlc0NvdW50LzIpe1xuXHRcdFx0XHRcdC8vIE1vcmUgdGhhbiBoYWxmIHRoZSB2YWx1ZXMgbWVhbnMgd2UnbGwgcmlnaHQgYWxpZ24gdGhlIHRleHRcblx0XHRcdFx0XHRpZiAocG9pbnRQb3NpdGlvbi54IC0gdGV4dFdpZHRoIDwgZnVydGhlc3RMZWZ0KSB7XG5cdFx0XHRcdFx0XHRmdXJ0aGVzdExlZnQgPSBwb2ludFBvc2l0aW9uLnggLSB0ZXh0V2lkdGg7XG5cdFx0XHRcdFx0XHRmdXJ0aGVzdExlZnRJbmRleCA9IGk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHhQcm90cnVzaW9uTGVmdCA9IGZ1cnRoZXN0TGVmdDtcblxuXHRcdFx0eFByb3RydXNpb25SaWdodCA9IE1hdGguY2VpbChmdXJ0aGVzdFJpZ2h0IC0gdGhpcy53aWR0aCk7XG5cblx0XHRcdGZ1cnRoZXN0UmlnaHRBbmdsZSA9IHRoaXMuZ2V0SW5kZXhBbmdsZShmdXJ0aGVzdFJpZ2h0SW5kZXgpO1xuXG5cdFx0XHRmdXJ0aGVzdExlZnRBbmdsZSA9IHRoaXMuZ2V0SW5kZXhBbmdsZShmdXJ0aGVzdExlZnRJbmRleCk7XG5cblx0XHRcdHJhZGl1c1JlZHVjdGlvblJpZ2h0ID0geFByb3RydXNpb25SaWdodCAvIE1hdGguc2luKGZ1cnRoZXN0UmlnaHRBbmdsZSArIE1hdGguUEkvMik7XG5cblx0XHRcdHJhZGl1c1JlZHVjdGlvbkxlZnQgPSB4UHJvdHJ1c2lvbkxlZnQgLyBNYXRoLnNpbihmdXJ0aGVzdExlZnRBbmdsZSArIE1hdGguUEkvMik7XG5cblx0XHRcdC8vIEVuc3VyZSB3ZSBhY3R1YWxseSBuZWVkIHRvIHJlZHVjZSB0aGUgc2l6ZSBvZiB0aGUgY2hhcnRcblx0XHRcdHJhZGl1c1JlZHVjdGlvblJpZ2h0ID0gKGlzTnVtYmVyKHJhZGl1c1JlZHVjdGlvblJpZ2h0KSkgPyByYWRpdXNSZWR1Y3Rpb25SaWdodCA6IDA7XG5cdFx0XHRyYWRpdXNSZWR1Y3Rpb25MZWZ0ID0gKGlzTnVtYmVyKHJhZGl1c1JlZHVjdGlvbkxlZnQpKSA/IHJhZGl1c1JlZHVjdGlvbkxlZnQgOiAwO1xuXG5cdFx0XHR0aGlzLmRyYXdpbmdBcmVhID0gbGFyZ2VzdFBvc3NpYmxlUmFkaXVzIC0gKHJhZGl1c1JlZHVjdGlvbkxlZnQgKyByYWRpdXNSZWR1Y3Rpb25SaWdodCkvMjtcblxuXHRcdFx0Ly90aGlzLmRyYXdpbmdBcmVhID0gbWluKFttYXhXaWR0aFJhZGl1cywgKHRoaXMuaGVpZ2h0IC0gKDIgKiAodGhpcy5wb2ludExhYmVsRm9udFNpemUgKyA1KSkpLzJdKVxuXHRcdFx0dGhpcy5zZXRDZW50ZXJQb2ludChyYWRpdXNSZWR1Y3Rpb25MZWZ0LCByYWRpdXNSZWR1Y3Rpb25SaWdodCk7XG5cblx0XHR9LFxuXHRcdHNldENlbnRlclBvaW50OiBmdW5jdGlvbihsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQpe1xuXG5cdFx0XHR2YXIgbWF4UmlnaHQgPSB0aGlzLndpZHRoIC0gcmlnaHRNb3ZlbWVudCAtIHRoaXMuZHJhd2luZ0FyZWEsXG5cdFx0XHRcdG1heExlZnQgPSBsZWZ0TW92ZW1lbnQgKyB0aGlzLmRyYXdpbmdBcmVhO1xuXG5cdFx0XHR0aGlzLnhDZW50ZXIgPSAobWF4TGVmdCArIG1heFJpZ2h0KS8yO1xuXHRcdFx0Ly8gQWx3YXlzIHZlcnRpY2FsbHkgaW4gdGhlIGNlbnRyZSBhcyB0aGUgdGV4dCBoZWlnaHQgZG9lc24ndCBjaGFuZ2Vcblx0XHRcdHRoaXMueUNlbnRlciA9ICh0aGlzLmhlaWdodC8yKTtcblx0XHR9LFxuXG5cdFx0Z2V0SW5kZXhBbmdsZSA6IGZ1bmN0aW9uKGluZGV4KXtcblx0XHRcdHZhciBhbmdsZU11bHRpcGxpZXIgPSAoTWF0aC5QSSAqIDIpIC8gdGhpcy52YWx1ZXNDb3VudDtcblx0XHRcdC8vIFN0YXJ0IGZyb20gdGhlIHRvcCBpbnN0ZWFkIG9mIHJpZ2h0LCBzbyByZW1vdmUgYSBxdWFydGVyIG9mIHRoZSBjaXJjbGVcblxuXHRcdFx0cmV0dXJuIGluZGV4ICogYW5nbGVNdWx0aXBsaWVyIC0gKE1hdGguUEkvMik7XG5cdFx0fSxcblx0XHRnZXRQb2ludFBvc2l0aW9uIDogZnVuY3Rpb24oaW5kZXgsIGRpc3RhbmNlRnJvbUNlbnRlcil7XG5cdFx0XHR2YXIgdGhpc0FuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKGluZGV4KTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHggOiAoTWF0aC5jb3ModGhpc0FuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlcikgKyB0aGlzLnhDZW50ZXIsXG5cdFx0XHRcdHkgOiAoTWF0aC5zaW4odGhpc0FuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlcikgKyB0aGlzLnlDZW50ZXJcblx0XHRcdH07XG5cdFx0fSxcblx0XHRkcmF3OiBmdW5jdGlvbigpe1xuXHRcdFx0aWYgKHRoaXMuZGlzcGxheSl7XG5cdFx0XHRcdHZhciBjdHggPSB0aGlzLmN0eDtcblx0XHRcdFx0ZWFjaCh0aGlzLnlMYWJlbHMsIGZ1bmN0aW9uKGxhYmVsLCBpbmRleCl7XG5cdFx0XHRcdFx0Ly8gRG9uJ3QgZHJhdyBhIGNlbnRyZSB2YWx1ZVxuXHRcdFx0XHRcdGlmIChpbmRleCA+IDApe1xuXHRcdFx0XHRcdFx0dmFyIHlDZW50ZXJPZmZzZXQgPSBpbmRleCAqICh0aGlzLmRyYXdpbmdBcmVhL3RoaXMuc3RlcHMpLFxuXHRcdFx0XHRcdFx0XHR5SGVpZ2h0ID0gdGhpcy55Q2VudGVyIC0geUNlbnRlck9mZnNldCxcblx0XHRcdFx0XHRcdFx0cG9pbnRQb3NpdGlvbjtcblxuXHRcdFx0XHRcdFx0Ly8gRHJhdyBjaXJjdWxhciBsaW5lcyBhcm91bmQgdGhlIHNjYWxlXG5cdFx0XHRcdFx0XHRpZiAodGhpcy5saW5lV2lkdGggPiAwKXtcblx0XHRcdFx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5saW5lQ29sb3I7XG5cdFx0XHRcdFx0XHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLmxpbmVXaWR0aDtcblxuXHRcdFx0XHRcdFx0XHRpZih0aGlzLmxpbmVBcmMpe1xuXHRcdFx0XHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRcdFx0XHRjdHguYXJjKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyLCB5Q2VudGVyT2Zmc2V0LCAwLCBNYXRoLlBJKjIpO1xuXHRcdFx0XHRcdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0XHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZXtcblx0XHRcdFx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0XHRcdFx0Zm9yICh2YXIgaT0wO2k8dGhpcy52YWx1ZXNDb3VudDtpKyspXG5cdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0cG9pbnRQb3NpdGlvbiA9IHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpLCB0aGlzLmNhbGN1bGF0ZUNlbnRlck9mZnNldCh0aGlzLm1pbiArIChpbmRleCAqIHRoaXMuc3RlcFZhbHVlKSkpO1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGkgPT09IDApe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjdHgubW92ZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGN0eC5saW5lVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRcdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZih0aGlzLnNob3dMYWJlbHMpe1xuXHRcdFx0XHRcdFx0XHRjdHguZm9udCA9IGZvbnRTdHJpbmcodGhpcy5mb250U2l6ZSx0aGlzLmZvbnRTdHlsZSx0aGlzLmZvbnRGYW1pbHkpO1xuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5zaG93TGFiZWxCYWNrZHJvcCl7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGxhYmVsV2lkdGggPSBjdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuXHRcdFx0XHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmJhY2tkcm9wQ29sb3I7XG5cdFx0XHRcdFx0XHRcdFx0Y3R4LmZpbGxSZWN0KFxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy54Q2VudGVyIC0gbGFiZWxXaWR0aC8yIC0gdGhpcy5iYWNrZHJvcFBhZGRpbmdYLFxuXHRcdFx0XHRcdFx0XHRcdFx0eUhlaWdodCAtIHRoaXMuZm9udFNpemUvMiAtIHRoaXMuYmFja2Ryb3BQYWRkaW5nWSxcblx0XHRcdFx0XHRcdFx0XHRcdGxhYmVsV2lkdGggKyB0aGlzLmJhY2tkcm9wUGFkZGluZ1gqMixcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuZm9udFNpemUgKyB0aGlzLmJhY2tkcm9wUGFkZGluZ1kqMlxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdFx0XHRcdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIjtcblx0XHRcdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMuZm9udENvbG9yO1xuXHRcdFx0XHRcdFx0XHRjdHguZmlsbFRleHQobGFiZWwsIHRoaXMueENlbnRlciwgeUhlaWdodCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCB0aGlzKTtcblxuXHRcdFx0XHRpZiAoIXRoaXMubGluZUFyYyl7XG5cdFx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMuYW5nbGVMaW5lV2lkdGg7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5hbmdsZUxpbmVDb2xvcjtcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gdGhpcy52YWx1ZXNDb3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5hbmdsZUxpbmVXaWR0aCA+IDApe1xuXHRcdFx0XHRcdFx0XHR2YXIgb3V0ZXJQb3NpdGlvbiA9IHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpLCB0aGlzLmNhbGN1bGF0ZUNlbnRlck9mZnNldCh0aGlzLm1heCkpO1xuXHRcdFx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0XHRcdGN0eC5tb3ZlVG8odGhpcy54Q2VudGVyLCB0aGlzLnlDZW50ZXIpO1xuXHRcdFx0XHRcdFx0XHRjdHgubGluZVRvKG91dGVyUG9zaXRpb24ueCwgb3V0ZXJQb3NpdGlvbi55KTtcblx0XHRcdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvLyBFeHRyYSAzcHggb3V0IGZvciBzb21lIGxhYmVsIHNwYWNpbmdcblx0XHRcdFx0XHRcdHZhciBwb2ludExhYmVsUG9zaXRpb24gPSB0aGlzLmdldFBvaW50UG9zaXRpb24oaSwgdGhpcy5jYWxjdWxhdGVDZW50ZXJPZmZzZXQodGhpcy5tYXgpICsgNSk7XG5cdFx0XHRcdFx0XHRjdHguZm9udCA9IGZvbnRTdHJpbmcodGhpcy5wb2ludExhYmVsRm9udFNpemUsdGhpcy5wb2ludExhYmVsRm9udFN0eWxlLHRoaXMucG9pbnRMYWJlbEZvbnRGYW1pbHkpO1xuXHRcdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMucG9pbnRMYWJlbEZvbnRDb2xvcjtcblxuXHRcdFx0XHRcdFx0dmFyIGxhYmVsc0NvdW50ID0gdGhpcy5sYWJlbHMubGVuZ3RoLFxuXHRcdFx0XHRcdFx0XHRoYWxmTGFiZWxzQ291bnQgPSB0aGlzLmxhYmVscy5sZW5ndGgvMixcblx0XHRcdFx0XHRcdFx0cXVhcnRlckxhYmVsc0NvdW50ID0gaGFsZkxhYmVsc0NvdW50LzIsXG5cdFx0XHRcdFx0XHRcdHVwcGVySGFsZiA9IChpIDwgcXVhcnRlckxhYmVsc0NvdW50IHx8IGkgPiBsYWJlbHNDb3VudCAtIHF1YXJ0ZXJMYWJlbHNDb3VudCksXG5cdFx0XHRcdFx0XHRcdGV4YWN0UXVhcnRlciA9IChpID09PSBxdWFydGVyTGFiZWxzQ291bnQgfHwgaSA9PT0gbGFiZWxzQ291bnQgLSBxdWFydGVyTGFiZWxzQ291bnQpO1xuXHRcdFx0XHRcdFx0aWYgKGkgPT09IDApe1xuXHRcdFx0XHRcdFx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoaSA9PT0gaGFsZkxhYmVsc0NvdW50KXtcblx0XHRcdFx0XHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChpIDwgaGFsZkxhYmVsc0NvdW50KXtcblx0XHRcdFx0XHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdsZWZ0Jztcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGN0eC50ZXh0QWxpZ24gPSAncmlnaHQnO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgdGV4dCBiYXNlbGluZSBiYXNlZCBvbiBvdXRlciBwb3NpdGlvbmluZ1xuXHRcdFx0XHRcdFx0aWYgKGV4YWN0UXVhcnRlcil7XG5cdFx0XHRcdFx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodXBwZXJIYWxmKXtcblx0XHRcdFx0XHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdib3R0b20nO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjdHguZmlsbFRleHQodGhpcy5sYWJlbHNbaV0sIHBvaW50TGFiZWxQb3NpdGlvbi54LCBwb2ludExhYmVsUG9zaXRpb24ueSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBBdHRhY2ggZ2xvYmFsIGV2ZW50IHRvIHJlc2l6ZSBlYWNoIGNoYXJ0IGluc3RhbmNlIHdoZW4gdGhlIGJyb3dzZXIgcmVzaXplc1xuXHRoZWxwZXJzLmFkZEV2ZW50KHdpbmRvdywgXCJyZXNpemVcIiwgKGZ1bmN0aW9uKCl7XG5cdFx0Ly8gQmFzaWMgZGVib3VuY2Ugb2YgcmVzaXplIGZ1bmN0aW9uIHNvIGl0IGRvZXNuJ3QgaHVydCBwZXJmb3JtYW5jZSB3aGVuIHJlc2l6aW5nIGJyb3dzZXIuXG5cdFx0dmFyIHRpbWVvdXQ7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCl7XG5cdFx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0XHR0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRlYWNoKENoYXJ0Lmluc3RhbmNlcyxmdW5jdGlvbihpbnN0YW5jZSl7XG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHJlc3BvbnNpdmUgZmxhZyBpcyBzZXQgaW4gdGhlIGNoYXJ0IGluc3RhbmNlIGNvbmZpZ1xuXHRcdFx0XHRcdC8vIENhc2NhZGUgdGhlIHJlc2l6ZSBldmVudCBkb3duIHRvIHRoZSBjaGFydC5cblx0XHRcdFx0XHRpZiAoaW5zdGFuY2Uub3B0aW9ucy5yZXNwb25zaXZlKXtcblx0XHRcdFx0XHRcdGluc3RhbmNlLnJlc2l6ZShpbnN0YW5jZS5yZW5kZXIsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9LCA1MCk7XG5cdFx0fTtcblx0fSkoKSk7XG5cblxuXHRpZiAoYW1kKSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCl7XG5cdFx0XHRyZXR1cm4gQ2hhcnQ7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IENoYXJ0O1xuXHR9XG5cblx0cm9vdC5DaGFydCA9IENoYXJ0O1xuXG5cdENoYXJ0Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpe1xuXHRcdHJvb3QuQ2hhcnQgPSBwcmV2aW91cztcblx0XHRyZXR1cm4gQ2hhcnQ7XG5cdH07XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpe1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgcm9vdCA9IHRoaXMsXG5cdFx0Q2hhcnQgPSByb290LkNoYXJ0LFxuXHRcdGhlbHBlcnMgPSBDaGFydC5oZWxwZXJzO1xuXG5cblx0dmFyIGRlZmF1bHRDb25maWcgPSB7XG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0aGUgc2NhbGUgc2hvdWxkIHN0YXJ0IGF0IHplcm8sIG9yIGFuIG9yZGVyIG9mIG1hZ25pdHVkZSBkb3duIGZyb20gdGhlIGxvd2VzdCB2YWx1ZVxuXHRcdHNjYWxlQmVnaW5BdFplcm8gOiB0cnVlLFxuXG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciBncmlkIGxpbmVzIGFyZSBzaG93biBhY3Jvc3MgdGhlIGNoYXJ0XG5cdFx0c2NhbGVTaG93R3JpZExpbmVzIDogdHJ1ZSxcblxuXHRcdC8vU3RyaW5nIC0gQ29sb3VyIG9mIHRoZSBncmlkIGxpbmVzXG5cdFx0c2NhbGVHcmlkTGluZUNvbG9yIDogXCJyZ2JhKDAsMCwwLC4wNSlcIixcblxuXHRcdC8vTnVtYmVyIC0gV2lkdGggb2YgdGhlIGdyaWQgbGluZXNcblx0XHRzY2FsZUdyaWRMaW5lV2lkdGggOiAxLFxuXG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0byBzaG93IGhvcml6b250YWwgbGluZXMgKGV4Y2VwdCBYIGF4aXMpXG5cdFx0c2NhbGVTaG93SG9yaXpvbnRhbExpbmVzOiB0cnVlLFxuXG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0byBzaG93IHZlcnRpY2FsIGxpbmVzIChleGNlcHQgWSBheGlzKVxuXHRcdHNjYWxlU2hvd1ZlcnRpY2FsTGluZXM6IHRydWUsXG5cblx0XHQvL0Jvb2xlYW4gLSBJZiB0aGVyZSBpcyBhIHN0cm9rZSBvbiBlYWNoIGJhclxuXHRcdGJhclNob3dTdHJva2UgOiB0cnVlLFxuXG5cdFx0Ly9OdW1iZXIgLSBQaXhlbCB3aWR0aCBvZiB0aGUgYmFyIHN0cm9rZVxuXHRcdGJhclN0cm9rZVdpZHRoIDogMixcblxuXHRcdC8vTnVtYmVyIC0gU3BhY2luZyBiZXR3ZWVuIGVhY2ggb2YgdGhlIFggdmFsdWUgc2V0c1xuXHRcdGJhclZhbHVlU3BhY2luZyA6IDUsXG5cblx0XHQvL051bWJlciAtIFNwYWNpbmcgYmV0d2VlbiBkYXRhIHNldHMgd2l0aGluIFggdmFsdWVzXG5cdFx0YmFyRGF0YXNldFNwYWNpbmcgOiAxLFxuXG5cdFx0Ly9TdHJpbmcgLSBBIGxlZ2VuZCB0ZW1wbGF0ZVxuXHRcdGxlZ2VuZFRlbXBsYXRlIDogXCI8dWwgY2xhc3M9XFxcIjwlPW5hbWUudG9Mb3dlckNhc2UoKSU+LWxlZ2VuZFxcXCI+PCUgZm9yICh2YXIgaT0wOyBpPGRhdGFzZXRzLmxlbmd0aDsgaSsrKXslPjxsaT48c3BhbiBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjo8JT1kYXRhc2V0c1tpXS5maWxsQ29sb3IlPlxcXCI+PC9zcGFuPjwlaWYoZGF0YXNldHNbaV0ubGFiZWwpeyU+PCU9ZGF0YXNldHNbaV0ubGFiZWwlPjwlfSU+PC9saT48JX0lPjwvdWw+XCJcblxuXHR9O1xuXG5cblx0Q2hhcnQuVHlwZS5leHRlbmQoe1xuXHRcdG5hbWU6IFwiQmFyXCIsXG5cdFx0ZGVmYXVsdHMgOiBkZWZhdWx0Q29uZmlnLFxuXHRcdGluaXRpYWxpemU6ICBmdW5jdGlvbihkYXRhKXtcblxuXHRcdFx0Ly9FeHBvc2Ugb3B0aW9ucyBhcyBhIHNjb3BlIHZhcmlhYmxlIGhlcmUgc28gd2UgY2FuIGFjY2VzcyBpdCBpbiB0aGUgU2NhbGVDbGFzc1xuXHRcdFx0dmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cblx0XHRcdHRoaXMuU2NhbGVDbGFzcyA9IENoYXJ0LlNjYWxlLmV4dGVuZCh7XG5cdFx0XHRcdG9mZnNldEdyaWRMaW5lcyA6IHRydWUsXG5cdFx0XHRcdGNhbGN1bGF0ZUJhclggOiBmdW5jdGlvbihkYXRhc2V0Q291bnQsIGRhdGFzZXRJbmRleCwgYmFySW5kZXgpe1xuXHRcdFx0XHRcdC8vUmV1c2FibGUgbWV0aG9kIGZvciBjYWxjdWxhdGluZyB0aGUgeFBvc2l0aW9uIG9mIGEgZ2l2ZW4gYmFyIGJhc2VkIG9uIGRhdGFzZXRJbmRleCAmIHdpZHRoIG9mIHRoZSBiYXJcblx0XHRcdFx0XHR2YXIgeFdpZHRoID0gdGhpcy5jYWxjdWxhdGVCYXNlV2lkdGgoKSxcblx0XHRcdFx0XHRcdHhBYnNvbHV0ZSA9IHRoaXMuY2FsY3VsYXRlWChiYXJJbmRleCkgLSAoeFdpZHRoLzIpLFxuXHRcdFx0XHRcdFx0YmFyV2lkdGggPSB0aGlzLmNhbGN1bGF0ZUJhcldpZHRoKGRhdGFzZXRDb3VudCk7XG5cblx0XHRcdFx0XHRyZXR1cm4geEFic29sdXRlICsgKGJhcldpZHRoICogZGF0YXNldEluZGV4KSArIChkYXRhc2V0SW5kZXggKiBvcHRpb25zLmJhckRhdGFzZXRTcGFjaW5nKSArIGJhcldpZHRoLzI7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNhbGN1bGF0ZUJhc2VXaWR0aCA6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0cmV0dXJuICh0aGlzLmNhbGN1bGF0ZVgoMSkgLSB0aGlzLmNhbGN1bGF0ZVgoMCkpIC0gKDIqb3B0aW9ucy5iYXJWYWx1ZVNwYWNpbmcpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRjYWxjdWxhdGVCYXJXaWR0aCA6IGZ1bmN0aW9uKGRhdGFzZXRDb3VudCl7XG5cdFx0XHRcdFx0Ly9UaGUgcGFkZGluZyBiZXR3ZWVuIGRhdGFzZXRzIGlzIHRvIHRoZSByaWdodCBvZiBlYWNoIGJhciwgcHJvdmlkaW5nIHRoYXQgdGhlcmUgYXJlIG1vcmUgdGhhbiAxIGRhdGFzZXRcblx0XHRcdFx0XHR2YXIgYmFzZVdpZHRoID0gdGhpcy5jYWxjdWxhdGVCYXNlV2lkdGgoKSAtICgoZGF0YXNldENvdW50IC0gMSkgKiBvcHRpb25zLmJhckRhdGFzZXRTcGFjaW5nKTtcblxuXHRcdFx0XHRcdHJldHVybiAoYmFzZVdpZHRoIC8gZGF0YXNldENvdW50KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuZGF0YXNldHMgPSBbXTtcblxuXHRcdFx0Ly9TZXQgdXAgdG9vbHRpcCBldmVudHMgb24gdGhlIGNoYXJ0XG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLnNob3dUb29sdGlwcyl7XG5cdFx0XHRcdGhlbHBlcnMuYmluZEV2ZW50cyh0aGlzLCB0aGlzLm9wdGlvbnMudG9vbHRpcEV2ZW50cywgZnVuY3Rpb24oZXZ0KXtcblx0XHRcdFx0XHR2YXIgYWN0aXZlQmFycyA9IChldnQudHlwZSAhPT0gJ21vdXNlb3V0JykgPyB0aGlzLmdldEJhcnNBdEV2ZW50KGV2dCkgOiBbXTtcblxuXHRcdFx0XHRcdHRoaXMuZWFjaEJhcnMoZnVuY3Rpb24oYmFyKXtcblx0XHRcdFx0XHRcdGJhci5yZXN0b3JlKFsnZmlsbENvbG9yJywgJ3N0cm9rZUNvbG9yJ10pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGhlbHBlcnMuZWFjaChhY3RpdmVCYXJzLCBmdW5jdGlvbihhY3RpdmVCYXIpe1xuXHRcdFx0XHRcdFx0YWN0aXZlQmFyLmZpbGxDb2xvciA9IGFjdGl2ZUJhci5oaWdobGlnaHRGaWxsO1xuXHRcdFx0XHRcdFx0YWN0aXZlQmFyLnN0cm9rZUNvbG9yID0gYWN0aXZlQmFyLmhpZ2hsaWdodFN0cm9rZTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR0aGlzLnNob3dUb29sdGlwKGFjdGl2ZUJhcnMpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly9EZWNsYXJlIHRoZSBleHRlbnNpb24gb2YgdGhlIGRlZmF1bHQgcG9pbnQsIHRvIGNhdGVyIGZvciB0aGUgb3B0aW9ucyBwYXNzZWQgaW4gdG8gdGhlIGNvbnN0cnVjdG9yXG5cdFx0XHR0aGlzLkJhckNsYXNzID0gQ2hhcnQuUmVjdGFuZ2xlLmV4dGVuZCh7XG5cdFx0XHRcdHN0cm9rZVdpZHRoIDogdGhpcy5vcHRpb25zLmJhclN0cm9rZVdpZHRoLFxuXHRcdFx0XHRzaG93U3Ryb2tlIDogdGhpcy5vcHRpb25zLmJhclNob3dTdHJva2UsXG5cdFx0XHRcdGN0eCA6IHRoaXMuY2hhcnQuY3R4XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly9JdGVyYXRlIHRocm91Z2ggZWFjaCBvZiB0aGUgZGF0YXNldHMsIGFuZCBidWlsZCB0aGlzIGludG8gYSBwcm9wZXJ0eSBvZiB0aGUgY2hhcnRcblx0XHRcdGhlbHBlcnMuZWFjaChkYXRhLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQsZGF0YXNldEluZGV4KXtcblxuXHRcdFx0XHR2YXIgZGF0YXNldE9iamVjdCA9IHtcblx0XHRcdFx0XHRsYWJlbCA6IGRhdGFzZXQubGFiZWwgfHwgbnVsbCxcblx0XHRcdFx0XHRmaWxsQ29sb3IgOiBkYXRhc2V0LmZpbGxDb2xvcixcblx0XHRcdFx0XHRzdHJva2VDb2xvciA6IGRhdGFzZXQuc3Ryb2tlQ29sb3IsXG5cdFx0XHRcdFx0YmFycyA6IFtdXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dGhpcy5kYXRhc2V0cy5wdXNoKGRhdGFzZXRPYmplY3QpO1xuXG5cdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LmRhdGEsZnVuY3Rpb24oZGF0YVBvaW50LGluZGV4KXtcblx0XHRcdFx0XHQvL0FkZCBhIG5ldyBwb2ludCBmb3IgZWFjaCBwaWVjZSBvZiBkYXRhLCBwYXNzaW5nIGFueSByZXF1aXJlZCBkYXRhIHRvIGRyYXcuXG5cdFx0XHRcdFx0ZGF0YXNldE9iamVjdC5iYXJzLnB1c2gobmV3IHRoaXMuQmFyQ2xhc3Moe1xuXHRcdFx0XHRcdFx0dmFsdWUgOiBkYXRhUG9pbnQsXG5cdFx0XHRcdFx0XHRsYWJlbCA6IGRhdGEubGFiZWxzW2luZGV4XSxcblx0XHRcdFx0XHRcdGRhdGFzZXRMYWJlbDogZGF0YXNldC5sYWJlbCxcblx0XHRcdFx0XHRcdHN0cm9rZUNvbG9yIDogZGF0YXNldC5zdHJva2VDb2xvcixcblx0XHRcdFx0XHRcdGZpbGxDb2xvciA6IGRhdGFzZXQuZmlsbENvbG9yLFxuXHRcdFx0XHRcdFx0aGlnaGxpZ2h0RmlsbCA6IGRhdGFzZXQuaGlnaGxpZ2h0RmlsbCB8fCBkYXRhc2V0LmZpbGxDb2xvcixcblx0XHRcdFx0XHRcdGhpZ2hsaWdodFN0cm9rZSA6IGRhdGFzZXQuaGlnaGxpZ2h0U3Ryb2tlIHx8IGRhdGFzZXQuc3Ryb2tlQ29sb3Jcblx0XHRcdFx0XHR9KSk7XG5cdFx0XHRcdH0sdGhpcyk7XG5cblx0XHRcdH0sdGhpcyk7XG5cblx0XHRcdHRoaXMuYnVpbGRTY2FsZShkYXRhLmxhYmVscyk7XG5cblx0XHRcdHRoaXMuQmFyQ2xhc3MucHJvdG90eXBlLmJhc2UgPSB0aGlzLnNjYWxlLmVuZFBvaW50O1xuXG5cdFx0XHR0aGlzLmVhY2hCYXJzKGZ1bmN0aW9uKGJhciwgaW5kZXgsIGRhdGFzZXRJbmRleCl7XG5cdFx0XHRcdGhlbHBlcnMuZXh0ZW5kKGJhciwge1xuXHRcdFx0XHRcdHdpZHRoIDogdGhpcy5zY2FsZS5jYWxjdWxhdGVCYXJXaWR0aCh0aGlzLmRhdGFzZXRzLmxlbmd0aCksXG5cdFx0XHRcdFx0eDogdGhpcy5zY2FsZS5jYWxjdWxhdGVCYXJYKHRoaXMuZGF0YXNldHMubGVuZ3RoLCBkYXRhc2V0SW5kZXgsIGluZGV4KSxcblx0XHRcdFx0XHR5OiB0aGlzLnNjYWxlLmVuZFBvaW50XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRiYXIuc2F2ZSgpO1xuXHRcdFx0fSwgdGhpcyk7XG5cblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cdFx0fSxcblx0XHR1cGRhdGUgOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy5zY2FsZS51cGRhdGUoKTtcblx0XHRcdC8vIFJlc2V0IGFueSBoaWdobGlnaHQgY29sb3VycyBiZWZvcmUgdXBkYXRpbmcuXG5cdFx0XHRoZWxwZXJzLmVhY2godGhpcy5hY3RpdmVFbGVtZW50cywgZnVuY3Rpb24oYWN0aXZlRWxlbWVudCl7XG5cdFx0XHRcdGFjdGl2ZUVsZW1lbnQucmVzdG9yZShbJ2ZpbGxDb2xvcicsICdzdHJva2VDb2xvciddKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmVhY2hCYXJzKGZ1bmN0aW9uKGJhcil7XG5cdFx0XHRcdGJhci5zYXZlKCk7XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cdFx0fSxcblx0XHRlYWNoQmFycyA6IGZ1bmN0aW9uKGNhbGxiYWNrKXtcblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCl7XG5cdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LmJhcnMsIGNhbGxiYWNrLCB0aGlzLCBkYXRhc2V0SW5kZXgpO1xuXHRcdFx0fSx0aGlzKTtcblx0XHR9LFxuXHRcdGdldEJhcnNBdEV2ZW50IDogZnVuY3Rpb24oZSl7XG5cdFx0XHR2YXIgYmFyc0FycmF5ID0gW10sXG5cdFx0XHRcdGV2ZW50UG9zaXRpb24gPSBoZWxwZXJzLmdldFJlbGF0aXZlUG9zaXRpb24oZSksXG5cdFx0XHRcdGRhdGFzZXRJdGVyYXRvciA9IGZ1bmN0aW9uKGRhdGFzZXQpe1xuXHRcdFx0XHRcdGJhcnNBcnJheS5wdXNoKGRhdGFzZXQuYmFyc1tiYXJJbmRleF0pO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRiYXJJbmRleDtcblxuXHRcdFx0Zm9yICh2YXIgZGF0YXNldEluZGV4ID0gMDsgZGF0YXNldEluZGV4IDwgdGhpcy5kYXRhc2V0cy5sZW5ndGg7IGRhdGFzZXRJbmRleCsrKSB7XG5cdFx0XHRcdGZvciAoYmFySW5kZXggPSAwOyBiYXJJbmRleCA8IHRoaXMuZGF0YXNldHNbZGF0YXNldEluZGV4XS5iYXJzLmxlbmd0aDsgYmFySW5kZXgrKykge1xuXHRcdFx0XHRcdGlmICh0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uYmFyc1tiYXJJbmRleF0uaW5SYW5nZShldmVudFBvc2l0aW9uLngsZXZlbnRQb3NpdGlvbi55KSl7XG5cdFx0XHRcdFx0XHRoZWxwZXJzLmVhY2godGhpcy5kYXRhc2V0cywgZGF0YXNldEl0ZXJhdG9yKTtcblx0XHRcdFx0XHRcdHJldHVybiBiYXJzQXJyYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBiYXJzQXJyYXk7XG5cdFx0fSxcblx0XHRidWlsZFNjYWxlIDogZnVuY3Rpb24obGFiZWxzKXtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0dmFyIGRhdGFUb3RhbCA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblx0XHRcdFx0c2VsZi5lYWNoQmFycyhmdW5jdGlvbihiYXIpe1xuXHRcdFx0XHRcdHZhbHVlcy5wdXNoKGJhci52YWx1ZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fTtcblxuXHRcdFx0dmFyIHNjYWxlT3B0aW9ucyA9IHtcblx0XHRcdFx0dGVtcGxhdGVTdHJpbmcgOiB0aGlzLm9wdGlvbnMuc2NhbGVMYWJlbCxcblx0XHRcdFx0aGVpZ2h0IDogdGhpcy5jaGFydC5oZWlnaHQsXG5cdFx0XHRcdHdpZHRoIDogdGhpcy5jaGFydC53aWR0aCxcblx0XHRcdFx0Y3R4IDogdGhpcy5jaGFydC5jdHgsXG5cdFx0XHRcdHRleHRDb2xvciA6IHRoaXMub3B0aW9ucy5zY2FsZUZvbnRDb2xvcixcblx0XHRcdFx0Zm9udFNpemUgOiB0aGlzLm9wdGlvbnMuc2NhbGVGb250U2l6ZSxcblx0XHRcdFx0Zm9udFN0eWxlIDogdGhpcy5vcHRpb25zLnNjYWxlRm9udFN0eWxlLFxuXHRcdFx0XHRmb250RmFtaWx5IDogdGhpcy5vcHRpb25zLnNjYWxlRm9udEZhbWlseSxcblx0XHRcdFx0dmFsdWVzQ291bnQgOiBsYWJlbHMubGVuZ3RoLFxuXHRcdFx0XHRiZWdpbkF0WmVybyA6IHRoaXMub3B0aW9ucy5zY2FsZUJlZ2luQXRaZXJvLFxuXHRcdFx0XHRpbnRlZ2Vyc09ubHkgOiB0aGlzLm9wdGlvbnMuc2NhbGVJbnRlZ2Vyc09ubHksXG5cdFx0XHRcdGNhbGN1bGF0ZVlSYW5nZTogZnVuY3Rpb24oY3VycmVudEhlaWdodCl7XG5cdFx0XHRcdFx0dmFyIHVwZGF0ZWRSYW5nZXMgPSBoZWxwZXJzLmNhbGN1bGF0ZVNjYWxlUmFuZ2UoXG5cdFx0XHRcdFx0XHRkYXRhVG90YWwoKSxcblx0XHRcdFx0XHRcdGN1cnJlbnRIZWlnaHQsXG5cdFx0XHRcdFx0XHR0aGlzLmZvbnRTaXplLFxuXHRcdFx0XHRcdFx0dGhpcy5iZWdpbkF0WmVybyxcblx0XHRcdFx0XHRcdHRoaXMuaW50ZWdlcnNPbmx5XG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRoZWxwZXJzLmV4dGVuZCh0aGlzLCB1cGRhdGVkUmFuZ2VzKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0eExhYmVscyA6IGxhYmVscyxcblx0XHRcdFx0Zm9udCA6IGhlbHBlcnMuZm9udFN0cmluZyh0aGlzLm9wdGlvbnMuc2NhbGVGb250U2l6ZSwgdGhpcy5vcHRpb25zLnNjYWxlRm9udFN0eWxlLCB0aGlzLm9wdGlvbnMuc2NhbGVGb250RmFtaWx5KSxcblx0XHRcdFx0bGluZVdpZHRoIDogdGhpcy5vcHRpb25zLnNjYWxlTGluZVdpZHRoLFxuXHRcdFx0XHRsaW5lQ29sb3IgOiB0aGlzLm9wdGlvbnMuc2NhbGVMaW5lQ29sb3IsXG5cdFx0XHRcdHNob3dIb3Jpem9udGFsTGluZXMgOiB0aGlzLm9wdGlvbnMuc2NhbGVTaG93SG9yaXpvbnRhbExpbmVzLFxuXHRcdFx0XHRzaG93VmVydGljYWxMaW5lcyA6IHRoaXMub3B0aW9ucy5zY2FsZVNob3dWZXJ0aWNhbExpbmVzLFxuXHRcdFx0XHRncmlkTGluZVdpZHRoIDogKHRoaXMub3B0aW9ucy5zY2FsZVNob3dHcmlkTGluZXMpID8gdGhpcy5vcHRpb25zLnNjYWxlR3JpZExpbmVXaWR0aCA6IDAsXG5cdFx0XHRcdGdyaWRMaW5lQ29sb3IgOiAodGhpcy5vcHRpb25zLnNjYWxlU2hvd0dyaWRMaW5lcykgPyB0aGlzLm9wdGlvbnMuc2NhbGVHcmlkTGluZUNvbG9yIDogXCJyZ2JhKDAsMCwwLDApXCIsXG5cdFx0XHRcdHBhZGRpbmcgOiAodGhpcy5vcHRpb25zLnNob3dTY2FsZSkgPyAwIDogKHRoaXMub3B0aW9ucy5iYXJTaG93U3Ryb2tlKSA/IHRoaXMub3B0aW9ucy5iYXJTdHJva2VXaWR0aCA6IDAsXG5cdFx0XHRcdHNob3dMYWJlbHMgOiB0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGFiZWxzLFxuXHRcdFx0XHRkaXNwbGF5IDogdGhpcy5vcHRpb25zLnNob3dTY2FsZVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5zY2FsZU92ZXJyaWRlKXtcblx0XHRcdFx0aGVscGVycy5leHRlbmQoc2NhbGVPcHRpb25zLCB7XG5cdFx0XHRcdFx0Y2FsY3VsYXRlWVJhbmdlOiBoZWxwZXJzLm5vb3AsXG5cdFx0XHRcdFx0c3RlcHM6IHRoaXMub3B0aW9ucy5zY2FsZVN0ZXBzLFxuXHRcdFx0XHRcdHN0ZXBWYWx1ZTogdGhpcy5vcHRpb25zLnNjYWxlU3RlcFdpZHRoLFxuXHRcdFx0XHRcdG1pbjogdGhpcy5vcHRpb25zLnNjYWxlU3RhcnRWYWx1ZSxcblx0XHRcdFx0XHRtYXg6IHRoaXMub3B0aW9ucy5zY2FsZVN0YXJ0VmFsdWUgKyAodGhpcy5vcHRpb25zLnNjYWxlU3RlcHMgKiB0aGlzLm9wdGlvbnMuc2NhbGVTdGVwV2lkdGgpXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnNjYWxlID0gbmV3IHRoaXMuU2NhbGVDbGFzcyhzY2FsZU9wdGlvbnMpO1xuXHRcdH0sXG5cdFx0YWRkRGF0YSA6IGZ1bmN0aW9uKHZhbHVlc0FycmF5LGxhYmVsKXtcblx0XHRcdC8vTWFwIHRoZSB2YWx1ZXMgYXJyYXkgZm9yIGVhY2ggb2YgdGhlIGRhdGFzZXRzXG5cdFx0XHRoZWxwZXJzLmVhY2godmFsdWVzQXJyYXksZnVuY3Rpb24odmFsdWUsZGF0YXNldEluZGV4KXtcblx0XHRcdFx0Ly9BZGQgYSBuZXcgcG9pbnQgZm9yIGVhY2ggcGllY2Ugb2YgZGF0YSwgcGFzc2luZyBhbnkgcmVxdWlyZWQgZGF0YSB0byBkcmF3LlxuXHRcdFx0XHR0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uYmFycy5wdXNoKG5ldyB0aGlzLkJhckNsYXNzKHtcblx0XHRcdFx0XHR2YWx1ZSA6IHZhbHVlLFxuXHRcdFx0XHRcdGxhYmVsIDogbGFiZWwsXG5cdFx0XHRcdFx0eDogdGhpcy5zY2FsZS5jYWxjdWxhdGVCYXJYKHRoaXMuZGF0YXNldHMubGVuZ3RoLCBkYXRhc2V0SW5kZXgsIHRoaXMuc2NhbGUudmFsdWVzQ291bnQrMSksXG5cdFx0XHRcdFx0eTogdGhpcy5zY2FsZS5lbmRQb2ludCxcblx0XHRcdFx0XHR3aWR0aCA6IHRoaXMuc2NhbGUuY2FsY3VsYXRlQmFyV2lkdGgodGhpcy5kYXRhc2V0cy5sZW5ndGgpLFxuXHRcdFx0XHRcdGJhc2UgOiB0aGlzLnNjYWxlLmVuZFBvaW50LFxuXHRcdFx0XHRcdHN0cm9rZUNvbG9yIDogdGhpcy5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLnN0cm9rZUNvbG9yLFxuXHRcdFx0XHRcdGZpbGxDb2xvciA6IHRoaXMuZGF0YXNldHNbZGF0YXNldEluZGV4XS5maWxsQ29sb3Jcblx0XHRcdFx0fSkpO1xuXHRcdFx0fSx0aGlzKTtcblxuXHRcdFx0dGhpcy5zY2FsZS5hZGRYTGFiZWwobGFiZWwpO1xuXHRcdFx0Ly9UaGVuIHJlLXJlbmRlciB0aGUgY2hhcnQuXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlRGF0YSA6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLnNjYWxlLnJlbW92ZVhMYWJlbCgpO1xuXHRcdFx0Ly9UaGVuIHJlLXJlbmRlciB0aGUgY2hhcnQuXG5cdFx0XHRoZWxwZXJzLmVhY2godGhpcy5kYXRhc2V0cyxmdW5jdGlvbihkYXRhc2V0KXtcblx0XHRcdFx0ZGF0YXNldC5iYXJzLnNoaWZ0KCk7XG5cdFx0XHR9LHRoaXMpO1xuXHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHR9LFxuXHRcdHJlZmxvdyA6IGZ1bmN0aW9uKCl7XG5cdFx0XHRoZWxwZXJzLmV4dGVuZCh0aGlzLkJhckNsYXNzLnByb3RvdHlwZSx7XG5cdFx0XHRcdHk6IHRoaXMuc2NhbGUuZW5kUG9pbnQsXG5cdFx0XHRcdGJhc2UgOiB0aGlzLnNjYWxlLmVuZFBvaW50XG5cdFx0XHR9KTtcblx0XHRcdHZhciBuZXdTY2FsZVByb3BzID0gaGVscGVycy5leHRlbmQoe1xuXHRcdFx0XHRoZWlnaHQgOiB0aGlzLmNoYXJ0LmhlaWdodCxcblx0XHRcdFx0d2lkdGggOiB0aGlzLmNoYXJ0LndpZHRoXG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuc2NhbGUudXBkYXRlKG5ld1NjYWxlUHJvcHMpO1xuXHRcdH0sXG5cdFx0ZHJhdyA6IGZ1bmN0aW9uKGVhc2Upe1xuXHRcdFx0dmFyIGVhc2luZ0RlY2ltYWwgPSBlYXNlIHx8IDE7XG5cdFx0XHR0aGlzLmNsZWFyKCk7XG5cblx0XHRcdHZhciBjdHggPSB0aGlzLmNoYXJ0LmN0eDtcblxuXHRcdFx0dGhpcy5zY2FsZS5kcmF3KGVhc2luZ0RlY2ltYWwpO1xuXG5cdFx0XHQvL0RyYXcgYWxsIHRoZSBiYXJzIGZvciBlYWNoIGRhdGFzZXRcblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQsZGF0YXNldEluZGV4KXtcblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQuYmFycyxmdW5jdGlvbihiYXIsaW5kZXgpe1xuXHRcdFx0XHRcdGlmIChiYXIuaGFzVmFsdWUoKSl7XG5cdFx0XHRcdFx0XHRiYXIuYmFzZSA9IHRoaXMuc2NhbGUuZW5kUG9pbnQ7XG5cdFx0XHRcdFx0XHQvL1RyYW5zaXRpb24gdGhlbiBkcmF3XG5cdFx0XHRcdFx0XHRiYXIudHJhbnNpdGlvbih7XG5cdFx0XHRcdFx0XHRcdHggOiB0aGlzLnNjYWxlLmNhbGN1bGF0ZUJhclgodGhpcy5kYXRhc2V0cy5sZW5ndGgsIGRhdGFzZXRJbmRleCwgaW5kZXgpLFxuXHRcdFx0XHRcdFx0XHR5IDogdGhpcy5zY2FsZS5jYWxjdWxhdGVZKGJhci52YWx1ZSksXG5cdFx0XHRcdFx0XHRcdHdpZHRoIDogdGhpcy5zY2FsZS5jYWxjdWxhdGVCYXJXaWR0aCh0aGlzLmRhdGFzZXRzLmxlbmd0aClcblx0XHRcdFx0XHRcdH0sIGVhc2luZ0RlY2ltYWwpLmRyYXcoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sdGhpcyk7XG5cblx0XHRcdH0sdGhpcyk7XG5cdFx0fVxuXHR9KTtcblxuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKXtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIHJvb3QgPSB0aGlzLFxuXHRcdENoYXJ0ID0gcm9vdC5DaGFydCxcblx0XHQvL0NhY2hlIGEgbG9jYWwgcmVmZXJlbmNlIHRvIENoYXJ0LmhlbHBlcnNcblx0XHRoZWxwZXJzID0gQ2hhcnQuaGVscGVycztcblxuXHR2YXIgZGVmYXVsdENvbmZpZyA9IHtcblx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIHNob3VsZCBzaG93IGEgc3Ryb2tlIG9uIGVhY2ggc2VnbWVudFxuXHRcdHNlZ21lbnRTaG93U3Ryb2tlIDogdHJ1ZSxcblxuXHRcdC8vU3RyaW5nIC0gVGhlIGNvbG91ciBvZiBlYWNoIHNlZ21lbnQgc3Ryb2tlXG5cdFx0c2VnbWVudFN0cm9rZUNvbG9yIDogXCIjZmZmXCIsXG5cblx0XHQvL051bWJlciAtIFRoZSB3aWR0aCBvZiBlYWNoIHNlZ21lbnQgc3Ryb2tlXG5cdFx0c2VnbWVudFN0cm9rZVdpZHRoIDogMixcblxuXHRcdC8vVGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGNoYXJ0IHRoYXQgd2UgY3V0IG91dCBvZiB0aGUgbWlkZGxlLlxuXHRcdHBlcmNlbnRhZ2VJbm5lckN1dG91dCA6IDUwLFxuXG5cdFx0Ly9OdW1iZXIgLSBBbW91bnQgb2YgYW5pbWF0aW9uIHN0ZXBzXG5cdFx0YW5pbWF0aW9uU3RlcHMgOiAxMDAsXG5cblx0XHQvL1N0cmluZyAtIEFuaW1hdGlvbiBlYXNpbmcgZWZmZWN0XG5cdFx0YW5pbWF0aW9uRWFzaW5nIDogXCJlYXNlT3V0Qm91bmNlXCIsXG5cblx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgdGhlIHJvdGF0aW9uIG9mIHRoZSBEb3VnaG51dFxuXHRcdGFuaW1hdGVSb3RhdGUgOiB0cnVlLFxuXG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB3ZSBhbmltYXRlIHNjYWxpbmcgdGhlIERvdWdobnV0IGZyb20gdGhlIGNlbnRyZVxuXHRcdGFuaW1hdGVTY2FsZSA6IGZhbHNlLFxuXG5cdFx0Ly9TdHJpbmcgLSBBIGxlZ2VuZCB0ZW1wbGF0ZVxuXHRcdGxlZ2VuZFRlbXBsYXRlIDogXCI8dWwgY2xhc3M9XFxcIjwlPW5hbWUudG9Mb3dlckNhc2UoKSU+LWxlZ2VuZFxcXCI+PCUgZm9yICh2YXIgaT0wOyBpPHNlZ21lbnRzLmxlbmd0aDsgaSsrKXslPjxsaT48c3BhbiBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjo8JT1zZWdtZW50c1tpXS5maWxsQ29sb3IlPlxcXCI+PC9zcGFuPjwlaWYoc2VnbWVudHNbaV0ubGFiZWwpeyU+PCU9c2VnbWVudHNbaV0ubGFiZWwlPjwlfSU+PC9saT48JX0lPjwvdWw+XCJcblxuXHR9O1xuXG5cblx0Q2hhcnQuVHlwZS5leHRlbmQoe1xuXHRcdC8vUGFzc2luZyBpbiBhIG5hbWUgcmVnaXN0ZXJzIHRoaXMgY2hhcnQgaW4gdGhlIENoYXJ0IG5hbWVzcGFjZVxuXHRcdG5hbWU6IFwiRG91Z2hudXRcIixcblx0XHQvL1Byb3ZpZGluZyBhIGRlZmF1bHRzIHdpbGwgYWxzbyByZWdpc3RlciB0aGUgZGVhZnVsdHMgaW4gdGhlIGNoYXJ0IG5hbWVzcGFjZVxuXHRcdGRlZmF1bHRzIDogZGVmYXVsdENvbmZpZyxcblx0XHQvL0luaXRpYWxpemUgaXMgZmlyZWQgd2hlbiB0aGUgY2hhcnQgaXMgaW5pdGlhbGl6ZWQgLSBEYXRhIGlzIHBhc3NlZCBpbiBhcyBhIHBhcmFtZXRlclxuXHRcdC8vQ29uZmlnIGlzIGF1dG9tYXRpY2FsbHkgbWVyZ2VkIGJ5IHRoZSBjb3JlIG9mIENoYXJ0LmpzLCBhbmQgaXMgYXZhaWxhYmxlIGF0IHRoaXMub3B0aW9uc1xuXHRcdGluaXRpYWxpemU6ICBmdW5jdGlvbihkYXRhKXtcblxuXHRcdFx0Ly9EZWNsYXJlIHNlZ21lbnRzIGFzIGEgc3RhdGljIHByb3BlcnR5IHRvIHByZXZlbnQgaW5oZXJpdGluZyBhY3Jvc3MgdGhlIENoYXJ0IHR5cGUgcHJvdG90eXBlXG5cdFx0XHR0aGlzLnNlZ21lbnRzID0gW107XG5cdFx0XHR0aGlzLm91dGVyUmFkaXVzID0gKGhlbHBlcnMubWluKFt0aGlzLmNoYXJ0LndpZHRoLHRoaXMuY2hhcnQuaGVpZ2h0XSkgLVx0dGhpcy5vcHRpb25zLnNlZ21lbnRTdHJva2VXaWR0aC8yKS8yO1xuXG5cdFx0XHR0aGlzLlNlZ21lbnRBcmMgPSBDaGFydC5BcmMuZXh0ZW5kKHtcblx0XHRcdFx0Y3R4IDogdGhpcy5jaGFydC5jdHgsXG5cdFx0XHRcdHggOiB0aGlzLmNoYXJ0LndpZHRoLzIsXG5cdFx0XHRcdHkgOiB0aGlzLmNoYXJ0LmhlaWdodC8yXG5cdFx0XHR9KTtcblxuXHRcdFx0Ly9TZXQgdXAgdG9vbHRpcCBldmVudHMgb24gdGhlIGNoYXJ0XG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLnNob3dUb29sdGlwcyl7XG5cdFx0XHRcdGhlbHBlcnMuYmluZEV2ZW50cyh0aGlzLCB0aGlzLm9wdGlvbnMudG9vbHRpcEV2ZW50cywgZnVuY3Rpb24oZXZ0KXtcblx0XHRcdFx0XHR2YXIgYWN0aXZlU2VnbWVudHMgPSAoZXZ0LnR5cGUgIT09ICdtb3VzZW91dCcpID8gdGhpcy5nZXRTZWdtZW50c0F0RXZlbnQoZXZ0KSA6IFtdO1xuXG5cdFx0XHRcdFx0aGVscGVycy5lYWNoKHRoaXMuc2VnbWVudHMsZnVuY3Rpb24oc2VnbWVudCl7XG5cdFx0XHRcdFx0XHRzZWdtZW50LnJlc3RvcmUoW1wiZmlsbENvbG9yXCJdKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRoZWxwZXJzLmVhY2goYWN0aXZlU2VnbWVudHMsZnVuY3Rpb24oYWN0aXZlU2VnbWVudCl7XG5cdFx0XHRcdFx0XHRhY3RpdmVTZWdtZW50LmZpbGxDb2xvciA9IGFjdGl2ZVNlZ21lbnQuaGlnaGxpZ2h0Q29sb3I7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0dGhpcy5zaG93VG9vbHRpcChhY3RpdmVTZWdtZW50cyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5jYWxjdWxhdGVUb3RhbChkYXRhKTtcblxuXHRcdFx0aGVscGVycy5lYWNoKGRhdGEsZnVuY3Rpb24oZGF0YXBvaW50LCBpbmRleCl7XG5cdFx0XHRcdHRoaXMuYWRkRGF0YShkYXRhcG9pbnQsIGluZGV4LCB0cnVlKTtcblx0XHRcdH0sdGhpcyk7XG5cblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cdFx0fSxcblx0XHRnZXRTZWdtZW50c0F0RXZlbnQgOiBmdW5jdGlvbihlKXtcblx0XHRcdHZhciBzZWdtZW50c0FycmF5ID0gW107XG5cblx0XHRcdHZhciBsb2NhdGlvbiA9IGhlbHBlcnMuZ2V0UmVsYXRpdmVQb3NpdGlvbihlKTtcblxuXHRcdFx0aGVscGVycy5lYWNoKHRoaXMuc2VnbWVudHMsZnVuY3Rpb24oc2VnbWVudCl7XG5cdFx0XHRcdGlmIChzZWdtZW50LmluUmFuZ2UobG9jYXRpb24ueCxsb2NhdGlvbi55KSkgc2VnbWVudHNBcnJheS5wdXNoKHNlZ21lbnQpO1xuXHRcdFx0fSx0aGlzKTtcblx0XHRcdHJldHVybiBzZWdtZW50c0FycmF5O1xuXHRcdH0sXG5cdFx0YWRkRGF0YSA6IGZ1bmN0aW9uKHNlZ21lbnQsIGF0SW5kZXgsIHNpbGVudCl7XG5cdFx0XHR2YXIgaW5kZXggPSBhdEluZGV4IHx8IHRoaXMuc2VnbWVudHMubGVuZ3RoO1xuXHRcdFx0dGhpcy5zZWdtZW50cy5zcGxpY2UoaW5kZXgsIDAsIG5ldyB0aGlzLlNlZ21lbnRBcmMoe1xuXHRcdFx0XHR2YWx1ZSA6IHNlZ21lbnQudmFsdWUsXG5cdFx0XHRcdG91dGVyUmFkaXVzIDogKHRoaXMub3B0aW9ucy5hbmltYXRlU2NhbGUpID8gMCA6IHRoaXMub3V0ZXJSYWRpdXMsXG5cdFx0XHRcdGlubmVyUmFkaXVzIDogKHRoaXMub3B0aW9ucy5hbmltYXRlU2NhbGUpID8gMCA6ICh0aGlzLm91dGVyUmFkaXVzLzEwMCkgKiB0aGlzLm9wdGlvbnMucGVyY2VudGFnZUlubmVyQ3V0b3V0LFxuXHRcdFx0XHRmaWxsQ29sb3IgOiBzZWdtZW50LmNvbG9yLFxuXHRcdFx0XHRoaWdobGlnaHRDb2xvciA6IHNlZ21lbnQuaGlnaGxpZ2h0IHx8IHNlZ21lbnQuY29sb3IsXG5cdFx0XHRcdHNob3dTdHJva2UgOiB0aGlzLm9wdGlvbnMuc2VnbWVudFNob3dTdHJva2UsXG5cdFx0XHRcdHN0cm9rZVdpZHRoIDogdGhpcy5vcHRpb25zLnNlZ21lbnRTdHJva2VXaWR0aCxcblx0XHRcdFx0c3Ryb2tlQ29sb3IgOiB0aGlzLm9wdGlvbnMuc2VnbWVudFN0cm9rZUNvbG9yLFxuXHRcdFx0XHRzdGFydEFuZ2xlIDogTWF0aC5QSSAqIDEuNSxcblx0XHRcdFx0Y2lyY3VtZmVyZW5jZSA6ICh0aGlzLm9wdGlvbnMuYW5pbWF0ZVJvdGF0ZSkgPyAwIDogdGhpcy5jYWxjdWxhdGVDaXJjdW1mZXJlbmNlKHNlZ21lbnQudmFsdWUpLFxuXHRcdFx0XHRsYWJlbCA6IHNlZ21lbnQubGFiZWxcblx0XHRcdH0pKTtcblx0XHRcdGlmICghc2lsZW50KXtcblx0XHRcdFx0dGhpcy5yZWZsb3coKTtcblx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UgOiBmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHRyZXR1cm4gKE1hdGguUEkqMikqKE1hdGguYWJzKHZhbHVlKSAvIHRoaXMudG90YWwpO1xuXHRcdH0sXG5cdFx0Y2FsY3VsYXRlVG90YWwgOiBmdW5jdGlvbihkYXRhKXtcblx0XHRcdHRoaXMudG90YWwgPSAwO1xuXHRcdFx0aGVscGVycy5lYWNoKGRhdGEsZnVuY3Rpb24oc2VnbWVudCl7XG5cdFx0XHRcdHRoaXMudG90YWwgKz0gTWF0aC5hYnMoc2VnbWVudC52YWx1ZSk7XG5cdFx0XHR9LHRoaXMpO1xuXHRcdH0sXG5cdFx0dXBkYXRlIDogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuY2FsY3VsYXRlVG90YWwodGhpcy5zZWdtZW50cyk7XG5cblx0XHRcdC8vIFJlc2V0IGFueSBoaWdobGlnaHQgY29sb3VycyBiZWZvcmUgdXBkYXRpbmcuXG5cdFx0XHRoZWxwZXJzLmVhY2godGhpcy5hY3RpdmVFbGVtZW50cywgZnVuY3Rpb24oYWN0aXZlRWxlbWVudCl7XG5cdFx0XHRcdGFjdGl2ZUVsZW1lbnQucmVzdG9yZShbJ2ZpbGxDb2xvciddKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbihzZWdtZW50KXtcblx0XHRcdFx0c2VnbWVudC5zYXZlKCk7XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZURhdGE6IGZ1bmN0aW9uKGF0SW5kZXgpe1xuXHRcdFx0dmFyIGluZGV4VG9EZWxldGUgPSAoaGVscGVycy5pc051bWJlcihhdEluZGV4KSkgPyBhdEluZGV4IDogdGhpcy5zZWdtZW50cy5sZW5ndGgtMTtcblx0XHRcdHRoaXMuc2VnbWVudHMuc3BsaWNlKGluZGV4VG9EZWxldGUsIDEpO1xuXHRcdFx0dGhpcy5yZWZsb3coKTtcblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0fSxcblxuXHRcdHJlZmxvdyA6IGZ1bmN0aW9uKCl7XG5cdFx0XHRoZWxwZXJzLmV4dGVuZCh0aGlzLlNlZ21lbnRBcmMucHJvdG90eXBlLHtcblx0XHRcdFx0eCA6IHRoaXMuY2hhcnQud2lkdGgvMixcblx0XHRcdFx0eSA6IHRoaXMuY2hhcnQuaGVpZ2h0LzJcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5vdXRlclJhZGl1cyA9IChoZWxwZXJzLm1pbihbdGhpcy5jaGFydC53aWR0aCx0aGlzLmNoYXJ0LmhlaWdodF0pIC1cdHRoaXMub3B0aW9ucy5zZWdtZW50U3Ryb2tlV2lkdGgvMikvMjtcblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLnNlZ21lbnRzLCBmdW5jdGlvbihzZWdtZW50KXtcblx0XHRcdFx0c2VnbWVudC51cGRhdGUoe1xuXHRcdFx0XHRcdG91dGVyUmFkaXVzIDogdGhpcy5vdXRlclJhZGl1cyxcblx0XHRcdFx0XHRpbm5lclJhZGl1cyA6ICh0aGlzLm91dGVyUmFkaXVzLzEwMCkgKiB0aGlzLm9wdGlvbnMucGVyY2VudGFnZUlubmVyQ3V0b3V0XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSwgdGhpcyk7XG5cdFx0fSxcblx0XHRkcmF3IDogZnVuY3Rpb24oZWFzZURlY2ltYWwpe1xuXHRcdFx0dmFyIGFuaW1EZWNpbWFsID0gKGVhc2VEZWNpbWFsKSA/IGVhc2VEZWNpbWFsIDogMTtcblx0XHRcdHRoaXMuY2xlYXIoKTtcblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHNlZ21lbnQsaW5kZXgpe1xuXHRcdFx0XHRzZWdtZW50LnRyYW5zaXRpb24oe1xuXHRcdFx0XHRcdGNpcmN1bWZlcmVuY2UgOiB0aGlzLmNhbGN1bGF0ZUNpcmN1bWZlcmVuY2Uoc2VnbWVudC52YWx1ZSksXG5cdFx0XHRcdFx0b3V0ZXJSYWRpdXMgOiB0aGlzLm91dGVyUmFkaXVzLFxuXHRcdFx0XHRcdGlubmVyUmFkaXVzIDogKHRoaXMub3V0ZXJSYWRpdXMvMTAwKSAqIHRoaXMub3B0aW9ucy5wZXJjZW50YWdlSW5uZXJDdXRvdXRcblx0XHRcdFx0fSxhbmltRGVjaW1hbCk7XG5cblx0XHRcdFx0c2VnbWVudC5lbmRBbmdsZSA9IHNlZ21lbnQuc3RhcnRBbmdsZSArIHNlZ21lbnQuY2lyY3VtZmVyZW5jZTtcblxuXHRcdFx0XHRzZWdtZW50LmRyYXcoKTtcblx0XHRcdFx0aWYgKGluZGV4ID09PSAwKXtcblx0XHRcdFx0XHRzZWdtZW50LnN0YXJ0QW5nbGUgPSBNYXRoLlBJICogMS41O1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vQ2hlY2sgdG8gc2VlIGlmIGl0J3MgdGhlIGxhc3Qgc2VnbWVudCwgaWYgbm90IGdldCB0aGUgbmV4dCBhbmQgdXBkYXRlIHRoZSBzdGFydCBhbmdsZVxuXHRcdFx0XHRpZiAoaW5kZXggPCB0aGlzLnNlZ21lbnRzLmxlbmd0aC0xKXtcblx0XHRcdFx0XHR0aGlzLnNlZ21lbnRzW2luZGV4KzFdLnN0YXJ0QW5nbGUgPSBzZWdtZW50LmVuZEFuZ2xlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LHRoaXMpO1xuXG5cdFx0fVxuXHR9KTtcblxuXHRDaGFydC50eXBlcy5Eb3VnaG51dC5leHRlbmQoe1xuXHRcdG5hbWUgOiBcIlBpZVwiLFxuXHRcdGRlZmF1bHRzIDogaGVscGVycy5tZXJnZShkZWZhdWx0Q29uZmlnLHtwZXJjZW50YWdlSW5uZXJDdXRvdXQgOiAwfSlcblx0fSk7XG5cbn0pLmNhbGwodGhpcyk7XG4oZnVuY3Rpb24oKXtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIHJvb3QgPSB0aGlzLFxuXHRcdENoYXJ0ID0gcm9vdC5DaGFydCxcblx0XHRoZWxwZXJzID0gQ2hhcnQuaGVscGVycztcblxuXHR2YXIgZGVmYXVsdENvbmZpZyA9IHtcblxuXHRcdC8vL0Jvb2xlYW4gLSBXaGV0aGVyIGdyaWQgbGluZXMgYXJlIHNob3duIGFjcm9zcyB0aGUgY2hhcnRcblx0XHRzY2FsZVNob3dHcmlkTGluZXMgOiB0cnVlLFxuXG5cdFx0Ly9TdHJpbmcgLSBDb2xvdXIgb2YgdGhlIGdyaWQgbGluZXNcblx0XHRzY2FsZUdyaWRMaW5lQ29sb3IgOiBcInJnYmEoMCwwLDAsLjA1KVwiLFxuXG5cdFx0Ly9OdW1iZXIgLSBXaWR0aCBvZiB0aGUgZ3JpZCBsaW5lc1xuXHRcdHNjYWxlR3JpZExpbmVXaWR0aCA6IDEsXG5cblx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIHNob3cgaG9yaXpvbnRhbCBsaW5lcyAoZXhjZXB0IFggYXhpcylcblx0XHRzY2FsZVNob3dIb3Jpem9udGFsTGluZXM6IHRydWUsXG5cblx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIHNob3cgdmVydGljYWwgbGluZXMgKGV4Y2VwdCBZIGF4aXMpXG5cdFx0c2NhbGVTaG93VmVydGljYWxMaW5lczogdHJ1ZSxcblxuXHRcdC8vQm9vbGVhbiAtIFdoZXRoZXIgdGhlIGxpbmUgaXMgY3VydmVkIGJldHdlZW4gcG9pbnRzXG5cdFx0YmV6aWVyQ3VydmUgOiB0cnVlLFxuXG5cdFx0Ly9OdW1iZXIgLSBUZW5zaW9uIG9mIHRoZSBiZXppZXIgY3VydmUgYmV0d2VlbiBwb2ludHNcblx0XHRiZXppZXJDdXJ2ZVRlbnNpb24gOiAwLjQsXG5cblx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIHNob3cgYSBkb3QgZm9yIGVhY2ggcG9pbnRcblx0XHRwb2ludERvdCA6IHRydWUsXG5cblx0XHQvL051bWJlciAtIFJhZGl1cyBvZiBlYWNoIHBvaW50IGRvdCBpbiBwaXhlbHNcblx0XHRwb2ludERvdFJhZGl1cyA6IDQsXG5cblx0XHQvL051bWJlciAtIFBpeGVsIHdpZHRoIG9mIHBvaW50IGRvdCBzdHJva2Vcblx0XHRwb2ludERvdFN0cm9rZVdpZHRoIDogMSxcblxuXHRcdC8vTnVtYmVyIC0gYW1vdW50IGV4dHJhIHRvIGFkZCB0byB0aGUgcmFkaXVzIHRvIGNhdGVyIGZvciBoaXQgZGV0ZWN0aW9uIG91dHNpZGUgdGhlIGRyYXduIHBvaW50XG5cdFx0cG9pbnRIaXREZXRlY3Rpb25SYWRpdXMgOiAyMCxcblxuXHRcdC8vQm9vbGVhbiAtIFdoZXRoZXIgdG8gc2hvdyBhIHN0cm9rZSBmb3IgZGF0YXNldHNcblx0XHRkYXRhc2V0U3Ryb2tlIDogdHJ1ZSxcblxuXHRcdC8vTnVtYmVyIC0gUGl4ZWwgd2lkdGggb2YgZGF0YXNldCBzdHJva2Vcblx0XHRkYXRhc2V0U3Ryb2tlV2lkdGggOiAyLFxuXG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0byBmaWxsIHRoZSBkYXRhc2V0IHdpdGggYSBjb2xvdXJcblx0XHRkYXRhc2V0RmlsbCA6IHRydWUsXG5cblx0XHQvL1N0cmluZyAtIEEgbGVnZW5kIHRlbXBsYXRlXG5cdFx0bGVnZW5kVGVtcGxhdGUgOiBcIjx1bCBjbGFzcz1cXFwiPCU9bmFtZS50b0xvd2VyQ2FzZSgpJT4tbGVnZW5kXFxcIj48JSBmb3IgKHZhciBpPTA7IGk8ZGF0YXNldHMubGVuZ3RoOyBpKyspeyU+PGxpPjxzcGFuIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOjwlPWRhdGFzZXRzW2ldLnN0cm9rZUNvbG9yJT5cXFwiPjwvc3Bhbj48JWlmKGRhdGFzZXRzW2ldLmxhYmVsKXslPjwlPWRhdGFzZXRzW2ldLmxhYmVsJT48JX0lPjwvbGk+PCV9JT48L3VsPlwiXG5cblx0fTtcblxuXG5cdENoYXJ0LlR5cGUuZXh0ZW5kKHtcblx0XHRuYW1lOiBcIkxpbmVcIixcblx0XHRkZWZhdWx0cyA6IGRlZmF1bHRDb25maWcsXG5cdFx0aW5pdGlhbGl6ZTogIGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0Ly9EZWNsYXJlIHRoZSBleHRlbnNpb24gb2YgdGhlIGRlZmF1bHQgcG9pbnQsIHRvIGNhdGVyIGZvciB0aGUgb3B0aW9ucyBwYXNzZWQgaW4gdG8gdGhlIGNvbnN0cnVjdG9yXG5cdFx0XHR0aGlzLlBvaW50Q2xhc3MgPSBDaGFydC5Qb2ludC5leHRlbmQoe1xuXHRcdFx0XHRzdHJva2VXaWR0aCA6IHRoaXMub3B0aW9ucy5wb2ludERvdFN0cm9rZVdpZHRoLFxuXHRcdFx0XHRyYWRpdXMgOiB0aGlzLm9wdGlvbnMucG9pbnREb3RSYWRpdXMsXG5cdFx0XHRcdGRpc3BsYXk6IHRoaXMub3B0aW9ucy5wb2ludERvdCxcblx0XHRcdFx0aGl0RGV0ZWN0aW9uUmFkaXVzIDogdGhpcy5vcHRpb25zLnBvaW50SGl0RGV0ZWN0aW9uUmFkaXVzLFxuXHRcdFx0XHRjdHggOiB0aGlzLmNoYXJ0LmN0eCxcblx0XHRcdFx0aW5SYW5nZSA6IGZ1bmN0aW9uKG1vdXNlWCl7XG5cdFx0XHRcdFx0cmV0dXJuIChNYXRoLnBvdyhtb3VzZVgtdGhpcy54LCAyKSA8IE1hdGgucG93KHRoaXMucmFkaXVzICsgdGhpcy5oaXREZXRlY3Rpb25SYWRpdXMsMikpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5kYXRhc2V0cyA9IFtdO1xuXG5cdFx0XHQvL1NldCB1cCB0b29sdGlwIGV2ZW50cyBvbiB0aGUgY2hhcnRcblx0XHRcdGlmICh0aGlzLm9wdGlvbnMuc2hvd1Rvb2x0aXBzKXtcblx0XHRcdFx0aGVscGVycy5iaW5kRXZlbnRzKHRoaXMsIHRoaXMub3B0aW9ucy50b29sdGlwRXZlbnRzLCBmdW5jdGlvbihldnQpe1xuXHRcdFx0XHRcdHZhciBhY3RpdmVQb2ludHMgPSAoZXZ0LnR5cGUgIT09ICdtb3VzZW91dCcpID8gdGhpcy5nZXRQb2ludHNBdEV2ZW50KGV2dCkgOiBbXTtcblx0XHRcdFx0XHR0aGlzLmVhY2hQb2ludHMoZnVuY3Rpb24ocG9pbnQpe1xuXHRcdFx0XHRcdFx0cG9pbnQucmVzdG9yZShbJ2ZpbGxDb2xvcicsICdzdHJva2VDb2xvciddKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRoZWxwZXJzLmVhY2goYWN0aXZlUG9pbnRzLCBmdW5jdGlvbihhY3RpdmVQb2ludCl7XG5cdFx0XHRcdFx0XHRhY3RpdmVQb2ludC5maWxsQ29sb3IgPSBhY3RpdmVQb2ludC5oaWdobGlnaHRGaWxsO1xuXHRcdFx0XHRcdFx0YWN0aXZlUG9pbnQuc3Ryb2tlQ29sb3IgPSBhY3RpdmVQb2ludC5oaWdobGlnaHRTdHJva2U7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0dGhpcy5zaG93VG9vbHRpcChhY3RpdmVQb2ludHMpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly9JdGVyYXRlIHRocm91Z2ggZWFjaCBvZiB0aGUgZGF0YXNldHMsIGFuZCBidWlsZCB0aGlzIGludG8gYSBwcm9wZXJ0eSBvZiB0aGUgY2hhcnRcblx0XHRcdGhlbHBlcnMuZWFjaChkYXRhLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQpe1xuXG5cdFx0XHRcdHZhciBkYXRhc2V0T2JqZWN0ID0ge1xuXHRcdFx0XHRcdGxhYmVsIDogZGF0YXNldC5sYWJlbCB8fCBudWxsLFxuXHRcdFx0XHRcdGZpbGxDb2xvciA6IGRhdGFzZXQuZmlsbENvbG9yLFxuXHRcdFx0XHRcdHN0cm9rZUNvbG9yIDogZGF0YXNldC5zdHJva2VDb2xvcixcblx0XHRcdFx0XHRwb2ludENvbG9yIDogZGF0YXNldC5wb2ludENvbG9yLFxuXHRcdFx0XHRcdHBvaW50U3Ryb2tlQ29sb3IgOiBkYXRhc2V0LnBvaW50U3Ryb2tlQ29sb3IsXG5cdFx0XHRcdFx0cG9pbnRzIDogW11cblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLmRhdGFzZXRzLnB1c2goZGF0YXNldE9iamVjdCk7XG5cblxuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldC5kYXRhLGZ1bmN0aW9uKGRhdGFQb2ludCxpbmRleCl7XG5cdFx0XHRcdFx0Ly9BZGQgYSBuZXcgcG9pbnQgZm9yIGVhY2ggcGllY2Ugb2YgZGF0YSwgcGFzc2luZyBhbnkgcmVxdWlyZWQgZGF0YSB0byBkcmF3LlxuXHRcdFx0XHRcdGRhdGFzZXRPYmplY3QucG9pbnRzLnB1c2gobmV3IHRoaXMuUG9pbnRDbGFzcyh7XG5cdFx0XHRcdFx0XHR2YWx1ZSA6IGRhdGFQb2ludCxcblx0XHRcdFx0XHRcdGxhYmVsIDogZGF0YS5sYWJlbHNbaW5kZXhdLFxuXHRcdFx0XHRcdFx0ZGF0YXNldExhYmVsOiBkYXRhc2V0LmxhYmVsLFxuXHRcdFx0XHRcdFx0c3Ryb2tlQ29sb3IgOiBkYXRhc2V0LnBvaW50U3Ryb2tlQ29sb3IsXG5cdFx0XHRcdFx0XHRmaWxsQ29sb3IgOiBkYXRhc2V0LnBvaW50Q29sb3IsXG5cdFx0XHRcdFx0XHRoaWdobGlnaHRGaWxsIDogZGF0YXNldC5wb2ludEhpZ2hsaWdodEZpbGwgfHwgZGF0YXNldC5wb2ludENvbG9yLFxuXHRcdFx0XHRcdFx0aGlnaGxpZ2h0U3Ryb2tlIDogZGF0YXNldC5wb2ludEhpZ2hsaWdodFN0cm9rZSB8fCBkYXRhc2V0LnBvaW50U3Ryb2tlQ29sb3Jcblx0XHRcdFx0XHR9KSk7XG5cdFx0XHRcdH0sdGhpcyk7XG5cblx0XHRcdFx0dGhpcy5idWlsZFNjYWxlKGRhdGEubGFiZWxzKTtcblxuXG5cdFx0XHRcdHRoaXMuZWFjaFBvaW50cyhmdW5jdGlvbihwb2ludCwgaW5kZXgpe1xuXHRcdFx0XHRcdGhlbHBlcnMuZXh0ZW5kKHBvaW50LCB7XG5cdFx0XHRcdFx0XHR4OiB0aGlzLnNjYWxlLmNhbGN1bGF0ZVgoaW5kZXgpLFxuXHRcdFx0XHRcdFx0eTogdGhpcy5zY2FsZS5lbmRQb2ludFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHBvaW50LnNhdmUoKTtcblx0XHRcdFx0fSwgdGhpcyk7XG5cblx0XHRcdH0sdGhpcyk7XG5cblxuXHRcdFx0dGhpcy5yZW5kZXIoKTtcblx0XHR9LFxuXHRcdHVwZGF0ZSA6IGZ1bmN0aW9uKCl7XG5cdFx0XHR0aGlzLnNjYWxlLnVwZGF0ZSgpO1xuXHRcdFx0Ly8gUmVzZXQgYW55IGhpZ2hsaWdodCBjb2xvdXJzIGJlZm9yZSB1cGRhdGluZy5cblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmFjdGl2ZUVsZW1lbnRzLCBmdW5jdGlvbihhY3RpdmVFbGVtZW50KXtcblx0XHRcdFx0YWN0aXZlRWxlbWVudC5yZXN0b3JlKFsnZmlsbENvbG9yJywgJ3N0cm9rZUNvbG9yJ10pO1xuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLmVhY2hQb2ludHMoZnVuY3Rpb24ocG9pbnQpe1xuXHRcdFx0XHRwb2ludC5zYXZlKCk7XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cdFx0fSxcblx0XHRlYWNoUG9pbnRzIDogZnVuY3Rpb24oY2FsbGJhY2spe1xuXHRcdFx0aGVscGVycy5lYWNoKHRoaXMuZGF0YXNldHMsZnVuY3Rpb24oZGF0YXNldCl7XG5cdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LnBvaW50cyxjYWxsYmFjayx0aGlzKTtcblx0XHRcdH0sdGhpcyk7XG5cdFx0fSxcblx0XHRnZXRQb2ludHNBdEV2ZW50IDogZnVuY3Rpb24oZSl7XG5cdFx0XHR2YXIgcG9pbnRzQXJyYXkgPSBbXSxcblx0XHRcdFx0ZXZlbnRQb3NpdGlvbiA9IGhlbHBlcnMuZ2V0UmVsYXRpdmVQb3NpdGlvbihlKTtcblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQpe1xuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldC5wb2ludHMsZnVuY3Rpb24ocG9pbnQpe1xuXHRcdFx0XHRcdGlmIChwb2ludC5pblJhbmdlKGV2ZW50UG9zaXRpb24ueCxldmVudFBvc2l0aW9uLnkpKSBwb2ludHNBcnJheS5wdXNoKHBvaW50KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9LHRoaXMpO1xuXHRcdFx0cmV0dXJuIHBvaW50c0FycmF5O1xuXHRcdH0sXG5cdFx0YnVpbGRTY2FsZSA6IGZ1bmN0aW9uKGxhYmVscyl7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdHZhciBkYXRhVG90YWwgPSBmdW5jdGlvbigpe1xuXHRcdFx0XHR2YXIgdmFsdWVzID0gW107XG5cdFx0XHRcdHNlbGYuZWFjaFBvaW50cyhmdW5jdGlvbihwb2ludCl7XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2gocG9pbnQudmFsdWUpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fTtcblxuXHRcdFx0dmFyIHNjYWxlT3B0aW9ucyA9IHtcblx0XHRcdFx0dGVtcGxhdGVTdHJpbmcgOiB0aGlzLm9wdGlvbnMuc2NhbGVMYWJlbCxcblx0XHRcdFx0aGVpZ2h0IDogdGhpcy5jaGFydC5oZWlnaHQsXG5cdFx0XHRcdHdpZHRoIDogdGhpcy5jaGFydC53aWR0aCxcblx0XHRcdFx0Y3R4IDogdGhpcy5jaGFydC5jdHgsXG5cdFx0XHRcdHRleHRDb2xvciA6IHRoaXMub3B0aW9ucy5zY2FsZUZvbnRDb2xvcixcblx0XHRcdFx0Zm9udFNpemUgOiB0aGlzLm9wdGlvbnMuc2NhbGVGb250U2l6ZSxcblx0XHRcdFx0Zm9udFN0eWxlIDogdGhpcy5vcHRpb25zLnNjYWxlRm9udFN0eWxlLFxuXHRcdFx0XHRmb250RmFtaWx5IDogdGhpcy5vcHRpb25zLnNjYWxlRm9udEZhbWlseSxcblx0XHRcdFx0dmFsdWVzQ291bnQgOiBsYWJlbHMubGVuZ3RoLFxuXHRcdFx0XHRiZWdpbkF0WmVybyA6IHRoaXMub3B0aW9ucy5zY2FsZUJlZ2luQXRaZXJvLFxuXHRcdFx0XHRpbnRlZ2Vyc09ubHkgOiB0aGlzLm9wdGlvbnMuc2NhbGVJbnRlZ2Vyc09ubHksXG5cdFx0XHRcdGNhbGN1bGF0ZVlSYW5nZSA6IGZ1bmN0aW9uKGN1cnJlbnRIZWlnaHQpe1xuXHRcdFx0XHRcdHZhciB1cGRhdGVkUmFuZ2VzID0gaGVscGVycy5jYWxjdWxhdGVTY2FsZVJhbmdlKFxuXHRcdFx0XHRcdFx0ZGF0YVRvdGFsKCksXG5cdFx0XHRcdFx0XHRjdXJyZW50SGVpZ2h0LFxuXHRcdFx0XHRcdFx0dGhpcy5mb250U2l6ZSxcblx0XHRcdFx0XHRcdHRoaXMuYmVnaW5BdFplcm8sXG5cdFx0XHRcdFx0XHR0aGlzLmludGVnZXJzT25seVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0aGVscGVycy5leHRlbmQodGhpcywgdXBkYXRlZFJhbmdlcyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHhMYWJlbHMgOiBsYWJlbHMsXG5cdFx0XHRcdGZvbnQgOiBoZWxwZXJzLmZvbnRTdHJpbmcodGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsIHRoaXMub3B0aW9ucy5zY2FsZUZvbnRTdHlsZSwgdGhpcy5vcHRpb25zLnNjYWxlRm9udEZhbWlseSksXG5cdFx0XHRcdGxpbmVXaWR0aCA6IHRoaXMub3B0aW9ucy5zY2FsZUxpbmVXaWR0aCxcblx0XHRcdFx0bGluZUNvbG9yIDogdGhpcy5vcHRpb25zLnNjYWxlTGluZUNvbG9yLFxuXHRcdFx0XHRzaG93SG9yaXpvbnRhbExpbmVzIDogdGhpcy5vcHRpb25zLnNjYWxlU2hvd0hvcml6b250YWxMaW5lcyxcblx0XHRcdFx0c2hvd1ZlcnRpY2FsTGluZXMgOiB0aGlzLm9wdGlvbnMuc2NhbGVTaG93VmVydGljYWxMaW5lcyxcblx0XHRcdFx0Z3JpZExpbmVXaWR0aCA6ICh0aGlzLm9wdGlvbnMuc2NhbGVTaG93R3JpZExpbmVzKSA/IHRoaXMub3B0aW9ucy5zY2FsZUdyaWRMaW5lV2lkdGggOiAwLFxuXHRcdFx0XHRncmlkTGluZUNvbG9yIDogKHRoaXMub3B0aW9ucy5zY2FsZVNob3dHcmlkTGluZXMpID8gdGhpcy5vcHRpb25zLnNjYWxlR3JpZExpbmVDb2xvciA6IFwicmdiYSgwLDAsMCwwKVwiLFxuXHRcdFx0XHRwYWRkaW5nOiAodGhpcy5vcHRpb25zLnNob3dTY2FsZSkgPyAwIDogdGhpcy5vcHRpb25zLnBvaW50RG90UmFkaXVzICsgdGhpcy5vcHRpb25zLnBvaW50RG90U3Ryb2tlV2lkdGgsXG5cdFx0XHRcdHNob3dMYWJlbHMgOiB0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGFiZWxzLFxuXHRcdFx0XHRkaXNwbGF5IDogdGhpcy5vcHRpb25zLnNob3dTY2FsZVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5zY2FsZU92ZXJyaWRlKXtcblx0XHRcdFx0aGVscGVycy5leHRlbmQoc2NhbGVPcHRpb25zLCB7XG5cdFx0XHRcdFx0Y2FsY3VsYXRlWVJhbmdlOiBoZWxwZXJzLm5vb3AsXG5cdFx0XHRcdFx0c3RlcHM6IHRoaXMub3B0aW9ucy5zY2FsZVN0ZXBzLFxuXHRcdFx0XHRcdHN0ZXBWYWx1ZTogdGhpcy5vcHRpb25zLnNjYWxlU3RlcFdpZHRoLFxuXHRcdFx0XHRcdG1pbjogdGhpcy5vcHRpb25zLnNjYWxlU3RhcnRWYWx1ZSxcblx0XHRcdFx0XHRtYXg6IHRoaXMub3B0aW9ucy5zY2FsZVN0YXJ0VmFsdWUgKyAodGhpcy5vcHRpb25zLnNjYWxlU3RlcHMgKiB0aGlzLm9wdGlvbnMuc2NhbGVTdGVwV2lkdGgpXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cblx0XHRcdHRoaXMuc2NhbGUgPSBuZXcgQ2hhcnQuU2NhbGUoc2NhbGVPcHRpb25zKTtcblx0XHR9LFxuXHRcdGFkZERhdGEgOiBmdW5jdGlvbih2YWx1ZXNBcnJheSxsYWJlbCl7XG5cdFx0XHQvL01hcCB0aGUgdmFsdWVzIGFycmF5IGZvciBlYWNoIG9mIHRoZSBkYXRhc2V0c1xuXG5cdFx0XHRoZWxwZXJzLmVhY2godmFsdWVzQXJyYXksZnVuY3Rpb24odmFsdWUsZGF0YXNldEluZGV4KXtcblx0XHRcdFx0Ly9BZGQgYSBuZXcgcG9pbnQgZm9yIGVhY2ggcGllY2Ugb2YgZGF0YSwgcGFzc2luZyBhbnkgcmVxdWlyZWQgZGF0YSB0byBkcmF3LlxuXHRcdFx0XHR0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0ucG9pbnRzLnB1c2gobmV3IHRoaXMuUG9pbnRDbGFzcyh7XG5cdFx0XHRcdFx0dmFsdWUgOiB2YWx1ZSxcblx0XHRcdFx0XHRsYWJlbCA6IGxhYmVsLFxuXHRcdFx0XHRcdHg6IHRoaXMuc2NhbGUuY2FsY3VsYXRlWCh0aGlzLnNjYWxlLnZhbHVlc0NvdW50KzEpLFxuXHRcdFx0XHRcdHk6IHRoaXMuc2NhbGUuZW5kUG9pbnQsXG5cdFx0XHRcdFx0c3Ryb2tlQ29sb3IgOiB0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0ucG9pbnRTdHJva2VDb2xvcixcblx0XHRcdFx0XHRmaWxsQ29sb3IgOiB0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0ucG9pbnRDb2xvclxuXHRcdFx0XHR9KSk7XG5cdFx0XHR9LHRoaXMpO1xuXG5cdFx0XHR0aGlzLnNjYWxlLmFkZFhMYWJlbChsYWJlbCk7XG5cdFx0XHQvL1RoZW4gcmUtcmVuZGVyIHRoZSBjaGFydC5cblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0fSxcblx0XHRyZW1vdmVEYXRhIDogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuc2NhbGUucmVtb3ZlWExhYmVsKCk7XG5cdFx0XHQvL1RoZW4gcmUtcmVuZGVyIHRoZSBjaGFydC5cblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQpe1xuXHRcdFx0XHRkYXRhc2V0LnBvaW50cy5zaGlmdCgpO1xuXHRcdFx0fSx0aGlzKTtcblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0fSxcblx0XHRyZWZsb3cgOiBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIG5ld1NjYWxlUHJvcHMgPSBoZWxwZXJzLmV4dGVuZCh7XG5cdFx0XHRcdGhlaWdodCA6IHRoaXMuY2hhcnQuaGVpZ2h0LFxuXHRcdFx0XHR3aWR0aCA6IHRoaXMuY2hhcnQud2lkdGhcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5zY2FsZS51cGRhdGUobmV3U2NhbGVQcm9wcyk7XG5cdFx0fSxcblx0XHRkcmF3IDogZnVuY3Rpb24oZWFzZSl7XG5cdFx0XHR2YXIgZWFzaW5nRGVjaW1hbCA9IGVhc2UgfHwgMTtcblx0XHRcdHRoaXMuY2xlYXIoKTtcblxuXHRcdFx0dmFyIGN0eCA9IHRoaXMuY2hhcnQuY3R4O1xuXG5cdFx0XHQvLyBTb21lIGhlbHBlciBtZXRob2RzIGZvciBnZXR0aW5nIHRoZSBuZXh0L3ByZXYgcG9pbnRzXG5cdFx0XHR2YXIgaGFzVmFsdWUgPSBmdW5jdGlvbihpdGVtKXtcblx0XHRcdFx0cmV0dXJuIGl0ZW0udmFsdWUgIT09IG51bGw7XG5cdFx0XHR9LFxuXHRcdFx0bmV4dFBvaW50ID0gZnVuY3Rpb24ocG9pbnQsIGNvbGxlY3Rpb24sIGluZGV4KXtcblx0XHRcdFx0cmV0dXJuIGhlbHBlcnMuZmluZE5leHRXaGVyZShjb2xsZWN0aW9uLCBoYXNWYWx1ZSwgaW5kZXgpIHx8IHBvaW50O1xuXHRcdFx0fSxcblx0XHRcdHByZXZpb3VzUG9pbnQgPSBmdW5jdGlvbihwb2ludCwgY29sbGVjdGlvbiwgaW5kZXgpe1xuXHRcdFx0XHRyZXR1cm4gaGVscGVycy5maW5kUHJldmlvdXNXaGVyZShjb2xsZWN0aW9uLCBoYXNWYWx1ZSwgaW5kZXgpIHx8IHBvaW50O1xuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5zY2FsZS5kcmF3KGVhc2luZ0RlY2ltYWwpO1xuXG5cblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQpe1xuXHRcdFx0XHR2YXIgcG9pbnRzV2l0aFZhbHVlcyA9IGhlbHBlcnMud2hlcmUoZGF0YXNldC5wb2ludHMsIGhhc1ZhbHVlKTtcblxuXHRcdFx0XHQvL1RyYW5zaXRpb24gZWFjaCBwb2ludCBmaXJzdCBzbyB0aGF0IHRoZSBsaW5lIGFuZCBwb2ludCBkcmF3aW5nIGlzbid0IG91dCBvZiBzeW5jXG5cdFx0XHRcdC8vV2UgY2FuIHVzZSB0aGlzIGV4dHJhIGxvb3AgdG8gY2FsY3VsYXRlIHRoZSBjb250cm9sIHBvaW50cyBvZiB0aGlzIGRhdGFzZXQgYWxzbyBpbiB0aGlzIGxvb3BcblxuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldC5wb2ludHMsIGZ1bmN0aW9uKHBvaW50LCBpbmRleCl7XG5cdFx0XHRcdFx0aWYgKHBvaW50Lmhhc1ZhbHVlKCkpe1xuXHRcdFx0XHRcdFx0cG9pbnQudHJhbnNpdGlvbih7XG5cdFx0XHRcdFx0XHRcdHkgOiB0aGlzLnNjYWxlLmNhbGN1bGF0ZVkocG9pbnQudmFsdWUpLFxuXHRcdFx0XHRcdFx0XHR4IDogdGhpcy5zY2FsZS5jYWxjdWxhdGVYKGluZGV4KVxuXHRcdFx0XHRcdFx0fSwgZWFzaW5nRGVjaW1hbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LHRoaXMpO1xuXG5cblx0XHRcdFx0Ly8gQ29udHJvbCBwb2ludHMgbmVlZCB0byBiZSBjYWxjdWxhdGVkIGluIGEgc2VwZXJhdGUgbG9vcCwgYmVjYXVzZSB3ZSBuZWVkIHRvIGtub3cgdGhlIGN1cnJlbnQgeC95IG9mIHRoZSBwb2ludFxuXHRcdFx0XHQvLyBUaGlzIHdvdWxkIGNhdXNlIGlzc3VlcyB3aGVuIHRoZXJlIGlzIG5vIGFuaW1hdGlvbiwgYmVjYXVzZSB0aGUgeSBvZiB0aGUgbmV4dCBwb2ludCB3b3VsZCBiZSAwLCBzbyBiZXppZXJzIHdvdWxkIGJlIHNrZXdlZFxuXHRcdFx0XHRpZiAodGhpcy5vcHRpb25zLmJlemllckN1cnZlKXtcblx0XHRcdFx0XHRoZWxwZXJzLmVhY2gocG9pbnRzV2l0aFZhbHVlcywgZnVuY3Rpb24ocG9pbnQsIGluZGV4KXtcblx0XHRcdFx0XHRcdHZhciB0ZW5zaW9uID0gKGluZGV4ID4gMCAmJiBpbmRleCA8IHBvaW50c1dpdGhWYWx1ZXMubGVuZ3RoIC0gMSkgPyB0aGlzLm9wdGlvbnMuYmV6aWVyQ3VydmVUZW5zaW9uIDogMDtcblx0XHRcdFx0XHRcdHBvaW50LmNvbnRyb2xQb2ludHMgPSBoZWxwZXJzLnNwbGluZUN1cnZlKFxuXHRcdFx0XHRcdFx0XHRwcmV2aW91c1BvaW50KHBvaW50LCBwb2ludHNXaXRoVmFsdWVzLCBpbmRleCksXG5cdFx0XHRcdFx0XHRcdHBvaW50LFxuXHRcdFx0XHRcdFx0XHRuZXh0UG9pbnQocG9pbnQsIHBvaW50c1dpdGhWYWx1ZXMsIGluZGV4KSxcblx0XHRcdFx0XHRcdFx0dGVuc2lvblxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gUHJldmVudCB0aGUgYmV6aWVyIGdvaW5nIG91dHNpZGUgb2YgdGhlIGJvdW5kcyBvZiB0aGUgZ3JhcGhcblxuXHRcdFx0XHRcdFx0Ly8gQ2FwIHB1dGVyIGJlemllciBoYW5kbGVzIHRvIHRoZSB1cHBlci9sb3dlciBzY2FsZSBib3VuZHNcblx0XHRcdFx0XHRcdGlmIChwb2ludC5jb250cm9sUG9pbnRzLm91dGVyLnkgPiB0aGlzLnNjYWxlLmVuZFBvaW50KXtcblx0XHRcdFx0XHRcdFx0cG9pbnQuY29udHJvbFBvaW50cy5vdXRlci55ID0gdGhpcy5zY2FsZS5lbmRQb2ludDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgaWYgKHBvaW50LmNvbnRyb2xQb2ludHMub3V0ZXIueSA8IHRoaXMuc2NhbGUuc3RhcnRQb2ludCl7XG5cdFx0XHRcdFx0XHRcdHBvaW50LmNvbnRyb2xQb2ludHMub3V0ZXIueSA9IHRoaXMuc2NhbGUuc3RhcnRQb2ludDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gQ2FwIGlubmVyIGJlemllciBoYW5kbGVzIHRvIHRoZSB1cHBlci9sb3dlciBzY2FsZSBib3VuZHNcblx0XHRcdFx0XHRcdGlmIChwb2ludC5jb250cm9sUG9pbnRzLmlubmVyLnkgPiB0aGlzLnNjYWxlLmVuZFBvaW50KXtcblx0XHRcdFx0XHRcdFx0cG9pbnQuY29udHJvbFBvaW50cy5pbm5lci55ID0gdGhpcy5zY2FsZS5lbmRQb2ludDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgaWYgKHBvaW50LmNvbnRyb2xQb2ludHMuaW5uZXIueSA8IHRoaXMuc2NhbGUuc3RhcnRQb2ludCl7XG5cdFx0XHRcdFx0XHRcdHBvaW50LmNvbnRyb2xQb2ludHMuaW5uZXIueSA9IHRoaXMuc2NhbGUuc3RhcnRQb2ludDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LHRoaXMpO1xuXHRcdFx0XHR9XG5cblxuXHRcdFx0XHQvL0RyYXcgdGhlIGxpbmUgYmV0d2VlbiBhbGwgdGhlIHBvaW50c1xuXHRcdFx0XHRjdHgubGluZVdpZHRoID0gdGhpcy5vcHRpb25zLmRhdGFzZXRTdHJva2VXaWR0aDtcblx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gZGF0YXNldC5zdHJva2VDb2xvcjtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXG5cdFx0XHRcdGhlbHBlcnMuZWFjaChwb2ludHNXaXRoVmFsdWVzLCBmdW5jdGlvbihwb2ludCwgaW5kZXgpe1xuXHRcdFx0XHRcdGlmIChpbmRleCA9PT0gMCl7XG5cdFx0XHRcdFx0XHRjdHgubW92ZVRvKHBvaW50LngsIHBvaW50LnkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNle1xuXHRcdFx0XHRcdFx0aWYodGhpcy5vcHRpb25zLmJlemllckN1cnZlKXtcblx0XHRcdFx0XHRcdFx0dmFyIHByZXZpb3VzID0gcHJldmlvdXNQb2ludChwb2ludCwgcG9pbnRzV2l0aFZhbHVlcywgaW5kZXgpO1xuXG5cdFx0XHRcdFx0XHRcdGN0eC5iZXppZXJDdXJ2ZVRvKFxuXHRcdFx0XHRcdFx0XHRcdHByZXZpb3VzLmNvbnRyb2xQb2ludHMub3V0ZXIueCxcblx0XHRcdFx0XHRcdFx0XHRwcmV2aW91cy5jb250cm9sUG9pbnRzLm91dGVyLnksXG5cdFx0XHRcdFx0XHRcdFx0cG9pbnQuY29udHJvbFBvaW50cy5pbm5lci54LFxuXHRcdFx0XHRcdFx0XHRcdHBvaW50LmNvbnRyb2xQb2ludHMuaW5uZXIueSxcblx0XHRcdFx0XHRcdFx0XHRwb2ludC54LFxuXHRcdFx0XHRcdFx0XHRcdHBvaW50Lnlcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2V7XG5cdFx0XHRcdFx0XHRcdGN0eC5saW5lVG8ocG9pbnQueCxwb2ludC55KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIHRoaXMpO1xuXG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblxuXHRcdFx0XHRpZiAodGhpcy5vcHRpb25zLmRhdGFzZXRGaWxsICYmIHBvaW50c1dpdGhWYWx1ZXMubGVuZ3RoID4gMCl7XG5cdFx0XHRcdFx0Ly9Sb3VuZCBvZmYgdGhlIGxpbmUgYnkgZ29pbmcgdG8gdGhlIGJhc2Ugb2YgdGhlIGNoYXJ0LCBiYWNrIHRvIHRoZSBzdGFydCwgdGhlbiBmaWxsLlxuXHRcdFx0XHRcdGN0eC5saW5lVG8ocG9pbnRzV2l0aFZhbHVlc1twb2ludHNXaXRoVmFsdWVzLmxlbmd0aCAtIDFdLngsIHRoaXMuc2NhbGUuZW5kUG9pbnQpO1xuXHRcdFx0XHRcdGN0eC5saW5lVG8ocG9pbnRzV2l0aFZhbHVlc1swXS54LCB0aGlzLnNjYWxlLmVuZFBvaW50KTtcblx0XHRcdFx0XHRjdHguZmlsbFN0eWxlID0gZGF0YXNldC5maWxsQ29sb3I7XG5cdFx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL05vdyBkcmF3IHRoZSBwb2ludHMgb3ZlciB0aGUgbGluZVxuXHRcdFx0XHQvL0EgbGl0dGxlIGluZWZmaWNpZW50IGRvdWJsZSBsb29waW5nLCBidXQgYmV0dGVyIHRoYW4gdGhlIGxpbmVcblx0XHRcdFx0Ly9sYWdnaW5nIGJlaGluZCB0aGUgcG9pbnQgcG9zaXRpb25zXG5cdFx0XHRcdGhlbHBlcnMuZWFjaChwb2ludHNXaXRoVmFsdWVzLGZ1bmN0aW9uKHBvaW50KXtcblx0XHRcdFx0XHRwb2ludC5kcmF3KCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSx0aGlzKTtcblx0XHR9XG5cdH0pO1xuXG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpe1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgcm9vdCA9IHRoaXMsXG5cdFx0Q2hhcnQgPSByb290LkNoYXJ0LFxuXHRcdC8vQ2FjaGUgYSBsb2NhbCByZWZlcmVuY2UgdG8gQ2hhcnQuaGVscGVyc1xuXHRcdGhlbHBlcnMgPSBDaGFydC5oZWxwZXJzO1xuXG5cdHZhciBkZWZhdWx0Q29uZmlnID0ge1xuXHRcdC8vQm9vbGVhbiAtIFNob3cgYSBiYWNrZHJvcCB0byB0aGUgc2NhbGUgbGFiZWxcblx0XHRzY2FsZVNob3dMYWJlbEJhY2tkcm9wIDogdHJ1ZSxcblxuXHRcdC8vU3RyaW5nIC0gVGhlIGNvbG91ciBvZiB0aGUgbGFiZWwgYmFja2Ryb3Bcblx0XHRzY2FsZUJhY2tkcm9wQ29sb3IgOiBcInJnYmEoMjU1LDI1NSwyNTUsMC43NSlcIixcblxuXHRcdC8vIEJvb2xlYW4gLSBXaGV0aGVyIHRoZSBzY2FsZSBzaG91bGQgYmVnaW4gYXQgemVyb1xuXHRcdHNjYWxlQmVnaW5BdFplcm8gOiB0cnVlLFxuXG5cdFx0Ly9OdW1iZXIgLSBUaGUgYmFja2Ryb3AgcGFkZGluZyBhYm92ZSAmIGJlbG93IHRoZSBsYWJlbCBpbiBwaXhlbHNcblx0XHRzY2FsZUJhY2tkcm9wUGFkZGluZ1kgOiAyLFxuXG5cdFx0Ly9OdW1iZXIgLSBUaGUgYmFja2Ryb3AgcGFkZGluZyB0byB0aGUgc2lkZSBvZiB0aGUgbGFiZWwgaW4gcGl4ZWxzXG5cdFx0c2NhbGVCYWNrZHJvcFBhZGRpbmdYIDogMixcblxuXHRcdC8vQm9vbGVhbiAtIFNob3cgbGluZSBmb3IgZWFjaCB2YWx1ZSBpbiB0aGUgc2NhbGVcblx0XHRzY2FsZVNob3dMaW5lIDogdHJ1ZSxcblxuXHRcdC8vQm9vbGVhbiAtIFN0cm9rZSBhIGxpbmUgYXJvdW5kIGVhY2ggc2VnbWVudCBpbiB0aGUgY2hhcnRcblx0XHRzZWdtZW50U2hvd1N0cm9rZSA6IHRydWUsXG5cblx0XHQvL1N0cmluZyAtIFRoZSBjb2xvdXIgb2YgdGhlIHN0cm9rZSBvbiBlYWNoIHNlZ2VtZW50LlxuXHRcdHNlZ21lbnRTdHJva2VDb2xvciA6IFwiI2ZmZlwiLFxuXG5cdFx0Ly9OdW1iZXIgLSBUaGUgd2lkdGggb2YgdGhlIHN0cm9rZSB2YWx1ZSBpbiBwaXhlbHNcblx0XHRzZWdtZW50U3Ryb2tlV2lkdGggOiAyLFxuXG5cdFx0Ly9OdW1iZXIgLSBBbW91bnQgb2YgYW5pbWF0aW9uIHN0ZXBzXG5cdFx0YW5pbWF0aW9uU3RlcHMgOiAxMDAsXG5cblx0XHQvL1N0cmluZyAtIEFuaW1hdGlvbiBlYXNpbmcgZWZmZWN0LlxuXHRcdGFuaW1hdGlvbkVhc2luZyA6IFwiZWFzZU91dEJvdW5jZVwiLFxuXG5cdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0byBhbmltYXRlIHRoZSByb3RhdGlvbiBvZiB0aGUgY2hhcnRcblx0XHRhbmltYXRlUm90YXRlIDogdHJ1ZSxcblxuXHRcdC8vQm9vbGVhbiAtIFdoZXRoZXIgdG8gYW5pbWF0ZSBzY2FsaW5nIHRoZSBjaGFydCBmcm9tIHRoZSBjZW50cmVcblx0XHRhbmltYXRlU2NhbGUgOiBmYWxzZSxcblxuXHRcdC8vU3RyaW5nIC0gQSBsZWdlbmQgdGVtcGxhdGVcblx0XHRsZWdlbmRUZW1wbGF0ZSA6IFwiPHVsIGNsYXNzPVxcXCI8JT1uYW1lLnRvTG93ZXJDYXNlKCklPi1sZWdlbmRcXFwiPjwlIGZvciAodmFyIGk9MDsgaTxzZWdtZW50cy5sZW5ndGg7IGkrKyl7JT48bGk+PHNwYW4gc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6PCU9c2VnbWVudHNbaV0uZmlsbENvbG9yJT5cXFwiPjwvc3Bhbj48JWlmKHNlZ21lbnRzW2ldLmxhYmVsKXslPjwlPXNlZ21lbnRzW2ldLmxhYmVsJT48JX0lPjwvbGk+PCV9JT48L3VsPlwiXG5cdH07XG5cblxuXHRDaGFydC5UeXBlLmV4dGVuZCh7XG5cdFx0Ly9QYXNzaW5nIGluIGEgbmFtZSByZWdpc3RlcnMgdGhpcyBjaGFydCBpbiB0aGUgQ2hhcnQgbmFtZXNwYWNlXG5cdFx0bmFtZTogXCJQb2xhckFyZWFcIixcblx0XHQvL1Byb3ZpZGluZyBhIGRlZmF1bHRzIHdpbGwgYWxzbyByZWdpc3RlciB0aGUgZGVhZnVsdHMgaW4gdGhlIGNoYXJ0IG5hbWVzcGFjZVxuXHRcdGRlZmF1bHRzIDogZGVmYXVsdENvbmZpZyxcblx0XHQvL0luaXRpYWxpemUgaXMgZmlyZWQgd2hlbiB0aGUgY2hhcnQgaXMgaW5pdGlhbGl6ZWQgLSBEYXRhIGlzIHBhc3NlZCBpbiBhcyBhIHBhcmFtZXRlclxuXHRcdC8vQ29uZmlnIGlzIGF1dG9tYXRpY2FsbHkgbWVyZ2VkIGJ5IHRoZSBjb3JlIG9mIENoYXJ0LmpzLCBhbmQgaXMgYXZhaWxhYmxlIGF0IHRoaXMub3B0aW9uc1xuXHRcdGluaXRpYWxpemU6ICBmdW5jdGlvbihkYXRhKXtcblx0XHRcdHRoaXMuc2VnbWVudHMgPSBbXTtcblx0XHRcdC8vRGVjbGFyZSBzZWdtZW50IGNsYXNzIGFzIGEgY2hhcnQgaW5zdGFuY2Ugc3BlY2lmaWMgY2xhc3MsIHNvIGl0IGNhbiBzaGFyZSBwcm9wcyBmb3IgdGhpcyBpbnN0YW5jZVxuXHRcdFx0dGhpcy5TZWdtZW50QXJjID0gQ2hhcnQuQXJjLmV4dGVuZCh7XG5cdFx0XHRcdHNob3dTdHJva2UgOiB0aGlzLm9wdGlvbnMuc2VnbWVudFNob3dTdHJva2UsXG5cdFx0XHRcdHN0cm9rZVdpZHRoIDogdGhpcy5vcHRpb25zLnNlZ21lbnRTdHJva2VXaWR0aCxcblx0XHRcdFx0c3Ryb2tlQ29sb3IgOiB0aGlzLm9wdGlvbnMuc2VnbWVudFN0cm9rZUNvbG9yLFxuXHRcdFx0XHRjdHggOiB0aGlzLmNoYXJ0LmN0eCxcblx0XHRcdFx0aW5uZXJSYWRpdXMgOiAwLFxuXHRcdFx0XHR4IDogdGhpcy5jaGFydC53aWR0aC8yLFxuXHRcdFx0XHR5IDogdGhpcy5jaGFydC5oZWlnaHQvMlxuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLnNjYWxlID0gbmV3IENoYXJ0LlJhZGlhbFNjYWxlKHtcblx0XHRcdFx0ZGlzcGxheTogdGhpcy5vcHRpb25zLnNob3dTY2FsZSxcblx0XHRcdFx0Zm9udFN0eWxlOiB0aGlzLm9wdGlvbnMuc2NhbGVGb250U3R5bGUsXG5cdFx0XHRcdGZvbnRTaXplOiB0aGlzLm9wdGlvbnMuc2NhbGVGb250U2l6ZSxcblx0XHRcdFx0Zm9udEZhbWlseTogdGhpcy5vcHRpb25zLnNjYWxlRm9udEZhbWlseSxcblx0XHRcdFx0Zm9udENvbG9yOiB0aGlzLm9wdGlvbnMuc2NhbGVGb250Q29sb3IsXG5cdFx0XHRcdHNob3dMYWJlbHM6IHRoaXMub3B0aW9ucy5zY2FsZVNob3dMYWJlbHMsXG5cdFx0XHRcdHNob3dMYWJlbEJhY2tkcm9wOiB0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGFiZWxCYWNrZHJvcCxcblx0XHRcdFx0YmFja2Ryb3BDb2xvcjogdGhpcy5vcHRpb25zLnNjYWxlQmFja2Ryb3BDb2xvcixcblx0XHRcdFx0YmFja2Ryb3BQYWRkaW5nWSA6IHRoaXMub3B0aW9ucy5zY2FsZUJhY2tkcm9wUGFkZGluZ1ksXG5cdFx0XHRcdGJhY2tkcm9wUGFkZGluZ1g6IHRoaXMub3B0aW9ucy5zY2FsZUJhY2tkcm9wUGFkZGluZ1gsXG5cdFx0XHRcdGxpbmVXaWR0aDogKHRoaXMub3B0aW9ucy5zY2FsZVNob3dMaW5lKSA/IHRoaXMub3B0aW9ucy5zY2FsZUxpbmVXaWR0aCA6IDAsXG5cdFx0XHRcdGxpbmVDb2xvcjogdGhpcy5vcHRpb25zLnNjYWxlTGluZUNvbG9yLFxuXHRcdFx0XHRsaW5lQXJjOiB0cnVlLFxuXHRcdFx0XHR3aWR0aDogdGhpcy5jaGFydC53aWR0aCxcblx0XHRcdFx0aGVpZ2h0OiB0aGlzLmNoYXJ0LmhlaWdodCxcblx0XHRcdFx0eENlbnRlcjogdGhpcy5jaGFydC53aWR0aC8yLFxuXHRcdFx0XHR5Q2VudGVyOiB0aGlzLmNoYXJ0LmhlaWdodC8yLFxuXHRcdFx0XHRjdHggOiB0aGlzLmNoYXJ0LmN0eCxcblx0XHRcdFx0dGVtcGxhdGVTdHJpbmc6IHRoaXMub3B0aW9ucy5zY2FsZUxhYmVsLFxuXHRcdFx0XHR2YWx1ZXNDb3VudDogZGF0YS5sZW5ndGhcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnVwZGF0ZVNjYWxlUmFuZ2UoZGF0YSk7XG5cblx0XHRcdHRoaXMuc2NhbGUudXBkYXRlKCk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChkYXRhLGZ1bmN0aW9uKHNlZ21lbnQsaW5kZXgpe1xuXHRcdFx0XHR0aGlzLmFkZERhdGEoc2VnbWVudCxpbmRleCx0cnVlKTtcblx0XHRcdH0sdGhpcyk7XG5cblx0XHRcdC8vU2V0IHVwIHRvb2x0aXAgZXZlbnRzIG9uIHRoZSBjaGFydFxuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5zaG93VG9vbHRpcHMpe1xuXHRcdFx0XHRoZWxwZXJzLmJpbmRFdmVudHModGhpcywgdGhpcy5vcHRpb25zLnRvb2x0aXBFdmVudHMsIGZ1bmN0aW9uKGV2dCl7XG5cdFx0XHRcdFx0dmFyIGFjdGl2ZVNlZ21lbnRzID0gKGV2dC50eXBlICE9PSAnbW91c2VvdXQnKSA/IHRoaXMuZ2V0U2VnbWVudHNBdEV2ZW50KGV2dCkgOiBbXTtcblx0XHRcdFx0XHRoZWxwZXJzLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbihzZWdtZW50KXtcblx0XHRcdFx0XHRcdHNlZ21lbnQucmVzdG9yZShbXCJmaWxsQ29sb3JcIl0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGhlbHBlcnMuZWFjaChhY3RpdmVTZWdtZW50cyxmdW5jdGlvbihhY3RpdmVTZWdtZW50KXtcblx0XHRcdFx0XHRcdGFjdGl2ZVNlZ21lbnQuZmlsbENvbG9yID0gYWN0aXZlU2VnbWVudC5oaWdobGlnaHRDb2xvcjtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR0aGlzLnNob3dUb29sdGlwKGFjdGl2ZVNlZ21lbnRzKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cdFx0fSxcblx0XHRnZXRTZWdtZW50c0F0RXZlbnQgOiBmdW5jdGlvbihlKXtcblx0XHRcdHZhciBzZWdtZW50c0FycmF5ID0gW107XG5cblx0XHRcdHZhciBsb2NhdGlvbiA9IGhlbHBlcnMuZ2V0UmVsYXRpdmVQb3NpdGlvbihlKTtcblxuXHRcdFx0aGVscGVycy5lYWNoKHRoaXMuc2VnbWVudHMsZnVuY3Rpb24oc2VnbWVudCl7XG5cdFx0XHRcdGlmIChzZWdtZW50LmluUmFuZ2UobG9jYXRpb24ueCxsb2NhdGlvbi55KSkgc2VnbWVudHNBcnJheS5wdXNoKHNlZ21lbnQpO1xuXHRcdFx0fSx0aGlzKTtcblx0XHRcdHJldHVybiBzZWdtZW50c0FycmF5O1xuXHRcdH0sXG5cdFx0YWRkRGF0YSA6IGZ1bmN0aW9uKHNlZ21lbnQsIGF0SW5kZXgsIHNpbGVudCl7XG5cdFx0XHR2YXIgaW5kZXggPSBhdEluZGV4IHx8IHRoaXMuc2VnbWVudHMubGVuZ3RoO1xuXG5cdFx0XHR0aGlzLnNlZ21lbnRzLnNwbGljZShpbmRleCwgMCwgbmV3IHRoaXMuU2VnbWVudEFyYyh7XG5cdFx0XHRcdGZpbGxDb2xvcjogc2VnbWVudC5jb2xvcixcblx0XHRcdFx0aGlnaGxpZ2h0Q29sb3I6IHNlZ21lbnQuaGlnaGxpZ2h0IHx8IHNlZ21lbnQuY29sb3IsXG5cdFx0XHRcdGxhYmVsOiBzZWdtZW50LmxhYmVsLFxuXHRcdFx0XHR2YWx1ZTogc2VnbWVudC52YWx1ZSxcblx0XHRcdFx0b3V0ZXJSYWRpdXM6ICh0aGlzLm9wdGlvbnMuYW5pbWF0ZVNjYWxlKSA/IDAgOiB0aGlzLnNjYWxlLmNhbGN1bGF0ZUNlbnRlck9mZnNldChzZWdtZW50LnZhbHVlKSxcblx0XHRcdFx0Y2lyY3VtZmVyZW5jZTogKHRoaXMub3B0aW9ucy5hbmltYXRlUm90YXRlKSA/IDAgOiB0aGlzLnNjYWxlLmdldENpcmN1bWZlcmVuY2UoKSxcblx0XHRcdFx0c3RhcnRBbmdsZTogTWF0aC5QSSAqIDEuNVxuXHRcdFx0fSkpO1xuXHRcdFx0aWYgKCFzaWxlbnQpe1xuXHRcdFx0XHR0aGlzLnJlZmxvdygpO1xuXHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oYXRJbmRleCl7XG5cdFx0XHR2YXIgaW5kZXhUb0RlbGV0ZSA9IChoZWxwZXJzLmlzTnVtYmVyKGF0SW5kZXgpKSA/IGF0SW5kZXggOiB0aGlzLnNlZ21lbnRzLmxlbmd0aC0xO1xuXHRcdFx0dGhpcy5zZWdtZW50cy5zcGxpY2UoaW5kZXhUb0RlbGV0ZSwgMSk7XG5cdFx0XHR0aGlzLnJlZmxvdygpO1xuXHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHR9LFxuXHRcdGNhbGN1bGF0ZVRvdGFsOiBmdW5jdGlvbihkYXRhKXtcblx0XHRcdHRoaXMudG90YWwgPSAwO1xuXHRcdFx0aGVscGVycy5lYWNoKGRhdGEsZnVuY3Rpb24oc2VnbWVudCl7XG5cdFx0XHRcdHRoaXMudG90YWwgKz0gc2VnbWVudC52YWx1ZTtcblx0XHRcdH0sdGhpcyk7XG5cdFx0XHR0aGlzLnNjYWxlLnZhbHVlc0NvdW50ID0gdGhpcy5zZWdtZW50cy5sZW5ndGg7XG5cdFx0fSxcblx0XHR1cGRhdGVTY2FsZVJhbmdlOiBmdW5jdGlvbihkYXRhcG9pbnRzKXtcblx0XHRcdHZhciB2YWx1ZXNBcnJheSA9IFtdO1xuXHRcdFx0aGVscGVycy5lYWNoKGRhdGFwb2ludHMsZnVuY3Rpb24oc2VnbWVudCl7XG5cdFx0XHRcdHZhbHVlc0FycmF5LnB1c2goc2VnbWVudC52YWx1ZSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dmFyIHNjYWxlU2l6ZXMgPSAodGhpcy5vcHRpb25zLnNjYWxlT3ZlcnJpZGUpID9cblx0XHRcdFx0e1xuXHRcdFx0XHRcdHN0ZXBzOiB0aGlzLm9wdGlvbnMuc2NhbGVTdGVwcyxcblx0XHRcdFx0XHRzdGVwVmFsdWU6IHRoaXMub3B0aW9ucy5zY2FsZVN0ZXBXaWR0aCxcblx0XHRcdFx0XHRtaW46IHRoaXMub3B0aW9ucy5zY2FsZVN0YXJ0VmFsdWUsXG5cdFx0XHRcdFx0bWF4OiB0aGlzLm9wdGlvbnMuc2NhbGVTdGFydFZhbHVlICsgKHRoaXMub3B0aW9ucy5zY2FsZVN0ZXBzICogdGhpcy5vcHRpb25zLnNjYWxlU3RlcFdpZHRoKVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0aGVscGVycy5jYWxjdWxhdGVTY2FsZVJhbmdlKFxuXHRcdFx0XHRcdHZhbHVlc0FycmF5LFxuXHRcdFx0XHRcdGhlbHBlcnMubWluKFt0aGlzLmNoYXJ0LndpZHRoLCB0aGlzLmNoYXJ0LmhlaWdodF0pLzIsXG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsXG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLnNjYWxlQmVnaW5BdFplcm8sXG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLnNjYWxlSW50ZWdlcnNPbmx5XG5cdFx0XHRcdCk7XG5cblx0XHRcdGhlbHBlcnMuZXh0ZW5kKFxuXHRcdFx0XHR0aGlzLnNjYWxlLFxuXHRcdFx0XHRzY2FsZVNpemVzLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0c2l6ZTogaGVscGVycy5taW4oW3RoaXMuY2hhcnQud2lkdGgsIHRoaXMuY2hhcnQuaGVpZ2h0XSksXG5cdFx0XHRcdFx0eENlbnRlcjogdGhpcy5jaGFydC53aWR0aC8yLFxuXHRcdFx0XHRcdHlDZW50ZXI6IHRoaXMuY2hhcnQuaGVpZ2h0LzJcblx0XHRcdFx0fVxuXHRcdFx0KTtcblxuXHRcdH0sXG5cdFx0dXBkYXRlIDogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuY2FsY3VsYXRlVG90YWwodGhpcy5zZWdtZW50cyk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLnNlZ21lbnRzLGZ1bmN0aW9uKHNlZ21lbnQpe1xuXHRcdFx0XHRzZWdtZW50LnNhdmUoKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnJlZmxvdygpO1xuXHRcdFx0dGhpcy5yZW5kZXIoKTtcblx0XHR9LFxuXHRcdHJlZmxvdyA6IGZ1bmN0aW9uKCl7XG5cdFx0XHRoZWxwZXJzLmV4dGVuZCh0aGlzLlNlZ21lbnRBcmMucHJvdG90eXBlLHtcblx0XHRcdFx0eCA6IHRoaXMuY2hhcnQud2lkdGgvMixcblx0XHRcdFx0eSA6IHRoaXMuY2hhcnQuaGVpZ2h0LzJcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy51cGRhdGVTY2FsZVJhbmdlKHRoaXMuc2VnbWVudHMpO1xuXHRcdFx0dGhpcy5zY2FsZS51cGRhdGUoKTtcblxuXHRcdFx0aGVscGVycy5leHRlbmQodGhpcy5zY2FsZSx7XG5cdFx0XHRcdHhDZW50ZXI6IHRoaXMuY2hhcnQud2lkdGgvMixcblx0XHRcdFx0eUNlbnRlcjogdGhpcy5jaGFydC5oZWlnaHQvMlxuXHRcdFx0fSk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLnNlZ21lbnRzLCBmdW5jdGlvbihzZWdtZW50KXtcblx0XHRcdFx0c2VnbWVudC51cGRhdGUoe1xuXHRcdFx0XHRcdG91dGVyUmFkaXVzIDogdGhpcy5zY2FsZS5jYWxjdWxhdGVDZW50ZXJPZmZzZXQoc2VnbWVudC52YWx1ZSlcblx0XHRcdFx0fSk7XG5cdFx0XHR9LCB0aGlzKTtcblxuXHRcdH0sXG5cdFx0ZHJhdyA6IGZ1bmN0aW9uKGVhc2Upe1xuXHRcdFx0dmFyIGVhc2luZ0RlY2ltYWwgPSBlYXNlIHx8IDE7XG5cdFx0XHQvL0NsZWFyICYgZHJhdyB0aGUgY2FudmFzXG5cdFx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0XHRoZWxwZXJzLmVhY2godGhpcy5zZWdtZW50cyxmdW5jdGlvbihzZWdtZW50LCBpbmRleCl7XG5cdFx0XHRcdHNlZ21lbnQudHJhbnNpdGlvbih7XG5cdFx0XHRcdFx0Y2lyY3VtZmVyZW5jZSA6IHRoaXMuc2NhbGUuZ2V0Q2lyY3VtZmVyZW5jZSgpLFxuXHRcdFx0XHRcdG91dGVyUmFkaXVzIDogdGhpcy5zY2FsZS5jYWxjdWxhdGVDZW50ZXJPZmZzZXQoc2VnbWVudC52YWx1ZSlcblx0XHRcdFx0fSxlYXNpbmdEZWNpbWFsKTtcblxuXHRcdFx0XHRzZWdtZW50LmVuZEFuZ2xlID0gc2VnbWVudC5zdGFydEFuZ2xlICsgc2VnbWVudC5jaXJjdW1mZXJlbmNlO1xuXG5cdFx0XHRcdC8vIElmIHdlJ3ZlIHJlbW92ZWQgdGhlIGZpcnN0IHNlZ21lbnQgd2UgbmVlZCB0byBzZXQgdGhlIGZpcnN0IG9uZSB0b1xuXHRcdFx0XHQvLyBzdGFydCBhdCB0aGUgdG9wLlxuXHRcdFx0XHRpZiAoaW5kZXggPT09IDApe1xuXHRcdFx0XHRcdHNlZ21lbnQuc3RhcnRBbmdsZSA9IE1hdGguUEkgKiAxLjU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL0NoZWNrIHRvIHNlZSBpZiBpdCdzIHRoZSBsYXN0IHNlZ21lbnQsIGlmIG5vdCBnZXQgdGhlIG5leHQgYW5kIHVwZGF0ZSB0aGUgc3RhcnQgYW5nbGVcblx0XHRcdFx0aWYgKGluZGV4IDwgdGhpcy5zZWdtZW50cy5sZW5ndGggLSAxKXtcblx0XHRcdFx0XHR0aGlzLnNlZ21lbnRzW2luZGV4KzFdLnN0YXJ0QW5nbGUgPSBzZWdtZW50LmVuZEFuZ2xlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlZ21lbnQuZHJhdygpO1xuXHRcdFx0fSwgdGhpcyk7XG5cdFx0XHR0aGlzLnNjYWxlLmRyYXcoKTtcblx0XHR9XG5cdH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuKGZ1bmN0aW9uKCl7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciByb290ID0gdGhpcyxcblx0XHRDaGFydCA9IHJvb3QuQ2hhcnQsXG5cdFx0aGVscGVycyA9IENoYXJ0LmhlbHBlcnM7XG5cblxuXG5cdENoYXJ0LlR5cGUuZXh0ZW5kKHtcblx0XHRuYW1lOiBcIlJhZGFyXCIsXG5cdFx0ZGVmYXVsdHM6e1xuXHRcdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0byBzaG93IGxpbmVzIGZvciBlYWNoIHNjYWxlIHBvaW50XG5cdFx0XHRzY2FsZVNob3dMaW5lIDogdHJ1ZSxcblxuXHRcdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB3ZSBzaG93IHRoZSBhbmdsZSBsaW5lcyBvdXQgb2YgdGhlIHJhZGFyXG5cdFx0XHRhbmdsZVNob3dMaW5lT3V0IDogdHJ1ZSxcblxuXHRcdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0byBzaG93IGxhYmVscyBvbiB0aGUgc2NhbGVcblx0XHRcdHNjYWxlU2hvd0xhYmVscyA6IGZhbHNlLFxuXG5cdFx0XHQvLyBCb29sZWFuIC0gV2hldGhlciB0aGUgc2NhbGUgc2hvdWxkIGJlZ2luIGF0IHplcm9cblx0XHRcdHNjYWxlQmVnaW5BdFplcm8gOiB0cnVlLFxuXG5cdFx0XHQvL1N0cmluZyAtIENvbG91ciBvZiB0aGUgYW5nbGUgbGluZVxuXHRcdFx0YW5nbGVMaW5lQ29sb3IgOiBcInJnYmEoMCwwLDAsLjEpXCIsXG5cblx0XHRcdC8vTnVtYmVyIC0gUGl4ZWwgd2lkdGggb2YgdGhlIGFuZ2xlIGxpbmVcblx0XHRcdGFuZ2xlTGluZVdpZHRoIDogMSxcblxuXHRcdFx0Ly9TdHJpbmcgLSBQb2ludCBsYWJlbCBmb250IGRlY2xhcmF0aW9uXG5cdFx0XHRwb2ludExhYmVsRm9udEZhbWlseSA6IFwiJ0FyaWFsJ1wiLFxuXG5cdFx0XHQvL1N0cmluZyAtIFBvaW50IGxhYmVsIGZvbnQgd2VpZ2h0XG5cdFx0XHRwb2ludExhYmVsRm9udFN0eWxlIDogXCJub3JtYWxcIixcblxuXHRcdFx0Ly9OdW1iZXIgLSBQb2ludCBsYWJlbCBmb250IHNpemUgaW4gcGl4ZWxzXG5cdFx0XHRwb2ludExhYmVsRm9udFNpemUgOiAxMCxcblxuXHRcdFx0Ly9TdHJpbmcgLSBQb2ludCBsYWJlbCBmb250IGNvbG91clxuXHRcdFx0cG9pbnRMYWJlbEZvbnRDb2xvciA6IFwiIzY2NlwiLFxuXG5cdFx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIHNob3cgYSBkb3QgZm9yIGVhY2ggcG9pbnRcblx0XHRcdHBvaW50RG90IDogdHJ1ZSxcblxuXHRcdFx0Ly9OdW1iZXIgLSBSYWRpdXMgb2YgZWFjaCBwb2ludCBkb3QgaW4gcGl4ZWxzXG5cdFx0XHRwb2ludERvdFJhZGl1cyA6IDMsXG5cblx0XHRcdC8vTnVtYmVyIC0gUGl4ZWwgd2lkdGggb2YgcG9pbnQgZG90IHN0cm9rZVxuXHRcdFx0cG9pbnREb3RTdHJva2VXaWR0aCA6IDEsXG5cblx0XHRcdC8vTnVtYmVyIC0gYW1vdW50IGV4dHJhIHRvIGFkZCB0byB0aGUgcmFkaXVzIHRvIGNhdGVyIGZvciBoaXQgZGV0ZWN0aW9uIG91dHNpZGUgdGhlIGRyYXduIHBvaW50XG5cdFx0XHRwb2ludEhpdERldGVjdGlvblJhZGl1cyA6IDIwLFxuXG5cdFx0XHQvL0Jvb2xlYW4gLSBXaGV0aGVyIHRvIHNob3cgYSBzdHJva2UgZm9yIGRhdGFzZXRzXG5cdFx0XHRkYXRhc2V0U3Ryb2tlIDogdHJ1ZSxcblxuXHRcdFx0Ly9OdW1iZXIgLSBQaXhlbCB3aWR0aCBvZiBkYXRhc2V0IHN0cm9rZVxuXHRcdFx0ZGF0YXNldFN0cm9rZVdpZHRoIDogMixcblxuXHRcdFx0Ly9Cb29sZWFuIC0gV2hldGhlciB0byBmaWxsIHRoZSBkYXRhc2V0IHdpdGggYSBjb2xvdXJcblx0XHRcdGRhdGFzZXRGaWxsIDogdHJ1ZSxcblxuXHRcdFx0Ly9TdHJpbmcgLSBBIGxlZ2VuZCB0ZW1wbGF0ZVxuXHRcdFx0bGVnZW5kVGVtcGxhdGUgOiBcIjx1bCBjbGFzcz1cXFwiPCU9bmFtZS50b0xvd2VyQ2FzZSgpJT4tbGVnZW5kXFxcIj48JSBmb3IgKHZhciBpPTA7IGk8ZGF0YXNldHMubGVuZ3RoOyBpKyspeyU+PGxpPjxzcGFuIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOjwlPWRhdGFzZXRzW2ldLnN0cm9rZUNvbG9yJT5cXFwiPjwvc3Bhbj48JWlmKGRhdGFzZXRzW2ldLmxhYmVsKXslPjwlPWRhdGFzZXRzW2ldLmxhYmVsJT48JX0lPjwvbGk+PCV9JT48L3VsPlwiXG5cblx0XHR9LFxuXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHR0aGlzLlBvaW50Q2xhc3MgPSBDaGFydC5Qb2ludC5leHRlbmQoe1xuXHRcdFx0XHRzdHJva2VXaWR0aCA6IHRoaXMub3B0aW9ucy5wb2ludERvdFN0cm9rZVdpZHRoLFxuXHRcdFx0XHRyYWRpdXMgOiB0aGlzLm9wdGlvbnMucG9pbnREb3RSYWRpdXMsXG5cdFx0XHRcdGRpc3BsYXk6IHRoaXMub3B0aW9ucy5wb2ludERvdCxcblx0XHRcdFx0aGl0RGV0ZWN0aW9uUmFkaXVzIDogdGhpcy5vcHRpb25zLnBvaW50SGl0RGV0ZWN0aW9uUmFkaXVzLFxuXHRcdFx0XHRjdHggOiB0aGlzLmNoYXJ0LmN0eFxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuZGF0YXNldHMgPSBbXTtcblxuXHRcdFx0dGhpcy5idWlsZFNjYWxlKGRhdGEpO1xuXG5cdFx0XHQvL1NldCB1cCB0b29sdGlwIGV2ZW50cyBvbiB0aGUgY2hhcnRcblx0XHRcdGlmICh0aGlzLm9wdGlvbnMuc2hvd1Rvb2x0aXBzKXtcblx0XHRcdFx0aGVscGVycy5iaW5kRXZlbnRzKHRoaXMsIHRoaXMub3B0aW9ucy50b29sdGlwRXZlbnRzLCBmdW5jdGlvbihldnQpe1xuXHRcdFx0XHRcdHZhciBhY3RpdmVQb2ludHNDb2xsZWN0aW9uID0gKGV2dC50eXBlICE9PSAnbW91c2VvdXQnKSA/IHRoaXMuZ2V0UG9pbnRzQXRFdmVudChldnQpIDogW107XG5cblx0XHRcdFx0XHR0aGlzLmVhY2hQb2ludHMoZnVuY3Rpb24ocG9pbnQpe1xuXHRcdFx0XHRcdFx0cG9pbnQucmVzdG9yZShbJ2ZpbGxDb2xvcicsICdzdHJva2VDb2xvciddKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRoZWxwZXJzLmVhY2goYWN0aXZlUG9pbnRzQ29sbGVjdGlvbiwgZnVuY3Rpb24oYWN0aXZlUG9pbnQpe1xuXHRcdFx0XHRcdFx0YWN0aXZlUG9pbnQuZmlsbENvbG9yID0gYWN0aXZlUG9pbnQuaGlnaGxpZ2h0RmlsbDtcblx0XHRcdFx0XHRcdGFjdGl2ZVBvaW50LnN0cm9rZUNvbG9yID0gYWN0aXZlUG9pbnQuaGlnaGxpZ2h0U3Ryb2tlO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0dGhpcy5zaG93VG9vbHRpcChhY3RpdmVQb2ludHNDb2xsZWN0aW9uKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vSXRlcmF0ZSB0aHJvdWdoIGVhY2ggb2YgdGhlIGRhdGFzZXRzLCBhbmQgYnVpbGQgdGhpcyBpbnRvIGEgcHJvcGVydHkgb2YgdGhlIGNoYXJ0XG5cdFx0XHRoZWxwZXJzLmVhY2goZGF0YS5kYXRhc2V0cyxmdW5jdGlvbihkYXRhc2V0KXtcblxuXHRcdFx0XHR2YXIgZGF0YXNldE9iamVjdCA9IHtcblx0XHRcdFx0XHRsYWJlbDogZGF0YXNldC5sYWJlbCB8fCBudWxsLFxuXHRcdFx0XHRcdGZpbGxDb2xvciA6IGRhdGFzZXQuZmlsbENvbG9yLFxuXHRcdFx0XHRcdHN0cm9rZUNvbG9yIDogZGF0YXNldC5zdHJva2VDb2xvcixcblx0XHRcdFx0XHRwb2ludENvbG9yIDogZGF0YXNldC5wb2ludENvbG9yLFxuXHRcdFx0XHRcdHBvaW50U3Ryb2tlQ29sb3IgOiBkYXRhc2V0LnBvaW50U3Ryb2tlQ29sb3IsXG5cdFx0XHRcdFx0cG9pbnRzIDogW11cblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLmRhdGFzZXRzLnB1c2goZGF0YXNldE9iamVjdCk7XG5cblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQuZGF0YSxmdW5jdGlvbihkYXRhUG9pbnQsaW5kZXgpe1xuXHRcdFx0XHRcdC8vQWRkIGEgbmV3IHBvaW50IGZvciBlYWNoIHBpZWNlIG9mIGRhdGEsIHBhc3NpbmcgYW55IHJlcXVpcmVkIGRhdGEgdG8gZHJhdy5cblx0XHRcdFx0XHR2YXIgcG9pbnRQb3NpdGlvbjtcblx0XHRcdFx0XHRpZiAoIXRoaXMuc2NhbGUuYW5pbWF0aW9uKXtcblx0XHRcdFx0XHRcdHBvaW50UG9zaXRpb24gPSB0aGlzLnNjYWxlLmdldFBvaW50UG9zaXRpb24oaW5kZXgsIHRoaXMuc2NhbGUuY2FsY3VsYXRlQ2VudGVyT2Zmc2V0KGRhdGFQb2ludCkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhc2V0T2JqZWN0LnBvaW50cy5wdXNoKG5ldyB0aGlzLlBvaW50Q2xhc3Moe1xuXHRcdFx0XHRcdFx0dmFsdWUgOiBkYXRhUG9pbnQsXG5cdFx0XHRcdFx0XHRsYWJlbCA6IGRhdGEubGFiZWxzW2luZGV4XSxcblx0XHRcdFx0XHRcdGRhdGFzZXRMYWJlbDogZGF0YXNldC5sYWJlbCxcblx0XHRcdFx0XHRcdHg6ICh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uKSA/IHRoaXMuc2NhbGUueENlbnRlciA6IHBvaW50UG9zaXRpb24ueCxcblx0XHRcdFx0XHRcdHk6ICh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uKSA/IHRoaXMuc2NhbGUueUNlbnRlciA6IHBvaW50UG9zaXRpb24ueSxcblx0XHRcdFx0XHRcdHN0cm9rZUNvbG9yIDogZGF0YXNldC5wb2ludFN0cm9rZUNvbG9yLFxuXHRcdFx0XHRcdFx0ZmlsbENvbG9yIDogZGF0YXNldC5wb2ludENvbG9yLFxuXHRcdFx0XHRcdFx0aGlnaGxpZ2h0RmlsbCA6IGRhdGFzZXQucG9pbnRIaWdobGlnaHRGaWxsIHx8IGRhdGFzZXQucG9pbnRDb2xvcixcblx0XHRcdFx0XHRcdGhpZ2hsaWdodFN0cm9rZSA6IGRhdGFzZXQucG9pbnRIaWdobGlnaHRTdHJva2UgfHwgZGF0YXNldC5wb2ludFN0cm9rZUNvbG9yXG5cdFx0XHRcdFx0fSkpO1xuXHRcdFx0XHR9LHRoaXMpO1xuXG5cdFx0XHR9LHRoaXMpO1xuXG5cdFx0XHR0aGlzLnJlbmRlcigpO1xuXHRcdH0sXG5cdFx0ZWFjaFBvaW50cyA6IGZ1bmN0aW9uKGNhbGxiYWNrKXtcblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQpe1xuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldC5wb2ludHMsY2FsbGJhY2ssdGhpcyk7XG5cdFx0XHR9LHRoaXMpO1xuXHRcdH0sXG5cblx0XHRnZXRQb2ludHNBdEV2ZW50IDogZnVuY3Rpb24oZXZ0KXtcblx0XHRcdHZhciBtb3VzZVBvc2l0aW9uID0gaGVscGVycy5nZXRSZWxhdGl2ZVBvc2l0aW9uKGV2dCksXG5cdFx0XHRcdGZyb21DZW50ZXIgPSBoZWxwZXJzLmdldEFuZ2xlRnJvbVBvaW50KHtcblx0XHRcdFx0XHR4OiB0aGlzLnNjYWxlLnhDZW50ZXIsXG5cdFx0XHRcdFx0eTogdGhpcy5zY2FsZS55Q2VudGVyXG5cdFx0XHRcdH0sIG1vdXNlUG9zaXRpb24pO1xuXG5cdFx0XHR2YXIgYW5nbGVQZXJJbmRleCA9IChNYXRoLlBJICogMikgL3RoaXMuc2NhbGUudmFsdWVzQ291bnQsXG5cdFx0XHRcdHBvaW50SW5kZXggPSBNYXRoLnJvdW5kKChmcm9tQ2VudGVyLmFuZ2xlIC0gTWF0aC5QSSAqIDEuNSkgLyBhbmdsZVBlckluZGV4KSxcblx0XHRcdFx0YWN0aXZlUG9pbnRzQ29sbGVjdGlvbiA9IFtdO1xuXG5cdFx0XHQvLyBJZiB3ZSdyZSBhdCB0aGUgdG9wLCBtYWtlIHRoZSBwb2ludEluZGV4IDAgdG8gZ2V0IHRoZSBmaXJzdCBvZiB0aGUgYXJyYXkuXG5cdFx0XHRpZiAocG9pbnRJbmRleCA+PSB0aGlzLnNjYWxlLnZhbHVlc0NvdW50IHx8IHBvaW50SW5kZXggPCAwKXtcblx0XHRcdFx0cG9pbnRJbmRleCA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChmcm9tQ2VudGVyLmRpc3RhbmNlIDw9IHRoaXMuc2NhbGUuZHJhd2luZ0FyZWEpe1xuXHRcdFx0XHRoZWxwZXJzLmVhY2godGhpcy5kYXRhc2V0cywgZnVuY3Rpb24oZGF0YXNldCl7XG5cdFx0XHRcdFx0YWN0aXZlUG9pbnRzQ29sbGVjdGlvbi5wdXNoKGRhdGFzZXQucG9pbnRzW3BvaW50SW5kZXhdKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhY3RpdmVQb2ludHNDb2xsZWN0aW9uO1xuXHRcdH0sXG5cblx0XHRidWlsZFNjYWxlIDogZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHR0aGlzLnNjYWxlID0gbmV3IENoYXJ0LlJhZGlhbFNjYWxlKHtcblx0XHRcdFx0ZGlzcGxheTogdGhpcy5vcHRpb25zLnNob3dTY2FsZSxcblx0XHRcdFx0Zm9udFN0eWxlOiB0aGlzLm9wdGlvbnMuc2NhbGVGb250U3R5bGUsXG5cdFx0XHRcdGZvbnRTaXplOiB0aGlzLm9wdGlvbnMuc2NhbGVGb250U2l6ZSxcblx0XHRcdFx0Zm9udEZhbWlseTogdGhpcy5vcHRpb25zLnNjYWxlRm9udEZhbWlseSxcblx0XHRcdFx0Zm9udENvbG9yOiB0aGlzLm9wdGlvbnMuc2NhbGVGb250Q29sb3IsXG5cdFx0XHRcdHNob3dMYWJlbHM6IHRoaXMub3B0aW9ucy5zY2FsZVNob3dMYWJlbHMsXG5cdFx0XHRcdHNob3dMYWJlbEJhY2tkcm9wOiB0aGlzLm9wdGlvbnMuc2NhbGVTaG93TGFiZWxCYWNrZHJvcCxcblx0XHRcdFx0YmFja2Ryb3BDb2xvcjogdGhpcy5vcHRpb25zLnNjYWxlQmFja2Ryb3BDb2xvcixcblx0XHRcdFx0YmFja2Ryb3BQYWRkaW5nWSA6IHRoaXMub3B0aW9ucy5zY2FsZUJhY2tkcm9wUGFkZGluZ1ksXG5cdFx0XHRcdGJhY2tkcm9wUGFkZGluZ1g6IHRoaXMub3B0aW9ucy5zY2FsZUJhY2tkcm9wUGFkZGluZ1gsXG5cdFx0XHRcdGxpbmVXaWR0aDogKHRoaXMub3B0aW9ucy5zY2FsZVNob3dMaW5lKSA/IHRoaXMub3B0aW9ucy5zY2FsZUxpbmVXaWR0aCA6IDAsXG5cdFx0XHRcdGxpbmVDb2xvcjogdGhpcy5vcHRpb25zLnNjYWxlTGluZUNvbG9yLFxuXHRcdFx0XHRhbmdsZUxpbmVDb2xvciA6IHRoaXMub3B0aW9ucy5hbmdsZUxpbmVDb2xvcixcblx0XHRcdFx0YW5nbGVMaW5lV2lkdGggOiAodGhpcy5vcHRpb25zLmFuZ2xlU2hvd0xpbmVPdXQpID8gdGhpcy5vcHRpb25zLmFuZ2xlTGluZVdpZHRoIDogMCxcblx0XHRcdFx0Ly8gUG9pbnQgbGFiZWxzIGF0IHRoZSBlZGdlIG9mIGVhY2ggbGluZVxuXHRcdFx0XHRwb2ludExhYmVsRm9udENvbG9yIDogdGhpcy5vcHRpb25zLnBvaW50TGFiZWxGb250Q29sb3IsXG5cdFx0XHRcdHBvaW50TGFiZWxGb250U2l6ZSA6IHRoaXMub3B0aW9ucy5wb2ludExhYmVsRm9udFNpemUsXG5cdFx0XHRcdHBvaW50TGFiZWxGb250RmFtaWx5IDogdGhpcy5vcHRpb25zLnBvaW50TGFiZWxGb250RmFtaWx5LFxuXHRcdFx0XHRwb2ludExhYmVsRm9udFN0eWxlIDogdGhpcy5vcHRpb25zLnBvaW50TGFiZWxGb250U3R5bGUsXG5cdFx0XHRcdGhlaWdodCA6IHRoaXMuY2hhcnQuaGVpZ2h0LFxuXHRcdFx0XHR3aWR0aDogdGhpcy5jaGFydC53aWR0aCxcblx0XHRcdFx0eENlbnRlcjogdGhpcy5jaGFydC53aWR0aC8yLFxuXHRcdFx0XHR5Q2VudGVyOiB0aGlzLmNoYXJ0LmhlaWdodC8yLFxuXHRcdFx0XHRjdHggOiB0aGlzLmNoYXJ0LmN0eCxcblx0XHRcdFx0dGVtcGxhdGVTdHJpbmc6IHRoaXMub3B0aW9ucy5zY2FsZUxhYmVsLFxuXHRcdFx0XHRsYWJlbHM6IGRhdGEubGFiZWxzLFxuXHRcdFx0XHR2YWx1ZXNDb3VudDogZGF0YS5kYXRhc2V0c1swXS5kYXRhLmxlbmd0aFxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuc2NhbGUuc2V0U2NhbGVTaXplKCk7XG5cdFx0XHR0aGlzLnVwZGF0ZVNjYWxlUmFuZ2UoZGF0YS5kYXRhc2V0cyk7XG5cdFx0XHR0aGlzLnNjYWxlLmJ1aWxkWUxhYmVscygpO1xuXHRcdH0sXG5cdFx0dXBkYXRlU2NhbGVSYW5nZTogZnVuY3Rpb24oZGF0YXNldHMpe1xuXHRcdFx0dmFyIHZhbHVlc0FycmF5ID0gKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciB0b3RhbERhdGFBcnJheSA9IFtdO1xuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldHMsZnVuY3Rpb24oZGF0YXNldCl7XG5cdFx0XHRcdFx0aWYgKGRhdGFzZXQuZGF0YSl7XG5cdFx0XHRcdFx0XHR0b3RhbERhdGFBcnJheSA9IHRvdGFsRGF0YUFycmF5LmNvbmNhdChkYXRhc2V0LmRhdGEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LnBvaW50cywgZnVuY3Rpb24ocG9pbnQpe1xuXHRcdFx0XHRcdFx0XHR0b3RhbERhdGFBcnJheS5wdXNoKHBvaW50LnZhbHVlKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiB0b3RhbERhdGFBcnJheTtcblx0XHRcdH0pKCk7XG5cblxuXHRcdFx0dmFyIHNjYWxlU2l6ZXMgPSAodGhpcy5vcHRpb25zLnNjYWxlT3ZlcnJpZGUpID9cblx0XHRcdFx0e1xuXHRcdFx0XHRcdHN0ZXBzOiB0aGlzLm9wdGlvbnMuc2NhbGVTdGVwcyxcblx0XHRcdFx0XHRzdGVwVmFsdWU6IHRoaXMub3B0aW9ucy5zY2FsZVN0ZXBXaWR0aCxcblx0XHRcdFx0XHRtaW46IHRoaXMub3B0aW9ucy5zY2FsZVN0YXJ0VmFsdWUsXG5cdFx0XHRcdFx0bWF4OiB0aGlzLm9wdGlvbnMuc2NhbGVTdGFydFZhbHVlICsgKHRoaXMub3B0aW9ucy5zY2FsZVN0ZXBzICogdGhpcy5vcHRpb25zLnNjYWxlU3RlcFdpZHRoKVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0aGVscGVycy5jYWxjdWxhdGVTY2FsZVJhbmdlKFxuXHRcdFx0XHRcdHZhbHVlc0FycmF5LFxuXHRcdFx0XHRcdGhlbHBlcnMubWluKFt0aGlzLmNoYXJ0LndpZHRoLCB0aGlzLmNoYXJ0LmhlaWdodF0pLzIsXG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLnNjYWxlRm9udFNpemUsXG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLnNjYWxlQmVnaW5BdFplcm8sXG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLnNjYWxlSW50ZWdlcnNPbmx5XG5cdFx0XHRcdCk7XG5cblx0XHRcdGhlbHBlcnMuZXh0ZW5kKFxuXHRcdFx0XHR0aGlzLnNjYWxlLFxuXHRcdFx0XHRzY2FsZVNpemVzXG5cdFx0XHQpO1xuXG5cdFx0fSxcblx0XHRhZGREYXRhIDogZnVuY3Rpb24odmFsdWVzQXJyYXksbGFiZWwpe1xuXHRcdFx0Ly9NYXAgdGhlIHZhbHVlcyBhcnJheSBmb3IgZWFjaCBvZiB0aGUgZGF0YXNldHNcblx0XHRcdHRoaXMuc2NhbGUudmFsdWVzQ291bnQrKztcblx0XHRcdGhlbHBlcnMuZWFjaCh2YWx1ZXNBcnJheSxmdW5jdGlvbih2YWx1ZSxkYXRhc2V0SW5kZXgpe1xuXHRcdFx0XHR2YXIgcG9pbnRQb3NpdGlvbiA9IHRoaXMuc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbih0aGlzLnNjYWxlLnZhbHVlc0NvdW50LCB0aGlzLnNjYWxlLmNhbGN1bGF0ZUNlbnRlck9mZnNldCh2YWx1ZSkpO1xuXHRcdFx0XHR0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0ucG9pbnRzLnB1c2gobmV3IHRoaXMuUG9pbnRDbGFzcyh7XG5cdFx0XHRcdFx0dmFsdWUgOiB2YWx1ZSxcblx0XHRcdFx0XHRsYWJlbCA6IGxhYmVsLFxuXHRcdFx0XHRcdHg6IHBvaW50UG9zaXRpb24ueCxcblx0XHRcdFx0XHR5OiBwb2ludFBvc2l0aW9uLnksXG5cdFx0XHRcdFx0c3Ryb2tlQ29sb3IgOiB0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0ucG9pbnRTdHJva2VDb2xvcixcblx0XHRcdFx0XHRmaWxsQ29sb3IgOiB0aGlzLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0ucG9pbnRDb2xvclxuXHRcdFx0XHR9KSk7XG5cdFx0XHR9LHRoaXMpO1xuXG5cdFx0XHR0aGlzLnNjYWxlLmxhYmVscy5wdXNoKGxhYmVsKTtcblxuXHRcdFx0dGhpcy5yZWZsb3coKTtcblxuXHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHR9LFxuXHRcdHJlbW92ZURhdGEgOiBmdW5jdGlvbigpe1xuXHRcdFx0dGhpcy5zY2FsZS52YWx1ZXNDb3VudC0tO1xuXHRcdFx0dGhpcy5zY2FsZS5sYWJlbHMuc2hpZnQoKTtcblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQpe1xuXHRcdFx0XHRkYXRhc2V0LnBvaW50cy5zaGlmdCgpO1xuXHRcdFx0fSx0aGlzKTtcblx0XHRcdHRoaXMucmVmbG93KCk7XG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdH0sXG5cdFx0dXBkYXRlIDogZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuZWFjaFBvaW50cyhmdW5jdGlvbihwb2ludCl7XG5cdFx0XHRcdHBvaW50LnNhdmUoKTtcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5yZWZsb3coKTtcblx0XHRcdHRoaXMucmVuZGVyKCk7XG5cdFx0fSxcblx0XHRyZWZsb3c6IGZ1bmN0aW9uKCl7XG5cdFx0XHRoZWxwZXJzLmV4dGVuZCh0aGlzLnNjYWxlLCB7XG5cdFx0XHRcdHdpZHRoIDogdGhpcy5jaGFydC53aWR0aCxcblx0XHRcdFx0aGVpZ2h0OiB0aGlzLmNoYXJ0LmhlaWdodCxcblx0XHRcdFx0c2l6ZSA6IGhlbHBlcnMubWluKFt0aGlzLmNoYXJ0LndpZHRoLCB0aGlzLmNoYXJ0LmhlaWdodF0pLFxuXHRcdFx0XHR4Q2VudGVyOiB0aGlzLmNoYXJ0LndpZHRoLzIsXG5cdFx0XHRcdHlDZW50ZXI6IHRoaXMuY2hhcnQuaGVpZ2h0LzJcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy51cGRhdGVTY2FsZVJhbmdlKHRoaXMuZGF0YXNldHMpO1xuXHRcdFx0dGhpcy5zY2FsZS5zZXRTY2FsZVNpemUoKTtcblx0XHRcdHRoaXMuc2NhbGUuYnVpbGRZTGFiZWxzKCk7XG5cdFx0fSxcblx0XHRkcmF3IDogZnVuY3Rpb24oZWFzZSl7XG5cdFx0XHR2YXIgZWFzZURlY2ltYWwgPSBlYXNlIHx8IDEsXG5cdFx0XHRcdGN0eCA9IHRoaXMuY2hhcnQuY3R4O1xuXHRcdFx0dGhpcy5jbGVhcigpO1xuXHRcdFx0dGhpcy5zY2FsZS5kcmF3KCk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaCh0aGlzLmRhdGFzZXRzLGZ1bmN0aW9uKGRhdGFzZXQpe1xuXG5cdFx0XHRcdC8vVHJhbnNpdGlvbiBlYWNoIHBvaW50IGZpcnN0IHNvIHRoYXQgdGhlIGxpbmUgYW5kIHBvaW50IGRyYXdpbmcgaXNuJ3Qgb3V0IG9mIHN5bmNcblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQucG9pbnRzLGZ1bmN0aW9uKHBvaW50LGluZGV4KXtcblx0XHRcdFx0XHRpZiAocG9pbnQuaGFzVmFsdWUoKSl7XG5cdFx0XHRcdFx0XHRwb2ludC50cmFuc2l0aW9uKHRoaXMuc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgdGhpcy5zY2FsZS5jYWxjdWxhdGVDZW50ZXJPZmZzZXQocG9pbnQudmFsdWUpKSwgZWFzZURlY2ltYWwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSx0aGlzKTtcblxuXG5cblx0XHRcdFx0Ly9EcmF3IHRoZSBsaW5lIGJldHdlZW4gYWxsIHRoZSBwb2ludHNcblx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMub3B0aW9ucy5kYXRhc2V0U3Ryb2tlV2lkdGg7XG5cdFx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IGRhdGFzZXQuc3Ryb2tlQ29sb3I7XG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQucG9pbnRzLGZ1bmN0aW9uKHBvaW50LGluZGV4KXtcblx0XHRcdFx0XHRpZiAoaW5kZXggPT09IDApe1xuXHRcdFx0XHRcdFx0Y3R4Lm1vdmVUbyhwb2ludC54LHBvaW50LnkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNle1xuXHRcdFx0XHRcdFx0Y3R4LmxpbmVUbyhwb2ludC54LHBvaW50LnkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSx0aGlzKTtcblx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IGRhdGFzZXQuZmlsbENvbG9yO1xuXHRcdFx0XHRjdHguZmlsbCgpO1xuXG5cdFx0XHRcdC8vTm93IGRyYXcgdGhlIHBvaW50cyBvdmVyIHRoZSBsaW5lXG5cdFx0XHRcdC8vQSBsaXR0bGUgaW5lZmZpY2llbnQgZG91YmxlIGxvb3BpbmcsIGJ1dCBiZXR0ZXIgdGhhbiB0aGUgbGluZVxuXHRcdFx0XHQvL2xhZ2dpbmcgYmVoaW5kIHRoZSBwb2ludCBwb3NpdGlvbnNcblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQucG9pbnRzLGZ1bmN0aW9uKHBvaW50KXtcblx0XHRcdFx0XHRpZiAocG9pbnQuaGFzVmFsdWUoKSl7XG5cdFx0XHRcdFx0XHRwb2ludC5kcmF3KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0fSx0aGlzKTtcblxuXHRcdH1cblxuXHR9KTtcblxuXG5cblxuXG59KS5jYWxsKHRoaXMpOyIsIi8qIGpxdWVyeS5zaWduYWxSLmNvcmUuanMgKi9cbi8qZ2xvYmFsIHdpbmRvdzpmYWxzZSAqL1xuLyohXG4gKiBBU1AuTkVUIFNpZ25hbFIgSmF2YVNjcmlwdCBMaWJyYXJ5IHYyLjIuMFxuICogaHR0cDovL3NpZ25hbHIubmV0L1xuICpcbiAqIENvcHlyaWdodCAoQykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqL1xuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiU2NyaXB0cy9qcXVlcnktMS42LjQuanNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImpxdWVyeS5zaWduYWxSLnZlcnNpb24uanNcIiAvPlxuKGZ1bmN0aW9uICgkLCB3aW5kb3csIHVuZGVmaW5lZCkge1xuXG4gICAgdmFyIHJlc291cmNlcyA9IHtcbiAgICAgICAgbm9qUXVlcnk6IFwialF1ZXJ5IHdhcyBub3QgZm91bmQuIFBsZWFzZSBlbnN1cmUgalF1ZXJ5IGlzIHJlZmVyZW5jZWQgYmVmb3JlIHRoZSBTaWduYWxSIGNsaWVudCBKYXZhU2NyaXB0IGZpbGUuXCIsXG4gICAgICAgIG5vVHJhbnNwb3J0T25Jbml0OiBcIk5vIHRyYW5zcG9ydCBjb3VsZCBiZSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHkuIFRyeSBzcGVjaWZ5aW5nIGEgZGlmZmVyZW50IHRyYW5zcG9ydCBvciBub25lIGF0IGFsbCBmb3IgYXV0byBpbml0aWFsaXphdGlvbi5cIixcbiAgICAgICAgZXJyb3JPbk5lZ290aWF0ZTogXCJFcnJvciBkdXJpbmcgbmVnb3RpYXRpb24gcmVxdWVzdC5cIixcbiAgICAgICAgc3RvcHBlZFdoaWxlTG9hZGluZzogXCJUaGUgY29ubmVjdGlvbiB3YXMgc3RvcHBlZCBkdXJpbmcgcGFnZSBsb2FkLlwiLFxuICAgICAgICBzdG9wcGVkV2hpbGVOZWdvdGlhdGluZzogXCJUaGUgY29ubmVjdGlvbiB3YXMgc3RvcHBlZCBkdXJpbmcgdGhlIG5lZ290aWF0ZSByZXF1ZXN0LlwiLFxuICAgICAgICBlcnJvclBhcnNpbmdOZWdvdGlhdGVSZXNwb25zZTogXCJFcnJvciBwYXJzaW5nIG5lZ290aWF0ZSByZXNwb25zZS5cIixcbiAgICAgICAgZXJyb3JEdXJpbmdTdGFydFJlcXVlc3Q6IFwiRXJyb3IgZHVyaW5nIHN0YXJ0IHJlcXVlc3QuIFN0b3BwaW5nIHRoZSBjb25uZWN0aW9uLlwiLFxuICAgICAgICBzdG9wcGVkRHVyaW5nU3RhcnRSZXF1ZXN0OiBcIlRoZSBjb25uZWN0aW9uIHdhcyBzdG9wcGVkIGR1cmluZyB0aGUgc3RhcnQgcmVxdWVzdC5cIixcbiAgICAgICAgZXJyb3JQYXJzaW5nU3RhcnRSZXNwb25zZTogXCJFcnJvciBwYXJzaW5nIHN0YXJ0IHJlc3BvbnNlOiAnezB9Jy4gU3RvcHBpbmcgdGhlIGNvbm5lY3Rpb24uXCIsXG4gICAgICAgIGludmFsaWRTdGFydFJlc3BvbnNlOiBcIkludmFsaWQgc3RhcnQgcmVzcG9uc2U6ICd7MH0nLiBTdG9wcGluZyB0aGUgY29ubmVjdGlvbi5cIixcbiAgICAgICAgcHJvdG9jb2xJbmNvbXBhdGlibGU6IFwiWW91IGFyZSB1c2luZyBhIHZlcnNpb24gb2YgdGhlIGNsaWVudCB0aGF0IGlzbid0IGNvbXBhdGlibGUgd2l0aCB0aGUgc2VydmVyLiBDbGllbnQgdmVyc2lvbiB7MH0sIHNlcnZlciB2ZXJzaW9uIHsxfS5cIixcbiAgICAgICAgc2VuZEZhaWxlZDogXCJTZW5kIGZhaWxlZC5cIixcbiAgICAgICAgcGFyc2VGYWlsZWQ6IFwiRmFpbGVkIGF0IHBhcnNpbmcgcmVzcG9uc2U6IHswfVwiLFxuICAgICAgICBsb25nUG9sbEZhaWxlZDogXCJMb25nIHBvbGxpbmcgcmVxdWVzdCBmYWlsZWQuXCIsXG4gICAgICAgIGV2ZW50U291cmNlRmFpbGVkVG9Db25uZWN0OiBcIkV2ZW50U291cmNlIGZhaWxlZCB0byBjb25uZWN0LlwiLFxuICAgICAgICBldmVudFNvdXJjZUVycm9yOiBcIkVycm9yIHJhaXNlZCBieSBFdmVudFNvdXJjZVwiLFxuICAgICAgICB3ZWJTb2NrZXRDbG9zZWQ6IFwiV2ViU29ja2V0IGNsb3NlZC5cIixcbiAgICAgICAgcGluZ1NlcnZlckZhaWxlZEludmFsaWRSZXNwb25zZTogXCJJbnZhbGlkIHBpbmcgcmVzcG9uc2Ugd2hlbiBwaW5naW5nIHNlcnZlcjogJ3swfScuXCIsXG4gICAgICAgIHBpbmdTZXJ2ZXJGYWlsZWQ6IFwiRmFpbGVkIHRvIHBpbmcgc2VydmVyLlwiLFxuICAgICAgICBwaW5nU2VydmVyRmFpbGVkU3RhdHVzQ29kZTogXCJGYWlsZWQgdG8gcGluZyBzZXJ2ZXIuICBTZXJ2ZXIgcmVzcG9uZGVkIHdpdGggc3RhdHVzIGNvZGUgezB9LCBzdG9wcGluZyB0aGUgY29ubmVjdGlvbi5cIixcbiAgICAgICAgcGluZ1NlcnZlckZhaWxlZFBhcnNlOiBcIkZhaWxlZCB0byBwYXJzZSBwaW5nIHNlcnZlciByZXNwb25zZSwgc3RvcHBpbmcgdGhlIGNvbm5lY3Rpb24uXCIsXG4gICAgICAgIG5vQ29ubmVjdGlvblRyYW5zcG9ydDogXCJDb25uZWN0aW9uIGlzIGluIGFuIGludmFsaWQgc3RhdGUsIHRoZXJlIGlzIG5vIHRyYW5zcG9ydCBhY3RpdmUuXCIsXG4gICAgICAgIHdlYlNvY2tldHNJbnZhbGlkU3RhdGU6IFwiVGhlIFdlYiBTb2NrZXQgdHJhbnNwb3J0IGlzIGluIGFuIGludmFsaWQgc3RhdGUsIHRyYW5zaXRpb25pbmcgaW50byByZWNvbm5lY3RpbmcuXCIsXG4gICAgICAgIHJlY29ubmVjdFRpbWVvdXQ6IFwiQ291bGRuJ3QgcmVjb25uZWN0IHdpdGhpbiB0aGUgY29uZmlndXJlZCB0aW1lb3V0IG9mIHswfSBtcywgZGlzY29ubmVjdGluZy5cIixcbiAgICAgICAgcmVjb25uZWN0V2luZG93VGltZW91dDogXCJUaGUgY2xpZW50IGhhcyBiZWVuIGluYWN0aXZlIHNpbmNlIHswfSBhbmQgaXQgaGFzIGV4Y2VlZGVkIHRoZSBpbmFjdGl2aXR5IHRpbWVvdXQgb2YgezF9IG1zLiBTdG9wcGluZyB0aGUgY29ubmVjdGlvbi5cIlxuICAgIH07XG5cbiAgICBpZiAodHlwZW9mICgkKSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIC8vIG5vIGpRdWVyeSFcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc291cmNlcy5ub2pRdWVyeSk7XG4gICAgfVxuXG4gICAgdmFyIHNpZ25hbFIsXG4gICAgICAgIF9jb25uZWN0aW9uLFxuICAgICAgICBfcGFnZUxvYWRlZCA9ICh3aW5kb3cuZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSxcbiAgICAgICAgX3BhZ2VXaW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgIF9uZWdvdGlhdGVBYm9ydFRleHQgPSBcIl9fTmVnb3RpYXRlIEFib3J0ZWRfX1wiLFxuICAgICAgICBldmVudHMgPSB7XG4gICAgICAgICAgICBvblN0YXJ0OiBcIm9uU3RhcnRcIixcbiAgICAgICAgICAgIG9uU3RhcnRpbmc6IFwib25TdGFydGluZ1wiLFxuICAgICAgICAgICAgb25SZWNlaXZlZDogXCJvblJlY2VpdmVkXCIsXG4gICAgICAgICAgICBvbkVycm9yOiBcIm9uRXJyb3JcIixcbiAgICAgICAgICAgIG9uQ29ubmVjdGlvblNsb3c6IFwib25Db25uZWN0aW9uU2xvd1wiLFxuICAgICAgICAgICAgb25SZWNvbm5lY3Rpbmc6IFwib25SZWNvbm5lY3RpbmdcIixcbiAgICAgICAgICAgIG9uUmVjb25uZWN0OiBcIm9uUmVjb25uZWN0XCIsXG4gICAgICAgICAgICBvblN0YXRlQ2hhbmdlZDogXCJvblN0YXRlQ2hhbmdlZFwiLFxuICAgICAgICAgICAgb25EaXNjb25uZWN0OiBcIm9uRGlzY29ubmVjdFwiXG4gICAgICAgIH0sXG4gICAgICAgIGFqYXhEZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIHByb2Nlc3NEYXRhOiB0cnVlLFxuICAgICAgICAgICAgdGltZW91dDogbnVsbCxcbiAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgZ2xvYmFsOiBmYWxzZSxcbiAgICAgICAgICAgIGNhY2hlOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBsb2cgPSBmdW5jdGlvbiAobXNnLCBsb2dnaW5nKSB7XG4gICAgICAgICAgICBpZiAobG9nZ2luZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKHdpbmRvdy5jb25zb2xlKSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG0gPSBcIltcIiArIG5ldyBEYXRlKCkudG9UaW1lU3RyaW5nKCkgKyBcIl0gU2lnbmFsUjogXCIgKyBtc2c7XG4gICAgICAgICAgICBpZiAod2luZG93LmNvbnNvbGUuZGVidWcpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY29uc29sZS5kZWJ1ZyhtKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93LmNvbnNvbGUubG9nKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGNoYW5nZVN0YXRlID0gZnVuY3Rpb24gKGNvbm5lY3Rpb24sIGV4cGVjdGVkU3RhdGUsIG5ld1N0YXRlKSB7XG4gICAgICAgICAgICBpZiAoZXhwZWN0ZWRTdGF0ZSA9PT0gY29ubmVjdGlvbi5zdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc3RhdGUgPSBuZXdTdGF0ZTtcblxuICAgICAgICAgICAgICAgICQoY29ubmVjdGlvbikudHJpZ2dlckhhbmRsZXIoZXZlbnRzLm9uU3RhdGVDaGFuZ2VkLCBbeyBvbGRTdGF0ZTogZXhwZWN0ZWRTdGF0ZSwgbmV3U3RhdGU6IG5ld1N0YXRlIH1dKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzRGlzY29ubmVjdGluZyA9IGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbi5zdGF0ZSA9PT0gc2lnbmFsUi5jb25uZWN0aW9uU3RhdGUuZGlzY29ubmVjdGVkO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN1cHBvcnRzS2VlcEFsaXZlID0gZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uLl8ua2VlcEFsaXZlRGF0YS5hY3RpdmF0ZWQgJiZcbiAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnRyYW5zcG9ydC5zdXBwb3J0c0tlZXBBbGl2ZShjb25uZWN0aW9uKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb25maWd1cmVTdG9wUmVjb25uZWN0aW5nVGltZW91dCA9IGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgc3RvcFJlY29ubmVjdGluZ1RpbWVvdXQsXG4gICAgICAgICAgICAgICAgb25SZWNvbm5lY3RUaW1lb3V0O1xuXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGlzIGNvbm5lY3Rpb24gaGFzIGFscmVhZHkgYmVlbiBjb25maWd1cmVkIHRvIHN0b3AgcmVjb25uZWN0aW5nIGFmdGVyIGEgc3BlY2lmaWVkIHRpbWVvdXQuXG4gICAgICAgICAgICAvLyBXaXRob3V0IHRoaXMgY2hlY2sgaWYgYSBjb25uZWN0aW9uIGlzIHN0b3BwZWQgdGhlbiBzdGFydGVkIGV2ZW50cyB3aWxsIGJlIGJvdW5kIG11bHRpcGxlIHRpbWVzLlxuICAgICAgICAgICAgaWYgKCFjb25uZWN0aW9uLl8uY29uZmlndXJlZFN0b3BSZWNvbm5lY3RpbmdUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgb25SZWNvbm5lY3RUaW1lb3V0ID0gZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBzaWduYWxSLl8uZm9ybWF0KHNpZ25hbFIucmVzb3VyY2VzLnJlY29ubmVjdFRpbWVvdXQsIGNvbm5lY3Rpb24uZGlzY29ubmVjdFRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgJChjb25uZWN0aW9uKS50cmlnZ2VySGFuZGxlcihldmVudHMub25FcnJvciwgW3NpZ25hbFIuXy5lcnJvcihtZXNzYWdlLCAvKiBzb3VyY2UgKi8gXCJUaW1lb3V0RXhjZXB0aW9uXCIpXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc3RvcCgvKiBhc3luYyAqLyBmYWxzZSwgLyogbm90aWZ5U2VydmVyICovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5yZWNvbm5lY3RpbmcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gR3VhcmQgYWdhaW5zdCBzdGF0ZSBjaGFuZ2luZyBpbiBhIHByZXZpb3VzIHVzZXIgZGVmaW5lZCBldmVuIGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uc3RhdGUgPT09IHNpZ25hbFIuY29ubmVjdGlvblN0YXRlLnJlY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcFJlY29ubmVjdGluZ1RpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IG9uUmVjb25uZWN0VGltZW91dChjb25uZWN0aW9uKTsgfSwgY29ubmVjdGlvbi5kaXNjb25uZWN0VGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc3RhdGVDaGFuZ2VkKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLm9sZFN0YXRlID09PSBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5yZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsZWFyIHRoZSBwZW5kaW5nIHJlY29ubmVjdCB0aW1lb3V0IGNoZWNrXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHN0b3BSZWNvbm5lY3RpbmdUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5fLmNvbmZpZ3VyZWRTdG9wUmVjb25uZWN0aW5nVGltZW91dCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICBzaWduYWxSID0gZnVuY3Rpb24gKHVybCwgcXMsIGxvZ2dpbmcpIHtcbiAgICAgICAgLy8vIDxzdW1tYXJ5PkNyZWF0ZXMgYSBuZXcgU2lnbmFsUiBjb25uZWN0aW9uIGZvciB0aGUgZ2l2ZW4gdXJsPC9zdW1tYXJ5PlxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ1cmxcIiB0eXBlPVwiU3RyaW5nXCI+VGhlIFVSTCBvZiB0aGUgbG9uZyBwb2xsaW5nIGVuZHBvaW50PC9wYXJhbT5cbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwicXNcIiB0eXBlPVwiT2JqZWN0XCI+XG4gICAgICAgIC8vLyAgICAgW09wdGlvbmFsXSBDdXN0b20gcXVlcnlzdHJpbmcgcGFyYW1ldGVycyB0byBhZGQgdG8gdGhlIGNvbm5lY3Rpb24gVVJMLlxuICAgICAgICAvLy8gICAgIElmIGFuIG9iamVjdCwgZXZlcnkgbm9uLWZ1bmN0aW9uIG1lbWJlciB3aWxsIGJlIGFkZGVkIHRvIHRoZSBxdWVyeXN0cmluZy5cbiAgICAgICAgLy8vICAgICBJZiBhIHN0cmluZywgaXQncyBhZGRlZCB0byB0aGUgUVMgYXMgc3BlY2lmaWVkLlxuICAgICAgICAvLy8gPC9wYXJhbT5cbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwibG9nZ2luZ1wiIHR5cGU9XCJCb29sZWFuXCI+XG4gICAgICAgIC8vLyAgICAgW09wdGlvbmFsXSBBIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIGNvbm5lY3Rpb24gbG9nZ2luZyBpcyBlbmFibGVkIHRvIHRoZSBicm93c2VyXG4gICAgICAgIC8vLyAgICAgY29uc29sZS9sb2cuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAgICAvLy8gPC9wYXJhbT5cblxuICAgICAgICByZXR1cm4gbmV3IHNpZ25hbFIuZm4uaW5pdCh1cmwsIHFzLCBsb2dnaW5nKTtcbiAgICB9O1xuXG4gICAgc2lnbmFsUi5fID0ge1xuICAgICAgICBkZWZhdWx0Q29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cbiAgICAgICAgaWVWZXJzaW9uOiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHZlcnNpb24sXG4gICAgICAgICAgICAgICAgbWF0Y2hlcztcblxuICAgICAgICAgICAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IuYXBwTmFtZSA9PT0gJ01pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlcicpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgdXNlciBhZ2VudCBoYXMgdGhlIHBhdHRlcm4gXCJNU0lFIChvbmUgb3IgbW9yZSBudW1iZXJzKS4ob25lIG9yIG1vcmUgbnVtYmVycylcIjtcbiAgICAgICAgICAgICAgICBtYXRjaGVzID0gL01TSUUgKFswLTldK1xcLlswLTldKykvLmV4ZWMod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiA9IHdpbmRvdy5wYXJzZUZsb2F0KG1hdGNoZXNbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdW5kZWZpbmVkIHZhbHVlIG1lYW5zIG5vdCBJRVxuICAgICAgICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgICAgIH0pKCksXG5cbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChtZXNzYWdlLCBzb3VyY2UsIGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgZS5zb3VyY2UgPSBzb3VyY2U7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGUuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRyYW5zcG9ydEVycm9yOiBmdW5jdGlvbiAobWVzc2FnZSwgdHJhbnNwb3J0LCBzb3VyY2UsIGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5lcnJvcihtZXNzYWdlLCBzb3VyY2UsIGNvbnRleHQpO1xuICAgICAgICAgICAgZS50cmFuc3BvcnQgPSB0cmFuc3BvcnQgPyB0cmFuc3BvcnQubmFtZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvcm1hdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8vIDxzdW1tYXJ5PlVzYWdlOiBmb3JtYXQoXCJIaSB7MH0sIHlvdSBhcmUgezF9IVwiLCBcIkZvb1wiLCAxMDApIDwvc3VtbWFyeT5cbiAgICAgICAgICAgIHZhciBzID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcyA9IHMucmVwbGFjZShcIntcIiArIGkgKyBcIn1cIiwgYXJndW1lbnRzW2kgKyAxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfSxcblxuICAgICAgICBmaXJlZm94TWFqb3JWZXJzaW9uOiBmdW5jdGlvbiAodXNlckFnZW50KSB7XG4gICAgICAgICAgICAvLyBGaXJlZm94IHVzZXIgYWdlbnRzOiBodHRwOi8vdXNlcmFnZW50c3RyaW5nLmNvbS9wYWdlcy9GaXJlZm94L1xuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSB1c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3hcXC8oXFxkKykvKTtcbiAgICAgICAgICAgIGlmICghbWF0Y2hlcyB8fCAhbWF0Y2hlcy5sZW5ndGggfHwgbWF0Y2hlcy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTAgLyogcmFkaXggKi8pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbmZpZ3VyZVBpbmdJbnRlcnZhbDogZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHZhciBjb25maWcgPSBjb25uZWN0aW9uLl8uY29uZmlnLFxuICAgICAgICAgICAgICAgIG9uRmFpbCA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAkKGNvbm5lY3Rpb24pLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vbkVycm9yLCBbZXJyb3JdKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoY29uZmlnICYmICFjb25uZWN0aW9uLl8ucGluZ0ludGVydmFsSWQgJiYgY29uZmlnLnBpbmdJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uXy5waW5nSW50ZXJ2YWxJZCA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25hbFIudHJhbnNwb3J0cy5fbG9naWMucGluZ1NlcnZlcihjb25uZWN0aW9uKS5mYWlsKG9uRmFpbCk7XG4gICAgICAgICAgICAgICAgfSwgY29uZmlnLnBpbmdJbnRlcnZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgc2lnbmFsUi5ldmVudHMgPSBldmVudHM7XG5cbiAgICBzaWduYWxSLnJlc291cmNlcyA9IHJlc291cmNlcztcblxuICAgIHNpZ25hbFIuYWpheERlZmF1bHRzID0gYWpheERlZmF1bHRzO1xuXG4gICAgc2lnbmFsUi5jaGFuZ2VTdGF0ZSA9IGNoYW5nZVN0YXRlO1xuXG4gICAgc2lnbmFsUi5pc0Rpc2Nvbm5lY3RpbmcgPSBpc0Rpc2Nvbm5lY3Rpbmc7XG5cbiAgICBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZSA9IHtcbiAgICAgICAgY29ubmVjdGluZzogMCxcbiAgICAgICAgY29ubmVjdGVkOiAxLFxuICAgICAgICByZWNvbm5lY3Rpbmc6IDIsXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogNFxuICAgIH07XG5cbiAgICBzaWduYWxSLmh1YiA9IHtcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBnZXQgcmVwbGFjZWQgd2l0aCB0aGUgcmVhbCBodWIgY29ubmVjdGlvbiBzdGFydCBtZXRob2Qgd2hlbiBodWJzIGlzIHJlZmVyZW5jZWQgY29ycmVjdGx5XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWduYWxSOiBFcnJvciBsb2FkaW5nIGh1YnMuIEVuc3VyZSB5b3VyIGh1YnMgcmVmZXJlbmNlIGlzIGNvcnJlY3QsIGUuZy4gPHNjcmlwdCBzcmM9Jy9zaWduYWxyL2pzJz48L3NjcmlwdD4uXCIpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIF9wYWdlV2luZG93LmxvYWQoZnVuY3Rpb24gKCkgeyBfcGFnZUxvYWRlZCA9IHRydWU7IH0pO1xuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVUcmFuc3BvcnQocmVxdWVzdGVkVHJhbnNwb3J0LCBjb25uZWN0aW9uKSB7XG4gICAgICAgIC8vLyA8c3VtbWFyeT5WYWxpZGF0ZXMgdGhlIHJlcXVlc3RlZCB0cmFuc3BvcnQgYnkgY3Jvc3MgY2hlY2tpbmcgaXQgd2l0aCB0aGUgcHJlLWRlZmluZWQgc2lnbmFsUi50cmFuc3BvcnRzPC9zdW1tYXJ5PlxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJyZXF1ZXN0ZWRUcmFuc3BvcnRcIiB0eXBlPVwiT2JqZWN0XCI+VGhlIGRlc2lnbmF0ZWQgdHJhbnNwb3J0cyB0aGF0IHRoZSB1c2VyIGhhcyBzcGVjaWZpZWQuPC9wYXJhbT5cbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiY29ubmVjdGlvblwiIHR5cGU9XCJzaWduYWxSXCI+VGhlIGNvbm5lY3Rpb24gdGhhdCB3aWxsIGJlIHVzaW5nIHRoZSByZXF1ZXN0ZWQgdHJhbnNwb3J0cy4gIFVzZWQgZm9yIGxvZ2dpbmcgcHVycG9zZXMuPC9wYXJhbT5cbiAgICAgICAgLy8vIDxyZXR1cm5zIHR5cGU9XCJPYmplY3RcIiAvPlxuXG4gICAgICAgIGlmICgkLmlzQXJyYXkocmVxdWVzdGVkVHJhbnNwb3J0KSkge1xuICAgICAgICAgICAgLy8gR28gdGhyb3VnaCB0cmFuc3BvcnQgYXJyYXkgYW5kIHJlbW92ZSBhbiBcImludmFsaWRcIiB0cmFucG9ydHNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSByZXF1ZXN0ZWRUcmFuc3BvcnQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNwb3J0ID0gcmVxdWVzdGVkVHJhbnNwb3J0W2ldO1xuICAgICAgICAgICAgICAgIGlmICgkLnR5cGUodHJhbnNwb3J0KSAhPT0gXCJzdHJpbmdcIiB8fCAhc2lnbmFsUi50cmFuc3BvcnRzW3RyYW5zcG9ydF0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJJbnZhbGlkIHRyYW5zcG9ydDogXCIgKyB0cmFuc3BvcnQgKyBcIiwgcmVtb3ZpbmcgaXQgZnJvbSB0aGUgdHJhbnNwb3J0cyBsaXN0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkVHJhbnNwb3J0LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFZlcmlmeSB3ZSBzdGlsbCBoYXZlIHRyYW5zcG9ydHMgbGVmdCwgaWYgd2UgZG9udCB0aGVuIHdlIGhhdmUgaW52YWxpZCB0cmFuc3BvcnRzXG4gICAgICAgICAgICBpZiAocmVxdWVzdGVkVHJhbnNwb3J0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiTm8gdHJhbnNwb3J0cyByZW1haW4gd2l0aGluIHRoZSBzcGVjaWZpZWQgdHJhbnNwb3J0IGFycmF5LlwiKTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0ZWRUcmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFzaWduYWxSLnRyYW5zcG9ydHNbcmVxdWVzdGVkVHJhbnNwb3J0XSAmJiByZXF1ZXN0ZWRUcmFuc3BvcnQgIT09IFwiYXV0b1wiKSB7XG4gICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIkludmFsaWQgdHJhbnNwb3J0OiBcIiArIHJlcXVlc3RlZFRyYW5zcG9ydC50b1N0cmluZygpICsgXCIuXCIpO1xuICAgICAgICAgICAgcmVxdWVzdGVkVHJhbnNwb3J0ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0ZWRUcmFuc3BvcnQgPT09IFwiYXV0b1wiICYmIHNpZ25hbFIuXy5pZVZlcnNpb24gPD0gOCkge1xuICAgICAgICAgICAgLy8gSWYgd2UncmUgZG9pbmcgYW4gYXV0byB0cmFuc3BvcnQgYW5kIHdlJ3JlIElFOCB0aGVuIGZvcmNlIGxvbmdQb2xsaW5nLCAjMTc2NFxuICAgICAgICAgICAgcmV0dXJuIFtcImxvbmdQb2xsaW5nXCJdO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVxdWVzdGVkVHJhbnNwb3J0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERlZmF1bHRQb3J0KHByb3RvY29sKSB7XG4gICAgICAgIGlmIChwcm90b2NvbCA9PT0gXCJodHRwOlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gODA7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvdG9jb2wgPT09IFwiaHR0cHM6XCIpIHtcbiAgICAgICAgICAgIHJldHVybiA0NDM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGREZWZhdWx0UG9ydChwcm90b2NvbCwgdXJsKSB7XG4gICAgICAgIC8vIFJlbW92ZSBwb3J0cyAgZnJvbSB1cmwuICBXZSBoYXZlIHRvIGNoZWNrIGlmIHRoZXJlJ3MgYSAvIG9yIGVuZCBvZiBsaW5lXG4gICAgICAgIC8vIGZvbGxvd2luZyB0aGUgcG9ydCBpbiBvcmRlciB0byBhdm9pZCByZW1vdmluZyBwb3J0cyBzdWNoIGFzIDgwODAuXG4gICAgICAgIGlmICh1cmwubWF0Y2goLzpcXGQrJC8pKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVybCArIFwiOlwiICsgZ2V0RGVmYXVsdFBvcnQocHJvdG9jb2wpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gQ29ubmVjdGluZ01lc3NhZ2VCdWZmZXIoY29ubmVjdGlvbiwgZHJhaW5DYWxsYmFjaykge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICBidWZmZXIgPSBbXTtcblxuICAgICAgICB0aGF0LnRyeUJ1ZmZlciA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbi5zdGF0ZSA9PT0gJC5zaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5jb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyLnB1c2gobWVzc2FnZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoYXQuZHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgY29ubmVjdGlvbiBpcyBjb25uZWN0ZWQgd2hlbiB3ZSBkcmFpbiAoZG8gbm90IHdhbnQgdG8gZHJhaW4gd2hpbGUgYSBjb25uZWN0aW9uIGlzIG5vdCBhY3RpdmUpXG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbi5zdGF0ZSA9PT0gJC5zaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhaW5DYWxsYmFjayhidWZmZXIuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoYXQuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBidWZmZXIgPSBbXTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzaWduYWxSLmZuID0gc2lnbmFsUi5wcm90b3R5cGUgPSB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICh1cmwsIHFzLCBsb2dnaW5nKSB7XG4gICAgICAgICAgICB2YXIgJGNvbm5lY3Rpb24gPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgICAgIHRoaXMucXMgPSBxcztcbiAgICAgICAgICAgIHRoaXMubGFzdEVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuXyA9IHtcbiAgICAgICAgICAgICAgICBrZWVwQWxpdmVEYXRhOiB7fSxcbiAgICAgICAgICAgICAgICBjb25uZWN0aW5nTWVzc2FnZUJ1ZmZlcjogbmV3IENvbm5lY3RpbmdNZXNzYWdlQnVmZmVyKHRoaXMsIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICRjb25uZWN0aW9uLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vblJlY2VpdmVkLCBbbWVzc2FnZV0pO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlQXQ6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgICAgICAgICAgIGxhc3RBY3RpdmVBdDogbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgYmVhdEludGVydmFsOiA1MDAwLCAvLyBEZWZhdWx0IHZhbHVlLCB3aWxsIG9ubHkgYmUgb3ZlcnJpZGRlbiBpZiBrZWVwIGFsaXZlIGlzIGVuYWJsZWQsXG4gICAgICAgICAgICAgICAgYmVhdEhhbmRsZTogbnVsbCxcbiAgICAgICAgICAgICAgICB0b3RhbFRyYW5zcG9ydENvbm5lY3RUaW1lb3V0OiAwIC8vIFRoaXMgd2lsbCBiZSB0aGUgc3VtIG9mIHRoZSBUcmFuc3BvcnRDb25uZWN0VGltZW91dCBzZW50IGluIHJlc3BvbnNlIHRvIG5lZ290aWF0ZSBhbmQgY29ubmVjdGlvbi50cmFuc3BvcnRDb25uZWN0VGltZW91dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGxvZ2dpbmcpID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2luZyA9IGxvZ2dpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3BhcnNlUmVzcG9uc2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcmVzcG9uc2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5qc29uLnBhcnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF9vcmlnaW5hbEpzb246IHdpbmRvdy5KU09OLFxuXG4gICAgICAgIGpzb246IHdpbmRvdy5KU09OLFxuXG4gICAgICAgIGlzQ3Jvc3NEb21haW46IGZ1bmN0aW9uICh1cmwsIGFnYWluc3QpIHtcbiAgICAgICAgICAgIC8vLyA8c3VtbWFyeT5DaGVja3MgaWYgdXJsIGlzIGNyb3NzIGRvbWFpbjwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInVybFwiIHR5cGU9XCJTdHJpbmdcIj5UaGUgYmFzZSBVUkw8L3BhcmFtPlxuICAgICAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiYWdhaW5zdFwiIHR5cGU9XCJPYmplY3RcIj5cbiAgICAgICAgICAgIC8vLyAgICAgQW4gb3B0aW9uYWwgYXJndW1lbnQgdG8gY29tcGFyZSB0aGUgVVJMIGFnYWluc3QsIGlmIG5vdCBzcGVjaWZpZWQgaXQgd2lsbCBiZSBzZXQgdG8gd2luZG93LmxvY2F0aW9uLlxuICAgICAgICAgICAgLy8vICAgICBJZiBzcGVjaWZpZWQgaXQgbXVzdCBjb250YWluIGEgcHJvdG9jb2wgYW5kIGEgaG9zdCBwcm9wZXJ0eS5cbiAgICAgICAgICAgIC8vLyA8L3BhcmFtPlxuICAgICAgICAgICAgdmFyIGxpbms7XG5cbiAgICAgICAgICAgIHVybCA9ICQudHJpbSh1cmwpO1xuXG4gICAgICAgICAgICBhZ2FpbnN0ID0gYWdhaW5zdCB8fCB3aW5kb3cubG9jYXRpb247XG5cbiAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZihcImh0dHBcIikgIT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhbiBhbmNob3IgdGFnLlxuICAgICAgICAgICAgbGluayA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgICAgIGxpbmsuaHJlZiA9IHVybDtcblxuICAgICAgICAgICAgLy8gV2hlbiBjaGVja2luZyBmb3IgY3Jvc3MgZG9tYWluIHdlIGhhdmUgdG8gc3BlY2lhbCBjYXNlIHBvcnQgODAgYmVjYXVzZSB0aGUgd2luZG93LmxvY2F0aW9uIHdpbGwgcmVtb3ZlIHRoZSBcbiAgICAgICAgICAgIHJldHVybiBsaW5rLnByb3RvY29sICsgYWRkRGVmYXVsdFBvcnQobGluay5wcm90b2NvbCwgbGluay5ob3N0KSAhPT0gYWdhaW5zdC5wcm90b2NvbCArIGFkZERlZmF1bHRQb3J0KGFnYWluc3QucHJvdG9jb2wsIGFnYWluc3QuaG9zdCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWpheERhdGFUeXBlOiBcInRleHRcIixcblxuICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04XCIsXG5cbiAgICAgICAgbG9nZ2luZzogZmFsc2UsXG5cbiAgICAgICAgc3RhdGU6IHNpZ25hbFIuY29ubmVjdGlvblN0YXRlLmRpc2Nvbm5lY3RlZCxcblxuICAgICAgICBjbGllbnRQcm90b2NvbDogXCIxLjVcIixcblxuICAgICAgICByZWNvbm5lY3REZWxheTogMjAwMCxcblxuICAgICAgICB0cmFuc3BvcnRDb25uZWN0VGltZW91dDogMCxcblxuICAgICAgICBkaXNjb25uZWN0VGltZW91dDogMzAwMDAsIC8vIFRoaXMgc2hvdWxkIGJlIHNldCBieSB0aGUgc2VydmVyIGluIHJlc3BvbnNlIHRvIHRoZSBuZWdvdGlhdGUgcmVxdWVzdCAoMzBzIGRlZmF1bHQpXG5cbiAgICAgICAgcmVjb25uZWN0V2luZG93OiAzMDAwMCwgLy8gVGhpcyBzaG91bGQgYmUgc2V0IGJ5IHRoZSBzZXJ2ZXIgaW4gcmVzcG9uc2UgdG8gdGhlIG5lZ290aWF0ZSByZXF1ZXN0IFxuXG4gICAgICAgIGtlZXBBbGl2ZVdhcm5BdDogMiAvIDMsIC8vIFdhcm4gdXNlciBvZiBzbG93IGNvbm5lY3Rpb24gaWYgd2UgYnJlYWNoIHRoZSBYJSBtYXJrIG9mIHRoZSBrZWVwIGFsaXZlIHRpbWVvdXRcblxuICAgICAgICBzdGFydDogZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLy8gPHN1bW1hcnk+U3RhcnRzIHRoZSBjb25uZWN0aW9uPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwib3B0aW9uc1wiIHR5cGU9XCJPYmplY3RcIj5PcHRpb25zIG1hcDwvcGFyYW0+XG4gICAgICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJjYWxsYmFja1wiIHR5cGU9XCJGdW5jdGlvblwiPkEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBjb25uZWN0aW9uIGhhcyBzdGFydGVkPC9wYXJhbT5cbiAgICAgICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcyxcbiAgICAgICAgICAgICAgICBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIHBpbmdJbnRlcnZhbDogMzAwMDAwLFxuICAgICAgICAgICAgICAgICAgICB3YWl0Rm9yUGFnZUxvYWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydDogXCJhdXRvXCIsXG4gICAgICAgICAgICAgICAgICAgIGpzb25wOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZSxcbiAgICAgICAgICAgICAgICBkZWZlcnJlZCA9IGNvbm5lY3Rpb24uX2RlZmVycmFsIHx8ICQuRGVmZXJyZWQoKSwgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZXJlIGlzIGEgcHJlLWV4aXN0aW5nIGRlZmVycmFsIHRoYXQncyBiZWluZyBidWlsdCBvbiwgaWYgc28gd2Ugd2FudCB0byBrZWVwIHVzaW5nIGl0XG4gICAgICAgICAgICAgICAgcGFyc2VyID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuXG4gICAgICAgICAgICBjb25uZWN0aW9uLmxhc3RFcnJvciA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIFBlcnNpc3QgdGhlIGRlZmVycmFsIHNvIHRoYXQgaWYgc3RhcnQgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHRoZSBzYW1lIGRlZmVycmFsIGlzIHVzZWQuXG4gICAgICAgICAgICBjb25uZWN0aW9uLl9kZWZlcnJhbCA9IGRlZmVycmVkO1xuXG4gICAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24uanNvbikge1xuICAgICAgICAgICAgICAgIC8vIG5vIEpTT04hXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2lnbmFsUjogTm8gSlNPTiBwYXJzZXIgZm91bmQuIFBsZWFzZSBlbnN1cmUganNvbjIuanMgaXMgcmVmZXJlbmNlZCBiZWZvcmUgdGhlIFNpZ25hbFIuanMgZmlsZSBpZiB5b3UgbmVlZCB0byBzdXBwb3J0IGNsaWVudHMgd2l0aG91dCBuYXRpdmUgSlNPTiBwYXJzaW5nIHN1cHBvcnQsIGUuZy4gSUU8OC5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkLnR5cGUob3B0aW9ucykgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQgY2FsbGluZyB3aXRoIHNpbmdsZSBjYWxsYmFjayBwYXJhbWV0ZXJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCQudHlwZShvcHRpb25zKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICQuZXh0ZW5kKGNvbmZpZywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKCQudHlwZShjb25maWcuY2FsbGJhY2spID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBjb25maWcuY2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25maWcudHJhbnNwb3J0ID0gdmFsaWRhdGVUcmFuc3BvcnQoY29uZmlnLnRyYW5zcG9ydCwgY29ubmVjdGlvbik7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSB0cmFuc3BvcnQgaXMgaW52YWxpZCB0aHJvdyBhbiBlcnJvciBhbmQgYWJvcnQgc3RhcnRcbiAgICAgICAgICAgIGlmICghY29uZmlnLnRyYW5zcG9ydCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNpZ25hbFI6IEludmFsaWQgdHJhbnNwb3J0KHMpIHNwZWNpZmllZCwgYWJvcnRpbmcgc3RhcnQuXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25uZWN0aW9uLl8uY29uZmlnID0gY29uZmlnO1xuXG4gICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgc3RhcnQgaXMgYmVpbmcgY2FsbGVkIHByaW9yIHRvIHBhZ2UgbG9hZFxuICAgICAgICAgICAgLy8gSWYgd2FpdEZvclBhZ2VMb2FkIGlzIHRydWUgd2UgdGhlbiB3YW50IHRvIHJlLWRpcmVjdCBmdW5jdGlvbiBjYWxsIHRvIHRoZSB3aW5kb3cgbG9hZCBldmVudFxuICAgICAgICAgICAgaWYgKCFfcGFnZUxvYWRlZCAmJiBjb25maWcud2FpdEZvclBhZ2VMb2FkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5fLmRlZmVycmVkU3RhcnRIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnN0YXJ0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIF9wYWdlV2luZG93LmJpbmQoXCJsb2FkXCIsIGNvbm5lY3Rpb24uXy5kZWZlcnJlZFN0YXJ0SGFuZGxlcik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSBhbHJlYWR5IGNvbm5lY3RpbmcganVzdCByZXR1cm4gdGhlIHNhbWUgZGVmZXJyYWwgYXMgdGhlIG9yaWdpbmFsIGNvbm5lY3Rpb24gc3RhcnRcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLnN0YXRlID09PSBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5jb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhbmdlU3RhdGUoY29ubmVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5kaXNjb25uZWN0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsUi5jb25uZWN0aW9uU3RhdGUuY29ubmVjdGluZykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UncmUgbm90IGNvbm5lY3Rpbmcgc28gdHJ5IGFuZCB0cmFuc2l0aW9uIGludG8gY29ubmVjdGluZy5cbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBmYWlsIHRvIHRyYW5zaXRpb24gdGhlbiB3ZSdyZSBlaXRoZXIgaW4gY29ubmVjdGVkIG9yIHJlY29ubmVjdGluZy5cblxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoY29ubmVjdGlvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uZmlndXJlU3RvcFJlY29ubmVjdGluZ1RpbWVvdXQoY29ubmVjdGlvbik7XG5cbiAgICAgICAgICAgIC8vIFJlc29sdmUgdGhlIGZ1bGwgdXJsXG4gICAgICAgICAgICBwYXJzZXIuaHJlZiA9IGNvbm5lY3Rpb24udXJsO1xuICAgICAgICAgICAgaWYgKCFwYXJzZXIucHJvdG9jb2wgfHwgcGFyc2VyLnByb3RvY29sID09PSBcIjpcIikge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ucHJvdG9jb2wgPSB3aW5kb3cuZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5ob3N0ID0gcGFyc2VyLmhvc3QgfHwgd2luZG93LmRvY3VtZW50LmxvY2F0aW9uLmhvc3Q7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5ob3N0ID0gcGFyc2VyLmhvc3Q7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24uYmFzZVVybCA9IGNvbm5lY3Rpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBjb25uZWN0aW9uLmhvc3Q7XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgd2Vic29ja2V0IHByb3RvY29sXG4gICAgICAgICAgICBjb25uZWN0aW9uLndzUHJvdG9jb2wgPSBjb25uZWN0aW9uLnByb3RvY29sID09PSBcImh0dHBzOlwiID8gXCJ3c3M6Ly9cIiA6IFwid3M6Ly9cIjtcblxuICAgICAgICAgICAgLy8gSWYganNvbnAgd2l0aCBuby9hdXRvIHRyYW5zcG9ydCBpcyBzcGVjaWZpZWQsIHRoZW4gc2V0IHRoZSB0cmFuc3BvcnQgdG8gbG9uZyBwb2xsaW5nXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGF0IGlzIHRoZSBvbmx5IHRyYW5zcG9ydCBmb3Igd2hpY2gganNvbnAgcmVhbGx5IG1ha2VzIHNlbnNlLlxuICAgICAgICAgICAgLy8gU29tZSBkZXZlbG9wZXJzIG1pZ2h0IGFjdHVhbGx5IGNob29zZSB0byBzcGVjaWZ5IGpzb25wIGZvciBzYW1lIG9yaWdpbiByZXF1ZXN0c1xuICAgICAgICAgICAgLy8gYXMgZGVtb25zdHJhdGVkIGJ5IElzc3VlICM2MjMuXG4gICAgICAgICAgICBpZiAoY29uZmlnLnRyYW5zcG9ydCA9PT0gXCJhdXRvXCIgJiYgY29uZmlnLmpzb25wID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLnRyYW5zcG9ydCA9IFwibG9uZ1BvbGxpbmdcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIHVybCBpcyBwcm90b2NvbCByZWxhdGl2ZSwgcHJlcGVuZCB0aGUgY3VycmVudCB3aW5kb3dzIHByb3RvY29sIHRvIHRoZSB1cmwuIFxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24udXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24udXJsID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgY29ubmVjdGlvbi51cmw7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJQcm90b2NvbCByZWxhdGl2ZSBVUkwgZGV0ZWN0ZWQsIG5vcm1hbGl6aW5nIGl0IHRvICdcIiArIGNvbm5lY3Rpb24udXJsICsgXCInLlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNDcm9zc0RvbWFpbihjb25uZWN0aW9uLnVybCkpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIkF1dG8gZGV0ZWN0ZWQgY3Jvc3MgZG9tYWluIHVybC5cIik7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnRyYW5zcG9ydCA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogU3VwcG9ydCBYRE0gd2l0aCBmb3JldmVyRnJhbWVcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLnRyYW5zcG9ydCA9IFtcIndlYlNvY2tldHNcIiwgXCJzZXJ2ZXJTZW50RXZlbnRzXCIsIFwibG9uZ1BvbGxpbmdcIl07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoY29uZmlnLndpdGhDcmVkZW50aWFscykgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIGpzb25wIGlzIHRoZSBvbmx5IGNob2ljZSBmb3IgbmVnb3RpYXRpb24sIGFqYXhTZW5kIGFuZCBhamF4QWJvcnQuXG4gICAgICAgICAgICAgICAgLy8gaS5lLiBpZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnRzIENPUlNcbiAgICAgICAgICAgICAgICAvLyBJZiBpdCBpcywgaWdub3JlIGFueSBwcmVmZXJlbmNlIHRvIHRoZSBjb250cmFyeSwgYW5kIHN3aXRjaCB0byBqc29ucC5cbiAgICAgICAgICAgICAgICBpZiAoIWNvbmZpZy5qc29ucCkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuanNvbnAgPSAhJC5zdXBwb3J0LmNvcnM7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5qc29ucCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJVc2luZyBqc29ucCBiZWNhdXNlIHRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgQ09SUy5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNvbnRlbnRUeXBlID0gc2lnbmFsUi5fLmRlZmF1bHRDb250ZW50VHlwZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29ubmVjdGlvbi53aXRoQ3JlZGVudGlhbHMgPSBjb25maWcud2l0aENyZWRlbnRpYWxzO1xuXG4gICAgICAgICAgICBjb25uZWN0aW9uLmFqYXhEYXRhVHlwZSA9IGNvbmZpZy5qc29ucCA/IFwianNvbnBcIiA6IFwidGV4dFwiO1xuXG4gICAgICAgICAgICAkKGNvbm5lY3Rpb24pLmJpbmQoZXZlbnRzLm9uU3RhcnQsIGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQudHlwZShjYWxsYmFjaykgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24uXy5pbml0SGFuZGxlciA9IHNpZ25hbFIudHJhbnNwb3J0cy5fbG9naWMuaW5pdEhhbmRsZXIoY29ubmVjdGlvbik7XG5cbiAgICAgICAgICAgIGluaXRpYWxpemUgPSBmdW5jdGlvbiAodHJhbnNwb3J0cywgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9UcmFuc3BvcnRFcnJvciA9IHNpZ25hbFIuXy5lcnJvcihyZXNvdXJjZXMubm9UcmFuc3BvcnRPbkluaXQpO1xuXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleCB8fCAwO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSB0cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiTm8gdHJhbnNwb3J0cyBzdXBwb3J0ZWQgYnkgdGhlIHNlcnZlciB3ZXJlIHNlbGVjdGVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJObyBmYWxsYmFjayB0cmFuc3BvcnRzIHdlcmUgc2VsZWN0ZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJGYWxsYmFjayB0cmFuc3BvcnRzIGV4aGF1c3RlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBObyB0cmFuc3BvcnQgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5XG4gICAgICAgICAgICAgICAgICAgICQoY29ubmVjdGlvbikudHJpZ2dlckhhbmRsZXIoZXZlbnRzLm9uRXJyb3IsIFtub1RyYW5zcG9ydEVycm9yXSk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChub1RyYW5zcG9ydEVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCB0aGUgY29ubmVjdGlvbiBpZiBpdCBoYXMgY29ubmVjdGVkIGFuZCBtb3ZlIGl0IGludG8gdGhlIGRpc2Nvbm5lY3RlZCBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFRoZSBjb25uZWN0aW9uIHdhcyBhYm9ydGVkXG4gICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uc3RhdGUgPT09IHNpZ25hbFIuY29ubmVjdGlvblN0YXRlLmRpc2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zcG9ydE5hbWUgPSB0cmFuc3BvcnRzW2luZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0ID0gc2lnbmFsUi50cmFuc3BvcnRzW3RyYW5zcG9ydE5hbWVdLFxuICAgICAgICAgICAgICAgICAgICBvbkZhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6ZSh0cmFuc3BvcnRzLCBpbmRleCArIDEpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLl8uaW5pdEhhbmRsZXIuc3RhcnQodHJhbnNwb3J0LCBmdW5jdGlvbiAoKSB7IC8vIHN1Y2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggMTErIGRvZXNuJ3QgYWxsb3cgc3luYyBYSFIgd2l0aENyZWRlbnRpYWxzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvWE1MSHR0cFJlcXVlc3Qjd2l0aENyZWRlbnRpYWxzXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNGaXJlZm94MTFPckdyZWF0ZXIgPSBzaWduYWxSLl8uZmlyZWZveE1ham9yVmVyc2lvbih3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgPj0gMTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmNBYm9ydCA9ICEhY29ubmVjdGlvbi53aXRoQ3JlZGVudGlhbHMgJiYgaXNGaXJlZm94MTFPckdyZWF0ZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiVGhlIHN0YXJ0IHJlcXVlc3Qgc3VjY2VlZGVkLiBUcmFuc2l0aW9uaW5nIHRvIHRoZSBjb25uZWN0ZWQgc3RhdGUuXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VwcG9ydHNLZWVwQWxpdmUoY29ubmVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxSLnRyYW5zcG9ydHMuX2xvZ2ljLm1vbml0b3JLZWVwQWxpdmUoY29ubmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbFIudHJhbnNwb3J0cy5fbG9naWMuc3RhcnRIZWFydGJlYXQoY29ubmVjdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZWQgdG8gZW5zdXJlIGxvdyBhY3Rpdml0eSBjbGllbnRzIG1haW50YWluIHRoZWlyIGF1dGhlbnRpY2F0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTXVzdCBiZSBjb25maWd1cmVkIG9uY2UgYSB0cmFuc3BvcnQgaGFzIGJlZW4gZGVjaWRlZCB0byBwZXJmb3JtIHZhbGlkIHBpbmcgcmVxdWVzdHMuXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxSLl8uY29uZmlndXJlUGluZ0ludGVydmFsKGNvbm5lY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoYW5nZVN0YXRlKGNvbm5lY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbFIuY29ubmVjdGlvblN0YXRlLmNvbm5lY3RpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbFIuY29ubmVjdGlvblN0YXRlLmNvbm5lY3RlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIldBUk5JTkchIFRoZSBjb25uZWN0aW9uIHdhcyBub3QgaW4gdGhlIGNvbm5lY3Rpbmcgc3RhdGUuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEcmFpbiBhbnkgaW5jb21pbmcgYnVmZmVyZWQgbWVzc2FnZXMgKG1lc3NhZ2VzIHRoYXQgY2FtZSBpbiBwcmlvciB0byBjb25uZWN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5fLmNvbm5lY3RpbmdNZXNzYWdlQnVmZmVyLmRyYWluKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQoY29ubmVjdGlvbikudHJpZ2dlckhhbmRsZXIoZXZlbnRzLm9uU3RhcnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aXJlIHRoZSBzdG9wIGhhbmRsZXIgZm9yIHdoZW4gdGhlIHVzZXIgbGVhdmVzIHRoZSBwYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICBfcGFnZVdpbmRvdy5iaW5kKFwidW5sb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIldpbmRvdyB1bmxvYWRpbmcsIHN0b3BwaW5nIHRoZSBjb25uZWN0aW9uLlwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc3RvcChhc3luY0Fib3J0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGaXJlZm94MTFPckdyZWF0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94IGRvZXMgbm90IGZpcmUgY3Jvc3MtZG9tYWluIFhIUnMgaW4gdGhlIG5vcm1hbCB1bmxvYWQgaGFuZGxlciBvbiB0YWIgY2xvc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gIzI0MDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcGFnZVdpbmRvdy5iaW5kKFwiYmVmb3JldW5sb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgY29ubmVjdGlvbi5zdG9wKCkgcnVucyBydW5zIGluIGJlZm9yZXVubG9hZCBhbmQgZmFpbHMsIGl0IHdpbGwgYWxzbyBmYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluIHVubG9hZCB1bmxlc3MgY29ubmVjdGlvbi5zdG9wKCkgcnVucyBhZnRlciBhIHRpbWVvdXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc3RvcChhc3luY0Fib3J0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIG9uRmFsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2codHJhbnNwb3J0Lm5hbWUgKyBcIiB0cmFuc3BvcnQgdGhyZXcgJ1wiICsgZXJyb3IubWVzc2FnZSArIFwiJyB3aGVuIGF0dGVtcHRpbmcgdG8gc3RhcnQuXCIpO1xuICAgICAgICAgICAgICAgICAgICBvbkZhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHVybCA9IGNvbm5lY3Rpb24udXJsICsgXCIvbmVnb3RpYXRlXCIsXG4gICAgICAgICAgICAgICAgb25GYWlsZWQgPSBmdW5jdGlvbiAoZXJyb3IsIGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVyciA9IHNpZ25hbFIuXy5lcnJvcihyZXNvdXJjZXMuZXJyb3JPbk5lZ290aWF0ZSwgZXJyb3IsIGNvbm5lY3Rpb24uXy5uZWdvdGlhdGVSZXF1ZXN0KTtcblxuICAgICAgICAgICAgICAgICAgICAkKGNvbm5lY3Rpb24pLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vbkVycm9yLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCB0aGUgY29ubmVjdGlvbiBpZiBuZWdvdGlhdGUgZmFpbGVkXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc3RvcCgpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICQoY29ubmVjdGlvbikudHJpZ2dlckhhbmRsZXIoZXZlbnRzLm9uU3RhcnRpbmcpO1xuXG4gICAgICAgICAgICB1cmwgPSBzaWduYWxSLnRyYW5zcG9ydHMuX2xvZ2ljLnByZXBhcmVRdWVyeVN0cmluZyhjb25uZWN0aW9uLCB1cmwpO1xuXG4gICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIk5lZ290aWF0aW5nIHdpdGggJ1wiICsgdXJsICsgXCInLlwiKTtcblxuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgYWpheCBuZWdvdGlhdGUgcmVxdWVzdCBvYmplY3Qgc28gd2UgY2FuIGFib3J0IGl0IGlmIHN0b3AgaXMgY2FsbGVkIHdoaWxlIHRoZSByZXF1ZXN0IGlzIGluIGZsaWdodC5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24uXy5uZWdvdGlhdGVSZXF1ZXN0ID0gc2lnbmFsUi50cmFuc3BvcnRzLl9sb2dpYy5hamF4KGNvbm5lY3Rpb24sIHtcbiAgICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yLCBzdGF0dXNUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2F1c2UgYW55IGVycm9ycyBpZiB3ZSdyZSBhYm9ydGluZyBvdXIgb3duIG5lZ290aWF0ZSByZXF1ZXN0LlxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzVGV4dCAhPT0gX25lZ290aWF0ZUFib3J0VGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25GYWlsZWQoZXJyb3IsIGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyByZWplY3Rpb24gd2lsbCBub29wIGlmIHRoZSBkZWZlcnJlZCBoYXMgYWxyZWFkeSBiZWVuIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHNpZ25hbFIuXy5lcnJvcihyZXNvdXJjZXMuc3RvcHBlZFdoaWxlTmVnb3RpYXRpbmcsIG51bGwgLyogZXJyb3IgKi8sIGNvbm5lY3Rpb24uXy5uZWdvdGlhdGVSZXF1ZXN0KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtlZXBBbGl2ZURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm90b2NvbEVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0cyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkVHJhbnNwb3J0cyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBjb25uZWN0aW9uLl9wYXJzZVJlc3BvbnNlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkZhaWxlZChzaWduYWxSLl8uZXJyb3IocmVzb3VyY2VzLmVycm9yUGFyc2luZ05lZ290aWF0ZVJlc3BvbnNlLCBlcnJvciksIGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAga2VlcEFsaXZlRGF0YSA9IGNvbm5lY3Rpb24uXy5rZWVwQWxpdmVEYXRhO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmFwcFJlbGF0aXZlVXJsID0gcmVzLlVybDtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5pZCA9IHJlcy5Db25uZWN0aW9uSWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24udG9rZW4gPSByZXMuQ29ubmVjdGlvblRva2VuO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLndlYlNvY2tldFNlcnZlclVybCA9IHJlcy5XZWJTb2NrZXRTZXJ2ZXJVcmw7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGxvbmcgcG9sbCB0aW1lb3V0IGlzIHRoZSBDb25uZWN0aW9uVGltZW91dCBwbHVzIDEwIHNlY29uZHNcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5fLnBvbGxUaW1lb3V0ID0gcmVzLkNvbm5lY3Rpb25UaW1lb3V0ICogMTAwMCArIDEwMDAwOyAvLyBpbiBtc1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE9uY2UgdGhlIHNlcnZlciBoYXMgbGFiZWxlZCB0aGUgUGVyc2lzdGVudENvbm5lY3Rpb24gYXMgRGlzY29ubmVjdGVkLCB3ZSBzaG91bGQgc3RvcCBhdHRlbXB0aW5nIHRvIHJlY29ubmVjdFxuICAgICAgICAgICAgICAgICAgICAvLyBhZnRlciByZXMuRGlzY29ubmVjdFRpbWVvdXQgc2Vjb25kcy5cbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5kaXNjb25uZWN0VGltZW91dCA9IHJlcy5EaXNjb25uZWN0VGltZW91dCAqIDEwMDA7IC8vIGluIG1zXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBUcmFuc3BvcnRDb25uZWN0VGltZW91dCBmcm9tIHRoZSByZXNwb25zZSB0byB0aGUgdHJhbnNwb3J0Q29ubmVjdFRpbWVvdXQgZnJvbSB0aGUgY2xpZW50IHRvIGNhbGN1bGF0ZSB0aGUgdG90YWwgdGltZW91dFxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLl8udG90YWxUcmFuc3BvcnRDb25uZWN0VGltZW91dCA9IGNvbm5lY3Rpb24udHJhbnNwb3J0Q29ubmVjdFRpbWVvdXQgKyByZXMuVHJhbnNwb3J0Q29ubmVjdFRpbWVvdXQgKiAxMDAwO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSBrZWVwIGFsaXZlXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMuS2VlcEFsaXZlVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIGtlZXAgYWxpdmUgZGF0YSBhcyBhY3RpdmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGtlZXBBbGl2ZURhdGEuYWN0aXZhdGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGltZW91dCB0byBkZXNpZ25hdGUgd2hlbiB0byBmb3JjZSB0aGUgY29ubmVjdGlvbiBpbnRvIHJlY29ubmVjdGluZyBjb252ZXJ0ZWQgdG8gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgICAgICBrZWVwQWxpdmVEYXRhLnRpbWVvdXQgPSByZXMuS2VlcEFsaXZlVGltZW91dCAqIDEwMDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRpbWVvdXQgdG8gZGVzaWduYXRlIHdoZW4gdG8gd2FybiB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlIGNvbm5lY3Rpb24gbWF5IGJlIGRlYWQgb3IgaXMgbm90IHJlc3BvbmRpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICBrZWVwQWxpdmVEYXRhLnRpbWVvdXRXYXJuaW5nID0ga2VlcEFsaXZlRGF0YS50aW1lb3V0ICogY29ubmVjdGlvbi5rZWVwQWxpdmVXYXJuQXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluc3RhbnRpYXRlIHRoZSBmcmVxdWVuY3kgaW4gd2hpY2ggd2UgY2hlY2sgdGhlIGtlZXAgYWxpdmUuICBJdCBtdXN0IGJlIHNob3J0IGluIG9yZGVyIHRvIG5vdCBtaXNzL3BpY2sgdXAgYW55IGNoYW5nZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uXy5iZWF0SW50ZXJ2YWwgPSAoa2VlcEFsaXZlRGF0YS50aW1lb3V0IC0ga2VlcEFsaXZlRGF0YS50aW1lb3V0V2FybmluZykgLyAzO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAga2VlcEFsaXZlRGF0YS5hY3RpdmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ucmVjb25uZWN0V2luZG93ID0gY29ubmVjdGlvbi5kaXNjb25uZWN0VGltZW91dCArIChrZWVwQWxpdmVEYXRhLnRpbWVvdXQgfHwgMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXMuUHJvdG9jb2xWZXJzaW9uIHx8IHJlcy5Qcm90b2NvbFZlcnNpb24gIT09IGNvbm5lY3Rpb24uY2xpZW50UHJvdG9jb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3RvY29sRXJyb3IgPSBzaWduYWxSLl8uZXJyb3Ioc2lnbmFsUi5fLmZvcm1hdChyZXNvdXJjZXMucHJvdG9jb2xJbmNvbXBhdGlibGUsIGNvbm5lY3Rpb24uY2xpZW50UHJvdG9jb2wsIHJlcy5Qcm90b2NvbFZlcnNpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoY29ubmVjdGlvbikudHJpZ2dlckhhbmRsZXIoZXZlbnRzLm9uRXJyb3IsIFtwcm90b2NvbEVycm9yXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocHJvdG9jb2xFcnJvcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChzaWduYWxSLnRyYW5zcG9ydHMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoa2V5LmluZGV4T2YoXCJfXCIpID09PSAwKSB8fCAoa2V5ID09PSBcIndlYlNvY2tldHNcIiAmJiAhcmVzLlRyeVdlYlNvY2tldHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBwb3J0ZWRUcmFuc3BvcnRzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCQuaXNBcnJheShjb25maWcudHJhbnNwb3J0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNvbmZpZy50cmFuc3BvcnQsIGZ1bmN0aW9uIChfLCB0cmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KHRyYW5zcG9ydCwgc3VwcG9ydGVkVHJhbnNwb3J0cykgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRzLnB1c2godHJhbnNwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcudHJhbnNwb3J0ID09PSBcImF1dG9cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0cyA9IHN1cHBvcnRlZFRyYW5zcG9ydHM7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJC5pbkFycmF5KGNvbmZpZy50cmFuc3BvcnQsIHN1cHBvcnRlZFRyYW5zcG9ydHMpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydHMucHVzaChjb25maWcudHJhbnNwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemUodHJhbnNwb3J0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RhcnRpbmc6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgLy8vIDxzdW1tYXJ5PkFkZHMgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgaW52b2tlZCBiZWZvcmUgYW55dGhpbmcgaXMgc2VudCBvdmVyIHRoZSBjb25uZWN0aW9uPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiY2FsbGJhY2tcIiB0eXBlPVwiRnVuY3Rpb25cIj5BIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgYmVmb3JlIHRoZSBjb25uZWN0aW9uIGlzIGZ1bGx5IGluc3RhbnRpYXRlZC48L3BhcmFtPlxuICAgICAgICAgICAgLy8vIDxyZXR1cm5zIHR5cGU9XCJzaWduYWxSXCIgLz5cbiAgICAgICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcztcbiAgICAgICAgICAgICQoY29ubmVjdGlvbikuYmluZChldmVudHMub25TdGFydGluZywgZnVuY3Rpb24gKGUsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICAgICAgfSxcblxuICAgICAgICBzZW5kOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgLy8vIDxzdW1tYXJ5PlNlbmRzIGRhdGEgb3ZlciB0aGUgY29ubmVjdGlvbjwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImRhdGFcIiB0eXBlPVwiU3RyaW5nXCI+VGhlIGRhdGEgdG8gc2VuZCBvdmVyIHRoZSBjb25uZWN0aW9uPC9wYXJhbT5cbiAgICAgICAgICAgIC8vLyA8cmV0dXJucyB0eXBlPVwic2lnbmFsUlwiIC8+XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLnN0YXRlID09PSBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5kaXNjb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBDb25uZWN0aW9uIGhhc24ndCBiZWVuIHN0YXJ0ZWQgeWV0XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2lnbmFsUjogQ29ubmVjdGlvbiBtdXN0IGJlIHN0YXJ0ZWQgYmVmb3JlIGRhdGEgY2FuIGJlIHNlbnQuIENhbGwgLnN0YXJ0KCkgYmVmb3JlIC5zZW5kKClcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLnN0YXRlID09PSBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5jb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29ubmVjdGlvbiBoYXNuJ3QgYmVlbiBzdGFydGVkIHlldFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNpZ25hbFI6IENvbm5lY3Rpb24gaGFzIG5vdCBiZWVuIGZ1bGx5IGluaXRpYWxpemVkLiBVc2UgLnN0YXJ0KCkuZG9uZSgpIG9yIC5zdGFydCgpLmZhaWwoKSB0byBydW4gbG9naWMgYWZ0ZXIgdGhlIGNvbm5lY3Rpb24gaGFzIHN0YXJ0ZWQuXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25uZWN0aW9uLnRyYW5zcG9ydC5zZW5kKGNvbm5lY3Rpb24sIGRhdGEpO1xuICAgICAgICAgICAgLy8gUkVWSUVXOiBTaG91bGQgd2UgcmV0dXJuIGRlZmVycmVkIGhlcmU/XG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICAgICAgfSxcblxuICAgICAgICByZWNlaXZlZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLy8gPHN1bW1hcnk+QWRkcyBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBpbnZva2VkIGFmdGVyIGFueXRoaW5nIGlzIHJlY2VpdmVkIG92ZXIgdGhlIGNvbm5lY3Rpb248L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJjYWxsYmFja1wiIHR5cGU9XCJGdW5jdGlvblwiPkEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIGFueSBkYXRhIGlzIHJlY2VpdmVkIG9uIHRoZSBjb25uZWN0aW9uPC9wYXJhbT5cbiAgICAgICAgICAgIC8vLyA8cmV0dXJucyB0eXBlPVwic2lnbmFsUlwiIC8+XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICAkKGNvbm5lY3Rpb24pLmJpbmQoZXZlbnRzLm9uUmVjZWl2ZWQsIGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChjb25uZWN0aW9uLCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb247XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RhdGVDaGFuZ2VkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vLyA8c3VtbWFyeT5BZGRzIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgY29ubmVjdGlvbiBzdGF0ZSBjaGFuZ2VzPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiY2FsbGJhY2tcIiB0eXBlPVwiRnVuY3Rpb25cIj5BIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgY29ubmVjdGlvbiBzdGF0ZSBjaGFuZ2VzPC9wYXJhbT5cbiAgICAgICAgICAgIC8vLyA8cmV0dXJucyB0eXBlPVwic2lnbmFsUlwiIC8+XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICAkKGNvbm5lY3Rpb24pLmJpbmQoZXZlbnRzLm9uU3RhdGVDaGFuZ2VkLCBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoY29ubmVjdGlvbiwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uO1xuICAgICAgICB9LFxuXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vLyA8c3VtbWFyeT5BZGRzIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGludm9rZWQgYWZ0ZXIgYW4gZXJyb3Igb2NjdXJzIHdpdGggdGhlIGNvbm5lY3Rpb248L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJjYWxsYmFja1wiIHR5cGU9XCJGdW5jdGlvblwiPkEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIGFuIGVycm9yIG9jY3VycyBvbiB0aGUgY29ubmVjdGlvbjwvcGFyYW0+XG4gICAgICAgICAgICAvLy8gPHJldHVybnMgdHlwZT1cInNpZ25hbFJcIiAvPlxuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSB0aGlzO1xuICAgICAgICAgICAgJChjb25uZWN0aW9uKS5iaW5kKGV2ZW50cy5vbkVycm9yLCBmdW5jdGlvbiAoZSwgZXJyb3JEYXRhLCBzZW5kRGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubGFzdEVycm9yID0gZXJyb3JEYXRhO1xuICAgICAgICAgICAgICAgIC8vIEluIHByYWN0aWNlICdlcnJvckRhdGEnIGlzIHRoZSBTaWduYWxSIGJ1aWx0IGVycm9yIG9iamVjdC5cbiAgICAgICAgICAgICAgICAvLyBJbiBwcmFjdGljZSAnc2VuZERhdGEnIGlzIHVuZGVmaW5lZCBmb3IgYWxsIGVycm9yIGV2ZW50cyBleGNlcHQgdGhvc2UgdHJpZ2dlcmVkIGJ5XG4gICAgICAgICAgICAgICAgLy8gJ2FqYXhTZW5kJyBhbmQgJ3dlYlNvY2tldHMuc2VuZCcuJ3NlbmREYXRhJyBpcyB0aGUgb3JpZ2luYWwgc2VuZCBwYXlsb2FkLlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoY29ubmVjdGlvbiwgZXJyb3JEYXRhLCBzZW5kRGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2Nvbm5lY3RlZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLy8gPHN1bW1hcnk+QWRkcyBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIGNsaWVudCBkaXNjb25uZWN0czwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImNhbGxiYWNrXCIgdHlwZT1cIkZ1bmN0aW9uXCI+QSBjYWxsYmFjayBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIGNvbm5lY3Rpb24gaXMgYnJva2VuPC9wYXJhbT5cbiAgICAgICAgICAgIC8vLyA8cmV0dXJucyB0eXBlPVwic2lnbmFsUlwiIC8+XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICAkKGNvbm5lY3Rpb24pLmJpbmQoZXZlbnRzLm9uRGlzY29ubmVjdCwgZnVuY3Rpb24gKGUsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICAgICAgfSxcblxuICAgICAgICBjb25uZWN0aW9uU2xvdzogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLy8gPHN1bW1hcnk+QWRkcyBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIGNsaWVudCBkZXRlY3RzIGEgc2xvdyBjb25uZWN0aW9uPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiY2FsbGJhY2tcIiB0eXBlPVwiRnVuY3Rpb25cIj5BIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBzbG93PC9wYXJhbT5cbiAgICAgICAgICAgIC8vLyA8cmV0dXJucyB0eXBlPVwic2lnbmFsUlwiIC8+XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXM7XG4gICAgICAgICAgICAkKGNvbm5lY3Rpb24pLmJpbmQoZXZlbnRzLm9uQ29ubmVjdGlvblNsb3csIGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChjb25uZWN0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICAgICAgfSxcblxuICAgICAgICByZWNvbm5lY3Rpbmc6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgLy8vIDxzdW1tYXJ5PkFkZHMgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSB1bmRlcmx5aW5nIHRyYW5zcG9ydCBiZWdpbnMgcmVjb25uZWN0aW5nPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiY2FsbGJhY2tcIiB0eXBlPVwiRnVuY3Rpb25cIj5BIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgY29ubmVjdGlvbiBlbnRlcnMgYSByZWNvbm5lY3Rpbmcgc3RhdGU8L3BhcmFtPlxuICAgICAgICAgICAgLy8vIDxyZXR1cm5zIHR5cGU9XCJzaWduYWxSXCIgLz5cbiAgICAgICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcztcbiAgICAgICAgICAgICQoY29ubmVjdGlvbikuYmluZChldmVudHMub25SZWNvbm5lY3RpbmcsIGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChjb25uZWN0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb247XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVjb25uZWN0ZWQ6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgLy8vIDxzdW1tYXJ5PkFkZHMgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSB1bmRlcmx5aW5nIHRyYW5zcG9ydCByZWNvbm5lY3RzPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiY2FsbGJhY2tcIiB0eXBlPVwiRnVuY3Rpb25cIj5BIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgY29ubmVjdGlvbiBpcyByZXN0b3JlZDwvcGFyYW0+XG4gICAgICAgICAgICAvLy8gPHJldHVybnMgdHlwZT1cInNpZ25hbFJcIiAvPlxuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSB0aGlzO1xuICAgICAgICAgICAgJChjb25uZWN0aW9uKS5iaW5kKGV2ZW50cy5vblJlY29ubmVjdCwgZnVuY3Rpb24gKGUsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICAgICAgfSxcblxuICAgICAgICBzdG9wOiBmdW5jdGlvbiAoYXN5bmMsIG5vdGlmeVNlcnZlcikge1xuICAgICAgICAgICAgLy8vIDxzdW1tYXJ5PlN0b3BzIGxpc3RlbmluZzwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImFzeW5jXCIgdHlwZT1cIkJvb2xlYW5cIj5XaGV0aGVyIG9yIG5vdCB0byBhc3luY2hyb25vdXNseSBhYm9ydCB0aGUgY29ubmVjdGlvbjwvcGFyYW0+XG4gICAgICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJub3RpZnlTZXJ2ZXJcIiB0eXBlPVwiQm9vbGVhblwiPldoZXRoZXIgd2Ugd2FudCB0byBub3RpZnkgdGhlIHNlcnZlciB0aGF0IHdlIGFyZSBhYm9ydGluZyB0aGUgY29ubmVjdGlvbjwvcGFyYW0+XG4gICAgICAgICAgICAvLy8gPHJldHVybnMgdHlwZT1cInNpZ25hbFJcIiAvPlxuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSB0aGlzLFxuICAgICAgICAgICAgICAgIC8vIFNhdmUgZGVmZXJyYWwgYmVjYXVzZSB0aGlzIGlzIGFsd2F5cyBjbGVhbmVkIHVwXG4gICAgICAgICAgICAgICAgZGVmZXJyYWwgPSBjb25uZWN0aW9uLl9kZWZlcnJhbDtcblxuICAgICAgICAgICAgLy8gVmVyaWZ5IHRoYXQgd2UndmUgYm91bmQgYSBsb2FkIGV2ZW50LlxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uXy5kZWZlcnJlZFN0YXJ0SGFuZGxlcikge1xuICAgICAgICAgICAgICAgIC8vIFVuYmluZCB0aGUgZXZlbnQuXG4gICAgICAgICAgICAgICAgX3BhZ2VXaW5kb3cudW5iaW5kKFwibG9hZFwiLCBjb25uZWN0aW9uLl8uZGVmZXJyZWRTdGFydEhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBbHdheXMgY2xlYW4gdXAgcHJpdmF0ZSBub24tdGltZW91dCBiYXNlZCBzdGF0ZS5cbiAgICAgICAgICAgIGRlbGV0ZSBjb25uZWN0aW9uLl8uY29uZmlnO1xuICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3Rpb24uXy5kZWZlcnJlZFN0YXJ0SGFuZGxlcjtcblxuICAgICAgICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSBjaGVja2VkIGRlc3BpdGUgdGhlIGNvbm5lY3Rpb24gc3RhdGUgYmVjYXVzZSBhIGNvbm5lY3Rpb24gc3RhcnQgY2FuIGJlIGRlZmVycmVkIHVudGlsIHBhZ2UgbG9hZC5cbiAgICAgICAgICAgIC8vIElmIHdlJ3ZlIGRlZmVycmVkIHRoZSBzdGFydCBkdWUgdG8gYSBwYWdlIGxvYWQgd2UgbmVlZCB0byB1bmJpbmQgdGhlIFwib25Mb2FkXCIgLT4gc3RhcnQgZXZlbnQuXG4gICAgICAgICAgICBpZiAoIV9wYWdlTG9hZGVkICYmICghY29ubmVjdGlvbi5fLmNvbmZpZyB8fCBjb25uZWN0aW9uLl8uY29uZmlnLndhaXRGb3JQYWdlTG9hZCA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIlN0b3BwaW5nIGNvbm5lY3Rpb24gcHJpb3IgdG8gbmVnb3RpYXRlLlwiKTtcblxuICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSBkZWZlcnJhbCB3ZSBzaG91bGQgcmVqZWN0IGl0XG4gICAgICAgICAgICAgICAgaWYgKGRlZmVycmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmFsLnJlamVjdChzaWduYWxSLl8uZXJyb3IocmVzb3VyY2VzLnN0b3BwZWRXaGlsZUxvYWRpbmcpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTaG9ydC1jaXJjdWl0IGJlY2F1c2UgdGhlIHN0YXJ0IGhhcyBub3QgYmVlbiBmdWxseSBzdGFydGVkLlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uc3RhdGUgPT09IHNpZ25hbFIuY29ubmVjdGlvblN0YXRlLmRpc2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJTdG9wcGluZyBjb25uZWN0aW9uLlwiKTtcblxuICAgICAgICAgICAgY2hhbmdlU3RhdGUoY29ubmVjdGlvbiwgY29ubmVjdGlvbi5zdGF0ZSwgc2lnbmFsUi5jb25uZWN0aW9uU3RhdGUuZGlzY29ubmVjdGVkKTtcblxuICAgICAgICAgICAgLy8gQ2xlYXIgdGhpcyBubyBtYXR0ZXIgd2hhdFxuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChjb25uZWN0aW9uLl8uYmVhdEhhbmRsZSk7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChjb25uZWN0aW9uLl8ucGluZ0ludGVydmFsSWQpO1xuXG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbi50cmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnRyYW5zcG9ydC5zdG9wKGNvbm5lY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vdGlmeVNlcnZlciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi50cmFuc3BvcnQuYWJvcnQoY29ubmVjdGlvbiwgYXN5bmMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzdXBwb3J0c0tlZXBBbGl2ZShjb25uZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBzaWduYWxSLnRyYW5zcG9ydHMuX2xvZ2ljLnN0b3BNb25pdG9yaW5nS2VlcEFsaXZlKGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24udHJhbnNwb3J0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uXy5uZWdvdGlhdGVSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIG5lZ290aWF0aW9uIHJlcXVlc3QgaGFzIGFscmVhZHkgY29tcGxldGVkIHRoaXMgd2lsbCBub29wLlxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uXy5uZWdvdGlhdGVSZXF1ZXN0LmFib3J0KF9uZWdvdGlhdGVBYm9ydFRleHQpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25uZWN0aW9uLl8ubmVnb3RpYXRlUmVxdWVzdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW5zdXJlIHRoYXQgaW5pdEhhbmRsZXIuc3RvcCgpIGlzIGNhbGxlZCBiZWZvcmUgY29ubmVjdGlvbi5fZGVmZXJyYWwgaXMgZGVsZXRlZFxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uXy5pbml0SGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uXy5pbml0SGFuZGxlci5zdG9wKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRyaWdnZXIgdGhlIGRpc2Nvbm5lY3QgZXZlbnRcbiAgICAgICAgICAgICQoY29ubmVjdGlvbikudHJpZ2dlckhhbmRsZXIoZXZlbnRzLm9uRGlzY29ubmVjdCk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSBjb25uZWN0aW9uLl9kZWZlcnJhbDtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25uZWN0aW9uLm1lc3NhZ2VJZDtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25uZWN0aW9uLmdyb3Vwc1Rva2VuO1xuICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3Rpb24uaWQ7XG4gICAgICAgICAgICBkZWxldGUgY29ubmVjdGlvbi5fLnBpbmdJbnRlcnZhbElkO1xuICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3Rpb24uXy5sYXN0TWVzc2FnZUF0O1xuICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3Rpb24uXy5sYXN0QWN0aXZlQXQ7XG5cbiAgICAgICAgICAgIC8vIENsZWFyIG91dCBvdXIgbWVzc2FnZSBidWZmZXJcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uXy5jb25uZWN0aW5nTWVzc2FnZUJ1ZmZlci5jbGVhcigpO1xuXG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICAgICAgfSxcblxuICAgICAgICBsb2c6IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgICAgIGxvZyhtc2csIHRoaXMubG9nZ2luZyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgc2lnbmFsUi5mbi5pbml0LnByb3RvdHlwZSA9IHNpZ25hbFIuZm47XG5cbiAgICBzaWduYWxSLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vLyA8c3VtbWFyeT5SZWluc3RhdGVzIHRoZSBvcmlnaW5hbCB2YWx1ZSBvZiAkLmNvbm5lY3Rpb24gYW5kIHJldHVybnMgdGhlIHNpZ25hbFIgb2JqZWN0IGZvciBtYW51YWwgYXNzaWdubWVudDwvc3VtbWFyeT5cbiAgICAgICAgLy8vIDxyZXR1cm5zIHR5cGU9XCJzaWduYWxSXCIgLz5cbiAgICAgICAgaWYgKCQuY29ubmVjdGlvbiA9PT0gc2lnbmFsUikge1xuICAgICAgICAgICAgJC5jb25uZWN0aW9uID0gX2Nvbm5lY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpZ25hbFI7XG4gICAgfTtcblxuICAgIGlmICgkLmNvbm5lY3Rpb24pIHtcbiAgICAgICAgX2Nvbm5lY3Rpb24gPSAkLmNvbm5lY3Rpb247XG4gICAgfVxuXG4gICAgJC5jb25uZWN0aW9uID0gJC5zaWduYWxSID0gc2lnbmFsUjtcblxufSh3aW5kb3cualF1ZXJ5LCB3aW5kb3cpKTtcbi8qIGpxdWVyeS5zaWduYWxSLnRyYW5zcG9ydHMuY29tbW9uLmpzICovXG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBPcGVuIFRlY2hub2xvZ2llcywgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBTZWUgTGljZW5zZS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG4vKmdsb2JhbCB3aW5kb3c6ZmFsc2UgKi9cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJqcXVlcnkuc2lnbmFsUi5jb3JlLmpzXCIgLz5cblxuKGZ1bmN0aW9uICgkLCB3aW5kb3csIHVuZGVmaW5lZCkge1xuXG4gICAgdmFyIHNpZ25hbFIgPSAkLnNpZ25hbFIsXG4gICAgICAgIGV2ZW50cyA9ICQuc2lnbmFsUi5ldmVudHMsXG4gICAgICAgIGNoYW5nZVN0YXRlID0gJC5zaWduYWxSLmNoYW5nZVN0YXRlLFxuICAgICAgICBzdGFydEFib3J0VGV4dCA9IFwiX19TdGFydCBBYm9ydGVkX19cIixcbiAgICAgICAgdHJhbnNwb3J0TG9naWM7XG5cbiAgICBzaWduYWxSLnRyYW5zcG9ydHMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGJlYXQoY29ubmVjdGlvbikge1xuICAgICAgICBpZiAoY29ubmVjdGlvbi5fLmtlZXBBbGl2ZURhdGEubW9uaXRvcmluZykge1xuICAgICAgICAgICAgY2hlY2tJZkFsaXZlKGNvbm5lY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgd2Ugc3VjY2Vzc2Z1bGx5IG1hcmtlZCBhY3RpdmUgYmVmb3JlIGNvbnRpbnVpbmcgdGhlIGhlYXJ0YmVhdC5cbiAgICAgICAgaWYgKHRyYW5zcG9ydExvZ2ljLm1hcmtBY3RpdmUoY29ubmVjdGlvbikpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uXy5iZWF0SGFuZGxlID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGJlYXQoY29ubmVjdGlvbik7XG4gICAgICAgICAgICB9LCBjb25uZWN0aW9uLl8uYmVhdEludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrSWZBbGl2ZShjb25uZWN0aW9uKSB7XG4gICAgICAgIHZhciBrZWVwQWxpdmVEYXRhID0gY29ubmVjdGlvbi5fLmtlZXBBbGl2ZURhdGEsXG4gICAgICAgICAgICB0aW1lRWxhcHNlZDtcblxuICAgICAgICAvLyBPbmx5IGNoZWNrIGlmIHdlJ3JlIGNvbm5lY3RlZFxuICAgICAgICBpZiAoY29ubmVjdGlvbi5zdGF0ZSA9PT0gc2lnbmFsUi5jb25uZWN0aW9uU3RhdGUuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aW1lRWxhcHNlZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gY29ubmVjdGlvbi5fLmxhc3RNZXNzYWdlQXQ7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBrZWVwIGFsaXZlIGhhcyBjb21wbGV0ZWx5IHRpbWVkIG91dFxuICAgICAgICAgICAgaWYgKHRpbWVFbGFwc2VkID49IGtlZXBBbGl2ZURhdGEudGltZW91dCkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiS2VlcCBhbGl2ZSB0aW1lZCBvdXQuICBOb3RpZnlpbmcgdHJhbnNwb3J0IHRoYXQgY29ubmVjdGlvbiBoYXMgYmVlbiBsb3N0LlwiKTtcblxuICAgICAgICAgICAgICAgIC8vIE5vdGlmeSB0cmFuc3BvcnQgdGhhdCB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBsb3N0XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi50cmFuc3BvcnQubG9zdENvbm5lY3Rpb24oY29ubmVjdGlvbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRpbWVFbGFwc2VkID49IGtlZXBBbGl2ZURhdGEudGltZW91dFdhcm5pbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRvIGFzc3VyZSB0aGF0IHRoZSB1c2VyIG9ubHkgZ2V0cyBhIHNpbmdsZSB3YXJuaW5nXG4gICAgICAgICAgICAgICAgaWYgKCFrZWVwQWxpdmVEYXRhLnVzZXJOb3RpZmllZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIktlZXAgYWxpdmUgaGFzIGJlZW4gbWlzc2VkLCBjb25uZWN0aW9uIG1heSBiZSBkZWFkL3Nsb3cuXCIpO1xuICAgICAgICAgICAgICAgICAgICAkKGNvbm5lY3Rpb24pLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vbkNvbm5lY3Rpb25TbG93KTtcbiAgICAgICAgICAgICAgICAgICAga2VlcEFsaXZlRGF0YS51c2VyTm90aWZpZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAga2VlcEFsaXZlRGF0YS51c2VyTm90aWZpZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFqYXhVcmwoY29ubmVjdGlvbiwgcGF0aCkge1xuICAgICAgICB2YXIgdXJsID0gY29ubmVjdGlvbi51cmwgKyBwYXRoO1xuXG4gICAgICAgIGlmIChjb25uZWN0aW9uLnRyYW5zcG9ydCkge1xuICAgICAgICAgICAgdXJsICs9IFwiP3RyYW5zcG9ydD1cIiArIGNvbm5lY3Rpb24udHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNwb3J0TG9naWMucHJlcGFyZVF1ZXJ5U3RyaW5nKGNvbm5lY3Rpb24sIHVybCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gSW5pdEhhbmRsZXIoY29ubmVjdGlvbikge1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuXG4gICAgICAgIHRoaXMuc3RhcnRSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGFydENvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdG9wcGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgSW5pdEhhbmRsZXIucHJvdG90eXBlID0ge1xuICAgICAgICBzdGFydDogZnVuY3Rpb24gKHRyYW5zcG9ydCwgb25TdWNjZXNzLCBvbkZhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IHRoYXQuY29ubmVjdGlvbixcbiAgICAgICAgICAgICAgICBmYWlsQ2FsbGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmICh0aGF0LnN0YXJ0UmVxdWVzdGVkIHx8IHRoYXQuY29ubmVjdGlvblN0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIldBUk5JTkchIFwiICsgdHJhbnNwb3J0Lm5hbWUgKyBcIiB0cmFuc3BvcnQgY2Fubm90IGJlIHN0YXJ0ZWQuIEluaXRpYWxpemF0aW9uIG9uZ29pbmcgb3IgY29tcGxldGVkLlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKHRyYW5zcG9ydC5uYW1lICsgXCIgdHJhbnNwb3J0IHN0YXJ0aW5nLlwiKTtcblxuICAgICAgICAgICAgdGhhdC50cmFuc3BvcnRUaW1lb3V0SGFuZGxlID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICghZmFpbENhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICBmYWlsQ2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2codHJhbnNwb3J0Lm5hbWUgKyBcIiB0cmFuc3BvcnQgdGltZWQgb3V0IHdoZW4gdHJ5aW5nIHRvIGNvbm5lY3QuXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnRyYW5zcG9ydEZhaWxlZCh0cmFuc3BvcnQsIHVuZGVmaW5lZCwgb25GYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgY29ubmVjdGlvbi5fLnRvdGFsVHJhbnNwb3J0Q29ubmVjdFRpbWVvdXQpO1xuXG4gICAgICAgICAgICB0cmFuc3BvcnQuc3RhcnQoY29ubmVjdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICghZmFpbENhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmluaXRSZWNlaXZlZCh0cmFuc3BvcnQsIG9uU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgYWxsb3cgdGhlIHNhbWUgdHJhbnNwb3J0IHRvIGNhdXNlIG9uRmFsbGJhY2sgdG8gYmUgY2FsbGVkIHR3aWNlXG4gICAgICAgICAgICAgICAgaWYgKCFmYWlsQ2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZhaWxDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnRyYW5zcG9ydEZhaWxlZCh0cmFuc3BvcnQsIGVycm9yLCBvbkZhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZXR1cm5zIHRydWUgaWYgdGhlIHRyYW5zcG9ydCBzaG91bGQgc3RvcDtcbiAgICAgICAgICAgICAgICAvLyBmYWxzZSBpZiBpdCBzaG91bGQgYXR0ZW1wdCB0byByZWNvbm5lY3RcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoYXQuc3RhcnRDb21wbGV0ZWQgfHwgdGhhdC5jb25uZWN0aW9uU3RvcHBlZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRyYW5zcG9ydFRpbWVvdXRIYW5kbGUpO1xuICAgICAgICAgICAgc2lnbmFsUi50cmFuc3BvcnRzLl9sb2dpYy50cnlBYm9ydFN0YXJ0UmVxdWVzdCh0aGlzLmNvbm5lY3Rpb24pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXRSZWNlaXZlZDogZnVuY3Rpb24gKHRyYW5zcG9ydCwgb25TdWNjZXNzKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IHRoYXQuY29ubmVjdGlvbjtcblxuICAgICAgICAgICAgaWYgKHRoYXQuc3RhcnRSZXF1ZXN0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIldBUk5JTkchIFRoZSBjbGllbnQgcmVjZWl2ZWQgbXVsdGlwbGUgaW5pdCBtZXNzYWdlcy5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhhdC5jb25uZWN0aW9uU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhhdC5zdGFydFJlcXVlc3RlZCA9IHRydWU7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoYXQudHJhbnNwb3J0VGltZW91dEhhbmRsZSk7XG5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKHRyYW5zcG9ydC5uYW1lICsgXCIgdHJhbnNwb3J0IGNvbm5lY3RlZC4gSW5pdGlhdGluZyBzdGFydCByZXF1ZXN0LlwiKTtcbiAgICAgICAgICAgIHNpZ25hbFIudHJhbnNwb3J0cy5fbG9naWMuYWpheFN0YXJ0KGNvbm5lY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnN0YXJ0Q29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBvblN1Y2Nlc3MoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRyYW5zcG9ydEZhaWxlZDogZnVuY3Rpb24gKHRyYW5zcG9ydCwgZXJyb3IsIG9uRmFsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9uLFxuICAgICAgICAgICAgICAgIGRlZmVycmVkID0gY29ubmVjdGlvbi5fZGVmZXJyYWwsXG4gICAgICAgICAgICAgICAgd3JhcHBlZEVycm9yO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRyYW5zcG9ydFRpbWVvdXRIYW5kbGUpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuc3RhcnRSZXF1ZXN0ZWQpIHtcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnQuc3RvcChjb25uZWN0aW9uKTtcblxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKHRyYW5zcG9ydC5uYW1lICsgXCIgdHJhbnNwb3J0IGZhaWxlZCB0byBjb25uZWN0LiBBdHRlbXB0aW5nIHRvIGZhbGwgYmFjay5cIik7XG4gICAgICAgICAgICAgICAgb25GYWxsYmFjaygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5zdGFydENvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgIC8vIERvIG5vdCBhdHRlbXB0IHRvIGZhbGwgYmFjayBpZiBhIHN0YXJ0IHJlcXVlc3QgaXMgb25nb2luZyBkdXJpbmcgYSB0cmFuc3BvcnQgZmFpbHVyZS5cbiAgICAgICAgICAgICAgICAvLyBJbnN0ZWFkLCB0cmlnZ2VyIGFuIGVycm9yIGFuZCBzdG9wIHRoZSBjb25uZWN0aW9uLlxuICAgICAgICAgICAgICAgIHdyYXBwZWRFcnJvciA9IHNpZ25hbFIuXy5lcnJvcihzaWduYWxSLnJlc291cmNlcy5lcnJvckR1cmluZ1N0YXJ0UmVxdWVzdCwgZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2codHJhbnNwb3J0Lm5hbWUgKyBcIiB0cmFuc3BvcnQgZmFpbGVkIGR1cmluZyB0aGUgc3RhcnQgcmVxdWVzdC4gU3RvcHBpbmcgdGhlIGNvbm5lY3Rpb24uXCIpO1xuICAgICAgICAgICAgICAgICQoY29ubmVjdGlvbikudHJpZ2dlckhhbmRsZXIoZXZlbnRzLm9uRXJyb3IsIFt3cmFwcGVkRXJyb3JdKTtcbiAgICAgICAgICAgICAgICBpZiAoZGVmZXJyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHdyYXBwZWRFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zdG9wKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBzdGFydCByZXF1ZXN0IGhhcyBjb21wbGV0ZWQsIGJ1dCB0aGUgY29ubmVjdGlvbiBoYXMgbm90IHN0b3BwZWQuXG4gICAgICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBkbyBhbnl0aGluZyBoZXJlLiBUaGUgdHJhbnNwb3J0IHNob3VsZCBhdHRlbXB0IGl0cyBub3JtYWwgcmVjb25uZWN0IGxvZ2ljLlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRyYW5zcG9ydExvZ2ljID0gc2lnbmFsUi50cmFuc3BvcnRzLl9sb2dpYyA9IHtcbiAgICAgICAgYWpheDogZnVuY3Rpb24gKGNvbm5lY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiAkLmFqYXgoXG4gICAgICAgICAgICAgICAgJC5leHRlbmQoLypkZWVwIGNvcHkqLyB0cnVlLCB7fSwgJC5zaWduYWxSLmFqYXhEZWZhdWx0cywge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgeGhyRmllbGRzOiB7IHdpdGhDcmVkZW50aWFsczogY29ubmVjdGlvbi53aXRoQ3JlZGVudGlhbHMgfSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6IGNvbm5lY3Rpb24uY29udGVudFR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBjb25uZWN0aW9uLmFqYXhEYXRhVHlwZVxuICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBwaW5nU2VydmVyOiBmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgLy8vIDxzdW1tYXJ5PlBpbmdzIHRoZSBzZXJ2ZXI8L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJjb25uZWN0aW9uXCIgdHlwZT1cInNpZ25hbHJcIj5Db25uZWN0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgc2VydmVyIHBpbmc8L3BhcmFtPlxuICAgICAgICAgICAgLy8vIDxyZXR1cm5zIHR5cGU9XCJzaWduYWxSXCIgLz5cbiAgICAgICAgICAgIHZhciB1cmwsXG4gICAgICAgICAgICAgICAgeGhyLFxuICAgICAgICAgICAgICAgIGRlZmVycmFsID0gJC5EZWZlcnJlZCgpO1xuXG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbi50cmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgICB1cmwgPSBjb25uZWN0aW9uLnVybCArIFwiL3BpbmdcIjtcblxuICAgICAgICAgICAgICAgIHVybCA9IHRyYW5zcG9ydExvZ2ljLmFkZFFzKHVybCwgY29ubmVjdGlvbi5xcyk7XG5cbiAgICAgICAgICAgICAgICB4aHIgPSB0cmFuc3BvcnRMb2dpYy5hamF4KGNvbm5lY3Rpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBjb25uZWN0aW9uLl9wYXJzZVJlc3BvbnNlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJhbC5yZWplY3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbFIuXy50cmFuc3BvcnRFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbFIucmVzb3VyY2VzLnBpbmdTZXJ2ZXJGYWlsZWRQYXJzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24udHJhbnNwb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5SZXNwb25zZSA9PT0gXCJwb25nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJhbC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJhbC5yZWplY3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbFIuXy50cmFuc3BvcnRFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbFIuXy5mb3JtYXQoc2lnbmFsUi5yZXNvdXJjZXMucGluZ1NlcnZlckZhaWxlZEludmFsaWRSZXNwb25zZSwgcmVzdWx0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24udHJhbnNwb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAvKiBlcnJvciAqLyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDAxIHx8IGVycm9yLnN0YXR1cyA9PT0gNDAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyYWwucmVqZWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxSLl8udHJhbnNwb3J0RXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxSLl8uZm9ybWF0KHNpZ25hbFIucmVzb3VyY2VzLnBpbmdTZXJ2ZXJGYWlsZWRTdGF0dXNDb2RlLCBlcnJvci5zdGF0dXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi50cmFuc3BvcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmFsLnJlamVjdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsUi5fLnRyYW5zcG9ydEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsUi5yZXNvdXJjZXMucGluZ1NlcnZlckZhaWxlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24udHJhbnNwb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlZmVycmFsLnJlamVjdChcbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsUi5fLnRyYW5zcG9ydEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsUi5yZXNvdXJjZXMubm9Db25uZWN0aW9uVHJhbnNwb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi50cmFuc3BvcnRcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcHJlcGFyZVF1ZXJ5U3RyaW5nOiBmdW5jdGlvbiAoY29ubmVjdGlvbiwgdXJsKSB7XG4gICAgICAgICAgICB2YXIgcHJlcGFyZWRVcmw7XG5cbiAgICAgICAgICAgIC8vIFVzZSBhZGRRcyB0byBzdGFydCBzaW5jZSBpdCBoYW5kbGVzIHRoZSA/LyYgcHJlZml4IGZvciB1c1xuICAgICAgICAgICAgcHJlcGFyZWRVcmwgPSB0cmFuc3BvcnRMb2dpYy5hZGRRcyh1cmwsIFwiY2xpZW50UHJvdG9jb2w9XCIgKyBjb25uZWN0aW9uLmNsaWVudFByb3RvY29sKTtcblxuICAgICAgICAgICAgLy8gQWRkIHRoZSB1c2VyLXNwZWNpZmllZCBxdWVyeSBzdHJpbmcgcGFyYW1zIGlmIGFueVxuICAgICAgICAgICAgcHJlcGFyZWRVcmwgPSB0cmFuc3BvcnRMb2dpYy5hZGRRcyhwcmVwYXJlZFVybCwgY29ubmVjdGlvbi5xcyk7XG5cbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLnRva2VuKSB7XG4gICAgICAgICAgICAgICAgcHJlcGFyZWRVcmwgKz0gXCImY29ubmVjdGlvblRva2VuPVwiICsgd2luZG93LmVuY29kZVVSSUNvbXBvbmVudChjb25uZWN0aW9uLnRva2VuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uZGF0YSkge1xuICAgICAgICAgICAgICAgIHByZXBhcmVkVXJsICs9IFwiJmNvbm5lY3Rpb25EYXRhPVwiICsgd2luZG93LmVuY29kZVVSSUNvbXBvbmVudChjb25uZWN0aW9uLmRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcHJlcGFyZWRVcmw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkUXM6IGZ1bmN0aW9uICh1cmwsIHFzKSB7XG4gICAgICAgICAgICB2YXIgYXBwZW5kZXIgPSB1cmwuaW5kZXhPZihcIj9cIikgIT09IC0xID8gXCImXCIgOiBcIj9cIixcbiAgICAgICAgICAgICAgICBmaXJzdENoYXI7XG5cbiAgICAgICAgICAgIGlmICghcXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIChxcykgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsICsgYXBwZW5kZXIgKyAkLnBhcmFtKHFzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiAocXMpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgZmlyc3RDaGFyID0gcXMuY2hhckF0KDApO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0Q2hhciA9PT0gXCI/XCIgfHwgZmlyc3RDaGFyID09PSBcIiZcIikge1xuICAgICAgICAgICAgICAgICAgICBhcHBlbmRlciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybCArIGFwcGVuZGVyICsgcXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlF1ZXJ5IHN0cmluZyBwcm9wZXJ0eSBtdXN0IGJlIGVpdGhlciBhIHN0cmluZyBvciBvYmplY3QuXCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEJVRyAjMjk1MzogVGhlIHVybCBuZWVkcyB0byBiZSBzYW1lIG90aGVyd2lzZSBpdCB3aWxsIGNhdXNlIGEgbWVtb3J5IGxlYWtcbiAgICAgICAgZ2V0VXJsOiBmdW5jdGlvbiAoY29ubmVjdGlvbiwgdHJhbnNwb3J0LCByZWNvbm5lY3RpbmcsIHBvbGwsIGFqYXhQb3N0KSB7XG4gICAgICAgICAgICAvLy8gPHN1bW1hcnk+R2V0cyB0aGUgdXJsIGZvciBtYWtpbmcgYSBHRVQgYmFzZWQgY29ubmVjdCByZXF1ZXN0PC9zdW1tYXJ5PlxuICAgICAgICAgICAgdmFyIGJhc2VVcmwgPSB0cmFuc3BvcnQgPT09IFwid2ViU29ja2V0c1wiID8gXCJcIiA6IGNvbm5lY3Rpb24uYmFzZVVybCxcbiAgICAgICAgICAgICAgICB1cmwgPSBiYXNlVXJsICsgY29ubmVjdGlvbi5hcHBSZWxhdGl2ZVVybCxcbiAgICAgICAgICAgICAgICBxcyA9IFwidHJhbnNwb3J0PVwiICsgdHJhbnNwb3J0O1xuXG4gICAgICAgICAgICBpZiAoIWFqYXhQb3N0ICYmIGNvbm5lY3Rpb24uZ3JvdXBzVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBxcyArPSBcIiZncm91cHNUb2tlbj1cIiArIHdpbmRvdy5lbmNvZGVVUklDb21wb25lbnQoY29ubmVjdGlvbi5ncm91cHNUb2tlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghcmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgdXJsICs9IFwiL2Nvbm5lY3RcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9uZ1BvbGxpbmcgdHJhbnNwb3J0IHNwZWNpZmljXG4gICAgICAgICAgICAgICAgICAgIHVybCArPSBcIi9wb2xsXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsICs9IFwiL3JlY29ubmVjdFwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghYWpheFBvc3QgJiYgY29ubmVjdGlvbi5tZXNzYWdlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcXMgKz0gXCImbWVzc2FnZUlkPVwiICsgd2luZG93LmVuY29kZVVSSUNvbXBvbmVudChjb25uZWN0aW9uLm1lc3NhZ2VJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXJsICs9IFwiP1wiICsgcXM7XG4gICAgICAgICAgICB1cmwgPSB0cmFuc3BvcnRMb2dpYy5wcmVwYXJlUXVlcnlTdHJpbmcoY29ubmVjdGlvbiwgdXJsKTtcblxuICAgICAgICAgICAgaWYgKCFhamF4UG9zdCkge1xuICAgICAgICAgICAgICAgIHVybCArPSBcIiZ0aWQ9XCIgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB1cmw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWF4aW1pemVQZXJzaXN0ZW50UmVzcG9uc2U6IGZ1bmN0aW9uIChtaW5QZXJzaXN0ZW50UmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgTWVzc2FnZUlkOiBtaW5QZXJzaXN0ZW50UmVzcG9uc2UuQyxcbiAgICAgICAgICAgICAgICBNZXNzYWdlczogbWluUGVyc2lzdGVudFJlc3BvbnNlLk0sXG4gICAgICAgICAgICAgICAgSW5pdGlhbGl6ZWQ6IHR5cGVvZiAobWluUGVyc2lzdGVudFJlc3BvbnNlLlMpICE9PSBcInVuZGVmaW5lZFwiID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIFNob3VsZFJlY29ubmVjdDogdHlwZW9mIChtaW5QZXJzaXN0ZW50UmVzcG9uc2UuVCkgIT09IFwidW5kZWZpbmVkXCIgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgTG9uZ1BvbGxEZWxheTogbWluUGVyc2lzdGVudFJlc3BvbnNlLkwsXG4gICAgICAgICAgICAgICAgR3JvdXBzVG9rZW46IG1pblBlcnNpc3RlbnRSZXNwb25zZS5HXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZUdyb3VwczogZnVuY3Rpb24gKGNvbm5lY3Rpb24sIGdyb3Vwc1Rva2VuKSB7XG4gICAgICAgICAgICBpZiAoZ3JvdXBzVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmdyb3Vwc1Rva2VuID0gZ3JvdXBzVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RyaW5naWZ5U2VuZDogZnVuY3Rpb24gKGNvbm5lY3Rpb24sIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKG1lc3NhZ2UpID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiAobWVzc2FnZSkgPT09IFwidW5kZWZpbmVkXCIgfHwgbWVzc2FnZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb24uanNvbi5zdHJpbmdpZnkobWVzc2FnZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWpheFNlbmQ6IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBkYXRhKSB7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IHRyYW5zcG9ydExvZ2ljLnN0cmluZ2lmeVNlbmQoY29ubmVjdGlvbiwgZGF0YSksXG4gICAgICAgICAgICAgICAgdXJsID0gZ2V0QWpheFVybChjb25uZWN0aW9uLCBcIi9zZW5kXCIpLFxuICAgICAgICAgICAgICAgIHhocixcbiAgICAgICAgICAgICAgICBvbkZhaWwgPSBmdW5jdGlvbiAoZXJyb3IsIGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgJChjb25uZWN0aW9uKS50cmlnZ2VySGFuZGxlcihldmVudHMub25FcnJvciwgW3NpZ25hbFIuXy50cmFuc3BvcnRFcnJvcihzaWduYWxSLnJlc291cmNlcy5zZW5kRmFpbGVkLCBjb25uZWN0aW9uLnRyYW5zcG9ydCwgZXJyb3IsIHhociksIGRhdGFdKTtcbiAgICAgICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgIHhociA9IHRyYW5zcG9ydExvZ2ljLmFqYXgoY29ubmVjdGlvbiwge1xuICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgIHR5cGU6IGNvbm5lY3Rpb24uYWpheERhdGFUeXBlID09PSBcImpzb25wXCIgPyBcIkdFVFwiIDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgY29udGVudFR5cGU6IHNpZ25hbFIuXy5kZWZhdWx0Q29udGVudFR5cGUsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBwYXlsb2FkXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBjb25uZWN0aW9uLl9wYXJzZVJlc3BvbnNlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkZhaWwoZXJyb3IsIGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0TG9naWMudHJpZ2dlclJlY2VpdmVkKGNvbm5lY3Rpb24sIHJlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IsIHRleHRTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHRTdGF0dXMgPT09IFwiYWJvcnRcIiB8fCB0ZXh0U3RhdHVzID09PSBcInBhcnNlcmVycm9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBwYXJzZXJlcnJvciBoYXBwZW5zIGZvciBzZW5kcyB0aGF0IGRvbid0IHJldHVybiBhbnkgZGF0YSwgYW5kIGhlbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCB3cml0ZSB0aGUganNvbnAgY2FsbGJhY2sgdG8gdGhlIHJlc3BvbnNlLiBUaGlzIGlzIGhhcmRlciB0byBmaXggb24gdGhlIHNlcnZlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28ganVzdCBoYWNrIGFyb3VuZCBpdCBvbiB0aGUgY2xpZW50IGZvciBub3cuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBvbkZhaWwoZXJyb3IsIGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4geGhyO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFqYXhBYm9ydDogZnVuY3Rpb24gKGNvbm5lY3Rpb24sIGFzeW5jKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIChjb25uZWN0aW9uLnRyYW5zcG9ydCkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFzeW5jIGJ5IGRlZmF1bHQgdW5sZXNzIGV4cGxpY2l0bHkgb3ZlcmlkZGVuXG4gICAgICAgICAgICBhc3luYyA9IHR5cGVvZiBhc3luYyA9PT0gXCJ1bmRlZmluZWRcIiA/IHRydWUgOiBhc3luYztcblxuICAgICAgICAgICAgdmFyIHVybCA9IGdldEFqYXhVcmwoY29ubmVjdGlvbiwgXCIvYWJvcnRcIik7XG5cbiAgICAgICAgICAgIHRyYW5zcG9ydExvZ2ljLmFqYXgoY29ubmVjdGlvbiwge1xuICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgIGFzeW5jOiBhc3luYyxcbiAgICAgICAgICAgICAgICB0aW1lb3V0OiAxMDAwLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJGaXJlZCBhamF4IGFib3J0IGFzeW5jID0gXCIgKyBhc3luYyArIFwiLlwiKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhamF4U3RhcnQ6IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBvblN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHZhciByZWplY3REZWZlcnJlZCA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSBjb25uZWN0aW9uLl9kZWZlcnJhbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmVycmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0cmlnZ2VyU3RhcnRFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIlRoZSBzdGFydCByZXF1ZXN0IGZhaWxlZC4gU3RvcHBpbmcgdGhlIGNvbm5lY3Rpb24uXCIpO1xuICAgICAgICAgICAgICAgICAgICAkKGNvbm5lY3Rpb24pLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vbkVycm9yLCBbZXJyb3JdKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0RGVmZXJyZWQoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25uZWN0aW9uLl8uc3RhcnRSZXF1ZXN0ID0gdHJhbnNwb3J0TG9naWMuYWpheChjb25uZWN0aW9uLCB7XG4gICAgICAgICAgICAgICAgdXJsOiBnZXRBamF4VXJsKGNvbm5lY3Rpb24sIFwiL3N0YXJ0XCIpLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXN1bHQsIHN0YXR1c1RleHQsIHhocikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YTtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGNvbm5lY3Rpb24uX3BhcnNlUmVzcG9uc2UocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJTdGFydEVycm9yKHNpZ25hbFIuXy5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxSLl8uZm9ybWF0KHNpZ25hbFIucmVzb3VyY2VzLmVycm9yUGFyc2luZ1N0YXJ0UmVzcG9uc2UsIHJlc3VsdCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IsIHhocikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuUmVzcG9uc2UgPT09IFwic3RhcnRlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJTdGFydEVycm9yKHNpZ25hbFIuXy5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxSLl8uZm9ybWF0KHNpZ25hbFIucmVzb3VyY2VzLmludmFsaWRTdGFydFJlc3BvbnNlLCByZXN1bHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgLyogZXJyb3IgKi8sIHhocikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgc3RhdHVzVGV4dCwgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1c1RleHQgIT09IHN0YXJ0QWJvcnRUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyU3RhcnRFcnJvcihzaWduYWxSLl8uZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsUi5yZXNvdXJjZXMuZXJyb3JEdXJpbmdTdGFydFJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IsIHhocikpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCBoYXMgYmVlbiBjYWxsZWQsIG5vIG5lZWQgdG8gdHJpZ2dlciB0aGUgZXJyb3IgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3Igc3RvcCB0aGUgY29ubmVjdGlvbiBhZ2FpbiB3aXRoIG9uU3RhcnRFcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJUaGUgc3RhcnQgcmVxdWVzdCBhYm9ydGVkIGJlY2F1c2UgY29ubmVjdGlvbi5zdG9wKCkgd2FzIGNhbGxlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3REZWZlcnJlZChzaWduYWxSLl8uZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsUi5yZXNvdXJjZXMuc3RvcHBlZER1cmluZ1N0YXJ0UmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsIC8qIGVycm9yICovLCB4aHIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRyeUFib3J0U3RhcnRSZXF1ZXN0OiBmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uXy5zdGFydFJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgc3RhcnQgcmVxdWVzdCBoYXMgYWxyZWFkeSBjb21wbGV0ZWQgdGhpcyB3aWxsIG5vb3AuXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5fLnN0YXJ0UmVxdWVzdC5hYm9ydChzdGFydEFib3J0VGV4dCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3Rpb24uXy5zdGFydFJlcXVlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJ5SW5pdGlhbGl6ZTogZnVuY3Rpb24gKHBlcnNpc3RlbnRSZXNwb25zZSwgb25Jbml0aWFsaXplZCkge1xuICAgICAgICAgICAgaWYgKHBlcnNpc3RlbnRSZXNwb25zZS5Jbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgIG9uSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB0cmlnZ2VyUmVjZWl2ZWQ6IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24uXy5jb25uZWN0aW5nTWVzc2FnZUJ1ZmZlci50cnlCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAkKGNvbm5lY3Rpb24pLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vblJlY2VpdmVkLCBbZGF0YV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHByb2Nlc3NNZXNzYWdlczogZnVuY3Rpb24gKGNvbm5lY3Rpb24sIG1pbkRhdGEsIG9uSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHZhciBkYXRhO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGxhc3QgbWVzc2FnZSB0aW1lIHN0YW1wXG4gICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy5tYXJrTGFzdE1lc3NhZ2UoY29ubmVjdGlvbik7XG5cbiAgICAgICAgICAgIGlmIChtaW5EYXRhKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHRyYW5zcG9ydExvZ2ljLm1heGltaXplUGVyc2lzdGVudFJlc3BvbnNlKG1pbkRhdGEpO1xuXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0TG9naWMudXBkYXRlR3JvdXBzKGNvbm5lY3Rpb24sIGRhdGEuR3JvdXBzVG9rZW4pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuTWVzc2FnZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubWVzc2FnZUlkID0gZGF0YS5NZXNzYWdlSWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuTWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGRhdGEuTWVzc2FnZXMsIGZ1bmN0aW9uIChpbmRleCwgbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0TG9naWMudHJpZ2dlclJlY2VpdmVkKGNvbm5lY3Rpb24sIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy50cnlJbml0aWFsaXplKGRhdGEsIG9uSW5pdGlhbGl6ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtb25pdG9yS2VlcEFsaXZlOiBmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgdmFyIGtlZXBBbGl2ZURhdGEgPSBjb25uZWN0aW9uLl8ua2VlcEFsaXZlRGF0YTtcblxuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCBpbml0aWF0ZWQgdGhlIGtlZXAgYWxpdmUgdGltZW91dHMgdGhlbiB3ZSBuZWVkIHRvXG4gICAgICAgICAgICBpZiAoIWtlZXBBbGl2ZURhdGEubW9uaXRvcmluZykge1xuICAgICAgICAgICAgICAgIGtlZXBBbGl2ZURhdGEubW9uaXRvcmluZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy5tYXJrTGFzdE1lc3NhZ2UoY29ubmVjdGlvbik7XG5cbiAgICAgICAgICAgICAgICAvLyBTYXZlIHRoZSBmdW5jdGlvbiBzbyB3ZSBjYW4gdW5iaW5kIGl0IG9uIHN0b3BcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLl8ua2VlcEFsaXZlRGF0YS5yZWNvbm5lY3RLZWVwQWxpdmVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgYSBuZXcgbWVzc2FnZSBzbyB0aGF0IGtlZXAgYWxpdmUgZG9lc24ndCB0aW1lIG91dCBjb25uZWN0aW9uc1xuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy5tYXJrTGFzdE1lc3NhZ2UoY29ubmVjdGlvbik7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBLZWVwIGFsaXZlIG9uIHJlY29ubmVjdFxuICAgICAgICAgICAgICAgICQoY29ubmVjdGlvbikuYmluZChldmVudHMub25SZWNvbm5lY3QsIGNvbm5lY3Rpb24uXy5rZWVwQWxpdmVEYXRhLnJlY29ubmVjdEtlZXBBbGl2ZVVwZGF0ZSk7XG5cbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIk5vdyBtb25pdG9yaW5nIGtlZXAgYWxpdmUgd2l0aCBhIHdhcm5pbmcgdGltZW91dCBvZiBcIiArIGtlZXBBbGl2ZURhdGEudGltZW91dFdhcm5pbmcgKyBcIiwga2VlcCBhbGl2ZSB0aW1lb3V0IG9mIFwiICsga2VlcEFsaXZlRGF0YS50aW1lb3V0ICsgXCIgYW5kIGRpc2Nvbm5lY3RpbmcgdGltZW91dCBvZiBcIiArIGNvbm5lY3Rpb24uZGlzY29ubmVjdFRpbWVvdXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIlRyaWVkIHRvIG1vbml0b3Iga2VlcCBhbGl2ZSBidXQgaXQncyBhbHJlYWR5IGJlaW5nIG1vbml0b3JlZC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RvcE1vbml0b3JpbmdLZWVwQWxpdmU6IGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIga2VlcEFsaXZlRGF0YSA9IGNvbm5lY3Rpb24uXy5rZWVwQWxpdmVEYXRhO1xuXG4gICAgICAgICAgICAvLyBPbmx5IGF0dGVtcHQgdG8gc3RvcCB0aGUga2VlcCBhbGl2ZSBtb25pdG9yaW5nIGlmIGl0cyBiZWluZyBtb25pdG9yZWRcbiAgICAgICAgICAgIGlmIChrZWVwQWxpdmVEYXRhLm1vbml0b3JpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBTdG9wIG1vbml0b3JpbmdcbiAgICAgICAgICAgICAgICBrZWVwQWxpdmVEYXRhLm1vbml0b3JpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgdXBkYXRlS2VlcEFsaXZlIGZ1bmN0aW9uIGZyb20gdGhlIHJlY29ubmVjdCBldmVudFxuICAgICAgICAgICAgICAgICQoY29ubmVjdGlvbikudW5iaW5kKGV2ZW50cy5vblJlY29ubmVjdCwgY29ubmVjdGlvbi5fLmtlZXBBbGl2ZURhdGEucmVjb25uZWN0S2VlcEFsaXZlVXBkYXRlKTtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFyIGFsbCB0aGUga2VlcCBhbGl2ZSBkYXRhXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5fLmtlZXBBbGl2ZURhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIlN0b3BwaW5nIHRoZSBtb25pdG9yaW5nIG9mIHRoZSBrZWVwIGFsaXZlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzdGFydEhlYXJ0YmVhdDogZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uXy5sYXN0QWN0aXZlQXQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIGJlYXQoY29ubmVjdGlvbik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWFya0xhc3RNZXNzYWdlOiBmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5fLmxhc3RNZXNzYWdlQXQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBtYXJrQWN0aXZlOiBmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgaWYgKHRyYW5zcG9ydExvZ2ljLnZlcmlmeUxhc3RBY3RpdmUoY29ubmVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLl8ubGFzdEFjdGl2ZUF0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc0Nvbm5lY3RlZE9yUmVjb25uZWN0aW5nOiBmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb24uc3RhdGUgPT09IHNpZ25hbFIuY29ubmVjdGlvblN0YXRlLmNvbm5lY3RlZCB8fFxuICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc3RhdGUgPT09IHNpZ25hbFIuY29ubmVjdGlvblN0YXRlLnJlY29ubmVjdGluZztcbiAgICAgICAgfSxcblxuICAgICAgICBlbnN1cmVSZWNvbm5lY3RpbmdTdGF0ZTogZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VTdGF0ZShjb25uZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsUi5jb25uZWN0aW9uU3RhdGUuY29ubmVjdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsUi5jb25uZWN0aW9uU3RhdGUucmVjb25uZWN0aW5nKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICQoY29ubmVjdGlvbikudHJpZ2dlckhhbmRsZXIoZXZlbnRzLm9uUmVjb25uZWN0aW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uLnN0YXRlID09PSBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5yZWNvbm5lY3Rpbmc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xlYXJSZWNvbm5lY3RUaW1lb3V0OiBmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24gJiYgY29ubmVjdGlvbi5fLnJlY29ubmVjdFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGNvbm5lY3Rpb24uXy5yZWNvbm5lY3RUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICBkZWxldGUgY29ubmVjdGlvbi5fLnJlY29ubmVjdFRpbWVvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmVyaWZ5TGFzdEFjdGl2ZTogZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGNvbm5lY3Rpb24uXy5sYXN0QWN0aXZlQXQgPj0gY29ubmVjdGlvbi5yZWNvbm5lY3RXaW5kb3cpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHNpZ25hbFIuXy5mb3JtYXQoc2lnbmFsUi5yZXNvdXJjZXMucmVjb25uZWN0V2luZG93VGltZW91dCwgbmV3IERhdGUoY29ubmVjdGlvbi5fLmxhc3RBY3RpdmVBdCksIGNvbm5lY3Rpb24ucmVjb25uZWN0V2luZG93KTtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAkKGNvbm5lY3Rpb24pLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vbkVycm9yLCBbc2lnbmFsUi5fLmVycm9yKG1lc3NhZ2UsIC8qIHNvdXJjZSAqLyBcIlRpbWVvdXRFeGNlcHRpb25cIildKTtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnN0b3AoLyogYXN5bmMgKi8gZmFsc2UsIC8qIG5vdGlmeVNlcnZlciAqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWNvbm5lY3Q6IGZ1bmN0aW9uIChjb25uZWN0aW9uLCB0cmFuc3BvcnROYW1lKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNwb3J0ID0gc2lnbmFsUi50cmFuc3BvcnRzW3RyYW5zcG9ydE5hbWVdO1xuXG4gICAgICAgICAgICAvLyBXZSBzaG91bGQgb25seSBzZXQgYSByZWNvbm5lY3RUaW1lb3V0IGlmIHdlIGFyZSBjdXJyZW50bHkgY29ubmVjdGVkXG4gICAgICAgICAgICAvLyBhbmQgYSByZWNvbm5lY3RUaW1lb3V0IGlzbid0IGFscmVhZHkgc2V0LlxuICAgICAgICAgICAgaWYgKHRyYW5zcG9ydExvZ2ljLmlzQ29ubmVjdGVkT3JSZWNvbm5lY3RpbmcoY29ubmVjdGlvbikgJiYgIWNvbm5lY3Rpb24uXy5yZWNvbm5lY3RUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgLy8gTmVlZCB0byB2ZXJpZnkgYmVmb3JlIHRoZSBzZXRUaW1lb3V0IG9jY3VycyBiZWNhdXNlIGFuIGFwcGxpY2F0aW9uIHNsZWVwIGNvdWxkIG9jY3VyIGR1cmluZyB0aGUgc2V0VGltZW91dCBkdXJhdGlvbi5cbiAgICAgICAgICAgICAgICBpZiAoIXRyYW5zcG9ydExvZ2ljLnZlcmlmeUxhc3RBY3RpdmUoY29ubmVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uXy5yZWNvbm5lY3RUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRyYW5zcG9ydExvZ2ljLnZlcmlmeUxhc3RBY3RpdmUoY29ubmVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydC5zdG9wKGNvbm5lY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc3BvcnRMb2dpYy5lbnN1cmVSZWNvbm5lY3RpbmdTdGF0ZShjb25uZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2codHJhbnNwb3J0TmFtZSArIFwiIHJlY29ubmVjdGluZy5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQuc3RhcnQoY29ubmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBjb25uZWN0aW9uLnJlY29ubmVjdERlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBoYW5kbGVQYXJzZUZhaWx1cmU6IGZ1bmN0aW9uIChjb25uZWN0aW9uLCByZXN1bHQsIGVycm9yLCBvbkZhaWxlZCwgY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIHdyYXBwZWRFcnJvciA9IHNpZ25hbFIuXy50cmFuc3BvcnRFcnJvcihcbiAgICAgICAgICAgICAgICBzaWduYWxSLl8uZm9ybWF0KHNpZ25hbFIucmVzb3VyY2VzLnBhcnNlRmFpbGVkLCByZXN1bHQpLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24udHJhbnNwb3J0LFxuICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgIGNvbnRleHQpO1xuXG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSBpbiB0aGUgaW5pdGlhbGl6YXRpb24gcGhhc2UgdHJpZ2dlciBvbkZhaWxlZCwgb3RoZXJ3aXNlIHN0b3AgdGhlIGNvbm5lY3Rpb24uXG4gICAgICAgICAgICBpZiAob25GYWlsZWQgJiYgb25GYWlsZWQod3JhcHBlZEVycm9yKSkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiRmFpbGVkIHRvIHBhcnNlIHNlcnZlciByZXNwb25zZSB3aGlsZSBhdHRlbXB0aW5nIHRvIGNvbm5lY3QuXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKGNvbm5lY3Rpb24pLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vbkVycm9yLCBbd3JhcHBlZEVycm9yXSk7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdEhhbmRsZXI6IGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEluaXRIYW5kbGVyKGNvbm5lY3Rpb24pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvcmV2ZXJGcmFtZToge1xuICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICBjb25uZWN0aW9uczoge31cbiAgICAgICAgfVxuICAgIH07XG5cbn0od2luZG93LmpRdWVyeSwgd2luZG93KSk7XG4vKiBqcXVlcnkuc2lnbmFsUi50cmFuc3BvcnRzLndlYlNvY2tldHMuanMgKi9cbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IE9wZW4gVGVjaG5vbG9naWVzLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFNlZSBMaWNlbnNlLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbi8qZ2xvYmFsIHdpbmRvdzpmYWxzZSAqL1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImpxdWVyeS5zaWduYWxSLnRyYW5zcG9ydHMuY29tbW9uLmpzXCIgLz5cblxuKGZ1bmN0aW9uICgkLCB3aW5kb3csIHVuZGVmaW5lZCkge1xuXG4gICAgdmFyIHNpZ25hbFIgPSAkLnNpZ25hbFIsXG4gICAgICAgIGV2ZW50cyA9ICQuc2lnbmFsUi5ldmVudHMsXG4gICAgICAgIGNoYW5nZVN0YXRlID0gJC5zaWduYWxSLmNoYW5nZVN0YXRlLFxuICAgICAgICB0cmFuc3BvcnRMb2dpYyA9IHNpZ25hbFIudHJhbnNwb3J0cy5fbG9naWM7XG5cbiAgICBzaWduYWxSLnRyYW5zcG9ydHMud2ViU29ja2V0cyA9IHtcbiAgICAgICAgbmFtZTogXCJ3ZWJTb2NrZXRzXCIsXG5cbiAgICAgICAgc3VwcG9ydHNLZWVwQWxpdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbmQ6IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBkYXRhKSB7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IHRyYW5zcG9ydExvZ2ljLnN0cmluZ2lmeVNlbmQoY29ubmVjdGlvbiwgZGF0YSk7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zb2NrZXQuc2VuZChwYXlsb2FkKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgJChjb25uZWN0aW9uKS50cmlnZ2VySGFuZGxlcihldmVudHMub25FcnJvcixcbiAgICAgICAgICAgICAgICAgICAgW3NpZ25hbFIuXy50cmFuc3BvcnRFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbFIucmVzb3VyY2VzLndlYlNvY2tldHNJbnZhbGlkU3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnRyYW5zcG9ydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zb2NrZXRcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiAoY29ubmVjdGlvbiwgb25TdWNjZXNzLCBvbkZhaWxlZCkge1xuICAgICAgICAgICAgdmFyIHVybCxcbiAgICAgICAgICAgICAgICBvcGVuZWQgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICByZWNvbm5lY3RpbmcgPSAhb25TdWNjZXNzLFxuICAgICAgICAgICAgICAgICRjb25uZWN0aW9uID0gJChjb25uZWN0aW9uKTtcblxuICAgICAgICAgICAgaWYgKCF3aW5kb3cuV2ViU29ja2V0KSB7XG4gICAgICAgICAgICAgICAgb25GYWlsZWQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghY29ubmVjdGlvbi5zb2NrZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbi53ZWJTb2NrZXRTZXJ2ZXJVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gY29ubmVjdGlvbi53ZWJTb2NrZXRTZXJ2ZXJVcmw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gY29ubmVjdGlvbi53c1Byb3RvY29sICsgY29ubmVjdGlvbi5ob3N0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHVybCArPSB0cmFuc3BvcnRMb2dpYy5nZXRVcmwoY29ubmVjdGlvbiwgdGhpcy5uYW1lLCByZWNvbm5lY3RpbmcpO1xuXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJDb25uZWN0aW5nIHRvIHdlYnNvY2tldCBlbmRwb2ludCAnXCIgKyB1cmwgKyBcIicuXCIpO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc29ja2V0ID0gbmV3IHdpbmRvdy5XZWJTb2NrZXQodXJsKTtcblxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc29ja2V0Lm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJXZWJzb2NrZXQgb3BlbmVkLlwiKTtcblxuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy5jbGVhclJlY29ubmVjdFRpbWVvdXQoY29ubmVjdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZVN0YXRlKGNvbm5lY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5yZWNvbm5lY3RpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5jb25uZWN0ZWQpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkY29ubmVjdGlvbi50cmlnZ2VySGFuZGxlcihldmVudHMub25SZWNvbm5lY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgaGFuZGxlIGEgc29ja2V0IGNsb3NlIGlmIHRoZSBjbG9zZSBpcyBmcm9tIHRoZSBjdXJyZW50IHNvY2tldC5cbiAgICAgICAgICAgICAgICAgICAgLy8gU29tZXRpbWVzIG9uIGRpc2Nvbm5lY3QgdGhlIHNlcnZlciB3aWxsIHB1c2ggZG93biBhbiBvbmNsb3NlIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIGFuIGV4cGlyZWQgc29ja2V0LlxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzID09PSBjb25uZWN0aW9uLnNvY2tldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5lZCAmJiB0eXBlb2YgZXZlbnQud2FzQ2xlYW4gIT09IFwidW5kZWZpbmVkXCIgJiYgZXZlbnQud2FzQ2xlYW4gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWRlYWxseSB0aGlzIHdvdWxkIHVzZSB0aGUgd2Vic29ja2V0Lm9uZXJyb3IgaGFuZGxlciAocmF0aGVyIHRoYW4gY2hlY2tpbmcgd2FzQ2xlYW4gaW4gb25jbG9zZSkgYnV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSSBmb3VuZCBpbiBzb21lIGNpcmN1bXN0YW5jZXMgQ2hyb21lIHdvbid0IGNhbGwgb25lcnJvci4gVGhpcyBpbXBsZW1lbnRhdGlvbiBzZWVtcyB0byB3b3JrIG9uIGFsbCBicm93c2Vycy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHNpZ25hbFIuXy50cmFuc3BvcnRFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsUi5yZXNvdXJjZXMud2ViU29ja2V0Q2xvc2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnRyYW5zcG9ydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJVbmNsZWFuIGRpc2Nvbm5lY3QgZnJvbSB3ZWJzb2NrZXQ6IFwiICsgKGV2ZW50LnJlYXNvbiB8fCBcIltubyByZWFzb24gZ2l2ZW5dLlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiV2Vic29ja2V0IGNsb3NlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb25GYWlsZWQgfHwgIW9uRmFpbGVkKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGNvbm5lY3Rpb24pLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vbkVycm9yLCBbZXJyb3JdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnJlY29ubmVjdChjb25uZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGE7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBjb25uZWN0aW9uLl9wYXJzZVJlc3BvbnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0TG9naWMuaGFuZGxlUGFyc2VGYWlsdXJlKGNvbm5lY3Rpb24sIGV2ZW50LmRhdGEsIGVycm9yLCBvbkZhaWxlZCwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRhdGEuTSBpcyBQZXJzaXN0ZW50UmVzcG9uc2UuTWVzc2FnZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLmlzRW1wdHlPYmplY3QoZGF0YSkgfHwgZGF0YS5NKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0TG9naWMucHJvY2Vzc01lc3NhZ2VzKGNvbm5lY3Rpb24sIGRhdGEsIG9uU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciB3ZWJzb2NrZXRzIHdlIG5lZWQgdG8gdHJpZ2dlciBvblJlY2VpdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGNhbGxiYWNrcyB0byBvdXRnb2luZyBodWIgY2FsbHMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0TG9naWMudHJpZ2dlclJlY2VpdmVkKGNvbm5lY3Rpb24sIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICByZWNvbm5lY3Q6IGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy5yZWNvbm5lY3QoY29ubmVjdGlvbiwgdGhpcy5uYW1lKTtcbiAgICAgICAgfSxcblxuICAgICAgICBsb3N0Q29ubmVjdGlvbjogZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KGNvbm5lY3Rpb24pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAvLyBEb24ndCB0cmlnZ2VyIGEgcmVjb25uZWN0IGFmdGVyIHN0b3BwaW5nXG4gICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy5jbGVhclJlY29ubmVjdFRpbWVvdXQoY29ubmVjdGlvbik7XG5cbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLnNvY2tldCkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiQ2xvc2luZyB0aGUgV2Vic29ja2V0LlwiKTtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNvY2tldC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc29ja2V0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhYm9ydDogZnVuY3Rpb24gKGNvbm5lY3Rpb24sIGFzeW5jKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy5hamF4QWJvcnQoY29ubmVjdGlvbiwgYXN5bmMpO1xuICAgICAgICB9XG4gICAgfTtcblxufSh3aW5kb3cualF1ZXJ5LCB3aW5kb3cpKTtcbi8qIGpxdWVyeS5zaWduYWxSLnRyYW5zcG9ydHMuc2VydmVyU2VudEV2ZW50cy5qcyAqL1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgT3BlbiBUZWNobm9sb2dpZXMsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gU2VlIExpY2Vuc2UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuLypnbG9iYWwgd2luZG93OmZhbHNlICovXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwianF1ZXJ5LnNpZ25hbFIudHJhbnNwb3J0cy5jb21tb24uanNcIiAvPlxuXG4oZnVuY3Rpb24gKCQsIHdpbmRvdywgdW5kZWZpbmVkKSB7XG5cbiAgICB2YXIgc2lnbmFsUiA9ICQuc2lnbmFsUixcbiAgICAgICAgZXZlbnRzID0gJC5zaWduYWxSLmV2ZW50cyxcbiAgICAgICAgY2hhbmdlU3RhdGUgPSAkLnNpZ25hbFIuY2hhbmdlU3RhdGUsXG4gICAgICAgIHRyYW5zcG9ydExvZ2ljID0gc2lnbmFsUi50cmFuc3BvcnRzLl9sb2dpYyxcbiAgICAgICAgY2xlYXJSZWNvbm5lY3RBdHRlbXB0VGltZW91dCA9IGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGNvbm5lY3Rpb24uXy5yZWNvbm5lY3RBdHRlbXB0VGltZW91dEhhbmRsZSk7XG4gICAgICAgICAgICBkZWxldGUgY29ubmVjdGlvbi5fLnJlY29ubmVjdEF0dGVtcHRUaW1lb3V0SGFuZGxlO1xuICAgICAgICB9O1xuXG4gICAgc2lnbmFsUi50cmFuc3BvcnRzLnNlcnZlclNlbnRFdmVudHMgPSB7XG4gICAgICAgIG5hbWU6IFwic2VydmVyU2VudEV2ZW50c1wiLFxuXG4gICAgICAgIHN1cHBvcnRzS2VlcEFsaXZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICB0aW1lT3V0OiAzMDAwLFxuXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiAoY29ubmVjdGlvbiwgb25TdWNjZXNzLCBvbkZhaWxlZCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIG9wZW5lZCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICRjb25uZWN0aW9uID0gJChjb25uZWN0aW9uKSxcbiAgICAgICAgICAgICAgICByZWNvbm5lY3RpbmcgPSAhb25TdWNjZXNzLFxuICAgICAgICAgICAgICAgIHVybDtcblxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uZXZlbnRTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIlRoZSBjb25uZWN0aW9uIGFscmVhZHkgaGFzIGFuIGV2ZW50IHNvdXJjZS4gU3RvcHBpbmcgaXQuXCIpO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uc3RvcCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5FdmVudFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGlmIChvbkZhaWxlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgU1NFLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgb25GYWlsZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1cmwgPSB0cmFuc3BvcnRMb2dpYy5nZXRVcmwoY29ubmVjdGlvbiwgdGhpcy5uYW1lLCByZWNvbm5lY3RpbmcpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiQXR0ZW1wdGluZyB0byBjb25uZWN0IHRvIFNTRSBlbmRwb2ludCAnXCIgKyB1cmwgKyBcIicuXCIpO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uZXZlbnRTb3VyY2UgPSBuZXcgd2luZG93LkV2ZW50U291cmNlKHVybCwgeyB3aXRoQ3JlZGVudGlhbHM6IGNvbm5lY3Rpb24ud2l0aENyZWRlbnRpYWxzIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIkV2ZW50U291cmNlIGZhaWxlZCB0cnlpbmcgdG8gY29ubmVjdCB3aXRoIGVycm9yIFwiICsgZS5NZXNzYWdlICsgXCIuXCIpO1xuICAgICAgICAgICAgICAgIGlmIChvbkZhaWxlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgY29ubmVjdGlvbiBmYWlsZWQsIGNhbGwgdGhlIGZhaWxlZCBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICBvbkZhaWxlZCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRjb25uZWN0aW9uLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vbkVycm9yLCBbc2lnbmFsUi5fLnRyYW5zcG9ydEVycm9yKHNpZ25hbFIucmVzb3VyY2VzLmV2ZW50U291cmNlRmFpbGVkVG9Db25uZWN0LCBjb25uZWN0aW9uLnRyYW5zcG9ydCwgZSldKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2Ugd2VyZSByZWNvbm5lY3RpbmcsIHJhdGhlciB0aGFuIGRvaW5nIGluaXRpYWwgY29ubmVjdCwgdGhlbiB0cnkgcmVjb25uZWN0IGFnYWluXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnJlY29ubmVjdChjb25uZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLl8ucmVjb25uZWN0QXR0ZW1wdFRpbWVvdXRIYW5kbGUgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcGVuZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSByZWNvbm5lY3RpbmcgYW5kIHRoZSBldmVudCBzb3VyY2UgaXMgYXR0ZW1wdGluZyB0byBjb25uZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3Qga2VlcCByZXRyeWluZy4gVGhpcyBjYXVzZXMgZHVwbGljYXRlIGNvbm5lY3Rpb25zIHRvIHNwYXduLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uZXZlbnRTb3VyY2UucmVhZHlTdGF0ZSAhPT0gd2luZG93LkV2ZW50U291cmNlLk9QRU4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSB3ZXJlIHJlY29ubmVjdGluZywgcmF0aGVyIHRoYW4gZG9pbmcgaW5pdGlhbCBjb25uZWN0LCB0aGVuIHRyeSByZWNvbm5lY3QgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnJlY29ubmVjdChjb25uZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGhhdC50aW1lT3V0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29ubmVjdGlvbi5ldmVudFNvdXJjZS5hZGRFdmVudExpc3RlbmVyKFwib3BlblwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiRXZlbnRTb3VyY2UgY29ubmVjdGVkLlwiKTtcblxuICAgICAgICAgICAgICAgIGNsZWFyUmVjb25uZWN0QXR0ZW1wdFRpbWVvdXQoY29ubmVjdGlvbik7XG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0TG9naWMuY2xlYXJSZWNvbm5lY3RUaW1lb3V0KGNvbm5lY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wZW5lZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbmVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlU3RhdGUoY29ubmVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsUi5jb25uZWN0aW9uU3RhdGUucmVjb25uZWN0aW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5jb25uZWN0ZWQpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkY29ubmVjdGlvbi50cmlnZ2VySGFuZGxlcihldmVudHMub25SZWNvbm5lY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgICAgICBjb25uZWN0aW9uLmV2ZW50U291cmNlLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcztcblxuICAgICAgICAgICAgICAgIC8vIHByb2Nlc3MgbWVzc2FnZXNcbiAgICAgICAgICAgICAgICBpZiAoZS5kYXRhID09PSBcImluaXRpYWxpemVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IGNvbm5lY3Rpb24uX3BhcnNlUmVzcG9uc2UoZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydExvZ2ljLmhhbmRsZVBhcnNlRmFpbHVyZShjb25uZWN0aW9uLCBlLmRhdGEsIGVycm9yLCBvbkZhaWxlZCwgZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy5wcm9jZXNzTWVzc2FnZXMoY29ubmVjdGlvbiwgcmVzLCBvblN1Y2Nlc3MpO1xuICAgICAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgICAgICBjb25uZWN0aW9uLmV2ZW50U291cmNlLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHNpZ25hbFIuXy50cmFuc3BvcnRFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsUi5yZXNvdXJjZXMuZXZlbnRTb3VyY2VFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi50cmFuc3BvcnQsXG4gICAgICAgICAgICAgICAgICAgIGUpO1xuXG4gICAgICAgICAgICAgICAgLy8gT25seSBoYW5kbGUgYW4gZXJyb3IgaWYgdGhlIGVycm9yIGlzIGZyb20gdGhlIGN1cnJlbnQgRXZlbnQgU291cmNlLlxuICAgICAgICAgICAgICAgIC8vIFNvbWV0aW1lcyBvbiBkaXNjb25uZWN0IHRoZSBzZXJ2ZXIgd2lsbCBwdXNoIGRvd24gYW4gZXJyb3IgZXZlbnRcbiAgICAgICAgICAgICAgICAvLyB0byBhbiBleHBpcmVkIEV2ZW50IFNvdXJjZS5cbiAgICAgICAgICAgICAgICBpZiAodGhpcyAhPT0gY29ubmVjdGlvbi5ldmVudFNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9uRmFpbGVkICYmIG9uRmFpbGVkKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJFdmVudFNvdXJjZSByZWFkeVN0YXRlOiBcIiArIGNvbm5lY3Rpb24uZXZlbnRTb3VyY2UucmVhZHlTdGF0ZSArIFwiLlwiKTtcblxuICAgICAgICAgICAgICAgIGlmIChlLmV2ZW50UGhhc2UgPT09IHdpbmRvdy5FdmVudFNvdXJjZS5DTE9TRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgdXNlIHRoZSBFdmVudFNvdXJjZSdzIG5hdGl2ZSByZWNvbm5lY3QgZnVuY3Rpb24gYXMgaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9lc24ndCBhbGxvdyB1cyB0byBjaGFuZ2UgdGhlIFVSTCB3aGVuIHJlY29ubmVjdGluZy4gV2UgbmVlZFxuICAgICAgICAgICAgICAgICAgICAvLyB0byBjaGFuZ2UgdGhlIFVSTCB0byBub3QgaW5jbHVkZSB0aGUgL2Nvbm5lY3Qgc3VmZml4LCBhbmQgcGFzc1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbGFzdCBtZXNzYWdlIGlkIHdlIHJlY2VpdmVkLlxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIkV2ZW50U291cmNlIHJlY29ubmVjdGluZyBkdWUgdG8gdGhlIHNlcnZlciBjb25uZWN0aW9uIGVuZGluZy5cIik7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQucmVjb25uZWN0KGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbm5lY3Rpb24gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJFdmVudFNvdXJjZSBlcnJvci5cIik7XG4gICAgICAgICAgICAgICAgICAgICRjb25uZWN0aW9uLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vbkVycm9yLCBbZXJyb3JdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVjb25uZWN0OiBmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgdHJhbnNwb3J0TG9naWMucmVjb25uZWN0KGNvbm5lY3Rpb24sIHRoaXMubmFtZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbG9zdENvbm5lY3Rpb246IGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdChjb25uZWN0aW9uKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZW5kOiBmdW5jdGlvbiAoY29ubmVjdGlvbiwgZGF0YSkge1xuICAgICAgICAgICAgdHJhbnNwb3J0TG9naWMuYWpheFNlbmQoY29ubmVjdGlvbiwgZGF0YSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RvcDogZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIERvbid0IHRyaWdnZXIgYSByZWNvbm5lY3QgYWZ0ZXIgc3RvcHBpbmdcbiAgICAgICAgICAgIGNsZWFyUmVjb25uZWN0QXR0ZW1wdFRpbWVvdXQoY29ubmVjdGlvbik7XG4gICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy5jbGVhclJlY29ubmVjdFRpbWVvdXQoY29ubmVjdGlvbik7XG5cbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uICYmIGNvbm5lY3Rpb24uZXZlbnRTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIkV2ZW50U291cmNlIGNhbGxpbmcgY2xvc2UoKS5cIik7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5ldmVudFNvdXJjZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uZXZlbnRTb3VyY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25uZWN0aW9uLmV2ZW50U291cmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGFib3J0OiBmdW5jdGlvbiAoY29ubmVjdGlvbiwgYXN5bmMpIHtcbiAgICAgICAgICAgIHRyYW5zcG9ydExvZ2ljLmFqYXhBYm9ydChjb25uZWN0aW9uLCBhc3luYyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG59KHdpbmRvdy5qUXVlcnksIHdpbmRvdykpO1xuLyoganF1ZXJ5LnNpZ25hbFIudHJhbnNwb3J0cy5mb3JldmVyRnJhbWUuanMgKi9cbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IE9wZW4gVGVjaG5vbG9naWVzLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFNlZSBMaWNlbnNlLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbi8qZ2xvYmFsIHdpbmRvdzpmYWxzZSAqL1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImpxdWVyeS5zaWduYWxSLnRyYW5zcG9ydHMuY29tbW9uLmpzXCIgLz5cblxuKGZ1bmN0aW9uICgkLCB3aW5kb3csIHVuZGVmaW5lZCkge1xuXG4gICAgdmFyIHNpZ25hbFIgPSAkLnNpZ25hbFIsXG4gICAgICAgIGV2ZW50cyA9ICQuc2lnbmFsUi5ldmVudHMsXG4gICAgICAgIGNoYW5nZVN0YXRlID0gJC5zaWduYWxSLmNoYW5nZVN0YXRlLFxuICAgICAgICB0cmFuc3BvcnRMb2dpYyA9IHNpZ25hbFIudHJhbnNwb3J0cy5fbG9naWMsXG4gICAgICAgIGNyZWF0ZUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGZyYW1lID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gICAgICAgICAgICBmcmFtZS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcInBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDowO2hlaWdodDowO3Zpc2liaWxpdHk6aGlkZGVuO1wiKTtcbiAgICAgICAgICAgIHJldHVybiBmcmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gVXNlZCB0byBwcmV2ZW50IGluZmluaXRlIGxvYWRpbmcgaWNvbiBzcGlucyBpbiBvbGRlciB2ZXJzaW9ucyBvZiBpZVxuICAgICAgICAvLyBXZSBidWlsZCB0aGlzIG9iamVjdCBpbnNpZGUgYSBjbG9zdXJlIHNvIHdlIGRvbid0IHBvbGx1dGUgdGhlIHJlc3Qgb2YgICBcbiAgICAgICAgLy8gdGhlIGZvcmV2ZXJGcmFtZSB0cmFuc3BvcnQgd2l0aCB1bm5lY2Vzc2FyeSBmdW5jdGlvbnMvdXRpbGl0aWVzLlxuICAgICAgICBsb2FkUHJldmVudGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBsb2FkaW5nRml4SW50ZXJ2YWxJZCA9IG51bGwsXG4gICAgICAgICAgICAgICAgbG9hZGluZ0ZpeEludGVydmFsID0gMTAwMCxcbiAgICAgICAgICAgICAgICBhdHRhY2hlZFRvID0gMDtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwcmV2ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgYWRkaXRpb25hbCBpZnJhbWUgcmVtb3ZhbCBwcm9jZWR1cmVzIGZyb20gbmV3ZXIgYnJvd3NlcnNcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNpZ25hbFIuXy5pZVZlcnNpb24gPD0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugb25seSBldmVyIHdhbnQgdG8gc2V0IHRoZSBpbnRlcnZhbCBvbmUgdGltZSwgc28gb24gdGhlIGZpcnN0IGF0dGFjaGVkVG9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRhY2hlZFRvID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGFuZCBkZXN0cm95IGlmcmFtZSBldmVyeSAzIHNlY29uZHMgdG8gcHJldmVudCBsb2FkaW5nIGljb24sIHN1cGVyIGhhY2t5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGluZ0ZpeEludGVydmFsSWQgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcEZyYW1lID0gY3JlYXRlRnJhbWUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZW1wRnJhbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0ZW1wRnJhbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBGcmFtZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgbG9hZGluZ0ZpeEludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNoZWRUbysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSBjbGVhciB0aGUgaW50ZXJ2YWwgaWYgdGhlcmUncyBvbmx5IG9uZSBtb3JlIG9iamVjdCB0aGF0IHRoZSBsb2FkUHJldmVudGVyIGlzIGF0dGFjaGVkVG9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dGFjaGVkVG8gPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKGxvYWRpbmdGaXhJbnRlcnZhbElkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRhY2hlZFRvID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNoZWRUby0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkoKTtcblxuICAgIHNpZ25hbFIudHJhbnNwb3J0cy5mb3JldmVyRnJhbWUgPSB7XG4gICAgICAgIG5hbWU6IFwiZm9yZXZlckZyYW1lXCIsXG5cbiAgICAgICAgc3VwcG9ydHNLZWVwQWxpdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEFkZGVkIGFzIGEgdmFsdWUgaGVyZSBzbyB3ZSBjYW4gY3JlYXRlIHRlc3RzIHRvIHZlcmlmeSBmdW5jdGlvbmFsaXR5XG4gICAgICAgIGlmcmFtZUNsZWFyVGhyZXNob2xkOiA1MCxcblxuICAgICAgICBzdGFydDogZnVuY3Rpb24gKGNvbm5lY3Rpb24sIG9uU3VjY2Vzcywgb25GYWlsZWQpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBmcmFtZUlkID0gKHRyYW5zcG9ydExvZ2ljLmZvcmV2ZXJGcmFtZS5jb3VudCArPSAxKSxcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgZnJhbWUgPSBjcmVhdGVGcmFtZSgpLFxuICAgICAgICAgICAgICAgIGZyYW1lTG9hZEhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiRm9yZXZlciBmcmFtZSBpZnJhbWUgZmluaXNoZWQgbG9hZGluZyBhbmQgaXMgbm8gbG9uZ2VyIHJlY2VpdmluZyBtZXNzYWdlcy5cIik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb25GYWlsZWQgfHwgIW9uRmFpbGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQucmVjb25uZWN0KGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHdpbmRvdy5FdmVudFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBicm93c2VyIHN1cHBvcnRzIFNTRSwgZG9uJ3QgdXNlIEZvcmV2ZXIgRnJhbWVcbiAgICAgICAgICAgICAgICBpZiAob25GYWlsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJGb3JldmVyIEZyYW1lIGlzIG5vdCBzdXBwb3J0ZWQgYnkgU2lnbmFsUiBvbiBicm93c2VycyB3aXRoIFNTRSBzdXBwb3J0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgb25GYWlsZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmcmFtZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNpZ25hbHItY29ubmVjdGlvbi1pZFwiLCBjb25uZWN0aW9uLmlkKTtcblxuICAgICAgICAgICAgLy8gU3RhcnQgcHJldmVudGluZyBsb2FkaW5nIGljb25cbiAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBvbmx5IHBlcmZvcm0gd29yayBpZiB0aGUgbG9hZFByZXZlbnRlciBpcyBub3QgYXR0YWNoZWQgdG8gYW5vdGhlciBjb25uZWN0aW9uLlxuICAgICAgICAgICAgbG9hZFByZXZlbnRlci5wcmV2ZW50KCk7XG5cbiAgICAgICAgICAgIC8vIEJ1aWxkIHRoZSB1cmxcbiAgICAgICAgICAgIHVybCA9IHRyYW5zcG9ydExvZ2ljLmdldFVybChjb25uZWN0aW9uLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgdXJsICs9IFwiJmZyYW1lSWQ9XCIgKyBmcmFtZUlkO1xuXG4gICAgICAgICAgICAvLyBhZGQgZnJhbWUgdG8gdGhlIGRvY3VtZW50IHByaW9yIHRvIHNldHRpbmcgVVJMIHRvIGF2b2lkIGNhY2hpbmcgaXNzdWVzLlxuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChmcmFtZSk7XG5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiQmluZGluZyB0byBpZnJhbWUncyBsb2FkIGV2ZW50LlwiKTtcblxuICAgICAgICAgICAgaWYgKGZyYW1lLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBmcmFtZS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmcmFtZUxvYWRIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZyYW1lLmF0dGFjaEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZnJhbWUuYXR0YWNoRXZlbnQoXCJvbmxvYWRcIiwgZnJhbWVMb2FkSGFuZGxlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZyYW1lLnNyYyA9IHVybDtcbiAgICAgICAgICAgIHRyYW5zcG9ydExvZ2ljLmZvcmV2ZXJGcmFtZS5jb25uZWN0aW9uc1tmcmFtZUlkXSA9IGNvbm5lY3Rpb247XG5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24uZnJhbWUgPSBmcmFtZTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uZnJhbWVJZCA9IGZyYW1lSWQ7XG5cbiAgICAgICAgICAgIGlmIChvblN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLm9uU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJJZnJhbWUgdHJhbnNwb3J0IHN0YXJ0ZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlY29ubmVjdDogZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgLy8gTmVlZCB0byB2ZXJpZnkgY29ubmVjdGlvbiBzdGF0ZSBhbmQgdmVyaWZ5IGJlZm9yZSB0aGUgc2V0VGltZW91dCBvY2N1cnMgYmVjYXVzZSBhbiBhcHBsaWNhdGlvbiBzbGVlcCBjb3VsZCBvY2N1ciBkdXJpbmcgdGhlIHNldFRpbWVvdXQgZHVyYXRpb24uXG4gICAgICAgICAgICBpZiAodHJhbnNwb3J0TG9naWMuaXNDb25uZWN0ZWRPclJlY29ubmVjdGluZyhjb25uZWN0aW9uKSAmJiB0cmFuc3BvcnRMb2dpYy52ZXJpZnlMYXN0QWN0aXZlKGNvbm5lY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZnkgdGhhdCB3ZSdyZSBvayB0byByZWNvbm5lY3QuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJhbnNwb3J0TG9naWMudmVyaWZ5TGFzdEFjdGl2ZShjb25uZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uZnJhbWUgJiYgdHJhbnNwb3J0TG9naWMuZW5zdXJlUmVjb25uZWN0aW5nU3RhdGUoY29ubmVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZSA9IGNvbm5lY3Rpb24uZnJhbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjID0gdHJhbnNwb3J0TG9naWMuZ2V0VXJsKGNvbm5lY3Rpb24sIHRoYXQubmFtZSwgdHJ1ZSkgKyBcIiZmcmFtZUlkPVwiICsgY29ubmVjdGlvbi5mcmFtZUlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJVcGRhdGluZyBpZnJhbWUgc3JjIHRvICdcIiArIHNyYyArIFwiJy5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZS5zcmMgPSBzcmM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBjb25uZWN0aW9uLnJlY29ubmVjdERlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBsb3N0Q29ubmVjdGlvbjogZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KGNvbm5lY3Rpb24pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbmQ6IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBkYXRhKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy5hamF4U2VuZChjb25uZWN0aW9uLCBkYXRhKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWNlaXZlOiBmdW5jdGlvbiAoY29ubmVjdGlvbiwgZGF0YSkge1xuICAgICAgICAgICAgdmFyIGN3LFxuICAgICAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U7XG5cbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLmpzb24gIT09IGNvbm5lY3Rpb24uX29yaWdpbmFsSnNvbikge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYSBjdXN0b20gSlNPTiBwYXJzZXIgY29uZmlndXJlZCB0aGVuIHNlcmlhbGl6ZSB0aGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgLy8gdXNpbmcgdGhlIG9yaWdpbmFsIChicm93c2VyKSBKU09OIHBhcnNlciBhbmQgdGhlbiBkZXNlcmlhbGl6ZSBpdCB1c2luZ1xuICAgICAgICAgICAgICAgIC8vIHRoZSBjdXN0b20gcGFyc2VyIChjb25uZWN0aW9uLl9wYXJzZVJlc3BvbnNlIGRvZXMgdGhhdCkuIFRoaXMgaXMgc28gd2VcbiAgICAgICAgICAgICAgICAvLyBjYW4gZWFzaWx5IHNlbmQgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciBhcyBcInJhd1wiIEpTT04gYnV0IHN0aWxsIFxuICAgICAgICAgICAgICAgIC8vIHN1cHBvcnQgY3VzdG9tIEpTT04gZGVzZXJpYWxpemF0aW9uIGluIHRoZSBicm93c2VyLlxuICAgICAgICAgICAgICAgIGRhdGEgPSBjb25uZWN0aW9uLl9vcmlnaW5hbEpzb24uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXNwb25zZSA9IGNvbm5lY3Rpb24uX3BhcnNlUmVzcG9uc2UoZGF0YSk7XG5cbiAgICAgICAgICAgIHRyYW5zcG9ydExvZ2ljLnByb2Nlc3NNZXNzYWdlcyhjb25uZWN0aW9uLCByZXNwb25zZSwgY29ubmVjdGlvbi5vblN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAvLyBQcm90ZWN0IGFnYWluc3QgY29ubmVjdGlvbiBzdG9wcGluZyBmcm9tIGEgY2FsbGJhY2sgdHJpZ2dlciB3aXRoaW4gdGhlIHByb2Nlc3NNZXNzYWdlcyBhYm92ZS5cbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLnN0YXRlID09PSAkLnNpZ25hbFIuY29ubmVjdGlvblN0YXRlLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIC8vIERlbGV0ZSB0aGUgc2NyaXB0ICYgZGl2IGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5mcmFtZU1lc3NhZ2VDb3VudCA9IChjb25uZWN0aW9uLmZyYW1lTWVzc2FnZUNvdW50IHx8IDApICsgMTtcbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbi5mcmFtZU1lc3NhZ2VDb3VudCA+IHNpZ25hbFIudHJhbnNwb3J0cy5mb3JldmVyRnJhbWUuaWZyYW1lQ2xlYXJUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5mcmFtZU1lc3NhZ2VDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGN3ID0gY29ubmVjdGlvbi5mcmFtZS5jb250ZW50V2luZG93IHx8IGNvbm5lY3Rpb24uZnJhbWUuY29udGVudERvY3VtZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3cgJiYgY3cuZG9jdW1lbnQgJiYgY3cuZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IGN3LmRvY3VtZW50LmJvZHk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgdGhlIGNoaWxkIGVsZW1lbnRzIGZyb20gdGhlIGlmcmFtZSdzIGJvZHkgdG8gY29uc2VydmVyIG1lbW9yeVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJvZHkuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQoYm9keS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzdG9wOiBmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgdmFyIGN3ID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gU3RvcCBhdHRlbXB0aW5nIHRvIHByZXZlbnQgbG9hZGluZyBpY29uXG4gICAgICAgICAgICBsb2FkUHJldmVudGVyLmNhbmNlbCgpO1xuXG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbi5mcmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLmZyYW1lLnN0b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5mcmFtZS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN3ID0gY29ubmVjdGlvbi5mcmFtZS5jb250ZW50V2luZG93IHx8IGNvbm5lY3Rpb24uZnJhbWUuY29udGVudERvY3VtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN3LmRvY3VtZW50ICYmIGN3LmRvY3VtZW50LmV4ZWNDb21tYW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3cuZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJTdG9wXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIkVycm9yIG9jY3VyZWQgd2hlbiBzdG9wcGluZyBmb3JldmVyRnJhbWUgdHJhbnNwb3J0LiBNZXNzYWdlID0gXCIgKyBlLm1lc3NhZ2UgKyBcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgdGhlIGlmcmFtZSBpcyB3aGVyZSB3ZSBsZWZ0IGl0XG4gICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uZnJhbWUucGFyZW50Tm9kZSA9PT0gd2luZG93LmRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29ubmVjdGlvbi5mcmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRyYW5zcG9ydExvZ2ljLmZvcmV2ZXJGcmFtZS5jb25uZWN0aW9uc1tjb25uZWN0aW9uLmZyYW1lSWRdO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uZnJhbWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uZnJhbWVJZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3Rpb24uZnJhbWU7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3Rpb24uZnJhbWVJZDtcbiAgICAgICAgICAgICAgICBkZWxldGUgY29ubmVjdGlvbi5vblN1Y2Nlc3M7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3Rpb24uZnJhbWVNZXNzYWdlQ291bnQ7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJTdG9wcGluZyBmb3JldmVyIGZyYW1lLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhYm9ydDogZnVuY3Rpb24gKGNvbm5lY3Rpb24sIGFzeW5jKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy5hamF4QWJvcnQoY29ubmVjdGlvbiwgYXN5bmMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldENvbm5lY3Rpb246IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zcG9ydExvZ2ljLmZvcmV2ZXJGcmFtZS5jb25uZWN0aW9uc1tpZF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RhcnRlZDogZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VTdGF0ZShjb25uZWN0aW9uLFxuICAgICAgICAgICAgICAgIHNpZ25hbFIuY29ubmVjdGlvblN0YXRlLnJlY29ubmVjdGluZyxcbiAgICAgICAgICAgICAgICBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5jb25uZWN0ZWQpID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICAkKGNvbm5lY3Rpb24pLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vblJlY29ubmVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG59KHdpbmRvdy5qUXVlcnksIHdpbmRvdykpO1xuLyoganF1ZXJ5LnNpZ25hbFIudHJhbnNwb3J0cy5sb25nUG9sbGluZy5qcyAqL1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgT3BlbiBUZWNobm9sb2dpZXMsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gU2VlIExpY2Vuc2UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuLypnbG9iYWwgd2luZG93OmZhbHNlICovXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwianF1ZXJ5LnNpZ25hbFIudHJhbnNwb3J0cy5jb21tb24uanNcIiAvPlxuXG4oZnVuY3Rpb24gKCQsIHdpbmRvdywgdW5kZWZpbmVkKSB7XG5cbiAgICB2YXIgc2lnbmFsUiA9ICQuc2lnbmFsUixcbiAgICAgICAgZXZlbnRzID0gJC5zaWduYWxSLmV2ZW50cyxcbiAgICAgICAgY2hhbmdlU3RhdGUgPSAkLnNpZ25hbFIuY2hhbmdlU3RhdGUsXG4gICAgICAgIGlzRGlzY29ubmVjdGluZyA9ICQuc2lnbmFsUi5pc0Rpc2Nvbm5lY3RpbmcsXG4gICAgICAgIHRyYW5zcG9ydExvZ2ljID0gc2lnbmFsUi50cmFuc3BvcnRzLl9sb2dpYztcblxuICAgIHNpZ25hbFIudHJhbnNwb3J0cy5sb25nUG9sbGluZyA9IHtcbiAgICAgICAgbmFtZTogXCJsb25nUG9sbGluZ1wiLFxuXG4gICAgICAgIHN1cHBvcnRzS2VlcEFsaXZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVjb25uZWN0RGVsYXk6IDMwMDAsXG5cbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBvblN1Y2Nlc3MsIG9uRmFpbGVkKSB7XG4gICAgICAgICAgICAvLy8gPHN1bW1hcnk+U3RhcnRzIHRoZSBsb25nIHBvbGxpbmcgY29ubmVjdGlvbjwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImNvbm5lY3Rpb25cIiB0eXBlPVwic2lnbmFsUlwiPlRoZSBTaWduYWxSIGNvbm5lY3Rpb24gdG8gc3RhcnQ8L3BhcmFtPlxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGZpcmVDb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBmaXJlQ29ubmVjdCA9ICQubm9vcDtcblxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIkxvbmdQb2xsaW5nIGNvbm5lY3RlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgIG9uU3VjY2VzcygpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHJ5RmFpbENvbm5lY3QgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9uRmFpbGVkKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJMb25nUG9sbGluZyBmYWlsZWQgdG8gY29ubmVjdC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByaXZhdGVEYXRhID0gY29ubmVjdGlvbi5fLFxuICAgICAgICAgICAgICAgIHJlY29ubmVjdEVycm9ycyA9IDAsXG4gICAgICAgICAgICAgICAgZmlyZVJlY29ubmVjdGVkID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQocHJpdmF0ZURhdGEucmVjb25uZWN0VGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZURhdGEucmVjb25uZWN0VGltZW91dElkID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlU3RhdGUoaW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5yZWNvbm5lY3RpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5jb25uZWN0ZWQpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWNjZXNzZnVsbHkgcmVjb25uZWN0ZWQhXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5sb2coXCJSYWlzaW5nIHRoZSByZWNvbm5lY3QgZXZlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGluc3RhbmNlKS50cmlnZ2VySGFuZGxlcihldmVudHMub25SZWNvbm5lY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvLyAxIGhvdXJcbiAgICAgICAgICAgICAgICBtYXhGaXJlUmVjb25uZWN0ZWRUaW1lb3V0ID0gMzYwMDAwMDtcblxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24ucG9sbFhocikge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiUG9sbGluZyB4aHIgcmVxdWVzdHMgYWxyZWFkeSBleGlzdHMsIGFib3J0aW5nLlwiKTtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnN0b3AoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29ubmVjdGlvbi5tZXNzYWdlSWQgPSBudWxsO1xuXG4gICAgICAgICAgICBwcml2YXRlRGF0YS5yZWNvbm5lY3RUaW1lb3V0SWQgPSBudWxsO1xuXG4gICAgICAgICAgICBwcml2YXRlRGF0YS5wb2xsVGltZW91dElkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiBwb2xsKGluc3RhbmNlLCByYWlzZVJlY29ubmVjdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZUlkID0gaW5zdGFuY2UubWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdCA9IChtZXNzYWdlSWQgPT09IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb25uZWN0aW5nID0gIWNvbm5lY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xsaW5nID0gIXJhaXNlUmVjb25uZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdHJhbnNwb3J0TG9naWMuZ2V0VXJsKGluc3RhbmNlLCB0aGF0Lm5hbWUsIHJlY29ubmVjdGluZywgcG9sbGluZywgdHJ1ZSAvKiB1c2UgUG9zdCBmb3IgbG9uZ1BvbGxpbmcgKi8pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdERhdGEgPSB7fTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UubWVzc2FnZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0RGF0YS5tZXNzYWdlSWQgPSBpbnN0YW5jZS5tZXNzYWdlSWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuZ3JvdXBzVG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3REYXRhLmdyb3Vwc1Rva2VuID0gaW5zdGFuY2UuZ3JvdXBzVG9rZW47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSd2ZSBkaXNjb25uZWN0ZWQgZHVyaW5nIHRoZSB0aW1lIHdlJ3ZlIHRyaWVkIHRvIHJlLWluc3RhbnRpYXRlIHRoZSBwb2xsIHRoZW4gc3RvcC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRGlzY29ubmVjdGluZyhpbnN0YW5jZSkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiT3BlbmluZyBsb25nIHBvbGxpbmcgcmVxdWVzdCB0byAnXCIgKyB1cmwgKyBcIicuXCIpO1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5wb2xsWGhyID0gdHJhbnNwb3J0TG9naWMuYWpheChjb25uZWN0aW9uLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4aHJGaWVsZHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbnByb2dyZXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydExvZ2ljLm1hcmtMYXN0TWVzc2FnZShjb25uZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBzaWduYWxSLl8uZGVmYXVsdENvbnRlbnRUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcG9zdERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiBjb25uZWN0aW9uLl8ucG9sbFRpbWVvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1pbkRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmVjb25uZWN0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJMb25nIHBvbGwgY29tcGxldGUuXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgb3VyIHJlY29ubmVjdCBlcnJvcnMgc28gaWYgd2UgdHJhbnNpdGlvbiBpbnRvIGEgcmVjb25uZWN0aW5nIHN0YXRlIGFnYWluIHdlIHRyaWdnZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWNvbm5lY3RlZCBxdWlja2x5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb25uZWN0RXJyb3JzID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBhbnkga2VlcC1hbGl2ZXMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluRGF0YSA9IGNvbm5lY3Rpb24uX3BhcnNlUmVzcG9uc2UocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydExvZ2ljLmhhbmRsZVBhcnNlRmFpbHVyZShpbnN0YW5jZSwgcmVzdWx0LCBlcnJvciwgdHJ5RmFpbENvbm5lY3QsIGluc3RhbmNlLnBvbGxYaHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBjdXJyZW50bHkgYSB0aW1lb3V0IHRvIHRyaWdnZXIgcmVjb25uZWN0LCBmaXJlIGl0IG5vdyBiZWZvcmUgcHJvY2Vzc2luZyBtZXNzYWdlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcml2YXRlRGF0YS5yZWNvbm5lY3RUaW1lb3V0SWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyZVJlY29ubmVjdGVkKGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWluRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdHJhbnNwb3J0TG9naWMubWF4aW1pemVQZXJzaXN0ZW50UmVzcG9uc2UobWluRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0TG9naWMucHJvY2Vzc01lc3NhZ2VzKGluc3RhbmNlLCBtaW5EYXRhLCBmaXJlQ29ubmVjdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnR5cGUoZGF0YS5Mb25nUG9sbERlbGF5KSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheSA9IGRhdGEuTG9uZ1BvbGxEZWxheTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNEaXNjb25uZWN0aW5nKGluc3RhbmNlKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmVjb25uZWN0ID0gZGF0YSAmJiBkYXRhLlNob3VsZFJlY29ubmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkUmVjb25uZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyYW5zaXRpb24gaW50byB0aGUgcmVjb25uZWN0aW5nIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgZmFpbHMgdGhlbiB0aGF0IG1lYW5zIHRoYXQgdGhlIHVzZXIgdHJhbnNpdGlvbmVkIHRoZSBjb25uZWN0aW9uIGludG8gYSBpbnZhbGlkIHN0YXRlIGluIHByb2Nlc3NNZXNzYWdlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmFuc3BvcnRMb2dpYy5lbnN1cmVSZWNvbm5lY3RpbmdTdGF0ZShpbnN0YW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG5ldmVyIHdhbnQgdG8gcGFzcyBhIHJhaXNlUmVjb25uZWN0IGZsYWcgYWZ0ZXIgYSBzdWNjZXNzZnVsIHBvbGwuICBUaGlzIGlzIGhhbmRsZWQgdmlhIHRoZSBlcnJvciBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWxheSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZURhdGEucG9sbFRpbWVvdXRJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvbGwoaW5zdGFuY2UsIHNob3VsZFJlY29ubmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2xsKGluc3RhbmNlLCBzaG91bGRSZWNvbm5lY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZGF0YSwgdGV4dFN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHNpZ25hbFIuXy50cmFuc3BvcnRFcnJvcihzaWduYWxSLnJlc291cmNlcy5sb25nUG9sbEZhaWxlZCwgY29ubmVjdGlvbi50cmFuc3BvcnQsIGRhdGEsIGluc3RhbmNlLnBvbGxYaHIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCB0cnlpbmcgdG8gdHJpZ2dlciByZWNvbm5lY3QsIGNvbm5lY3Rpb24gaXMgaW4gYW4gZXJyb3Igc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSBub3QgaW4gdGhlIHJlY29ubmVjdCBzdGF0ZSB0aGlzIHdpbGwgbm9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQocHJpdmF0ZURhdGEucmVjb25uZWN0VGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcml2YXRlRGF0YS5yZWNvbm5lY3RUaW1lb3V0SWQgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHRTdGF0dXMgPT09IFwiYWJvcnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIkFib3J0ZWQgeGhyIHJlcXVlc3QuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0cnlGYWlsQ29ubmVjdChlcnJvcikpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmNyZW1lbnQgb3VyIHJlY29ubmVjdCBlcnJvcnMsIHdlIGFzc3VtZSBhbGwgZXJyb3JzIHRvIGJlIHJlY29ubmVjdCBlcnJvcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW4gdGhlIGNhc2UgdGhhdCBpdCdzIG91ciBmaXJzdCBlcnJvciB0aGlzIHdpbGwgY2F1c2UgUmVjb25uZWN0IHRvIGJlIGZpcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFmdGVyIDEgc2Vjb25kIGR1ZSB0byByZWNvbm5lY3RFcnJvcnMgYmVpbmcgPSAxLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvbm5lY3RFcnJvcnMrKztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbi5zdGF0ZSAhPT0gc2lnbmFsUi5jb25uZWN0aW9uU3RhdGUucmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIkFuIGVycm9yIG9jY3VycmVkIHVzaW5nIGxvbmdQb2xsaW5nLiBTdGF0dXMgPSBcIiArIHRleHRTdGF0dXMgKyBcIi4gIFJlc3BvbnNlID0gXCIgKyBkYXRhLnJlc3BvbnNlVGV4dCArIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoaW5zdGFuY2UpLnRyaWdnZXJIYW5kbGVyKGV2ZW50cy5vbkVycm9yLCBbZXJyb3JdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGNoZWNrIHRoZSBzdGF0ZSBoZXJlIHRvIHZlcmlmeSB0aGF0IHdlJ3JlIG5vdCBpbiBhbiBpbnZhbGlkIHN0YXRlIHByaW9yIHRvIHZlcmlmeWluZyBSZWNvbm5lY3QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlJ3JlIG5vdCBpbiBjb25uZWN0ZWQgb3IgcmVjb25uZWN0aW5nIHRoZW4gdGhlIG5leHQgZW5zdXJlUmVjb25uZWN0aW5nU3RhdGUgY2hlY2sgd2lsbCBmYWlsIGFuZCB3aWxsIHJldHVybi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmVmb3JlIHdlIGRvbid0IHdhbnQgdG8gY2hhbmdlIHRoYXQgZmFpbHVyZSBjb2RlIHBhdGguXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoY29ubmVjdGlvbi5zdGF0ZSA9PT0gc2lnbmFsUi5jb25uZWN0aW9uU3RhdGUuY29ubmVjdGVkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnN0YXRlID09PSBzaWduYWxSLmNvbm5lY3Rpb25TdGF0ZS5yZWNvbm5lY3RpbmcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdHJhbnNwb3J0TG9naWMudmVyaWZ5TGFzdEFjdGl2ZShjb25uZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJhbnNpdGlvbiBpbnRvIHRoZSByZWNvbm5lY3Rpbmcgc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBmYWlscyB0aGVuIHRoYXQgbWVhbnMgdGhhdCB0aGUgdXNlciB0cmFuc2l0aW9uZWQgdGhlIGNvbm5lY3Rpb24gaW50byB0aGUgZGlzY29ubmVjdGVkIG9yIGNvbm5lY3Rpbmcgc3RhdGUgd2l0aGluIHRoZSBhYm92ZSBlcnJvciBoYW5kbGVyIHRyaWdnZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHJhbnNwb3J0TG9naWMuZW5zdXJlUmVjb25uZWN0aW5nU3RhdGUoaW5zdGFuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHBvbGwgd2l0aCB0aGUgcmFpc2VSZWNvbm5lY3QgZmxhZyBhcyB0cnVlIGFmdGVyIHRoZSByZWNvbm5lY3QgZGVsYXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZURhdGEucG9sbFRpbWVvdXRJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvbGwoaW5zdGFuY2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGF0LnJlY29ubmVjdERlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBvbmx5IGV2ZXIgcGFzcyBhZnRlciBhbiBlcnJvciBoYXMgb2NjdXJlZCB2aWEgdGhlIHBvbGwgYWpheCBwcm9jZWR1cmUuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNvbm5lY3RpbmcgJiYgcmFpc2VSZWNvbm5lY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHdhaXQgdG8gcmVjb25uZWN0IGRlcGVuZGluZyBvbiBob3cgbWFueSB0aW1lcyB3ZSd2ZSBmYWlsZWQgdG8gcmVjb25uZWN0LlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBlc3NlbnRpYWxseSBhIGhldXJpc3RpYyB0aGF0IHdpbGwgZXhwb25lbnRpYWxseSBpbmNyZWFzZSBpbiB3YWl0IHRpbWUgYmVmb3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyaW5nIHJlY29ubmVjdGVkLiAgVGhpcyBkZXBlbmRzIG9uIHRoZSBcImVycm9yXCIgaGFuZGxlciBvZiBQb2xsIHRvIGNhbmNlbCB0aGlzIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGltZW91dCBpZiBpdCB0cmlnZ2VycyBiZWZvcmUgdGhlIFJlY29ubmVjdGVkIGV2ZW50IGZpcmVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIE1hdGgubWluIGF0IHRoZSBlbmQgaXMgdG8gZW5zdXJlIHRoYXQgdGhlIHJlY29ubmVjdCB0aW1lb3V0IGRvZXMgbm90IG92ZXJmbG93LlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZURhdGEucmVjb25uZWN0VGltZW91dElkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBmaXJlUmVjb25uZWN0ZWQoaW5zdGFuY2UpOyB9LCBNYXRoLm1pbigxMDAwICogKE1hdGgucG93KDIsIHJlY29ubmVjdEVycm9ycykgLSAxKSwgbWF4RmlyZVJlY29ubmVjdGVkVGltZW91dCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfShjb25uZWN0aW9uKSk7XG4gICAgICAgICAgICB9LCAyNTApOyAvLyBIYXZlIHRvIGRlbGF5IGluaXRpYWwgcG9sbCBzbyBDaHJvbWUgZG9lc24ndCBzaG93IGxvYWRlciBzcGlubmVyIGluIHRhYlxuICAgICAgICB9LFxuXG4gICAgICAgIGxvc3RDb25uZWN0aW9uOiBmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24ucG9sbFhocikge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ucG9sbFhoci5hYm9ydChcImxvc3RDb25uZWN0aW9uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNlbmQ6IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBkYXRhKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnRMb2dpYy5hamF4U2VuZChjb25uZWN0aW9uLCBkYXRhKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzdG9wOiBmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgLy8vIDxzdW1tYXJ5PlN0b3BzIHRoZSBsb25nIHBvbGxpbmcgY29ubmVjdGlvbjwvc3VtbWFyeT5cbiAgICAgICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImNvbm5lY3Rpb25cIiB0eXBlPVwic2lnbmFsUlwiPlRoZSBTaWduYWxSIGNvbm5lY3Rpb24gdG8gc3RvcDwvcGFyYW0+XG5cbiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoY29ubmVjdGlvbi5fLnBvbGxUaW1lb3V0SWQpO1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChjb25uZWN0aW9uLl8ucmVjb25uZWN0VGltZW91dElkKTtcblxuICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3Rpb24uXy5wb2xsVGltZW91dElkO1xuICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3Rpb24uXy5yZWNvbm5lY3RUaW1lb3V0SWQ7XG5cbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLnBvbGxYaHIpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnBvbGxYaHIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnBvbGxYaHIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25uZWN0aW9uLnBvbGxYaHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBhc3luYykge1xuICAgICAgICAgICAgdHJhbnNwb3J0TG9naWMuYWpheEFib3J0KGNvbm5lY3Rpb24sIGFzeW5jKTtcbiAgICAgICAgfVxuICAgIH07XG5cbn0od2luZG93LmpRdWVyeSwgd2luZG93KSk7XG4vKiBqcXVlcnkuc2lnbmFsUi5odWJzLmpzICovXG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBPcGVuIFRlY2hub2xvZ2llcywgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBTZWUgTGljZW5zZS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG4vKmdsb2JhbCB3aW5kb3c6ZmFsc2UgKi9cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJqcXVlcnkuc2lnbmFsUi5jb3JlLmpzXCIgLz5cblxuKGZ1bmN0aW9uICgkLCB3aW5kb3csIHVuZGVmaW5lZCkge1xuXG4gICAgdmFyIGV2ZW50TmFtZXNwYWNlID0gXCIuaHViUHJveHlcIixcbiAgICAgICAgc2lnbmFsUiA9ICQuc2lnbmFsUjtcblxuICAgIGZ1bmN0aW9uIG1ha2VFdmVudE5hbWUoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50ICsgZXZlbnROYW1lc3BhY2U7XG4gICAgfVxuXG4gICAgLy8gRXF1aXZhbGVudCB0byBBcnJheS5wcm90b3R5cGUubWFwXG4gICAgZnVuY3Rpb24gbWFwKGFyciwgZnVuLCB0aGlzcCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGxlbmd0aCA9IGFyci5sZW5ndGgsXG4gICAgICAgICAgICByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoYXJyLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gZnVuLmNhbGwodGhpc3AsIGFycltpXSwgaSwgYXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFyZ1ZhbHVlKGEpIHtcbiAgICAgICAgcmV0dXJuICQuaXNGdW5jdGlvbihhKSA/IG51bGwgOiAoJC50eXBlKGEpID09PSBcInVuZGVmaW5lZFwiID8gbnVsbCA6IGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc01lbWJlcnMob2JqKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYW55IHByb3BlcnRpZXMgaW4gb3VyIGNhbGxiYWNrIG1hcCB0aGVuIHdlIGhhdmUgY2FsbGJhY2tzIGFuZCBjYW4gZXhpdCB0aGUgbG9vcCB2aWEgcmV0dXJuXG4gICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckludm9jYXRpb25DYWxsYmFja3MoY29ubmVjdGlvbiwgZXJyb3IpIHtcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiY29ubmVjdGlvblwiIHR5cGU9XCJodWJDb25uZWN0aW9uXCIgLz5cbiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IGNvbm5lY3Rpb24uXy5pbnZvY2F0aW9uQ2FsbGJhY2tzLFxuICAgICAgICAgICAgY2FsbGJhY2s7XG5cbiAgICAgICAgaWYgKGhhc01lbWJlcnMoY2FsbGJhY2tzKSkge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJDbGVhcmluZyBodWIgaW52b2NhdGlvbiBjYWxsYmFja3Mgd2l0aCBlcnJvcjogXCIgKyBlcnJvciArIFwiLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlc2V0IHRoZSBjYWxsYmFjayBjYWNoZSBub3cgYXMgd2UgaGF2ZSBhIGxvY2FsIHZhciByZWZlcmVuY2luZyBpdFxuICAgICAgICBjb25uZWN0aW9uLl8uaW52b2NhdGlvbkNhbGxiYWNrSWQgPSAwO1xuICAgICAgICBkZWxldGUgY29ubmVjdGlvbi5fLmludm9jYXRpb25DYWxsYmFja3M7XG4gICAgICAgIGNvbm5lY3Rpb24uXy5pbnZvY2F0aW9uQ2FsbGJhY2tzID0ge307XG5cbiAgICAgICAgLy8gTG9vcCBvdmVyIHRoZSBjYWxsYmFja3MgYW5kIGludm9rZSB0aGVtLlxuICAgICAgICAvLyBXZSBkbyB0aGlzIHVzaW5nIGEgbG9jYWwgdmFyIHJlZmVyZW5jZSBhbmQgKmFmdGVyKiB3ZSd2ZSBjbGVhcmVkIHRoZSBjYWNoZVxuICAgICAgICAvLyBzbyB0aGF0IGlmIGEgZmFpbCBjYWxsYmFjayBpdHNlbGYgdHJpZXMgdG8gaW52b2tlIGFub3RoZXIgbWV0aG9kIHdlIGRvbid0IFxuICAgICAgICAvLyBlbmQgdXAgd2l0aCBpdHMgY2FsbGJhY2sgaW4gdGhlIGxpc3Qgd2UncmUgbG9vcGluZyBvdmVyLlxuICAgICAgICBmb3IgKHZhciBjYWxsYmFja0lkIGluIGNhbGxiYWNrcykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFja3NbY2FsbGJhY2tJZF07XG4gICAgICAgICAgICBjYWxsYmFjay5tZXRob2QuY2FsbChjYWxsYmFjay5zY29wZSwgeyBFOiBlcnJvciB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGh1YlByb3h5XG4gICAgZnVuY3Rpb24gaHViUHJveHkoaHViQ29ubmVjdGlvbiwgaHViTmFtZSkge1xuICAgICAgICAvLy8gPHN1bW1hcnk+XG4gICAgICAgIC8vLyAgICAgQ3JlYXRlcyBhIG5ldyBwcm94eSBvYmplY3QgZm9yIHRoZSBnaXZlbiBodWIgY29ubmVjdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGludm9rZVxuICAgICAgICAvLy8gICAgIG1ldGhvZHMgb24gc2VydmVyIGh1YnMgYW5kIGhhbmRsZSBjbGllbnQgbWV0aG9kIGludm9jYXRpb24gcmVxdWVzdHMgZnJvbSB0aGUgc2VydmVyLlxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxuICAgICAgICByZXR1cm4gbmV3IGh1YlByb3h5LmZuLmluaXQoaHViQ29ubmVjdGlvbiwgaHViTmFtZSk7XG4gICAgfVxuXG4gICAgaHViUHJveHkuZm4gPSBodWJQcm94eS5wcm90b3R5cGUgPSB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBodWJOYW1lKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0ge307XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5odWJOYW1lID0gaHViTmFtZTtcbiAgICAgICAgICAgIHRoaXMuXyA9IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja01hcDoge31cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29uc3RydWN0b3I6IGh1YlByb3h5LFxuXG4gICAgICAgIGhhc1N1YnNjcmlwdGlvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBoYXNNZW1iZXJzKHRoaXMuXy5jYWxsYmFja01hcCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb246IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLy8gPHN1bW1hcnk+V2lyZXMgdXAgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gYSBpbnZvY2F0aW9uIHJlcXVlc3QgaXMgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyIGh1Yi48L3N1bW1hcnk+XG4gICAgICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJldmVudE5hbWVcIiB0eXBlPVwiU3RyaW5nXCI+VGhlIG5hbWUgb2YgdGhlIGh1YiBldmVudCB0byByZWdpc3RlciB0aGUgY2FsbGJhY2sgZm9yLjwvcGFyYW0+XG4gICAgICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJjYWxsYmFja1wiIHR5cGU9XCJGdW5jdGlvblwiPlRoZSBjYWxsYmFjayB0byBiZSBpbnZva2VkLjwvcGFyYW0+XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tNYXAgPSB0aGF0Ll8uY2FsbGJhY2tNYXA7XG5cbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgZXZlbnQgbmFtZSB0byBsb3dlcmNhc2VcbiAgICAgICAgICAgIGV2ZW50TmFtZSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBub3QgYW4gZXZlbnQgcmVnaXN0ZXJlZCBmb3IgdGhpcyBjYWxsYmFjayB5ZXQgd2Ugd2FudCB0byBjcmVhdGUgaXRzIGV2ZW50IHNwYWNlIGluIHRoZSBjYWxsYmFjayBtYXAuXG4gICAgICAgICAgICBpZiAoIWNhbGxiYWNrTWFwW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja01hcFtldmVudE5hbWVdID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1hcCB0aGUgY2FsbGJhY2sgdG8gb3VyIGVuY29tcGFzc2VkIGZ1bmN0aW9uXG4gICAgICAgICAgICBjYWxsYmFja01hcFtldmVudE5hbWVdW2NhbGxiYWNrXSA9IGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodGhhdCwgZGF0YSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkKHRoYXQpLmJpbmQobWFrZUV2ZW50TmFtZShldmVudE5hbWUpLCBjYWxsYmFja01hcFtldmVudE5hbWVdW2NhbGxiYWNrXSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgICB9LFxuXG4gICAgICAgIG9mZjogZnVuY3Rpb24gKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vLyA8c3VtbWFyeT5SZW1vdmVzIHRoZSBjYWxsYmFjayBpbnZvY2F0aW9uIHJlcXVlc3QgZnJvbSB0aGUgc2VydmVyIGh1YiBmb3IgdGhlIGdpdmVuIGV2ZW50IG5hbWUuPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiZXZlbnROYW1lXCIgdHlwZT1cIlN0cmluZ1wiPlRoZSBuYW1lIG9mIHRoZSBodWIgZXZlbnQgdG8gdW5yZWdpc3RlciB0aGUgY2FsbGJhY2sgZm9yLjwvcGFyYW0+XG4gICAgICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJjYWxsYmFja1wiIHR5cGU9XCJGdW5jdGlvblwiPlRoZSBjYWxsYmFjayB0byBiZSBpbnZva2VkLjwvcGFyYW0+XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tNYXAgPSB0aGF0Ll8uY2FsbGJhY2tNYXAsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tTcGFjZTtcblxuICAgICAgICAgICAgLy8gTm9ybWFsaXplIHRoZSBldmVudCBuYW1lIHRvIGxvd2VyY2FzZVxuICAgICAgICAgICAgZXZlbnROYW1lID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrU3BhY2UgPSBjYWxsYmFja01hcFtldmVudE5hbWVdO1xuXG4gICAgICAgICAgICAvLyBWZXJpZnkgdGhhdCB0aGVyZSBpcyBhbiBldmVudCBzcGFjZSB0byB1bmJpbmRcbiAgICAgICAgICAgIGlmIChjYWxsYmFja1NwYWNlKSB7XG4gICAgICAgICAgICAgICAgLy8gT25seSB1bmJpbmQgaWYgdGhlcmUncyBhbiBldmVudCBib3VuZCB3aXRoIGV2ZW50TmFtZSBhbmQgYSBjYWxsYmFjayB3aXRoIHRoZSBzcGVjaWZpZWQgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2tTcGFjZVtjYWxsYmFja10pIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGF0KS51bmJpbmQobWFrZUV2ZW50TmFtZShldmVudE5hbWUpLCBjYWxsYmFja1NwYWNlW2NhbGxiYWNrXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBjYWxsYmFjayBmcm9tIHRoZSBjYWxsYmFjayBtYXBcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNhbGxiYWNrU3BhY2VbY2FsbGJhY2tdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbWVtYmVycyBsZWZ0IG9uIHRoZSBldmVudCwgaWYgbm90IHdlIG5lZWQgdG8gZGVzdHJveSBpdC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNNZW1iZXJzKGNhbGxiYWNrU3BhY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgY2FsbGJhY2tNYXBbZXZlbnROYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWNhbGxiYWNrKSB7IC8vIENoZWNrIGlmIHdlJ3JlIHJlbW92aW5nIHRoZSB3aG9sZSBldmVudCBhbmQgd2UgZGlkbid0IGVycm9yIGJlY2F1c2Ugb2YgYW4gaW52YWxpZCBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICAkKHRoYXQpLnVuYmluZChtYWtlRXZlbnROYW1lKGV2ZW50TmFtZSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjYWxsYmFja01hcFtldmVudE5hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW52b2tlOiBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICAgICAgICAgICAgLy8vIDxzdW1tYXJ5Pkludm9rZXMgYSBzZXJ2ZXIgaHViIG1ldGhvZCB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHMuPC9zdW1tYXJ5PlxuICAgICAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwibWV0aG9kTmFtZVwiIHR5cGU9XCJTdHJpbmdcIj5UaGUgbmFtZSBvZiB0aGUgc2VydmVyIGh1YiBtZXRob2QuPC9wYXJhbT5cblxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24gPSB0aGF0LmNvbm5lY3Rpb24sXG4gICAgICAgICAgICAgICAgYXJncyA9ICQubWFrZUFycmF5KGFyZ3VtZW50cykuc2xpY2UoMSksXG4gICAgICAgICAgICAgICAgYXJnVmFsdWVzID0gbWFwKGFyZ3MsIGdldEFyZ1ZhbHVlKSxcbiAgICAgICAgICAgICAgICBkYXRhID0geyBIOiB0aGF0Lmh1Yk5hbWUsIE06IG1ldGhvZE5hbWUsIEE6IGFyZ1ZhbHVlcywgSTogY29ubmVjdGlvbi5fLmludm9jYXRpb25DYWxsYmFja0lkIH0sXG4gICAgICAgICAgICAgICAgZCA9ICQuRGVmZXJyZWQoKSxcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIChtaW5SZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoYXQuX21heGltaXplSHViUmVzcG9uc2UobWluUmVzdWx0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgaHViIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgICQuZXh0ZW5kKHRoYXQuc3RhdGUsIHJlc3VsdC5TdGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQubm90aWZ5V2l0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByb2dyZXNzIGlzIG9ubHkgc3VwcG9ydGVkIGluIGpRdWVyeSAxLjcrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5ub3RpZnlXaXRoKHRoYXQsIFtyZXN1bHQuUHJvZ3Jlc3MuRGF0YV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCFjb25uZWN0aW9uLl8ucHJvZ3Jlc3NqUXVlcnlWZXJzaW9uTG9nZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJBIGh1YiBtZXRob2QgaW52b2NhdGlvbiBwcm9ncmVzcyB1cGRhdGUgd2FzIHJlY2VpdmVkIGJ1dCB0aGUgdmVyc2lvbiBvZiBqUXVlcnkgaW4gdXNlIChcIiArICQucHJvdG90eXBlLmpxdWVyeSArIFwiKSBkb2VzIG5vdCBzdXBwb3J0IHByb2dyZXNzIHVwZGF0ZXMuIFVwZ3JhZGUgdG8galF1ZXJ5IDEuNysgdG8gcmVjZWl2ZSBwcm9ncmVzcyBub3RpZmljYXRpb25zLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLl8ucHJvZ3Jlc3NqUXVlcnlWZXJzaW9uTG9nZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlcnZlciBodWIgbWV0aG9kIHRocmV3IGFuIGV4Y2VwdGlvbiwgbG9nIGl0ICYgcmVqZWN0IHRoZSBkZWZlcnJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5TdGFja1RyYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2cocmVzdWx0LkVycm9yICsgXCJcXG5cIiArIHJlc3VsdC5TdGFja1RyYWNlICsgXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXN1bHQuRXJyb3JEYXRhIGlzIG9ubHkgc2V0IGlmIGEgSHViRXhjZXB0aW9uIHdhcyB0aHJvd25cbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IHJlc3VsdC5Jc0h1YkV4Y2VwdGlvbiA/IFwiSHViRXhjZXB0aW9uXCIgOiBcIkV4Y2VwdGlvblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBzaWduYWxSLl8uZXJyb3IocmVzdWx0LkVycm9yLCBzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuZGF0YSA9IHJlc3VsdC5FcnJvckRhdGE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKHRoYXQuaHViTmFtZSArIFwiLlwiICsgbWV0aG9kTmFtZSArIFwiIGZhaWxlZCB0byBleGVjdXRlLiBFcnJvcjogXCIgKyBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0V2l0aCh0aGF0LCBbZXJyb3JdKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlcnZlciBpbnZvY2F0aW9uIHN1Y2NlZWRlZCwgcmVzb2x2ZSB0aGUgZGVmZXJyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiSW52b2tlZCBcIiArIHRoYXQuaHViTmFtZSArIFwiLlwiICsgbWV0aG9kTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmVXaXRoKHRoYXQsIFtyZXN1bHQuUmVzdWx0XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25uZWN0aW9uLl8uaW52b2NhdGlvbkNhbGxiYWNrc1tjb25uZWN0aW9uLl8uaW52b2NhdGlvbkNhbGxiYWNrSWQudG9TdHJpbmcoKV0gPSB7IHNjb3BlOiB0aGF0LCBtZXRob2Q6IGNhbGxiYWNrIH07XG4gICAgICAgICAgICBjb25uZWN0aW9uLl8uaW52b2NhdGlvbkNhbGxiYWNrSWQgKz0gMTtcblxuICAgICAgICAgICAgaWYgKCEkLmlzRW1wdHlPYmplY3QodGhhdC5zdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhLlMgPSB0aGF0LnN0YXRlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25uZWN0aW9uLmxvZyhcIkludm9raW5nIFwiICsgdGhhdC5odWJOYW1lICsgXCIuXCIgKyBtZXRob2ROYW1lKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uc2VuZChkYXRhKTtcblxuICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9tYXhpbWl6ZUh1YlJlc3BvbnNlOiBmdW5jdGlvbiAobWluSHViUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgU3RhdGU6IG1pbkh1YlJlc3BvbnNlLlMsXG4gICAgICAgICAgICAgICAgUmVzdWx0OiBtaW5IdWJSZXNwb25zZS5SLFxuICAgICAgICAgICAgICAgIFByb2dyZXNzOiBtaW5IdWJSZXNwb25zZS5QID8ge1xuICAgICAgICAgICAgICAgICAgICBJZDogbWluSHViUmVzcG9uc2UuUC5JLFxuICAgICAgICAgICAgICAgICAgICBEYXRhOiBtaW5IdWJSZXNwb25zZS5QLkRcbiAgICAgICAgICAgICAgICB9IDogbnVsbCxcbiAgICAgICAgICAgICAgICBJZDogbWluSHViUmVzcG9uc2UuSSxcbiAgICAgICAgICAgICAgICBJc0h1YkV4Y2VwdGlvbjogbWluSHViUmVzcG9uc2UuSCxcbiAgICAgICAgICAgICAgICBFcnJvcjogbWluSHViUmVzcG9uc2UuRSxcbiAgICAgICAgICAgICAgICBTdGFja1RyYWNlOiBtaW5IdWJSZXNwb25zZS5ULFxuICAgICAgICAgICAgICAgIEVycm9yRGF0YTogbWluSHViUmVzcG9uc2UuRFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBodWJQcm94eS5mbi5pbml0LnByb3RvdHlwZSA9IGh1YlByb3h5LmZuO1xuXG4gICAgLy8gaHViQ29ubmVjdGlvblxuICAgIGZ1bmN0aW9uIGh1YkNvbm5lY3Rpb24odXJsLCBvcHRpb25zKSB7XG4gICAgICAgIC8vLyA8c3VtbWFyeT5DcmVhdGVzIGEgbmV3IGh1YiBjb25uZWN0aW9uLjwvc3VtbWFyeT5cbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwidXJsXCIgdHlwZT1cIlN0cmluZ1wiPltPcHRpb25hbF0gVGhlIGh1YiByb3V0ZSB1cmwsIGRlZmF1bHRzIHRvIFwiL3NpZ25hbHJcIi48L3BhcmFtPlxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJvcHRpb25zXCIgdHlwZT1cIk9iamVjdFwiPltPcHRpb25hbF0gU2V0dGluZ3MgdG8gdXNlIHdoZW4gY3JlYXRpbmcgdGhlIGh1YkNvbm5lY3Rpb24uPC9wYXJhbT5cbiAgICAgICAgdmFyIHNldHRpbmdzID0ge1xuICAgICAgICAgICAgcXM6IG51bGwsXG4gICAgICAgICAgICBsb2dnaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHVzZURlZmF1bHRQYXRoOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgJC5leHRlbmQoc2V0dGluZ3MsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmICghdXJsIHx8IHNldHRpbmdzLnVzZURlZmF1bHRQYXRoKSB7XG4gICAgICAgICAgICB1cmwgPSAodXJsIHx8IFwiXCIpICsgXCIvc2lnbmFsclwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgaHViQ29ubmVjdGlvbi5mbi5pbml0KHVybCwgc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIGh1YkNvbm5lY3Rpb24uZm4gPSBodWJDb25uZWN0aW9uLnByb3RvdHlwZSA9ICQuY29ubmVjdGlvbigpO1xuXG4gICAgaHViQ29ubmVjdGlvbi5mbi5pbml0ID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgcXM6IG51bGwsXG4gICAgICAgICAgICAgICAgbG9nZ2luZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgdXNlRGVmYXVsdFBhdGg6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25uZWN0aW9uID0gdGhpcztcblxuICAgICAgICAkLmV4dGVuZChzZXR0aW5ncywgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gQ2FsbCB0aGUgYmFzZSBjb25zdHJ1Y3RvclxuICAgICAgICAkLnNpZ25hbFIuZm4uaW5pdC5jYWxsKGNvbm5lY3Rpb24sIHVybCwgc2V0dGluZ3MucXMsIHNldHRpbmdzLmxvZ2dpbmcpO1xuXG4gICAgICAgIC8vIE9iamVjdCB0byBzdG9yZSBodWIgcHJveGllcyBmb3IgdGhpcyBjb25uZWN0aW9uXG4gICAgICAgIGNvbm5lY3Rpb24ucHJveGllcyA9IHt9O1xuXG4gICAgICAgIGNvbm5lY3Rpb24uXy5pbnZvY2F0aW9uQ2FsbGJhY2tJZCA9IDA7XG4gICAgICAgIGNvbm5lY3Rpb24uXy5pbnZvY2F0aW9uQ2FsbGJhY2tzID0ge307XG5cbiAgICAgICAgLy8gV2lyZSB1cCB0aGUgcmVjZWl2ZWQgaGFuZGxlclxuICAgICAgICBjb25uZWN0aW9uLnJlY2VpdmVkKGZ1bmN0aW9uIChtaW5EYXRhKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSwgcHJveHksIGRhdGFDYWxsYmFja0lkLCBjYWxsYmFjaywgaHViTmFtZSwgZXZlbnROYW1lO1xuICAgICAgICAgICAgaWYgKCFtaW5EYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXZSBoYXZlIHRvIGhhbmRsZSBwcm9ncmVzcyB1cGRhdGVzIGZpcnN0IGluIG9yZGVyIHRvIGVuc3VyZSBvbGQgY2xpZW50cyB0aGF0IHJlY2VpdmVcbiAgICAgICAgICAgIC8vIHByb2dyZXNzIHVwZGF0ZXMgZW50ZXIgdGhlIHJldHVybiB2YWx1ZSBicmFuY2ggYW5kIHRoZW4gbm8tb3Agd2hlbiB0aGV5IGNhbid0IGZpbmRcbiAgICAgICAgICAgIC8vIHRoZSBjYWxsYmFjayBpbiB0aGUgbWFwIChiZWNhdXNlIHRoZSBtaW5EYXRhLkkgdmFsdWUgd2lsbCBub3QgYmUgYSB2YWxpZCBjYWxsYmFjayBJRClcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKG1pbkRhdGEuUCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgICAgIGRhdGFDYWxsYmFja0lkID0gbWluRGF0YS5QLkkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGNvbm5lY3Rpb24uXy5pbnZvY2F0aW9uQ2FsbGJhY2tzW2RhdGFDYWxsYmFja0lkXTtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2subWV0aG9kLmNhbGwoY2FsbGJhY2suc2NvcGUsIG1pbkRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIChtaW5EYXRhLkkpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgcmVjZWl2ZWQgdGhlIHJldHVybiB2YWx1ZSBmcm9tIGEgc2VydmVyIG1ldGhvZCBpbnZvY2F0aW9uLCBsb29rIHVwIGNhbGxiYWNrIGJ5IGlkIGFuZCBjYWxsIGl0XG4gICAgICAgICAgICAgICAgZGF0YUNhbGxiYWNrSWQgPSBtaW5EYXRhLkkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGNvbm5lY3Rpb24uXy5pbnZvY2F0aW9uQ2FsbGJhY2tzW2RhdGFDYWxsYmFja0lkXTtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVsZXRlIHRoZSBjYWxsYmFjayBmcm9tIHRoZSBwcm94eVxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLl8uaW52b2NhdGlvbkNhbGxiYWNrc1tkYXRhQ2FsbGJhY2tJZF0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY29ubmVjdGlvbi5fLmludm9jYXRpb25DYWxsYmFja3NbZGF0YUNhbGxiYWNrSWRdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEludm9rZSB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2subWV0aG9kLmNhbGwoY2FsbGJhY2suc2NvcGUsIG1pbkRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuX21heGltaXplQ2xpZW50SHViSW52b2NhdGlvbihtaW5EYXRhKTtcblxuICAgICAgICAgICAgICAgIC8vIFdlIHJlY2VpdmVkIGEgY2xpZW50IGludm9jYXRpb24gcmVxdWVzdCwgaS5lLiBicm9hZGNhc3QgZnJvbSBzZXJ2ZXIgaHViXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJUcmlnZ2VyaW5nIGNsaWVudCBodWIgZXZlbnQgJ1wiICsgZGF0YS5NZXRob2QgKyBcIicgb24gaHViICdcIiArIGRhdGEuSHViICsgXCInLlwiKTtcblxuICAgICAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgbmFtZXMgdG8gbG93ZXJjYXNlXG4gICAgICAgICAgICAgICAgaHViTmFtZSA9IGRhdGEuSHViLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgZXZlbnROYW1lID0gZGF0YS5NZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGhlIGxvY2FsIGludm9jYXRpb24gZXZlbnRcbiAgICAgICAgICAgICAgICBwcm94eSA9IHRoaXMucHJveGllc1todWJOYW1lXTtcblxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgaHViIHN0YXRlXG4gICAgICAgICAgICAgICAgJC5leHRlbmQocHJveHkuc3RhdGUsIGRhdGEuU3RhdGUpO1xuICAgICAgICAgICAgICAgICQocHJveHkpLnRyaWdnZXJIYW5kbGVyKG1ha2VFdmVudE5hbWUoZXZlbnROYW1lKSwgW2RhdGEuQXJnc10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25uZWN0aW9uLmVycm9yKGZ1bmN0aW9uIChlcnJEYXRhLCBvcmlnRGF0YSkge1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrSWQsIGNhbGxiYWNrO1xuXG4gICAgICAgICAgICBpZiAoIW9yaWdEYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gTm8gb3JpZ2luYWwgZGF0YSBwYXNzZWQgc28gdGhpcyBpcyBub3QgYSBzZW5kIGVycm9yXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYWxsYmFja0lkID0gb3JpZ0RhdGEuSTtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gY29ubmVjdGlvbi5fLmludm9jYXRpb25DYWxsYmFja3NbY2FsbGJhY2tJZF07XG5cbiAgICAgICAgICAgIC8vIFZlcmlmeSB0aGF0IHRoZXJlIGlzIGEgY2FsbGJhY2sgYm91bmQgKGNvdWxkIGhhdmUgYmVlbiBjbGVhcmVkKVxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgLy8gRGVsZXRlIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uXy5pbnZvY2F0aW9uQ2FsbGJhY2tzW2NhbGxiYWNrSWRdID0gbnVsbDtcbiAgICAgICAgICAgICAgICBkZWxldGUgY29ubmVjdGlvbi5fLmludm9jYXRpb25DYWxsYmFja3NbY2FsbGJhY2tJZF07XG5cbiAgICAgICAgICAgICAgICAvLyBJbnZva2UgdGhlIGNhbGxiYWNrIHdpdGggYW4gZXJyb3IgdG8gcmVqZWN0IHRoZSBwcm9taXNlXG4gICAgICAgICAgICAgICAgY2FsbGJhY2subWV0aG9kLmNhbGwoY2FsbGJhY2suc2NvcGUsIHsgRTogZXJyRGF0YSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29ubmVjdGlvbi5yZWNvbm5lY3RpbmcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24udHJhbnNwb3J0ICYmIGNvbm5lY3Rpb24udHJhbnNwb3J0Lm5hbWUgPT09IFwid2ViU29ja2V0c1wiKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnZvY2F0aW9uQ2FsbGJhY2tzKGNvbm5lY3Rpb24sIFwiQ29ubmVjdGlvbiBzdGFydGVkIHJlY29ubmVjdGluZyBiZWZvcmUgaW52b2NhdGlvbiByZXN1bHQgd2FzIHJlY2VpdmVkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29ubmVjdGlvbi5kaXNjb25uZWN0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2xlYXJJbnZvY2F0aW9uQ2FsbGJhY2tzKGNvbm5lY3Rpb24sIFwiQ29ubmVjdGlvbiB3YXMgZGlzY29ubmVjdGVkIGJlZm9yZSBpbnZvY2F0aW9uIHJlc3VsdCB3YXMgcmVjZWl2ZWQuXCIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgaHViQ29ubmVjdGlvbi5mbi5fbWF4aW1pemVDbGllbnRIdWJJbnZvY2F0aW9uID0gZnVuY3Rpb24gKG1pbkNsaWVudEh1Ykludm9jYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEh1YjogbWluQ2xpZW50SHViSW52b2NhdGlvbi5ILFxuICAgICAgICAgICAgTWV0aG9kOiBtaW5DbGllbnRIdWJJbnZvY2F0aW9uLk0sXG4gICAgICAgICAgICBBcmdzOiBtaW5DbGllbnRIdWJJbnZvY2F0aW9uLkEsXG4gICAgICAgICAgICBTdGF0ZTogbWluQ2xpZW50SHViSW52b2NhdGlvbi5TXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIGh1YkNvbm5lY3Rpb24uZm4uX3JlZ2lzdGVyU3Vic2NyaWJlZEh1YnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vLyA8c3VtbWFyeT5cbiAgICAgICAgLy8vICAgICBTZXRzIHRoZSBzdGFydGluZyBldmVudCB0byBsb29wIHRocm91Z2ggdGhlIGtub3duIGh1YnMgYW5kIHJlZ2lzdGVyIGFueSBuZXcgaHVicyBcbiAgICAgICAgLy8vICAgICB0aGF0IGhhdmUgYmVlbiBhZGRlZCB0byB0aGUgcHJveHkuXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcztcblxuICAgICAgICBpZiAoIWNvbm5lY3Rpb24uX3N1YnNjcmliZWRUb0h1YnMpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uX3N1YnNjcmliZWRUb0h1YnMgPSB0cnVlO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5zdGFydGluZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBjb25uZWN0aW9uJ3MgZGF0YSBvYmplY3Qgd2l0aCBhbGwgdGhlIGh1YiBwcm94aWVzIHdpdGggYWN0aXZlIHN1YnNjcmlwdGlvbnMuXG4gICAgICAgICAgICAgICAgLy8gVGhlc2UgcHJveGllcyB3aWxsIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICAgICAgICAgICAgdmFyIHN1YnNjcmliZWRIdWJzID0gW107XG5cbiAgICAgICAgICAgICAgICAkLmVhY2goY29ubmVjdGlvbi5wcm94aWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc1N1YnNjcmlwdGlvbnMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlZEh1YnMucHVzaCh7IG5hbWU6IGtleSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ubG9nKFwiQ2xpZW50IHN1YnNjcmliZWQgdG8gaHViICdcIiArIGtleSArIFwiJy5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVkSHVicy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2coXCJObyBodWJzIGhhdmUgYmVlbiBzdWJzY3JpYmVkIHRvLiAgVGhlIGNsaWVudCB3aWxsIG5vdCByZWNlaXZlIGRhdGEgZnJvbSBodWJzLiAgVG8gZml4LCBkZWNsYXJlIGF0IGxlYXN0IG9uZSBjbGllbnQgc2lkZSBmdW5jdGlvbiBwcmlvciB0byBjb25uZWN0aW9uIHN0YXJ0IGZvciBlYWNoIGh1YiB5b3Ugd2lzaCB0byBzdWJzY3JpYmUgdG8uXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uZGF0YSA9IGNvbm5lY3Rpb24uanNvbi5zdHJpbmdpZnkoc3Vic2NyaWJlZEh1YnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaHViQ29ubmVjdGlvbi5mbi5jcmVhdGVIdWJQcm94eSA9IGZ1bmN0aW9uIChodWJOYW1lKSB7XG4gICAgICAgIC8vLyA8c3VtbWFyeT5cbiAgICAgICAgLy8vICAgICBDcmVhdGVzIGEgbmV3IHByb3h5IG9iamVjdCBmb3IgdGhlIGdpdmVuIGh1YiBjb25uZWN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW52b2tlXG4gICAgICAgIC8vLyAgICAgbWV0aG9kcyBvbiBzZXJ2ZXIgaHVicyBhbmQgaGFuZGxlIGNsaWVudCBtZXRob2QgaW52b2NhdGlvbiByZXF1ZXN0cyBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImh1Yk5hbWVcIiB0eXBlPVwiU3RyaW5nXCI+XG4gICAgICAgIC8vLyAgICAgVGhlIG5hbWUgb2YgdGhlIGh1YiBvbiB0aGUgc2VydmVyIHRvIGNyZWF0ZSB0aGUgcHJveHkgZm9yLlxuICAgICAgICAvLy8gPC9wYXJhbT5cblxuICAgICAgICAvLyBOb3JtYWxpemUgdGhlIG5hbWUgdG8gbG93ZXJjYXNlXG4gICAgICAgIGh1Yk5hbWUgPSBodWJOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgdmFyIHByb3h5ID0gdGhpcy5wcm94aWVzW2h1Yk5hbWVdO1xuICAgICAgICBpZiAoIXByb3h5KSB7XG4gICAgICAgICAgICBwcm94eSA9IGh1YlByb3h5KHRoaXMsIGh1Yk5hbWUpO1xuICAgICAgICAgICAgdGhpcy5wcm94aWVzW2h1Yk5hbWVdID0gcHJveHk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZWdpc3RlclN1YnNjcmliZWRIdWJzKCk7XG5cbiAgICAgICAgcmV0dXJuIHByb3h5O1xuICAgIH07XG5cbiAgICBodWJDb25uZWN0aW9uLmZuLmluaXQucHJvdG90eXBlID0gaHViQ29ubmVjdGlvbi5mbjtcblxuICAgICQuaHViQ29ubmVjdGlvbiA9IGh1YkNvbm5lY3Rpb247XG5cbn0od2luZG93LmpRdWVyeSwgd2luZG93KSk7XG4vKiBqcXVlcnkuc2lnbmFsUi52ZXJzaW9uLmpzICovXG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBPcGVuIFRlY2hub2xvZ2llcywgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBTZWUgTGljZW5zZS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG4vKmdsb2JhbCB3aW5kb3c6ZmFsc2UgKi9cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJqcXVlcnkuc2lnbmFsUi5jb3JlLmpzXCIgLz5cbihmdW5jdGlvbiAoJCwgdW5kZWZpbmVkKSB7XG4gICAgJC5zaWduYWxSLnZlcnNpb24gPSBcIjIuMi4wXCI7XG59KHdpbmRvdy5qUXVlcnkpKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdTaWduYWxSJywgW10pXHJcbi5jb25zdGFudCgnJCcsIHdpbmRvdy5qUXVlcnkpXHJcbi5mYWN0b3J5KCdIdWInLCBbJyQnLCBmdW5jdGlvbiAoJCkge1xyXG5cdC8vVGhpcyB3aWxsIGFsbG93IHNhbWUgY29ubmVjdGlvbiB0byBiZSB1c2VkIGZvciBhbGwgSHVic1xyXG5cdC8vSXQgYWxzbyBrZWVwcyBjb25uZWN0aW9uIGFzIHNpbmdsZXRvbi5cclxuXHR2YXIgZ2xvYmFsQ29ubmVjdGlvbnMgPSBbXTtcclxuXHJcblx0ZnVuY3Rpb24gaW5pdE5ld0Nvbm5lY3Rpb24ob3B0aW9ucykge1xyXG5cdFx0dmFyIGNvbm5lY3Rpb24gPSBudWxsO1xyXG5cdFx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yb290UGF0aCkge1xyXG5cdFx0XHRjb25uZWN0aW9uID0gJC5odWJDb25uZWN0aW9uKG9wdGlvbnMucm9vdFBhdGgsIHsgdXNlRGVmYXVsdFBhdGg6IGZhbHNlIH0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y29ubmVjdGlvbiA9ICQuaHViQ29ubmVjdGlvbigpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbm5lY3Rpb24ubG9nZ2luZyA9IChvcHRpb25zICYmIG9wdGlvbnMubG9nZ2luZyA/IHRydWUgOiBmYWxzZSk7XHJcblx0XHRyZXR1cm4gY29ubmVjdGlvbjtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldENvbm5lY3Rpb24ob3B0aW9ucykge1xyXG5cdFx0dmFyIHVzZVNoYXJlZENvbm5lY3Rpb24gPSAhKG9wdGlvbnMgJiYgb3B0aW9ucy51c2VTaGFyZWRDb25uZWN0aW9uID09PSBmYWxzZSk7XHJcblx0XHRpZiAodXNlU2hhcmVkQ29ubmVjdGlvbikge1xyXG5cdFx0XHRyZXR1cm4gdHlwZW9mIGdsb2JhbENvbm5lY3Rpb25zW29wdGlvbnMucm9vdFBhdGhdID09PSAndW5kZWZpbmVkJyA/XHJcblx0XHRcdGdsb2JhbENvbm5lY3Rpb25zW29wdGlvbnMucm9vdFBhdGhdID0gaW5pdE5ld0Nvbm5lY3Rpb24ob3B0aW9ucykgOlxyXG5cdFx0XHRnbG9iYWxDb25uZWN0aW9uc1tvcHRpb25zLnJvb3RQYXRoXTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gaW5pdE5ld0Nvbm5lY3Rpb24ob3B0aW9ucyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZnVuY3Rpb24gKGh1Yk5hbWUsIG9wdGlvbnMpIHtcclxuXHRcdHZhciBIdWIgPSB0aGlzO1xyXG5cclxuXHRcdEh1Yi5jb25uZWN0aW9uID0gZ2V0Q29ubmVjdGlvbihvcHRpb25zKTtcclxuXHRcdEh1Yi5wcm94eSA9IEh1Yi5jb25uZWN0aW9uLmNyZWF0ZUh1YlByb3h5KGh1Yk5hbWUpO1xyXG5cclxuXHRcdEh1Yi5vbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcclxuXHRcdFx0SHViLnByb3h5Lm9uKGV2ZW50LCBmbik7XHJcblx0XHR9O1xyXG5cdFx0SHViLmludm9rZSA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZ3MpIHtcclxuXHRcdFx0cmV0dXJuIEh1Yi5wcm94eS5pbnZva2UuYXBwbHkoSHViLnByb3h5LCBhcmd1bWVudHMpXHJcblx0XHR9O1xyXG5cdFx0SHViLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdEh1Yi5jb25uZWN0aW9uLnN0b3AoKTtcclxuXHRcdH07XHJcblx0XHRIdWIuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIEh1Yi5jb25uZWN0aW9uLnN0YXJ0KG9wdGlvbnMudHJhbnNwb3J0ID8geyB0cmFuc3BvcnQ6IG9wdGlvbnMudHJhbnNwb3J0IH0gOiBudWxsKTtcclxuXHRcdH07XHJcblxyXG5cdFx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5saXN0ZW5lcnMpIHtcclxuXHRcdFx0YW5ndWxhci5mb3JFYWNoKG9wdGlvbnMubGlzdGVuZXJzLCBmdW5jdGlvbiAoZm4sIGV2ZW50KSB7XHJcblx0XHRcdFx0SHViLm9uKGV2ZW50LCBmbik7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5tZXRob2RzKSB7XHJcblx0XHRcdGFuZ3VsYXIuZm9yRWFjaChvcHRpb25zLm1ldGhvZHMsIGZ1bmN0aW9uIChtZXRob2QpIHtcclxuXHRcdFx0XHRIdWJbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdHZhciBhcmdzID0gJC5tYWtlQXJyYXkoYXJndW1lbnRzKTtcclxuXHRcdFx0XHRcdGFyZ3MudW5zaGlmdChtZXRob2QpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIEh1Yi5pbnZva2UuYXBwbHkoSHViLCBhcmdzKTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdGlmIChvcHRpb25zICYmIG9wdGlvbnMucXVlcnlQYXJhbXMpIHtcclxuXHRcdFx0SHViLmNvbm5lY3Rpb24ucXMgPSBvcHRpb25zLnF1ZXJ5UGFyYW1zO1xyXG5cdFx0fVxyXG5cdFx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5lcnJvckhhbmRsZXIpIHtcclxuXHRcdFx0SHViLmNvbm5lY3Rpb24uZXJyb3Iob3B0aW9ucy5lcnJvckhhbmRsZXIpO1xyXG5cdFx0fVxyXG4gICAgICAgIC8vREVQUkVDQVRFRFxyXG5cdFx0Ly9BbGxvdyBmb3IgdGhlIHVzZXIgb2YgdGhlIGh1YiB0byBlYXNpbHkgaW1wbGVtZW50IGFjdGlvbnMgdXBvbiBkaXNjb25uZWN0ZWQuXHJcblx0XHQvL2UuZy4gOiBMYXB0b3AvUEMgc2xlZXAgYW5kIHJlb3Blbiwgb25lIG1pZ2h0IHdhbnQgdG8gYXV0b21hdGljYWxseSByZWNvbm5lY3QgXHJcblx0XHQvL2J5IHVzaW5nIHRoZSBkaXNjb25uZWN0ZWQgZXZlbnQgb24gdGhlIGNvbm5lY3Rpb24gYXMgdGhlIHN0YXJ0aW5nIHBvaW50LlxyXG5cdFx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5odWJEaXNjb25uZWN0ZWQpIHtcclxuXHRcdCAgICBIdWIuY29ubmVjdGlvbi5kaXNjb25uZWN0ZWQob3B0aW9ucy5odWJEaXNjb25uZWN0ZWQpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5zdGF0ZUNoYW5nZWQpIHtcclxuXHRcdCAgICBIdWIuY29ubmVjdGlvbi5zdGF0ZUNoYW5nZWQob3B0aW9ucy5zdGF0ZUNoYW5nZWQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vQWRkaW5nIGFkZGl0aW9uYWwgcHJvcGVydHkgb2YgcHJvbWlzZSBhbGxvd3MgdG8gYWNjZXNzIGl0IGluIHJlc3Qgb2YgdGhlIGFwcGxpY2F0aW9uLlxyXG5cdFx0SHViLnByb21pc2UgPSBIdWIuY29ubmVjdCgpO1xyXG5cdFx0cmV0dXJuIEh1YjtcclxuXHR9O1xyXG59XSk7XHJcbiIsIihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBOb2RlL0NvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2FuZ3VsYXInKSwgcmVxdWlyZSgnQ2hhcnQuanMnKSk7XG4gIH0gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICBkZWZpbmUoWydhbmd1bGFyJywgJ2NoYXJ0J10sIGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGZhY3RvcnkoYW5ndWxhciwgQ2hhcnQpO1xuICB9XG59KGZ1bmN0aW9uIChhbmd1bGFyLCBDaGFydCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgQ2hhcnQuZGVmYXVsdHMuZ2xvYmFsLnJlc3BvbnNpdmUgPSB0cnVlO1xuICBDaGFydC5kZWZhdWx0cy5nbG9iYWwubXVsdGlUb29sdGlwVGVtcGxhdGUgPSAnPCVpZiAoZGF0YXNldExhYmVsKXslPjwlPWRhdGFzZXRMYWJlbCU+OiA8JX0lPjwlPSB2YWx1ZSAlPic7XG5cbiAgQ2hhcnQuZGVmYXVsdHMuZ2xvYmFsLmNvbG91cnMgPSBbXG4gICAgJyM5N0JCQ0QnLCAvLyBibHVlXG4gICAgJyNEQ0RDREMnLCAvLyBsaWdodCBncmV5XG4gICAgJyNGNzQ2NEEnLCAvLyByZWRcbiAgICAnIzQ2QkZCRCcsIC8vIGdyZWVuXG4gICAgJyNGREI0NUMnLCAvLyB5ZWxsb3dcbiAgICAnIzk0OUZCMScsIC8vIGdyZXlcbiAgICAnIzRENTM2MCcgIC8vIGRhcmsgZ3JleVxuICBdO1xuXG4gIHZhciB1c2luZ0V4Y2FudmFzID0gdHlwZW9mIHdpbmRvdy5HX3ZtbENhbnZhc01hbmFnZXIgPT09ICdvYmplY3QnICYmXG4gICAgd2luZG93Lkdfdm1sQ2FudmFzTWFuYWdlciAhPT0gbnVsbCAmJlxuICAgIHR5cGVvZiB3aW5kb3cuR192bWxDYW52YXNNYW5hZ2VyLmluaXRFbGVtZW50ID09PSAnZnVuY3Rpb24nO1xuXG4gIGlmICh1c2luZ0V4Y2FudmFzKSBDaGFydC5kZWZhdWx0cy5nbG9iYWwuYW5pbWF0aW9uID0gZmFsc2U7XG5cbiAgcmV0dXJuIGFuZ3VsYXIubW9kdWxlKCdjaGFydC5qcycsIFtdKVxuICAgIC5wcm92aWRlcignQ2hhcnRKcycsIENoYXJ0SnNQcm92aWRlcilcbiAgICAuZmFjdG9yeSgnQ2hhcnRKc0ZhY3RvcnknLCBbJ0NoYXJ0SnMnLCAnJHRpbWVvdXQnLCBDaGFydEpzRmFjdG9yeV0pXG4gICAgLmRpcmVjdGl2ZSgnY2hhcnRCYXNlJywgWydDaGFydEpzRmFjdG9yeScsIGZ1bmN0aW9uIChDaGFydEpzRmFjdG9yeSkgeyByZXR1cm4gbmV3IENoYXJ0SnNGYWN0b3J5KCk7IH1dKVxuICAgIC5kaXJlY3RpdmUoJ2NoYXJ0TGluZScsIFsnQ2hhcnRKc0ZhY3RvcnknLCBmdW5jdGlvbiAoQ2hhcnRKc0ZhY3RvcnkpIHsgcmV0dXJuIG5ldyBDaGFydEpzRmFjdG9yeSgnTGluZScpOyB9XSlcbiAgICAuZGlyZWN0aXZlKCdjaGFydEJhcicsIFsnQ2hhcnRKc0ZhY3RvcnknLCBmdW5jdGlvbiAoQ2hhcnRKc0ZhY3RvcnkpIHsgcmV0dXJuIG5ldyBDaGFydEpzRmFjdG9yeSgnQmFyJyk7IH1dKVxuICAgIC5kaXJlY3RpdmUoJ2NoYXJ0UmFkYXInLCBbJ0NoYXJ0SnNGYWN0b3J5JywgZnVuY3Rpb24gKENoYXJ0SnNGYWN0b3J5KSB7IHJldHVybiBuZXcgQ2hhcnRKc0ZhY3RvcnkoJ1JhZGFyJyk7IH1dKVxuICAgIC5kaXJlY3RpdmUoJ2NoYXJ0RG91Z2hudXQnLCBbJ0NoYXJ0SnNGYWN0b3J5JywgZnVuY3Rpb24gKENoYXJ0SnNGYWN0b3J5KSB7IHJldHVybiBuZXcgQ2hhcnRKc0ZhY3RvcnkoJ0RvdWdobnV0Jyk7IH1dKVxuICAgIC5kaXJlY3RpdmUoJ2NoYXJ0UGllJywgWydDaGFydEpzRmFjdG9yeScsIGZ1bmN0aW9uIChDaGFydEpzRmFjdG9yeSkgeyByZXR1cm4gbmV3IENoYXJ0SnNGYWN0b3J5KCdQaWUnKTsgfV0pXG4gICAgLmRpcmVjdGl2ZSgnY2hhcnRQb2xhckFyZWEnLCBbJ0NoYXJ0SnNGYWN0b3J5JywgZnVuY3Rpb24gKENoYXJ0SnNGYWN0b3J5KSB7IHJldHVybiBuZXcgQ2hhcnRKc0ZhY3RvcnkoJ1BvbGFyQXJlYScpOyB9XSk7XG5cbiAgLyoqXG4gICAqIFdyYXBwZXIgZm9yIGNoYXJ0LmpzXG4gICAqIEFsbG93cyBjb25maWd1cmluZyBjaGFydCBqcyB1c2luZyB0aGUgcHJvdmlkZXJcbiAgICpcbiAgICogYW5ndWxhci5tb2R1bGUoJ215TW9kdWxlJywgWydjaGFydC5qcyddKS5jb25maWcoZnVuY3Rpb24oQ2hhcnRKc1Byb3ZpZGVyKSB7XG4gICAqICAgQ2hhcnRKc1Byb3ZpZGVyLnNldE9wdGlvbnMoeyByZXNwb25zaXZlOiB0cnVlIH0pO1xuICAgKiAgIENoYXJ0SnNQcm92aWRlci5zZXRPcHRpb25zKCdMaW5lJywgeyByZXNwb25zaXZlOiBmYWxzZSB9KTtcbiAgICogfSkpKVxuICAgKi9cbiAgZnVuY3Rpb24gQ2hhcnRKc1Byb3ZpZGVyICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHt9O1xuICAgIHZhciBDaGFydEpzID0ge1xuICAgICAgQ2hhcnQ6IENoYXJ0LFxuICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgdmFyIHR5cGVPcHRpb25zID0gdHlwZSAmJiBvcHRpb25zW3R5cGVdIHx8IHt9O1xuICAgICAgICByZXR1cm4gYW5ndWxhci5leHRlbmQoe30sIG9wdGlvbnMsIHR5cGVPcHRpb25zKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWxsb3cgdG8gc2V0IGdsb2JhbCBvcHRpb25zIGR1cmluZyBjb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgdGhpcy5zZXRPcHRpb25zID0gZnVuY3Rpb24gKHR5cGUsIGN1c3RvbU9wdGlvbnMpIHtcbiAgICAgIC8vIElmIG5vIHR5cGUgd2FzIHNwZWNpZmllZCBzZXQgb3B0aW9uIGZvciB0aGUgZ2xvYmFsIG9iamVjdFxuICAgICAgaWYgKCEgY3VzdG9tT3B0aW9ucykge1xuICAgICAgICBjdXN0b21PcHRpb25zID0gdHlwZTtcbiAgICAgICAgb3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKG9wdGlvbnMsIGN1c3RvbU9wdGlvbnMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBTZXQgb3B0aW9ucyBmb3IgdGhlIHNwZWNpZmljIGNoYXJ0XG4gICAgICBvcHRpb25zW3R5cGVdID0gYW5ndWxhci5leHRlbmQob3B0aW9uc1t0eXBlXSB8fCB7fSwgY3VzdG9tT3B0aW9ucyk7XG4gICAgfTtcblxuICAgIHRoaXMuJGdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBDaGFydEpzO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBDaGFydEpzRmFjdG9yeSAoQ2hhcnRKcywgJHRpbWVvdXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhcnQgKHR5cGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQ0EnLFxuICAgICAgICBzY29wZToge1xuICAgICAgICAgIGRhdGE6ICc9PycsXG4gICAgICAgICAgbGFiZWxzOiAnPT8nLFxuICAgICAgICAgIG9wdGlvbnM6ICc9PycsXG4gICAgICAgICAgc2VyaWVzOiAnPT8nLFxuICAgICAgICAgIGNvbG91cnM6ICc9PycsXG4gICAgICAgICAgZ2V0Q29sb3VyOiAnPT8nLFxuICAgICAgICAgIGNoYXJ0VHlwZTogJz0nLFxuICAgICAgICAgIGxlZ2VuZDogJ0AnLFxuICAgICAgICAgIGNsaWNrOiAnPT8nLFxuICAgICAgICAgIGhvdmVyOiAnPT8nLFxuXG4gICAgICAgICAgY2hhcnREYXRhOiAnPT8nLFxuICAgICAgICAgIGNoYXJ0TGFiZWxzOiAnPT8nLFxuICAgICAgICAgIGNoYXJ0T3B0aW9uczogJz0/JyxcbiAgICAgICAgICBjaGFydFNlcmllczogJz0/JyxcbiAgICAgICAgICBjaGFydENvbG91cnM6ICc9PycsXG4gICAgICAgICAgY2hhcnRMZWdlbmQ6ICdAJyxcbiAgICAgICAgICBjaGFydENsaWNrOiAnPT8nLFxuICAgICAgICAgIGNoYXJ0SG92ZXI6ICc9PydcbiAgICAgICAgfSxcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtLyosIGF0dHJzICovKSB7XG4gICAgICAgICAgdmFyIGNoYXJ0LCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBjb250YWluZXIuY2xhc3NOYW1lID0gJ2NoYXJ0LWNvbnRhaW5lcic7XG4gICAgICAgICAgZWxlbS5yZXBsYWNlV2l0aChjb250YWluZXIpO1xuICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtWzBdKTtcblxuICAgICAgICAgIGlmICh1c2luZ0V4Y2FudmFzKSB3aW5kb3cuR192bWxDYW52YXNNYW5hZ2VyLmluaXRFbGVtZW50KGVsZW1bMF0pO1xuXG4gICAgICAgICAgWydkYXRhJywgJ2xhYmVscycsICdvcHRpb25zJywgJ3NlcmllcycsICdjb2xvdXJzJywgJ2xlZ2VuZCcsICdjbGljaycsICdob3ZlciddLmZvckVhY2goZGVwcmVjYXRlZCk7XG4gICAgICAgICAgZnVuY3Rpb24gYWxpYXNWYXIgKGZyb21OYW1lLCB0b05hbWUpIHtcbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaChmcm9tTmFtZSwgZnVuY3Rpb24gKG5ld1ZhbCkge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIG5ld1ZhbCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgICAgICAgICAgc2NvcGVbdG9OYW1lXSA9IG5ld1ZhbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvKiBwcm92aWRlIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgdG8gXCJvbGRcIiBkaXJlY3RpdmUgbmFtZXMsIGJ5XG4gICAgICAgICAgICogaGF2aW5nIGFuIGFsaWFzIHBvaW50IGZyb20gdGhlIG5ldyBuYW1lcyB0byB0aGUgb2xkIG5hbWVzLiAqL1xuICAgICAgICAgIGFsaWFzVmFyKCdjaGFydERhdGEnLCAnZGF0YScpO1xuICAgICAgICAgIGFsaWFzVmFyKCdjaGFydExhYmVscycsICdsYWJlbHMnKTtcbiAgICAgICAgICBhbGlhc1ZhcignY2hhcnRPcHRpb25zJywgJ29wdGlvbnMnKTtcbiAgICAgICAgICBhbGlhc1ZhcignY2hhcnRTZXJpZXMnLCAnc2VyaWVzJyk7XG4gICAgICAgICAgYWxpYXNWYXIoJ2NoYXJ0Q29sb3VycycsICdjb2xvdXJzJyk7XG4gICAgICAgICAgYWxpYXNWYXIoJ2NoYXJ0TGVnZW5kJywgJ2xlZ2VuZCcpO1xuICAgICAgICAgIGFsaWFzVmFyKCdjaGFydENsaWNrJywgJ2NsaWNrJyk7XG4gICAgICAgICAgYWxpYXNWYXIoJ2NoYXJ0SG92ZXInLCAnaG92ZXInKTtcblxuICAgICAgICAgIC8vIE9yZGVyIG9mIHNldHRpbmcgXCJ3YXRjaFwiIG1hdHRlclxuXG4gICAgICAgICAgc2NvcGUuJHdhdGNoKCdkYXRhJywgZnVuY3Rpb24gKG5ld1ZhbCwgb2xkVmFsKSB7XG4gICAgICAgICAgICBpZiAoISBuZXdWYWwgfHwgISBuZXdWYWwubGVuZ3RoIHx8IChBcnJheS5pc0FycmF5KG5ld1ZhbFswXSkgJiYgISBuZXdWYWxbMF0ubGVuZ3RoKSkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGNoYXJ0VHlwZSA9IHR5cGUgfHwgc2NvcGUuY2hhcnRUeXBlO1xuICAgICAgICAgICAgaWYgKCEgY2hhcnRUeXBlKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChjaGFydCkge1xuICAgICAgICAgICAgICBpZiAoY2FuVXBkYXRlQ2hhcnQobmV3VmFsLCBvbGRWYWwpKSByZXR1cm4gdXBkYXRlQ2hhcnQoY2hhcnQsIG5ld1ZhbCwgc2NvcGUsIGVsZW0pO1xuICAgICAgICAgICAgICBjaGFydC5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNyZWF0ZUNoYXJ0KGNoYXJ0VHlwZSk7XG4gICAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgICBzY29wZS4kd2F0Y2goJ3NlcmllcycsIHJlc2V0Q2hhcnQsIHRydWUpO1xuICAgICAgICAgIHNjb3BlLiR3YXRjaCgnbGFiZWxzJywgcmVzZXRDaGFydCwgdHJ1ZSk7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKCdvcHRpb25zJywgcmVzZXRDaGFydCwgdHJ1ZSk7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKCdjb2xvdXJzJywgcmVzZXRDaGFydCwgdHJ1ZSk7XG5cbiAgICAgICAgICBzY29wZS4kd2F0Y2goJ2NoYXJ0VHlwZScsIGZ1bmN0aW9uIChuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICAgICAgaWYgKGlzRW1wdHkobmV3VmFsKSkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZXF1YWxzKG5ld1ZhbCwgb2xkVmFsKSkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGNoYXJ0KSBjaGFydC5kZXN0cm95KCk7XG4gICAgICAgICAgICBjcmVhdGVDaGFydChuZXdWYWwpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChjaGFydCkgY2hhcnQuZGVzdHJveSgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZnVuY3Rpb24gcmVzZXRDaGFydCAobmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICAgIGlmIChpc0VtcHR5KG5ld1ZhbCkpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmVxdWFscyhuZXdWYWwsIG9sZFZhbCkpIHJldHVybjtcbiAgICAgICAgICAgIHZhciBjaGFydFR5cGUgPSB0eXBlIHx8IHNjb3BlLmNoYXJ0VHlwZTtcbiAgICAgICAgICAgIGlmICghIGNoYXJ0VHlwZSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyBjaGFydC51cGRhdGUoKSBkb2Vzbid0IHdvcmsgZm9yIHNlcmllcyBhbmQgbGFiZWxzXG4gICAgICAgICAgICAvLyBzbyB3ZSBoYXZlIHRvIHJlLWNyZWF0ZSB0aGUgY2hhcnQgZW50aXJlbHlcbiAgICAgICAgICAgIGlmIChjaGFydCkgY2hhcnQuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICBjcmVhdGVDaGFydChjaGFydFR5cGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUNoYXJ0ICh0eXBlKSB7XG4gICAgICAgICAgICBpZiAoaXNSZXNwb25zaXZlKHR5cGUsIHNjb3BlKSAmJiBlbGVtWzBdLmNsaWVudEhlaWdodCA9PT0gMCAmJiBjb250YWluZXIuY2xpZW50SGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlQ2hhcnQodHlwZSk7XG4gICAgICAgICAgICAgIH0sIDUwLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISBzY29wZS5kYXRhIHx8ICEgc2NvcGUuZGF0YS5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgICAgIHNjb3BlLmdldENvbG91ciA9IHR5cGVvZiBzY29wZS5nZXRDb2xvdXIgPT09ICdmdW5jdGlvbicgPyBzY29wZS5nZXRDb2xvdXIgOiBnZXRSYW5kb21Db2xvdXI7XG4gICAgICAgICAgICBzY29wZS5jb2xvdXJzID0gZ2V0Q29sb3Vycyh0eXBlLCBzY29wZSk7XG4gICAgICAgICAgICB2YXIgY3ZzID0gZWxlbVswXSwgY3R4ID0gY3ZzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IEFycmF5LmlzQXJyYXkoc2NvcGUuZGF0YVswXSkgP1xuICAgICAgICAgICAgICBnZXREYXRhU2V0cyhzY29wZS5sYWJlbHMsIHNjb3BlLmRhdGEsIHNjb3BlLnNlcmllcyB8fCBbXSwgc2NvcGUuY29sb3VycykgOlxuICAgICAgICAgICAgICBnZXREYXRhKHNjb3BlLmxhYmVscywgc2NvcGUuZGF0YSwgc2NvcGUuY29sb3Vycyk7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBDaGFydEpzLmdldE9wdGlvbnModHlwZSksIHNjb3BlLm9wdGlvbnMpO1xuICAgICAgICAgICAgY2hhcnQgPSBuZXcgQ2hhcnRKcy5DaGFydChjdHgpW3R5cGVdKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ2NyZWF0ZScsIGNoYXJ0KTtcblxuICAgICAgICAgICAgLy8gQmluZCBldmVudHNcbiAgICAgICAgICAgIGN2cy5vbmNsaWNrID0gc2NvcGUuY2xpY2sgPyBnZXRFdmVudEhhbmRsZXIoc2NvcGUsIGNoYXJ0LCAnY2xpY2snLCBmYWxzZSkgOiBhbmd1bGFyLm5vb3A7XG4gICAgICAgICAgICBjdnMub25tb3VzZW1vdmUgPSBzY29wZS5ob3ZlciA/IGdldEV2ZW50SGFuZGxlcihzY29wZSwgY2hhcnQsICdob3ZlcicsIHRydWUpIDogYW5ndWxhci5ub29wO1xuXG4gICAgICAgICAgICBpZiAoc2NvcGUubGVnZW5kICYmIHNjb3BlLmxlZ2VuZCAhPT0gJ2ZhbHNlJykgc2V0TGVnZW5kKGVsZW0sIGNoYXJ0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBkZXByZWNhdGVkIChhdHRyKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIENoYXJ0SnMuZ2V0T3B0aW9ucygpLmVudiAhPT0gJ3Rlc3QnKSB7XG4gICAgICAgICAgICAgIHZhciB3YXJuID0gdHlwZW9mIGNvbnNvbGUud2FybiA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnNvbGUud2FybiA6IGNvbnNvbGUubG9nO1xuICAgICAgICAgICAgICBpZiAoISEgc2NvcGVbYXR0cl0pIHtcbiAgICAgICAgICAgICAgICB3YXJuLmNhbGwoY29uc29sZSwgJ1wiJXNcIiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi4gJyArXG4gICAgICAgICAgICAgICAgICAnUGxlYXNlIHVzZSBcImNoYXJ0LSVzXCIgaW5zdGVhZC4nLCBhdHRyLCBhdHRyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FuVXBkYXRlQ2hhcnQgKG5ld1ZhbCwgb2xkVmFsKSB7XG4gICAgICBpZiAobmV3VmFsICYmIG9sZFZhbCAmJiBuZXdWYWwubGVuZ3RoICYmIG9sZFZhbC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkobmV3VmFsWzBdKSA/XG4gICAgICAgIG5ld1ZhbC5sZW5ndGggPT09IG9sZFZhbC5sZW5ndGggJiYgbmV3VmFsLmV2ZXJ5KGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50Lmxlbmd0aCA9PT0gb2xkVmFsW2luZGV4XS5sZW5ndGg7IH0pIDpcbiAgICAgICAgICBvbGRWYWwucmVkdWNlKHN1bSwgMCkgPiAwID8gbmV3VmFsLmxlbmd0aCA9PT0gb2xkVmFsLmxlbmd0aCA6IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1bSAoY2FycnksIHZhbCkge1xuICAgICAgcmV0dXJuIGNhcnJ5ICsgdmFsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEV2ZW50SGFuZGxlciAoc2NvcGUsIGNoYXJ0LCBhY3Rpb24sIHRyaWdnZXJPbmx5T25DaGFuZ2UpIHtcbiAgICAgIHZhciBsYXN0U3RhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdmFyIGF0RXZlbnQgPSBjaGFydC5nZXRQb2ludHNBdEV2ZW50IHx8IGNoYXJ0LmdldEJhcnNBdEV2ZW50IHx8IGNoYXJ0LmdldFNlZ21lbnRzQXRFdmVudDtcbiAgICAgICAgaWYgKGF0RXZlbnQpIHtcbiAgICAgICAgICB2YXIgYWN0aXZlUG9pbnRzID0gYXRFdmVudC5jYWxsKGNoYXJ0LCBldnQpO1xuICAgICAgICAgIGlmICh0cmlnZ2VyT25seU9uQ2hhbmdlID09PSBmYWxzZSB8fCBhbmd1bGFyLmVxdWFscyhsYXN0U3RhdGUsIGFjdGl2ZVBvaW50cykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBsYXN0U3RhdGUgPSBhY3RpdmVQb2ludHM7XG4gICAgICAgICAgICBzY29wZVthY3Rpb25dKGFjdGl2ZVBvaW50cywgZXZ0KTtcbiAgICAgICAgICAgIHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb2xvdXJzICh0eXBlLCBzY29wZSkge1xuICAgICAgdmFyIGNvbG91cnMgPSBhbmd1bGFyLmNvcHkoc2NvcGUuY29sb3VycyB8fFxuICAgICAgICBDaGFydEpzLmdldE9wdGlvbnModHlwZSkuY29sb3VycyB8fFxuICAgICAgICBDaGFydC5kZWZhdWx0cy5nbG9iYWwuY29sb3Vyc1xuICAgICAgKTtcbiAgICAgIHdoaWxlIChjb2xvdXJzLmxlbmd0aCA8IHNjb3BlLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgIGNvbG91cnMucHVzaChzY29wZS5nZXRDb2xvdXIoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29sb3Vycy5tYXAoY29udmVydENvbG91cik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29udmVydENvbG91ciAoY29sb3VyKSB7XG4gICAgICBpZiAodHlwZW9mIGNvbG91ciA9PT0gJ29iamVjdCcgJiYgY29sb3VyICE9PSBudWxsKSByZXR1cm4gY29sb3VyO1xuICAgICAgaWYgKHR5cGVvZiBjb2xvdXIgPT09ICdzdHJpbmcnICYmIGNvbG91clswXSA9PT0gJyMnKSByZXR1cm4gZ2V0Q29sb3VyKGhleFRvUmdiKGNvbG91ci5zdWJzdHIoMSkpKTtcbiAgICAgIHJldHVybiBnZXRSYW5kb21Db2xvdXIoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRSYW5kb21Db2xvdXIgKCkge1xuICAgICAgdmFyIGNvbG91ciA9IFtnZXRSYW5kb21JbnQoMCwgMjU1KSwgZ2V0UmFuZG9tSW50KDAsIDI1NSksIGdldFJhbmRvbUludCgwLCAyNTUpXTtcbiAgICAgIHJldHVybiBnZXRDb2xvdXIoY29sb3VyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb2xvdXIgKGNvbG91cikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsbENvbG9yOiByZ2JhKGNvbG91ciwgMC4yKSxcbiAgICAgICAgc3Ryb2tlQ29sb3I6IHJnYmEoY29sb3VyLCAxKSxcbiAgICAgICAgcG9pbnRDb2xvcjogcmdiYShjb2xvdXIsIDEpLFxuICAgICAgICBwb2ludFN0cm9rZUNvbG9yOiAnI2ZmZicsXG4gICAgICAgIHBvaW50SGlnaGxpZ2h0RmlsbDogJyNmZmYnLFxuICAgICAgICBwb2ludEhpZ2hsaWdodFN0cm9rZTogcmdiYShjb2xvdXIsIDAuOClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UmFuZG9tSW50IChtaW4sIG1heCkge1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmdiYSAoY29sb3VyLCBhbHBoYSkge1xuICAgICAgaWYgKHVzaW5nRXhjYW52YXMpIHtcbiAgICAgICAgLy8gcmdiYSBub3Qgc3VwcG9ydGVkIGJ5IElFOFxuICAgICAgICByZXR1cm4gJ3JnYignICsgY29sb3VyLmpvaW4oJywnKSArICcpJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAncmdiYSgnICsgY29sb3VyLmNvbmNhdChhbHBoYSkuam9pbignLCcpICsgJyknO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWRpdDogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTE1MDgxNjQvMTE5MDIzNVxuICAgIGZ1bmN0aW9uIGhleFRvUmdiIChoZXgpIHtcbiAgICAgIHZhciBiaWdpbnQgPSBwYXJzZUludChoZXgsIDE2KSxcbiAgICAgICAgciA9IChiaWdpbnQgPj4gMTYpICYgMjU1LFxuICAgICAgICBnID0gKGJpZ2ludCA+PiA4KSAmIDI1NSxcbiAgICAgICAgYiA9IGJpZ2ludCAmIDI1NTtcblxuICAgICAgcmV0dXJuIFtyLCBnLCBiXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXRhU2V0cyAobGFiZWxzLCBkYXRhLCBzZXJpZXMsIGNvbG91cnMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxhYmVsczogbGFiZWxzLFxuICAgICAgICBkYXRhc2V0czogZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICByZXR1cm4gYW5ndWxhci5leHRlbmQoe30sIGNvbG91cnNbaV0sIHtcbiAgICAgICAgICAgIGxhYmVsOiBzZXJpZXNbaV0sXG4gICAgICAgICAgICBkYXRhOiBpdGVtXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGEgKGxhYmVscywgZGF0YSwgY29sb3Vycykge1xuICAgICAgcmV0dXJuIGxhYmVscy5tYXAoZnVuY3Rpb24gKGxhYmVsLCBpKSB7XG4gICAgICAgIHJldHVybiBhbmd1bGFyLmV4dGVuZCh7fSwgY29sb3Vyc1tpXSwge1xuICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICB2YWx1ZTogZGF0YVtpXSxcbiAgICAgICAgICBjb2xvcjogY29sb3Vyc1tpXS5zdHJva2VDb2xvcixcbiAgICAgICAgICBoaWdobGlnaHQ6IGNvbG91cnNbaV0ucG9pbnRIaWdobGlnaHRTdHJva2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRMZWdlbmQgKGVsZW0sIGNoYXJ0KSB7XG4gICAgICB2YXIgJHBhcmVudCA9IGVsZW0ucGFyZW50KCksXG4gICAgICAgICAgJG9sZExlZ2VuZCA9ICRwYXJlbnQuZmluZCgnY2hhcnQtbGVnZW5kJyksXG4gICAgICAgICAgbGVnZW5kID0gJzxjaGFydC1sZWdlbmQ+JyArIGNoYXJ0LmdlbmVyYXRlTGVnZW5kKCkgKyAnPC9jaGFydC1sZWdlbmQ+JztcbiAgICAgIGlmICgkb2xkTGVnZW5kLmxlbmd0aCkgJG9sZExlZ2VuZC5yZXBsYWNlV2l0aChsZWdlbmQpO1xuICAgICAgZWxzZSAkcGFyZW50LmFwcGVuZChsZWdlbmQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNoYXJ0IChjaGFydCwgdmFsdWVzLCBzY29wZSwgZWxlbSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NvcGUuZGF0YVswXSkpIHtcbiAgICAgICAgY2hhcnQuZGF0YXNldHMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YXNldCwgaSkge1xuICAgICAgICAgIChkYXRhc2V0LnBvaW50cyB8fCBkYXRhc2V0LmJhcnMpLmZvckVhY2goZnVuY3Rpb24gKGRhdGFJdGVtLCBqKSB7XG4gICAgICAgICAgICBkYXRhSXRlbS52YWx1ZSA9IHZhbHVlc1tpXVtqXTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGFydC5zZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzZWdtZW50LCBpKSB7XG4gICAgICAgICAgc2VnbWVudC52YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjaGFydC51cGRhdGUoKTtcbiAgICAgIHNjb3BlLiRlbWl0KCd1cGRhdGUnLCBjaGFydCk7XG4gICAgICBpZiAoc2NvcGUubGVnZW5kICYmIHNjb3BlLmxlZ2VuZCAhPT0gJ2ZhbHNlJykgc2V0TGVnZW5kKGVsZW0sIGNoYXJ0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0VtcHR5ICh2YWx1ZSkge1xuICAgICAgcmV0dXJuICEgdmFsdWUgfHxcbiAgICAgICAgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmICEgdmFsdWUubGVuZ3RoKSB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzUmVzcG9uc2l2ZSAodHlwZSwgc2NvcGUpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYW5ndWxhci5leHRlbmQoe30sIENoYXJ0LmRlZmF1bHRzLmdsb2JhbCwgQ2hhcnRKcy5nZXRPcHRpb25zKHR5cGUpLCBzY29wZS5vcHRpb25zKTtcbiAgICAgIHJldHVybiBvcHRpb25zLnJlc3BvbnNpdmU7XG4gICAgfVxuICB9XG59KSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
